
TFLITEm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001476c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b6b0  08014900  08014900  00024900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ffb0  0801ffb0  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ffb0  0801ffb0  0002ffb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ffb8  0801ffb8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ffb8  0801ffb8  0002ffb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ffbc  0801ffbc  0002ffbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801ffc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200001e4  080201a4  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000308  080201a4  00030308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   001a31c9  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000d4a2  00000000  00000000  001d33dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000060a8  00000000  00000000  001e0880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005e88  00000000  00000000  001e6928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d00d  00000000  00000000  001ec7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00034aef  00000000  00000000  002197bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00181454  00000000  00000000  0024e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  003cf700  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001c8fc  00000000  00000000  003cf77c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080148e4 	.word	0x080148e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080148e4 	.word	0x080148e4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9ac 	b.w	8000fd8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f840 	bl	8000d0c <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff2b 	bl	8000afc <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <__aeabi_d2ulz+0x3c>)
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca1 	bl	8000618 <__aeabi_dmul>
 8000cd6:	f000 f981 	bl	8000fdc <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc22 	bl	8000524 <__aeabi_ui2d>
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <__aeabi_d2ulz+0x40>)
 8000ce4:	f7ff fc98 	bl	8000618 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fada 	bl	80002a8 <__aeabi_dsub>
 8000cf4:	f000 f972 	bl	8000fdc <__aeabi_d2uiz>
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	4310      	orrs	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	bdd0      	pop	{r4, r6, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	3df00000 	.word	0x3df00000
 8000d08:	41f00000 	.word	0x41f00000

08000d0c <__udivmoddi4>:
 8000d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d10:	9e08      	ldr	r6, [sp, #32]
 8000d12:	4604      	mov	r4, r0
 8000d14:	4688      	mov	r8, r1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d14b      	bne.n	8000db2 <__udivmoddi4+0xa6>
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	4615      	mov	r5, r2
 8000d1e:	d967      	bls.n	8000df0 <__udivmoddi4+0xe4>
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	b14a      	cbz	r2, 8000d3a <__udivmoddi4+0x2e>
 8000d26:	f1c2 0720 	rsb	r7, r2, #32
 8000d2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d32:	4095      	lsls	r5, r2
 8000d34:	ea47 0803 	orr.w	r8, r7, r3
 8000d38:	4094      	lsls	r4, r2
 8000d3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3e:	0c23      	lsrs	r3, r4, #16
 8000d40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d44:	fa1f fc85 	uxth.w	ip, r5
 8000d48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d50:	fb07 f10c 	mul.w	r1, r7, ip
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x60>
 8000d58:	18eb      	adds	r3, r5, r3
 8000d5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5e:	f080 811b 	bcs.w	8000f98 <__udivmoddi4+0x28c>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 8118 	bls.w	8000f98 <__udivmoddi4+0x28c>
 8000d68:	3f02      	subs	r7, #2
 8000d6a:	442b      	add	r3, r5
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d80:	45a4      	cmp	ip, r4
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x8c>
 8000d84:	192c      	adds	r4, r5, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x290>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x290>
 8000d94:	3802      	subs	r0, #2
 8000d96:	442c      	add	r4, r5
 8000d98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d9c:	eba4 040c 	sub.w	r4, r4, ip
 8000da0:	2700      	movs	r7, #0
 8000da2:	b11e      	cbz	r6, 8000dac <__udivmoddi4+0xa0>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c6 4300 	strd	r4, r3, [r6]
 8000dac:	4639      	mov	r1, r7
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xbe>
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	f000 80eb 	beq.w	8000f92 <__udivmoddi4+0x286>
 8000dbc:	2700      	movs	r7, #0
 8000dbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	4639      	mov	r1, r7
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f783 	clz	r7, r3
 8000dce:	2f00      	cmp	r7, #0
 8000dd0:	d147      	bne.n	8000e62 <__udivmoddi4+0x156>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd0>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80fa 	bhi.w	8000fd0 <__udivmoddi4+0x2c4>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	4698      	mov	r8, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa0>
 8000dea:	e9c6 4800 	strd	r4, r8, [r6]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa0>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xe8>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 808f 	bne.w	8000f1c <__udivmoddi4+0x210>
 8000dfe:	1b49      	subs	r1, r1, r5
 8000e00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e04:	fa1f f885 	uxth.w	r8, r5
 8000e08:	2701      	movs	r7, #1
 8000e0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb08 f10c 	mul.w	r1, r8, ip
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x124>
 8000e20:	18eb      	adds	r3, r5, r3
 8000e22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x122>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	f200 80cd 	bhi.w	8000fc8 <__udivmoddi4+0x2bc>
 8000e2e:	4684      	mov	ip, r0
 8000e30:	1a59      	subs	r1, r3, r1
 8000e32:	b2a3      	uxth	r3, r4
 8000e34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e40:	fb08 f800 	mul.w	r8, r8, r0
 8000e44:	45a0      	cmp	r8, r4
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0x14c>
 8000e48:	192c      	adds	r4, r5, r4
 8000e4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x14a>
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	f200 80b6 	bhi.w	8000fc2 <__udivmoddi4+0x2b6>
 8000e56:	4618      	mov	r0, r3
 8000e58:	eba4 0408 	sub.w	r4, r4, r8
 8000e5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e60:	e79f      	b.n	8000da2 <__udivmoddi4+0x96>
 8000e62:	f1c7 0c20 	rsb	ip, r7, #32
 8000e66:	40bb      	lsls	r3, r7
 8000e68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e70:	fa01 f407 	lsl.w	r4, r1, r7
 8000e74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e80:	4325      	orrs	r5, r4
 8000e82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e86:	0c2c      	lsrs	r4, r5, #16
 8000e88:	fb08 3319 	mls	r3, r8, r9, r3
 8000e8c:	fa1f fa8e 	uxth.w	sl, lr
 8000e90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e94:	fb09 f40a 	mul.w	r4, r9, sl
 8000e98:	429c      	cmp	r4, r3
 8000e9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ea2:	d90b      	bls.n	8000ebc <__udivmoddi4+0x1b0>
 8000ea4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	f080 8087 	bcs.w	8000fbe <__udivmoddi4+0x2b2>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f240 8084 	bls.w	8000fbe <__udivmoddi4+0x2b2>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4473      	add	r3, lr
 8000ebc:	1b1b      	subs	r3, r3, r4
 8000ebe:	b2ad      	uxth	r5, r5
 8000ec0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ecc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ed0:	45a2      	cmp	sl, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1da>
 8000ed4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000edc:	d26b      	bcs.n	8000fb6 <__udivmoddi4+0x2aa>
 8000ede:	45a2      	cmp	sl, r4
 8000ee0:	d969      	bls.n	8000fb6 <__udivmoddi4+0x2aa>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4474      	add	r4, lr
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	eba4 040a 	sub.w	r4, r4, sl
 8000ef2:	454c      	cmp	r4, r9
 8000ef4:	46c2      	mov	sl, r8
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	d354      	bcc.n	8000fa4 <__udivmoddi4+0x298>
 8000efa:	d051      	beq.n	8000fa0 <__udivmoddi4+0x294>
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d069      	beq.n	8000fd4 <__udivmoddi4+0x2c8>
 8000f00:	ebb1 050a 	subs.w	r5, r1, sl
 8000f04:	eb64 0403 	sbc.w	r4, r4, r3
 8000f08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f0c:	40fd      	lsrs	r5, r7
 8000f0e:	40fc      	lsrs	r4, r7
 8000f10:	ea4c 0505 	orr.w	r5, ip, r5
 8000f14:	e9c6 5400 	strd	r5, r4, [r6]
 8000f18:	2700      	movs	r7, #0
 8000f1a:	e747      	b.n	8000dac <__udivmoddi4+0xa0>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f703 	lsr.w	r7, r0, r3
 8000f24:	4095      	lsls	r5, r2
 8000f26:	fa01 f002 	lsl.w	r0, r1, r2
 8000f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f32:	4338      	orrs	r0, r7
 8000f34:	0c01      	lsrs	r1, r0, #16
 8000f36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f3a:	fa1f f885 	uxth.w	r8, r5
 8000f3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f46:	fb07 f308 	mul.w	r3, r7, r8
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f50:	d907      	bls.n	8000f62 <__udivmoddi4+0x256>
 8000f52:	1869      	adds	r1, r5, r1
 8000f54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f58:	d22f      	bcs.n	8000fba <__udivmoddi4+0x2ae>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d92d      	bls.n	8000fba <__udivmoddi4+0x2ae>
 8000f5e:	3f02      	subs	r7, #2
 8000f60:	4429      	add	r1, r5
 8000f62:	1acb      	subs	r3, r1, r3
 8000f64:	b281      	uxth	r1, r0
 8000f66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb00 f308 	mul.w	r3, r0, r8
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d907      	bls.n	8000f8a <__udivmoddi4+0x27e>
 8000f7a:	1869      	adds	r1, r5, r1
 8000f7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f80:	d217      	bcs.n	8000fb2 <__udivmoddi4+0x2a6>
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d915      	bls.n	8000fb2 <__udivmoddi4+0x2a6>
 8000f86:	3802      	subs	r0, #2
 8000f88:	4429      	add	r1, r5
 8000f8a:	1ac9      	subs	r1, r1, r3
 8000f8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f90:	e73b      	b.n	8000e0a <__udivmoddi4+0xfe>
 8000f92:	4637      	mov	r7, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e709      	b.n	8000dac <__udivmoddi4+0xa0>
 8000f98:	4607      	mov	r7, r0
 8000f9a:	e6e7      	b.n	8000d6c <__udivmoddi4+0x60>
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x8c>
 8000fa0:	4541      	cmp	r1, r8
 8000fa2:	d2ab      	bcs.n	8000efc <__udivmoddi4+0x1f0>
 8000fa4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa8:	eb69 020e 	sbc.w	r2, r9, lr
 8000fac:	3801      	subs	r0, #1
 8000fae:	4613      	mov	r3, r2
 8000fb0:	e7a4      	b.n	8000efc <__udivmoddi4+0x1f0>
 8000fb2:	4660      	mov	r0, ip
 8000fb4:	e7e9      	b.n	8000f8a <__udivmoddi4+0x27e>
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	e795      	b.n	8000ee6 <__udivmoddi4+0x1da>
 8000fba:	4667      	mov	r7, ip
 8000fbc:	e7d1      	b.n	8000f62 <__udivmoddi4+0x256>
 8000fbe:	4681      	mov	r9, r0
 8000fc0:	e77c      	b.n	8000ebc <__udivmoddi4+0x1b0>
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	442c      	add	r4, r5
 8000fc6:	e747      	b.n	8000e58 <__udivmoddi4+0x14c>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	442b      	add	r3, r5
 8000fce:	e72f      	b.n	8000e30 <__udivmoddi4+0x124>
 8000fd0:	4638      	mov	r0, r7
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xda>
 8000fd4:	4637      	mov	r7, r6
 8000fd6:	e6e9      	b.n	8000dac <__udivmoddi4+0xa0>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <__aeabi_d2uiz>:
 8000fdc:	004a      	lsls	r2, r1, #1
 8000fde:	d211      	bcs.n	8001004 <__aeabi_d2uiz+0x28>
 8000fe0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fe4:	d211      	bcs.n	800100a <__aeabi_d2uiz+0x2e>
 8000fe6:	d50d      	bpl.n	8001004 <__aeabi_d2uiz+0x28>
 8000fe8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ff0:	d40e      	bmi.n	8001010 <__aeabi_d2uiz+0x34>
 8000ff2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ffe:	fa23 f002 	lsr.w	r0, r3, r2
 8001002:	4770      	bx	lr
 8001004:	f04f 0000 	mov.w	r0, #0
 8001008:	4770      	bx	lr
 800100a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800100e:	d102      	bne.n	8001016 <__aeabi_d2uiz+0x3a>
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	4770      	bx	lr
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	4770      	bx	lr

0800101c <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3301      	adds	r3, #1
 8001028:	009b      	lsls	r3, r3, #2
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b0d      	cmp	r3, #13
 8001046:	d83b      	bhi.n	80010c0 <TfLiteTypeGetName+0x88>
 8001048:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <TfLiteTypeGetName+0x18>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001089 	.word	0x08001089
 8001054:	0800108d 	.word	0x0800108d
 8001058:	08001095 	.word	0x08001095
 800105c:	08001099 	.word	0x08001099
 8001060:	080010a1 	.word	0x080010a1
 8001064:	080010b5 	.word	0x080010b5
 8001068:	080010a9 	.word	0x080010a9
 800106c:	08001091 	.word	0x08001091
 8001070:	080010ad 	.word	0x080010ad
 8001074:	0800109d 	.word	0x0800109d
 8001078:	080010b9 	.word	0x080010b9
 800107c:	080010bd 	.word	0x080010bd
 8001080:	080010b1 	.word	0x080010b1
 8001084:	080010a5 	.word	0x080010a5
    case kTfLiteNoType:
      return "NOTYPE";
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <TfLiteTypeGetName+0x98>)
 800108a:	e01a      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat32:
      return "FLOAT32";
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <TfLiteTypeGetName+0x9c>)
 800108e:	e018      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt16:
      return "INT16";
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <TfLiteTypeGetName+0xa0>)
 8001092:	e016      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt32:
      return "INT32";
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <TfLiteTypeGetName+0xa4>)
 8001096:	e014      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteUInt8:
      return "UINT8";
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <TfLiteTypeGetName+0xa8>)
 800109a:	e012      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt8:
      return "INT8";
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <TfLiteTypeGetName+0xac>)
 800109e:	e010      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt64:
      return "INT64";
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <TfLiteTypeGetName+0xb0>)
 80010a2:	e00e      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteUInt64:
      return "UINT64";
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <TfLiteTypeGetName+0xb4>)
 80010a6:	e00c      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteBool:
      return "BOOL";
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <TfLiteTypeGetName+0xb8>)
 80010aa:	e00a      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <TfLiteTypeGetName+0xbc>)
 80010ae:	e008      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <TfLiteTypeGetName+0xc0>)
 80010b2:	e006      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteString:
      return "STRING";
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <TfLiteTypeGetName+0xc4>)
 80010b6:	e004      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat16:
      return "FLOAT16";
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <TfLiteTypeGetName+0xc8>)
 80010ba:	e002      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat64:
      return "FLOAT64";
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <TfLiteTypeGetName+0xcc>)
 80010be:	e000      	b.n	80010c2 <TfLiteTypeGetName+0x8a>
  }
  return "Unknown type";
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <TfLiteTypeGetName+0xd0>)
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	08014900 	.word	0x08014900
 80010d4:	08014908 	.word	0x08014908
 80010d8:	08014910 	.word	0x08014910
 80010dc:	08014918 	.word	0x08014918
 80010e0:	08014920 	.word	0x08014920
 80010e4:	08014928 	.word	0x08014928
 80010e8:	08014930 	.word	0x08014930
 80010ec:	08014938 	.word	0x08014938
 80010f0:	08014940 	.word	0x08014940
 80010f4:	08014948 	.word	0x08014948
 80010f8:	08014954 	.word	0x08014954
 80010fc:	08014960 	.word	0x08014960
 8001100:	08014968 	.word	0x08014968
 8001104:	08014970 	.word	0x08014970
 8001108:	08014978 	.word	0x08014978

0800110c <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <DebugLog+0x20>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f010 fe85 	bl	8011e2c <fputs>
#endif
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000014 	.word	0x20000014

08001130 <_ZNSt14numeric_limitsIaE3minEv>:
    struct numeric_limits<signed char>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR signed char
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
 8001134:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_ZNSt14numeric_limitsIaE3maxEv>:

      static _GLIBCXX_CONSTEXPR signed char
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
 8001146:	237f      	movs	r3, #127	; 0x7f
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_ZNSt14numeric_limitsIlE3minEv>:
    struct numeric_limits<long>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
 8001156:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
 8001168:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb0 0a67 	vmov.f32	s0, s15
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	7f7fffff 	.word	0x7f7fffff

08001194 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
 8001198:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb0 0a67 	vmov.f32	s0, s15
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <_ZSt3maxIlERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	da01      	bge.n	80011c6 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	e000      	b.n	80011c8 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 80011c6:	687b      	ldr	r3, [r7, #4]
    }
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 80011d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80011d8:	b08c      	sub	sp, #48	; 0x30
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d107      	bne.n	80011f8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80011e8:	f7ff ffb3 	bl	8001152 <_ZNSt14numeric_limitsIlE3minEv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d101      	bne.n	80011f8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001204:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b_64(b);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800120e:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	fb02 f203 	mul.w	r2, r2, r3
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	6a39      	ldr	r1, [r7, #32]
 800121e:	fb01 f303 	mul.w	r3, r1, r3
 8001222:	441a      	add	r2, r3
 8001224:	6a39      	ldr	r1, [r7, #32]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	fba1 3403 	umull	r3, r4, r1, r3
 800122c:	4422      	add	r2, r4
 800122e:	4614      	mov	r4, r2
 8001230:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001234:	e9c7 3404 	strd	r3, r4, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8001238:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f174 0300 	sbcs.w	r3, r4, #0
 8001242:	db02      	blt.n	800124a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x76>
 8001244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001248:	e000      	b.n	800124c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800124c:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4619      	mov	r1, r3
 8001252:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001256:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800125a:	eb13 0b01 	adds.w	fp, r3, r1
 800125e:	eb44 0c02 	adc.w	ip, r4, r2
 8001262:	465b      	mov	r3, fp
 8001264:	4664      	mov	r4, ip
 8001266:	2b00      	cmp	r3, #0
 8001268:	f174 0200 	sbcs.w	r2, r4, #0
 800126c:	da06      	bge.n	800127c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800126e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	185b      	adds	r3, r3, r1
 8001278:	eb44 0402 	adc.w	r4, r4, r2
 800127c:	f04f 0100 	mov.w	r1, #0
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	0fd9      	lsrs	r1, r3, #31
 8001286:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 800128a:	17e2      	asrs	r2, r4, #31
 800128c:	460b      	mov	r3, r1
 800128e:	4614      	mov	r4, r2
  std::int32_t ab_x2_high32 =
 8001290:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8001292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xce>
 800129a:	f7ff ff63 	bl	8001164 <_ZNSt14numeric_limitsIlE3maxEv>
 800129e:	4603      	mov	r3, r0
 80012a0:	e000      	b.n	80012a4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 80012a2:	68bb      	ldr	r3, [r7, #8]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3730      	adds	r7, #48	; 0x30
 80012a8:	46bd      	mov	sp, r7
 80012aa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80012ae:	bf00      	nop
 80012b0:	c0000001 	.word	0xc0000001

080012b4 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b05      	cmp	r3, #5
 80012c2:	dd08      	ble.n	80012d6 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f010 fa69 	bl	80117a8 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	da01      	bge.n	800130c <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8001308:	f010 fd0a 	bl	8011d20 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	dc01      	bgt.n	800131a <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8001316:	f010 fd03 	bl	8011d20 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b05      	cmp	r3, #5
 8001320:	dd06      	ble.n	8001330 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	e004      	b.n	800133a <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	685b      	ldr	r3, [r3, #4]
  }
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  }

  inline int32_t* DimsData() {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  inline const int32_t* DimsData() const {
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b05      	cmp	r3, #5
 8001350:	dd02      	ble.n	8001358 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	e001      	b.n	800135c <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3304      	adds	r3, #4
  }
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3304      	adds	r3, #4
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ffd8 	bl	8001342 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8001392:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	429a      	cmp	r2, r3
 80013a0:	da0c      	bge.n	80013bc <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	3301      	adds	r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	e7ed      	b.n	8001398 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 80013bc:	697b      	ldr	r3, [r7, #20]
  }
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f7ff ff83 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d001      	beq.n	80013e4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 80013e0:	f010 fc9e 	bl	8011d20 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f7ff ffbf 	bl	8001368 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 80013ea:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db04      	blt.n	80013fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	db01      	blt.n	8001400 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 80013fc:	f010 fc90 	bl	8011d20 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db05      	blt.n	8001412 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3304      	adds	r3, #4
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	db01      	blt.n	8001416 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 8001412:	f010 fc85 	bl	8011d20 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db05      	blt.n	8001428 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3308      	adds	r3, #8
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	db01      	blt.n	800142c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 8001428:	f010 fc7a 	bl	8011d20 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db05      	blt.n	800143e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	330c      	adds	r3, #12
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6a3a      	ldr	r2, [r7, #32]
 800143a:	429a      	cmp	r2, r3
 800143c:	db01      	blt.n	8001442 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 800143e:	f010 fc6f 	bl	8011d20 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3304      	adds	r3, #4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	fb02 f203 	mul.w	r2, r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	3208      	adds	r2, #8
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	fb02 f203 	mul.w	r2, r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	320c      	adds	r2, #12
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	fb02 f203 	mul.w	r2, r2, r3
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	4413      	add	r3, r2
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8001476:	b590      	push	{r4, r7, lr}
 8001478:	b087      	sub	sp, #28
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff ff36 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800148c:	4604      	mov	r4, r0
 800148e:	6839      	ldr	r1, [r7, #0]
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff31 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001496:	4603      	mov	r3, r0
 8001498:	429c      	cmp	r4, r3
 800149a:	d001      	beq.n	80014a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800149c:	f010 fc40 	bl	8011d20 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff ff28 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80014a8:	4603      	mov	r3, r0
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	6839      	ldr	r1, [r7, #0]
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ff22 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80014b4:	4603      	mov	r3, r0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	f107 0214 	add.w	r2, r7, #20
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 f96c 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 80014c8:	4603      	mov	r3, r0
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd90      	pop	{r4, r7, pc}

080014d4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80014e6:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	dc02      	bgt.n	80014f4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	425b      	negs	r3, r3
 80014f2:	e000      	b.n	80014f6 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fe66 	bl	80011d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8001508:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
 800150a:	6939      	ldr	r1, [r7, #16]
 800150c:	4618      	mov	r0, r3
 800150e:	f001 f995 	bl	800283c <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 8001512:	4603      	mov	r3, r0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b0ab      	sub	sp, #172	; 0xac
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800153a:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001542:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800154a:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001552:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800155a:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001562:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	61bb      	str	r3, [r7, #24]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800157c:	6838      	ldr	r0, [r7, #0]
 800157e:	f7ff feaf 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8001582:	4603      	mov	r3, r0
 8001584:	2b04      	cmp	r3, #4
 8001586:	d001      	beq.n	800158c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 8001588:	f010 fbca 	bl	8011d20 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800158c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001590:	f7ff fea6 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8001594:	4603      	mov	r3, r0
 8001596:	2b04      	cmp	r3, #4
 8001598:	d001      	beq.n	800159e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 800159a:	f010 fbc1 	bl	8011d20 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800159e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80015a2:	f7ff fe9d 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d001      	beq.n	80015b0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 80015ac:	f010 fbb8 	bl	8011d20 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dd01      	ble.n	80015bc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 80015b8:	f010 fbb2 	bl	8011d20 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80015bc:	2300      	movs	r3, #0
 80015be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015c2:	2100      	movs	r1, #0
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f7ff ff56 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80015ca:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 80015cc:	2303      	movs	r3, #3
 80015ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015d2:	2103      	movs	r1, #3
 80015d4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80015d8:	f7ff ff4d 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80015dc:	4603      	mov	r3, r0
 80015de:	617b      	str	r3, [r7, #20]
  const int input_height = input_shape.Dims(1);
 80015e0:	2101      	movs	r1, #1
 80015e2:	6838      	ldr	r0, [r7, #0]
 80015e4:	f7ff fe88 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80015e8:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_width = input_shape.Dims(2);
 80015ea:	2102      	movs	r1, #2
 80015ec:	6838      	ldr	r0, [r7, #0]
 80015ee:	f7ff fe83 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80015f2:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_depth = input_shape.Dims(3);
 80015f4:	2103      	movs	r1, #3
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f7ff fe7e 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80015fc:	6538      	str	r0, [r7, #80]	; 0x50
  const int filter_height = filter_shape.Dims(1);
 80015fe:	2101      	movs	r1, #1
 8001600:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001604:	f7ff fe78 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001608:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_width = filter_shape.Dims(2);
 800160a:	2102      	movs	r1, #2
 800160c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001610:	f7ff fe72 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001614:	64b8      	str	r0, [r7, #72]	; 0x48
  const int output_height = output_shape.Dims(1);
 8001616:	2101      	movs	r1, #1
 8001618:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800161c:	f7ff fe6c 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001620:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_width = output_shape.Dims(2);
 8001622:	2102      	movs	r1, #2
 8001624:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001628:	f7ff fe66 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800162c:	6438      	str	r0, [r7, #64]	; 0x40
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800162e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001632:	fb02 f203 	mul.w	r2, r2, r3
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
 800163c:	f010 fb70 	bl	8011d20 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8001640:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001644:	f7ff fe9c 	bl	8001380 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8001648:	4602      	mov	r2, r0
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x138>
 8001650:	f010 fb66 	bl	8011d20 <abort>

  for (int batch = 0; batch < batches; ++batch) {
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800165a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800165e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001660:	429a      	cmp	r2, r3
 8001662:	f280 811a 	bge.w	800189a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800166c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001672:	429a      	cmp	r2, r3
 8001674:	f280 810b 	bge.w	800188e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x372>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800167e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001684:	429a      	cmp	r2, r3
 8001686:	f280 80fc 	bge.w	8001882 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x366>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001690:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001696:	429a      	cmp	r2, r3
 8001698:	f280 80ed 	bge.w	8001876 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x35a>
          for (int m = 0; m < depth_multiplier; ++m) {
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80016a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80016a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f280 80de 	bge.w	800186a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34e>
            const int output_channel = m + in_channel * depth_multiplier;
 80016ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80016bc:	4413      	add	r3, r2
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
            const int in_x_origin = (out_x * stride_width) - pad_width;
 80016c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80016c8:	fb02 f203 	mul.w	r2, r2, r3
 80016cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_y_origin = (out_y * stride_height) - pad_height;
 80016d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80016d8:	fb02 f203 	mul.w	r2, r2, r3
 80016dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
            int32_t acc = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80016f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016f2:	429a      	cmp	r2, r3
 80016f4:	da68      	bge.n	80017c8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ac>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001702:	429a      	cmp	r2, r3
 8001704:	da5a      	bge.n	80017bc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a0>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8001706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001708:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800170c:	fb02 f303 	mul.w	r3, r2, r3
 8001710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001712:	4413      	add	r3, r2
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8001716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001718:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800171c:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8001720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001722:	4413      	add	r3, r2
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8001726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0c      	blt.n	8001746 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 800172c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001730:	429a      	cmp	r2, r3
 8001732:	da08      	bge.n	8001746 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	2b00      	cmp	r3, #0
 8001738:	db05      	blt.n	8001746 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 800173a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800173c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800173e:	429a      	cmp	r2, r3
 8001740:	da01      	bge.n	8001746 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22c>
 8001746:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8001748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    (in_y < input_height);
                if (is_point_inside_image) {
 800174c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001750:	2b00      	cmp	r3, #0
 8001752:	d02d      	beq.n	80017b0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>
                  int32_t input_val = input_data[Offset(
 8001754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001762:	6838      	ldr	r0, [r7, #0]
 8001764:	f7ff fe2f 	bl	80013c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001768:	4603      	mov	r3, r0
 800176a:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 800176c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001770:	4413      	add	r3, r2
 8001772:	f993 3000 	ldrsb.w	r3, [r3]
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
                  int32_t filter_val = filter_data[Offset(
 8001778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001780:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001784:	2100      	movs	r1, #0
 8001786:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800178a:	f7ff fe1c 	bl	80013c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 8001792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001796:	4413      	add	r3, r2
 8001798:	f993 3000 	ldrsb.w	r3, [r3]
 800179c:	623b      	str	r3, [r7, #32]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 800179e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017a2:	4413      	add	r3, r2
 80017a4:	6a3a      	ldr	r2, [r7, #32]
 80017a6:	fb02 f203 	mul.w	r2, r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4413      	add	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80017b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017b4:	3301      	adds	r3, #1
 80017b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017ba:	e79f      	b.n	80016fc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80017bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017c0:	3301      	adds	r3, #1
 80017c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017c6:	e791      	b.n	80016ec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d0>
                }
              }
            }
            if (bias_data) {
 80017c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c6>
              acc += bias_data[output_channel];
 80017d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80017d8:	4413      	add	r3, r2
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4413      	add	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 80017e2:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 80017e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 80017ec:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 80017ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	f7ff fe6b 	bl	80014d4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80017fe:	4603      	mov	r3, r0
 8001800:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001806:	4413      	add	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 800180a:	f107 021c 	add.w	r2, r7, #28
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fcc9 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 800181a:	4603      	mov	r3, r0
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 8001820:	f107 0218 	add.w	r2, r7, #24
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f000 ffb8 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 8001830:	4603      	mov	r3, r0
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 8001836:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 8001838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001840:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001844:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001848:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800184c:	f7ff fdbb 	bl	80013c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 8001854:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001858:	4413      	add	r3, r2
 800185a:	b262      	sxtb	r2, r4
 800185c:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 800185e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001862:	3301      	adds	r3, #1
 8001864:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001868:	e71b      	b.n	80016a2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x186>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800186a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800186e:	3301      	adds	r3, #1
 8001870:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001874:	e70c      	b.n	8001690 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001876:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800187a:	3301      	adds	r3, #1
 800187c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001880:	e6fd      	b.n	800167e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8001882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001886:	3301      	adds	r3, #1
 8001888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800188c:	e6ee      	b.n	800166c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x150>
  for (int batch = 0; batch < batches; ++batch) {
 800188e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001892:	3301      	adds	r3, #1
 8001894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001898:	e6df      	b.n	800165a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
          }
        }
      }
    }
  }
}
 800189a:	bf00      	nop
 800189c:	37a4      	adds	r7, #164	; 0xa4
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}

080018a2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 80018a2:	b590      	push	{r4, r7, lr}
 80018a4:	ed2d 8b02 	vpush	{d8}
 80018a8:	b0a9      	sub	sp, #164	; 0xa4
 80018aa:	af02      	add	r7, sp, #8
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80018ba:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018ca:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018d2:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018da:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018ea:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f6:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80018f8:	68b8      	ldr	r0, [r7, #8]
 80018fa:	f7ff fcf1 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b04      	cmp	r3, #4
 8001902:	d001      	beq.n	8001908 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 8001904:	f010 fa0c 	bl	8011d20 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	f7ff fce9 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800190e:	4603      	mov	r3, r0
 8001910:	2b04      	cmp	r3, #4
 8001912:	d001      	beq.n	8001918 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 8001914:	f010 fa04 	bl	8011d20 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8001918:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800191c:	f7ff fce0 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8001920:	4603      	mov	r3, r0
 8001922:	2b04      	cmp	r3, #4
 8001924:	d001      	beq.n	800192a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 8001926:	f010 f9fb 	bl	8011d20 <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800192a:	2300      	movs	r3, #0
 800192c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001930:	2100      	movs	r1, #0
 8001932:	68b8      	ldr	r0, [r7, #8]
 8001934:	f7ff fd9f 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8001938:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800193a:	2303      	movs	r3, #3
 800193c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001940:	2103      	movs	r1, #3
 8001942:	6838      	ldr	r0, [r7, #0]
 8001944:	f7ff fd97 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8001948:	4603      	mov	r3, r0
 800194a:	613b      	str	r3, [r7, #16]
  const int input_height = input_shape.Dims(1);
 800194c:	2101      	movs	r1, #1
 800194e:	68b8      	ldr	r0, [r7, #8]
 8001950:	f7ff fcd2 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001954:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
 8001956:	2102      	movs	r1, #2
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f7ff fccd 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800195e:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_depth = input_shape.Dims(3);
 8001960:	2103      	movs	r1, #3
 8001962:	68b8      	ldr	r0, [r7, #8]
 8001964:	f7ff fcc8 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001968:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 800196a:	2101      	movs	r1, #1
 800196c:	6838      	ldr	r0, [r7, #0]
 800196e:	f7ff fcc3 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001972:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 8001974:	2102      	movs	r1, #2
 8001976:	6838      	ldr	r0, [r7, #0]
 8001978:	f7ff fcbe 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800197c:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 800197e:	2101      	movs	r1, #1
 8001980:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001984:	f7ff fcb8 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001988:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 800198a:	2102      	movs	r1, #2
 800198c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001990:	f7ff fcb2 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001994:	6338      	str	r0, [r7, #48]	; 0x30
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8001996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001998:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800199a:	fb02 f203 	mul.w	r2, r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x106>
 80019a4:	f010 f9bc 	bl	8011d20 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80019a8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80019ac:	f7ff fce8 	bl	8001380 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11a>
 80019b8:	f010 f9b2 	bl	8011d20 <abort>

  for (int b = 0; b < batches; ++b) {
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f280 80eb 	bge.w	8001ba4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x302>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	429a      	cmp	r2, r3
 80019dc:	f280 80dc 	bge.w	8001b98 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80019e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80019ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f280 80cd 	bge.w	8001b8c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ea>
        for (int ic = 0; ic < input_depth; ++ic) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80019f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80019fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019fe:	429a      	cmp	r2, r3
 8001a00:	f280 80be 	bge.w	8001b80 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2de>
          for (int m = 0; m < depth_multiplier; m++) {
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f280 80af 	bge.w	8001b74 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2d2>
            const int oc = m + ic * depth_multiplier;
 8001a16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a24:	4413      	add	r3, r2
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8001a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a2e:	fb02 f203 	mul.w	r2, r2, r3
 8001a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8001a38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a3e:	fb02 f203 	mul.w	r2, r2, r3
 8001a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
            float total = 0.f;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8001a50:	2300      	movs	r3, #0
 8001a52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	da54      	bge.n	8001b06 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x264>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a64:	429a      	cmp	r2, r3
 8001a66:	da4a      	bge.n	8001afe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25c>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8001a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a72:	4413      	add	r3, r2
 8001a74:	623b      	str	r3, [r7, #32]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8001a76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8001a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a80:	4413      	add	r3, r2
 8001a82:	61fb      	str	r3, [r7, #28]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db35      	blt.n	8001af6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
 8001a8a:	6a3a      	ldr	r2, [r7, #32]
 8001a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	da31      	bge.n	8001af6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db2e      	blt.n	8001af6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	da2a      	bge.n	8001af6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8001aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001aae:	68b8      	ldr	r0, [r7, #8]
 8001ab0:	f7ff fc89 	bl	80013c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	61bb      	str	r3, [r7, #24]
                  float filter_value = filter_data[Offset(
 8001ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ac8:	2100      	movs	r1, #0
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f7ff fc7b 	bl	80013c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001ad0:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001ad8:	4413      	add	r3, r2
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	617b      	str	r3, [r7, #20]
                  total += (input_value * filter_value);
 8001ade:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ae2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aea:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8001af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af8:	3301      	adds	r3, #1
 8001afa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001afc:	e7b0      	b.n	8001a60 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1be>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8001afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b00:	3301      	adds	r3, #1
 8001b02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b04:	e7a6      	b.n	8001a54 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b2>
                }
              }
            }
            float bias_value = 0.0f;
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 8001b0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x280>
              bias_value = bias_data[oc];
 8001b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001b1c:	4413      	add	r3, r2
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 8001b22:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001b26:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b2a:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b36:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b3a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001b3e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001b42:	f7ff fc40 	bl	80013c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001b46:	4603      	mov	r3, r0
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001b4e:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 8001b50:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8001b54:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8001b58:	eeb0 0a48 	vmov.f32	s0, s16
 8001b5c:	f000 fe4d 	bl	80027fa <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8001b60:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8001b64:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 8001b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b72:	e74a      	b.n	8001a0a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x168>
        for (int ic = 0; ic < input_depth; ++ic) {
 8001b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b7e:	e73b      	b.n	80019f8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x156>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b84:	3301      	adds	r3, #1
 8001b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b8a:	e72c      	b.n	80019e6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8001b8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b90:	3301      	adds	r3, #1
 8001b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b96:	e71d      	b.n	80019d4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x132>
  for (int b = 0; b < batches; ++b) {
 8001b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ba2:	e70e      	b.n	80019c2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x120>
          }
        }
      }
    }
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	379c      	adds	r7, #156	; 0x9c
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	ecbd 8b02 	vpop	{d8}
 8001bae:	bd90      	pop	{r4, r7, pc}

08001bb0 <_ZN6tflite13reference_ops14depthwise_conv18DepthwiseConvRoundILNS_27DepthwiseConvOutputRoundingE1EEEllli>:
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
}

template <>
inline int32_t DepthwiseConvRound<DepthwiseConvOutputRounding::kAwayFromZero>(
    int32_t x, int32_t quantized_multiplier, int shift) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7ff fc87 	bl	80014d4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8001bc6:	4603      	mov	r3, r0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af06      	add	r7, sp, #24
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
  return depthwise_conv::DepthwiseConvBasicKernel<
      DepthwiseConvOutputRounding::kAwayFromZero>::Run(params, input_shape,
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	9304      	str	r3, [sp, #16]
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	9303      	str	r3, [sp, #12]
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 feaa 	bl	8002952 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph>
                                                       input_data, filter_shape,
                                                       filter_data, bias_shape,
                                                       bias_data, output_shape,
                                                       output_data);
 8001bfe:	bf00      	nop
}
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	685b      	ldr	r3, [r3, #4]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_ZN6tflite9NumInputsEPK10TfLiteNode>:

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8001c42:	b480      	push	{r7}
 8001c44:	b087      	sub	sp, #28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	fb02 f203 	mul.w	r2, r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	441a      	add	r2, r3
  int total_padding =
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c78:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	bfb8      	it	lt
 8001c84:	425b      	neglt	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	0fda      	lsrs	r2, r3, #31
 8001c90:	4413      	add	r3, r2
 8001c92:	105b      	asrs	r3, r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4603      	mov	r3, r0
 8001cae:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6a3a      	ldr	r2, [r7, #32]
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  switch (padding) {
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d002      	beq.n	8001cca <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d008      	beq.n	8001cda <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x3a>
 8001cc8:	e010      	b.n	8001cec <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4c>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cd8:	e009      	b.n	8001cee <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	441a      	add	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	1ad2      	subs	r2, r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cea:	e000      	b.n	8001cee <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    default:
      return 0;
 8001cec:	2300      	movs	r3, #0
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b088      	sub	sp, #32
 8001cfe:	af02      	add	r7, sp, #8
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8001d08:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d16:	f7ff ffc3 	bl	8001ca0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d1e:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8001d20:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d2e:	f7ff ffb7 	bl	8001ca0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8001d32:	4602      	mov	r2, r0
 8001d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d36:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f107 0214 	add.w	r2, r7, #20
 8001d44:	9201      	str	r2, [sp, #4]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	6839      	ldr	r1, [r7, #0]
 8001d4e:	68b8      	ldr	r0, [r7, #8]
 8001d50:	f7ff ff77 	bl	8001c42 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8001d54:	4602      	mov	r2, r0
  padding_values.height =
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8001d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f107 0214 	add.w	r2, r7, #20
 8001d68:	9201      	str	r2, [sp, #4]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d70:	6a39      	ldr	r1, [r7, #32]
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ff65 	bl	8001c42 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8001d78:	4602      	mov	r2, r0
  padding_values.width =
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	609a      	str	r2, [r3, #8]
  return padding_values;
 8001d84:	bf00      	nop
}
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8001da0:	f00f ffbe 	bl	8011d20 <abort>
  TFLITE_DCHECK(node != nullptr);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8001daa:	f00f ffb9 	bl	8011d20 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	4790      	blx	r2
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff ffd5 	bl	8001d8e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8001e00:	f00f ff8e 	bl	8011d20 <abort>
  TFLITE_DCHECK(node != nullptr);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8001e0a:	f00f ff89 	bl	8011d20 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	4790      	blx	r2
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             TfLiteDepthwiseConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             const TfLiteType data_type, OpData* data) {
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e32:	b09d      	sub	sp, #116	; 0x74
 8001e34:	af0a      	add	r7, sp, #40	; 0x28
 8001e36:	6278      	str	r0, [r7, #36]	; 0x24
 8001e38:	6239      	str	r1, [r7, #32]
 8001e3a:	61fa      	str	r2, [r7, #28]
 8001e3c:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8001e50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00f      	beq.n	8001e7e <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x4e>
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d00a      	beq.n	8001e7e <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x4e>
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	695c      	ldr	r4, [r3, #20]
 8001e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b4>)
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2345      	movs	r3, #69	; 0x45
 8001e74:	4a5c      	ldr	r2, [pc, #368]	; (8001fe8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001e76:	495d      	ldr	r1, [pc, #372]	; (8001fec <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 8001e78:	47a0      	blx	r4
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0ae      	b.n	8001fdc <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d012      	beq.n	8001eae <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x7e>
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	695c      	ldr	r4, [r3, #20]
 8001e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2201      	movs	r2, #1
 8001e96:	9203      	str	r2, [sp, #12]
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	4b55      	ldr	r3, [pc, #340]	; (8001ff0 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1c0>)
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	4b55      	ldr	r3, [pc, #340]	; (8001ff4 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1c4>)
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2346      	movs	r3, #70	; 0x46
 8001ea4:	4a50      	ldr	r2, [pc, #320]	; (8001fe8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001ea6:	4954      	ldr	r1, [pc, #336]	; (8001ff8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1c8>)
 8001ea8:	47a0      	blx	r4
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e096      	b.n	8001fdc <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>

  int unused_output_height, unused_output_width;
  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width, 1, 1, height, width,
      filter_height, filter_width, params->padding, &unused_output_height,
      &unused_output_width);
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	6899      	ldr	r1, [r3, #8]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	685d      	ldr	r5, [r3, #4]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
  data->padding = ComputePaddingHeightWidth(
 8001eba:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8001ebc:	f107 0008 	add.w	r0, r7, #8
 8001ec0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ec4:	9207      	str	r2, [sp, #28]
 8001ec6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001eca:	9206      	str	r2, [sp, #24]
 8001ecc:	9305      	str	r3, [sp, #20]
 8001ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ed0:	9304      	str	r3, [sp, #16]
 8001ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ed4:	9303      	str	r3, [sp, #12]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	9302      	str	r3, [sp, #8]
 8001eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2301      	movs	r3, #1
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	462a      	mov	r2, r5
 8001ee6:	f7ff ff08 	bl	8001cfa <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8001ef4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d06e      	beq.n	8001fda <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1aa>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	2200      	movs	r2, #0
 8001f00:	6a39      	ldr	r1, [r7, #32]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 fb3b 	bl	800657e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8001f08:	6438      	str	r0, [r7, #64]	; 0x40
    TF_LITE_ENSURE(context, input != nullptr);
 8001f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0xf6>
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	695c      	ldr	r4, [r3, #20]
 8001f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1cc>)
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2352      	movs	r3, #82	; 0x52
 8001f1c:	4a32      	ldr	r2, [pc, #200]	; (8001fe8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001f1e:	4933      	ldr	r1, [pc, #204]	; (8001fec <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 8001f20:	47a0      	blx	r4
 8001f22:	2301      	movs	r3, #1
 8001f24:	e05a      	b.n	8001fdc <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	2201      	movs	r2, #1
 8001f2a:	6a39      	ldr	r1, [r7, #32]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 fb26 	bl	800657e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8001f32:	63f8      	str	r0, [r7, #60]	; 0x3c
    TF_LITE_ENSURE(context, filter != nullptr);
 8001f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x120>
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	695c      	ldr	r4, [r3, #20]
 8001f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f40:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1d0>)
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2354      	movs	r3, #84	; 0x54
 8001f46:	4a28      	ldr	r2, [pc, #160]	; (8001fe8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001f48:	4928      	ldr	r1, [pc, #160]	; (8001fec <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 8001f4a:	47a0      	blx	r4
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e045      	b.n	8001fdc <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
    const TfLiteTensor* bias =
        GetOptionalInputTensor(context, node, kBiasTensor);
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	2202      	movs	r2, #2
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fb40 	bl	80065dc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8001f5c:	63b8      	str	r0, [r7, #56]	; 0x38
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	2200      	movs	r2, #0
 8001f62:	6a39      	ldr	r1, [r7, #32]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 fb1a 	bl	800659e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8001f6a:	6378      	str	r0, [r7, #52]	; 0x34
    TF_LITE_ENSURE(context, output != nullptr);
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10a      	bne.n	8001f88 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x158>
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	695c      	ldr	r4, [r3, #20]
 8001f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1d4>)
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2358      	movs	r3, #88	; 0x58
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001f80:	491a      	ldr	r1, [pc, #104]	; (8001fec <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 8001f82:	47a0      	blx	r4
 8001f84:	2301      	movs	r3, #1
 8001f86:	e029      	b.n	8001fdc <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
    int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 8001f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30

    return tflite::PopulateConvolutionQuantizationParams(
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	3310      	adds	r3, #16
 8001f98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f9a:	321c      	adds	r2, #28
 8001f9c:	603a      	str	r2, [r7, #0]
 8001f9e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001fa0:	3120      	adds	r1, #32
 8001fa2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001fa4:	302c      	adds	r0, #44	; 0x2c
 8001fa6:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8001fa8:	3430      	adds	r4, #48	; 0x30
 8001faa:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8001fac:	6a6d      	ldr	r5, [r5, #36]	; 0x24
        context, input, filter, bias, output, params->activation,
        &data->output_multiplier, &data->output_shift,
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels);
 8001fae:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8001fb0:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8001fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fb4:	9208      	str	r2, [sp, #32]
 8001fb6:	9607      	str	r6, [sp, #28]
 8001fb8:	9506      	str	r5, [sp, #24]
 8001fba:	9405      	str	r4, [sp, #20]
 8001fbc:	9004      	str	r0, [sp, #16]
 8001fbe:	9103      	str	r1, [sp, #12]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	9202      	str	r2, [sp, #8]
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f004 fb13 	bl	80065fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	e000      	b.n	8001fdc <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
  }
  return kTfLiteOk;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	374c      	adds	r7, #76	; 0x4c
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe4:	080149c0 	.word	0x080149c0
 8001fe8:	08014988 	.word	0x08014988
 8001fec:	080149a8 	.word	0x080149a8
 8001ff0:	08014a00 	.word	0x08014a00
 8001ff4:	08014a04 	.word	0x08014a04
 8001ff8:	080149e4 	.word	0x080149e4
 8001ffc:	08014a18 	.word	0x08014a18
 8002000:	08014a2c 	.word	0x08014a2c
 8002004:	08014a40 	.word	0x08014a40

08002008 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800201c:	f00f fe80 	bl	8011d20 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002024:	2134      	movs	r1, #52	; 0x34
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	4798      	blx	r3
 800202a:	4603      	mov	r3, r0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b097      	sub	sp, #92	; 0x5c
 8002038:	af06      	add	r7, sp, #24
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8002046:	f00f fe6b 	bl	8011d20 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8002052:	f00f fe65 	bl	8011d20 <abort>

  auto* params =
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  OpData* data = static_cast<OpData*>(node->user_data);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	63bb      	str	r3, [r7, #56]	; 0x38

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f004 fa98 	bl	800659e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800206e:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8002070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x58>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695c      	ldr	r4, [r3, #20]
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4b85      	ldr	r3, [pc, #532]	; (8002294 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2373      	movs	r3, #115	; 0x73
 8002082:	4a85      	ldr	r2, [pc, #532]	; (8002298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002084:	4985      	ldr	r1, [pc, #532]	; (800229c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002086:	47a0      	blx	r4
 8002088:	2301      	movs	r3, #1
 800208a:	e0ff      	b.n	800228c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f004 fa73 	bl	800657e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8002098:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(context, input != nullptr);
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10a      	bne.n	80020b6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x82>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695c      	ldr	r4, [r3, #20]
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4b7e      	ldr	r3, [pc, #504]	; (80022a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2375      	movs	r3, #117	; 0x75
 80020ac:	4a7a      	ldr	r2, [pc, #488]	; (8002298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80020ae:	497b      	ldr	r1, [pc, #492]	; (800229c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 80020b0:	47a0      	blx	r4
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0ea      	b.n	800228c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	6839      	ldr	r1, [r7, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 fa5e 	bl	800657e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80020c2:	62f8      	str	r0, [r7, #44]	; 0x2c
  TF_LITE_ENSURE(context, filter != nullptr);
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695c      	ldr	r4, [r3, #20]
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2377      	movs	r3, #119	; 0x77
 80020d6:	4a70      	ldr	r2, [pc, #448]	; (8002298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80020d8:	4970      	ldr	r1, [pc, #448]	; (800229c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 80020da:	47a0      	blx	r4
 80020dc:	2301      	movs	r3, #1
 80020de:	e0d5      	b.n	800228c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>

  const TfLiteType data_type = input->type;
 80020e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  int width = SizeOfDimension(input, 2);
 80020e8:	2102      	movs	r1, #2
 80020ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020ec:	f7ff fd8b 	bl	8001c06 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80020f0:	6278      	str	r0, [r7, #36]	; 0x24
  int height = SizeOfDimension(input, 1);
 80020f2:	2101      	movs	r1, #1
 80020f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020f6:	f7ff fd86 	bl	8001c06 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80020fa:	6238      	str	r0, [r7, #32]
  int filter_width = SizeOfDimension(filter, 2);
 80020fc:	2102      	movs	r1, #2
 80020fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002100:	f7ff fd81 	bl	8001c06 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8002104:	61f8      	str	r0, [r7, #28]
  int filter_height = SizeOfDimension(filter, 1);
 8002106:	2101      	movs	r1, #1
 8002108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800210a:	f7ff fd7c 	bl	8001c06 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 800210e:	61b8      	str	r0, [r7, #24]

  // Per channel quantization is only needed for int8_t inference. For other
  // quantized types, only a single scale and zero point is needed.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	617b      	str	r3, [r7, #20]
  // Dynamically allocate per-channel quantization parameters.
  data->per_channel_output_multiplier =
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4611      	mov	r1, r2
 8002124:	4798      	blx	r3
 8002126:	4602      	mov	r2, r0
  data->per_channel_output_multiplier =
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	625a      	str	r2, [r3, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4611      	mov	r1, r2
 8002138:	4798      	blx	r3
 800213a:	4602      	mov	r2, r0
  data->per_channel_output_shift =
 800213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b09      	cmp	r3, #9
 8002146:	d17c      	bne.n	8002242 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20e>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800214e:	2b01      	cmp	r3, #1
 8002150:	d013      	beq.n	800217a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x146>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695c      	ldr	r4, [r3, #20]
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800215e:	461a      	mov	r2, r3
 8002160:	2301      	movs	r3, #1
 8002162:	9303      	str	r3, [sp, #12]
 8002164:	9202      	str	r2, [sp, #8]
 8002166:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	4b50      	ldr	r3, [pc, #320]	; (80022ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	238d      	movs	r3, #141	; 0x8d
 8002170:	4a49      	ldr	r2, [pc, #292]	; (8002298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002172:	494f      	ldr	r1, [pc, #316]	; (80022b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 8002174:	47a0      	blx	r4
 8002176:	2301      	movs	r3, #1
 8002178:	e088      	b.n	800228c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    const auto* affine_quantization =
 800217e:	60fb      	str	r3, [r7, #12]
    TF_LITE_ENSURE(context, affine_quantization);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10a      	bne.n	800219c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695c      	ldr	r4, [r3, #20]
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4b49      	ldr	r3, [pc, #292]	; (80022b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2392      	movs	r3, #146	; 0x92
 8002192:	4a41      	ldr	r2, [pc, #260]	; (8002298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002194:	4941      	ldr	r1, [pc, #260]	; (800229c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002196:	47a0      	blx	r4
 8002198:	2301      	movs	r3, #1
 800219a:	e077      	b.n	800228c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x186>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695c      	ldr	r4, [r3, #20]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2393      	movs	r3, #147	; 0x93
 80021b0:	4a39      	ldr	r2, [pc, #228]	; (8002298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80021b2:	493a      	ldr	r1, [pc, #232]	; (800229c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 80021b4:	47a0      	blx	r4
 80021b6:	2301      	movs	r3, #1
 80021b8:	e068      	b.n	800228c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695c      	ldr	r4, [r3, #20]
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2394      	movs	r3, #148	; 0x94
 80021ce:	4a32      	ldr	r2, [pc, #200]	; (8002298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80021d0:	4932      	ldr	r1, [pc, #200]	; (800229c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 80021d2:	47a0      	blx	r4
 80021d4:	2301      	movs	r3, #1
 80021d6:	e059      	b.n	800228c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    TF_LITE_ENSURE(
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d012      	beq.n	8002208 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d00a      	beq.n	8002208 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695c      	ldr	r4, [r3, #20]
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2398      	movs	r3, #152	; 0x98
 80021fe:	4a26      	ldr	r2, [pc, #152]	; (8002298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002200:	4926      	ldr	r1, [pc, #152]	; (800229c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002202:	47a0      	blx	r4
 8002204:	2301      	movs	r3, #1
 8002206:	e041      	b.n	800228c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d014      	beq.n	8002242 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695c      	ldr	r4, [r3, #20]
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	6852      	ldr	r2, [r2, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	9203      	str	r2, [sp, #12]
 800222c:	9302      	str	r3, [sp, #8]
 800222e:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x290>)
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x294>)
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	239a      	movs	r3, #154	; 0x9a
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800223a:	491d      	ldr	r1, [pc, #116]	; (80022b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 800223c:	47a0      	blx	r4
 800223e:	2301      	movs	r3, #1
 8002240:	e024      	b.n	800228c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, width, height,
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002246:	9304      	str	r3, [sp, #16]
 8002248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800224c:	9303      	str	r3, [sp, #12]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	f7ff fde6 	bl	8001e30 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE>
 8002264:	4603      	mov	r3, r0
 8002266:	74fb      	strb	r3, [r7, #19]
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23e>
 800226e:	7cfb      	ldrb	r3, [r7, #19]
 8002270:	e00c      	b.n	800228c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
                                        filter_width, filter_height, data_type,
                                        data));

  data->input_zero_point = input->params.zero_point;
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002278:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002280:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 8002282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3744      	adds	r7, #68	; 0x44
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}
 8002294:	08014a40 	.word	0x08014a40
 8002298:	08014988 	.word	0x08014988
 800229c:	080149a8 	.word	0x080149a8
 80022a0:	08014a18 	.word	0x08014a18
 80022a4:	08014a2c 	.word	0x08014a2c
 80022a8:	08014a54 	.word	0x08014a54
 80022ac:	08014a70 	.word	0x08014a70
 80022b0:	080149e4 	.word	0x080149e4
 80022b4:	08014a8c 	.word	0x08014a8c
 80022b8:	08014aa0 	.word	0x08014aa0
 80022bc:	08014abc 	.word	0x08014abc
 80022c0:	08014adc 	.word	0x08014adc
 80022c4:	08014b60 	.word	0x08014b60
 80022c8:	08014b88 	.word	0x08014b88

080022cc <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteDepthwiseConvParams* params, const OpData& data,
               const TfLiteEvalTensor* input, const TfLiteEvalTensor* filter,
               const TfLiteEvalTensor* bias, TfLiteEvalTensor* output) {
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ce:	b0b5      	sub	sp, #212	; 0xd4
 80022d0:	af06      	add	r7, sp, #24
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7c1b      	ldrb	r3, [r3, #16]
 80022de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80022e2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fcec 	bl	8002cc4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);

  tflite::DepthwiseParams op_params;
  // Padding type is ignored, but still set.
  op_params.padding_type = PaddingType::kSame;
 80022ec:	2301      	movs	r3, #1
 80022ee:	743b      	strb	r3, [r7, #16]
  op_params.padding_values.width = data.padding.width;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	827b      	strh	r3, [r7, #18]
  op_params.padding_values.height = data.padding.height;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	82bb      	strh	r3, [r7, #20]
  op_params.stride_width = params->stride_width;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	b21b      	sxth	r3, r3
 8002306:	837b      	strh	r3, [r7, #26]
  op_params.stride_height = params->stride_height;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	b21b      	sxth	r3, r3
 800230e:	83bb      	strh	r3, [r7, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	b21b      	sxth	r3, r3
 8002316:	83fb      	strh	r3, [r7, #30]
  op_params.dilation_height_factor = params->dilation_height_factor;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	b21b      	sxth	r3, r3
 800231e:	843b      	strh	r3, [r7, #32]
  op_params.depth_multiplier = params->depth_multiplier;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	b21b      	sxth	r3, r3
 8002326:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.float_activation_min = output_activation_min;
 8002328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800232a:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.float_activation_max = output_activation_max;
 800232c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800232e:	647b      	str	r3, [r7, #68]	; 0x44

  tflite::reference_ops::DepthwiseConv(
      op_params, tflite::micro::GetTensorShape(input),
 8002330:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002334:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002338:	4618      	mov	r0, r3
 800233a:	f004 f80c 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 800233e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002342:	f000 fd01 	bl	8002d48 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8002346:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<float>(input),
      tflite::micro::GetTensorShape(filter),
 8002348:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800234c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002350:	4618      	mov	r0, r3
 8002352:	f004 f800 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 8002356:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800235a:	f000 fcf5 	bl	8002d48 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800235e:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<float>(filter),
      tflite::micro::GetTensorShape(bias),
 8002360:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002364:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fff4 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 800236e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002372:	f000 fce9 	bl	8002d48 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8002376:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<float>(bias),
      tflite::micro::GetTensorShape(output),
 8002378:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800237c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002380:	4618      	mov	r0, r3
 8002382:	f003 ffe8 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 8002386:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800238a:	f000 fcec 	bl	8002d66 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800238e:	4603      	mov	r3, r0
 8002390:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002394:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002398:	f107 0010 	add.w	r0, r7, #16
 800239c:	9304      	str	r3, [sp, #16]
 800239e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023a2:	9303      	str	r3, [sp, #12]
 80023a4:	9502      	str	r5, [sp, #8]
 80023a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	9400      	str	r4, [sp, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	4632      	mov	r2, r6
 80023b2:	f7ff fa76 	bl	80018a2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      tflite::micro::GetTensorShape(output),
 80023b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe ff7a 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 80023c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe ff75 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 80023ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe ff70 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 80023d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe ff6b 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<float>(output));
}
 80023de:	bf00      	nop
 80023e0:	37bc      	adds	r7, #188	; 0xbc
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023e6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteDepthwiseConvParams* params,
                             const OpData& data, const TfLiteEvalTensor* input,
                             const TfLiteEvalTensor* filter,
                             const TfLiteEvalTensor* bias,
                             TfLiteEvalTensor* output) {
 80023e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e8:	b0b7      	sub	sp, #220	; 0xdc
 80023ea:	af08      	add	r7, sp, #32
 80023ec:	6178      	str	r0, [r7, #20]
 80023ee:	6139      	str	r1, [r7, #16]
 80023f0:	60fa      	str	r2, [r7, #12]
 80023f2:	60bb      	str	r3, [r7, #8]
  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
 80023f4:	2301      	movs	r3, #1
 80023f6:	763b      	strb	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	837b      	strh	r3, [r7, #26]
  op_params.padding_values.height = data.padding.height;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	b21b      	sxth	r3, r3
 8002406:	83bb      	strh	r3, [r7, #28]
  op_params.stride_width = params->stride_width;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	b21b      	sxth	r3, r3
 800240e:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.stride_height = params->stride_height;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	b21b      	sxth	r3, r3
 8002416:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.dilation_width_factor = params->dilation_width_factor;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	b21b      	sxth	r3, r3
 800241e:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.dilation_height_factor = params->dilation_height_factor;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	b21b      	sxth	r3, r3
 8002426:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.depth_multiplier = params->depth_multiplier;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	b21b      	sxth	r3, r3
 800242e:	857b      	strh	r3, [r7, #42]	; 0x2a
  op_params.input_offset = -data.input_zero_point;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	425b      	negs	r3, r3
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.weights_offset = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.output_offset = data.output_zero_point;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
  // TODO(b/130439627): Use calculated value for clamping.
  op_params.quantized_activation_min = std::numeric_limits<int8_t>::min();
 8002442:	f7fe fe75 	bl	8001130 <_ZNSt14numeric_limitsIaE3minEv>
 8002446:	4603      	mov	r3, r0
 8002448:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
 800244a:	f7fe fe7a 	bl	8001142 <_ZNSt14numeric_limitsIaE3maxEv>
 800244e:	4603      	mov	r3, r0
 8002450:	647b      	str	r3, [r7, #68]	; 0x44

  reference_integer_ops::DepthwiseConvPerChannel(
      op_params, data.per_channel_output_multiplier,
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	6a5c      	ldr	r4, [r3, #36]	; 0x24
      data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800245a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800245e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002462:	4618      	mov	r0, r3
 8002464:	f003 ff77 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 8002468:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800246c:	f000 fc8c 	bl	8002d88 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8002470:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(filter),
 8002472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002476:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800247a:	4618      	mov	r0, r3
 800247c:	f003 ff6b 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 8002480:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002484:	f000 fc80 	bl	8002d88 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8002488:	6078      	str	r0, [r7, #4]
      tflite::micro::GetTensorData<int8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 800248a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800248e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002492:	4618      	mov	r0, r3
 8002494:	f003 ff5f 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 8002498:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800249c:	f000 fc83 	bl	8002da6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80024a0:	6038      	str	r0, [r7, #0]
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 80024a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024a6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 ff53 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 80024b0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80024b4:	f000 fc86 	bl	8002dc4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024be:	f107 0018 	add.w	r0, r7, #24
 80024c2:	9306      	str	r3, [sp, #24]
 80024c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024c8:	9305      	str	r3, [sp, #20]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	9304      	str	r3, [sp, #16]
 80024ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024d2:	9303      	str	r3, [sp, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	9302      	str	r3, [sp, #8]
 80024d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	9600      	str	r6, [sp, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	462a      	mov	r2, r5
 80024e4:	4621      	mov	r1, r4
 80024e6:	f7ff f819 	bl	800151c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      tflite::micro::GetTensorShape(output),
 80024ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fee0 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 80024f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fedb 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 80024fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fed6 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 8002508:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fed1 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
}
 8002512:	bf00      	nop
 8002514:	37bc      	adds	r7, #188	; 0xbc
 8002516:	46bd      	mov	sp, r7
 8002518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800251a <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteDepthwiseConvParams* params, const OpData& data,
                   const TfLiteEvalTensor* input,
                   const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
                   TfLiteEvalTensor* output) {
 800251a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251c:	b0b7      	sub	sp, #220	; 0xdc
 800251e:	af06      	add	r7, sp, #24
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = -data.input_zero_point;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	425b      	negs	r3, r3
 800252e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const int32_t filter_offset = -data.filter_zero_point;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	425b      	negs	r3, r3
 8002538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const int32_t output_offset = data.output_zero_point;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  tflite::DepthwiseParams op_params;
  // Padding type is ignored, but still set.
  op_params.padding_type = PaddingType::kSame;
 8002544:	2301      	movs	r3, #1
 8002546:	753b      	strb	r3, [r7, #20]
  op_params.padding_values.width = data.padding.width;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b21b      	sxth	r3, r3
 800254e:	82fb      	strh	r3, [r7, #22]
  op_params.padding_values.height = data.padding.height;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	b21b      	sxth	r3, r3
 8002556:	833b      	strh	r3, [r7, #24]
  op_params.stride_width = params->stride_width;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	b21b      	sxth	r3, r3
 800255e:	83fb      	strh	r3, [r7, #30]
  op_params.stride_height = params->stride_height;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	b21b      	sxth	r3, r3
 8002566:	843b      	strh	r3, [r7, #32]
  op_params.dilation_width_factor = params->dilation_width_factor;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	b21b      	sxth	r3, r3
 800256e:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.dilation_height_factor = params->dilation_height_factor;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	b21b      	sxth	r3, r3
 8002576:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.depth_multiplier = params->depth_multiplier;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	b21b      	sxth	r3, r3
 800257e:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.quantized_activation_min = data.output_activation_min;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	63fb      	str	r3, [r7, #60]	; 0x3c
  op_params.quantized_activation_max = data.output_activation_max;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.input_offset = input_offset;
 800258c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.weights_offset = filter_offset;
 8002592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.output_offset = output_offset;
 8002598:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.output_multiplier = data.output_multiplier;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	425b      	negs	r3, r3
 80025aa:	63bb      	str	r3, [r7, #56]	; 0x38

  tflite::reference_ops::DepthwiseConv(
      op_params, tflite::micro::GetTensorShape(input),
 80025ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025b0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 fece 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 80025ba:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80025be:	f000 fc12 	bl	8002de6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80025c2:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<uint8_t>(input),
      tflite::micro::GetTensorShape(filter),
 80025c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025c8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fec2 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 80025d2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80025d6:	f000 fc06 	bl	8002de6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80025da:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<uint8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 80025dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025e0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 feb6 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 80025ea:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80025ee:	f000 fbda 	bl	8002da6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80025f2:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 80025f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025f8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 feaa 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 8002602:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8002606:	f000 fbfd 	bl	8002e04 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800260a:	4603      	mov	r3, r0
 800260c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002610:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002614:	f107 0014 	add.w	r0, r7, #20
 8002618:	9304      	str	r3, [sp, #16]
 800261a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800261e:	9303      	str	r3, [sp, #12]
 8002620:	9502      	str	r5, [sp, #8]
 8002622:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	9400      	str	r4, [sp, #0]
 800262a:	4613      	mov	r3, r2
 800262c:	4632      	mov	r2, r6
 800262e:	f7ff facf 	bl	8001bd0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
      tflite::micro::GetTensorShape(output),
 8002632:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fe3c 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 800263c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fe37 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 8002646:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fe32 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 8002650:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fe2d 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<uint8_t>(output));
}
 800265a:	bf00      	nop
 800265c:	37c4      	adds	r7, #196	; 0xc4
 800265e:	46bd      	mov	sp, r7
 8002660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002664 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8002664:	b5b0      	push	{r4, r5, r7, lr}
 8002666:	b08c      	sub	sp, #48	; 0x30
 8002668:	af04      	add	r7, sp, #16
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8002676:	f00f fb53 	bl	8011d20 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 8002682:	f00f fb4d 	bl	8011d20 <abort>

  auto* params =
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	61fb      	str	r3, [r7, #28]
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	61bb      	str	r3, [r7, #24]

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	6839      	ldr	r1, [r7, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fba8 	bl	8001dee <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800269e:	6178      	str	r0, [r7, #20]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fb91 	bl	8001dce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80026ac:	6138      	str	r0, [r7, #16]
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFilterTensor);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	6839      	ldr	r1, [r7, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fb8a 	bl	8001dce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80026ba:	60f8      	str	r0, [r7, #12]
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 80026bc:	6838      	ldr	r0, [r7, #0]
 80026be:	f7ff fab3 	bl	8001c28 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80026c2:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kBiasTensor)
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d107      	bne.n	80026d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x74>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fb7d 	bl	8001dce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80026d4:	4603      	mov	r3, r0
 80026d6:	e000      	b.n	80026da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
 80026d8:	2300      	movs	r3, #0
          : nullptr;
 80026da:	60bb      	str	r3, [r7, #8]

  // TODO(aselle): Consider whether float conv and quantized conv should be
  // separate ops to avoid dispatch overhead here.
  switch (input->type) {  // Already know in/out types are same.
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	7a1b      	ldrb	r3, [r3, #8]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d021      	beq.n	8002728 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
 80026e4:	2b09      	cmp	r3, #9
 80026e6:	d010      	beq.n	800270a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa6>
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d12c      	bne.n	8002746 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe2>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, output);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	9303      	str	r3, [sp, #12]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	9302      	str	r3, [sp, #8]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	f7ff fde2 	bl	80022cc <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>
      break;
 8002708:	e02d      	b.n	8002766 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	9303      	str	r3, [sp, #12]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	9302      	str	r3, [sp, #8]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	f7ff fe60 	bl	80023e6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>
                              output);
      break;
 8002726:	e01e      	b.n	8002766 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, data, input, filter, bias, output);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	9303      	str	r3, [sp, #12]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	6839      	ldr	r1, [r7, #0]
 8002740:	f7ff feeb 	bl	800251a <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>
      break;
 8002744:	e00f      	b.n	8002766 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695c      	ldr	r4, [r3, #20]
 800274a:	687d      	ldr	r5, [r7, #4]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	7a1b      	ldrb	r3, [r3, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fc71 	bl	8001038 <TfLiteTypeGetName>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	7a1b      	ldrb	r3, [r3, #8]
 800275c:	4904      	ldr	r1, [pc, #16]	; (8002770 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10c>)
 800275e:	4628      	mov	r0, r5
 8002760:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>
  }
  return kTfLiteOk;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bdb0      	pop	{r4, r5, r7, pc}
 8002770:	08014bac 	.word	0x08014bac

08002774 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
 8002774:	b4b0      	push	{r4, r5, r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a07      	ldr	r2, [pc, #28]	; (800279c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 8002780:	461c      	mov	r4, r3
 8002782:	4615      	mov	r5, r2
 8002784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002788:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800278c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bcb0      	pop	{r4, r5, r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	08014bc8 	.word	0x08014bc8

080027a0 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	da01      	bge.n	80027ba <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	e000      	b.n	80027bc <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 80027ba:	687b      	ldr	r3, [r7, #4]
    }
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	ed93 7a00 	vldr	s14, [r3]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e6:	d501      	bpl.n	80027ec <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	e000      	b.n	80027ee <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80027ec:	687b      	ldr	r3, [r7, #4]
    }
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	ed87 0a03 	vstr	s0, [r7, #12]
 8002804:	edc7 0a02 	vstr	s1, [r7, #8]
 8002808:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800280c:	f107 0208 	add.w	r2, r7, #8
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ffd6 	bl	80027c8 <_ZSt3maxIfERKT_S2_S2_>
 800281c:	4602      	mov	r2, r0
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f000 f87c 	bl	8002920 <_ZSt3minIfERKT_S2_S2_>
 8002828:	4603      	mov	r3, r0
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	ee07 3a90 	vmov	s15, r3
}
 8002830:	eeb0 0a67 	vmov.f32	s0, s15
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType, typename ExponentType>
inline IntegerType RoundingDivideByPOT(IntegerType x, ExponentType exponent) {
 800283c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	2a00      	cmp	r2, #0
 800284a:	da06      	bge.n	800285a <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0x1e>
 800284c:	4b30      	ldr	r3, [pc, #192]	; (8002910 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xd4>)
 800284e:	4a31      	ldr	r2, [pc, #196]	; (8002914 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xd8>)
 8002850:	f240 1171 	movw	r1, #369	; 0x171
 8002854:	4830      	ldr	r0, [pc, #192]	; (8002918 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xdc>)
 8002856:	f00f fa6b 	bl	8011d30 <__assert_func>
  assert(exponent <= 31);
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	2a1f      	cmp	r2, #31
 800285e:	dd06      	ble.n	800286e <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0x32>
 8002860:	4b2e      	ldr	r3, [pc, #184]	; (800291c <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xe0>)
 8002862:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xd8>)
 8002864:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8002868:	482b      	ldr	r0, [pc, #172]	; (8002918 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xdc>)
 800286a:	f00f fa61 	bl	8011d30 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800286e:	f04f 0101 	mov.w	r1, #1
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	6838      	ldr	r0, [r7, #0]
 8002878:	f1a0 0620 	sub.w	r6, r0, #32
 800287c:	f1c0 0520 	rsb	r5, r0, #32
 8002880:	fa02 f400 	lsl.w	r4, r2, r0
 8002884:	fa01 f606 	lsl.w	r6, r1, r6
 8002888:	4334      	orrs	r4, r6
 800288a:	fa21 f505 	lsr.w	r5, r1, r5
 800288e:	432c      	orrs	r4, r5
 8002890:	fa01 f300 	lsl.w	r3, r1, r0
 8002894:	3b01      	subs	r3, #1
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fac5 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800289c:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800289e:	2000      	movs	r0, #0
 80028a0:	f000 fac1 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80028a4:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f000 fabd 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80028ac:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 80028ae:	69f9      	ldr	r1, [r7, #28]
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fac3 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80028b6:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 80028b8:	2101      	movs	r1, #1
 80028ba:	69f8      	ldr	r0, [r7, #28]
 80028bc:	f000 facc 	bl	8002e58 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80028c0:	4604      	mov	r4, r0
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fad6 	bl	8002e76 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80028ca:	4603      	mov	r3, r0
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fab4 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80028d4:	4603      	mov	r3, r0
  const IntegerType threshold =
 80028d6:	4619      	mov	r1, r3
 80028d8:	4620      	mov	r0, r4
 80028da:	f000 fae0 	bl	8002e9e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80028de:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fab8 	bl	8002e58 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80028e8:	4604      	mov	r4, r0
 80028ea:	68f9      	ldr	r1, [r7, #12]
 80028ec:	6938      	ldr	r0, [r7, #16]
 80028ee:	f000 fae4 	bl	8002eba <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80028f2:	4603      	mov	r3, r0
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 faa0 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80028fc:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 80028fe:	4619      	mov	r1, r3
 8002900:	4620      	mov	r0, r4
 8002902:	f000 facc 	bl	8002e9e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8002906:	4603      	mov	r3, r0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3724      	adds	r7, #36	; 0x24
 800290c:	46bd      	mov	sp, r7
 800290e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002910:	08014be8 	.word	0x08014be8
 8002914:	08017754 	.word	0x08017754
 8002918:	08014bf8 	.word	0x08014bf8
 800291c:	08014c14 	.word	0x08014c14

08002920 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	d501      	bpl.n	8002944 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	e000      	b.n	8002946 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002944:	687b      	ldr	r3, [r7, #4]
    }
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph>:
  static inline void Run(
 8002952:	b590      	push	{r4, r7, lr}
 8002954:	b0ad      	sub	sp, #180	; 0xb4
 8002956:	af02      	add	r7, sp, #8
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
    const int stride_width = params.stride_width;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    const int stride_height = params.stride_height;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const int dilation_width_factor = params.dilation_width_factor;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800297a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int dilation_height_factor = params.dilation_height_factor;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002984:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int pad_width = params.padding_values.width;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800298c:	67bb      	str	r3, [r7, #120]	; 0x78
    const int pad_height = params.padding_values.height;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002994:	677b      	str	r3, [r7, #116]	; 0x74
    const int depth_multiplier = params.depth_multiplier;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800299c:	673b      	str	r3, [r7, #112]	; 0x70
    const int32_t output_activation_min = params.quantized_activation_min;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	61fb      	str	r3, [r7, #28]
    const int32_t output_activation_max = params.quantized_activation_max;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	61bb      	str	r3, [r7, #24]
    const int32_t input_offset = params.input_offset;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    const int32_t filter_offset = params.weights_offset;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t output_offset = params.output_offset;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_multiplier = params.output_multiplier;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	663b      	str	r3, [r7, #96]	; 0x60
    const int output_shift = params.output_shift;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80029c8:	68b8      	ldr	r0, [r7, #8]
 80029ca:	f7fe fc89 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d001      	beq.n	80029d8 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x86>
 80029d4:	f00f f9a4 	bl	8011d20 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80029d8:	6838      	ldr	r0, [r7, #0]
 80029da:	f7fe fc81 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d001      	beq.n	80029e8 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x96>
 80029e4:	f00f f99c 	bl	8011d20 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80029e8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80029ec:	f7fe fc78 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d001      	beq.n	80029fa <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0xa8>
 80029f6:	f00f f993 	bl	8011d20 <abort>
    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	dd01      	ble.n	8002a06 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0xb4>
 8002a02:	f00f f98d 	bl	8011d20 <abort>
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	68b8      	ldr	r0, [r7, #8]
 8002a10:	f7fe fd31 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8002a14:	65b8      	str	r0, [r7, #88]	; 0x58
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8002a16:	2303      	movs	r3, #3
 8002a18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	6838      	ldr	r0, [r7, #0]
 8002a20:	f7fe fd29 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8002a24:	4603      	mov	r3, r0
 8002a26:	617b      	str	r3, [r7, #20]
    const int input_height = input_shape.Dims(1);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	68b8      	ldr	r0, [r7, #8]
 8002a2c:	f7fe fc64 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002a30:	6578      	str	r0, [r7, #84]	; 0x54
    const int input_width = input_shape.Dims(2);
 8002a32:	2102      	movs	r1, #2
 8002a34:	68b8      	ldr	r0, [r7, #8]
 8002a36:	f7fe fc5f 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002a3a:	6538      	str	r0, [r7, #80]	; 0x50
    const int input_depth = input_shape.Dims(3);
 8002a3c:	2103      	movs	r1, #3
 8002a3e:	68b8      	ldr	r0, [r7, #8]
 8002a40:	f7fe fc5a 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002a44:	64f8      	str	r0, [r7, #76]	; 0x4c
    const int filter_height = filter_shape.Dims(1);
 8002a46:	2101      	movs	r1, #1
 8002a48:	6838      	ldr	r0, [r7, #0]
 8002a4a:	f7fe fc55 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002a4e:	64b8      	str	r0, [r7, #72]	; 0x48
    const int filter_width = filter_shape.Dims(2);
 8002a50:	2102      	movs	r1, #2
 8002a52:	6838      	ldr	r0, [r7, #0]
 8002a54:	f7fe fc50 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002a58:	6478      	str	r0, [r7, #68]	; 0x44
    const int output_height = output_shape.Dims(1);
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002a60:	f7fe fc4a 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002a64:	6438      	str	r0, [r7, #64]	; 0x40
    const int output_width = output_shape.Dims(2);
 8002a66:	2102      	movs	r1, #2
 8002a68:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002a6c:	f7fe fc44 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002a70:	63f8      	str	r0, [r7, #60]	; 0x3c
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8002a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a76:	fb02 f203 	mul.w	r2, r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x132>
 8002a80:	f00f f94e 	bl	8011d20 <abort>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8002a84:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002a88:	f7fe fc7a 	bl	8001380 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x146>
 8002a94:	f00f f944 	bl	8011d20 <abort>
    for (int b = 0; b < batches; ++b) {
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002a9e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f280 8109 	bge.w	8002cbc <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x36a>
      for (int out_y = 0; out_y < output_height; ++out_y) {
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ab0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	f280 80fa 	bge.w	8002cb0 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x35e>
        for (int out_x = 0; out_x < output_width; ++out_x) {
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ac2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	f280 80eb 	bge.w	8002ca4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x352>
          for (int ic = 0; ic < input_depth; ++ic) {
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ad4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ada:	429a      	cmp	r2, r3
 8002adc:	f280 80dc 	bge.w	8002c98 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x346>
            for (int m = 0; m < depth_multiplier; m++) {
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f280 80cd 	bge.w	8002c8c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x33a>
              const int oc = m + ic * depth_multiplier;
 8002af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002af6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b00:	4413      	add	r3, r2
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38
              const int in_x_origin = (out_x * stride_width) - pad_width;
 8002b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b08:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002b0c:	fb02 f203 	mul.w	r2, r2, r3
 8002b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y_origin = (out_y * stride_height) - pad_height;
 8002b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002b1e:	fb02 f203 	mul.w	r2, r2, r3
 8002b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
              int32_t acc = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b32:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	da5e      	bge.n	8002bfa <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x2a8>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b42:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	da50      	bge.n	8002bee <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x29c>
                      in_x_origin + dilation_width_factor * filter_x;
 8002b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b50:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002b54:	fb02 f303 	mul.w	r3, r2, r3
                  const int in_x =
 8002b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b5a:	4413      	add	r3, r2
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                      in_y_origin + dilation_height_factor * filter_y;
 8002b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
                  const int in_y =
 8002b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6a:	4413      	add	r3, r2
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db36      	blt.n	8002be2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
 8002b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	da32      	bge.n	8002be2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db2f      	blt.n	8002be2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
 8002b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b86:	429a      	cmp	r2, r3
 8002b88:	da2b      	bge.n	8002be2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8002b8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b94:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b98:	68b8      	ldr	r0, [r7, #8]
 8002b9a:	f7fe fc14 	bl	80013c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	461a      	mov	r2, r3
                    int32_t input_val =
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
                    int32_t filter_val = filter_data[Offset(
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	6838      	ldr	r0, [r7, #0]
 8002bba:	f7fe fc04 	bl	80013c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	623b      	str	r3, [r7, #32]
                    acc += (filter_val + filter_offset) *
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd0:	4413      	add	r3, r2
                           (input_val + input_offset);
 8002bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bd6:	440a      	add	r2, r1
                    acc += (filter_val + filter_offset) *
 8002bd8:	fb02 f203 	mul.w	r2, r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8002be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be6:	3301      	adds	r3, #1
 8002be8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002bec:	e7a9      	b.n	8002b42 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1f0>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8002bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bf8:	e79b      	b.n	8002b32 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1e0>
              if (bias_data) {
 8002bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x2c2>
                acc += bias_data[oc];
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c0a:	4413      	add	r3, r2
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
              acc = DepthwiseConvRound<output_rounding>(acc, output_multiplier,
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c18:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ffc8 	bl	8001bb0 <_ZN6tflite13reference_ops14depthwise_conv18DepthwiseConvRoundILNS_27DepthwiseConvOutputRoundingE1EEEllli>
 8002c20:	4603      	mov	r3, r0
 8002c22:	613b      	str	r3, [r7, #16]
              acc += output_offset;
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c28:	4413      	add	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
              acc = std::max(acc, output_activation_min);
 8002c2c:	f107 021c 	add.w	r2, r7, #28
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fab8 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	613b      	str	r3, [r7, #16]
              acc = std::min(acc, output_activation_max);
 8002c42:	f107 0218 	add.w	r2, r7, #24
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fda7 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 8002c52:	4603      	mov	r3, r0
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	613b      	str	r3, [r7, #16]
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8002c58:	693c      	ldr	r4, [r7, #16]
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c62:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c6a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002c6e:	f7fe fbaa 	bl	80013c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c7a:	4413      	add	r3, r2
 8002c7c:	b2e2      	uxtb	r2, r4
 8002c7e:	701a      	strb	r2, [r3, #0]
            for (int m = 0; m < depth_multiplier; m++) {
 8002c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c84:	3301      	adds	r3, #1
 8002c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c8a:	e72c      	b.n	8002ae6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x194>
          for (int ic = 0; ic < input_depth; ++ic) {
 8002c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c90:	3301      	adds	r3, #1
 8002c92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c96:	e71d      	b.n	8002ad4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x182>
        for (int out_x = 0; out_x < output_width; ++out_x) {
 8002c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ca2:	e70e      	b.n	8002ac2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x170>
      for (int out_y = 0; out_y < output_height; ++out_y) {
 8002ca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cae:	e6ff      	b.n	8002ab0 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x15e>
    for (int b = 0; b < batches; ++b) {
 8002cb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002cba:	e6f0      	b.n	8002a9e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x14c>
  }
 8002cbc:	bf00      	nop
 8002cbe:	37ac      	adds	r7, #172	; 0xac
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}

08002cc4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10b      	bne.n	8002cf0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8002ce0:	f7fe fa4a 	bl	8001178 <_ZNSt14numeric_limitsIfE3maxEv>
 8002ce4:	eef0 7a40 	vmov.f32	s15, s0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8002cee:	e023      	b.n	8002d38 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d107      	bne.n	8002d06 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8002d02:	601a      	str	r2, [r3, #0]
}
 8002d04:	e018      	b.n	8002d38 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d107      	bne.n	8002d1c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8002d10:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	e00d      	b.n	8002d38 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8002d1c:	f7fe fa3a 	bl	8001194 <_ZNSt14numeric_limitsIfE6lowestEv>
 8002d20:	eef0 7a40 	vmov.f32	s15, s0
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8002d2a:	f7fe fa25 	bl	8001178 <_ZNSt14numeric_limitsIfE3maxEv>
 8002d2e:	eef0 7a40 	vmov.f32	s15, s0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	edc3 7a00 	vstr	s15, [r3]
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40c00000 	.word	0x40c00000
 8002d44:	bf800000 	.word	0xbf800000

08002d48 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8002d56:	f00e ffe3 	bl	8011d20 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	e000      	b.n	8002d7c <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8002d96:	f00e ffc3 	bl	8011d20 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8002db4:	f00e ffb4 	bl	8011d20 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	e000      	b.n	8002dda <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 8002df4:	f00e ff94 	bl	8011d20 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	e000      	b.n	8002e1a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  return x;
 8002e2e:	687b      	ldr	r3, [r7, #4]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  return a & b;
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	4013      	ands	r3, r2
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	fa42 f303 	asr.w	r3, r2, r3
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	bfb4      	ite	lt
 8002e88:	2301      	movlt	r3, #1
 8002e8a:	2300      	movge	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f827 	bl	8002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8002e94:	4603      	mov	r3, r0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
  return a + b;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	4413      	add	r3, r2
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	bfcc      	ite	gt
 8002ecc:	2301      	movgt	r3, #1
 8002ece:	2300      	movle	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f805 	bl	8002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f000 f807 	bl	8002f04 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	e000      	b.n	8002efc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return ~a;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	43db      	mvns	r3, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8002f1c:	b40e      	push	{r1, r2, r3}
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8002f26:	f107 0320 	add.w	r3, r7, #32
 8002f2a:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3308      	adds	r3, #8
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	69f9      	ldr	r1, [r7, #28]
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
 8002f3c:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f4a:	b003      	add	sp, #12
 8002f4c:	4770      	bx	lr

08002f4e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8002f4e:	b40c      	push	{r2, r3}
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8002f5a:	f107 031c 	add.w	r3, r7, #28
 8002f5e:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3308      	adds	r3, #8
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
 8002f70:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f7e:	b002      	add	sp, #8
 8002f80:	4770      	bx	lr

08002f82 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8002f9a:	b590      	push	{r4, r7, lr}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8002fa2:	687c      	ldr	r4, [r7, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fd07 	bl	80039ba <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8002fac:	4603      	mov	r3, r0
 8002fae:	425b      	negs	r3, r3
 8002fb0:	4423      	add	r3, r4
  }
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}

08002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ffe7 	bl	8002f9a <_ZNK11flatbuffers5Table9GetVTableEv>
 8002fcc:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fcd7 	bl	8003982 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8002fd8:	887a      	ldrh	r2, [r7, #2]
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fccb 	bl	8003982 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8002fec:	4603      	mov	r3, r0
 8002fee:	e000      	b.n	8002ff2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 8002ff0:	2300      	movs	r3, #0
  }
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
    VT_DEPTH_MULTIPLIER = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_W_FACTOR = 14,
    VT_DILATION_H_FACTOR = 16
  };
  tflite::Padding padding() const {
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	2104      	movs	r1, #4
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fd4f 	bl	8003aac <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800300e:	4603      	mov	r3, r0
 8003010:	b2db      	uxtb	r3, r3
  }
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	2106      	movs	r1, #6
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fd11 	bl	8003a50 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800302e:	4603      	mov	r3, r0
  }
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	2108      	movs	r1, #8
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fd02 	bl	8003a50 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800304c:	4603      	mov	r3, r0
  }
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	210a      	movs	r1, #10
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fcf3 	bl	8003a50 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800306a:	4603      	mov	r3, r0
  }
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	210c      	movs	r1, #12
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fd12 	bl	8003aac <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003088:	4603      	mov	r3, r0
 800308a:	b2db      	uxtb	r3, r3
  }
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	210e      	movs	r1, #14
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fcd4 	bl	8003a50 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80030a8:	4603      	mov	r3, r0
  }
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	2110      	movs	r1, #16
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fcc5 	bl	8003a50 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80030c6:	4603      	mov	r3, r0
  }
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_WEIGHTS_FORMAT = 6,
    VT_KEEP_NUM_DIMS = 8,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 10
  };
  tflite::ActivationFunctionType fused_activation_function() const {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	2104      	movs	r1, #4
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fce4 	bl	8003aac <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80030e4:	4603      	mov	r3, r0
 80030e6:	b2db      	uxtb	r3, r3
  }
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	2106      	movs	r1, #6
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fcd4 	bl	8003aac <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003104:	4603      	mov	r3, r0
 8003106:	b2db      	uxtb	r3, r3
  }
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	2108      	movs	r1, #8
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fc67 	bl	80039f2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
  }
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	210a      	movs	r1, #10
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fc53 	bl	80039f2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
  }
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_ZNK6tflite14SoftmaxOptions4betaEv>:
struct SoftmaxOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SoftmaxOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BETA = 4
  };
  float beta() const {
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003184 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 800316e:	2104      	movs	r1, #4
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fcbb 	bl	8003aec <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8003176:	eef0 7a40 	vmov.f32	s15, s0
  }
 800317a:	eeb0 0a67 	vmov.f32	s0, s15
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	00000000 	.word	0x00000000

08003188 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
struct ReshapeOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReshapeOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_SHAPE = 4
  };
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2104      	movs	r1, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fc79 	bl	8003a8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800319a:	4603      	mov	r3, r0
  }
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <_ZNK6tflite8Operator20builtin_options_typeEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	210a      	movs	r1, #10
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fc1d 	bl	80039f2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80031b8:	4603      	mov	r3, r0
  }
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	210c      	movs	r1, #12
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fc2e 	bl	8003a30 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 80031d4:	4603      	mov	r3, r0
  }
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
  }
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffdc 	bl	80031a4 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d104      	bne.n	80031fc <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffe5 	bl	80031c2 <_ZNK6tflite8Operator15builtin_optionsEv>
 80031f8:	4603      	mov	r3, r0
 80031fa:	e000      	b.n	80031fe <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 80031fc:	2300      	movs	r3, #0
  }
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_SVDFOptions ? static_cast<const tflite::SVDFOptions *>(builtin_options()) : nullptr;
  }
  const tflite::RNNOptions *builtin_options_as_RNNOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ffc8 	bl	80031a4 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003214:	4603      	mov	r3, r0
 8003216:	2b08      	cmp	r3, #8
 8003218:	d104      	bne.n	8003224 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ffd1 	bl	80031c2 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003220:	4603      	mov	r3, r0
 8003222:	e000      	b.n	8003226 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8003224:	2300      	movs	r3, #0
  }
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffb4 	bl	80031a4 <_ZNK6tflite8Operator20builtin_options_typeEv>
 800323c:	4603      	mov	r3, r0
 800323e:	2b09      	cmp	r3, #9
 8003240:	d104      	bne.n	800324c <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff ffbd 	bl	80031c2 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003248:	4603      	mov	r3, r0
 800324a:	e000      	b.n	800324e <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 800324c:	2300      	movs	r3, #0
  }
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
  }
  const tflite::CallOptions *builtin_options_as_CallOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOptions ? static_cast<const tflite::CallOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ffa0 	bl	80031a4 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003264:	4603      	mov	r3, r0
 8003266:	2b11      	cmp	r3, #17
 8003268:	d104      	bne.n	8003274 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ffa9 	bl	80031c2 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003270:	4603      	mov	r3, r0
 8003272:	e000      	b.n	8003276 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8003274:	2300      	movs	r3, #0
  }
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3304      	adds	r3, #4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6839      	ldr	r1, [r7, #0]
 80032b6:	4610      	mov	r0, r2
 80032b8:	4798      	blx	r3
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 80032f4:	f00e fd14 	bl	8011d20 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 80032fe:	f00e fd0f 	bl	8011d20 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8003308:	f00e fd0a 	bl	8011d20 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8003312:	f00e fd05 	bl	8011d20 <abort>
}
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8003334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003336:	4917      	ldr	r1, [pc, #92]	; (8003394 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8003338:	6838      	ldr	r0, [r7, #0]
 800333a:	f7ff fdef 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 800333e:	2301      	movs	r3, #1
 8003340:	e024      	b.n	800338c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8003342:	68b8      	ldr	r0, [r7, #8]
 8003344:	f000 fbf4 	bl	8003b30 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8003348:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	429a      	cmp	r2, r3
 8003352:	d906      	bls.n	8003362 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8003354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003356:	4910      	ldr	r1, [pc, #64]	; (8003398 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8003358:	6838      	ldr	r0, [r7, #0]
 800335a:	f7ff fddf 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 800335e:	2301      	movs	r3, #1
 8003360:	e014      	b.n	800338c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	429a      	cmp	r2, r3
 800336c:	d20d      	bcs.n	800338a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	18d4      	adds	r4, r2, r3
 8003376:	6979      	ldr	r1, [r7, #20]
 8003378:	68b8      	ldr	r0, [r7, #8]
 800337a:	f000 fbe7 	bl	8003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>
 800337e:	4603      	mov	r3, r0
 8003380:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3301      	adds	r3, #1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e7ed      	b.n	8003366 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	08014c38 	.word	0x08014c38
 8003398:	08014c68 	.word	0x08014c68

0800339c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d81b      	bhi.n	80033e4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033cd 	.word	0x080033cd
 80033b8:	080033d1 	.word	0x080033d1
 80033bc:	080033d5 	.word	0x080033d5
 80033c0:	080033d9 	.word	0x080033d9
 80033c4:	080033dd 	.word	0x080033dd
 80033c8:	080033e1 	.word	0x080033e1
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e00a      	b.n	80033e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e008      	b.n	80033e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 80033d4:	2302      	movs	r3, #2
 80033d6:	e006      	b.n	80033e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 80033d8:	2303      	movs	r3, #3
 80033da:	e004      	b.n	80033e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 80033dc:	2304      	movs	r3, #4
 80033de:	e002      	b.n	80033e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 80033e0:	2305      	movs	r3, #5
 80033e2:	e000      	b.n	80033e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop

080033f4 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 8003404:	2b01      	cmp	r3, #1
 8003406:	d002      	beq.n	800340e <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 8003408:	e003      	b.n	8003412 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 800340a:	2301      	movs	r3, #1
 800340c:	e002      	b.n	8003414 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 800340e:	2302      	movs	r3, #2
 8003410:	e000      	b.n	8003414 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b0c      	cmp	r3, #12
 8003432:	d85e      	bhi.n	80034f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd2>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	0800347b 	.word	0x0800347b
 8003440:	08003471 	.word	0x08003471
 8003444:	08003499 	.word	0x08003499
 8003448:	080034a3 	.word	0x080034a3
 800344c:	080034b7 	.word	0x080034b7
 8003450:	080034cb 	.word	0x080034cb
 8003454:	080034d5 	.word	0x080034d5
 8003458:	0800348f 	.word	0x0800348f
 800345c:	080034df 	.word	0x080034df
 8003460:	080034ad 	.word	0x080034ad
 8003464:	08003485 	.word	0x08003485
 8003468:	080034e9 	.word	0x080034e9
 800346c:	080034c1 	.word	0x080034c1
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	220a      	movs	r2, #10
 8003474:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003476:	2300      	movs	r3, #0
 8003478:	e045      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003480:	2300      	movs	r3, #0
 8003482:	e040      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	220b      	movs	r2, #11
 8003488:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800348a:	2300      	movs	r3, #0
 800348c:	e03b      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2207      	movs	r2, #7
 8003492:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003494:	2300      	movs	r3, #0
 8003496:	e036      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2202      	movs	r2, #2
 800349c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800349e:	2300      	movs	r3, #0
 80034a0:	e031      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2203      	movs	r2, #3
 80034a6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e02c      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2209      	movs	r2, #9
 80034b0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e027      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2204      	movs	r2, #4
 80034ba:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80034bc:	2300      	movs	r3, #0
 80034be:	e022      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	220d      	movs	r2, #13
 80034c4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e01d      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_STRING:
      *type = kTfLiteString;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2205      	movs	r2, #5
 80034ce:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e018      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2206      	movs	r2, #6
 80034d8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80034da:	2300      	movs	r3, #0
 80034dc:	e013      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2208      	movs	r2, #8
 80034e2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e00e      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	220c      	movs	r2, #12
 80034ec:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e009      	b.n	8003506 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    default:
      *type = kTfLiteNoType;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	461a      	mov	r2, r3
 80034fc:	4904      	ldr	r1, [pc, #16]	; (8003510 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xf0>)
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fd0c 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8003504:	2301      	movs	r3, #1
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	08014d74 	.word	0x08014d74

08003514 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 8003514:	b5b0      	push	{r4, r5, r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7ff fed9 	bl	80032e0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800352e:	f107 0318 	add.w	r3, r7, #24
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fec4 	bl	80032c2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 800353a:	f107 0310 	add.w	r3, r7, #16
 800353e:	f107 0218 	add.w	r2, r7, #24
 8003542:	4611      	mov	r1, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fb27 	bl	8003b98 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800354a:	f107 0310 	add.w	r3, r7, #16
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fb5e 	bl	8003c12 <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8003556:	4603      	mov	r3, r0
 8003558:	f083 0301 	eor.w	r3, r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8003562:	68b8      	ldr	r0, [r7, #8]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	4b3e      	ldr	r3, [pc, #248]	; (8003660 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4b3c      	ldr	r3, [pc, #240]	; (8003664 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 8003572:	4a3d      	ldr	r2, [pc, #244]	; (8003668 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 8003574:	f7ff fceb 	bl	8002f4e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8003578:	2401      	movs	r4, #1
 800357a:	e066      	b.n	800364a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f7ff fe2e 	bl	80031de <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 8003582:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d056      	beq.n	8003638 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 800358a:	69f8      	ldr	r0, [r7, #28]
 800358c:	f7ff fd35 	bl	8002ffa <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 8003590:	4603      	mov	r3, r0
 8003592:	461d      	mov	r5, r3
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fb47 	bl	8003c2c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800359e:	4604      	mov	r4, r0
 80035a0:	4628      	mov	r0, r5
 80035a2:	f7ff ff27 	bl	80033f4 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 80035a6:	4603      	mov	r3, r0
 80035a8:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 80035aa:	f107 0310 	add.w	r3, r7, #16
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fb3c 	bl	8003c2c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80035b4:	4604      	mov	r4, r0
 80035b6:	69f8      	ldr	r0, [r7, #28]
 80035b8:	f7ff fd2f 	bl	800301a <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 80035bc:	4603      	mov	r3, r0
 80035be:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 80035c0:	f107 0310 	add.w	r3, r7, #16
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fb31 	bl	8003c2c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80035ca:	4604      	mov	r4, r0
 80035cc:	69f8      	ldr	r0, [r7, #28]
 80035ce:	f7ff fd33 	bl	8003038 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 80035d2:	4603      	mov	r3, r0
 80035d4:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 80035d6:	f107 0310 	add.w	r3, r7, #16
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fb26 	bl	8003c2c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80035e0:	4604      	mov	r4, r0
 80035e2:	69f8      	ldr	r0, [r7, #28]
 80035e4:	f7ff fd37 	bl	8003056 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 80035e8:	4603      	mov	r3, r0
 80035ea:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80035ec:	69f8      	ldr	r0, [r7, #28]
 80035ee:	f7ff fd41 	bl	8003074 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461d      	mov	r5, r3
    params->activation =
 80035f6:	f107 0310 	add.w	r3, r7, #16
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fb16 	bl	8003c2c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003600:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8003602:	4628      	mov	r0, r5
 8003604:	f7ff feca 	bl	800339c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8003608:	4603      	mov	r3, r0
    params->activation =
 800360a:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 800360c:	f107 0310 	add.w	r3, r7, #16
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fb0b 	bl	8003c2c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003616:	4604      	mov	r4, r0
 8003618:	69f8      	ldr	r0, [r7, #28]
 800361a:	f7ff fd3b 	bl	8003094 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 800361e:	4603      	mov	r3, r0
 8003620:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8003622:	f107 0310 	add.w	r3, r7, #16
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fb00 	bl	8003c2c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800362c:	4604      	mov	r4, r0
 800362e:	69f8      	ldr	r0, [r7, #28]
 8003630:	f7ff fd3f 	bl	80030b2 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 8003634:	4603      	mov	r3, r0
 8003636:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003638:	f107 0310 	add.w	r3, r7, #16
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fb01 	bl	8003c44 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003642:	4602      	mov	r2, r0
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8003648:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 800364a:	f107 0310 	add.w	r3, r7, #16
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fac0 	bl	8003bd4 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8003654:	4623      	mov	r3, r4
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bdb0      	pop	{r4, r5, r7, pc}
 800365e:	bf00      	nop
 8003660:	08014cec 	.word	0x08014cec
 8003664:	08014cac 	.word	0x08014cac
 8003668:	08014cd4 	.word	0x08014cd4

0800366c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 800366c:	b5b0      	push	{r4, r5, r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff fe2d 	bl	80032e0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8003686:	f107 0318 	add.w	r3, r7, #24
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fe18 	bl	80032c2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8003692:	f107 0310 	add.w	r3, r7, #16
 8003696:	f107 0218 	add.w	r2, r7, #24
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fae5 	bl	8003c6c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80036a2:	f107 0310 	add.w	r3, r7, #16
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fb1c 	bl	8003ce6 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f083 0301 	eor.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00c      	beq.n	80036d4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80036ba:	68b8      	ldr	r0, [r7, #8]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	f240 435c 	movw	r3, #1116	; 0x45c
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4b34      	ldr	r3, [pc, #208]	; (800379c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 80036ca:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 80036cc:	f7ff fc3f 	bl	8002f4e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80036d0:	2401      	movs	r4, #1
 80036d2:	e057      	b.n	8003784 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fd96 	bl	8003206 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 80036da:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d047      	beq.n	8003772 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80036e2:	69f8      	ldr	r0, [r7, #28]
 80036e4:	f7ff fcf4 	bl	80030d0 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 80036e8:	4603      	mov	r3, r0
 80036ea:	461d      	mov	r5, r3
    params->activation =
 80036ec:	f107 0310 	add.w	r3, r7, #16
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fb05 	bl	8003d00 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80036f6:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80036f8:	4628      	mov	r0, r5
 80036fa:	f7ff fe4f 	bl	800339c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80036fe:	4603      	mov	r3, r0
    params->activation =
 8003700:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 8003702:	f107 0310 	add.w	r3, r7, #16
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fafa 	bl	8003d00 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800370c:	4604      	mov	r4, r0
 800370e:	69f8      	ldr	r0, [r7, #28]
 8003710:	f7ff fcfe 	bl	8003110 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8003714:	4603      	mov	r3, r0
 8003716:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 8003718:	f107 0310 	add.w	r3, r7, #16
 800371c:	4618      	mov	r0, r3
 800371e:	f000 faef 	bl	8003d00 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003722:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 8003724:	69f8      	ldr	r0, [r7, #28]
 8003726:	f7ff fd07 	bl	8003138 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 800372a:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 800372c:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 800372e:	69f8      	ldr	r0, [r7, #28]
 8003730:	f7ff fcde 	bl	80030f0 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 800373a:	2b01      	cmp	r3, #1
 800373c:	d009      	beq.n	8003752 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 800373e:	e011      	b.n	8003764 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8003740:	f107 0310 	add.w	r3, r7, #16
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fadb 	bl	8003d00 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800374a:	4603      	mov	r3, r0
 800374c:	2200      	movs	r2, #0
 800374e:	705a      	strb	r2, [r3, #1]
        break;
 8003750:	e00f      	b.n	8003772 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8003752:	f107 0310 	add.w	r3, r7, #16
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fad2 	bl	8003d00 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800375c:	4603      	mov	r3, r0
 800375e:	2201      	movs	r2, #1
 8003760:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8003762:	e006      	b.n	8003772 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	490f      	ldr	r1, [pc, #60]	; (80037a4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fbd7 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 800376e:	2401      	movs	r4, #1
 8003770:	e008      	b.n	8003784 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003772:	f107 0310 	add.w	r3, r7, #16
 8003776:	4618      	mov	r0, r3
 8003778:	f000 face 	bl	8003d18 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800377c:	4602      	mov	r2, r0
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8003782:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8003784:	f107 0310 	add.w	r3, r7, #16
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fa8d 	bl	8003ca8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800378e:	4623      	mov	r3, r4
}
 8003790:	4618      	mov	r0, r3
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bdb0      	pop	{r4, r5, r7, pc}
 8003798:	08014cec 	.word	0x08014cec
 800379c:	08014cac 	.word	0x08014cac
 80037a0:	08014cd4 	.word	0x08014cd4
 80037a4:	08014d98 	.word	0x08014d98

080037a8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b08d      	sub	sp, #52	; 0x34
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff fd8f 	bl	80032e0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80037c2:	f107 0318 	add.w	r3, r7, #24
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fd7a 	bl	80032c2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 80037ce:	f107 0310 	add.w	r3, r7, #16
 80037d2:	f107 0218 	add.w	r2, r7, #24
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fab1 	bl	8003d40 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80037de:	f107 0310 	add.w	r3, r7, #16
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fae8 	bl	8003dba <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f083 0301 	eor.w	r3, r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80037f6:	68b8      	ldr	r0, [r7, #8]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	4b27      	ldr	r3, [pc, #156]	; (8003898 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	f240 53ad 	movw	r3, #1453	; 0x5ad
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 8003806:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 8003808:	f7ff fba1 	bl	8002f4e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800380c:	2401      	movs	r4, #1
 800380e:	e039      	b.n	8003884 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff fd20 	bl	8003256 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 8003816:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d029      	beq.n	8003872 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 800381e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003820:	f7ff fcb2 	bl	8003188 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 8003824:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d022      	beq.n	8003872 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
      TF_LITE_ENSURE_STATUS(
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	4618      	mov	r0, r3
 8003832:	f000 facf 	bl	8003dd4 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003836:	4603      	mov	r3, r0
 8003838:	4619      	mov	r1, r3
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>)
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	460a      	mov	r2, r1
 8003844:	6a39      	ldr	r1, [r7, #32]
 8003846:	2020      	movs	r0, #32
 8003848:	f7ff fd6a 	bl	8003320 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 800384c:	4603      	mov	r3, r0
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	7ffb      	ldrb	r3, [r7, #31]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
 8003856:	7ffc      	ldrb	r4, [r7, #31]
 8003858:	e014      	b.n	8003884 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 800385a:	6a38      	ldr	r0, [r7, #32]
 800385c:	f000 f968 	bl	8003b30 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8003860:	4604      	mov	r4, r0
 8003862:	f107 0310 	add.w	r3, r7, #16
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fab4 	bl	8003dd4 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800386c:	4603      	mov	r3, r0
 800386e:	4622      	mov	r2, r4
 8003870:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003872:	f107 0310 	add.w	r3, r7, #16
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fab8 	bl	8003dec <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800387c:	4602      	mov	r2, r0
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8003882:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 8003884:	f107 0310 	add.w	r3, r7, #16
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fa77 	bl	8003d7c <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800388e:	4623      	mov	r3, r4
}
 8003890:	4618      	mov	r0, r3
 8003892:	372c      	adds	r7, #44	; 0x2c
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}
 8003898:	08014cec 	.word	0x08014cec
 800389c:	08014cac 	.word	0x08014cac
 80038a0:	08014cd4 	.word	0x08014cd4
 80038a4:	08014dc4 	.word	0x08014dc4

080038a8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b08b      	sub	sp, #44	; 0x2c
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7ff fd0f 	bl	80032e0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80038c2:	f107 0318 	add.w	r3, r7, #24
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fcfa 	bl	80032c2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 80038ce:	f107 0310 	add.w	r3, r7, #16
 80038d2:	f107 0218 	add.w	r2, r7, #24
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fa9b 	bl	8003e14 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80038de:	f107 0310 	add.w	r3, r7, #16
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fad2 	bl	8003e8e <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f083 0301 	eor.w	r3, r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80038f6:	68b8      	ldr	r0, [r7, #8]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	f240 6336 	movw	r3, #1590	; 0x636
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 8003908:	f7ff fb21 	bl	8002f4e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800390c:	2401      	movs	r4, #1
 800390e:	e01c      	b.n	800394a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f7ff fc8c 	bl	800322e <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 8003916:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00c      	beq.n	8003938 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 800391e:	f107 0310 	add.w	r3, r7, #16
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fac0 	bl	8003ea8 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003928:	4604      	mov	r4, r0
 800392a:	69f8      	ldr	r0, [r7, #28]
 800392c:	f7ff fc18 	bl	8003160 <_ZNK6tflite14SoftmaxOptions4betaEv>
 8003930:	eef0 7a40 	vmov.f32	s15, s0
 8003934:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fabf 	bl	8003ec0 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003942:	4602      	mov	r2, r0
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8003948:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 800394a:	f107 0310 	add.w	r3, r7, #16
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fa7e 	bl	8003e50 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8003954:	4623      	mov	r3, r4
}
 8003956:	4618      	mov	r0, r3
 8003958:	3724      	adds	r7, #36	; 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd90      	pop	{r4, r7, pc}
 800395e:	bf00      	nop
 8003960:	08014cec 	.word	0x08014cec
 8003964:	08014cac 	.word	0x08014cac
 8003968:	08014cd4 	.word	0x08014cd4

0800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8003974:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fab5 	bl	8003efe <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ffde 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80039b0:	4603      	mov	r3, r0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fa8e 	bl	8003ee8 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 80039cc:	4603      	mov	r3, r0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fa97 	bl	8003f16 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	807b      	strh	r3, [r7, #2]
 80039fe:	4613      	mov	r3, r2
 8003a00:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fad7 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003a10:	89fb      	ldrh	r3, [r7, #14]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	89fb      	ldrh	r3, [r7, #14]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ffda 	bl	80039d6 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8003a22:	4603      	mov	r3, r0
 8003a24:	e000      	b.n	8003a28 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8003a26:	787b      	ldrb	r3, [r7, #1]
  }
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8003a3c:	887b      	ldrh	r3, [r7, #2]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fa74 	bl	8003f2e <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8003a46:	4603      	mov	r3, r0
  }
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8003a5e:	897b      	ldrh	r3, [r7, #10]
 8003a60:	4619      	mov	r1, r3
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff faa9 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003a6c:	8afb      	ldrh	r3, [r7, #22]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	8afb      	ldrh	r3, [r7, #22]
 8003a76:	4413      	add	r3, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff9e 	bl	80039ba <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	e000      	b.n	8003a84 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8003a82:	687b      	ldr	r3, [r7, #4]
  }
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8003a98:	887b      	ldrh	r3, [r7, #2]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fa66 	bl	8003f6e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8003aa2:	4603      	mov	r3, r0
  }
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8003abc:	887b      	ldrh	r3, [r7, #2]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff fa7a 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003aca:	89fb      	ldrh	r3, [r7, #14]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	89fb      	ldrh	r3, [r7, #14]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fa69 	bl	8003fae <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8003adc:	4603      	mov	r3, r0
 8003ade:	e001      	b.n	8003ae4 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8003ae0:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	460b      	mov	r3, r1
 8003af6:	ed87 0a01 	vstr	s0, [r7, #4]
 8003afa:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8003afc:	897b      	ldrh	r3, [r7, #10]
 8003afe:	4619      	mov	r1, r3
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff fa5a 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003b06:	4603      	mov	r3, r0
 8003b08:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003b0a:	8afb      	ldrh	r3, [r7, #22]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	8afb      	ldrh	r3, [r7, #22]
 8003b14:	4413      	add	r3, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fa58 	bl	8003fcc <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 8003b1c:	eef0 7a40 	vmov.f32	s15, s0
 8003b20:	e001      	b.n	8003b26 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 8003b22:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 8003b26:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff15 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8003b42:	4603      	mov	r3, r0
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ffea 	bl	8003b30 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d306      	bcc.n	8003b72 <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8003b68:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003b6c:	4809      	ldr	r0, [pc, #36]	; (8003b94 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8003b6e:	f00e f8df 	bl	8011d30 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa4e 	bl	8004014 <_ZNK11flatbuffers6VectorIlE4DataEv>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	6839      	ldr	r1, [r7, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fa37 	bl	8003ff0 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 8003b82:	4603      	mov	r3, r0
  }
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	08014dcc 	.word	0x08014dcc
 8003b90:	080177cc 	.word	0x080177cc
 8003b94:	08014dd8 	.word	0x08014dd8

08003b98 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fa56 	bl	8004058 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 8003bac:	4604      	mov	r4, r0
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	f107 030c 	add.w	r3, r7, #12
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fb60 	bl	800327e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa75 	bl	80040b6 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd90      	pop	{r4, r7, pc}

08003bd4 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fa85 	bl	80040ee <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003be4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa8a 	bl	8004108 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f7ff fb4d 	bl	800329c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
      }
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fa96 	bl	800414e <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003c22:	4603      	mov	r3, r0
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	return get();
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fa9b 	bl	8004170 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003c3a:	4603      	mov	r3, r0
      }
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fa8f 	bl	8004170 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003c52:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fa49 	bl	80040ee <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6013      	str	r3, [r2, #0]
	return __p;
 8003c62:	68fb      	ldr	r3, [r7, #12]
      }
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fa85 	bl	800418a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8003c80:	4604      	mov	r4, r0
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff faf6 	bl	800327e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003c92:	f107 030c 	add.w	r3, r7, #12
 8003c96:	461a      	mov	r2, r3
 8003c98:	4621      	mov	r1, r4
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa9b 	bl	80041d6 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd90      	pop	{r4, r7, pc}

08003ca8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 faab 	bl	800420e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003cb8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fab0 	bl	8004228 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f7ff fae3 	bl	800329c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
      }
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fabc 	bl	800426e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	return get();
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fac1 	bl	8004290 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003d0e:	4603      	mov	r3, r0
      }
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fab5 	bl	8004290 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003d26:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fa6f 	bl	800420e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003d30:	4602      	mov	r2, r0
 8003d32:	2300      	movs	r3, #0
 8003d34:	6013      	str	r3, [r2, #0]
	return __p;
 8003d36:	68fb      	ldr	r3, [r7, #12]
      }
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 faab 	bl	80042aa <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 8003d54:	4604      	mov	r4, r0
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	f107 030c 	add.w	r3, r7, #12
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fa8c 	bl	800327e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003d66:	f107 030c 	add.w	r3, r7, #12
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fac7 	bl	8004302 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd90      	pop	{r4, r7, pc}

08003d7c <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fad7 	bl	800433a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003d8c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fadc 	bl	8004354 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f7ff fa79 	bl	800329c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
      }
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fae8 	bl	800439a <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	return get();
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 faed 	bl	80043bc <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003de2:	4603      	mov	r3, r0
      }
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fae1 	bl	80043bc <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003dfa:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fa9b 	bl	800433a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003e04:	4602      	mov	r2, r0
 8003e06:	2300      	movs	r3, #0
 8003e08:	6013      	str	r3, [r2, #0]
	return __p;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
      }
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fad7 	bl	80043d6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8003e28:	4604      	mov	r4, r0
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fa22 	bl	800327e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003e3a:	f107 030c 	add.w	r3, r7, #12
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4621      	mov	r1, r4
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 faed 	bl	8004422 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd90      	pop	{r4, r7, pc}

08003e50 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fafd 	bl	800445a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003e60:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fb02 	bl	8004474 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f7ff fa0f 	bl	800329c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
      }
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fb0e 	bl	80044ba <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	return get();
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fb13 	bl	80044dc <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003eb6:	4603      	mov	r3, r0
      }
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fb07 	bl	80044dc <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003ece:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fac1 	bl	800445a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	2300      	movs	r3, #0
 8003edc:	6013      	str	r3, [r2, #0]
	return __p;
 8003ede:	68fb      	ldr	r3, [r7, #12]
      }
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
    return t;
 8003ef0:	687b      	ldr	r3, [r7, #4]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	4603      	mov	r3, r0
 8003f06:	80fb      	strh	r3, [r7, #6]
    return t;
 8003f08:	88fb      	ldrh	r3, [r7, #6]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	71fb      	strb	r3, [r7, #7]
    return t;
 8003f20:	79fb      	ldrb	r3, [r7, #7]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	460b      	mov	r3, r1
 8003f38:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff f83b 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003f44:	4603      	mov	r3, r0
 8003f46:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	89fb      	ldrh	r3, [r7, #14]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003f50:	89fb      	ldrh	r3, [r7, #14]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d006      	beq.n	8003f64 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8003f56:	68b8      	ldr	r0, [r7, #8]
 8003f58:	f7ff fd21 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4413      	add	r3, r2
                        : nullptr;
 8003f62:	e000      	b.n	8003f66 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003f64:	2300      	movs	r3, #0
  }
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8003f7a:	887b      	ldrh	r3, [r7, #2]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff f81b 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003f84:	4603      	mov	r3, r0
 8003f86:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	89fb      	ldrh	r3, [r7, #14]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003f90:	89fb      	ldrh	r3, [r7, #14]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d006      	beq.n	8003fa4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8003f96:	68b8      	ldr	r0, [r7, #8]
 8003f98:	f7ff fd01 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4413      	add	r3, r2
                        : nullptr;
 8003fa2:	e000      	b.n	8003fa6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003fa4:	2300      	movs	r3, #0
  }
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f993 3000 	ldrsb.w	r3, [r3]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fa9a 	bl	80044f6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8003fc2:	4603      	mov	r3, r0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	eeb0 0a67 	vmov.f32	s0, s15
 8003fde:	f000 fa97 	bl	8004510 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8003fe2:	eef0 7a40 	vmov.f32	s15, s0
}
 8003fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff ff6f 	bl	8003ee8 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800400a:	4603      	mov	r3, r0
  }
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
  }
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2204      	movs	r2, #4
 8004068:	211c      	movs	r1, #28
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
 800406e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4619      	mov	r1, r3
 8004074:	201c      	movs	r0, #28
 8004076:	f7fe ff84 	bl	8002f82 <_ZnwjPv>
 800407a:	4601      	mov	r1, r0
 800407c:	2900      	cmp	r1, #0
 800407e:	d00a      	beq.n	8004096 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v+0x3e>
 8004080:	460a      	mov	r2, r1
 8004082:	2300      	movs	r3, #0
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	6053      	str	r3, [r2, #4]
 8004088:	6093      	str	r3, [r2, #8]
 800408a:	60d3      	str	r3, [r2, #12]
 800408c:	6113      	str	r3, [r2, #16]
 800408e:	6153      	str	r3, [r2, #20]
 8004090:	6193      	str	r3, [r2, #24]
 8004092:	460b      	mov	r3, r1
 8004094:	e000      	b.n	8004098 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v+0x40>
 8004096:	460b      	mov	r3, r1
  }
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 80040b6:	b5b0      	push	{r4, r5, r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 80040c2:	68fc      	ldr	r4, [r7, #12]
 80040c4:	f107 0308 	add.w	r3, r7, #8
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ffe9 	bl	80040a0 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80040ce:	4603      	mov	r3, r0
 80040d0:	681d      	ldr	r5, [r3, #0]
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff ffaa 	bl	800402c <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	4629      	mov	r1, r5
 80040de:	4620      	mov	r0, r4
 80040e0:	f000 f81f 	bl	8004122 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bdb0      	pop	{r4, r5, r7, pc}

080040ee <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fa18 	bl	800452e <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80040fe:	4603      	mov	r3, r0
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fa18 	bl	8004548 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004118:	4603      	mov	r3, r0
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004122:	b590      	push	{r4, r7, lr}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800412e:	68fc      	ldr	r4, [r7, #12]
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff86 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004136:	4602      	mov	r2, r0
 8004138:	f107 0308 	add.w	r3, r7, #8
 800413c:	4619      	mov	r1, r3
 800413e:	4620      	mov	r0, r4
 8004140:	f000 fa1a 	bl	8004578 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}

0800414e <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f80a 	bl	8004170 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	bf14      	ite	ne
 8004162:	2301      	movne	r3, #1
 8004164:	2300      	moveq	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fa15 	bl	80045aa <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004180:	4603      	mov	r3, r0
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  T* AllocatePOD() {
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2201      	movs	r2, #1
 800419a:	2104      	movs	r1, #4
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
 80041a0:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4619      	mov	r1, r3
 80041a6:	2004      	movs	r0, #4
 80041a8:	f7fe feeb 	bl	8002f82 <_ZnwjPv>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v+0x2e>
 80041b2:	4619      	mov	r1, r3
 80041b4:	2200      	movs	r2, #0
 80041b6:	600a      	str	r2, [r1, #0]
  }
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 80041d6:	b5b0      	push	{r4, r5, r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 80041e2:	68fc      	ldr	r4, [r7, #12]
 80041e4:	f107 0308 	add.w	r3, r7, #8
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff ffe9 	bl	80041c0 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80041ee:	4603      	mov	r3, r0
 80041f0:	681d      	ldr	r5, [r3, #0]
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff ff1a 	bl	800402c <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80041f8:	4603      	mov	r3, r0
 80041fa:	461a      	mov	r2, r3
 80041fc:	4629      	mov	r1, r5
 80041fe:	4620      	mov	r0, r4
 8004200:	f000 f81f 	bl	8004242 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bdb0      	pop	{r4, r5, r7, pc}

0800420e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f9d4 	bl	80045c6 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800421e:	4603      	mov	r3, r0
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f9d4 	bl	80045e0 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004238:	4603      	mov	r3, r0
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004242:	b590      	push	{r4, r7, lr}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800424e:	68fc      	ldr	r4, [r7, #12]
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff fef6 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004256:	4602      	mov	r2, r0
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	4619      	mov	r1, r3
 800425e:	4620      	mov	r0, r4
 8004260:	f000 f9d6 	bl	8004610 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bd90      	pop	{r4, r7, pc}

0800426e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f80a 	bl	8004290 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	bf14      	ite	ne
 8004282:	2301      	movne	r3, #1
 8004284:	2300      	moveq	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f9d1 	bl	8004642 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80042a0:	4603      	mov	r3, r0
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 80042aa:	b590      	push	{r4, r7, lr}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2204      	movs	r2, #4
 80042ba:	2124      	movs	r1, #36	; 0x24
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
 80042c0:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4619      	mov	r1, r3
 80042c6:	2024      	movs	r0, #36	; 0x24
 80042c8:	f7fe fe5b 	bl	8002f82 <_ZnwjPv>
 80042cc:	4604      	mov	r4, r0
 80042ce:	2c00      	cmp	r4, #0
 80042d0:	d007      	beq.n	80042e2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v+0x38>
 80042d2:	4620      	mov	r0, r4
 80042d4:	2324      	movs	r3, #36	; 0x24
 80042d6:	461a      	mov	r2, r3
 80042d8:	2100      	movs	r1, #0
 80042da:	f00d fe07 	bl	8011eec <memset>
 80042de:	4623      	mov	r3, r4
 80042e0:	e000      	b.n	80042e4 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v+0x3a>
 80042e2:	4623      	mov	r3, r4
  }
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd90      	pop	{r4, r7, pc}

080042ec <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 8004302:	b5b0      	push	{r4, r5, r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800430e:	68fc      	ldr	r4, [r7, #12]
 8004310:	f107 0308 	add.w	r3, r7, #8
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ffe9 	bl	80042ec <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800431a:	4603      	mov	r3, r0
 800431c:	681d      	ldr	r5, [r3, #0]
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff fe84 	bl	800402c <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	4629      	mov	r1, r5
 800432a:	4620      	mov	r0, r4
 800432c:	f000 f81f 	bl	800436e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bdb0      	pop	{r4, r5, r7, pc}

0800433a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f98a 	bl	800465e <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800434a:	4603      	mov	r3, r0
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f98a 	bl	8004678 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004364:	4603      	mov	r3, r0
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800436e:	b590      	push	{r4, r7, lr}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800437a:	68fc      	ldr	r4, [r7, #12]
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fe60 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004382:	4602      	mov	r2, r0
 8004384:	f107 0308 	add.w	r3, r7, #8
 8004388:	4619      	mov	r1, r3
 800438a:	4620      	mov	r0, r4
 800438c:	f000 f98c 	bl	80046a8 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bd90      	pop	{r4, r7, pc}

0800439a <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f80a 	bl	80043bc <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bf14      	ite	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	2300      	moveq	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f987 	bl	80046da <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80043cc:	4603      	mov	r3, r0
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2204      	movs	r2, #4
 80043e6:	2104      	movs	r1, #4
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
 80043ec:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4619      	mov	r1, r3
 80043f2:	2004      	movs	r0, #4
 80043f4:	f7fe fdc5 	bl	8002f82 <_ZnwjPv>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v+0x2e>
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
  }
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 8004422:	b5b0      	push	{r4, r5, r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800442e:	68fc      	ldr	r4, [r7, #12]
 8004430:	f107 0308 	add.w	r3, r7, #8
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff ffe9 	bl	800440c <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800443a:	4603      	mov	r3, r0
 800443c:	681d      	ldr	r5, [r3, #0]
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff fdf4 	bl	800402c <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004444:	4603      	mov	r3, r0
 8004446:	461a      	mov	r2, r3
 8004448:	4629      	mov	r1, r5
 800444a:	4620      	mov	r0, r4
 800444c:	f000 f81f 	bl	800448e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bdb0      	pop	{r4, r5, r7, pc}

0800445a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 f946 	bl	80046f6 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800446a:	4603      	mov	r3, r0
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f946 	bl	8004710 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004484:	4603      	mov	r3, r0
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800448e:	b590      	push	{r4, r7, lr}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800449a:	68fc      	ldr	r4, [r7, #12]
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff fdd0 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80044a2:	4602      	mov	r2, r0
 80044a4:	f107 0308 	add.w	r3, r7, #8
 80044a8:	4619      	mov	r1, r3
 80044aa:	4620      	mov	r0, r4
 80044ac:	f000 f948 	bl	8004740 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd90      	pop	{r4, r7, pc}

080044ba <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f80a 	bl	80044dc <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bf14      	ite	ne
 80044ce:	2301      	movne	r3, #1
 80044d0:	2300      	moveq	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f943 	bl	8004772 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	4603      	mov	r3, r0
 80044fe:	71fb      	strb	r3, [r7, #7]
    return t;
 8004500:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	ee07 3a90 	vmov	s15, r3
}
 8004520:	eeb0 0a67 	vmov.f32	s0, s15
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f928 	bl	800478e <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800453e:	4603      	mov	r3, r0
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f927 	bl	80047a6 <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004558:	4603      	mov	r3, r0
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8004578:	b5b0      	push	{r4, r5, r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004584:	68fc      	ldr	r4, [r7, #12]
 8004586:	68b8      	ldr	r0, [r7, #8]
 8004588:	f7ff ffeb 	bl	8004562 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800458c:	4605      	mov	r5, r0
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fd57 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	4629      	mov	r1, r5
 800459a:	4620      	mov	r0, r4
 800459c:	f000 f910 	bl	80047c0 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bdb0      	pop	{r4, r5, r7, pc}

080045aa <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f921 	bl	80047fc <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80045ba:	4603      	mov	r3, r0
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 f920 	bl	8004816 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80045d6:	4603      	mov	r3, r0
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f91f 	bl	800482e <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8004610:	b5b0      	push	{r4, r5, r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800461c:	68fc      	ldr	r4, [r7, #12]
 800461e:	68b8      	ldr	r0, [r7, #8]
 8004620:	f7ff ffeb 	bl	80045fa <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004624:	4605      	mov	r5, r0
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fd0b 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	4629      	mov	r1, r5
 8004632:	4620      	mov	r0, r4
 8004634:	f000 f908 	bl	8004848 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bdb0      	pop	{r4, r5, r7, pc}

08004642 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f919 	bl	8004884 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004652:	4603      	mov	r3, r0
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f918 	bl	800489e <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800466e:	4603      	mov	r3, r0
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f917 	bl	80048b6 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004688:	4603      	mov	r3, r0
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80046a8:	b5b0      	push	{r4, r5, r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80046b4:	68fc      	ldr	r4, [r7, #12]
 80046b6:	68b8      	ldr	r0, [r7, #8]
 80046b8:	f7ff ffeb 	bl	8004692 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80046bc:	4605      	mov	r5, r0
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff fcbf 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80046c4:	4603      	mov	r3, r0
 80046c6:	461a      	mov	r2, r3
 80046c8:	4629      	mov	r1, r5
 80046ca:	4620      	mov	r0, r4
 80046cc:	f000 f900 	bl	80048d0 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bdb0      	pop	{r4, r5, r7, pc}

080046da <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f911 	bl	800490c <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80046ea:	4603      	mov	r3, r0
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f910 	bl	8004926 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004706:	4603      	mov	r3, r0
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f90f 	bl	800493e <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004720:	4603      	mov	r3, r0
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8004740:	b5b0      	push	{r4, r5, r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800474c:	68fc      	ldr	r4, [r7, #12]
 800474e:	68b8      	ldr	r0, [r7, #8]
 8004750:	f7ff ffeb 	bl	800472a <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004754:	4605      	mov	r5, r0
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff fc73 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	4629      	mov	r1, r5
 8004762:	4620      	mov	r0, r4
 8004764:	f000 f8f8 	bl	8004958 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bdb0      	pop	{r4, r5, r7, pc}

08004772 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f909 	bl	8004994 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004782:	4603      	mov	r3, r0
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f928 	bl	80049ec <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800479c:	4603      	mov	r3, r0
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 f8fc 	bl	80049ae <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80047b6:	4603      	mov	r3, r0
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80047cc:	68fc      	ldr	r4, [r7, #12]
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fc37 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4619      	mov	r1, r3
 80047d8:	4620      	mov	r0, r4
 80047da:	f000 f8f4 	bl	80049c6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1d1c      	adds	r4, r3, #4
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f7ff febd 	bl	8004562 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80047e8:	4603      	mov	r3, r0
 80047ea:	4619      	mov	r1, r3
 80047ec:	4620      	mov	r0, r4
 80047ee:	f000 f90b 	bl	8004a08 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd90      	pop	{r4, r7, pc}

080047fc <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f90f 	bl	8004a2a <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800480c:	4603      	mov	r3, r0
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f90f 	bl	8004a42 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004824:	4603      	mov	r3, r0
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f8b8 	bl	80049ae <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800483e:	4603      	mov	r3, r0
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004854:	68fc      	ldr	r4, [r7, #12]
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff fbf3 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800485c:	4603      	mov	r3, r0
 800485e:	4619      	mov	r1, r3
 8004860:	4620      	mov	r0, r4
 8004862:	f000 f8b0 	bl	80049c6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1d1c      	adds	r4, r3, #4
 800486a:	68b8      	ldr	r0, [r7, #8]
 800486c:	f7ff fec5 	bl	80045fa <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004870:	4603      	mov	r3, r0
 8004872:	4619      	mov	r1, r3
 8004874:	4620      	mov	r0, r4
 8004876:	f000 f8f2 	bl	8004a5e <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	bd90      	pop	{r4, r7, pc}

08004884 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f8f6 	bl	8004a80 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004894:	4603      	mov	r3, r0
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f8f6 	bl	8004a98 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80048ac:	4603      	mov	r3, r0
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 f874 	bl	80049ae <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80048dc:	68fc      	ldr	r4, [r7, #12]
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fbaf 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80048e4:	4603      	mov	r3, r0
 80048e6:	4619      	mov	r1, r3
 80048e8:	4620      	mov	r0, r4
 80048ea:	f000 f86c 	bl	80049c6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1d1c      	adds	r4, r3, #4
 80048f2:	68b8      	ldr	r0, [r7, #8]
 80048f4:	f7ff fecd 	bl	8004692 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80048f8:	4603      	mov	r3, r0
 80048fa:	4619      	mov	r1, r3
 80048fc:	4620      	mov	r0, r4
 80048fe:	f000 f8d9 	bl	8004ab4 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	bd90      	pop	{r4, r7, pc}

0800490c <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f8dd 	bl	8004ad6 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800491c:	4603      	mov	r3, r0
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8dd 	bl	8004aee <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004934:	4603      	mov	r3, r0
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4618      	mov	r0, r3
 800494a:	f000 f830 	bl	80049ae <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800494e:	4603      	mov	r3, r0
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004964:	68fc      	ldr	r4, [r7, #12]
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fb6b 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800496c:	4603      	mov	r3, r0
 800496e:	4619      	mov	r1, r3
 8004970:	4620      	mov	r0, r4
 8004972:	f000 f828 	bl	80049c6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1d1c      	adds	r4, r3, #4
 800497a:	68b8      	ldr	r0, [r7, #8]
 800497c:	f7ff fed5 	bl	800472a <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004980:	4603      	mov	r3, r0
 8004982:	4619      	mov	r1, r3
 8004984:	4620      	mov	r0, r4
 8004986:	f000 f8c0 	bl	8004b0a <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	bd90      	pop	{r4, r7, pc}

08004994 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f8c4 	bl	8004b2c <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f8c4 	bl	8004b44 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 80049bc:	4603      	mov	r3, r0
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 80049c6:	b590      	push	{r4, r7, lr}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 80049d0:	687c      	ldr	r4, [r7, #4]
 80049d2:	6838      	ldr	r0, [r7, #0]
 80049d4:	f7ff fb35 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80049d8:	4603      	mov	r3, r0
 80049da:	4619      	mov	r1, r3
 80049dc:	4620      	mov	r0, r4
 80049de:	f000 f8be 	bl	8004b5e <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd90      	pop	{r4, r7, pc}

080049ec <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f8c1 	bl	8004b80 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004a12:	6838      	ldr	r0, [r7, #0]
 8004a14:	f7ff fda5 	bl	8004562 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f8af 	bl	8004b96 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f8af 	bl	8004bb2 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8004a54:	4603      	mov	r3, r0
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004a68:	6838      	ldr	r0, [r7, #0]
 8004a6a:	f7ff fdc6 	bl	80045fa <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f89d 	bl	8004bc8 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f89d 	bl	8004be4 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004abe:	6838      	ldr	r0, [r7, #0]
 8004ac0:	f7ff fde7 	bl	8004692 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f88b 	bl	8004bfa <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f88b 	bl	8004c16 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004b14:	6838      	ldr	r0, [r7, #0]
 8004b16:	f7ff fe08 	bl	800472a <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f879 	bl	8004c2c <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f87a 	bl	8004c48 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8004b54:	4603      	mov	r3, r0
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004b68:	6838      	ldr	r0, [r7, #0]
 8004b6a:	f7ff fa6a 	bl	8004042 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 f85b 	bl	8004c5e <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 f84d 	bl	8004c74 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f83f 	bl	8004c8a <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3304      	adds	r3, #4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f831 	bl	8004ca0 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7fc fb0d 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004cc6:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db03      	blt.n	8004cd6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	db01      	blt.n	8004cda <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8004cd6:	f00d f823 	bl	8011d20 <abort>
  const auto* dims_data = shape.DimsData();
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fb31 	bl	8001342 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8004ce0:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	da12      	bge.n	8004d18 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d005      	beq.n	8004d06 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	4413      	add	r3, r2
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	e000      	b.n	8004d08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8004d06:	2301      	movs	r3, #1
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	fb03 f302 	mul.w	r3, r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	3301      	adds	r3, #1
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e7e8      	b.n	8004cea <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8004d18:	697b      	ldr	r3, [r7, #20]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8004d22:	b590      	push	{r4, r7, lr}
 8004d24:	b091      	sub	sp, #68	; 0x44
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8004d3c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004d3e:	f7fc facf 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004d42:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8004d44:	6838      	ldr	r0, [r7, #0]
 8004d46:	f7fc facb 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004d4a:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	4619      	mov	r1, r3
 8004d52:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004d54:	f7ff ffaf 	bl	8004cb6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8004d58:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	1e99      	subs	r1, r3, #2
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	3b01      	subs	r3, #1
                                       output_shape, output_dims_count - 1);
 8004d62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d64:	6838      	ldr	r0, [r7, #0]
 8004d66:	f7fc fb86 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8004d6a:	6178      	str	r0, [r7, #20]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	4619      	mov	r1, r3
 8004d72:	6838      	ldr	r0, [r7, #0]
 8004d74:	f7fc fac0 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8004d78:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	da5f      	bge.n	8004e46 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8004d86:	2300      	movs	r3, #0
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	da55      	bge.n	8004e3e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8004d98:	2300      	movs	r3, #0
 8004d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	da21      	bge.n	8004de8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8004da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	fb02 f203 	mul.w	r2, r2, r3
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	fb02 f203 	mul.w	r2, r2, r3
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004dca:	4413      	add	r3, r2
 8004dcc:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8004dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ddc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	3301      	adds	r3, #1
 8004de4:	633b      	str	r3, [r7, #48]	; 0x30
 8004de6:	e7d9      	b.n	8004d9c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8004dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dfa:	4413      	add	r3, r2
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8004e00:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004e04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e10:	fb02 f203 	mul.w	r2, r2, r3
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e1c:	18d4      	adds	r4, r2, r3
 8004e1e:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8004e22:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8004e26:	eeb0 0a67 	vmov.f32	s0, s15
 8004e2a:	f7fd fce6 	bl	80027fa <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8004e2e:	eef0 7a40 	vmov.f32	s15, s0
 8004e32:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	3301      	adds	r3, #1
 8004e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e3c:	e7a5      	b.n	8004d8a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8004e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e40:	3301      	adds	r3, #1
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e44:	e79b      	b.n	8004d7e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8004e46:	bf00      	nop
 8004e48:	3744      	adds	r7, #68	; 0x44
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd90      	pop	{r4, r7, pc}

08004e4e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b096      	sub	sp, #88	; 0x58
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8004e86:	6838      	ldr	r0, [r7, #0]
 8004e88:	f7fc fa2a 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	dc01      	bgt.n	8004e96 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8004e92:	f00c ff45 	bl	8011d20 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8004e96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e98:	f7fc fa22 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	dc01      	bgt.n	8004ea6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8004ea2:	f00c ff3d 	bl	8011d20 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	dd01      	ble.n	8004eb2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 8004eae:	f00c ff37 	bl	8011d20 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8004eb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004eb4:	f7fc fa14 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004eb8:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8004eba:	6838      	ldr	r0, [r7, #0]
 8004ebc:	f7fc fa10 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004ec0:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004eca:	f7ff fef4 	bl	8004cb6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8004ece:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	1e99      	subs	r1, r3, #2
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed6:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 8004ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eda:	6838      	ldr	r0, [r7, #0]
 8004edc:	f7fc facb 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8004ee0:	62b8      	str	r0, [r7, #40]	; 0x28
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6838      	ldr	r0, [r7, #0]
 8004eea:	f7fc fa05 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	da73      	bge.n	8004fe4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8004efc:	2300      	movs	r3, #0
 8004efe:	653b      	str	r3, [r7, #80]	; 0x50
 8004f00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	429a      	cmp	r2, r3
 8004f06:	da69      	bge.n	8004fdc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	429a      	cmp	r2, r3
 8004f16:	da24      	bge.n	8004f62 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 8004f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	fb02 f203 	mul.w	r2, r2, r3
 8004f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f22:	4413      	add	r3, r2
 8004f24:	461a      	mov	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4413      	add	r3, r2
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8004f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f32:	fb02 f203 	mul.w	r2, r2, r3
 8004f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f38:	4413      	add	r3, r2
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f3e:	4413      	add	r3, r2
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f48:	4413      	add	r3, r2
 8004f4a:	6a39      	ldr	r1, [r7, #32]
 8004f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f4e:	440a      	add	r2, r1
 8004f50:	fb02 f203 	mul.w	r2, r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f60:	e7d6      	b.n	8004f10 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8004f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 8004f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f6e:	4413      	add	r3, r2
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4413      	add	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc faa8 	bl	80014d4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8004f84:	4603      	mov	r3, r0
 8004f86:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f8c:	4413      	add	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8004f90:	f107 0218 	add.w	r2, r7, #24
 8004f94:	f107 0310 	add.w	r3, r7, #16
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fc f906 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8004fa6:	f107 0214 	add.w	r2, r7, #20
 8004faa:	f107 0310 	add.w	r3, r7, #16
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fd fbf5 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 8004fbc:	6939      	ldr	r1, [r7, #16]
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fc2:	fb02 f203 	mul.w	r2, r2, r3
 8004fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc8:	4413      	add	r3, r2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fce:	4413      	add	r3, r2
 8004fd0:	b2ca      	uxtb	r2, r1
 8004fd2:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8004fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	653b      	str	r3, [r7, #80]	; 0x50
 8004fda:	e791      	b.n	8004f00 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 8004fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fde:	3301      	adds	r3, #1
 8004fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8004fe2:	e787      	b.n	8004ef4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	3758      	adds	r7, #88	; 0x58
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b098      	sub	sp, #96	; 0x60
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	653b      	str	r3, [r7, #80]	; 0x50
  const int32_t filter_offset = params.weights_offset;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32_t output_offset = params.output_offset;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	623b      	str	r3, [r7, #32]
  const int32_t output_multiplier = params.output_multiplier;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	64bb      	str	r3, [r7, #72]	; 0x48
  const int output_shift = params.output_shift;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_activation_min = params.quantized_activation_min;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	61bb      	str	r3, [r7, #24]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	429a      	cmp	r2, r3
 800502a:	dd01      	ble.n	8005030 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 800502c:	f00c fe78 	bl	8011d20 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 8005036:	f00c fe73 	bl	8011d20 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800503a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800503c:	f7fc f950 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8005040:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_dim_count = filter_shape.DimensionsCount();
 8005042:	6838      	ldr	r0, [r7, #0]
 8005044:	f7fc f94c 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8005048:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800504a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504c:	3b01      	subs	r3, #1
 800504e:	4619      	mov	r1, r3
 8005050:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8005052:	f7ff fe30 	bl	8004cb6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8005056:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8005058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505a:	1e99      	subs	r1, r3, #2
 800505c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505e:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 8005060:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005062:	6838      	ldr	r0, [r7, #0]
 8005064:	f7fc fa07 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8005068:	6378      	str	r0, [r7, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	3b01      	subs	r3, #1
 800506e:	4619      	mov	r1, r3
 8005070:	6838      	ldr	r0, [r7, #0]
 8005072:	f7fc f941 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8005076:	6338      	str	r0, [r7, #48]	; 0x30
  for (int b = 0; b < batches; ++b) {
 8005078:	2300      	movs	r3, #0
 800507a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800507c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	429a      	cmp	r2, r3
 8005082:	da7c      	bge.n	800517e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8005084:	2300      	movs	r3, #0
 8005086:	65bb      	str	r3, [r7, #88]	; 0x58
 8005088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508c:	429a      	cmp	r2, r3
 800508e:	da72      	bge.n	8005176 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32_t accum = bias_data[out_c];
 8005090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005096:	4413      	add	r3, r2
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 800509c:	2300      	movs	r3, #0
 800509e:	657b      	str	r3, [r7, #84]	; 0x54
 80050a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	429a      	cmp	r2, r3
 80050a6:	da2c      	bge.n	8005102 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 80050a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ac:	fb02 f203 	mul.w	r2, r2, r3
 80050b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b2:	4413      	add	r3, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	4413      	add	r3, r2
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        int16_t filter_val =
            filter_data[out_c * accum_depth + d] + filter_offset;
 80050c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050cc:	fb02 f203 	mul.w	r2, r2, r3
 80050d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d2:	4413      	add	r3, r2
 80050d4:	461a      	mov	r2, r3
 80050d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d8:	4413      	add	r3, r2
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b29a      	uxth	r2, r3
 80050de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	b29b      	uxth	r3, r3
        int16_t filter_val =
 80050e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
        accum += filter_val * input_val;
 80050e8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80050ec:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80050f0:	fb02 f203 	mul.w	r2, r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4413      	add	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 80050fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050fc:	3301      	adds	r3, #1
 80050fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005100:	e7ce      	b.n	80050a0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32_t accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005106:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005108:	4618      	mov	r0, r3
 800510a:	f7fc f9e3 	bl	80014d4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800510e:	4603      	mov	r3, r0
      accum =
 8005110:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16_t, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800511e:	f107 0314 	add.w	r3, r7, #20
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f7fc f841 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 800512a:	4603      	mov	r3, r0
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
 8005138:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800513c:	f107 0314 	add.w	r3, r7, #20
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f7fd fb2c 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 8005148:	4603      	mov	r3, r0
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	4413      	add	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 8005156:	6979      	ldr	r1, [r7, #20]
 8005158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800515c:	fb02 f203 	mul.w	r2, r2, r3
 8005160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005162:	4413      	add	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005168:	4413      	add	r3, r2
 800516a:	b20a      	sxth	r2, r1
 800516c:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800516e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005170:	3301      	adds	r3, #1
 8005172:	65bb      	str	r3, [r7, #88]	; 0x58
 8005174:	e788      	b.n	8005088 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 8005176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005178:	3301      	adds	r3, #1
 800517a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800517c:	e77e      	b.n	800507c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 800517e:	bf00      	nop
 8005180:	3760      	adds	r7, #96	; 0x60
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8005186:	b580      	push	{r7, lr}
 8005188:	b096      	sub	sp, #88	; 0x58
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
 8005192:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	623b      	str	r3, [r7, #32]
  const int32_t output_activation_max = params.quantized_activation_max;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	61fb      	str	r3, [r7, #28]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 80051be:	6838      	ldr	r0, [r7, #0]
 80051c0:	f7fc f88e 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	dc01      	bgt.n	80051ce <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 80051ca:	f00c fda9 	bl	8011d20 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80051ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80051d0:	f7fc f886 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d001      	beq.n	80051de <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 80051da:	f00c fda1 	bl	8011d20 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80051de:	6a3a      	ldr	r2, [r7, #32]
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	dd01      	ble.n	80051ea <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 80051e6:	f00c fd9b 	bl	8011d20 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 80051ea:	6838      	ldr	r0, [r7, #0]
 80051ec:	f7fc f878 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80051f0:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 80051f2:	2100      	movs	r1, #0
 80051f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80051f6:	f7fc f87f 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80051fa:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 80051fc:	2101      	movs	r1, #1
 80051fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005200:	f7fc f87a 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8005204:	4603      	mov	r3, r0
 8005206:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 8005208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520a:	3b02      	subs	r3, #2
 800520c:	4619      	mov	r1, r3
 800520e:	6838      	ldr	r0, [r7, #0]
 8005210:	f7fc f872 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8005214:	4602      	mov	r2, r0
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	429a      	cmp	r2, r3
 800521a:	da01      	bge.n	8005220 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x9a>
 800521c:	f00c fd80 	bl	8011d20 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8005220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005222:	3b01      	subs	r3, #1
 8005224:	4619      	mov	r1, r3
 8005226:	6838      	ldr	r0, [r7, #0]
 8005228:	f7fc f866 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800522c:	62f8      	str	r0, [r7, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
 800522e:	2300      	movs	r3, #0
 8005230:	657b      	str	r3, [r7, #84]	; 0x54
 8005232:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	429a      	cmp	r2, r3
 8005238:	da75      	bge.n	8005326 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x1a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800523a:	2300      	movs	r3, #0
 800523c:	653b      	str	r3, [r7, #80]	; 0x50
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005242:	429a      	cmp	r2, r3
 8005244:	da6b      	bge.n	800531e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x198>
      int32_t acc = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800524a:	2300      	movs	r3, #0
 800524c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	429a      	cmp	r2, r3
 8005254:	da26      	bge.n	80052a4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11e>
        int32_t input_val = input_data[b * accum_depth + d];
 8005256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525a:	fb02 f203 	mul.w	r2, r2, r3
 800525e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005260:	4413      	add	r3, r2
 8005262:	461a      	mov	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	f993 3000 	ldrsb.w	r3, [r3]
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800526e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005272:	fb02 f203 	mul.w	r2, r2, r3
 8005276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005278:	4413      	add	r3, r2
 800527a:	461a      	mov	r2, r3
 800527c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800527e:	4413      	add	r3, r2
 8005280:	f993 3000 	ldrsb.w	r3, [r3]
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8005286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528a:	4413      	add	r3, r2
 800528c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800528e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005290:	440a      	add	r2, r1
 8005292:	fb02 f203 	mul.w	r2, r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	4413      	add	r3, r2
 800529a:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800529c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529e:	3301      	adds	r3, #1
 80052a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a2:	e7d4      	b.n	800524e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc8>
      }
      if (bias_data) {
 80052a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x134>
        acc += bias_data[out_c];
 80052aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052b0:	4413      	add	r3, r2
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4413      	add	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fc f907 	bl	80014d4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80052c6:	4603      	mov	r3, r0
 80052c8:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ce:	4413      	add	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 80052d2:	f107 0220 	add.w	r2, r7, #32
 80052d6:	f107 0314 	add.w	r3, r7, #20
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fb ff65 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 80052e2:	4603      	mov	r3, r0
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 80052e8:	f107 021c 	add.w	r2, r7, #28
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd fa54 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 80052f8:	4603      	mov	r3, r0
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 80052fe:	6979      	ldr	r1, [r7, #20]
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005304:	fb02 f203 	mul.w	r2, r2, r3
 8005308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530a:	4413      	add	r3, r2
 800530c:	461a      	mov	r2, r3
 800530e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005310:	4413      	add	r3, r2
 8005312:	b24a      	sxtb	r2, r1
 8005314:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8005316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005318:	3301      	adds	r3, #1
 800531a:	653b      	str	r3, [r7, #80]	; 0x50
 800531c:	e78f      	b.n	800523e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb8>
  for (int b = 0; b < batches; ++b) {
 800531e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005320:	3301      	adds	r3, #1
 8005322:	657b      	str	r3, [r7, #84]	; 0x54
 8005324:	e785      	b.n	8005232 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xac>
    }
  }
}
 8005326:	bf00      	nop
 8005328:	3758      	adds	r7, #88	; 0x58
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 800532e:	b590      	push	{r4, r7, lr}
 8005330:	b08d      	sub	sp, #52	; 0x34
 8005332:	af02      	add	r7, sp, #8
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	72fb      	strb	r3, [r7, #11]
 800533c:	4613      	mov	r3, r2
 800533e:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 8005340:	2300      	movs	r3, #0
 8005342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 8005346:	7abb      	ldrb	r3, [r7, #10]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d04d      	beq.n	80053e8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xba>
    double real_multiplier = 0.0;
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	f04f 0400 	mov.w	r4, #0
 8005354:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8005358:	f107 0318 	add.w	r3, r7, #24
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f001 fadd 	bl	8006928 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800536e:	4603      	mov	r3, r0
 8005370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005374:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0x54>
 800537c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005380:	e034      	b.n	80053ec <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xbe>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 8005382:	ed97 7b06 	vldr	d7, [r7, #24]
 8005386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005388:	f107 0214 	add.w	r2, r7, #20
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	eeb0 0a47 	vmov.f32	s0, s14
 8005394:	eef0 0a67 	vmov.f32	s1, s15
 8005398:	f006 fac8 	bl	800b92c <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	425a      	negs	r2, r3
 80053a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a2:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 80053a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a6:	f103 0208 	add.w	r2, r3, #8
 80053aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ac:	330c      	adds	r3, #12
 80053ae:	7af9      	ldrb	r1, [r7, #11]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	4613      	mov	r3, r2
 80053b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f001 fc44 	bl	8006c44 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80053c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xa2>
 80053ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80053ce:	e00d      	b.n	80053ec <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xbe>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));

    data->input_zero_point = input->params.zero_point;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d6:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053de:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e6:	61da      	str	r2, [r3, #28]
  }
  return status;
 80053e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	372c      	adds	r7, #44	; 0x2c
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}

080053f4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8005408:	f00c fc8a 	bl	8011d20 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	2120      	movs	r1, #32
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	4798      	blx	r3
 8005416:	4603      	mov	r3, r0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8005420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005422:	b08d      	sub	sp, #52	; 0x34
 8005424:	af04      	add	r7, sp, #16
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8005432:	f00c fc75 	bl	8011d20 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800543e:	f00c fc6f 	bl	8011d20 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	61fb      	str	r3, [r7, #28]
  const auto params =
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f001 f892 	bl	800657e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800545a:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x58>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695c      	ldr	r4, [r3, #20]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4b3e      	ldr	r3, [pc, #248]	; (8005564 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	235c      	movs	r3, #92	; 0x5c
 800546e:	4a3e      	ldr	r2, [pc, #248]	; (8005568 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 8005470:	493e      	ldr	r1, [pc, #248]	; (800556c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 8005472:	47a0      	blx	r4
 8005474:	2301      	movs	r3, #1
 8005476:	e071      	b.n	800555c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f001 f87d 	bl	800657e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8005484:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x82>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695c      	ldr	r4, [r3, #20]
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	4b37      	ldr	r3, [pc, #220]	; (8005570 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	235e      	movs	r3, #94	; 0x5e
 8005498:	4a33      	ldr	r2, [pc, #204]	; (8005568 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 800549a:	4934      	ldr	r1, [pc, #208]	; (800556c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800549c:	47a0      	blx	r4
 800549e:	2301      	movs	r3, #1
 80054a0:	e05c      	b.n	800555c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 f897 	bl	80065dc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 80054ae:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 f871 	bl	800659e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80054bc:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, output != nullptr);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xba>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695c      	ldr	r4, [r3, #20]
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2361      	movs	r3, #97	; 0x61
 80054d0:	4a25      	ldr	r2, [pc, #148]	; (8005568 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 80054d2:	4926      	ldr	r1, [pc, #152]	; (800556c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 80054d4:	47a0      	blx	r4
 80054d6:	2301      	movs	r3, #1
 80054d8:	e040      	b.n	800555c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	781a      	ldrb	r2, [r3, #0]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d01b      	beq.n	800551e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695c      	ldr	r4, [r3, #20]
 80054ea:	687d      	ldr	r5, [r7, #4]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fb fda1 	bl	8001038 <TfLiteTypeGetName>
 80054f6:	4606      	mov	r6, r0
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fb fd9b 	bl	8001038 <TfLiteTypeGetName>
 8005502:	4603      	mov	r3, r0
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	9602      	str	r6, [sp, #8]
 8005508:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	4b1b      	ldr	r3, [pc, #108]	; (800557c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	2363      	movs	r3, #99	; 0x63
 8005512:	4a15      	ldr	r2, [pc, #84]	; (8005568 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 8005514:	491a      	ldr	r1, [pc, #104]	; (8005580 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
 8005516:	4628      	mov	r0, r5
 8005518:	47a0      	blx	r4
 800551a:	2301      	movs	r3, #1
 800551c:	e01e      	b.n	800555c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d007      	beq.n	800553a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4914      	ldr	r1, [pc, #80]	; (8005584 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 8005532:	4610      	mov	r0, r2
 8005534:	4798      	blx	r3
 8005536:	2301      	movs	r3, #1
 8005538:	e010      	b.n	800555c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	7819      	ldrb	r1, [r3, #0]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	781a      	ldrb	r2, [r3, #0]
                         filter, bias, output, data);
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	9303      	str	r3, [sp, #12]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f7ff feea 	bl	800532e <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE>
 800555a:	4603      	mov	r3, r0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3724      	adds	r7, #36	; 0x24
 8005560:	46bd      	mov	sp, r7
 8005562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005564:	08014e2c 	.word	0x08014e2c
 8005568:	08014df4 	.word	0x08014df4
 800556c:	08014e14 	.word	0x08014e14
 8005570:	08014e40 	.word	0x08014e40
 8005574:	08014e54 	.word	0x08014e54
 8005578:	08014e84 	.word	0x08014e84
 800557c:	08014e94 	.word	0x08014e94
 8005580:	08014e68 	.word	0x08014e68
 8005584:	08014ea0 	.word	0x08014ea0

08005588 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 8005588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558a:	b0ad      	sub	sp, #180	; 0xb4
 800558c:	af06      	add	r7, sp, #24
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -data.input_zero_point;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	425b      	negs	r3, r3
 800559c:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -data.filter_zero_point;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	425b      	negs	r3, r3
 80055a4:	617b      	str	r3, [r7, #20]
  op_params.output_offset = data.output_zero_point;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	425b      	negs	r3, r3
 80055b8:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, tflite::micro::GetTensorShape(input),
 80055c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fec2 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 80055d2:	6838      	ldr	r0, [r7, #0]
 80055d4:	f7fd fbd8 	bl	8002d88 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80055d8:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(filter),
 80055da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055de:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 feb7 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 80055e8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80055ec:	f7fd fbcc 	bl	8002d88 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80055f0:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 80055f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80055f6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 feab 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 8005600:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005604:	f7fd fbcf 	bl	8002da6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8005608:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 800560a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800560e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fe9f 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 8005618:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800561c:	f7fd fbd2 	bl	8002dc4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8005620:	4603      	mov	r3, r0
 8005622:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005626:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800562a:	f107 0010 	add.w	r0, r7, #16
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005634:	9303      	str	r3, [sp, #12]
 8005636:	9502      	str	r5, [sp, #8]
 8005638:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	9400      	str	r4, [sp, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	4632      	mov	r2, r6
 8005644:	f7ff fd9f 	bl	8005186 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      tflite::micro::GetTensorShape(output),
 8005648:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800564c:	4618      	mov	r0, r3
 800564e:	f7fb fe31 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 8005652:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005656:	4618      	mov	r0, r3
 8005658:	f7fb fe2c 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 800565c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005660:	4618      	mov	r0, r3
 8005662:	f7fb fe27 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 8005666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800566a:	4618      	mov	r0, r3
 800566c:	f7fb fe22 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
  return kTfLiteOk;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	379c      	adds	r7, #156	; 0x9c
 8005676:	46bd      	mov	sp, r7
 8005678:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800567c <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteEvalTensor* input,
                           const TfLiteEvalTensor* filter,
                           const TfLiteEvalTensor* bias,
                           TfLiteEvalTensor* output) {
 800567c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800567e:	b0c9      	sub	sp, #292	; 0x124
 8005680:	af06      	add	r7, sp, #24
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	f107 0008 	add.w	r0, r7, #8
 8005688:	6001      	str	r1, [r0, #0]
 800568a:	1d39      	adds	r1, r7, #4
 800568c:	600a      	str	r2, [r1, #0]
 800568e:	463a      	mov	r2, r7
 8005690:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -data.input_zero_point;
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	425b      	negs	r3, r3
 800569a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -data.filter_zero_point;
 800569e:	1d3b      	adds	r3, r7, #4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	425b      	negs	r3, r3
 80056a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = data.output_zero_point;
 80056aa:	1d3b      	adds	r3, r7, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 80056b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b8:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 80056ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056be:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 80056c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c4:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 80056c6:	1d3b      	adds	r3, r7, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 80056ce:	1d3b      	adds	r3, r7, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	425b      	negs	r3, r3
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tflite::micro::GetTensorData<uint8_t>(filter),   \
      tflite::micro::GetTensorShape(bias),             \
      tflite::micro::GetTensorData<int32_t>(bias),     \
      tflite::micro::GetTensorShape(output),           \
      tflite::micro::GetTensorData<output_data_type>(output))
  switch (output->type) {
 80056e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056ec:	7a1b      	ldrb	r3, [r3, #8]
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d002      	beq.n	80056f8 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x7c>
 80056f2:	2b07      	cmp	r3, #7
 80056f4:	d058      	beq.n	80057a8 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
 80056f6:	e0af      	b.n	8005858 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 80056f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80056fc:	463b      	mov	r3, r7
 80056fe:	6819      	ldr	r1, [r3, #0]
 8005700:	4610      	mov	r0, r2
 8005702:	f000 fe28 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8005706:	463b      	mov	r3, r7
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	f7fd fb6c 	bl	8002de6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800570e:	4606      	mov	r6, r0
 8005710:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005714:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fe1c 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800571e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005722:	f7fd fb60 	bl	8002de6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8005726:	4604      	mov	r4, r0
 8005728:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800572c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fe10 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8005736:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800573a:	f7fd fb34 	bl	8002da6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800573e:	4605      	mov	r5, r0
 8005740:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005744:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fe04 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800574e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005752:	f7fd fb57 	bl	8002e04 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8005756:	4603      	mov	r3, r0
 8005758:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800575c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005760:	f107 0014 	add.w	r0, r7, #20
 8005764:	9304      	str	r3, [sp, #16]
 8005766:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800576a:	9303      	str	r3, [sp, #12]
 800576c:	9502      	str	r5, [sp, #8]
 800576e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	9400      	str	r4, [sp, #0]
 8005776:	4613      	mov	r3, r2
 8005778:	4632      	mov	r2, r6
 800577a:	f7ff fb68 	bl	8004e4e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 800577e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005782:	4618      	mov	r0, r3
 8005784:	f7fb fd96 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
 8005788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800578c:	4618      	mov	r0, r3
 800578e:	f7fb fd91 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
 8005792:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005796:	4618      	mov	r0, r3
 8005798:	f7fb fd8c 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
 800579c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fb fd87 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 80057a6:	e069      	b.n	800587c <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x200>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 80057a8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80057ac:	463b      	mov	r3, r7
 80057ae:	6819      	ldr	r1, [r3, #0]
 80057b0:	4610      	mov	r0, r2
 80057b2:	f000 fdd0 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80057b6:	463b      	mov	r3, r7
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	f7fd fb14 	bl	8002de6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80057be:	4606      	mov	r6, r0
 80057c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80057c4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fdc4 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80057ce:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80057d2:	f7fd fb08 	bl	8002de6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80057d6:	4604      	mov	r4, r0
 80057d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80057dc:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fdb8 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80057e6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80057ea:	f7fd fadc 	bl	8002da6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80057ee:	4605      	mov	r5, r0
 80057f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80057f4:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fdac 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80057fe:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005802:	f000 f943 	bl	8005a8c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8005806:	4603      	mov	r3, r0
 8005808:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800580c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8005810:	f107 0014 	add.w	r0, r7, #20
 8005814:	9304      	str	r3, [sp, #16]
 8005816:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	9502      	str	r5, [sp, #8]
 800581e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	9400      	str	r4, [sp, #0]
 8005826:	4613      	mov	r3, r2
 8005828:	4632      	mov	r2, r6
 800582a:	f7ff fbdf 	bl	8004fec <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 800582e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005832:	4618      	mov	r0, r3
 8005834:	f7fb fd3e 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
 8005838:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800583c:	4618      	mov	r0, r3
 800583e:	f7fb fd39 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
 8005842:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005846:	4618      	mov	r0, r3
 8005848:	f7fb fd34 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
 800584c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005850:	4618      	mov	r0, r3
 8005852:	f7fb fd2f 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8005856:	e011      	b.n	800587c <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x200>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	695c      	ldr	r4, [r3, #20]
 800585c:	68fd      	ldr	r5, [r7, #12]
 800585e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005862:	7a1b      	ldrb	r3, [r3, #8]
 8005864:	4618      	mov	r0, r3
 8005866:	f7fb fbe7 	bl	8001038 <TfLiteTypeGetName>
 800586a:	4602      	mov	r2, r0
 800586c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005870:	7a1b      	ldrb	r3, [r3, #8]
 8005872:	4905      	ldr	r1, [pc, #20]	; (8005888 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x20c>)
 8005874:	4628      	mov	r0, r5
 8005876:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x202>
  }

  return kTfLiteOk;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8005884:	46bd      	mov	sp, r7
 8005886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005888:	08014ef0 	.word	0x08014ef0

0800588c <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK16TfLiteEvalTensorS8_S8_PS6_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteEvalTensor* input,
                       const TfLiteEvalTensor* filter,
                       const TfLiteEvalTensor* bias, TfLiteEvalTensor* output) {
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588e:	b0af      	sub	sp, #188	; 0xbc
 8005890:	af06      	add	r7, sp, #24
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	4613      	mov	r3, r2
 800589a:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 800589c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80058a0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fd fa0c 	bl	8002cc4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 80058ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, tflite::micro::GetTensorShape(input),
 80058b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fd4b 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 80058c0:	6838      	ldr	r0, [r7, #0]
 80058c2:	f7fd fa41 	bl	8002d48 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80058c6:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<float>(input),
      tflite::micro::GetTensorShape(filter),
 80058c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058cc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fd40 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 80058d6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80058da:	f7fd fa35 	bl	8002d48 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80058de:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<float>(filter),
      tflite::micro::GetTensorShape(bias),
 80058e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80058e4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fd34 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 80058ee:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80058f2:	f7fd fa29 	bl	8002d48 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80058f6:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<float>(bias),
      tflite::micro::GetTensorShape(output),
 80058f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80058fc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fd28 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 8005906:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800590a:	f7fd fa2c 	bl	8002d66 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800590e:	4603      	mov	r3, r0
 8005910:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005914:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005918:	f107 0010 	add.w	r0, r7, #16
 800591c:	9304      	str	r3, [sp, #16]
 800591e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005922:	9303      	str	r3, [sp, #12]
 8005924:	9502      	str	r5, [sp, #8]
 8005926:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	9400      	str	r4, [sp, #0]
 800592e:	4613      	mov	r3, r2
 8005930:	4632      	mov	r2, r6
 8005932:	f7ff f9f6 	bl	8004d22 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      tflite::micro::GetTensorShape(output),
 8005936:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800593a:	4618      	mov	r0, r3
 800593c:	f7fb fcba 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 8005940:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005944:	4618      	mov	r0, r3
 8005946:	f7fb fcb5 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 800594a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800594e:	4618      	mov	r0, r3
 8005950:	f7fb fcb0 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 8005954:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005958:	4618      	mov	r0, r3
 800595a:	f7fb fcab 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<float>(output));
  return kTfLiteOk;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	37a4      	adds	r7, #164	; 0xa4
 8005964:	46bd      	mov	sp, r7
 8005966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005968 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8005968:	b5b0      	push	{r4, r5, r7, lr}
 800596a:	b08c      	sub	sp, #48	; 0x30
 800596c:	af04      	add	r7, sp, #16
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800597a:	f00c f9d1 	bl	8011d20 <abort>
  const auto* params =
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f7fc fa1f 	bl	8001dce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8005990:	61b8      	str	r0, [r7, #24]
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kWeightsTensor);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f7fc fa18 	bl	8001dce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800599e:	6178      	str	r0, [r7, #20]
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kBiasTensor);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc fa11 	bl	8001dce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80059ac:	6138      	str	r0, [r7, #16]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fc fa1a 	bl	8001dee <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80059ba:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
 80059c4:	f00c f9ac 	bl	8011d20 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	7a1b      	ldrb	r3, [r3, #8]
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d020      	beq.n	8005a18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 80059d6:	2b09      	cmp	r3, #9
 80059d8:	d010      	beq.n	80059fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d12a      	bne.n	8005a34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	781a      	ldrb	r2, [r3, #0]
                       output);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	9302      	str	r3, [sp, #8]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	f7ff ff4a 	bl	800588c <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK16TfLiteEvalTensorS8_S8_PS6_>
 80059f8:	4603      	mov	r3, r0
 80059fa:	e02a      	b.n	8005a52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 80059fc:	6878      	ldr	r0, [r7, #4]
                               output);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	f7ff fdba 	bl	8005588 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8005a14:	4603      	mov	r3, r0
 8005a16:	e01c      	b.n	8005a52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	f7ff fe26 	bl	800567c <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8005a30:	4603      	mov	r3, r0
 8005a32:	e00e      	b.n	8005a52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	695c      	ldr	r4, [r3, #20]
 8005a38:	687d      	ldr	r5, [r7, #4]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	7a1b      	ldrb	r3, [r3, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fb fafa 	bl	8001038 <TfLiteTypeGetName>
 8005a44:	4602      	mov	r2, r0
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	7a1b      	ldrb	r3, [r3, #8]
 8005a4a:	4904      	ldr	r1, [pc, #16]	; (8005a5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8005a50:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3720      	adds	r7, #32
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bdb0      	pop	{r4, r5, r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	08014ef0 	.word	0x08014ef0

08005a60 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8005a60:	b4b0      	push	{r4, r5, r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a07      	ldr	r2, [pc, #28]	; (8005a88 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 8005a6c:	461c      	mov	r4, r3
 8005a6e:	4615      	mov	r5, r2
 8005a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bcb0      	pop	{r4, r5, r7}
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	08014f0c 	.word	0x08014f0c

08005a8c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	e000      	b.n	8005aa2 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	4a04      	ldr	r2, [pc, #16]	; (8005acc <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	080178c4 	.word	0x080178c4

08005ad0 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	4a04      	ldr	r2, [pc, #16]	; (8005aec <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	080178c4 	.word	0x080178c4

08005af0 <_ZN6tflite13MemoryPlannerD0Ev>:
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff ffe9 	bl	8005ad0 <_ZN6tflite13MemoryPlannerD1Ev>
 8005afe:	2104      	movs	r1, #4
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f00b fe58 	bl	80117b6 <_ZdlPvj>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8005b16:	2328      	movs	r3, #40	; 0x28
 8005b18:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8005b1a:	2328      	movs	r3, #40	; 0x28
  }
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8005b28:	b480      	push	{r7}
 8005b2a:	b089      	sub	sp, #36	; 0x24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8005b34:	2300      	movs	r3, #0
 8005b36:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8005b38:	2301      	movs	r3, #1
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	da4c      	bge.n	8005bde <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	68f9      	ldr	r1, [r7, #12]
 8005b5a:	440b      	add	r3, r1
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	da39      	bge.n	8005bd6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	441a      	add	r2, r3
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b82:	3b01      	subs	r3, #1
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	440b      	add	r3, r1
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	441a      	add	r2, r3
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	440b      	add	r3, r1
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	4413      	add	r3, r2
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	e7ae      	b.n	8005b3c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8005bde:	7ffb      	ldrb	r3, [r7, #31]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d000      	beq.n	8005be6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 8005be4:	e7a6      	b.n	8005b34 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8005be6:	bf00      	nop
 8005be8:	3724      	adds	r7, #36	; 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff ff54 	bl	8005ab0 <_ZN6tflite13MemoryPlannerC1Ev>
 8005c08:	4a22      	ldr	r2, [pc, #136]	; (8005c94 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8005c1c:	687c      	ldr	r4, [r7, #4]
 8005c1e:	f7ff ff77 	bl	8005b10 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 8005c22:	4603      	mov	r3, r0
 8005c24:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4413      	add	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	461a      	mov	r2, r3
 8005c74:	4613      	mov	r3, r2
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd90      	pop	{r4, r7, pc}
 8005c94:	080178a4 	.word	0x080178a4

08005c98 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	4a05      	ldr	r2, [pc, #20]	; (8005cb8 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff ff11 	bl	8005ad0 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	080178a4 	.word	0x080178a4

08005cbc <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
}
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff ffe7 	bl	8005c98 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8005cca:	212c      	movs	r1, #44	; 0x2c
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f00b fd72 	bl	80117b6 <_ZdlPvj>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	db08      	blt.n	8005d08 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	4913      	ldr	r1, [pc, #76]	; (8005d4c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 8005cfe:	68b8      	ldr	r0, [r7, #8]
 8005d00:	f7fd f90c 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e01d      	b.n	8005d44 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	4413      	add	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
  current->size = size;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	6a3a      	ldr	r2, [r7, #32]
 8005d26:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2e:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	08014f68 	.word	0x08014f68

08005d50 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b089      	sub	sp, #36	; 0x24
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	4413      	add	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	681c      	ldr	r4, [r3, #0]
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	47a0      	blx	r4
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e003      	b.n	8005d9e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9a:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd90      	pop	{r4, r7, pc}

08005da6 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 8005da6:	b480      	push	{r7}
 8005da8:	b087      	sub	sp, #28
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8005dbe:	4413      	add	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	da01      	bge.n	8005dd0 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e007      	b.n	8005de0 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	dd01      	ble.n	8005dde <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e000      	b.n	8005de0 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 8005dde:	2301      	movs	r3, #1
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10b      	bne.n	8005e1c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	699a      	ldr	r2, [r3, #24]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	460b      	mov	r3, r1
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	440b      	add	r3, r1
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	e011      	b.n	8005e40 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d101      	bne.n	8005e2a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e029      	b.n	8005e7e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	4619      	mov	r1, r3
 8005e34:	460b      	mov	r3, r1
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	440b      	add	r3, r1
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6939      	ldr	r1, [r7, #16]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7ff ffad 	bl	8005da6 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	617b      	str	r3, [r7, #20]
      break;
 8005e56:	e011      	b.n	8005e7c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	d00b      	beq.n	8005e7a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	440b      	add	r3, r1
 8005e72:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 8005e74:	4413      	add	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8005e78:	e7e2      	b.n	8005e40 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 8005e7a:	bf00      	nop
  } while (true);
  return result;
 8005e7c:	697b      	ldr	r3, [r7, #20]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b098      	sub	sp, #96	; 0x60
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e94:	f083 0301 	eor.w	r3, r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 815f 	bne.w	800615e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 815a 	beq.w	800615e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	657b      	str	r3, [r7, #84]	; 0x54
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	da4d      	bge.n	8005f66 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	4413      	add	r3, r2
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d11e      	bne.n	8005f1a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 8005edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	441a      	add	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6919      	ldr	r1, [r3, #16]
 8005ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f06:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	f04f 32ff 	mov.w	r2, #4294967295
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	e021      	b.n	8005f5e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	441a      	add	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6919      	ldr	r1, [r3, #16]
 8005f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695a      	ldr	r2, [r3, #20]
 8005f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f3e:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	441a      	add	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	6852      	ldr	r2, [r2, #4]
 8005f56:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 8005f58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8005f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f60:	3301      	adds	r3, #1
 8005f62:	657b      	str	r3, [r7, #84]	; 0x54
 8005f64:	e7ac      	b.n	8005ec0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f76:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8005f78:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8005f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	f7ff fdd0 	bl	8005b28 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699a      	ldr	r2, [r3, #24]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	440b      	add	r3, r1
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 8005faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fac:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb0:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 8005fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fbe:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	4413      	add	r3, r2
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d106      	bne.n	8005fe0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fee:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	f280 80b0 	bge.w	8006160 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	4413      	add	r3, r2
 8006018:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8006020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 800602c:	2300      	movs	r3, #0
 800602e:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d12d      	bne.n	8006096 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 800603a:	2300      	movs	r3, #0
 800603c:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
            prior_entry, wanted_first_time_used, wanted_last_time_used);
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff fed1 	bl	8005dec <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800604a:	62b8      	str	r0, [r7, #40]	; 0x28

        if (prior_entry) {
 800604c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800604e:	2b00      	cmp	r3, #0
 8006050:	d012      	beq.n	8006078 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 800605c:	4413      	add	r3, r2
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 8006060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 8006068:	4413      	add	r3, r2
 800606a:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 800606c:	6a3a      	ldr	r2, [r7, #32]
 800606e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006070:	429a      	cmp	r2, r3
 8006072:	dd01      	ble.n	8006078 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00f      	beq.n	800609e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608c:	429a      	cmp	r2, r3
 800608e:	da08      	bge.n	80060a2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	647b      	str	r3, [r7, #68]	; 0x44
      }
 8006094:	e7d3      	b.n	800603e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	64bb      	str	r3, [r7, #72]	; 0x48
 800609c:	e002      	b.n	80060a4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 80060a2:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060b0:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	4619      	mov	r1, r3
 80060bc:	460b      	mov	r3, r1
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	440b      	add	r3, r1
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060cc:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060d2:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 80060e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ea:	429a      	cmp	r2, r3
 80060ec:	da09      	bge.n	8006102 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1a      	ldr	r2, [r3, #32]
 80060f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f8:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	621a      	str	r2, [r3, #32]
 8006100:	e029      	b.n	8006156 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 8006102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006104:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 8006106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d107      	bne.n	8006124 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 8006114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f04f 32ff 	mov.w	r2, #4294967295
 8006120:	609a      	str	r2, [r3, #8]
          break;
 8006122:	e018      	b.n	8006156 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6999      	ldr	r1, [r3, #24]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4613      	mov	r3, r2
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800613c:	429a      	cmp	r2, r3
 800613e:	da07      	bge.n	8006150 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 8006148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	609a      	str	r2, [r3, #8]
          break;
 800614e:	e002      	b.n	8006156 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	643b      	str	r3, [r7, #64]	; 0x40
      }
 8006154:	e7d7      	b.n	8006106 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 8006156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006158:	3301      	adds	r3, #1
 800615a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800615c:	e74a      	b.n	8005ff4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 800615e:	bf00      	nop
    }
  }
}
 8006160:	3760      	adds	r7, #96	; 0x60
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 8006166:	b580      	push	{r7, lr}
 8006168:	b086      	sub	sp, #24
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff fe89 	bl	8005e86 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 800617c:	2300      	movs	r3, #0
 800617e:	e035      	b.n	80061ec <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	4619      	mov	r1, r3
 800618a:	460b      	mov	r3, r1
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	440b      	add	r3, r1
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	613b      	str	r3, [r7, #16]
  while (entry) {
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d024      	beq.n	80061ea <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 80061aa:	4413      	add	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4413      	add	r3, r2
 80061b8:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d901      	bls.n	80061c6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d00b      	beq.n	80061e8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699a      	ldr	r2, [r3, #24]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4619      	mov	r1, r3
 80061da:	460b      	mov	r3, r1
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	440b      	add	r3, r1
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]
  while (entry) {
 80061e6:	e7d8      	b.n	800619a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 80061e8:	bf00      	nop
  }
  return max_size;
 80061ea:	693b      	ldr	r3, [r7, #16]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff fe33 	bl	8005e86 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	db04      	blt.n	8006230 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	db08      	blt.n	8006242 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4909      	ldr	r1, [pc, #36]	; (800625c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 8006238:	68b8      	ldr	r0, [r7, #8]
 800623a:	f7fc fe6f 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 800623e:	2301      	movs	r3, #1
 8006240:	e008      	b.n	8006254 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	08014ff8 	.word	0x08014ff8

08006260 <_ZN6tflite12RuntimeShapeC1Ev>:
  RuntimeShape() : size_(0) {}
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <_ZN6tflite12RuntimeShapeC1EiPKl>:
  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f846 	bl	8006324 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <_ZN6tflite12RuntimeShape8DimsDataEv>:
  inline int32_t* DimsData() {
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	dd02      	ble.n	80062b8 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	e001      	b.n	80062bc <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3304      	adds	r3, #4
  }
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <_ZN6tflite12RuntimeShape6ResizeEi>:
  inline void Resize(int dimensions_count) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	dd08      	ble.n	80062ec <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
      delete[] dims_pointer_;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f00b fa5e 	bl	80117a8 <_ZdaPv>
    size_ = dimensions_count;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b05      	cmp	r3, #5
 80062f6:	dd0e      	ble.n	8006316 <_ZN6tflite12RuntimeShape6ResizeEi+0x4e>
      dims_pointer_ = new int32_t[dimensions_count];
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <_ZN6tflite12RuntimeShape6ResizeEi+0x58>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d801      	bhi.n	8006304 <_ZN6tflite12RuntimeShape6ResizeEi+0x3c>
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	e001      	b.n	8006308 <_ZN6tflite12RuntimeShape6ResizeEi+0x40>
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	4618      	mov	r0, r3
 800630a:	f00b fa52 	bl	80117b2 <_Znaj>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	605a      	str	r2, [r3, #4]
  }
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	1ffffffe 	.word	0x1ffffffe

08006324 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff ffc8 	bl	80062c8 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f7ff ffb2 	bl	80062a2 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800633e:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	461a      	mov	r2, r3
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	6978      	ldr	r0, [r7, #20]
 800634a:	f00b fdab 	bl	8011ea4 <memcpy>
  }
 800634e:	bf00      	nop
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8006356:	b580      	push	{r7, lr}
 8006358:	b086      	sub	sp, #24
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff ff76 	bl	8006260 <_ZN6tflite12RuntimeShapeC1Ev>
 8006374:	e00d      	b.n	8006392 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	3304      	adds	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	6939      	ldr	r1, [r7, #16]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff ff75 	bl	800627c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800639a:	b480      	push	{r7}
 800639c:	af00      	add	r7, sp, #0
 800639e:	2300      	movs	r3, #0
 80063a0:	4618      	mov	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 80063aa:	b480      	push	{r7}
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	23ff      	movs	r3, #255	; 0xff
 80063b0:	4618      	mov	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
 80063c0:	4b02      	ldr	r3, [pc, #8]	; (80063cc <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 80063c2:	4618      	mov	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	ffff8000 	.word	0xffff8000

080063d0 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80063d8:	4618      	mov	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int64_t NumElements(const TfLiteIntArray* dims) {
 80063fc:	b490      	push	{r4, r7}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 8006404:	f04f 0301 	mov.w	r3, #1
 8006408:	f04f 0400 	mov.w	r4, #0
 800640c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	429a      	cmp	r2, r3
 800641c:	da1a      	bge.n	8006454 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x58>
    count *= dims->data[i];
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	fb03 f102 	mul.w	r1, r3, r2
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	fb04 f202 	mul.w	r2, r4, r2
 8006438:	440a      	add	r2, r1
 800643a:	6939      	ldr	r1, [r7, #16]
 800643c:	fba1 3403 	umull	r3, r4, r1, r3
 8006440:	4422      	add	r2, r4
 8006442:	4614      	mov	r4, r2
 8006444:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8006448:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e7df      	b.n	8006414 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  return count;
 8006454:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8006458:	4618      	mov	r0, r3
 800645a:	4621      	mov	r1, r4
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bc90      	pop	{r4, r7}
 8006462:	4770      	bx	lr

08006464 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff ffc3 	bl	80063fc <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 8006476:	4603      	mov	r3, r0
 8006478:	460c      	mov	r4, r1
}
 800647a:	4618      	mov	r0, r3
 800647c:	4621      	mov	r1, r4
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	bd90      	pop	{r4, r7, pc}

08006484 <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8006484:	b490      	push	{r4, r7}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	ed87 0b00 	vstr	d0, [r7]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 8006496:	ec44 3b17 	vmov	d7, r3, r4
 800649a:	eeb0 0a47 	vmov.f32	s0, s14
 800649e:	eef0 0a67 	vmov.f32	s1, s15
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc90      	pop	{r4, r7}
 80064a8:	4770      	bx	lr

080064aa <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	ed87 0a01 	vstr	s0, [r7, #4]
 80064b4:	ed97 0a01 	vldr	s0, [r7, #4]
 80064b8:	f00b fab2 	bl	8011a20 <roundf>
 80064bc:	eef0 7a40 	vmov.f32	s15, s0
 80064c0:	eeb0 0a67 	vmov.f32	s0, s15
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	019b      	lsls	r3, r3, #6
 80064e4:	4413      	add	r3, r2
 80064e6:	e005      	b.n	80064f4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2a>
  } else {
    return context->GetTensor(context, tensor_index);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	4798      	blx	r3
 80064f2:	4603      	mov	r3, r0
  }
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	db0f      	blt.n	8006530 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	da0b      	bge.n	8006530 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	4413      	add	r3, r2
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d001      	beq.n	8006530 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	e001      	b.n	8006534 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8006530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8006550:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8006556:	3304      	adds	r3, #4
      context, index, node->inputs->size, node->inputs->data);
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f7ff ffce 	bl	80064fc <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8006560:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	da01      	bge.n	800656c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8006568:	2300      	movs	r3, #0
 800656a:	e004      	b.n	8006576 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  }
  return GetTensorAtIndex(context, tensor_index);
 800656c:	6979      	ldr	r1, [r7, #20]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff ffab 	bl	80064ca <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8006574:	4603      	mov	r3, r0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff ffd6 	bl	8006540 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8006594:	4603      	mov	r3, r0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 800659e:	b580      	push	{r7, lr}
 80065a0:	b086      	sub	sp, #24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80065ae:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80065b4:	3304      	adds	r3, #4
      context, index, node->outputs->size, node->outputs->data);
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7ff ff9f 	bl	80064fc <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80065be:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	da01      	bge.n	80065ca <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80065c6:	2300      	movs	r3, #0
 80065c8:	e004      	b.n	80065d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  }
  return GetTensorAtIndex(context, tensor_index);
 80065ca:	6979      	ldr	r1, [r7, #20]
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff ff7c 	bl	80064ca <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff ffc6 	bl	800657e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80065f2:	4603      	mov	r3, r0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 80065fc:	b5b0      	push	{r4, r5, r7, lr}
 80065fe:	b09a      	sub	sp, #104	; 0x68
 8006600:	af04      	add	r7, sp, #16
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006610:	2b01      	cmp	r3, #1
 8006612:	d013      	beq.n	800663c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	695c      	ldr	r4, [r3, #20]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006620:	461a      	mov	r2, r3
 8006622:	2301      	movs	r3, #1
 8006624:	9303      	str	r3, [sp, #12]
 8006626:	9202      	str	r2, [sp, #8]
 8006628:	4b97      	ldr	r3, [pc, #604]	; (8006888 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	4b97      	ldr	r3, [pc, #604]	; (800688c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	23d2      	movs	r3, #210	; 0xd2
 8006632:	4a97      	ldr	r2, [pc, #604]	; (8006890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8006634:	4997      	ldr	r1, [pc, #604]	; (8006894 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8006636:	47a0      	blx	r4
 8006638:	2301      	movs	r3, #1
 800663a:	e171      	b.n	8006920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006642:	2b01      	cmp	r3, #1
 8006644:	d013      	beq.n	800666e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	695c      	ldr	r4, [r3, #20]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006652:	461a      	mov	r2, r3
 8006654:	2301      	movs	r3, #1
 8006656:	9303      	str	r3, [sp, #12]
 8006658:	9202      	str	r2, [sp, #8]
 800665a:	4b8b      	ldr	r3, [pc, #556]	; (8006888 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800665c:	9301      	str	r3, [sp, #4]
 800665e:	4b8e      	ldr	r3, [pc, #568]	; (8006898 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	23d4      	movs	r3, #212	; 0xd4
 8006664:	4a8a      	ldr	r2, [pc, #552]	; (8006890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8006666:	498b      	ldr	r1, [pc, #556]	; (8006894 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8006668:	47a0      	blx	r4
 800666a:	2301      	movs	r3, #1
 800666c:	e158      	b.n	8006920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  const auto* affine_quantization =
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
  TF_LITE_ENSURE(context, affine_quantization);
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	695c      	ldr	r4, [r3, #20]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	4b86      	ldr	r3, [pc, #536]	; (800689c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	23de      	movs	r3, #222	; 0xde
 8006686:	4a82      	ldr	r2, [pc, #520]	; (8006890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8006688:	4985      	ldr	r1, [pc, #532]	; (80068a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800668a:	47a0      	blx	r4
 800668c:	2301      	movs	r3, #1
 800668e:	e147      	b.n	8006920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	695c      	ldr	r4, [r3, #20]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	4b81      	ldr	r3, [pc, #516]	; (80068a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	23df      	movs	r3, #223	; 0xdf
 80066a4:	4a7a      	ldr	r2, [pc, #488]	; (8006890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80066a6:	497e      	ldr	r1, [pc, #504]	; (80068a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 80066a8:	47a0      	blx	r4
 80066aa:	2301      	movs	r3, #1
 80066ac:	e138      	b.n	8006920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	bfcc      	ite	gt
 80066b8:	2301      	movgt	r3, #1
 80066ba:	2300      	movle	r3, #0
 80066bc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (is_per_channel) {
 80066c0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d067      	beq.n	8006798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b09      	cmp	r3, #9
 80066ce:	d00e      	beq.n	80066ee <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b07      	cmp	r3, #7
 80066d6:	d00a      	beq.n	80066ee <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	695c      	ldr	r4, [r3, #20]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	4b72      	ldr	r3, [pc, #456]	; (80068a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	23e4      	movs	r3, #228	; 0xe4
 80066e4:	4a6a      	ldr	r2, [pc, #424]	; (8006890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80066e6:	496e      	ldr	r1, [pc, #440]	; (80068a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 80066e8:	47a0      	blx	r4
 80066ea:	2301      	movs	r3, #1
 80066ec:	e118      	b.n	8006920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b09      	cmp	r3, #9
 80066f4:	d012      	beq.n	800671c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	695c      	ldr	r4, [r3, #20]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	2309      	movs	r3, #9
 8006704:	9303      	str	r3, [sp, #12]
 8006706:	9202      	str	r2, [sp, #8]
 8006708:	4b68      	ldr	r3, [pc, #416]	; (80068ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	4b68      	ldr	r3, [pc, #416]	; (80068b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	23e5      	movs	r3, #229	; 0xe5
 8006712:	4a5f      	ldr	r2, [pc, #380]	; (8006890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8006714:	495f      	ldr	r1, [pc, #380]	; (8006894 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8006716:	47a0      	blx	r4
 8006718:	2301      	movs	r3, #1
 800671a:	e101      	b.n	8006920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006726:	429a      	cmp	r2, r3
 8006728:	d013      	beq.n	8006752 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	695c      	ldr	r4, [r3, #20]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800673a:	9203      	str	r2, [sp, #12]
 800673c:	9302      	str	r3, [sp, #8]
 800673e:	4b5d      	ldr	r3, [pc, #372]	; (80068b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	4b5d      	ldr	r3, [pc, #372]	; (80068b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	23e6      	movs	r3, #230	; 0xe6
 8006748:	4a51      	ldr	r2, [pc, #324]	; (8006890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800674a:	4952      	ldr	r1, [pc, #328]	; (8006894 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800674c:	47a0      	blx	r4
 800674e:	2301      	movs	r3, #1
 8006750:	e0e6      	b.n	8006920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
    TF_LITE_ENSURE_EQ(
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006764:	429a      	cmp	r2, r3
 8006766:	d017      	beq.n	8006798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	695c      	ldr	r4, [r3, #20]
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6899      	ldr	r1, [r3, #8]
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	9303      	str	r3, [sp, #12]
 8006782:	9202      	str	r2, [sp, #8]
 8006784:	4b4d      	ldr	r3, [pc, #308]	; (80068bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	4b4a      	ldr	r3, [pc, #296]	; (80068b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	23e9      	movs	r3, #233	; 0xe9
 800678e:	4a40      	ldr	r2, [pc, #256]	; (8006890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8006790:	4940      	ldr	r1, [pc, #256]	; (8006894 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8006792:	47a0      	blx	r4
 8006794:	2301      	movs	r3, #1
 8006796:	e0c3      	b.n	8006920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float output_scale = output->params.scale;
 800679e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	64bb      	str	r3, [r7, #72]	; 0x48
  const float* filter_scales = affine_quantization->scale->data;
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3304      	adds	r3, #4
 80067aa:	647b      	str	r3, [r7, #68]	; 0x44
  for (int i = 0; i < num_channels; ++i) {
 80067ac:	2300      	movs	r3, #0
 80067ae:	657b      	str	r3, [r7, #84]	; 0x54
 80067b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067b6:	429a      	cmp	r2, r3
 80067b8:	da47      	bge.n	800684a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 80067ba:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 80067c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067c8:	4413      	add	r3, r2
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	e001      	b.n	80067d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 80067ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	643b      	str	r3, [r7, #64]	; 0x40
    const double filter_scale = static_cast<double>(scale);
 80067d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80067d6:	f7f9 fec7 	bl	8000568 <__aeabi_f2d>
 80067da:	4603      	mov	r3, r0
 80067dc:	460c      	mov	r4, r1
 80067de:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 80067e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80067e4:	f7f9 fec0 	bl	8000568 <__aeabi_f2d>
 80067e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067ec:	f7f9 ff14 	bl	8000618 <__aeabi_dmul>
 80067f0:	4603      	mov	r3, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	4625      	mov	r5, r4
 80067f6:	461c      	mov	r4, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 80067f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80067fa:	f7f9 feb5 	bl	8000568 <__aeabi_f2d>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 8006802:	4620      	mov	r0, r4
 8006804:	4629      	mov	r1, r5
 8006806:	f7fa f831 	bl	800086c <__aeabi_ddiv>
 800680a:	4603      	mov	r3, r0
 800680c:	460c      	mov	r4, r1
 800680e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8006812:	f107 0220 	add.w	r2, r7, #32
 8006816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800681a:	4611      	mov	r1, r2
 800681c:	4618      	mov	r0, r3
 800681e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8006822:	f005 f883 	bl	800b92c <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 8006826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800682e:	4413      	add	r3, r2
 8006830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006832:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 8006834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800683c:	4413      	add	r3, r2
 800683e:	6a3a      	ldr	r2, [r7, #32]
 8006840:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 8006842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006844:	3301      	adds	r3, #1
 8006846:	657b      	str	r3, [r7, #84]	; 0x54
 8006848:	e7b2      	b.n	80067b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b03      	cmp	r3, #3
 8006850:	d146      	bne.n	80068e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	f04f 0400 	mov.w	r4, #0
 800685a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f107 0318 	add.w	r3, r7, #24
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	f000 f85a 	bl	8006928 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800687a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01e      	beq.n	80068c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 8006882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006886:	e04b      	b.n	8006920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
 8006888:	080150f0 	.word	0x080150f0
 800688c:	0801510c 	.word	0x0801510c
 8006890:	080150b8 	.word	0x080150b8
 8006894:	080150d4 	.word	0x080150d4
 8006898:	08015128 	.word	0x08015128
 800689c:	0801515c 	.word	0x0801515c
 80068a0:	08015144 	.word	0x08015144
 80068a4:	08015170 	.word	0x08015170
 80068a8:	0801518c 	.word	0x0801518c
 80068ac:	080151c8 	.word	0x080151c8
 80068b0:	080151d4 	.word	0x080151d4
 80068b4:	080151e4 	.word	0x080151e4
 80068b8:	080151f4 	.word	0x080151f4
 80068bc:	08015218 	.word	0x08015218
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 80068c0:	ed97 7b06 	vldr	d7, [r7, #24]
 80068c4:	f107 0314 	add.w	r3, r7, #20
 80068c8:	4619      	mov	r1, r3
 80068ca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80068cc:	eeb0 0a47 	vmov.f32	s0, s14
 80068d0:	eef0 0a67 	vmov.f32	s1, s15
 80068d4:	f005 f82a 	bl	800b92c <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	425a      	negs	r2, r3
 80068dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068de:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b09      	cmp	r3, #9
 80068e6:	d007      	beq.n	80068f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d003      	beq.n	80068f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 80068f4:	2b07      	cmp	r3, #7
 80068f6:	d112      	bne.n	800691e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x322>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fc:	7819      	ldrb	r1, [r3, #0]
 80068fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006904:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006906:	f000 f99d 	bl	8006c44 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800690a:	4603      	mov	r3, r0
 800690c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006910:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x322>
 8006918:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800691c:	e000      	b.n	8006920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3758      	adds	r7, #88	; 0x58
 8006924:	46bd      	mov	sp, r7
 8006926:	bdb0      	pop	{r4, r5, r7, pc}

08006928 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8006928:	b5b0      	push	{r4, r5, r7, lr}
 800692a:	b08e      	sub	sp, #56	; 0x38
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	4618      	mov	r0, r3
 800693c:	f7f9 fe14 	bl	8000568 <__aeabi_f2d>
 8006940:	4604      	mov	r4, r0
 8006942:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4618      	mov	r0, r3
 800694a:	f7f9 fe0d 	bl	8000568 <__aeabi_f2d>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006952:	4620      	mov	r0, r4
 8006954:	4629      	mov	r1, r5
 8006956:	f7f9 fe5f 	bl	8000618 <__aeabi_dmul>
 800695a:	4603      	mov	r3, r0
 800695c:	460c      	mov	r4, r1
 800695e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d04b      	beq.n	8006a00 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	4618      	mov	r0, r3
 800696e:	f7f9 fdfb 	bl	8000568 <__aeabi_f2d>
 8006972:	4603      	mov	r3, r0
 8006974:	460c      	mov	r4, r1
 8006976:	e9c7 3408 	strd	r3, r4, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800697a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800697e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006982:	f7f9 fc91 	bl	80002a8 <__aeabi_dsub>
 8006986:	4603      	mov	r3, r0
 8006988:	460c      	mov	r4, r1
 800698a:	ec44 3b17 	vmov	d7, r3, r4
 800698e:	eeb0 0a47 	vmov.f32	s0, s14
 8006992:	eef0 0a67 	vmov.f32	s1, s15
 8006996:	f7ff fd75 	bl	8006484 <_ZSt3absd>
 800699a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800699e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7f9 fde0 	bl	8000568 <__aeabi_f2d>
 80069a8:	4603      	mov	r3, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	e9c7 3404 	strd	r3, r4, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80069b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80069b8:	f7f9 ff58 	bl	800086c <__aeabi_ddiv>
 80069bc:	4603      	mov	r3, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	4618      	mov	r0, r3
 80069c2:	4621      	mov	r1, r4
 80069c4:	2301      	movs	r3, #1
 80069c6:	461c      	mov	r4, r3
 80069c8:	a318      	add	r3, pc, #96	; (adr r3, 8006a2c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	f7fa f89f 	bl	8000b10 <__aeabi_dcmple>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 80069d8:	2300      	movs	r3, #0
 80069da:	461c      	mov	r4, r3
 80069dc:	b2e3      	uxtb	r3, r4
 80069de:	f083 0301 	eor.w	r3, r3, #1
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	695c      	ldr	r4, [r3, #20]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	f240 1335 	movw	r3, #309	; 0x135
 80069f6:	4a0b      	ldr	r2, [pc, #44]	; (8006a24 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80069f8:	490b      	ldr	r1, [pc, #44]	; (8006a28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80069fa:	47a0      	blx	r4
 80069fc:	2301      	movs	r3, #1
 80069fe:	e008      	b.n	8006a12 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8006a00:	68f8      	ldr	r0, [r7, #12]
                                          multiplier);
 8006a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	68b9      	ldr	r1, [r7, #8]
 8006a0c:	f000 f812 	bl	8006a34 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8006a10:	4603      	mov	r3, r0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3730      	adds	r7, #48	; 0x30
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bdb0      	pop	{r4, r5, r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	f3af 8000 	nop.w
 8006a20:	08015258 	.word	0x08015258
 8006a24:	080150b8 	.word	0x080150b8
 8006a28:	08015144 	.word	0x08015144
 8006a2c:	47ae147b 	.word	0x47ae147b
 8006a30:	3f947ae1 	.word	0x3f947ae1

08006a34 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b089      	sub	sp, #36	; 0x24
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	ed93 7a03 	vldr	s14, [r3, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8006a52:	ee17 0a90 	vmov	r0, s15
 8006a56:	f7f9 fd87 	bl	8000568 <__aeabi_f2d>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8006a62:	2301      	movs	r3, #1
 8006a64:	461c      	mov	r4, r3
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a72:	f7fa f857 	bl	8000b24 <__aeabi_dcmpge>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	461c      	mov	r4, r3
 8006a80:	b2e3      	uxtb	r3, r4
 8006a82:	f083 0301 	eor.w	r3, r3, #1
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	695c      	ldr	r4, [r3, #20]
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	f44f 73a1 	mov.w	r3, #322	; 0x142
 8006a9a:	4a0f      	ldr	r2, [pc, #60]	; (8006ad8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8006a9c:	490f      	ldr	r1, [pc, #60]	; (8006adc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa8>)
 8006a9e:	47a0      	blx	r4
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e012      	b.n	8006aca <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x96>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7f9 fd5d 	bl	8000568 <__aeabi_f2d>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006aba:	f7f9 fed7 	bl	800086c <__aeabi_ddiv>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac4:	e9c2 3400 	strd	r3, r4, [r2]

  return kTfLiteOk;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd90      	pop	{r4, r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	0801527c 	.word	0x0801527c
 8006ad8:	080150b8 	.word	0x080150b8
 8006adc:	08015144 	.word	0x08015144

08006ae0 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	ed87 0a00 	vstr	s0, [r7]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8006af2:	ed97 7a00 	vldr	s14, [r7]
 8006af6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006afa:	eeb0 0a66 	vmov.f32	s0, s13
 8006afe:	f000 f8f5 	bl	8006cec <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8006b02:	eef0 7a40 	vmov.f32	s15, s0
 8006b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b0a:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
  };
 8006b12:	4413      	add	r3, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08e      	sub	sp, #56	; 0x38
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8006b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d118      	bne.n	8006b78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8006b46:	f107 0314 	add.w	r3, r7, #20
 8006b4a:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8006c40 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff ffc6 	bl	8006ae0 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006b54:	4603      	mov	r3, r0
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	f107 021c 	add.w	r2, r7, #28
 8006b5c:	f107 0308 	add.w	r3, r7, #8
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fa fb22 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b6e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b74:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8006b76:	e05f      	b.n	8006c38 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d129      	bne.n	8006bd2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8006b7e:	f107 0314 	add.w	r3, r7, #20
 8006b82:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8006c40 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff ffaa 	bl	8006ae0 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	623b      	str	r3, [r7, #32]
 8006b90:	f107 0220 	add.w	r2, r7, #32
 8006b94:	f107 0308 	add.w	r3, r7, #8
 8006b98:	4611      	mov	r1, r2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fa fb06 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba6:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8006ba8:	f107 0314 	add.w	r3, r7, #20
 8006bac:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff ff95 	bl	8006ae0 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006bbe:	1d3b      	adds	r3, r7, #4
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fb fdec 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bce:	601a      	str	r2, [r3, #0]
}
 8006bd0:	e032      	b.n	8006c38 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d129      	bne.n	8006c2c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8006bd8:	f107 0314 	add.w	r3, r7, #20
 8006bdc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff ff7d 	bl	8006ae0 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006be6:	4603      	mov	r3, r0
 8006be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006bee:	f107 0308 	add.w	r3, r7, #8
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fa fad9 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c00:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8006c02:	f107 0314 	add.w	r3, r7, #20
 8006c06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff ff68 	bl	8006ae0 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006c10:	4603      	mov	r3, r0
 8006c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c14:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006c18:	1d3b      	adds	r3, r7, #4
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fb fdbf 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 8006c22:	4603      	mov	r3, r0
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c28:	601a      	str	r2, [r3, #0]
}
 8006c2a:	e005      	b.n	8006c38 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c30:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c36:	601a      	str	r2, [r3, #0]
}
 8006c38:	bf00      	nop
 8006c3a:	3738      	adds	r7, #56	; 0x38
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	00000000 	.word	0x00000000

08006c44 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8006c44:	b590      	push	{r4, r7, lr}
 8006c46:	b089      	sub	sp, #36	; 0x24
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	460b      	mov	r3, r1
 8006c52:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d108      	bne.n	8006c76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8006c64:	f7ff fb99 	bl	800639a <_ZNSt14numeric_limitsIhE3minEv>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8006c6c:	f7ff fb9d 	bl	80063aa <_ZNSt14numeric_limitsIhE3maxEv>
 8006c70:	4603      	mov	r3, r0
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	e025      	b.n	8006cc2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b09      	cmp	r3, #9
 8006c7c:	d108      	bne.n	8006c90 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8006c7e:	f7fa fa57 	bl	8001130 <_ZNSt14numeric_limitsIaE3minEv>
 8006c82:	4603      	mov	r3, r0
 8006c84:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8006c86:	f7fa fa5c 	bl	8001142 <_ZNSt14numeric_limitsIaE3maxEv>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	613b      	str	r3, [r7, #16]
 8006c8e:	e018      	b.n	8006cc2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b07      	cmp	r3, #7
 8006c96:	d108      	bne.n	8006caa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8006c98:	f7ff fb90 	bl	80063bc <_ZNSt14numeric_limitsIsE3minEv>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8006ca0:	f7ff fb96 	bl	80063d0 <_ZNSt14numeric_limitsIsE3maxEv>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	e00b      	b.n	8006cc2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	695c      	ldr	r4, [r3, #20]
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	f240 1375 	movw	r3, #373	; 0x175
 8006cb8:	4a0a      	ldr	r2, [pc, #40]	; (8006ce4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8006cba:	490b      	ldr	r1, [pc, #44]	; (8006ce8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8006cbc:	47a0      	blx	r4
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e00a      	b.n	8006cd8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8006cc2:	7af8      	ldrb	r0, [r7, #11]
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	6979      	ldr	r1, [r7, #20]
 8006cd2:	f7ff ff23 	bl	8006b1c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	371c      	adds	r7, #28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd90      	pop	{r4, r7, pc}
 8006ce0:	08015298 	.word	0x08015298
 8006ce4:	080150b8 	.word	0x080150b8
 8006ce8:	08015144 	.word	0x08015144

08006cec <_ZN6tflite11TfLiteRoundIfEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8006cf6:	ed97 0a01 	vldr	s0, [r7, #4]
 8006cfa:	f7ff fbd6 	bl	80064aa <_ZSt5roundf>
 8006cfe:	eef0 7a40 	vmov.f32	s15, s0
 8006d02:	eeb0 0a67 	vmov.f32	s0, s15
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	4a04      	ldr	r2, [pc, #16]	; (8006d28 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	08017950 	.word	0x08017950

08006d2c <_ZN6tflite13ErrorReporterD0Ev>:
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff ffe9 	bl	8006d0c <_ZN6tflite13ErrorReporterD1Ev>
 8006d3a:	2104      	movs	r1, #4
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f00a fd3a 	bl	80117b6 <_ZdlPvj>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	4a05      	ldr	r2, [pc, #20]	; (8006d6c <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff ffd5 	bl	8006d0c <_ZN6tflite13ErrorReporterD1Ev>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	080183ac 	.word	0x080183ac

08006d70 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff ffe7 	bl	8006d4c <_ZN6tflite18MicroErrorReporterD1Ev>
 8006d7e:	2104      	movs	r1, #4
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f00a fd18 	bl	80117b6 <_ZdlPvj>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <_ZN11flatbuffers11EndianCheckEv>:
inline void EndianCheck() {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8006d96:	2301      	movs	r3, #1
 8006d98:	607b      	str	r3, [r7, #4]
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 8006d9a:	1d3b      	adds	r3, r7, #4
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d005      	beq.n	8006dae <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8006da4:	4a05      	ldr	r2, [pc, #20]	; (8006dbc <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8006da6:	214e      	movs	r1, #78	; 0x4e
 8006da8:	4805      	ldr	r0, [pc, #20]	; (8006dc0 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8006daa:	f00a ffc1 	bl	8011d30 <__assert_func>
}
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	08015314 	.word	0x08015314
 8006dbc:	0801795c 	.word	0x0801795c
 8006dc0:	08015358 	.word	0x08015358

08006dc4 <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2104      	movs	r1, #4
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fc9f 	bl	8007716 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006dd8:	4603      	mov	r3, r0
  }
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fcb1 	bl	8007752 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8006df0:	4603      	mov	r3, r0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fcaf 	bl	800776a <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	08017934 	.word	0x08017934

08006e34 <_ZN6tflite10OpResolverD0Ev>:
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ffe9 	bl	8006e14 <_ZN6tflite10OpResolverD1Ev>
 8006e42:	2104      	movs	r1, #4
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f00a fcb6 	bl	80117b6 <_ZdlPvj>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3314      	adds	r3, #20
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	7afa      	ldrb	r2, [r7, #11]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	4798      	blx	r3
 8006e72:	4603      	mov	r3, r0
  }
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3318      	adds	r3, #24
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
  }
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	4a05      	ldr	r2, [pc, #20]	; (8006ec0 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff ffaf 	bl	8006e14 <_ZN6tflite10OpResolverD1Ev>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	0801790c 	.word	0x0801790c

08006ec4 <_ZN6tflite15MicroOpResolverD0Ev>:
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff ffe7 	bl	8006ea0 <_ZN6tflite15MicroOpResolverD1Ev>
 8006ed2:	2104      	movs	r1, #4
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f00a fc6e 	bl	80117b6 <_ZdlPvj>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ee6:	f5ad 5d28 	sub.w	sp, sp, #10752	; 0x2a00
 8006eea:	b087      	sub	sp, #28
 8006eec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006eee:	f008 fa12 	bl	800f316 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006ef2:	f000 fad9 	bl	80074a8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ef6:	f000 fbe3 	bl	80076c0 <_ZL12MX_GPIO_Initv>
  MX_TIM16_Init();
 8006efa:	f000 fb81 	bl	8007600 <_ZL13MX_TIM16_Initv>
  MX_USART2_UART_Init();
 8006efe:	f000 fbab 	bl	8007658 <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 8006f02:	f000 fb55 	bl	80075b0 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
  //setup();
  // Set up logging.
  tflite::MicroErrorReporter micro_error_reporter;
 8006f06:	4b68      	ldr	r3, [pc, #416]	; (80070a8 <main+0x1c4>)
 8006f08:	f507 5226 	add.w	r2, r7, #10624	; 0x2980
 8006f0c:	f102 0220 	add.w	r2, r2, #32
 8006f10:	6013      	str	r3, [r2, #0]

  // Map the model into a usable data structure. This doesn't involve any
  // copying or parsing, it's a very lightweight operation.
  const tflite::Model* model = ::tflite::GetModel(g_model);
 8006f12:	4866      	ldr	r0, [pc, #408]	; (80070ac <main+0x1c8>)
 8006f14:	f7ff ff65 	bl	8006de2 <_ZN6tflite8GetModelEPKv>
 8006f18:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8006f1c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8006f20:	6018      	str	r0, [r3, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION)
 8006f22:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8006f26:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	f7ff ff4a 	bl	8006dc4 <_ZNK6tflite5Model7versionEv>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	bf14      	ite	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	2300      	moveq	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00f      	beq.n	8006f60 <main+0x7c>
  {
	  TF_LITE_REPORT_ERROR(&micro_error_reporter,
 8006f40:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8006f44:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	f7ff ff3b 	bl	8006dc4 <_ZNK6tflite5Model7versionEv>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	f507 5026 	add.w	r0, r7, #10624	; 0x2980
 8006f54:	f100 0020 	add.w	r0, r0, #32
 8006f58:	2303      	movs	r3, #3
 8006f5a:	4955      	ldr	r1, [pc, #340]	; (80070b0 <main+0x1cc>)
 8006f5c:	f7fb ffde 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
  // An easier approach is to just use the AllOpsResolver, but this will
  // incur some penalty in code space for op implementations that are not
  // needed by this graph.
  //
  // tflite::AllOpsResolver resolver;
  tflite::MicroMutableOpResolver<4> micro_op_resolver;
 8006f60:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8006f64:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fc2c 	bl	80077c8 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>
  micro_op_resolver.AddDepthwiseConv2D();
 8006f70:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8006f74:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fc45 	bl	8007808 <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv>
    return AddBuiltin(BuiltinOperator_FLOOR,
                      tflite::ops::micro::Register_FLOOR(), ParseFloor);
  }

  TfLiteStatus AddFullyConnected(
      const TfLiteRegistration& registration = Register_FULLY_CONNECTED()) {
 8006f7e:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 8006f82:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fd6a 	bl	8005a60 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
  micro_op_resolver.AddFullyConnected();
 8006f8c:	f507 5226 	add.w	r2, r7, #10624	; 0x2980
 8006f90:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8006f94:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8006f98:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fc4a 	bl	8007838 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration>
  micro_op_resolver.AddReshape();
 8006fa4:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8006fa8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fc55 	bl	800785c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv>
  micro_op_resolver.AddSoftmax();
 8006fb2:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8006fb6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fc66 	bl	800788c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxEv>

  // Create an area of memory to use for input, output, and intermediate arrays.
  const int tensor_arena_size = 10 * 1024;
 8006fc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006fc4:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8006fc8:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8006fcc:	6013      	str	r3, [r2, #0]
  uint8_t tensor_arena[tensor_arena_size];

  // Build an interpreter to run the model with.
  tflite::MicroInterpreter interpreter(model, micro_op_resolver, tensor_arena,
									 tensor_arena_size,
									 &micro_error_reporter);
 8006fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd2:	3b0c      	subs	r3, #12
 8006fd4:	f507 5123 	add.w	r1, r7, #10432	; 0x28c0
 8006fd8:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8006fdc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8006fe0:	3824      	subs	r0, #36	; 0x24
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	9202      	str	r2, [sp, #8]
 8006fe6:	f507 5226 	add.w	r2, r7, #10624	; 0x2980
 8006fea:	f102 0220 	add.w	r2, r2, #32
 8006fee:	9201      	str	r2, [sp, #4]
 8006ff0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006ff4:	9200      	str	r2, [sp, #0]
 8006ff6:	460a      	mov	r2, r1
 8006ff8:	f507 5127 	add.w	r1, r7, #10688	; 0x29c0
 8006ffc:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8007000:	6809      	ldr	r1, [r1, #0]
 8007002:	f003 fcaf 	bl	800a964 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
  interpreter.AllocateTensors();
 8007006:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800700a:	3b24      	subs	r3, #36	; 0x24
 800700c:	4618      	mov	r0, r3
 800700e:	f003 fd8b 	bl	800ab28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>

  // Get information about the memory area to use for the model's input.
  TfLiteTensor* input = interpreter.input(0);
 8007012:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007016:	3b24      	subs	r3, #36	; 0x24
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f003 ff54 	bl	800aec8 <_ZN6tflite16MicroInterpreter5inputEj>
 8007020:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007024:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007028:	6018      	str	r0, [r3, #0]
  //TF_LITE_MICRO_EXPECT_EQ(1960, input->dims->data[1]);
  //TF_LITE_MICRO_EXPECT_EQ(kTfLiteInt8, input->type);

  // Copy a spectrogram created from a .wav audio file of someone saying "Yes",
  // into the memory area used for the input.
  const int8_t* yes_features_data = g_yes_micro_f2e59fea_nohash_1_data;
 800702a:	4b22      	ldr	r3, [pc, #136]	; (80070b4 <main+0x1d0>)
 800702c:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8007030:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8007034:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < input->bytes; ++i) {
 8007036:	2300      	movs	r3, #0
 8007038:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 800703c:	f102 0204 	add.w	r2, r2, #4
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007046:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8007052:	f102 0204 	add.w	r2, r2, #4
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d22d      	bcs.n	80070b8 <main+0x1d4>
	  input->data.int8[i] = yes_features_data[i];
 800705c:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007060:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 800706a:	f103 0304 	add.w	r3, r3, #4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	441a      	add	r2, r3
 8007072:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007076:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6859      	ldr	r1, [r3, #4]
 800707e:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8007082:	f103 0304 	add.w	r3, r3, #4
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	440b      	add	r3, r1
 800708a:	f992 2000 	ldrsb.w	r2, [r2]
 800708e:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < input->bytes; ++i) {
 8007090:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8007094:	f103 0304 	add.w	r3, r3, #4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3301      	adds	r3, #1
 800709c:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 80070a0:	f102 0204 	add.w	r2, r2, #4
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	e7cc      	b.n	8007042 <main+0x15e>
 80070a8:	080183ac 	.word	0x080183ac
 80070ac:	080183b8 	.word	0x080183b8
 80070b0:	08015388 	.word	0x08015388
 80070b4:	0801f4ec 	.word	0x0801f4ec
  }

  // Run the model on this input and make sure it succeeds.
  TfLiteStatus invoke_status = interpreter.Invoke();
 80070b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80070bc:	3b24      	subs	r3, #36	; 0x24
 80070be:	4618      	mov	r0, r3
 80070c0:	f003 fe64 	bl	800ad8c <_ZN6tflite16MicroInterpreter6InvokeEv>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 80070ca:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80070ce:	7013      	strb	r3, [r2, #0]
  if (invoke_status != kTfLiteOk)
 80070d0:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80070d4:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d007      	beq.n	80070ee <main+0x20a>
  {
	  TF_LITE_REPORT_ERROR(&micro_error_reporter, "Invoke failed\n");
 80070de:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 80070e2:	f103 0320 	add.w	r3, r3, #32
 80070e6:	497f      	ldr	r1, [pc, #508]	; (80072e4 <main+0x400>)
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fb ff17 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }
  //TF_LITE_MICRO_EXPECT_EQ(kTfLiteOk, invoke_status);

  // Get the output from the model, and make sure it's the expected size and
  // type.
  TfLiteTensor* output = interpreter.output(0);
 80070ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80070f2:	3b24      	subs	r3, #36	; 0x24
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f003 ff4c 	bl	800af94 <_ZN6tflite16MicroInterpreter6outputEj>
 80070fc:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007100:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007104:	6018      	str	r0, [r3, #0]
  //TF_LITE_MICRO_EXPECT_EQ(1, output->dims->data[0]);
  //TF_LITE_MICRO_EXPECT_EQ(4, output->dims->data[1]);
  //TF_LITE_MICRO_EXPECT_EQ(kTfLiteInt8, output->type);

  // There are four possible classes in the output, each with a score.
  const int kSilenceIndex = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 800710c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8007110:	6013      	str	r3, [r2, #0]
  const int kUnknownIndex = 1;
 8007112:	2301      	movs	r3, #1
 8007114:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8007118:	f102 0220 	add.w	r2, r2, #32
 800711c:	6013      	str	r3, [r2, #0]
  //const int kYesIndex = 2;
  //const int kNoIndex = 3;
  const int kGoIndex = 2;
 800711e:	2302      	movs	r3, #2
 8007120:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8007124:	f102 021c 	add.w	r2, r2, #28
 8007128:	6013      	str	r3, [r2, #0]
  const int kStopIndex = 3;
 800712a:	2303      	movs	r3, #3
 800712c:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8007130:	f102 0218 	add.w	r2, r2, #24
 8007134:	6013      	str	r3, [r2, #0]
  const int kRightIndex = 4;
 8007136:	2304      	movs	r3, #4
 8007138:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 800713c:	f102 0214 	add.w	r2, r2, #20
 8007140:	6013      	str	r3, [r2, #0]
  const int kLeftIndex = 5;
 8007142:	2305      	movs	r3, #5
 8007144:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8007148:	f102 0210 	add.w	r2, r2, #16
 800714c:	6013      	str	r3, [r2, #0]

  // Make sure that the expected "Yes" score is higher than the other classes.
  uint8_t silence_score = output->data.uint8[kSilenceIndex] + 128;
 800714e:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007152:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	3b80      	subs	r3, #128	; 0x80
 800715e:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8007162:	f102 020f 	add.w	r2, r2, #15
 8007166:	7013      	strb	r3, [r2, #0]
  uint8_t unknown_score = output->data.uint8[kUnknownIndex] + 128;
 8007168:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 800716c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	3301      	adds	r3, #1
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	3b80      	subs	r3, #128	; 0x80
 800717a:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 800717e:	f102 020e 	add.w	r2, r2, #14
 8007182:	7013      	strb	r3, [r2, #0]
  uint8_t go_score = output->data.int8[kGoIndex] + 128;
 8007184:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007188:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	3302      	adds	r3, #2
 8007192:	f993 3000 	ldrsb.w	r3, [r3]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	3b80      	subs	r3, #128	; 0x80
 800719a:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 800719e:	f102 020d 	add.w	r2, r2, #13
 80071a2:	7013      	strb	r3, [r2, #0]
  uint8_t stop_score = output->data.int8[kStopIndex] + 128;
 80071a4:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80071a8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	3303      	adds	r3, #3
 80071b2:	f993 3000 	ldrsb.w	r3, [r3]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	3b80      	subs	r3, #128	; 0x80
 80071ba:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 80071be:	f102 020c 	add.w	r2, r2, #12
 80071c2:	7013      	strb	r3, [r2, #0]
  uint8_t right_score = output->data.int8[kRightIndex] + 128;
 80071c4:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80071c8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	3304      	adds	r3, #4
 80071d2:	f993 3000 	ldrsb.w	r3, [r3]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	3b80      	subs	r3, #128	; 0x80
 80071da:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 80071de:	f102 020b 	add.w	r2, r2, #11
 80071e2:	7013      	strb	r3, [r2, #0]
  uint8_t left_score = output->data.int8[kLeftIndex] + 128;
 80071e4:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80071e8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	3305      	adds	r3, #5
 80071f2:	f993 3000 	ldrsb.w	r3, [r3]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	3b80      	subs	r3, #128	; 0x80
 80071fa:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 80071fe:	f102 020a 	add.w	r2, r2, #10
 8007202:	7013      	strb	r3, [r2, #0]
  //TF_LITE_MICRO_EXPECT_GT(yes_score, silence_score);
  //TF_LITE_MICRO_EXPECT_GT(yes_score, unknown_score);
  //TF_LITE_MICRO_EXPECT_GT(yes_score, no_score);

  char buf2[100]="";
 8007204:	f107 0308 	add.w	r3, r7, #8
 8007208:	3b08      	subs	r3, #8
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	3304      	adds	r3, #4
 8007210:	2260      	movs	r2, #96	; 0x60
 8007212:	2100      	movs	r1, #0
 8007214:	4618      	mov	r0, r3
 8007216:	f00a fe69 	bl	8011eec <memset>

  //sprintf(buf2, "Silence %d | Unknown %d | Yes %d | No %d \r\n",
	//	  silence_score,unknown_score,go_score,stop_score,right_score,left_score);
  sprintf(buf2, "Silence %d | Unknown %d | Go %d | Stop %d | Right %d | Left %d \r\n",
 800721a:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 800721e:	f103 030f 	add.w	r3, r3, #15
 8007222:	781d      	ldrb	r5, [r3, #0]
 8007224:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007228:	f103 030e 	add.w	r3, r3, #14
 800722c:	781e      	ldrb	r6, [r3, #0]
 800722e:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007232:	f103 030d 	add.w	r3, r3, #13
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 800723c:	f102 020c 	add.w	r2, r2, #12
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	f507 5127 	add.w	r1, r7, #10688	; 0x29c0
 8007246:	f101 010b 	add.w	r1, r1, #11
 800724a:	7809      	ldrb	r1, [r1, #0]
 800724c:	f507 5027 	add.w	r0, r7, #10688	; 0x29c0
 8007250:	f100 000a 	add.w	r0, r0, #10
 8007254:	7804      	ldrb	r4, [r0, #0]
 8007256:	f107 0008 	add.w	r0, r7, #8
 800725a:	3808      	subs	r0, #8
 800725c:	9403      	str	r4, [sp, #12]
 800725e:	9102      	str	r1, [sp, #8]
 8007260:	9201      	str	r2, [sp, #4]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	4633      	mov	r3, r6
 8007266:	462a      	mov	r2, r5
 8007268:	491f      	ldr	r1, [pc, #124]	; (80072e8 <main+0x404>)
 800726a:	f00b fced 	bl	8012c48 <siprintf>
  		  silence_score,unknown_score,go_score,stop_score,right_score,left_score);
  HAL_UART_Transmit(&huart2, (uint8_t *)buf2, sizeof(buf2), 100);
 800726e:	f107 0108 	add.w	r1, r7, #8
 8007272:	3908      	subs	r1, #8
 8007274:	2364      	movs	r3, #100	; 0x64
 8007276:	2264      	movs	r2, #100	; 0x64
 8007278:	481c      	ldr	r0, [pc, #112]	; (80072ec <main+0x408>)
 800727a:	f009 fe8f 	bl	8010f9c <HAL_UART_Transmit>

  // Now test with a different input, from a recording of "No".
  const int8_t* no_features_data = g_no_micro_f9643d42_nohash_4_data;
 800727e:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <main+0x40c>)
 8007280:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8007284:	f102 0204 	add.w	r2, r2, #4
 8007288:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < input->bytes; ++i) {
 800728a:	2300      	movs	r3, #0
 800728c:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007296:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 80072a2:	6812      	ldr	r2, [r2, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d225      	bcs.n	80072f4 <main+0x410>
	  input->data.int8[i] = no_features_data[i];
 80072a8:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80072ac:	f103 0304 	add.w	r3, r3, #4
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	441a      	add	r2, r3
 80072ba:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80072be:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6859      	ldr	r1, [r3, #4]
 80072c6:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	440b      	add	r3, r1
 80072ce:	f992 2000 	ldrsb.w	r2, [r2]
 80072d2:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < input->bytes; ++i) {
 80072d4:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3301      	adds	r3, #1
 80072dc:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	e7d6      	b.n	8007292 <main+0x3ae>
 80072e4:	080153d0 	.word	0x080153d0
 80072e8:	080153e0 	.word	0x080153e0
 80072ec:	20000270 	.word	0x20000270
 80072f0:	0801ec18 	.word	0x0801ec18
  }

  // Run the model on this "No" input.
  invoke_status = interpreter.Invoke();
 80072f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80072f8:	3b24      	subs	r3, #36	; 0x24
 80072fa:	4618      	mov	r0, r3
 80072fc:	f003 fd46 	bl	800ad8c <_ZN6tflite16MicroInterpreter6InvokeEv>
 8007300:	4603      	mov	r3, r0
 8007302:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8007306:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 800730a:	7013      	strb	r3, [r2, #0]
  if (invoke_status != kTfLiteOk) {
 800730c:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007310:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <main+0x446>
	  TF_LITE_REPORT_ERROR(&micro_error_reporter, "Invoke failed\n");
 800731a:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 800731e:	f103 0320 	add.w	r3, r3, #32
 8007322:	495e      	ldr	r1, [pc, #376]	; (800749c <main+0x5b8>)
 8007324:	4618      	mov	r0, r3
 8007326:	f7fb fdf9 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }
  //TF_LITE_MICRO_EXPECT_EQ(kTfLiteOk, invoke_status);

  // Get the output from the model, and make sure it's the expected size and
  // type.
  output = interpreter.output(0);
 800732a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800732e:	3b24      	subs	r3, #36	; 0x24
 8007330:	2100      	movs	r1, #0
 8007332:	4618      	mov	r0, r3
 8007334:	f003 fe2e 	bl	800af94 <_ZN6tflite16MicroInterpreter6outputEj>
 8007338:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 800733c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007340:	6018      	str	r0, [r3, #0]
  //TF_LITE_MICRO_EXPECT_EQ(1, output->dims->data[0]);
 // TF_LITE_MICRO_EXPECT_EQ(4, output->dims->data[1]);
  //TF_LITE_MICRO_EXPECT_EQ(kTfLiteInt8, output->type);

  // Make sure that the expected "No" score is higher than the other classes.
  silence_score = output->data.int8[kSilenceIndex] + 128;
 8007342:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007346:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f993 3000 	ldrsb.w	r3, [r3]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	3b80      	subs	r3, #128	; 0x80
 8007356:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 800735a:	f102 020f 	add.w	r2, r2, #15
 800735e:	7013      	strb	r3, [r2, #0]
  unknown_score = output->data.int8[kUnknownIndex] + 128;
 8007360:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007364:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	3301      	adds	r3, #1
 800736e:	f993 3000 	ldrsb.w	r3, [r3]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	3b80      	subs	r3, #128	; 0x80
 8007376:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 800737a:	f102 020e 	add.w	r2, r2, #14
 800737e:	7013      	strb	r3, [r2, #0]
  //yes_score = output->data.int8[kYesIndex] + 128;
  //no_score = output->data.int8[kNoIndex] + 128;
  go_score = output->data.int8[kGoIndex] + 128;
 8007380:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007384:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	3302      	adds	r3, #2
 800738e:	f993 3000 	ldrsb.w	r3, [r3]
 8007392:	b2db      	uxtb	r3, r3
 8007394:	3b80      	subs	r3, #128	; 0x80
 8007396:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 800739a:	f102 020d 	add.w	r2, r2, #13
 800739e:	7013      	strb	r3, [r2, #0]
  stop_score = output->data.int8[kStopIndex] + 128;
 80073a0:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80073a4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	3303      	adds	r3, #3
 80073ae:	f993 3000 	ldrsb.w	r3, [r3]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	3b80      	subs	r3, #128	; 0x80
 80073b6:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 80073ba:	f102 020c 	add.w	r2, r2, #12
 80073be:	7013      	strb	r3, [r2, #0]
  right_score = output->data.int8[kRightIndex] + 128;
 80073c0:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80073c4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	3304      	adds	r3, #4
 80073ce:	f993 3000 	ldrsb.w	r3, [r3]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	3b80      	subs	r3, #128	; 0x80
 80073d6:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 80073da:	f102 020b 	add.w	r2, r2, #11
 80073de:	7013      	strb	r3, [r2, #0]
  left_score = output->data.int8[kLeftIndex] + 128;
 80073e0:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 80073e4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	3305      	adds	r3, #5
 80073ee:	f993 3000 	ldrsb.w	r3, [r3]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	3b80      	subs	r3, #128	; 0x80
 80073f6:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 80073fa:	f102 020a 	add.w	r2, r2, #10
 80073fe:	7013      	strb	r3, [r2, #0]

   //sprintf(buf2, "Silence %d | Unknown %d | Yes %d | No %d \r\n",
 	//	  silence_score,unknown_score,go_score,stop_score,right_score,left_score);
  sprintf(buf2, "Silence %d | Unknown %d | Go %d | Stop %d | Right %d | Left %d \r\n",
 8007400:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007404:	f103 030f 	add.w	r3, r3, #15
 8007408:	781d      	ldrb	r5, [r3, #0]
 800740a:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 800740e:	f103 030e 	add.w	r3, r3, #14
 8007412:	781e      	ldrb	r6, [r3, #0]
 8007414:	f507 5327 	add.w	r3, r7, #10688	; 0x29c0
 8007418:	f103 030d 	add.w	r3, r3, #13
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8007422:	f102 020c 	add.w	r2, r2, #12
 8007426:	7812      	ldrb	r2, [r2, #0]
 8007428:	f507 5127 	add.w	r1, r7, #10688	; 0x29c0
 800742c:	f101 010b 	add.w	r1, r1, #11
 8007430:	7809      	ldrb	r1, [r1, #0]
 8007432:	f507 5027 	add.w	r0, r7, #10688	; 0x29c0
 8007436:	f100 000a 	add.w	r0, r0, #10
 800743a:	7804      	ldrb	r4, [r0, #0]
 800743c:	f107 0008 	add.w	r0, r7, #8
 8007440:	3808      	subs	r0, #8
 8007442:	9403      	str	r4, [sp, #12]
 8007444:	9102      	str	r1, [sp, #8]
 8007446:	9201      	str	r2, [sp, #4]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	4633      	mov	r3, r6
 800744c:	462a      	mov	r2, r5
 800744e:	4914      	ldr	r1, [pc, #80]	; (80074a0 <main+0x5bc>)
 8007450:	f00b fbfa 	bl	8012c48 <siprintf>
    		  silence_score,unknown_score,go_score,stop_score,right_score,left_score);
   HAL_UART_Transmit(&huart2, (uint8_t *)buf2, sizeof(buf2), 100);
 8007454:	f107 0108 	add.w	r1, r7, #8
 8007458:	3908      	subs	r1, #8
 800745a:	2364      	movs	r3, #100	; 0x64
 800745c:	2264      	movs	r2, #100	; 0x64
 800745e:	4811      	ldr	r0, [pc, #68]	; (80074a4 <main+0x5c0>)
 8007460:	f009 fd9c 	bl	8010f9c <HAL_UART_Transmit>
									 &micro_error_reporter);
 8007464:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007468:	3b24      	subs	r3, #36	; 0x24
 800746a:	4618      	mov	r0, r3
 800746c:	f003 fac8 	bl	800aa00 <_ZN6tflite16MicroInterpreterD1Ev>
  tflite::MicroMutableOpResolver<4> micro_op_resolver;
 8007470:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8007474:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fb25 	bl	8007ac8 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
  tflite::MicroErrorReporter micro_error_reporter;
 800747e:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 8007482:	f103 0320 	add.w	r3, r3, #32
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff fc60 	bl	8006d4c <_ZN6tflite18MicroErrorReporterD1Ev>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //}
  /* USER CODE END 3 */
}
 800748c:	2300      	movs	r3, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f507 5728 	add.w	r7, r7, #10752	; 0x2a00
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800749a:	bf00      	nop
 800749c:	080153d0 	.word	0x080153d0
 80074a0:	080153e0 	.word	0x080153e0
 80074a4:	20000270 	.word	0x20000270

080074a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b0ac      	sub	sp, #176	; 0xb0
 80074ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80074ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80074b2:	2244      	movs	r2, #68	; 0x44
 80074b4:	2100      	movs	r1, #0
 80074b6:	4618      	mov	r0, r3
 80074b8:	f00a fd18 	bl	8011eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80074bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	609a      	str	r2, [r3, #8]
 80074c8:	60da      	str	r2, [r3, #12]
 80074ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80074cc:	1d3b      	adds	r3, r7, #4
 80074ce:	2254      	movs	r2, #84	; 0x54
 80074d0:	2100      	movs	r1, #0
 80074d2:	4618      	mov	r0, r3
 80074d4:	f00a fd0a 	bl	8011eec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80074d8:	f008 facc 	bl	800fa74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80074dc:	4b33      	ldr	r3, [pc, #204]	; (80075ac <_Z18SystemClock_Configv+0x104>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e2:	4a32      	ldr	r2, [pc, #200]	; (80075ac <_Z18SystemClock_Configv+0x104>)
 80074e4:	f023 0318 	bic.w	r3, r3, #24
 80074e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80074ec:	2314      	movs	r3, #20
 80074ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80074f0:	2301      	movs	r3, #1
 80074f2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8007500:	2370      	movs	r3, #112	; 0x70
 8007502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007506:	2300      	movs	r3, #0
 8007508:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800750c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007510:	4618      	mov	r0, r3
 8007512:	f008 fb23 	bl	800fb5c <HAL_RCC_OscConfig>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	bf14      	ite	ne
 800751c:	2301      	movne	r3, #1
 800751e:	2300      	moveq	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8007526:	f000 f8ef 	bl	8007708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800752a:	230f      	movs	r3, #15
 800752c:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800752e:	2300      	movs	r3, #0
 8007530:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007532:	2300      	movs	r3, #0
 8007534:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007536:	2300      	movs	r3, #0
 8007538:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800753a:	2300      	movs	r3, #0
 800753c:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800753e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007542:	2100      	movs	r1, #0
 8007544:	4618      	mov	r0, r3
 8007546:	f008 ff29 	bl	801039c <HAL_RCC_ClockConfig>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	bf14      	ite	ne
 8007550:	2301      	movne	r3, #1
 8007552:	2300      	moveq	r3, #0
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800755a:	f000 f8d5 	bl	8007708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800755e:	2302      	movs	r3, #2
 8007560:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007562:	2300      	movs	r3, #0
 8007564:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007566:	1d3b      	adds	r3, r7, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f009 f91b 	bl	80107a4 <HAL_RCCEx_PeriphCLKConfig>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	bf14      	ite	ne
 8007574:	2301      	movne	r3, #1
 8007576:	2300      	moveq	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800757e:	f000 f8c3 	bl	8007708 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007582:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007586:	f008 fa93 	bl	800fab0 <HAL_PWREx_ControlVoltageScaling>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	bf14      	ite	ne
 8007590:	2301      	movne	r3, #1
 8007592:	2300      	moveq	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <_Z18SystemClock_Configv+0xf6>
  {
    Error_Handler();
 800759a:	f000 f8b5 	bl	8007708 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800759e:	f009 faf3 	bl	8010b88 <HAL_RCCEx_EnableMSIPLLMode>
}
 80075a2:	bf00      	nop
 80075a4:	37b0      	adds	r7, #176	; 0xb0
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	40021000 	.word	0x40021000

080075b0 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80075b4:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <_ZL11MX_CRC_Initv+0x48>)
 80075b6:	4a11      	ldr	r2, [pc, #68]	; (80075fc <_ZL11MX_CRC_Initv+0x4c>)
 80075b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80075ba:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <_ZL11MX_CRC_Initv+0x48>)
 80075bc:	2200      	movs	r2, #0
 80075be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80075c0:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <_ZL11MX_CRC_Initv+0x48>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80075c6:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <_ZL11MX_CRC_Initv+0x48>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80075cc:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <_ZL11MX_CRC_Initv+0x48>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80075d2:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <_ZL11MX_CRC_Initv+0x48>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80075d8:	4807      	ldr	r0, [pc, #28]	; (80075f8 <_ZL11MX_CRC_Initv+0x48>)
 80075da:	f007 fff7 	bl	800f5cc <HAL_CRC_Init>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	bf14      	ite	ne
 80075e4:	2301      	movne	r3, #1
 80075e6:	2300      	moveq	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 80075ee:	f000 f88b 	bl	8007708 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80075f2:	bf00      	nop
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000200 	.word	0x20000200
 80075fc:	40023000 	.word	0x40023000

08007600 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007604:	4b12      	ldr	r3, [pc, #72]	; (8007650 <_ZL13MX_TIM16_Initv+0x50>)
 8007606:	4a13      	ldr	r2, [pc, #76]	; (8007654 <_ZL13MX_TIM16_Initv+0x54>)
 8007608:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 800760a:	4b11      	ldr	r3, [pc, #68]	; (8007650 <_ZL13MX_TIM16_Initv+0x50>)
 800760c:	224f      	movs	r2, #79	; 0x4f
 800760e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007610:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <_ZL13MX_TIM16_Initv+0x50>)
 8007612:	2200      	movs	r2, #0
 8007614:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8007616:	4b0e      	ldr	r3, [pc, #56]	; (8007650 <_ZL13MX_TIM16_Initv+0x50>)
 8007618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800761c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <_ZL13MX_TIM16_Initv+0x50>)
 8007620:	2200      	movs	r2, #0
 8007622:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <_ZL13MX_TIM16_Initv+0x50>)
 8007626:	2200      	movs	r2, #0
 8007628:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800762a:	4b09      	ldr	r3, [pc, #36]	; (8007650 <_ZL13MX_TIM16_Initv+0x50>)
 800762c:	2200      	movs	r2, #0
 800762e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007630:	4807      	ldr	r0, [pc, #28]	; (8007650 <_ZL13MX_TIM16_Initv+0x50>)
 8007632:	f009 fba9 	bl	8010d88 <HAL_TIM_Base_Init>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	bf14      	ite	ne
 800763c:	2301      	movne	r3, #1
 800763e:	2300      	moveq	r3, #0
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 8007646:	f000 f85f 	bl	8007708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800764a:	bf00      	nop
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000224 	.word	0x20000224
 8007654:	40014400 	.word	0x40014400

08007658 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800765c:	4b16      	ldr	r3, [pc, #88]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800765e:	4a17      	ldr	r2, [pc, #92]	; (80076bc <_ZL19MX_USART2_UART_Initv+0x64>)
 8007660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8007662:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800766c:	2200      	movs	r2, #0
 800766e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007670:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007672:	2200      	movs	r2, #0
 8007674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007676:	4b10      	ldr	r3, [pc, #64]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007678:	2200      	movs	r2, #0
 800767a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800767c:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800767e:	220c      	movs	r2, #12
 8007680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007682:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007684:	2200      	movs	r2, #0
 8007686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007688:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800768a:	2200      	movs	r2, #0
 800768c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800768e:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007690:	2200      	movs	r2, #0
 8007692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007694:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007696:	2200      	movs	r2, #0
 8007698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800769a:	4807      	ldr	r0, [pc, #28]	; (80076b8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800769c:	f009 fc30 	bl	8010f00 <HAL_UART_Init>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bf14      	ite	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	2300      	moveq	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80076b0:	f000 f82a 	bl	8007708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80076b4:	bf00      	nop
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20000270 	.word	0x20000270
 80076bc:	40004400 	.word	0x40004400

080076c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076c6:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <_ZL12MX_GPIO_Initv+0x44>)
 80076c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ca:	4a0e      	ldr	r2, [pc, #56]	; (8007704 <_ZL12MX_GPIO_Initv+0x44>)
 80076cc:	f043 0304 	orr.w	r3, r3, #4
 80076d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076d2:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <_ZL12MX_GPIO_Initv+0x44>)
 80076d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076de:	4b09      	ldr	r3, [pc, #36]	; (8007704 <_ZL12MX_GPIO_Initv+0x44>)
 80076e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e2:	4a08      	ldr	r2, [pc, #32]	; (8007704 <_ZL12MX_GPIO_Initv+0x44>)
 80076e4:	f043 0301 	orr.w	r3, r3, #1
 80076e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076ea:	4b06      	ldr	r3, [pc, #24]	; (8007704 <_ZL12MX_GPIO_Initv+0x44>)
 80076ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	603b      	str	r3, [r7, #0]
 80076f4:	683b      	ldr	r3, [r7, #0]

}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40021000 	.word	0x40021000

08007708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800770c:	bf00      	nop
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8007716:	b580      	push	{r7, lr}
 8007718:	b086      	sub	sp, #24
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	460b      	mov	r3, r1
 8007720:	607a      	str	r2, [r7, #4]
 8007722:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8007724:	897b      	ldrh	r3, [r7, #10]
 8007726:	4619      	mov	r1, r3
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7fb fc46 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800772e:	4603      	mov	r3, r0
 8007730:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007732:	8afb      	ldrh	r3, [r7, #22]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d007      	beq.n	8007748 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	8afb      	ldrh	r3, [r7, #22]
 800773c:	4413      	add	r3, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f7fc f92d 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007744:	4603      	mov	r3, r0
 8007746:	e000      	b.n	800774a <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8007748:	687b      	ldr	r3, [r7, #4]
  }
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f8ae 	bl	80078bc <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8007760:	4603      	mov	r3, r0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f8b3 	bl	80078e0 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	4a04      	ldr	r2, [pc, #16]	; (80077a0 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	08017934 	.word	0x08017934

080077a4 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff ffe8 	bl	8007784 <_ZN6tflite10OpResolverC1Ev>
 80077b4:	4a03      	ldr	r2, [pc, #12]	; (80077c4 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	0801790c 	.word	0x0801790c

080077c8 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff ffe5 	bl	80077a4 <_ZN6tflite15MicroOpResolverC1Ev>
 80077da:	4a0a      	ldr	r2, [pc, #40]	; (8007804 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE+0x3c>)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	080178e4 	.word	0x080178e4

08007808 <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv>:
  TfLiteStatus AddDepthwiseConv2D() {
 8007808:	b580      	push	{r7, lr}
 800780a:	b08a      	sub	sp, #40	; 0x28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
 8007810:	f107 0308 	add.w	r3, r7, #8
 8007814:	4618      	mov	r0, r3
 8007816:	f7fa ffad 	bl	8002774 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 800781a:	f107 0208 	add.w	r2, r7, #8
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv+0x2c>)
 8007820:	2104      	movs	r1, #4
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f86a 	bl	80078fc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8007828:	4603      	mov	r3, r0
  }
 800782a:	4618      	mov	r0, r3
 800782c:	3728      	adds	r7, #40	; 0x28
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	08003515 	.word	0x08003515

08007838 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration>:
  TfLiteStatus AddFullyConnected(
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
                      ParseFullyConnected);
 8007842:	4b05      	ldr	r3, [pc, #20]	; (8007858 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration+0x20>)
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	2109      	movs	r1, #9
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f857 	bl	80078fc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800784e:	4603      	mov	r3, r0
  }
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	0800366d 	.word	0x0800366d

0800785c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6,
                      tflite::ops::micro::Register_RELU6(), ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 800785c:	b580      	push	{r7, lr}
 800785e:	b08a      	sub	sp, #40	; 0x28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 8007864:	f107 0308 	add.w	r3, r7, #8
 8007868:	4618      	mov	r0, r3
 800786a:	f004 fbb9 	bl	800bfe0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 800786e:	f107 0208 	add.w	r2, r7, #8
 8007872:	4b05      	ldr	r3, [pc, #20]	; (8007888 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv+0x2c>)
 8007874:	2116      	movs	r1, #22
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f840 	bl	80078fc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800787c:	4603      	mov	r3, r0
  }
 800787e:	4618      	mov	r0, r3
 8007880:	3728      	adds	r7, #40	; 0x28
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	080037a9 	.word	0x080037a9

0800788c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxEv>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax() {
 800788c:	b580      	push	{r7, lr}
 800788e:	b08a      	sub	sp, #40	; 0x28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_SOFTMAX, Register_SOFTMAX(),
 8007894:	f107 0308 	add.w	r3, r7, #8
 8007898:	4618      	mov	r0, r3
 800789a:	f005 ffdd 	bl	800d858 <_ZN6tflite16Register_SOFTMAXEv>
                      ParseSoftmax);
 800789e:	f107 0208 	add.w	r2, r7, #8
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxEv+0x2c>)
 80078a4:	2119      	movs	r1, #25
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f828 	bl	80078fc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80078ac:	4603      	mov	r3, r0
  }
 80078ae:	4618      	mov	r0, r3
 80078b0:	3728      	adds	r7, #40	; 0x28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	080038a9 	.word	0x080038a9

080078bc <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  EndianCheck();
 80078c4:	f7ff fa64 	bl	8006d90 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fc f84d 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80078d2:	4602      	mov	r2, r0
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4413      	add	r3, r2
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      _Vector_base()
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 f894 	bl	8007a18 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 80078fc:	b5b0      	push	{r4, r5, r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	607a      	str	r2, [r7, #4]
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	460b      	mov	r3, r1
 800790a:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	2b20      	cmp	r3, #32
 8007910:	d10d      	bne.n	800792e <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d006      	beq.n	800792a <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007922:	493a      	ldr	r1, [pc, #232]	; (8007a0c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 8007924:	4618      	mov	r0, r3
 8007926:	f7fb faf9 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 800792a:	2301      	movs	r3, #1
 800792c:	e06a      	b.n	8007a04 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (FindOp(op) != nullptr) {
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3314      	adds	r3, #20
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	7afa      	ldrb	r2, [r7, #11]
 8007938:	4611      	mov	r1, r2
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	4798      	blx	r3
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	bf14      	ite	ne
 8007944:	2301      	movne	r3, #1
 8007946:	2300      	moveq	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00e      	beq.n	800796c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d007      	beq.n	8007968 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800795e:	7afa      	ldrb	r2, [r7, #11]
 8007960:	492b      	ldr	r1, [pc, #172]	; (8007a10 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 8007962:	4618      	mov	r0, r3
 8007964:	f7fb fada 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8007968:	2301      	movs	r3, #1
 800796a:	e04b      	b.n	8007a04 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (registrations_len_ >= tOpCount) {
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007972:	2b03      	cmp	r3, #3
 8007974:	d90e      	bls.n	8007994 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8007986:	7afa      	ldrb	r2, [r7, #11]
 8007988:	2304      	movs	r3, #4
 800798a:	4922      	ldr	r1, [pc, #136]	; (8007a14 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 800798c:	f7fb fac6 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8007990:	2301      	movs	r3, #1
 8007992:	e037      	b.n	8007a04 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    registrations_[registrations_len_] = registration;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	015b      	lsls	r3, r3, #5
 800799e:	4413      	add	r3, r2
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	1d1c      	adds	r4, r3, #4
 80079a4:	4615      	mov	r5, r2
 80079a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80079ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b8:	7afa      	ldrb	r2, [r7, #11]
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	015b      	lsls	r3, r3, #5
 80079be:	440b      	add	r3, r1
 80079c0:	3318      	adds	r3, #24
 80079c2:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    builtin_codes_[num_buitin_ops_] = op;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	7afa      	ldrb	r2, [r7, #11]
 80079de:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    builtin_parsers_[num_buitin_ops_] = parser;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	3322      	adds	r3, #34	; 0x22
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return kTfLiteOk;
 8007a02:	2300      	movs	r3, #0
  }
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8007a0c:	08015424 	.word	0x08015424
 8007a10:	0801546c 	.word	0x0801546c
 8007a14:	080154bc 	.word	0x080154bc

08007a18 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f839 	bl	8007a98 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	605a      	str	r2, [r3, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	609a      	str	r2, [r3, #8]
	{ }
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8007a42:	b480      	push	{r7}
 8007a44:	b085      	sub	sp, #20
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	d101      	bne.n	8007a58 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x16>
 8007a54:	2300      	movs	r3, #0
 8007a56:	e019      	b.n	8007a8c <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d210      	bcs.n	8007a8a <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	015b      	lsls	r3, r3, #5
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	4413      	add	r3, r2
 8007a70:	3304      	adds	r3, #4
 8007a72:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	695a      	ldr	r2, [r3, #20]
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d101      	bne.n	8007a82 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	e004      	b.n	8007a8c <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	e7e8      	b.n	8007a5c <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8007a8a:	2300      	movs	r3, #0
  }
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f805 	bl	8007ab0 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
	...

08007ac8 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	4a05      	ldr	r2, [pc, #20]	; (8007ae8 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev+0x20>)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff f9e1 	bl	8006ea0 <_ZN6tflite15MicroOpResolverD1Ev>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	080178e4 	.word	0x080178e4

08007aec <_ZN6tflite22MicroMutableOpResolverILj4EED0Ev>:
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff ffe7 	bl	8007ac8 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
 8007afa:	21a4      	movs	r1, #164	; 0xa4
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f009 fe5a 	bl	80117b6 <_ZdlPvj>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d218      	bcs.n	8007b58 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	015b      	lsls	r3, r3, #5
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3304      	adds	r3, #4
 8007b30:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d10a      	bne.n	8007b50 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7f8 fb45 	bl	80001d0 <strcmp>
 8007b46:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
        return &registration;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	e004      	b.n	8007b5a <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	e7e0      	b.n	8007b1a <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0xe>
    return nullptr;
 8007b58:	2300      	movs	r3, #0
  }
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d901      	bls.n	8007b7c <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 8007b78:	f00a f8d2 	bl	8011d20 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d212      	bcs.n	8007bb2 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4413      	add	r3, r2
 8007b92:	3388      	adds	r3, #136	; 0x88
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d106      	bne.n	8007baa <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x48>
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3322      	adds	r3, #34	; 0x22
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	e004      	b.n	8007bb4 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x52>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	e7e6      	b.n	8007b80 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 8007bb2:	2300      	movs	r3, #0
  }
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2104      	movs	r1, #4
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fb ff5f 	bl	8003a8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007bce:	4603      	mov	r3, r0
  }
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	2106      	movs	r1, #6
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fb ff60 	bl	8003aac <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8007bec:	4603      	mov	r3, r0
 8007bee:	b2db      	uxtb	r3, r3
  }
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensor_ctypes.h"
#include "schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	1e5a      	subs	r2, r3, #1
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8007c1a:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8007c46:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8007c48:	68bb      	ldr	r3, [r7, #8]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4413      	add	r3, r2
 8007c66:	1e5a      	subs	r2, r3, #1
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8007c76:	68fb      	ldr	r3, [r7, #12]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	2b0c      	cmp	r3, #12
 8007c96:	d845      	bhi.n	8007d24 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa0>
 8007c98:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8007c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9e:	bf00      	nop
 8007ca0:	08007cd5 	.word	0x08007cd5
 8007ca4:	08007ce5 	.word	0x08007ce5
 8007ca8:	08007ced 	.word	0x08007ced
 8007cac:	08007cfd 	.word	0x08007cfd
 8007cb0:	08007d25 	.word	0x08007d25
 8007cb4:	08007d0d 	.word	0x08007d0d
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007d15 	.word	0x08007d15
 8007cc0:	08007cf5 	.word	0x08007cf5
 8007cc4:	08007d25 	.word	0x08007d25
 8007cc8:	08007d25 	.word	0x08007d25
 8007ccc:	08007d1d 	.word	0x08007d1d
 8007cd0:	08007d05 	.word	0x08007d05
    case kTfLiteFloat32:
      *size = sizeof(float);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	601a      	str	r2, [r3, #0]
      break;
 8007cda:	e025      	b.n	8007d28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	601a      	str	r2, [r3, #0]
      break;
 8007ce2:	e021      	b.n	8007d28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2204      	movs	r2, #4
 8007ce8:	601a      	str	r2, [r3, #0]
      break;
 8007cea:	e01d      	b.n	8007d28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]
      break;
 8007cf2:	e019      	b.n	8007d28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]
      break;
 8007cfa:	e015      	b.n	8007d28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2208      	movs	r2, #8
 8007d00:	601a      	str	r2, [r3, #0]
      break;
 8007d02:	e011      	b.n	8007d28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2208      	movs	r2, #8
 8007d08:	601a      	str	r2, [r3, #0]
      break;
 8007d0a:	e00d      	b.n	8007d28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteBool:
      *size = sizeof(bool);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
      break;
 8007d12:	e009      	b.n	8007d28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2208      	movs	r2, #8
 8007d18:	601a      	str	r2, [r3, #0]
      break;
 8007d1a:	e005      	b.n	8007d28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2210      	movs	r2, #16
 8007d20:	601a      	str	r2, [r3, #0]
      break;
 8007d22:	e001      	b.n	8007d28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    default:
      return kTfLiteError;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e000      	b.n	8007d2a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa6>
  }
  return kTfLiteOk;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop

08007d38 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 8007d46:	2301      	movs	r3, #1
 8007d48:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7ff ff36 	bl	8007bbc <_ZNK6tflite6Tensor5shapeEv>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bf14      	ite	ne
 8007d56:	2301      	movne	r3, #1
 8007d58:	2300      	moveq	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d022      	beq.n	8007da6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff ff29 	bl	8007bbc <_ZNK6tflite6Tensor5shapeEv>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 f884 	bl	8007e7a <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8007d72:	4602      	mov	r2, r0
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	4293      	cmp	r3, r2
 8007d78:	bf34      	ite	cc
 8007d7a:	2301      	movcc	r3, #1
 8007d7c:	2300      	movcs	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d010      	beq.n	8007da6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff ff19 	bl	8007bbc <_ZNK6tflite6Tensor5shapeEv>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	69b9      	ldr	r1, [r7, #24]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fb fedc 	bl	8003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007d94:	4602      	mov	r2, r0
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	fb02 f303 	mul.w	r3, r2, r3
 8007d9c:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	3301      	adds	r3, #1
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	e7de      	b.n	8007d64 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff ff16 	bl	8007bd8 <_ZNK6tflite6Tensor4typeEv>
 8007dac:	4603      	mov	r3, r0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f107 0315 	add.w	r3, r7, #21
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	4619      	mov	r1, r3
 8007db8:	f7fb fb32 	bl	8003420 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	75fb      	strb	r3, [r7, #23]
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	e013      	b.n	8007df2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8007dca:	7d7b      	ldrb	r3, [r7, #21]
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff ff58 	bl	8007c84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	75bb      	strb	r3, [r7, #22]
 8007dd8:	7dbb      	ldrb	r3, [r7, #22]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 8007dde:	7dbb      	ldrb	r3, [r7, #22]
 8007de0:	e007      	b.n	8007df2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	fb02 f203 	mul.w	r2, r2, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3720      	adds	r7, #32
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 8007e0a:	f009 ff89 	bl	8011d20 <abort>

  int element_count = 1;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d015      	beq.n	8007e46 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	613b      	str	r3, [r7, #16]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	da0d      	bge.n	8007e46 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
 8007e3c:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	3301      	adds	r3, #1
 8007e42:	613b      	str	r3, [r7, #16]
 8007e44:	e7eb      	b.n	8007e1e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	7a1b      	ldrb	r3, [r3, #8]
 8007e4a:	f107 0208 	add.w	r2, r7, #8
 8007e4e:	4611      	mov	r1, r2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff ff17 	bl	8007c84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	e006      	b.n	8007e72 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	fb02 f203 	mul.w	r2, r2, r3
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b082      	sub	sp, #8
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7fb fe54 	bl	8003b30 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 fe1f 	bl	8009ae0 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  return names;
 8007eb0:	4b02      	ldr	r3, [pc, #8]	; (8007ebc <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	0801797c 	.word	0x0801797c

08007ec0 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_RFFT2D))
 8007eca:	2300      	movs	r3, #0
 8007ecc:	72bb      	strb	r3, [r7, #10]
 8007ece:	2383      	movs	r3, #131	; 0x83
 8007ed0:	72fb      	strb	r3, [r7, #11]
 8007ed2:	f107 020b 	add.w	r2, r7, #11
 8007ed6:	f107 010a 	add.w	r1, r7, #10
 8007eda:	1dfb      	adds	r3, r7, #7
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 fe0b 	bl	8009af8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
    return "";
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 8007eea:	e008      	b.n	8007efe <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8007ef0:	f7ff ffdc 	bl	8007eac <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	681b      	ldr	r3, [r3, #0]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	08015b24 	.word	0x08015b24

08007f0c <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2108      	movs	r1, #8
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f001 fe18 	bl	8009b4e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8007f1e:	4603      	mov	r3, r0
  }
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	210a      	movs	r1, #10
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 fe1a 	bl	8009b6e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8007f3a:	4603      	mov	r3, r0
  }
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2110      	movs	r1, #16
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fb fd7c 	bl	8003a50 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8007f58:	4603      	mov	r3, r0
  }
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2108      	movs	r1, #8
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff fbd0 	bl	8007716 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8007f76:	4603      	mov	r3, r0
  }
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	210c      	movs	r1, #12
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 fe0e 	bl	8009bae <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8007f92:	4603      	mov	r3, r0
  }
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	210e      	movs	r1, #14
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fb fd21 	bl	80039f2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	bf14      	ite	ne
 8007fb6:	2301      	movne	r3, #1
 8007fb8:	2300      	moveq	r3, #0
 8007fba:	b2db      	uxtb	r3, r3
  }
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2104      	movs	r1, #4
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff fb9f 	bl	8007716 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8007fd8:	4603      	mov	r3, r0
  }
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2106      	movs	r1, #6
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fb fd4c 	bl	8003a8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007ff4:	4603      	mov	r3, r0
  }
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2108      	movs	r1, #8
 800800a:	4618      	mov	r0, r3
 800800c:	f7fb fd3e 	bl	8003a8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8008010:	4603      	mov	r3, r0
  }
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	210e      	movs	r1, #14
 8008026:	4618      	mov	r0, r3
 8008028:	f001 fd81 	bl	8009b2e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800802c:	4603      	mov	r3, r0
  }
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2104      	movs	r1, #4
 8008042:	4618      	mov	r0, r3
 8008044:	f001 fdc3 	bl	8009bce <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8008048:	4603      	mov	r3, r0
  }
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2106      	movs	r1, #6
 800805e:	4618      	mov	r0, r3
 8008060:	f7fb fd14 	bl	8003a8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8008064:	4603      	mov	r3, r0
  }
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800806e:	b580      	push	{r7, lr}
 8008070:	b082      	sub	sp, #8
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2108      	movs	r1, #8
 800807a:	4618      	mov	r0, r3
 800807c:	f7fb fd06 	bl	8003a8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8008080:	4603      	mov	r3, r0
  }
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	210a      	movs	r1, #10
 8008096:	4618      	mov	r0, r3
 8008098:	f001 fda9 	bl	8009bee <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800809c:	4603      	mov	r3, r0
  }
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2104      	movs	r1, #4
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 fd3b 	bl	8009b2e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80080b8:	4603      	mov	r3, r0
  }
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2104      	movs	r1, #4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 fd5d 	bl	8009b8e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80080d4:	4603      	mov	r3, r0
  }
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	2106      	movs	r1, #6
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff fb12 	bl	8007716 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80080f2:	4603      	mov	r3, r0
  }
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2106      	movs	r1, #6
 8008108:	4618      	mov	r0, r3
 800810a:	f001 fd80 	bl	8009c0e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800810e:	4603      	mov	r3, r0
  }
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2108      	movs	r1, #8
 8008124:	4618      	mov	r0, r3
 8008126:	f001 fd82 	bl	8009c2e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800812a:	4603      	mov	r3, r0
  }
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	210c      	movs	r1, #12
 8008140:	4618      	mov	r0, r3
 8008142:	f001 fd84 	bl	8009c4e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8008146:	4603      	mov	r3, r0
  }
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2110      	movs	r1, #16
 800815c:	4618      	mov	r0, r3
 800815e:	f001 fd86 	bl	8009c6e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8008162:	4603      	mov	r3, r0
  }
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	4a04      	ldr	r2, [pc, #16]	; (8008188 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	08017c0c 	.word	0x08017c0c

0800818c <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7ff ffe9 	bl	800816c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800819a:	2104      	movs	r1, #4
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f009 fb0a 	bl	80117b6 <_ZdlPvj>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4618      	mov	r0, r3
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	4a04      	ldr	r2, [pc, #16]	; (80081c8 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	08017c0c 	.word	0x08017c0c

080081cc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff ffe7 	bl	80081ac <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 80081de:	4a05      	ldr	r2, [pc, #20]	; (80081f4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	605a      	str	r2, [r3, #4]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	08017bb4 	.word	0x08017bb4

080081f8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6858      	ldr	r0, [r3, #4]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	68b9      	ldr	r1, [r7, #8]
 8008216:	4798      	blx	r3
 8008218:	4603      	mov	r3, r0
  }
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	609a      	str	r2, [r3, #8]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	60da      	str	r2, [r3, #12]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 800826c:	b580      	push	{r7, lr}
 800826e:	b09a      	sub	sp, #104	; 0x68
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 8008280:	f009 fd4e 	bl	8011d20 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8008284:	2300      	movs	r3, #0
 8008286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800828e:	429a      	cmp	r2, r3
 8008290:	d267      	bcs.n	8008362 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6819      	ldr	r1, [r3, #0]
 8008296:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008298:	4613      	mov	r3, r2
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	4413      	add	r3, r2
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	440b      	add	r3, r1
 80082a2:	643b      	str	r3, [r7, #64]	; 0x40
    current->output_ptr = &(eval_tensors[i].data.data);
 80082a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082a6:	4613      	mov	r3, r2
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	461a      	mov	r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	4413      	add	r3, r2
 80082b4:	461a      	mov	r2, r3
 80082b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b8:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 80082ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082bc:	4613      	mov	r3, r2
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	461a      	mov	r2, r3
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	4413      	add	r3, r2
 80082ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082cc:	4611      	mov	r1, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fd93 	bl	8007dfa <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80082da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 80082e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082e6:	e170      	b.n	80085ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35e>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 80082e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295
 80082ee:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 80082f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f2:	f04f 32ff 	mov.w	r2, #4294967295
 80082f6:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80082f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082fa:	4613      	mov	r3, r2
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	461a      	mov	r2, r3
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	4413      	add	r3, r2
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d113      	bne.n	8008336 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 800830e:	68b8      	ldr	r0, [r7, #8]
 8008310:	f7ff fe91 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 8008314:	4603      	mov	r3, r0
 8008316:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008318:	4618      	mov	r0, r3
 800831a:	f001 fd41 	bl	8009da0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800831e:	4603      	mov	r3, r0
 8008320:	4618      	mov	r0, r3
 8008322:	f7ff fe3b 	bl	8007f9c <_ZNK6tflite6Tensor11is_variableEv>
 8008326:	4603      	mov	r3, r0
 8008328:	f083 0301 	eor.w	r3, r3, #1
 800832c:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 8008332:	2201      	movs	r2, #1
 8008334:	e000      	b.n	8008338 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 8008336:	2200      	movs	r2, #0
 8008338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833a:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d007      	beq.n	8008352 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 8008342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800834e:	611a      	str	r2, [r3, #16]
 8008350:	e003      	b.n	800835a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 8008352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800835a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800835c:	3301      	adds	r3, #1
 800835e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008360:	e792      	b.n	8008288 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8008362:	2300      	movs	r3, #0
 8008364:	65bb      	str	r3, [r7, #88]	; 0x58
 8008366:	68b8      	ldr	r0, [r7, #8]
 8008368:	f7ff fe73 	bl	8008052 <_ZNK6tflite8SubGraph6inputsEv>
 800836c:	4603      	mov	r3, r0
 800836e:	4618      	mov	r0, r3
 8008370:	f7fb fbde 	bl	8003b30 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008374:	4602      	mov	r2, r0
 8008376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008378:	4293      	cmp	r3, r2
 800837a:	bf34      	ite	cc
 800837c:	2301      	movcc	r3, #1
 800837e:	2300      	movcs	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d018      	beq.n	80083b8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x14c>
    const int tensor_index = subgraph->inputs()->Get(i);
 8008386:	68b8      	ldr	r0, [r7, #8]
 8008388:	f7ff fe63 	bl	8008052 <_ZNK6tflite8SubGraph6inputsEv>
 800838c:	4603      	mov	r3, r0
 800838e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008390:	4618      	mov	r0, r3
 8008392:	f7fb fbdb 	bl	8003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008396:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6819      	ldr	r1, [r3, #0]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4613      	mov	r3, r2
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	4413      	add	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	440b      	add	r3, r1
 80083a8:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2200      	movs	r2, #0
 80083ae:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 80083b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083b2:	3301      	adds	r3, #1
 80083b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80083b6:	e7d6      	b.n	8008366 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xfa>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80083b8:	2300      	movs	r3, #0
 80083ba:	657b      	str	r3, [r7, #84]	; 0x54
 80083bc:	68b8      	ldr	r0, [r7, #8]
 80083be:	f7ff fe56 	bl	800806e <_ZNK6tflite8SubGraph7outputsEv>
 80083c2:	4603      	mov	r3, r0
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fb fbb3 	bl	8003b30 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80083ca:	4602      	mov	r2, r0
 80083cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ce:	4293      	cmp	r3, r2
 80083d0:	bf34      	ite	cc
 80083d2:	2301      	movcc	r3, #1
 80083d4:	2300      	movcs	r3, #0
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d021      	beq.n	8008420 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
    const int tensor_index = subgraph->outputs()->Get(i);
 80083dc:	68b8      	ldr	r0, [r7, #8]
 80083de:	f7ff fe46 	bl	800806e <_ZNK6tflite8SubGraph7outputsEv>
 80083e2:	4603      	mov	r3, r0
 80083e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fb fbb0 	bl	8003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>
 80083ec:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6819      	ldr	r1, [r3, #0]
 80083f2:	69fa      	ldr	r2, [r7, #28]
 80083f4:	4613      	mov	r3, r2
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	4413      	add	r3, r2
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	440b      	add	r3, r1
 80083fe:	61bb      	str	r3, [r7, #24]
    current->last_used = subgraph->operators()->size() - 1;
 8008400:	68b8      	ldr	r0, [r7, #8]
 8008402:	f7ff fe42 	bl	800808a <_ZNK6tflite8SubGraph9operatorsEv>
 8008406:	4603      	mov	r3, r0
 8008408:	4618      	mov	r0, r3
 800840a:	f001 fcef 	bl	8009dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800840e:	4603      	mov	r3, r0
 8008410:	3b01      	subs	r3, #1
 8008412:	461a      	mov	r2, r3
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8008418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800841a:	3301      	adds	r3, #1
 800841c:	657b      	str	r3, [r7, #84]	; 0x54
 800841e:	e7cd      	b.n	80083bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x150>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8008420:	68b8      	ldr	r0, [r7, #8]
 8008422:	f7ff fe32 	bl	800808a <_ZNK6tflite8SubGraph9operatorsEv>
 8008426:	4603      	mov	r3, r0
 8008428:	4618      	mov	r0, r3
 800842a:	f001 fcdf 	bl	8009dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800842e:	4603      	mov	r3, r0
 8008430:	3b01      	subs	r3, #1
 8008432:	653b      	str	r3, [r7, #80]	; 0x50
 8008434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008436:	2b00      	cmp	r3, #0
 8008438:	db77      	blt.n	800852a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2be>
    const auto* op = subgraph->operators()->Get(i);
 800843a:	68b8      	ldr	r0, [r7, #8]
 800843c:	f7ff fe25 	bl	800808a <_ZNK6tflite8SubGraph9operatorsEv>
 8008440:	4602      	mov	r2, r0
 8008442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f001 fcde 	bl	8009e08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800844c:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800844e:	2300      	movs	r3, #0
 8008450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008452:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008454:	f7ff fdc5 	bl	8007fe2 <_ZNK6tflite8Operator6inputsEv>
 8008458:	4603      	mov	r3, r0
 800845a:	4618      	mov	r0, r3
 800845c:	f7fb fb68 	bl	8003b30 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008460:	4602      	mov	r2, r0
 8008462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008464:	4293      	cmp	r3, r2
 8008466:	bf34      	ite	cc
 8008468:	2301      	movcc	r3, #1
 800846a:	2300      	movcs	r3, #0
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d022      	beq.n	80084b8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x24c>
      const int tensor_index = op->inputs()->Get(n);
 8008472:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008474:	f7ff fdb5 	bl	8007fe2 <_ZNK6tflite8Operator6inputsEv>
 8008478:	4603      	mov	r3, r0
 800847a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800847c:	4618      	mov	r0, r3
 800847e:	f7fb fb65 	bl	8003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008482:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6819      	ldr	r1, [r3, #0]
 8008488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800848a:	4613      	mov	r3, r2
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	4413      	add	r3, r2
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	440b      	add	r3, r1
 8008494:	62bb      	str	r3, [r7, #40]	; 0x28
      if (((current->last_used == -1) || (current->last_used < i))) {
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849e:	d004      	beq.n	80084aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23e>
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084a6:	429a      	cmp	r2, r3
 80084a8:	dd02      	ble.n	80084b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x244>
        current->last_used = i;
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084ae:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80084b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b2:	3301      	adds	r3, #1
 80084b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084b6:	e7cc      	b.n	8008452 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1e6>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80084b8:	2300      	movs	r3, #0
 80084ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80084bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084be:	f7ff fd9e 	bl	8007ffe <_ZNK6tflite8Operator7outputsEv>
 80084c2:	4603      	mov	r3, r0
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fb fb33 	bl	8003b30 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80084ca:	4602      	mov	r2, r0
 80084cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ce:	4293      	cmp	r3, r2
 80084d0:	bf34      	ite	cc
 80084d2:	2301      	movcc	r3, #1
 80084d4:	2300      	movcs	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d022      	beq.n	8008522 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2b6>
      const int tensor_index = op->outputs()->Get(n);
 80084dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084de:	f7ff fd8e 	bl	8007ffe <_ZNK6tflite8Operator7outputsEv>
 80084e2:	4603      	mov	r3, r0
 80084e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fb fb30 	bl	8003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>
 80084ec:	6378      	str	r0, [r7, #52]	; 0x34
      AllocationInfo* current = &info_[tensor_index];
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084f4:	4613      	mov	r3, r2
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	4413      	add	r3, r2
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	440b      	add	r3, r1
 80084fe:	633b      	str	r3, [r7, #48]	; 0x30
      if ((current->first_created == -1) || (current->first_created > i)) {
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008508:	d004      	beq.n	8008514 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a8>
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008510:	429a      	cmp	r2, r3
 8008512:	da02      	bge.n	800851a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ae>
        current->first_created = i;
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008518:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800851a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800851c:	3301      	adds	r3, #1
 800851e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008520:	e7cc      	b.n	80084bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x250>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8008522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008524:	3b01      	subs	r3, #1
 8008526:	653b      	str	r3, [r7, #80]	; 0x50
 8008528:	e784      	b.n	8008434 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c8>
      }
    }
  }

  // Sanity check for valid tensor lifetime.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800852a:	2300      	movs	r3, #0
 800852c:	647b      	str	r3, [r7, #68]	; 0x44
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008534:	429a      	cmp	r2, r3
 8008536:	d247      	bcs.n	80085c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35c>
    AllocationInfo* current = &info_[i];
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6819      	ldr	r1, [r3, #0]
 800853c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800853e:	4613      	mov	r3, r2
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	4413      	add	r3, r2
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	440b      	add	r3, r1
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
    // Even though tensor appears to be read only it may still need to be
    // allocated.
    const bool appears_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008552:	d106      	bne.n	8008562 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855c:	d001      	beq.n	8008562 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f8>
 8008562:	2300      	movs	r3, #0
    const bool appears_read_only =
 8008564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    const bool has_partial_lifetime =
        !appears_read_only &&
 8008568:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800856c:	f083 0301 	eor.w	r3, r3, #1
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00b      	beq.n	800858e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x322>
        ((current->first_created == -1) || (current->last_used == -1));
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	689b      	ldr	r3, [r3, #8]
        !appears_read_only &&
 800857a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857e:	d004      	beq.n	800858a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x31e>
        ((current->first_created == -1) || (current->last_used == -1));
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008588:	d101      	bne.n	800858e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x322>
        !appears_read_only &&
 800858a:	2301      	movs	r3, #1
 800858c:	e000      	b.n	8008590 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x324>
 800858e:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 8008590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (has_partial_lifetime && current->needs_allocating) {
 8008594:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008598:	2b00      	cmp	r3, #0
 800859a:	d011      	beq.n	80085c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x354>
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	7d1b      	ldrb	r3, [r3, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00d      	beq.n	80085c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x354>
      TF_LITE_REPORT_ERROR(
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	68d8      	ldr	r0, [r3, #12]
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	4613      	mov	r3, r2
 80085b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085b6:	4907      	ldr	r1, [pc, #28]	; (80085d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x368>)
 80085b8:	f7fa fcb0 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 80085bc:	2301      	movs	r3, #1
 80085be:	e004      	b.n	80085ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35e>
  for (size_t i = 0; i < tensor_count_; ++i) {
 80085c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c2:	3301      	adds	r3, #1
 80085c4:	647b      	str	r3, [r7, #68]	; 0x44
 80085c6:	e7b2      	b.n	800852e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2c2>
    }
  }
  return kTfLiteOk;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3760      	adds	r7, #96	; 0x60
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	08015c68 	.word	0x08015c68

080085d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08c      	sub	sp, #48	; 0x30
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 80085e4:	68b8      	ldr	r0, [r7, #8]
 80085e6:	f7ff fdb3 	bl	8008150 <_ZNK6tflite5Model8metadataEv>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bf14      	ite	ne
 80085f0:	2301      	movne	r3, #1
 80085f2:	2300      	moveq	r3, #0
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d060      	beq.n	80086bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80085fa:	2300      	movs	r3, #0
 80085fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085fe:	68b8      	ldr	r0, [r7, #8]
 8008600:	f7ff fda6 	bl	8008150 <_ZNK6tflite5Model8metadataEv>
 8008604:	4603      	mov	r3, r0
 8008606:	4618      	mov	r0, r3
 8008608:	f001 fcc0 	bl	8009f8c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800860c:	4602      	mov	r2, r0
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	4293      	cmp	r3, r2
 8008612:	bf34      	ite	cc
 8008614:	2301      	movcc	r3, #1
 8008616:	2300      	movcs	r3, #0
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d04e      	beq.n	80086bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 800861e:	68b8      	ldr	r0, [r7, #8]
 8008620:	f7ff fd96 	bl	8008150 <_ZNK6tflite5Model8metadataEv>
 8008624:	4603      	mov	r3, r0
 8008626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fcbd 	bl	8009fa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 800862e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8008630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008632:	f7ff fd46 	bl	80080c2 <_ZNK6tflite8Metadata4nameEv>
 8008636:	4603      	mov	r3, r0
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fc2a 	bl	8007e92 <_ZNK11flatbuffers6String5c_strEv>
 800863e:	4603      	mov	r3, r0
 8008640:	2217      	movs	r2, #23
 8008642:	4921      	ldr	r1, [pc, #132]	; (80086c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 8008644:	4618      	mov	r0, r3
 8008646:	f00a fb1f 	bl	8012c88 <strncmp>
 800864a:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 800864c:	2b00      	cmp	r3, #0
 800864e:	bf0c      	ite	eq
 8008650:	2301      	moveq	r3, #1
 8008652:	2300      	movne	r3, #0
 8008654:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8008656:	2b00      	cmp	r3, #0
 8008658:	d02c      	beq.n	80086b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 800865a:	68b8      	ldr	r0, [r7, #8]
 800865c:	f7ff fd6a 	bl	8008134 <_ZNK6tflite5Model7buffersEv>
 8008660:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8008662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008664:	f7ff fd3b 	bl	80080de <_ZNK6tflite8Metadata6bufferEv>
 8008668:	4603      	mov	r3, r0
 800866a:	4619      	mov	r1, r3
 800866c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800866e:	f001 fccf 	bl	800a010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8008672:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8008674:	6a38      	ldr	r0, [r7, #32]
 8008676:	f7ff fd16 	bl	80080a6 <_ZNK6tflite6Buffer4dataEv>
 800867a:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 800867c:	69f8      	ldr	r0, [r7, #28]
 800867e:	f001 fcd5 	bl	800a02c <_ZNK11flatbuffers6VectorIhE4dataEv>
 8008682:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	3308      	adds	r3, #8
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	429a      	cmp	r2, r3
 800869e:	d009      	beq.n	80086b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	68d8      	ldr	r0, [r3, #12]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	4908      	ldr	r1, [pc, #32]	; (80086cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 80086ac:	f7fa fc36 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e004      	b.n	80086be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	3301      	adds	r3, #1
 80086b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ba:	e7a0      	b.n	80085fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3730      	adds	r7, #48	; 0x30
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	08017b90 	.word	0x08017b90
 80086cc:	08015c1c 	.word	0x08015c1c

080086d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 80086d0:	b480      	push	{r7}
 80086d2:	b089      	sub	sp, #36	; 0x24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	61fb      	str	r3, [r7, #28]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	4413      	add	r3, r2
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d232      	bcs.n	8008758 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	4413      	add	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6819      	ldr	r1, [r3, #0]
 8008716:	69fa      	ldr	r2, [r7, #28]
 8008718:	4613      	mov	r3, r2
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	4413      	add	r3, r2
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	440b      	add	r3, r1
 8008722:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f04f 32ff 	mov.w	r2, #4294967295
 8008748:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2201      	movs	r2, #1
 800874e:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	3301      	adds	r3, #1
 8008754:	61fb      	str	r3, [r7, #28]
 8008756:	e7c4      	b.n	80086e2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3724      	adds	r7, #36	; 0x24
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8008766:	b590      	push	{r4, r7, lr}
 8008768:	b08b      	sub	sp, #44	; 0x2c
 800876a:	af02      	add	r7, sp, #8
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
 8008772:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8008774:	2300      	movs	r3, #0
 8008776:	61fb      	str	r3, [r7, #28]
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	d247      	bcs.n	8008810 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	4613      	mov	r3, r2
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	4413      	add	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	461a      	mov	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4413      	add	r3, r2
 8008790:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	7d1b      	ldrb	r3, [r3, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d036      	beq.n	8008808 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2110      	movs	r1, #16
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7ff fa58 	bl	8007c56 <_ZN6tflite11AlignSizeUpEjj>
 80087a6:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b0:	d114      	bne.n	80087dc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3308      	adds	r3, #8
 80087b8:	681c      	ldr	r4, [r3, #0]
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	6899      	ldr	r1, [r3, #8]
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	460b      	mov	r3, r1
 80087c8:	68f9      	ldr	r1, [r7, #12]
 80087ca:	68b8      	ldr	r0, [r7, #8]
 80087cc:	47a0      	blx	r4
 80087ce:	4603      	mov	r3, r0
 80087d0:	74bb      	strb	r3, [r7, #18]
 80087d2:	7cbb      	ldrb	r3, [r7, #18]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d017      	beq.n	8008808 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 80087d8:	7cbb      	ldrb	r3, [r7, #18]
 80087da:	e01a      	b.n	8008812 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 80087dc:	6979      	ldr	r1, [r7, #20]
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	6898      	ldr	r0, [r3, #8]
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	69ba      	ldr	r2, [r7, #24]
 80087e8:	6912      	ldr	r2, [r2, #16]
 80087ea:	9201      	str	r2, [sp, #4]
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	4603      	mov	r3, r0
 80087f0:	460a      	mov	r2, r1
 80087f2:	68f9      	ldr	r1, [r7, #12]
 80087f4:	68b8      	ldr	r0, [r7, #8]
 80087f6:	f7fd faab 	bl	8005d50 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 80087fa:	4603      	mov	r3, r0
 80087fc:	74fb      	strb	r3, [r7, #19]
 80087fe:	7cfb      	ldrb	r3, [r7, #19]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8008804:	7cfb      	ldrb	r3, [r7, #19]
 8008806:	e004      	b.n	8008812 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	3301      	adds	r3, #1
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	e7b3      	b.n	8008778 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3724      	adds	r7, #36	; 0x24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd90      	pop	{r4, r7, pc}

0800881a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800881a:	b590      	push	{r4, r7, lr}
 800881c:	b08b      	sub	sp, #44	; 0x2c
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	607a      	str	r2, [r7, #4]
 8008826:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800882c:	2300      	movs	r3, #0
 800882e:	623b      	str	r3, [r7, #32]
 8008830:	6a3a      	ldr	r2, [r7, #32]
 8008832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008834:	429a      	cmp	r2, r3
 8008836:	d22e      	bcs.n	8008896 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 8008838:	6a3a      	ldr	r2, [r7, #32]
 800883a:	4613      	mov	r3, r2
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	4413      	add	r3, r2
 8008840:	00db      	lsls	r3, r3, #3
 8008842:	461a      	mov	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	4413      	add	r3, r2
 8008848:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	7d1b      	ldrb	r3, [r3, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d01d      	beq.n	800888e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 8008852:	f04f 33ff 	mov.w	r3, #4294967295
 8008856:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3314      	adds	r3, #20
 800885e:	681c      	ldr	r4, [r3, #0]
 8008860:	f107 0314 	add.w	r3, r7, #20
 8008864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008866:	68f9      	ldr	r1, [r7, #12]
 8008868:	68b8      	ldr	r0, [r7, #8]
 800886a:	47a0      	blx	r4
 800886c:	4603      	mov	r3, r0
 800886e:	76fb      	strb	r3, [r7, #27]
 8008870:	7efb      	ldrb	r3, [r7, #27]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 8008876:	7efb      	ldrb	r3, [r7, #27]
 8008878:	e00e      	b.n	8008898 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	4619      	mov	r1, r3
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	440a      	add	r2, r1
 8008886:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	3301      	adds	r3, #1
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	3301      	adds	r3, #1
 8008892:	623b      	str	r3, [r7, #32]
 8008894:	e7cc      	b.n	8008830 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	372c      	adds	r7, #44	; 0x2c
 800889c:	46bd      	mov	sp, r7
 800889e:	bd90      	pop	{r4, r7, pc}

080088a0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff fb57 	bl	8007f62 <_ZNK6tflite6Tensor6bufferEv>
 80088b4:	4603      	mov	r3, r0
 80088b6:	4619      	mov	r1, r3
 80088b8:	6838      	ldr	r0, [r7, #0]
 80088ba:	f001 fba9 	bl	800a010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 80088be:	6138      	str	r0, [r7, #16]
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d015      	beq.n	80088f2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 80088c6:	6938      	ldr	r0, [r7, #16]
 80088c8:	f7ff fbed 	bl	80080a6 <_ZNK6tflite6Buffer4dataEv>
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00e      	beq.n	80088f2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f001 f9da 	bl	8009c8e <_ZNK11flatbuffers6VectorIhE4sizeEv>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	bf14      	ite	ne
 80088e0:	2301      	movne	r3, #1
 80088e2:	2300      	moveq	r3, #0
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f001 fb9e 	bl	800a02c <_ZNK11flatbuffers6VectorIhE4dataEv>
 80088f0:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 80088f2:	697b      	ldr	r3, [r7, #20]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 80088fc:	b590      	push	{r4, r7, lr}
 80088fe:	b08d      	sub	sp, #52	; 0x34
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	607a      	str	r2, [r7, #4]
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	460b      	mov	r3, r1
 800890a:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 800890c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 8008912:	f009 fa05 	bl	8011d20 <abort>

  *result = {};
 8008916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008918:	4618      	mov	r0, r3
 800891a:	2340      	movs	r3, #64	; 0x40
 800891c:	461a      	mov	r2, r3
 800891e:	2100      	movs	r1, #0
 8008920:	f009 fae4 	bl	8011eec <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff f957 	bl	8007bd8 <_ZNK6tflite6Tensor4typeEv>
 800892a:	4603      	mov	r3, r0
 800892c:	4618      	mov	r0, r3
 800892e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008930:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008932:	4619      	mov	r1, r3
 8008934:	f7fa fd74 	bl	8003420 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8008938:	4603      	mov	r3, r0
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 8008946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800894a:	e128      	b.n	8008b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7ff fb25 	bl	8007f9c <_ZNK6tflite6Tensor11is_variableEv>
 8008952:	4603      	mov	r3, r0
 8008954:	461a      	mov	r2, r3
 8008956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008958:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff ff9e 	bl	80088a0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8008964:	4602      	mov	r2, r0
 8008966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008968:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 800896a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d103      	bne.n	800897a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8008972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008974:	2202      	movs	r2, #2
 8008976:	751a      	strb	r2, [r3, #20]
 8008978:	e002      	b.n	8008980 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 800897a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800897c:	2201      	movs	r2, #1
 800897e:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8008980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008982:	f103 0118 	add.w	r1, r3, #24
 8008986:	f107 0210 	add.w	r2, r7, #16
 800898a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7ff f9d3 	bl	8007d38 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8008992:	4603      	mov	r3, r0
 8008994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008998:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 80089a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80089a4:	e0fb      	b.n	8008b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff f908 	bl	8007bbc <_ZNK6tflite6Tensor5shapeEv>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bf0c      	ite	eq
 80089b2:	2301      	moveq	r3, #1
 80089b4:	2300      	movne	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 80089bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089be:	4a7a      	ldr	r2, [pc, #488]	; (8008ba8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 80089c0:	609a      	str	r2, [r3, #8]
 80089c2:	e013      	b.n	80089ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff f8f9 	bl	8007bbc <_ZNK6tflite6Tensor5shapeEv>
 80089ca:	4602      	mov	r2, r0
 80089cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ce:	3308      	adds	r3, #8
 80089d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f001 fb36 	bl	800a044 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80089d8:	4603      	mov	r3, r0
 80089da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80089de:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 80089e6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80089ea:	e0d8      	b.n	8008b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff fac7 	bl	8007f80 <_ZNK6tflite6Tensor12quantizationEv>
 80089f2:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d021      	beq.n	8008a3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 80089fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089fc:	f7ff fa86 	bl	8007f0c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01b      	beq.n	8008a3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 8008a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a08:	f7ff fa80 	bl	8007f0c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 f94b 	bl	8009caa <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8008a14:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d011      	beq.n	8008a3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 8008a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a1c:	f7ff fa84 	bl	8007f28 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008a20:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00b      	beq.n	8008a3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 8008a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a28:	f7ff fa7e 	bl	8007f28 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 f972 	bl	8009d18 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8008a34:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 8008a3e:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 80ab 	beq.w	8008b9c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8008a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a48:	f7ff fa60 	bl	8007f0c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2100      	movs	r1, #0
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 f939 	bl	8009cc8 <_ZNK11flatbuffers6VectorIfE3GetEm>
 8008a56:	eef0 7a40 	vmov.f32	s15, s0
 8008a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a5c:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8008a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a62:	f7ff fa61 	bl	8007f28 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f001 f962 	bl	8009d34 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8008a70:	4603      	mov	r3, r0
 8008a72:	460c      	mov	r4, r1
    result->params.zero_point =
 8008a74:	461a      	mov	r2, r3
 8008a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a78:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8008a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a7c:	f7ff fa46 	bl	8007f0c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008a80:	4603      	mov	r3, r0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 f911 	bl	8009caa <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d009      	beq.n	8008aa6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1aa>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3310      	adds	r3, #16
 8008a98:	681b      	ldr	r3, [r3, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8008a9a:	2204      	movs	r2, #4
 8008a9c:	210c      	movs	r1, #12
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	4798      	blx	r3
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	e008      	b.n	8008ab8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1bc>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	330c      	adds	r3, #12
 8008aac:	681b      	ldr	r3, [r3, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8008aae:	2204      	movs	r2, #4
 8008ab0:	210c      	movs	r1, #12
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	4798      	blx	r3
 8008ab6:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 8008ab8:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d105      	bne.n	8008acc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1d0>
      TF_LITE_REPORT_ERROR(error_reporter,
 8008ac0:	493a      	ldr	r1, [pc, #232]	; (8008bac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 8008ac2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008ac4:	f7fa fa2a 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e068      	b.n	8008b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00d      	beq.n	8008aee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f2>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3310      	adds	r3, #16
 8008ad8:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8008ada:	6a38      	ldr	r0, [r7, #32]
 8008adc:	f7f8 fa9e 	bl	800101c <TfLiteIntArrayGetSizeInBytes>
 8008ae0:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8008ae2:	2204      	movs	r2, #4
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	47a0      	blx	r4
 8008aea:	4602      	mov	r2, r0
 8008aec:	e00c      	b.n	8008b08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20c>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	330c      	adds	r3, #12
 8008af4:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8008af6:	6a38      	ldr	r0, [r7, #32]
 8008af8:	f7f8 fa90 	bl	800101c <TfLiteIntArrayGetSizeInBytes>
 8008afc:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8008afe:	2204      	movs	r2, #4
 8008b00:	4619      	mov	r1, r3
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	47a0      	blx	r4
 8008b06:	4602      	mov	r2, r0
    quantization->zero_point =
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	605a      	str	r2, [r3, #4]
    if (quantization->zero_point == nullptr) {
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d105      	bne.n	8008b20 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x224>
      TF_LITE_REPORT_ERROR(error_reporter,
 8008b14:	4926      	ldr	r1, [pc, #152]	; (8008bb0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b4>)
 8008b16:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008b18:	f7fa fa00 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e03e      	b.n	8008b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8008b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b22:	f7ff f9f3 	bl	8007f0c <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008b26:	4602      	mov	r2, r0
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f001 faa2 	bl	800a076 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8008b32:	4603      	mov	r3, r0
 8008b34:	76fb      	strb	r3, [r7, #27]
 8008b36:	7efb      	ldrb	r3, [r7, #27]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
 8008b3c:	7efb      	ldrb	r3, [r7, #27]
 8008b3e:	e02e      	b.n	8008b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 8008b50:	2300      	movs	r3, #0
 8008b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	da12      	bge.n	8008b82 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8008b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b5e:	f7ff f9e3 	bl	8007f28 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008b62:	4602      	mov	r2, r0
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	4619      	mov	r1, r3
 8008b68:	4610      	mov	r0, r2
 8008b6a:	f001 f8e3 	bl	8009d34 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	4413      	add	r3, r2
 8008b76:	4602      	mov	r2, r0
 8008b78:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b80:	e7e8      	b.n	8008b54 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8008b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b84:	f7ff f9de 	bl	8007f44 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8008b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8008b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3734      	adds	r7, #52	; 0x34
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd90      	pop	{r4, r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	08017ba8 	.word	0x08017ba8
 8008bac:	08015ccc 	.word	0x08015ccc
 8008bb0:	08015cfc 	.word	0x08015cfc

08008bb4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
  *result = {};
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	6053      	str	r3, [r2, #4]
 8008bcc:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8008bce:	68b8      	ldr	r0, [r7, #8]
 8008bd0:	f7ff f802 	bl	8007bd8 <_ZNK6tflite6Tensor4typeEv>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	4619      	mov	r1, r3
 8008be0:	f7fa fc1e 	bl	8003420 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8008be4:	4603      	mov	r3, r0
 8008be6:	75fb      	strb	r3, [r7, #23]
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	e027      	b.n	8008c42 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	68b8      	ldr	r0, [r7, #8]
 8008bf6:	f7ff fe53 	bl	80088a0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8008c00:	68b8      	ldr	r0, [r7, #8]
 8008c02:	f7fe ffdb 	bl	8007bbc <_ZNK6tflite6Tensor5shapeEv>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bf0c      	ite	eq
 8008c0c:	2301      	moveq	r3, #1
 8008c0e:	2300      	movne	r3, #0
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	4a0c      	ldr	r2, [pc, #48]	; (8008c4c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 8008c1a:	605a      	str	r2, [r3, #4]
 8008c1c:	e010      	b.n	8008c40 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8008c1e:	68b8      	ldr	r0, [r7, #8]
 8008c20:	f7fe ffcc 	bl	8007bbc <_ZNK6tflite6Tensor5shapeEv>
 8008c24:	4602      	mov	r2, r0
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f001 fa09 	bl	800a044 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8008c32:	4603      	mov	r3, r0
 8008c34:	75bb      	strb	r3, [r7, #22]
 8008c36:	7dbb      	ldrb	r3, [r7, #22]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 8008c3c:	7dbb      	ldrb	r3, [r7, #22]
 8008c3e:	e000      	b.n	8008c42 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3718      	adds	r7, #24
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	08017ba8 	.word	0x08017ba8

08008c50 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8008c5c:	4a0c      	ldr	r2, [pc, #48]	; (8008c90 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	605a      	str	r2, [r3, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	609a      	str	r2, [r3, #8]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	731a      	strb	r2, [r3, #12]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	611a      	str	r2, [r3, #16]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	615a      	str	r2, [r3, #20]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	08017bcc 	.word	0x08017bcc

08008c94 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	4a04      	ldr	r2, [pc, #16]	; (8008cb0 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	08017bcc 	.word	0x08017bcc

08008cb4 <_ZN6tflite14MicroAllocatorD0Ev>:
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ffe9 	bl	8008c94 <_ZN6tflite14MicroAllocatorD1Ev>
 8008cc2:	2118      	movs	r1, #24
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f008 fd76 	bl	80117b6 <_ZdlPvj>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8008ce0:	2110      	movs	r1, #16
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f7fe ff88 	bl	8007bf8 <_ZN6tflite14AlignPointerUpEPhj>
 8008ce8:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4413      	add	r3, r2
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	6979      	ldr	r1, [r7, #20]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f003 fa3f 	bl	800c180 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8008d02:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f805 	bl	8008d16 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8008d0c:	4603      	mov	r3, r0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8008d16:	b590      	push	{r4, r7, lr}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8008d26:	f008 fffb 	bl	8011d20 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 8008d30:	f008 fff6 	bl	8011d20 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	330c      	adds	r3, #12
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2204      	movs	r2, #4
 8008d3e:	2118      	movs	r1, #24
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	4798      	blx	r3
 8008d44:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	2018      	movs	r0, #24
 8008d4c:	f7fa f919 	bl	8002f82 <_ZnwjPv>
 8008d50:	4604      	mov	r4, r0
 8008d52:	2c00      	cmp	r4, #0
 8008d54:	d006      	beq.n	8008d64 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x4e>
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f7ff ff78 	bl	8008c50 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8008d60:	4623      	mov	r3, r4
 8008d62:	e000      	b.n	8008d66 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x50>
 8008d64:	4623      	mov	r3, r4
 8008d66:	60bb      	str	r3, [r7, #8]
  return allocator;
 8008d68:	68bb      	ldr	r3, [r7, #8]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd90      	pop	{r4, r7, pc}
	...

08008d74 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations,
    TfLiteEvalTensor** eval_tensors) {
 8008d74:	b590      	push	{r4, r7, lr}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x18>
 8008d88:	f008 ffca 	bl	8011d20 <abort>

  if (model_is_allocating_) {
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	7b1b      	ldrb	r3, [r3, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d007      	beq.n	8008da4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x30>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	4923      	ldr	r1, [pc, #140]	; (8008e28 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xb4>)
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fa f8be 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e03c      	b.n	8008e1e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  }

  model_is_allocating_ = true;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(InitScratchBufferData());
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fe68 	bl	8009a80 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 8008db0:	4603      	mov	r3, r0
 8008db2:	75fb      	strb	r3, [r7, #23]
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x4a>
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	e02f      	b.n	8008e1e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  TF_LITE_ENSURE_STATUS(AllocateTfLiteEvalTensors(model, eval_tensors));
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3320      	adds	r3, #32
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dc8:	68b9      	ldr	r1, [r7, #8]
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	4798      	blx	r3
 8008dce:	4603      	mov	r3, r0
 8008dd0:	75bb      	strb	r3, [r7, #22]
 8008dd2:	7dbb      	ldrb	r3, [r7, #22]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x68>
 8008dd8:	7dbb      	ldrb	r3, [r7, #22]
 8008dda:	e020      	b.n	8008e1e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  TF_LITE_ENSURE_STATUS(
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	3318      	adds	r3, #24
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	4798      	blx	r3
 8008dec:	4603      	mov	r3, r0
 8008dee:	757b      	strb	r3, [r7, #21]
 8008df0:	7d7b      	ldrb	r3, [r7, #21]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x86>
 8008df6:	7d7b      	ldrb	r3, [r7, #21]
 8008df8:	e011      	b.n	8008e1e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
      AllocateNodeAndRegistrations(model, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	331c      	adds	r3, #28
 8008e00:	681c      	ldr	r4, [r3, #0]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	47a0      	blx	r4
 8008e0e:	4603      	mov	r3, r0
 8008e10:	753b      	strb	r3, [r7, #20]
 8008e12:	7d3b      	ldrb	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xa8>
 8008e18:	7d3b      	ldrb	r3, [r7, #20]
 8008e1a:	e000      	b.n	8008e1e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
      model, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	371c      	adds	r7, #28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd90      	pop	{r4, r7, pc}
 8008e26:	bf00      	nop
 8008e28:	08015d2c 	.word	0x08015d2c

08008e2c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle** scratch_buffer_handles) {
 8008e2c:	b590      	push	{r4, r7, lr}
 8008e2e:	b089      	sub	sp, #36	; 0x24
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	7b1b      	ldrb	r3, [r3, #12]
 8008e3e:	f083 0301 	eor.w	r3, r3, #1
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d007      	beq.n	8008e58 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	4924      	ldr	r1, [pc, #144]	; (8008ee0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xb4>)
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fa f864 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e03f      	b.n	8008ed8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fc86 	bl	800976c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8008e60:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x40>
 8008e68:	f008 ff5a 	bl	8011d20 <abort>

  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3334      	adds	r3, #52	; 0x34
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	6912      	ldr	r2, [r2, #16]
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	4798      	blx	r3
 8008e7e:	4603      	mov	r3, r0
 8008e80:	74fb      	strb	r3, [r7, #19]
 8008e82:	7cfb      	ldrb	r3, [r7, #19]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x60>
 8008e88:	7cfb      	ldrb	r3, [r7, #19]
 8008e8a:	e025      	b.n	8008ed8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
      scratch_buffer_handles, scratch_buffer_request_count_));
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3330      	adds	r3, #48	; 0x30
 8008e92:	681c      	ldr	r4, [r3, #0]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	47a0      	blx	r4
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	74bb      	strb	r3, [r7, #18]
 8008ea8:	7cbb      	ldrb	r3, [r7, #18]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x86>
 8008eae:	7cbb      	ldrb	r3, [r7, #18]
 8008eb0:	e012      	b.n	8008ed8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
                                               *scratch_buffer_handles));
  TF_LITE_ENSURE_STATUS(AllocateVariables(subgraph, eval_tensors));
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3324      	adds	r3, #36	; 0x24
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6979      	ldr	r1, [r7, #20]
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	4798      	blx	r3
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	747b      	strb	r3, [r7, #17]
 8008ec6:	7c7b      	ldrb	r3, [r7, #17]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d001      	beq.n	8008ed0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xa4>
 8008ecc:	7c7b      	ldrb	r3, [r7, #17]
 8008ece:	e003      	b.n	8008ed8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>

  model_is_allocating_ = false;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	371c      	adds	r7, #28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd90      	pop	{r4, r7, pc}
 8008ee0:	08015d84 	.word	0x08015d84

08008ee4 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6858      	ldr	r0, [r3, #4]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	330c      	adds	r3, #12
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2210      	movs	r2, #16
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	4798      	blx	r3
 8008f02:	4603      	mov	r3, r0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int* buffer_idx) {
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 fdce 	bl	8009aba <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8008f1e:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008f24:	2300      	movs	r3, #0
 8008f26:	61bb      	str	r3, [r7, #24]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d20e      	bcs.n	8008f50 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	4413      	add	r3, r2
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d102      	bne.n	8008f48 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x3c>
      ++current_node_request_count;
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	3301      	adds	r3, #1
 8008f46:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	e7eb      	b.n	8008f28 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x1c>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	2b07      	cmp	r3, #7
 8008f54:	d908      	bls.n	8008f68 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x5c>
    TF_LITE_REPORT_ERROR(
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	2208      	movs	r2, #8
 8008f5c:	4913      	ldr	r1, [pc, #76]	; (8008fac <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0xa0>)
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7f9 ffdc 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e01c      	b.n	8008fa2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x96>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	4413      	add	r3, r2
 8008f72:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	461a      	mov	r2, r3
 8008f78:	2300      	movs	r3, #0
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8a:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	461a      	mov	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	08015dd0 	.word	0x08015dd0

08008fb0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fd77 	bl	8009aba <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8008fcc:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008fce:	2300      	movs	r3, #0
 8008fd0:	617b      	str	r3, [r7, #20]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d211      	bcs.n	8009000 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	00db      	lsls	r3, r3, #3
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fea:	d105      	bne.n	8008ff8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e7e8      	b.n	8008fd2 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6858      	ldr	r0, [r3, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3308      	adds	r3, #8
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6912      	ldr	r2, [r2, #16]
 8009012:	3208      	adds	r2, #8
 8009014:	00d1      	lsls	r1, r2, #3
 8009016:	2204      	movs	r2, #4
 8009018:	4798      	blx	r3
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	e000      	b.n	800902a <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, NodeAndRegistration** node_and_registrations) {
 8009034:	b5b0      	push	{r4, r5, r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(node_and_registrations);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x16>
 8009046:	f008 fe6b 	bl	8011d20 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800904a:	68b9      	ldr	r1, [r7, #8]
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 fb8d 	bl	800976c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8009052:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x2a>
 800905a:	f008 fe61 	bl	8011d20 <abort>

  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	685d      	ldr	r5, [r3, #4]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	685b      	ldr	r3, [r3, #4]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
          alignof(NodeAndRegistration)));
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	330c      	adds	r3, #12
 800906a:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 800906c:	6978      	ldr	r0, [r7, #20]
 800906e:	f7ff f80c 	bl	800808a <_ZNK6tflite8SubGraph9operatorsEv>
 8009072:	4603      	mov	r3, r0
 8009074:	4618      	mov	r0, r3
 8009076:	f000 feb9 	bl	8009dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800907a:	4602      	mov	r2, r0
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	00db      	lsls	r3, r3, #3
          alignof(NodeAndRegistration)));
 8009084:	2204      	movs	r2, #4
 8009086:	4619      	mov	r1, r3
 8009088:	4628      	mov	r0, r5
 800908a:	47a0      	blx	r4
 800908c:	6138      	str	r0, [r7, #16]
  if (output == nullptr) {
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d107      	bne.n	80090a4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
    TF_LITE_REPORT_ERROR(
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	4906      	ldr	r1, [pc, #24]	; (80090b4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x80>)
 800909a:	4618      	mov	r0, r3
 800909c:	f7f9 ff3e 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e003      	b.n	80090ac <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x78>
  }
  *node_and_registrations = output;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3718      	adds	r7, #24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bdb0      	pop	{r4, r5, r7, pc}
 80090b4:	08015e08 	.word	0x08015e08

080090b8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 80090b8:	b5b0      	push	{r4, r5, r7, lr}
 80090ba:	b098      	sub	sp, #96	; 0x60
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x18>
 80090cc:	f008 fe28 	bl	8011d20 <abort>
  TFLITE_DCHECK(node_and_registrations != nullptr);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
 80090d6:	f008 fe23 	bl	8011d20 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 fb45 	bl	800976c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80090e2:	6538      	str	r0, [r7, #80]	; 0x50
  TFLITE_DCHECK(subgraph != nullptr);
 80090e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x36>
 80090ea:	f008 fe19 	bl	8011d20 <abort>

  TfLiteStatus status = kTfLiteOk;
 80090ee:	2300      	movs	r3, #0
 80090f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  auto* opcodes = model->operator_codes();
 80090f4:	68b8      	ldr	r0, [r7, #8]
 80090f6:	f7ff f801 	bl	80080fc <_ZNK6tflite5Model14operator_codesEv>
 80090fa:	64b8      	str	r0, [r7, #72]	; 0x48
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	f107 0320 	add.w	r3, r7, #32
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff f860 	bl	80081cc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800910c:	2300      	movs	r3, #0
 800910e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009110:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009112:	f7fe ffba 	bl	800808a <_ZNK6tflite8SubGraph9operatorsEv>
 8009116:	4603      	mov	r3, r0
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fe67 	bl	8009dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800911e:	4602      	mov	r2, r0
 8009120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009122:	4293      	cmp	r3, r2
 8009124:	bf34      	ite	cc
 8009126:	2301      	movcc	r3, #1
 8009128:	2300      	movcs	r3, #0
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 812c 	beq.w	800938a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d2>
    const auto* op = subgraph->operators()->Get(i);
 8009132:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009134:	f7fe ffa9 	bl	800808a <_ZNK6tflite8SubGraph9operatorsEv>
 8009138:	4603      	mov	r3, r0
 800913a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800913c:	4618      	mov	r0, r3
 800913e:	f000 fe63 	bl	8009e08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8009142:	6478      	str	r0, [r7, #68]	; 0x44
    const size_t index = op->opcode_index();
 8009144:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009146:	f7fe ff3d 	bl	8007fc4 <_ZNK6tflite8Operator12opcode_indexEv>
 800914a:	6438      	str	r0, [r7, #64]	; 0x40
    if (index >= opcodes->size()) {
 800914c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800914e:	f000 fe81 	bl	8009e54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8009152:	4602      	mov	r2, r0
 8009154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009156:	4293      	cmp	r3, r2
 8009158:	bf2c      	ite	cs
 800915a:	2301      	movcs	r3, #1
 800915c:	2300      	movcc	r3, #0
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	d008      	beq.n	8009176 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xbe>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800916a:	498d      	ldr	r1, [pc, #564]	; (80093a0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2e8>)
 800916c:	4618      	mov	r0, r3
 800916e:	f7f9 fed5 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 8009172:	2401      	movs	r4, #1
 8009174:	e10a      	b.n	800938c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    auto* opcode = (*opcodes)[index];
 8009176:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009178:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800917a:	f000 ff95 	bl	800a0a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 800917e:	63f8      	str	r0, [r7, #60]	; 0x3c
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8009180:	6879      	ldr	r1, [r7, #4]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 8009186:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	461a      	mov	r2, r3
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8009196:	3324      	adds	r3, #36	; 0x24
    status =
 8009198:	4602      	mov	r2, r0
 800919a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800919c:	f002 fb50 	bl	800b840 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 80091a0:	4603      	mov	r3, r0
 80091a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (status != kTfLiteOk) {
 80091a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d011      	beq.n	80091d2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11a>
      TF_LITE_REPORT_ERROR(error_reporter_,
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	689c      	ldr	r4, [r3, #8]
 80091b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80091b4:	f002 ff49 	bl	800c04a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 80091b8:	4603      	mov	r3, r0
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fe fe80 	bl	8007ec0 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80091c0:	4603      	mov	r3, r0
 80091c2:	461a      	mov	r2, r3
 80091c4:	4977      	ldr	r1, [pc, #476]	; (80093a4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ec>)
 80091c6:	4620      	mov	r0, r4
 80091c8:	f7f9 fea8 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
      return status;
 80091cc:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 80091d0:	e0dc      	b.n	800938c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    const auto* registration = node_and_registrations[i].registration;
 80091d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091d4:	4613      	mov	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	00db      	lsls	r3, r3, #3
 80091dc:	461a      	mov	r2, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	4413      	add	r3, r2
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (registration == nullptr) {
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d108      	bne.n	80091fe <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x146>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091f2:	496d      	ldr	r1, [pc, #436]	; (80093a8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f0>)
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f9 fe91 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 80091fa:	2401      	movs	r4, #1
 80091fc:	e0c6      	b.n	800938c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 8009202:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    const char* custom_data = nullptr;
 8009206:	2300      	movs	r3, #0
 8009208:	65bb      	str	r3, [r7, #88]	; 0x58
    size_t custom_data_size = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char* builtin_data = nullptr;
 800920e:	2300      	movs	r3, #0
 8009210:	61fb      	str	r3, [r7, #28]

    if (op_type == BuiltinOperator_CUSTOM) {
 8009212:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009216:	2b20      	cmp	r3, #32
 8009218:	d11b      	bne.n	8009252 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x19a>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 800921a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800921c:	f7fe fefd 	bl	800801a <_ZNK6tflite8Operator14custom_optionsEv>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	bf14      	ite	ne
 8009226:	2301      	movne	r3, #1
 8009228:	2300      	moveq	r3, #0
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	d059      	beq.n	80092e4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 8009230:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009232:	f7fe fef2 	bl	800801a <_ZNK6tflite8Operator14custom_optionsEv>
 8009236:	4603      	mov	r3, r0
        custom_data =
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fef7 	bl	800a02c <_ZNK11flatbuffers6VectorIhE4dataEv>
 800923e:	65b8      	str	r0, [r7, #88]	; 0x58
        custom_data_size = op->custom_options()->size();
 8009240:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009242:	f7fe feea 	bl	800801a <_ZNK6tflite8Operator14custom_optionsEv>
 8009246:	4603      	mov	r3, r0
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fd20 	bl	8009c8e <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800924e:	6578      	str	r0, [r7, #84]	; 0x54
 8009250:	e048      	b.n	80092e4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
      }
    } else {
      if (op->custom_options() != nullptr) {
 8009252:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009254:	f7fe fee1 	bl	800801a <_ZNK6tflite8Operator14custom_optionsEv>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	bf14      	ite	ne
 800925e:	2301      	movne	r3, #1
 8009260:	2300      	moveq	r3, #0
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00e      	beq.n	8009286 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ce>
        TF_LITE_REPORT_ERROR(
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	689c      	ldr	r4, [r3, #8]
 800926c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe fe25 	bl	8007ec0 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009276:	4603      	mov	r3, r0
 8009278:	461a      	mov	r2, r3
 800927a:	494c      	ldr	r1, [pc, #304]	; (80093ac <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f4>)
 800927c:	4620      	mov	r0, r4
 800927e:	f7f9 fe4d 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 8009282:	2401      	movs	r4, #1
 8009284:	e082      	b.n	800938c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	331c      	adds	r3, #28
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009292:	4611      	mov	r1, r2
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	4798      	blx	r3
 8009298:	6338      	str	r0, [r7, #48]	; 0x30
      if (parser == nullptr) {
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10e      	bne.n	80092be <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x206>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	689c      	ldr	r4, [r3, #8]
 80092a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fe fe09 	bl	8007ec0 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80092ae:	4603      	mov	r3, r0
 80092b0:	461a      	mov	r2, r3
 80092b2:	493f      	ldr	r1, [pc, #252]	; (80093b0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f8>)
 80092b4:	4620      	mov	r0, r4
 80092b6:	f7f9 fe31 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 80092ba:	2401      	movs	r4, #1
 80092bc:	e066      	b.n	800938c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6899      	ldr	r1, [r3, #8]
 80092c2:	f107 031c 	add.w	r3, r7, #28
 80092c6:	f107 0220 	add.w	r2, r7, #32
 80092ca:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80092cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80092ce:	47a0      	blx	r4
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80092d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
 80092de:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80092e2:	e053      	b.n	800938c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	685c      	ldr	r4, [r3, #4]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689d      	ldr	r5, [r3, #8]
 80092ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80092ee:	f7fe fe78 	bl	8007fe2 <_ZNK6tflite8Operator6inputsEv>
 80092f2:	4602      	mov	r2, r0
 80092f4:	f107 0318 	add.w	r3, r7, #24
 80092f8:	4629      	mov	r1, r5
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fea2 	bl	800a044 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8009300:	4603      	mov	r3, r0
 8009302:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009306:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x25c>
 800930e:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8009312:	e03b      	b.n	800938c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	685c      	ldr	r4, [r3, #4]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	689d      	ldr	r5, [r3, #8]
 800931c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800931e:	f7fe fe6e 	bl	8007ffe <_ZNK6tflite8Operator7outputsEv>
 8009322:	4602      	mov	r2, r0
 8009324:	f107 0314 	add.w	r3, r7, #20
 8009328:	4629      	mov	r1, r5
 800932a:	4620      	mov	r0, r4
 800932c:	f000 fe8a 	bl	800a044 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8009330:	4603      	mov	r3, r0
 8009332:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009336:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x28c>
 800933e:	f897 402d 	ldrb.w	r4, [r7, #45]	; 0x2d
 8009342:	e023      	b.n	800938c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 8009344:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	461a      	mov	r2, r3
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	4413      	add	r3, r2
 8009354:	62bb      	str	r3, [r7, #40]	; 0x28
    *node = {};
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	4618      	mov	r0, r3
 800935a:	2324      	movs	r3, #36	; 0x24
 800935c:	461a      	mov	r2, r3
 800935e:	2100      	movs	r1, #0
 8009360:	f008 fdc4 	bl	8011eec <memset>
    node->inputs = inputs_array;
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8009370:	69fa      	ldr	r2, [r7, #28]
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800937a:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 800937c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8009382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009384:	3301      	adds	r3, #1
 8009386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009388:	e6c2      	b.n	8009110 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
  }

  return kTfLiteOk;
 800938a:	2400      	movs	r4, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 800938c:	f107 0320 	add.w	r3, r7, #32
 8009390:	4618      	mov	r0, r3
 8009392:	f001 f915 	bl	800a5c0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8009396:	4623      	mov	r3, r4
}
 8009398:	4618      	mov	r0, r3
 800939a:	3760      	adds	r7, #96	; 0x60
 800939c:	46bd      	mov	sp, r7
 800939e:	bdb0      	pop	{r4, r5, r7, pc}
 80093a0:	08015e40 	.word	0x08015e40
 80093a4:	08015e6c 	.word	0x08015e6c
 80093a8:	08015e9c 	.word	0x08015e9c
 80093ac:	08015ec0 	.word	0x08015ec0
 80093b0:	08015f08 	.word	0x08015f08

080093b4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 80093b4:	b590      	push	{r4, r7, lr}
 80093b6:	b089      	sub	sp, #36	; 0x24
 80093b8:	af02      	add	r7, sp, #8
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f9d1 	bl	800976c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80093ca:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 80093d2:	f008 fca5 	bl	8011d20 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor =
      AllocatePersistentTfLiteTensorInternal(model, eval_tensors, tensor_index);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3328      	adds	r3, #40	; 0x28
 80093dc:	681c      	ldr	r4, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	68b9      	ldr	r1, [r7, #8]
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	47a0      	blx	r4
 80093e8:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/false) !=
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	332c      	adds	r3, #44	; 0x2c
 80093f0:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80093f2:	2300      	movs	r3, #0
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	47a0      	blx	r4
 8009404:	4603      	mov	r3, r0
                                         /*allocate_temp=*/false) !=
 8009406:	2b00      	cmp	r3, #0
 8009408:	bf14      	ite	ne
 800940a:	2301      	movne	r3, #1
 800940c:	2300      	moveq	r3, #0
 800940e:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8009410:	2b00      	cmp	r3, #0
 8009412:	d007      	beq.n	8009424 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x70>
      kTfLiteOk) {
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	490c      	ldr	r1, [pc, #48]	; (800944c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 800941a:	4618      	mov	r0, r3
 800941c:	f7f9 fd7e 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 8009420:	2300      	movs	r3, #0
 8009422:	e00e      	b.n	8009442 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
  }

  if (eval_tensors != nullptr) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8c>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	4613      	mov	r3, r2
 800942e:	005b      	lsls	r3, r3, #1
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	461a      	mov	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4413      	add	r3, r2
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 8009440:	693b      	ldr	r3, [r7, #16]
}
 8009442:	4618      	mov	r0, r3
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	bd90      	pop	{r4, r7, pc}
 800944a:	bf00      	nop
 800944c:	08015f28 	.word	0x08015f28

08009450 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b089      	sub	sp, #36	; 0x24
 8009454:	af02      	add	r7, sp, #8
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
 800945c:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 f983 	bl	800976c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8009466:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 800946e:	f008 fc57 	bl	8011d20 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6858      	ldr	r0, [r3, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3310      	adds	r3, #16
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2204      	movs	r2, #4
 8009482:	2140      	movs	r1, #64	; 0x40
 8009484:	4798      	blx	r3
 8009486:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	332c      	adds	r3, #44	; 0x2c
 800948e:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8009490:	2301      	movs	r3, #1
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	68b9      	ldr	r1, [r7, #8]
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	47a0      	blx	r4
 80094a2:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bf14      	ite	ne
 80094a8:	2301      	movne	r3, #1
 80094aa:	2300      	moveq	r3, #0
 80094ac:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d007      	beq.n	80094c2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x72>
    TF_LITE_REPORT_ERROR(
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	490c      	ldr	r1, [pc, #48]	; (80094e8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7f9 fd2f 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 80094be:	2300      	movs	r3, #0
 80094c0:	e00e      	b.n	80094e0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x90>
  }

  if (eval_tensors != nullptr) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00a      	beq.n	80094de <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	4613      	mov	r3, r2
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	4413      	add	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4413      	add	r3, r2
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 80094de:	693b      	ldr	r3, [r7, #16]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	371c      	adds	r7, #28
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd90      	pop	{r4, r7, pc}
 80094e8:	08015f74 	.word	0x08015f74

080094ec <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3314      	adds	r3, #20
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4610      	mov	r0, r2
 8009504:	4798      	blx	r3
}
 8009506:	bf00      	nop
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, TfLiteEvalTensor** eval_tensors) {
 8009510:	b5b0      	push	{r4, r5, r7, lr}
 8009512:	b08c      	sub	sp, #48	; 0x30
 8009514:	af02      	add	r7, sp, #8
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x16>
 8009522:	f008 fbfd 	bl	8011d20 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 f91f 	bl	800976c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800952e:	6238      	str	r0, [r7, #32]
  TFLITE_DCHECK(subgraph != nullptr);
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x2a>
 8009536:	f008 fbf3 	bl	8011d20 <abort>

  size_t alloc_count = subgraph->tensors()->size();
 800953a:	6a38      	ldr	r0, [r7, #32]
 800953c:	f7fe fd7b 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 8009540:	4603      	mov	r3, r0
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fc1e 	bl	8009d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009548:	61f8      	str	r0, [r7, #28]
  TfLiteEvalTensor* tensors =
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6858      	ldr	r0, [r3, #4]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	330c      	adds	r3, #12
 8009556:	681c      	ldr	r4, [r3, #0]
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8009558:	69fa      	ldr	r2, [r7, #28]
 800955a:	4613      	mov	r3, r2
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
          sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8009562:	2204      	movs	r2, #4
 8009564:	4619      	mov	r1, r3
 8009566:	47a0      	blx	r4
 8009568:	61b8      	str	r0, [r7, #24]
  if (tensors == nullptr) {
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10c      	bne.n	800958a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6898      	ldr	r0, [r3, #8]
 8009574:	69fa      	ldr	r2, [r7, #28]
 8009576:	4613      	mov	r3, r2
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	461a      	mov	r2, r3
 8009580:	4921      	ldr	r1, [pc, #132]	; (8009608 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf8>)
 8009582:	f7f9 fccb 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate memory for context->eval_tensors, "
                         "%d bytes required",
                         sizeof(TfLiteEvalTensor) * alloc_count);
    return kTfLiteError;
 8009586:	2301      	movs	r3, #1
 8009588:	e03a      	b.n	8009600 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  }

  for (size_t i = 0; i < alloc_count; ++i) {
 800958a:	2300      	movs	r3, #0
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
 800958e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	429a      	cmp	r2, r3
 8009594:	d230      	bcs.n	80095f8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe8>
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 800959a:	6a38      	ldr	r0, [r7, #32]
 800959c:	f7fe fd4b 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 80095a0:	4603      	mov	r3, r0
 80095a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 fbfb 	bl	8009da0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80095aa:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80095ac:	68b8      	ldr	r0, [r7, #8]
 80095ae:	f7fe fdc1 	bl	8008134 <_ZNK6tflite5Model7buffersEv>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &tensors[i]);
 80095b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b8:	4613      	mov	r3, r2
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	4413      	add	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	461a      	mov	r2, r3
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	4413      	add	r3, r2
        error_reporter_, &tensors[i]);
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	460b      	mov	r3, r1
 80095ca:	4602      	mov	r2, r0
 80095cc:	4629      	mov	r1, r5
 80095ce:	4620      	mov	r0, r4
 80095d0:	f7ff faf0 	bl	8008bb4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75fb      	strb	r3, [r7, #23]
    if (status != kTfLiteOk) {
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d008      	beq.n	80095f0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe0>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e4:	4909      	ldr	r1, [pc, #36]	; (800960c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xfc>)
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7f9 fc98 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e007      	b.n	8009600 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  for (size_t i = 0; i < alloc_count; ++i) {
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	3301      	adds	r3, #1
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
 80095f6:	e7ca      	b.n	800958e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7e>
    }
  }
  *eval_tensors = tensors;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3728      	adds	r7, #40	; 0x28
 8009604:	46bd      	mov	sp, r7
 8009606:	bdb0      	pop	{r4, r5, r7, pc}
 8009608:	08015fb8 	.word	0x08015fb8
 800960c:	08016000 	.word	0x08016000

08009610 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 8009610:	b5b0      	push	{r4, r5, r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800961c:	2300      	movs	r3, #0
 800961e:	61fb      	str	r3, [r7, #28]
 8009620:	68b8      	ldr	r0, [r7, #8]
 8009622:	f7fe fd08 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 8009626:	4603      	mov	r3, r0
 8009628:	4618      	mov	r0, r3
 800962a:	f000 fbab 	bl	8009d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800962e:	4602      	mov	r2, r0
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	4293      	cmp	r3, r2
 8009634:	bf34      	ite	cc
 8009636:	2301      	movcc	r3, #1
 8009638:	2300      	movcs	r3, #0
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d04f      	beq.n	80096e0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 8009640:	68b8      	ldr	r0, [r7, #8]
 8009642:	f7fe fcf8 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 8009646:	4603      	mov	r3, r0
 8009648:	69f9      	ldr	r1, [r7, #28]
 800964a:	4618      	mov	r0, r3
 800964c:	f000 fba8 	bl	8009da0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8009650:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 8009652:	69b8      	ldr	r0, [r7, #24]
 8009654:	f7fe fca2 	bl	8007f9c <_ZNK6tflite6Tensor11is_variableEv>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d03c      	beq.n	80096d8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	4613      	mov	r3, r2
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	4413      	add	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	461a      	mov	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4413      	add	r3, r2
 800966e:	f107 0210 	add.w	r2, r7, #16
 8009672:	4611      	mov	r1, r2
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe fbc0 	bl	8007dfa <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800967a:	4603      	mov	r3, r0
 800967c:	75fb      	strb	r3, [r7, #23]
 800967e:	7dfb      	ldrb	r3, [r7, #23]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 8009684:	7dfb      	ldrb	r3, [r7, #23]
 8009686:	e02c      	b.n	80096e2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6858      	ldr	r0, [r3, #4]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	330c      	adds	r3, #12
 8009694:	681d      	ldr	r5, [r3, #0]
 8009696:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	4613      	mov	r3, r2
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 80096a8:	2210      	movs	r2, #16
 80096aa:	47a8      	blx	r5
 80096ac:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 80096ae:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	4613      	mov	r3, r2
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	461a      	mov	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4413      	add	r3, r2
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d108      	bne.n	80096d8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4907      	ldr	r1, [pc, #28]	; (80096ec <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7f9 fc24 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e004      	b.n	80096e2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	3301      	adds	r3, #1
 80096dc:	61fb      	str	r3, [r7, #28]
 80096de:	e79f      	b.n	8009620 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3720      	adds	r7, #32
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bdb0      	pop	{r4, r5, r7, pc}
 80096ea:	bf00      	nop
 80096ec:	08016020 	.word	0x08016020

080096f0 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6858      	ldr	r0, [r3, #4]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	330c      	adds	r3, #12
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2204      	movs	r2, #4
 800970e:	2140      	movs	r1, #64	; 0x40
 8009710:	4798      	blx	r3
 8009712:	4603      	mov	r3, r0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, const SubGraph* subgraph, TfLiteTensor* tensor,
    int tensor_index, bool allocate_temp) {
 800971c:	b5b0      	push	{r4, r5, r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af02      	add	r7, sp, #8
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp, *subgraph->tensors()->Get(tensor_index),
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7fe fc81 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 8009734:	4602      	mov	r2, r0
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f000 fb30 	bl	8009da0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8009740:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8009742:	68b8      	ldr	r0, [r7, #8]
 8009744:	f7fe fcf6 	bl	8008134 <_ZNK6tflite5Model7buffersEv>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	689b      	ldr	r3, [r3, #8]
      model->buffers(), error_reporter_, tensor);
 800974c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	9201      	str	r2, [sp, #4]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	4603      	mov	r3, r0
 8009758:	462a      	mov	r2, r5
 800975a:	4620      	mov	r0, r4
 800975c:	f7ff f8ce 	bl	80088fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 8009760:	4603      	mov	r3, r0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800976c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 8009776:	6838      	ldr	r0, [r7, #0]
 8009778:	f7fe fcce 	bl	8008118 <_ZNK6tflite5Model9subgraphsEv>
 800977c:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 fb9c 	bl	8009ebc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009784:	4603      	mov	r3, r0
 8009786:	2b01      	cmp	r3, #1
 8009788:	bf14      	ite	ne
 800978a:	2301      	movne	r3, #1
 800978c:	2300      	moveq	r3, #0
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b00      	cmp	r3, #0
 8009792:	d007      	beq.n	80097a4 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	4907      	ldr	r1, [pc, #28]	; (80097b8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 800979a:	4618      	mov	r0, r3
 800979c:	f7f9 fbbe 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 80097a0:	2300      	movs	r3, #0
 80097a2:	e004      	b.n	80097ae <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x42>
  }
  return (*subgraphs)[0];
 80097a4:	2100      	movs	r1, #0
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 fc24 	bl	8009ff4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80097ac:	4603      	mov	r3, r0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	08016050 	.word	0x08016050

080097bc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, const SubGraph* subgraph,
    TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles) {
 80097bc:	b590      	push	{r4, r7, lr}
 80097be:	b0a3      	sub	sp, #140	; 0x8c
 80097c0:	af02      	add	r7, sp, #8
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7fe fc31 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 80097d4:	4603      	mov	r3, r0
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fad4 	bl	8009d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80097dc:	4602      	mov	r2, r0
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	4413      	add	r3, r2
 80097e4:	67bb      	str	r3, [r7, #120]	; 0x78
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 80097e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80097e8:	4613      	mov	r3, r2
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	4413      	add	r3, r2
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	677b      	str	r3, [r7, #116]	; 0x74

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6858      	ldr	r0, [r3, #4]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3310      	adds	r3, #16
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2204      	movs	r2, #4
 8009802:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8009804:	4798      	blx	r3
 8009806:	6738      	str	r0, [r7, #112]	; 0x70
  if (allocation_info == nullptr) {
 8009808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800980a:	2b00      	cmp	r3, #0
 800980c:	d108      	bne.n	8009820 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x64>
    TF_LITE_REPORT_ERROR(
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009814:	4983      	ldr	r1, [pc, #524]	; (8009a24 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x268>)
 8009816:	4618      	mov	r0, r3
 8009818:	f7f9 fb80 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 800981c:	2401      	movs	r4, #1
 800981e:	e0fb      	b.n	8009a18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7fe fc08 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 8009826:	4603      	mov	r3, r0
 8009828:	4618      	mov	r0, r3
 800982a:	f000 faab 	bl	8009d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800982e:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	691a      	ldr	r2, [r3, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	4613      	mov	r3, r2
 8009840:	460a      	mov	r2, r1
 8009842:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009844:	f7fe fcf8 	bl	8008238 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 8009848:	2300      	movs	r3, #0
 800984a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TF_LITE_ENSURE_STATUS(
 800984c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe febe 	bl	80085d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800985c:	4603      	mov	r3, r0
 800985e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8009862:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xb4>
 800986a:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 800986e:	e0d3      	b.n	8009a18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 8009870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009872:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	f7fe fcf7 	bl	800826c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800987e:	4603      	mov	r3, r0
 8009880:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8009884:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xd6>
 800988c:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 8009890:	e0c2      	b.n	8009a18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 f911 	bl	8009aba <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8009898:	66b8      	str	r0, [r7, #104]	; 0x68

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 800989a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800989e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80098a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe ff13 	bl	80086d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80098b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x102>
 80098b8:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 80098bc:	e0ac      	b.n	8009a18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	2110      	movs	r1, #16
 80098c4:	4618      	mov	r0, r3
 80098c6:	f002 fd75 	bl	800c3b4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 80098ca:	6638      	str	r0, [r7, #96]	; 0x60
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6858      	ldr	r0, [r3, #4]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3310      	adds	r3, #16
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2210      	movs	r2, #16
 80098dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80098de:	4798      	blx	r3
 80098e0:	65f8      	str	r0, [r7, #92]	; 0x5c
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 80098e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10e      	bne.n	8009906 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x14a>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6898      	ldr	r0, [r3, #8]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6899      	ldr	r1, [r3, #8]
 80098f0:	4b4d      	ldr	r3, [pc, #308]	; (8009a28 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x26c>)
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	f240 4333 	movw	r3, #1075	; 0x433
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	4b4c      	ldr	r3, [pc, #304]	; (8009a2c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x270>)
 80098fc:	4a4c      	ldr	r2, [pc, #304]	; (8009a30 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x274>)
 80098fe:	f7f9 fb26 	bl	8002f4e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009902:	2401      	movs	r4, #1
 8009904:	e088      	b.n	8009a18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8009906:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009908:	f107 0310 	add.w	r3, r7, #16
 800990c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800990e:	4618      	mov	r0, r3
 8009910:	f7fc f970 	bl	8005bf4 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6898      	ldr	r0, [r3, #8]
 8009918:	f107 0110 	add.w	r1, r7, #16
 800991c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800991e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009920:	f7fe ff21 	bl	8008766 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 8009924:	4603      	mov	r3, r0
 8009926:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800992a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800992e:	2b00      	cmp	r3, #0
 8009930:	d002      	beq.n	8009938 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x17c>
 8009932:	f897 405b 	ldrb.w	r4, [r7, #91]	; 0x5b
 8009936:	e06a      	b.n	8009a0e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3314      	adds	r3, #20
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4610      	mov	r0, r2
 8009948:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	2110      	movs	r1, #16
 8009950:	4618      	mov	r0, r3
 8009952:	f002 fd2f 	bl	800c3b4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8009956:	6578      	str	r0, [r7, #84]	; 0x54

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8009958:	f107 0310 	add.w	r3, r7, #16
 800995c:	4618      	mov	r0, r3
 800995e:	f7fc fc02 	bl	8006166 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8009962:	4602      	mov	r2, r0
 8009964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009966:	4293      	cmp	r3, r2
 8009968:	bf34      	ite	cc
 800996a:	2301      	movcc	r3, #1
 800996c:	2300      	movcs	r3, #0
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00e      	beq.n	8009992 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1d6>
    TF_LITE_REPORT_ERROR(
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	689c      	ldr	r4, [r3, #8]
 8009978:	f107 0310 	add.w	r3, r7, #16
 800997c:	4618      	mov	r0, r3
 800997e:	f7fc fbf2 	bl	8006166 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8009982:	4602      	mov	r2, r0
 8009984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009986:	492b      	ldr	r1, [pc, #172]	; (8009a34 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x278>)
 8009988:	4620      	mov	r0, r4
 800998a:	f7f9 fac7 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 800998e:	2401      	movs	r4, #1
 8009990:	e03d      	b.n	8009a0e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689c      	ldr	r4, [r3, #8]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	4618      	mov	r0, r3
 800999c:	f002 fcfe 	bl	800c39c <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 80099a0:	4602      	mov	r2, r0
 80099a2:	f107 0110 	add.w	r1, r7, #16
 80099a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099ac:	4620      	mov	r0, r4
 80099ae:	f7fe ff34 	bl	800881a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80099b8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x20a>
 80099c0:	f897 4053 	ldrb.w	r4, [r7, #83]	; 0x53
 80099c4:	e023      	b.n	8009a0e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
  head_usage = planner.GetMaximumMemorySize();
 80099c6:	f107 0310 	add.w	r3, r7, #16
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fc fbcb 	bl	8006166 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 80099d0:	67f8      	str	r0, [r7, #124]	; 0x7c
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80099d8:	429a      	cmp	r2, r3
 80099da:	d902      	bls.n	80099e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x226>
    max_head_buffer_usage_ = head_usage;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80099e0:	615a      	str	r2, [r3, #20]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6858      	ldr	r0, [r3, #4]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3308      	adds	r3, #8
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	6951      	ldr	r1, [r2, #20]
 80099f4:	2210      	movs	r2, #16
 80099f6:	4798      	blx	r3
 80099f8:	4603      	mov	r3, r0
 80099fa:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80099fe:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x250>
 8009a06:	f897 4052 	ldrb.w	r4, [r7, #82]	; 0x52
 8009a0a:	e000      	b.n	8009a0e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 8009a0c:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8009a0e:	f107 0310 	add.w	r3, r7, #16
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fc f940 	bl	8005c98 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8009a18:	4623      	mov	r3, r4
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3784      	adds	r7, #132	; 0x84
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd90      	pop	{r4, r7, pc}
 8009a22:	bf00      	nop
 8009a24:	0801607c 	.word	0x0801607c
 8009a28:	080160f8 	.word	0x080160f8
 8009a2c:	080160c0 	.word	0x080160c0
 8009a30:	080160e0 	.word	0x080160e0
 8009a34:	08016114 	.word	0x08016114

08009a38 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 8009a4a:	f008 f969 	bl	8011d20 <abort>

  if (scratch_buffer_request_count_ == 0) {
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 8009a56:	2300      	movs	r3, #0
 8009a58:	e00e      	b.n	8009a78 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6858      	ldr	r0, [r3, #4]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	330c      	adds	r3, #12
 8009a66:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	0091      	lsls	r1, r2, #2
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	4798      	blx	r3
 8009a70:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	611a      	str	r2, [r3, #16]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6858      	ldr	r0, [r3, #4]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3308      	adds	r3, #8
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2204      	movs	r2, #4
 8009a9e:	2140      	movs	r1, #64	; 0x40
 8009aa0:	4798      	blx	r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73fb      	strb	r3, [r7, #15]
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	e000      	b.n	8009ab2 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f002 fc68 	bl	800c39c <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8009acc:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
 8009ace:	2104      	movs	r1, #4
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe f891 	bl	8007bf8 <_ZN6tflite14AlignPointerUpEPhj>
 8009ad6:	4603      	mov	r3, r0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3304      	adds	r3, #4
  }
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	781a      	ldrb	r2, [r3, #0]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d305      	bcc.n	8009b1c <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d201      	bcs.n	8009b20 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e000      	b.n	8009b22 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b082      	sub	sp, #8
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	460b      	mov	r3, r1
 8009b38:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009b3a:	887b      	ldrh	r3, [r7, #2]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fac0 	bl	800a0c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8009b44:	4603      	mov	r3, r0
  }
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	460b      	mov	r3, r1
 8009b58:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009b5a:	887b      	ldrh	r3, [r7, #2]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fad0 	bl	800a104 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8009b64:	4603      	mov	r3, r0
  }
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	460b      	mov	r3, r1
 8009b78:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009b7a:	887b      	ldrh	r3, [r7, #2]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fae0 	bl	800a144 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8009b84:	4603      	mov	r3, r0
  }
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	460b      	mov	r3, r1
 8009b98:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009b9a:	887b      	ldrh	r3, [r7, #2]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 faf0 	bl	800a184 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8009ba4:	4603      	mov	r3, r0
  }
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009bba:	887b      	ldrh	r3, [r7, #2]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fb00 	bl	800a1c4 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8009bc4:	4603      	mov	r3, r0
  }
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b082      	sub	sp, #8
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009bda:	887b      	ldrh	r3, [r7, #2]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fb10 	bl	800a204 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8009be4:	4603      	mov	r3, r0
  }
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009bfa:	887b      	ldrh	r3, [r7, #2]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fb20 	bl	800a244 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8009c04:	4603      	mov	r3, r0
  }
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009c1a:	887b      	ldrh	r3, [r7, #2]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fb30 	bl	800a284 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8009c24:	4603      	mov	r3, r0
  }
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b082      	sub	sp, #8
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	460b      	mov	r3, r1
 8009c38:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009c3a:	887b      	ldrh	r3, [r7, #2]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fb40 	bl	800a2c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8009c44:	4603      	mov	r3, r0
  }
 8009c46:	4618      	mov	r0, r3
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b082      	sub	sp, #8
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	460b      	mov	r3, r1
 8009c58:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009c5a:	887b      	ldrh	r3, [r7, #2]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fb50 	bl	800a304 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8009c64:	4603      	mov	r3, r0
  }
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	460b      	mov	r3, r1
 8009c78:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009c7a:	887b      	ldrh	r3, [r7, #2]
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fb60 	bl	800a344 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8009c84:	4603      	mov	r3, r0
  }
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b082      	sub	sp, #8
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7f9 fe66 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b082      	sub	sp, #8
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7f9 fe58 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
	...

08009cc8 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff ffe9 	bl	8009caa <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d306      	bcc.n	8009cee <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8009ce0:	4b0a      	ldr	r3, [pc, #40]	; (8009d0c <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8009ce2:	4a0b      	ldr	r2, [pc, #44]	; (8009d10 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8009ce4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009ce8:	480a      	ldr	r0, [pc, #40]	; (8009d14 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8009cea:	f008 f821 	bl	8011d30 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fb6a 	bl	800a3c8 <_ZNK11flatbuffers6VectorIfE4DataEv>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 fb4f 	bl	800a39c <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8009cfe:	eef0 7a40 	vmov.f32	s15, s0
  }
 8009d02:	eeb0 0a67 	vmov.f32	s0, s15
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	08016164 	.word	0x08016164
 8009d10:	08018100 	.word	0x08018100
 8009d14:	08016170 	.word	0x08016170

08009d18 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7f9 fe21 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff ffea 	bl	8009d18 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8009d44:	4602      	mov	r2, r0
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d306      	bcc.n	8009d5a <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 8009d4e:	4a0b      	ldr	r2, [pc, #44]	; (8009d7c <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 8009d50:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009d54:	480a      	ldr	r0, [pc, #40]	; (8009d80 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 8009d56:	f007 ffeb 	bl	8011d30 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fb56 	bl	800a40c <_ZNK11flatbuffers6VectorIxE4DataEv>
 8009d60:	4603      	mov	r3, r0
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 fb3b 	bl	800a3e0 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	460c      	mov	r4, r1
  }
 8009d6e:	4618      	mov	r0, r3
 8009d70:	4621      	mov	r1, r4
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd90      	pop	{r4, r7, pc}
 8009d78:	08016164 	.word	0x08016164
 8009d7c:	080181c8 	.word	0x080181c8
 8009d80:	08016170 	.word	0x08016170

08009d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7f9 fdeb 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009d96:	4603      	mov	r3, r0
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff ffea 	bl	8009d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009db0:	4602      	mov	r2, r0
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d306      	bcc.n	8009dc6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8009db8:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8009dba:	4a0a      	ldr	r2, [pc, #40]	; (8009de4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8009dbc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009dc0:	4809      	ldr	r0, [pc, #36]	; (8009de8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8009dc2:	f007 ffb5 	bl	8011d30 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fb40 	bl	800a44c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 fb27 	bl	800a424 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8009dd6:	4603      	mov	r3, r0
  }
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	08016164 	.word	0x08016164
 8009de4:	08017f0c 	.word	0x08017f0c
 8009de8:	08016170 	.word	0x08016170

08009dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7f9 fdb7 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	4618      	mov	r0, r3
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff ffea 	bl	8009dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d306      	bcc.n	8009e2e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8009e20:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8009e22:	4a0a      	ldr	r2, [pc, #40]	; (8009e4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8009e24:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009e28:	4809      	ldr	r0, [pc, #36]	; (8009e50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8009e2a:	f007 ff81 	bl	8011d30 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fb2c 	bl	800a48c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8009e34:	4603      	mov	r3, r0
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 fb13 	bl	800a464 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8009e3e:	4603      	mov	r3, r0
  }
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	08016164 	.word	0x08016164
 8009e4c:	08018004 	.word	0x08018004
 8009e50:	08016170 	.word	0x08016170

08009e54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7f9 fd83 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009e66:	4603      	mov	r3, r0
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff ffea 	bl	8009e54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8009e80:	4602      	mov	r2, r0
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d306      	bcc.n	8009e96 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 8009e88:	4b09      	ldr	r3, [pc, #36]	; (8009eb0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 8009e8a:	4a0a      	ldr	r2, [pc, #40]	; (8009eb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 8009e8c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009e90:	4809      	ldr	r0, [pc, #36]	; (8009eb8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 8009e92:	f007 ff4d 	bl	8011d30 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fb18 	bl	800a4cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	6839      	ldr	r1, [r7, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 faff 	bl	800a4a4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8009ea6:	4603      	mov	r3, r0
  }
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	08016164 	.word	0x08016164
 8009eb4:	080182a0 	.word	0x080182a0
 8009eb8:	08016170 	.word	0x08016170

08009ebc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7f9 fd4f 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff ffea 	bl	8009ebc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d306      	bcc.n	8009efe <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8009ef0:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8009ef2:	4a0a      	ldr	r2, [pc, #40]	; (8009f1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8009ef4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009ef8:	4809      	ldr	r0, [pc, #36]	; (8009f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 8009efa:	f007 ff19 	bl	8011d30 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fb04 	bl	800a50c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 8009f04:	4603      	mov	r3, r0
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 faeb 	bl	800a4e4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8009f0e:	4603      	mov	r3, r0
  }
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	08016164 	.word	0x08016164
 8009f1c:	08017d18 	.word	0x08017d18
 8009f20:	08016170 	.word	0x08016170

08009f24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7f9 fd1b 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009f36:	4603      	mov	r3, r0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff ffea 	bl	8009f24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 8009f50:	4602      	mov	r2, r0
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d306      	bcc.n	8009f66 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8009f58:	4b09      	ldr	r3, [pc, #36]	; (8009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 8009f5a:	4a0a      	ldr	r2, [pc, #40]	; (8009f84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 8009f5c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009f60:	4809      	ldr	r0, [pc, #36]	; (8009f88 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8009f62:	f007 fee5 	bl	8011d30 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 faf0 	bl	800a54c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 fad7 	bl	800a524 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8009f76:	4603      	mov	r3, r0
  }
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	08016164 	.word	0x08016164
 8009f84:	08017e14 	.word	0x08017e14
 8009f88:	08016170 	.word	0x08016170

08009f8c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7f9 fce7 	bl	800396c <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff ffea 	bl	8009f8c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d306      	bcc.n	8009fce <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 8009fc0:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 8009fc2:	4a0a      	ldr	r2, [pc, #40]	; (8009fec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 8009fc4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009fc8:	4809      	ldr	r0, [pc, #36]	; (8009ff0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 8009fca:	f007 feb1 	bl	8011d30 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fadc 	bl	800a58c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 fac3 	bl	800a564 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 8009fde:	4603      	mov	r3, r0
  }
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	08016164 	.word	0x08016164
 8009fec:	08017c1c 	.word	0x08017c1c
 8009ff0:	08016170 	.word	0x08016170

08009ff4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff ff69 	bl	8009ed8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800a006:	4603      	mov	r3, r0
 800a008:	4618      	mov	r0, r3
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff ff8f 	bl	8009f40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800a022:	4603      	mov	r3, r0
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f9a5 	bl	800a384 <_ZNK11flatbuffers6VectorIhE4DataEv>
 800a03a:	4603      	mov	r3, r0
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800a058:	f007 fe62 	bl	8011d20 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800a062:	f007 fe5d 	bl	8011d20 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	607a      	str	r2, [r7, #4]
 800a082:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800a08a:	f007 fe49 	bl	8011d20 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800a094:	f007 fe44 	bl	8011d20 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff fedb 	bl	8009e70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a0d0:	887b      	ldrh	r3, [r7, #2]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7f8 ff70 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	89fb      	ldrh	r3, [r7, #14]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a0e6:	89fb      	ldrh	r3, [r7, #14]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d006      	beq.n	800a0fa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800a0ec:	68b8      	ldr	r0, [r7, #8]
 800a0ee:	f7f9 fc56 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4413      	add	r3, r2
                        : nullptr;
 800a0f8:	e000      	b.n	800a0fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a0fa:	2300      	movs	r3, #0
  }
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a110:	887b      	ldrh	r3, [r7, #2]
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7f8 ff50 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a11a:	4603      	mov	r3, r0
 800a11c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	89fb      	ldrh	r3, [r7, #14]
 800a122:	4413      	add	r3, r2
 800a124:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a126:	89fb      	ldrh	r3, [r7, #14]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d006      	beq.n	800a13a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800a12c:	68b8      	ldr	r0, [r7, #8]
 800a12e:	f7f9 fc36 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a132:	4602      	mov	r2, r0
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4413      	add	r3, r2
                        : nullptr;
 800a138:	e000      	b.n	800a13c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a13a:	2300      	movs	r3, #0
  }
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a150:	887b      	ldrh	r3, [r7, #2]
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7f8 ff30 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a15a:	4603      	mov	r3, r0
 800a15c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	89fb      	ldrh	r3, [r7, #14]
 800a162:	4413      	add	r3, r2
 800a164:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a166:	89fb      	ldrh	r3, [r7, #14]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d006      	beq.n	800a17a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800a16c:	68b8      	ldr	r0, [r7, #8]
 800a16e:	f7f9 fc16 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a172:	4602      	mov	r2, r0
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	4413      	add	r3, r2
                        : nullptr;
 800a178:	e000      	b.n	800a17c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a17a:	2300      	movs	r3, #0
  }
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a190:	887b      	ldrh	r3, [r7, #2]
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7f8 ff10 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a19a:	4603      	mov	r3, r0
 800a19c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	89fb      	ldrh	r3, [r7, #14]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a1a6:	89fb      	ldrh	r3, [r7, #14]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800a1ac:	68b8      	ldr	r0, [r7, #8]
 800a1ae:	f7f9 fbf6 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	4413      	add	r3, r2
                        : nullptr;
 800a1b8:	e000      	b.n	800a1bc <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a1ba:	2300      	movs	r3, #0
  }
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a1d0:	887b      	ldrh	r3, [r7, #2]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7f8 fef0 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	89fb      	ldrh	r3, [r7, #14]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a1e6:	89fb      	ldrh	r3, [r7, #14]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d006      	beq.n	800a1fa <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 800a1ec:	68b8      	ldr	r0, [r7, #8]
 800a1ee:	f7f9 fbd6 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	4413      	add	r3, r2
                        : nullptr;
 800a1f8:	e000      	b.n	800a1fc <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a1fa:	2300      	movs	r3, #0
  }
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a210:	887b      	ldrh	r3, [r7, #2]
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7f8 fed0 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a21a:	4603      	mov	r3, r0
 800a21c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	89fb      	ldrh	r3, [r7, #14]
 800a222:	4413      	add	r3, r2
 800a224:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a226:	89fb      	ldrh	r3, [r7, #14]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d006      	beq.n	800a23a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800a22c:	68b8      	ldr	r0, [r7, #8]
 800a22e:	f7f9 fbb6 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a232:	4602      	mov	r2, r0
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	4413      	add	r3, r2
                        : nullptr;
 800a238:	e000      	b.n	800a23c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a23a:	2300      	movs	r3, #0
  }
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a250:	887b      	ldrh	r3, [r7, #2]
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7f8 feb0 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a25a:	4603      	mov	r3, r0
 800a25c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	89fb      	ldrh	r3, [r7, #14]
 800a262:	4413      	add	r3, r2
 800a264:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a266:	89fb      	ldrh	r3, [r7, #14]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d006      	beq.n	800a27a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800a26c:	68b8      	ldr	r0, [r7, #8]
 800a26e:	f7f9 fb96 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a272:	4602      	mov	r2, r0
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	4413      	add	r3, r2
                        : nullptr;
 800a278:	e000      	b.n	800a27c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a27a:	2300      	movs	r3, #0
  }
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	460b      	mov	r3, r1
 800a28e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a290:	887b      	ldrh	r3, [r7, #2]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7f8 fe90 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a29a:	4603      	mov	r3, r0
 800a29c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	89fb      	ldrh	r3, [r7, #14]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a2a6:	89fb      	ldrh	r3, [r7, #14]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d006      	beq.n	800a2ba <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800a2ac:	68b8      	ldr	r0, [r7, #8]
 800a2ae:	f7f9 fb76 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	4413      	add	r3, r2
                        : nullptr;
 800a2b8:	e000      	b.n	800a2bc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a2ba:	2300      	movs	r3, #0
  }
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a2d0:	887b      	ldrh	r3, [r7, #2]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7f8 fe70 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	89fb      	ldrh	r3, [r7, #14]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a2e6:	89fb      	ldrh	r3, [r7, #14]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d006      	beq.n	800a2fa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800a2ec:	68b8      	ldr	r0, [r7, #8]
 800a2ee:	f7f9 fb56 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	4413      	add	r3, r2
                        : nullptr;
 800a2f8:	e000      	b.n	800a2fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a2fa:	2300      	movs	r3, #0
  }
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a310:	887b      	ldrh	r3, [r7, #2]
 800a312:	4619      	mov	r1, r3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7f8 fe50 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a31a:	4603      	mov	r3, r0
 800a31c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	89fb      	ldrh	r3, [r7, #14]
 800a322:	4413      	add	r3, r2
 800a324:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a326:	89fb      	ldrh	r3, [r7, #14]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d006      	beq.n	800a33a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800a32c:	68b8      	ldr	r0, [r7, #8]
 800a32e:	f7f9 fb36 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a332:	4602      	mov	r2, r0
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	4413      	add	r3, r2
                        : nullptr;
 800a338:	e000      	b.n	800a33c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a33a:	2300      	movs	r3, #0
  }
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a350:	887b      	ldrh	r3, [r7, #2]
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7f8 fe30 	bl	8002fba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a35a:	4603      	mov	r3, r0
 800a35c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	89fb      	ldrh	r3, [r7, #14]
 800a362:	4413      	add	r3, r2
 800a364:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a366:	89fb      	ldrh	r3, [r7, #14]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d006      	beq.n	800a37a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800a36c:	68b8      	ldr	r0, [r7, #8]
 800a36e:	f7f9 fb16 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a372:	4602      	mov	r2, r0
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	4413      	add	r3, r2
                        : nullptr;
 800a378:	e000      	b.n	800a37c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a37a:	2300      	movs	r3, #0
  }
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3304      	adds	r3, #4
  }
 800a390:	4618      	mov	r0, r3
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	edd3 7a00 	vldr	s15, [r3]
 800a3b2:	eeb0 0a67 	vmov.f32	s0, s15
 800a3b6:	f7fa f8ab 	bl	8004510 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800a3ba:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a3be:	eeb0 0a67 	vmov.f32	s0, s15
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	3304      	adds	r3, #4
  }
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a3e0:	b590      	push	{r4, r7, lr}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	f000 f8d3 	bl	800a5a4 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800a3fe:	4603      	mov	r3, r0
 800a400:	460c      	mov	r4, r1
  }
 800a402:	4618      	mov	r0, r3
 800a404:	4621      	mov	r1, r4
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd90      	pop	{r4, r7, pc}

0800a40c <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	3304      	adds	r3, #4
  }
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	4413      	add	r3, r2
 800a436:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7f9 fab0 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a43e:	4602      	mov	r2, r0
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4413      	add	r3, r2
  }
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3304      	adds	r3, #4
  }
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	4413      	add	r3, r2
 800a476:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7f9 fa90 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a47e:	4602      	mov	r2, r0
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4413      	add	r3, r2
  }
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3304      	adds	r3, #4
  }
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7f9 fa70 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4413      	add	r3, r2
  }
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3304      	adds	r3, #4
  }
 800a4d8:	4618      	mov	r0, r3
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7f9 fa50 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a4fe:	4602      	mov	r2, r0
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4413      	add	r3, r2
  }
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3304      	adds	r3, #4
  }
 800a518:	4618      	mov	r0, r3
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	4413      	add	r3, r2
 800a536:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7f9 fa30 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a53e:	4602      	mov	r2, r0
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4413      	add	r3, r2
  }
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3304      	adds	r3, #4
  }
 800a558:	4618      	mov	r0, r3
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	4413      	add	r3, r2
 800a576:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7f9 fa10 	bl	800399e <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a57e:	4602      	mov	r2, r0
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4413      	add	r3, r2
  }
 800a584:	4618      	mov	r0, r3
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3304      	adds	r3, #4
  }
 800a598:	4618      	mov	r0, r3
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800a5a4:	b490      	push	{r4, r7}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800a5ae:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bc90      	pop	{r4, r7}
 800a5bc:	4770      	bx	lr
	...

0800a5c0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	4a05      	ldr	r2, [pc, #20]	; (800a5e0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fd fdcb 	bl	800816c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	08017bb4 	.word	0x08017bb4

0800a5e4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff ffe7 	bl	800a5c0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800a5f2:	2108      	movs	r1, #8
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f007 f8de 	bl	80117b6 <_ZdlPvj>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 800a604:	b580      	push	{r7, lr}
 800a606:	b0c4      	sub	sp, #272	; 0x110
 800a608:	af00      	add	r7, sp, #0
 800a60a:	f107 030c 	add.w	r3, r7, #12
 800a60e:	6018      	str	r0, [r3, #0]
 800a610:	f107 0308 	add.w	r3, r7, #8
 800a614:	6019      	str	r1, [r3, #0]
 800a616:	1d3b      	adds	r3, r7, #4
 800a618:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800a61a:	1d3b      	adds	r3, r7, #4
 800a61c:	f107 0208 	add.w	r2, r7, #8
 800a620:	f107 0010 	add.w	r0, r7, #16
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6812      	ldr	r2, [r2, #0]
 800a628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a62c:	f000 ffa0 	bl	800b570 <MicroVsnprintf>
  DebugLog(log_buffer);
 800a630:	f107 0310 	add.w	r3, r7, #16
 800a634:	4618      	mov	r0, r3
 800a636:	f7f6 fd69 	bl	800110c <DebugLog>
  DebugLog("\r\n");
 800a63a:	4804      	ldr	r0, [pc, #16]	; (800a64c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x48>)
 800a63c:	f7f6 fd66 	bl	800110c <DebugLog>
#endif
  return 0;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	0801618c 	.word	0x0801618c

0800a650 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>:
  // comes from.
  virtual uint32_t BeginEvent(const char* tag, EventType event_type,
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
 800a650:	b5b0      	push	{r4, r5, r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af04      	add	r7, sp, #16
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3308      	adds	r3, #8
 800a662:	681d      	ldr	r5, [r3, #0]
 800a664:	f04f 0300 	mov.w	r3, #0
 800a668:	f04f 0400 	mov.w	r4, #0
 800a66c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a670:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a674:	e9cd 3400 	strd	r3, r4, [sp]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	68b9      	ldr	r1, [r7, #8]
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	47a8      	blx	r5
 800a680:	4603      	mov	r3, r0
  }
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bdb0      	pop	{r4, r5, r7, pc}

0800a68a <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>:
// of the object and ends when the object goes out of scope.
// The lifetime of tag should be at least the lifetime of `profiler`.
// `profiler` may be null, in which case nothing is profiled.
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
 800a68a:	b590      	push	{r4, r7, lr}
 800a68c:	b087      	sub	sp, #28
 800a68e:	af02      	add	r7, sp, #8
 800a690:	60f8      	str	r0, [r7, #12]
 800a692:	60b9      	str	r1, [r7, #8]
 800a694:	607a      	str	r2, [r7, #4]
 800a696:	603b      	str	r3, [r7, #0]
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	605a      	str	r2, [r3, #4]
    if (profiler) {
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00c      	beq.n	800a6c4 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx+0x3a>
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a6b2:	e9cd 3400 	strd	r3, r4, [sp]
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	f7ff ffc9 	bl	800a650 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	605a      	str	r2, [r3, #4]
    }
  }
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd90      	pop	{r4, r7, pc}

0800a6ce <_ZN6tflite13ScopedProfileD1Ev>:

  ~ScopedProfile() {
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
    if (profiler_) {
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00a      	beq.n	800a6f4 <_ZN6tflite13ScopedProfileD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3310      	adds	r3, #16
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	6852      	ldr	r2, [r2, #4]
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4798      	blx	r3
    }
  }
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>:
  uint32_t event_handle_;
};

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
 800a6fe:	b590      	push	{r4, r7, lr}
 800a700:	b087      	sub	sp, #28
 800a702:	af02      	add	r7, sp, #8
 800a704:	60f8      	str	r0, [r7, #12]
 800a706:	60b9      	str	r1, [r7, #8]
 800a708:	607a      	str	r2, [r7, #4]
 800a70a:	603b      	str	r3, [r7, #0]
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	f04f 0400 	mov.w	r4, #0
 800a714:	e9cd 3400 	strd	r3, r4, [sp]
 800a718:	2302      	movs	r3, #2
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	68b9      	ldr	r1, [r7, #8]
 800a71e:	f7ff ffb4 	bl	800a68a <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4618      	mov	r0, r3
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd90      	pop	{r4, r7, pc}

0800a72c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fd fc8a 	bl	8008052 <_ZNK6tflite8SubGraph6inputsEv>
 800a73e:	4603      	mov	r3, r0
 800a740:	4618      	mov	r0, r3
 800a742:	f7fd fb9a 	bl	8007e7a <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800a746:	4603      	mov	r3, r0
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fd fc78 	bl	8008052 <_ZNK6tflite8SubGraph6inputsEv>
 800a762:	4603      	mov	r3, r0
  }
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fd fc78 	bl	800806e <_ZNK6tflite8SubGraph7outputsEv>
 800a77e:	4603      	mov	r3, r0
 800a780:	4618      	mov	r0, r3
 800a782:	f7fd fb7a 	bl	8007e7a <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800a786:	4603      	mov	r3, r0
 800a788:	4618      	mov	r0, r3
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fd fc66 	bl	800806e <_ZNK6tflite8SubGraph7outputsEv>
 800a7a2:	4603      	mov	r3, r0
  }
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d102      	bne.n	800a7c2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	e006      	b.n	800a7d0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fd fb79 	bl	8007ec0 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a7ce:	4603      	mov	r3, r0
  }
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>:

}  // namespace

namespace internal {

ContextHelper::ContextHelper(ErrorReporter* error_reporter,
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
 800a7e4:	603b      	str	r3, [r7, #0]
                             MicroAllocator* allocator, const Model* model)
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	605a      	str	r2, [r3, #4]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	609a      	str	r2, [r3, #8]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	60da      	str	r2, [r3, #12]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	611a      	str	r2, [r3, #16]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextj>:

void* ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                              size_t bytes) {
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 800a820:	681a      	ldr	r2, [r3, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	330c      	adds	r3, #12
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	4610      	mov	r0, r2
 800a832:	4798      	blx	r3
 800a834:	4603      	mov	r3, r0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 800a83e:	b580      	push	{r7, lr}
 800a840:	b086      	sub	sp, #24
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(bytes, buffer_idx);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	68b9      	ldr	r1, [r7, #8]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe fb57 	bl	8008f0c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>
 800a85e:	4603      	mov	r3, r0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	60fb      	str	r3, [r7, #12]
  ScratchBufferHandle* handle = helper->scratch_buffer_handles_ + buffer_idx;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	691a      	ldr	r2, [r3, #16]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	60bb      	str	r3, [r7, #8]
  return handle->data;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	681b      	ldr	r3, [r3, #0]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3714      	adds	r7, #20
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 800a894:	b40e      	push	{r1, r2, r3}
 800a896:	b580      	push	{r7, lr}
 800a898:	b085      	sub	sp, #20
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 800a8a4:	f107 0320 	add.w	r3, r7, #32
 800a8a8:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6858      	ldr	r0, [r3, #4]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	69f9      	ldr	r1, [r7, #28]
 800a8bc:	4798      	blx	r3
  va_end(args);
#endif
}
 800a8be:	bf00      	nop
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8c8:	b003      	add	sp, #12
 800a8ca:	4770      	bx	lr

0800a8cc <_ZN6tflite8internal13ContextHelper9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* ContextHelper::GetTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 800a8cc:	b590      	push	{r4, r7, lr}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	60fb      	str	r3, [r7, #12]
  return helper->allocator_->AllocateTempTfLiteTensor(
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
      helper->model_, helper->eval_tensors_, tensor_idx);
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	681c      	ldr	r4, [r3, #0]
  return helper->allocator_->AllocateTempTfLiteTensor(
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6899      	ldr	r1, [r3, #8]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	68da      	ldr	r2, [r3, #12]
      helper->model_, helper->eval_tensors_, tensor_idx);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	47a0      	blx	r4
 800a8f6:	4603      	mov	r3, r0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd90      	pop	{r4, r7, pc}

0800a900 <_ZN6tflite8internal13ContextHelper13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* ContextHelper::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(context->impl_);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	60fb      	str	r3, [r7, #12]
  return &helper->eval_tensors_[tensor_idx];
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	68d9      	ldr	r1, [r3, #12]
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	4613      	mov	r3, r2
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	440b      	add	r3, r1
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>:

void ContextHelper::SetTfLiteEvalTensors(TfLiteEvalTensor* eval_tensors) {
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  eval_tensors_ = eval_tensors;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	60da      	str	r2, [r3, #12]
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <_ZN6tflite8internal13ContextHelper23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:

void ContextHelper::SetScratchBufferHandles(
    ScratchBufferHandle* scratch_buffer_handles) {
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  scratch_buffer_handles_ = scratch_buffer_handles;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	683a      	ldr	r2, [r7, #0]
 800a956:	611a      	str	r2, [r3, #16]
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
 800a970:	603b      	str	r3, [r7, #0]
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      eval_tensors_(nullptr),
      context_helper_(error_reporter_, &allocator_, model),
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	605a      	str	r2, [r3, #4]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	609a      	str	r2, [r3, #8]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	69fa      	ldr	r2, [r7, #28]
 800a988:	60da      	str	r2, [r3, #12]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	3310      	adds	r3, #16
 800a98e:	2258      	movs	r2, #88	; 0x58
 800a990:	2100      	movs	r1, #0
 800a992:	4618      	mov	r0, r3
 800a994:	f007 faaa 	bl	8011eec <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800a998:	69fa      	ldr	r2, [r7, #28]
 800a99a:	69b9      	ldr	r1, [r7, #24]
 800a99c:	6838      	ldr	r0, [r7, #0]
 800a99e:	f7fe f999 	bl	8008cd4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800a9a2:	4602      	mov	r2, r0
      output_tensor_(nullptr) {
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	669a      	str	r2, [r3, #104]	; 0x68
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	671a      	str	r2, [r3, #112]	; 0x70
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	675a      	str	r2, [r3, #116]	; 0x74
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	679a      	str	r2, [r3, #120]	; 0x78
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	68d9      	ldr	r1, [r3, #12]
      context_helper_(error_reporter_, &allocator_, model),
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
      output_tensor_(nullptr) {
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f7ff fefd 	bl	800a7d8 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 800a9ee:	6a39      	ldr	r1, [r7, #32]
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 f84d 	bl	800aa90 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d03a      	beq.n	800aa86 <_ZN6tflite16MicroInterpreterD1Ev+0x86>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800aa10:	2300      	movs	r3, #0
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fd fb36 	bl	800808a <_ZNK6tflite8SubGraph9operatorsEv>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff f9e3 	bl	8009dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800aa26:	4602      	mov	r2, r0
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	bf34      	ite	cc
 800aa2e:	2301      	movcc	r3, #1
 800aa30:	2300      	movcs	r3, #0
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d026      	beq.n	800aa86 <_ZN6tflite16MicroInterpreterD1Ev+0x86>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6819      	ldr	r1, [r3, #0]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	4413      	add	r3, r2
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	440b      	add	r3, r1
 800aa48:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6819      	ldr	r1, [r3, #0]
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	4613      	mov	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4413      	add	r3, r2
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00c      	beq.n	800aa7e <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d008      	beq.n	800aa7e <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
        registration->free(&context_, node->user_data);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	f102 0010 	add.w	r0, r2, #16
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	6912      	ldr	r2, [r2, #16]
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	3301      	adds	r3, #1
 800aa82:	617b      	str	r3, [r7, #20]
 800aa84:	e7c6      	b.n	800aa14 <_ZN6tflite16MicroInterpreterD1Ev+0x14>
      }
    }
  }
}
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fd fb3a 	bl	8008118 <_ZNK6tflite5Model9subgraphsEv>
 800aaa4:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f7ff fa08 	bl	8009ebc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	bf14      	ite	ne
 800aab2:	2301      	movne	r3, #1
 800aab4:	2300      	moveq	r3, #0
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00a      	beq.n	800aad2 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	4915      	ldr	r1, [pc, #84]	; (800ab18 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x88>)
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7f8 fa2a 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return;
 800aad0:	e01e      	b.n	800ab10 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x80>
  }
  subgraph_ = (*subgraphs)[0];
 800aad2:	2100      	movs	r1, #0
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f7ff fa8d 	bl	8009ff4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800aada:	4602      	mov	r2, r0
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	671a      	str	r2, [r3, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a0b      	ldr	r2, [pc, #44]	; (800ab1c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x8c>)
 800aaee:	625a      	str	r2, [r3, #36]	; 0x24
  context_.GetTensor = context_helper_.GetTensor;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a0b      	ldr	r2, [pc, #44]	; (800ab20 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x90>)
 800aaf4:	661a      	str	r2, [r3, #96]	; 0x60
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a0a      	ldr	r2, [pc, #40]	; (800ab24 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x94>)
 800aafa:	665a      	str	r2, [r3, #100]	; 0x64
  context_.recommended_num_threads = 1;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	683a      	ldr	r2, [r7, #0]
 800ab06:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	080167b8 	.word	0x080167b8
 800ab1c:	0800a895 	.word	0x0800a895
 800ab20:	0800a8cd 	.word	0x0800a8cd
 800ab24:	0800a901 	.word	0x0800a901

0800ab28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800ab28:	b590      	push	{r4, r7, lr}
 800ab2a:	b091      	sub	sp, #68	; 0x44
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	6078      	str	r0, [r7, #4]
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6859      	ldr	r1, [r3, #4]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	689a      	ldr	r2, [r3, #8]
 800ab3c:	687c      	ldr	r4, [r7, #4]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3374      	adds	r3, #116	; 0x74
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	4623      	mov	r3, r4
 800ab46:	f7fe f915 	bl	8008d74 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>
 800ab4a:	4603      	mov	r3, r0
                                      &node_and_registrations_,
                                      &eval_tensors_) != kTfLiteOk) {
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	bf14      	ite	ne
 800ab50:	2301      	movne	r3, #1
 800ab52:	2300      	moveq	r3, #0
 800ab54:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00b      	beq.n	800ab72 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	497f      	ldr	r1, [pc, #508]	; (800ad5c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x234>)
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7f8 f9db 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return kTfLiteError;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e0f0      	b.n	800ad54 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>

  // Update the pointer now that TfLiteEvalTensor allocation has completed on
  // the context helper.
  // TODO(b/16157777): This call would not be needed if ContextHelper rolled
  // into the interpreter.
  context_helper_.SetTfLiteEvalTensors(eval_tensors_);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	4610      	mov	r0, r2
 800ab80:	f7ff fed4 	bl	800a92c <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>
  context_.tensors_size = subgraph_->tensors()->size();
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fd fa54 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff f8f7 	bl	8009d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800ab96:	4602      	mov	r2, r0
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	611a      	str	r2, [r3, #16]
      }
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a70      	ldr	r2, [pc, #448]	; (800ad60 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x238>)
 800aba0:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800abae:	2300      	movs	r3, #0
 800abb0:	637b      	str	r3, [r7, #52]	; 0x34
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fd fa67 	bl	800808a <_ZNK6tflite8SubGraph9operatorsEv>
 800abbc:	4603      	mov	r3, r0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7ff f914 	bl	8009dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800abc4:	4602      	mov	r2, r0
 800abc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc8:	4293      	cmp	r3, r2
 800abca:	bf34      	ite	cc
 800abcc:	2301      	movcc	r3, #1
 800abce:	2300      	movcs	r3, #0
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d035      	beq.n	800ac42 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
    auto* node = &(node_and_registrations_[i].node);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6819      	ldr	r1, [r3, #0]
 800abda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abdc:	4613      	mov	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	00db      	lsls	r3, r3, #3
 800abe4:	440b      	add	r3, r1
 800abe6:	617b      	str	r3, [r7, #20]
    auto* registration = node_and_registrations_[i].registration;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6819      	ldr	r1, [r3, #0]
 800abec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abee:	4613      	mov	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	00db      	lsls	r3, r3, #3
 800abf6:	440b      	add	r3, r1
 800abf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfa:	613b      	str	r3, [r7, #16]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	2b20      	cmp	r3, #32
 800ac02:	d106      	bne.n	800ac12 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xea>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	62fb      	str	r3, [r7, #44]	; 0x2c
      init_data_size = node->custom_initial_data_size;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ac10:	e004      	b.n	800ac1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
      init_data_size = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (registration->init) {
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00a      	beq.n	800ac3a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x112>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	f102 0010 	add.w	r0, r2, #16
 800ac2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac32:	4798      	blx	r3
 800ac34:	4602      	mov	r2, r0
      node->user_data =
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800ac3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac40:	e7b7      	b.n	800abb2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x8a>
    }
  }

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena =
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a47      	ldr	r2, [pc, #284]	; (800ad64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x23c>)
 800ac46:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800ac48:	2300      	movs	r3, #0
 800ac4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fd fa1a 	bl	800808a <_ZNK6tflite8SubGraph9operatorsEv>
 800ac56:	4603      	mov	r3, r0
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7ff f8c7 	bl	8009dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac62:	4293      	cmp	r3, r2
 800ac64:	bf34      	ite	cc
 800ac66:	2301      	movcc	r3, #1
 800ac68:	2300      	movcs	r3, #0
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d03c      	beq.n	800acea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    auto* node = &(node_and_registrations_[i].node);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac76:	4613      	mov	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	440b      	add	r3, r1
 800ac80:	623b      	str	r3, [r7, #32]
    auto* registration = node_and_registrations_[i].registration;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6819      	ldr	r1, [r3, #0]
 800ac86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac88:	4613      	mov	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	00db      	lsls	r3, r3, #3
 800ac90:	440b      	add	r3, r1
 800ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac94:	61fb      	str	r3, [r7, #28]
    if (registration->prepare) {
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d01a      	beq.n	800acd4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	3210      	adds	r2, #16
 800aca6:	6a39      	ldr	r1, [r7, #32]
 800aca8:	4610      	mov	r0, r2
 800acaa:	4798      	blx	r3
 800acac:	4603      	mov	r3, r0
 800acae:	76fb      	strb	r3, [r7, #27]
      if (prepare_status != kTfLiteOk) {
 800acb0:	7efb      	ldrb	r3, [r7, #27]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00e      	beq.n	800acd4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
        TF_LITE_REPORT_ERROR(
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68dc      	ldr	r4, [r3, #12]
 800acba:	69f8      	ldr	r0, [r7, #28]
 800acbc:	f7ff fd76 	bl	800a7ac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800acc0:	4602      	mov	r2, r0
 800acc2:	7efb      	ldrb	r3, [r7, #27]
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	4927      	ldr	r1, [pc, #156]	; (800ad68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x240>)
 800acca:	4620      	mov	r0, r4
 800accc:	f7f8 f926 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e03f      	b.n	800ad54 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>
      }
    }
    allocator_.FinishPrepareNodeAllocations(/*node_id=*/i);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acda:	4611      	mov	r1, r2
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fe f967 	bl	8008fb0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	3301      	adds	r3, #1
 800ace6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ace8:	e7b0      	b.n	800ac4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x124>
  }

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a1c      	ldr	r2, [pc, #112]	; (800ad6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x244>)
 800acfa:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6859      	ldr	r1, [r3, #4]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3378      	adds	r3, #120	; 0x78
 800ad0c:	f7fe f88e 	bl	8008e2c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1f6>
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
 800ad1c:	e01a      	b.n	800ad54 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>
                    allocator_.FinishModelAllocation(model_, eval_tensors_,
                                                     &scratch_buffer_handles_));
  // TODO(b/16157777): Remove this when ContextHelper is rolled into this class.
  context_helper_.SetScratchBufferHandles(scratch_buffer_handles_);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	f7ff fe0c 	bl	800a948 <_ZN6tflite8internal13ContextHelper23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f995 	bl	800b060 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x222>
 800ad44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad48:	e004      	b.n	800ad54 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>

  tensors_allocated_ = true;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  return kTfLiteOk;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	373c      	adds	r7, #60	; 0x3c
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd90      	pop	{r4, r7, pc}
 800ad5c:	080167e4 	.word	0x080167e4
 800ad60:	0800a813 	.word	0x0800a813
 800ad64:	0800a83f 	.word	0x0800a83f
 800ad68:	08016808 	.word	0x08016808
 800ad6c:	0800a869 	.word	0x0800a869

0800ad70 <_ZN6tflite21ScopedOperatorProfileD1Ev>:
class ScopedOperatorProfile : public ScopedProfile {
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7ff fca7 	bl	800a6ce <_ZN6tflite13ScopedProfileD1Ev>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800ad8c:	b5b0      	push	{r4, r5, r7, lr}
 800ad8e:	b08c      	sub	sp, #48	; 0x30
 800ad90:	af02      	add	r7, sp, #8
 800ad92:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d007      	beq.n	800adae <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	4947      	ldr	r1, [pc, #284]	; (800aec0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x134>)
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f8 f8b9 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800adaa:	2401      	movs	r4, #1
 800adac:	e082      	b.n	800aeb4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800adb4:	f083 0301 	eor.w	r3, r3, #1
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d009      	beq.n	800add2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7ff feb2 	bl	800ab28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800adc4:	4603      	mov	r3, r0
 800adc6:	75bb      	strb	r3, [r7, #22]
 800adc8:	7dbb      	ldrb	r3, [r7, #22]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800adce:	7dbc      	ldrb	r4, [r7, #22]
 800add0:	e070      	b.n	800aeb4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
  }

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800add2:	2300      	movs	r3, #0
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adda:	4618      	mov	r0, r3
 800addc:	f7fd f955 	bl	800808a <_ZNK6tflite8SubGraph9operatorsEv>
 800ade0:	4603      	mov	r3, r0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff f802 	bl	8009dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800ade8:	4602      	mov	r2, r0
 800adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adec:	4293      	cmp	r3, r2
 800adee:	bf34      	ite	cc
 800adf0:	2301      	movcc	r3, #1
 800adf2:	2300      	movcs	r3, #0
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d05b      	beq.n	800aeb2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x126>
    auto* node = &(node_and_registrations_[i].node);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6819      	ldr	r1, [r3, #0]
 800adfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae00:	4613      	mov	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4413      	add	r3, r2
 800ae06:	00db      	lsls	r3, r3, #3
 800ae08:	440b      	add	r3, r1
 800ae0a:	623b      	str	r3, [r7, #32]
    auto* registration = node_and_registrations_[i].registration;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6819      	ldr	r1, [r3, #0]
 800ae10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae12:	4613      	mov	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	440b      	add	r3, r1
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1e:	61fb      	str	r3, [r7, #28]

    if (registration->invoke) {
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d040      	beq.n	800aeaa <_ZN6tflite16MicroInterpreter6InvokeEv+0x11e>
      TfLiteStatus invoke_status;
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by
      // ScopedOperatorProfile.
      tflite::Profiler* profiler =
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2c:	61bb      	str	r3, [r7, #24]
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
 800ae2e:	69f8      	ldr	r0, [r7, #28]
 800ae30:	f7ff fcbc 	bl	800a7ac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800ae34:	4602      	mov	r2, r0
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	f107 000c 	add.w	r0, r7, #12
 800ae3c:	69b9      	ldr	r1, [r7, #24]
 800ae3e:	f7ff fc5e 	bl	800a6fe <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>
#endif
      invoke_status = registration->invoke(&context_, node);
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	3210      	adds	r2, #16
 800ae4a:	6a39      	ldr	r1, [r7, #32]
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	4798      	blx	r3
 800ae50:	4603      	mov	r3, r0
 800ae52:	75fb      	strb	r3, [r7, #23]

      // All TfLiteTensor structs used in the kernel are allocated from temp
      // memory in the allocator. This creates a chain of allocations in the
      // temp section. The call below resets the chain of allocations to
      // prepare for the next call.
      allocator_.ResetTempAllocations();
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3308      	adds	r3, #8
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4610      	mov	r0, r2
 800ae64:	4798      	blx	r3

      if (invoke_status == kTfLiteError) {
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d10f      	bne.n	800ae8c <_ZN6tflite16MicroInterpreter6InvokeEv+0x100>
        TF_LITE_REPORT_ERROR(
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	68dc      	ldr	r4, [r3, #12]
 800ae70:	69f8      	ldr	r0, [r7, #28]
 800ae72:	f7ff fc9b 	bl	800a7ac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800ae76:	4602      	mov	r2, r0
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7e:	4911      	ldr	r1, [pc, #68]	; (800aec4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x138>)
 800ae80:	4620      	mov	r0, r4
 800ae82:	f7f8 f84b 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %d) failed to invoke with status %d",
            OpNameFromRegistration(registration), i, invoke_status);
        return kTfLiteError;
 800ae86:	2401      	movs	r4, #1
 800ae88:	2500      	movs	r5, #0
 800ae8a:	e006      	b.n	800ae9a <_ZN6tflite16MicroInterpreter6InvokeEv+0x10e>
      } else if (invoke_status != kTfLiteOk) {
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <_ZN6tflite16MicroInterpreter6InvokeEv+0x10c>
        return invoke_status;
 800ae92:	7dfc      	ldrb	r4, [r7, #23]
 800ae94:	2500      	movs	r5, #0
 800ae96:	e000      	b.n	800ae9a <_ZN6tflite16MicroInterpreter6InvokeEv+0x10e>
 800ae98:	2501      	movs	r5, #1
 800ae9a:	f107 030c 	add.w	r3, r7, #12
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff ff66 	bl	800ad70 <_ZN6tflite21ScopedOperatorProfileD1Ev>
 800aea4:	2d01      	cmp	r5, #1
 800aea6:	d105      	bne.n	800aeb4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
          profiler, OpNameFromRegistration(registration), i);
 800aea8:	bf00      	nop
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	3301      	adds	r3, #1
 800aeae:	627b      	str	r3, [r7, #36]	; 0x24
 800aeb0:	e791      	b.n	800add6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x4a>
      }
    }
  }
  return kTfLiteOk;
 800aeb2:	2400      	movs	r4, #0
 800aeb4:	4623      	mov	r3, r4
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3728      	adds	r7, #40	; 0x28
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bdb0      	pop	{r4, r5, r7, pc}
 800aebe:	bf00      	nop
 800aec0:	08016840 	.word	0x08016840
 800aec4:	08016870 	.word	0x08016870

0800aec8 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800aec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
  const size_t length = inputs_size();
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f7ff fc2a 	bl	800a72c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800aed8:	6178      	str	r0, [r7, #20]
  if (index >= length) {
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d308      	bcc.n	800aef4 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	68d8      	ldr	r0, [r3, #12]
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	4928      	ldr	r1, [pc, #160]	; (800af8c <_ZN6tflite16MicroInterpreter5inputEj+0xc4>)
 800aeec:	f7f8 f816 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800aef0:	2300      	movs	r3, #0
 800aef2:	e046      	b.n	800af82 <_ZN6tflite16MicroInterpreter5inputEj+0xba>
  }
  if (index != 0) {
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d01f      	beq.n	800af3a <_ZN6tflite16MicroInterpreter5inputEj+0x72>
    TF_LITE_REPORT_ERROR(
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	4924      	ldr	r1, [pc, #144]	; (800af90 <_ZN6tflite16MicroInterpreter5inputEj+0xc8>)
 800af00:	4618      	mov	r0, r3
 800af02:	f7f8 f80b 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Input tensors not at index 0 are allocated from the "
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                                     inputs().Get(index));
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681c      	ldr	r4, [r3, #0]
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	685e      	ldr	r6, [r3, #4]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af1a:	607b      	str	r3, [r7, #4]
                                                     inputs().Get(index));
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f7ff fc17 	bl	800a750 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800af22:	4603      	mov	r3, r0
 800af24:	68b9      	ldr	r1, [r7, #8]
 800af26:	4618      	mov	r0, r3
 800af28:	f7f8 fe10 	bl	8003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>
 800af2c:	4603      	mov	r3, r0
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	4631      	mov	r1, r6
 800af32:	4628      	mov	r0, r5
 800af34:	47a0      	blx	r4
 800af36:	4603      	mov	r3, r0
 800af38:	e023      	b.n	800af82 <_ZN6tflite16MicroInterpreter5inputEj+0xba>
  }
  if (input_tensor_ == nullptr) {
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af40:	2b00      	cmp	r3, #0
 800af42:	d11b      	bne.n	800af7c <_ZN6tflite16MicroInterpreter5inputEj+0xb4>
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, inputs().Get(index));
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681c      	ldr	r4, [r3, #0]
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	685e      	ldr	r6, [r3, #4]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af58:	607b      	str	r3, [r7, #4]
        model_, eval_tensors_, inputs().Get(index));
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f7ff fbf8 	bl	800a750 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800af60:	4603      	mov	r3, r0
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	4618      	mov	r0, r3
 800af66:	f7f8 fdf1 	bl	8003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>
 800af6a:	4603      	mov	r3, r0
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	4631      	mov	r1, r6
 800af70:	4628      	mov	r0, r5
 800af72:	47a0      	blx	r4
 800af74:	4602      	mov	r2, r0
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
  return input_tensor_;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 800af82:	4618      	mov	r0, r3
 800af84:	371c      	adds	r7, #28
 800af86:	46bd      	mov	sp, r7
 800af88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af8a:	bf00      	nop
 800af8c:	080168a4 	.word	0x080168a4
 800af90:	080168d0 	.word	0x080168d0

0800af94 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800af94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af96:	b087      	sub	sp, #28
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
  const size_t length = outputs_size();
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f7ff fbe4 	bl	800a76c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800afa4:	6178      	str	r0, [r7, #20]
  if (index >= length) {
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d308      	bcc.n	800afc0 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	68d8      	ldr	r0, [r3, #12]
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	4928      	ldr	r1, [pc, #160]	; (800b058 <_ZN6tflite16MicroInterpreter6outputEj+0xc4>)
 800afb8:	f7f7 ffb0 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800afbc:	2300      	movs	r3, #0
 800afbe:	e046      	b.n	800b04e <_ZN6tflite16MicroInterpreter6outputEj+0xba>
  }
  if (index != 0) {
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d01f      	beq.n	800b006 <_ZN6tflite16MicroInterpreter6outputEj+0x72>
    TF_LITE_REPORT_ERROR(
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	4924      	ldr	r1, [pc, #144]	; (800b05c <_ZN6tflite16MicroInterpreter6outputEj+0xc8>)
 800afcc:	4618      	mov	r0, r3
 800afce:	f7f7 ffa5 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Output tensors not at index 0 are allocated from the "
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                                     outputs().Get(index));
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681c      	ldr	r4, [r3, #0]
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	685e      	ldr	r6, [r3, #4]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afe6:	607b      	str	r3, [r7, #4]
                                                     outputs().Get(index));
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff fbd1 	bl	800a790 <_ZNK6tflite16MicroInterpreter7outputsEv>
 800afee:	4603      	mov	r3, r0
 800aff0:	68b9      	ldr	r1, [r7, #8]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7f8 fdaa 	bl	8003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>
 800aff8:	4603      	mov	r3, r0
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	4631      	mov	r1, r6
 800affe:	4628      	mov	r0, r5
 800b000:	47a0      	blx	r4
 800b002:	4603      	mov	r3, r0
 800b004:	e023      	b.n	800b04e <_ZN6tflite16MicroInterpreter6outputEj+0xba>
  }
  if (output_tensor_ == nullptr) {
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d11b      	bne.n	800b048 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>
    // TODO(b/162311891): Drop these allocations when the interpreter supports
    // handling buffers from TfLiteEvalTensor.
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, outputs().Get(index));
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	681c      	ldr	r4, [r3, #0]
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	685e      	ldr	r6, [r3, #4]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b024:	607b      	str	r3, [r7, #4]
        model_, eval_tensors_, outputs().Get(index));
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f7ff fbb2 	bl	800a790 <_ZNK6tflite16MicroInterpreter7outputsEv>
 800b02c:	4603      	mov	r3, r0
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	4618      	mov	r0, r3
 800b032:	f7f8 fd8b 	bl	8003b4c <_ZNK11flatbuffers6VectorIlE3GetEm>
 800b036:	4603      	mov	r3, r0
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47a0      	blx	r4
 800b040:	4602      	mov	r2, r0
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
  return output_tensor_;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
}
 800b04e:	4618      	mov	r0, r3
 800b050:	371c      	adds	r7, #28
 800b052:	46bd      	mov	sp, r7
 800b054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b056:	bf00      	nop
 800b058:	08016948 	.word	0x08016948
 800b05c:	08016974 	.word	0x08016974

0800b060 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
  }
  return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                   index);
}

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800b060:	b590      	push	{r4, r7, lr}
 800b062:	b089      	sub	sp, #36	; 0x24
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 800b068:	2300      	movs	r3, #0
 800b06a:	61fb      	str	r3, [r7, #28]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b070:	4618      	mov	r0, r3
 800b072:	f7fc ffe0 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 800b076:	4603      	mov	r3, r0
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fe fe83 	bl	8009d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800b07e:	4602      	mov	r2, r0
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	4293      	cmp	r3, r2
 800b084:	bf34      	ite	cc
 800b086:	2301      	movcc	r3, #1
 800b088:	2300      	movcs	r3, #0
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d053      	beq.n	800b138 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd8>
    auto* tensor = subgraph_->tensors()->Get(i);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b094:	4618      	mov	r0, r3
 800b096:	f7fc ffce 	bl	8008036 <_ZNK6tflite8SubGraph7tensorsEv>
 800b09a:	4603      	mov	r3, r0
 800b09c:	69f9      	ldr	r1, [r7, #28]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe fe7e 	bl	8009da0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800b0a4:	6178      	str	r0, [r7, #20]
    if (tensor->is_variable()) {
 800b0a6:	6978      	ldr	r0, [r7, #20]
 800b0a8:	f7fc ff78 	bl	8007f9c <_ZNK6tflite6Tensor11is_variableEv>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d03e      	beq.n	800b130 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd0>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800b0b6:	69fa      	ldr	r2, [r7, #28]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	440b      	add	r3, r1
 800b0c2:	f107 020c 	add.w	r2, r7, #12
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fc fe96 	bl	8007dfa <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	74fb      	strb	r3, [r7, #19]
 800b0d2:	7cfb      	ldrb	r3, [r7, #19]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x7c>
 800b0d8:	7cfb      	ldrb	r3, [r7, #19]
 800b0da:	e02e      	b.n	800b13a <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xda>
          TfLiteEvalTensorByteLength(&eval_tensors_[i], &buffer_size));

      int value = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	61bb      	str	r3, [r7, #24]
      if (tensor->type() == tflite::TensorType_INT8) {
 800b0e0:	6978      	ldr	r0, [r7, #20]
 800b0e2:	f7fc fd79 	bl	8007bd8 <_ZNK6tflite6Tensor4typeEv>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b09      	cmp	r3, #9
 800b0ea:	bf0c      	ite	eq
 800b0ec:	2301      	moveq	r3, #1
 800b0ee:	2300      	movne	r3, #0
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00e      	beq.n	800b114 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xb4>
        value = tensor->quantization()->zero_point()->Get(0);
 800b0f6:	6978      	ldr	r0, [r7, #20]
 800b0f8:	f7fc ff42 	bl	8007f80 <_ZNK6tflite6Tensor12quantizationEv>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fc ff12 	bl	8007f28 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800b104:	4603      	mov	r3, r0
 800b106:	2100      	movs	r1, #0
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fe fe13 	bl	8009d34 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800b10e:	4603      	mov	r3, r0
 800b110:	460c      	mov	r4, r1
 800b112:	61bb      	str	r3, [r7, #24]
      }
      memset(eval_tensors_[i].data.raw, value, buffer_size);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800b118:	69fa      	ldr	r2, [r7, #28]
 800b11a:	4613      	mov	r3, r2
 800b11c:	005b      	lsls	r3, r3, #1
 800b11e:	4413      	add	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	440b      	add	r3, r1
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	69b9      	ldr	r1, [r7, #24]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f006 fede 	bl	8011eec <memset>
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	3301      	adds	r3, #1
 800b134:	61fb      	str	r3, [r7, #28]
 800b136:	e799      	b.n	800b06c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xc>
    }
  }

  return kTfLiteOk;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3724      	adds	r7, #36	; 0x24
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd90      	pop	{r4, r7, pc}

0800b142 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800b142:	b480      	push	{r7}
 800b144:	b087      	sub	sp, #28
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	3b01      	subs	r3, #1
 800b154:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d20e      	bcs.n	800b17c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	1c5a      	adds	r2, r3, #1
 800b168:	617a      	str	r2, [r7, #20]
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	7812      	ldrb	r2, [r2, #0]
 800b16e:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	1e5a      	subs	r2, r3, #1
 800b174:	613a      	str	r2, [r7, #16]
 800b176:	7bfa      	ldrb	r2, [r7, #15]
 800b178:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800b17a:	e7ec      	b.n	800b156 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800b17c:	687b      	ldr	r3, [r7, #4]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	371c      	adds	r7, #28
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800b18a:	b480      	push	{r7}
 800b18c:	b087      	sub	sp, #28
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
  char* current = main;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800b1a8:	e7f7      	b.n	800b19a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00e      	beq.n	800b1da <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d20a      	bcs.n	800b1da <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	781a      	ldrb	r2, [r3, #0]
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	701a      	strb	r2, [r3, #0]
    ++current;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	617b      	str	r3, [r7, #20]
    ++to_append;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800b1d8:	e7ec      	b.n	800b1b4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	701a      	strb	r2, [r3, #0]
  return current;
 800b1e0:	697b      	ldr	r3, [r7, #20]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b088      	sub	sp, #32
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	60b9      	str	r1, [r7, #8]
 800b1f8:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	fbb3 f1f2 	udiv	r1, r3, r2
 800b206:	fb02 f201 	mul.w	r2, r2, r1
 800b20a:	1a9b      	subs	r3, r3, r2
 800b20c:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	2b09      	cmp	r3, #9
 800b212:	dc04      	bgt.n	800b21e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	3330      	adds	r3, #48	; 0x30
 800b21a:	77fb      	strb	r3, [r7, #31]
 800b21c:	e003      	b.n	800b226 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	b2db      	uxtb	r3, r3
 800b222:	3357      	adds	r3, #87	; 0x57
 800b224:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	60ba      	str	r2, [r7, #8]
 800b22c:	7ffa      	ldrb	r2, [r7, #31]
 800b22e:	701a      	strb	r2, [r3, #0]
    i /= base;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	fbb2 f3f3 	udiv	r3, r2, r3
 800b238:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d000      	beq.n	800b242 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800b240:	e7dd      	b.n	800b1fe <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2200      	movs	r2, #0
 800b246:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	69b8      	ldr	r0, [r7, #24]
 800b24c:	f7ff ff79 	bl	800b142 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800b250:	68bb      	ldr	r3, [r7, #8]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3720      	adds	r7, #32
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b084      	sub	sp, #16
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	da07      	bge.n	800b27e <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	603a      	str	r2, [r7, #0]
 800b274:	222d      	movs	r2, #45	; 0x2d
 800b276:	701a      	strb	r2, [r3, #0]
    u = -u;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	425b      	negs	r3, r3
 800b27c:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800b27e:	220a      	movs	r2, #10
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7ff ffb3 	bl	800b1ee <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800b288:	4603      	mov	r3, r0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800b292:	b580      	push	{r7, lr}
 800b294:	b090      	sub	sp, #64	; 0x40
 800b296:	af00      	add	r7, sp, #0
 800b298:	60f8      	str	r0, [r7, #12]
 800b29a:	60b9      	str	r1, [r7, #8]
 800b29c:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800b29e:	f107 0310 	add.w	r3, r7, #16
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f7ff ffd8 	bl	800b25a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800b2aa:	f107 0310 	add.w	r3, r7, #16
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	68b9      	ldr	r1, [r7, #8]
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f7ff ff69 	bl	800b18a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800b2b8:	4603      	mov	r3, r0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3740      	adds	r7, #64	; 0x40
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b090      	sub	sp, #64	; 0x40
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	60f8      	str	r0, [r7, #12]
 800b2ca:	60b9      	str	r1, [r7, #8]
 800b2cc:	607a      	str	r2, [r7, #4]
 800b2ce:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800b2d0:	f107 0310 	add.w	r3, r7, #16
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f7ff ff88 	bl	800b1ee <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800b2de:	f107 0310 	add.w	r3, r7, #16
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	68b9      	ldr	r1, [r7, #8]
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f7ff ff4f 	bl	800b18a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800b2ec:	4603      	mov	r3, r0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3740      	adds	r7, #64	; 0x40
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
	...

0800b2f8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800b2f8:	b590      	push	{r4, r7, lr}
 800b2fa:	b09b      	sub	sp, #108	; 0x6c
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	ed87 0a01 	vstr	s0, [r7, #4]
 800b302:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	332f      	adds	r3, #47	; 0x2f
 800b30c:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800b30e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b312:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800b314:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800b318:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800b31a:	2317      	movs	r3, #23
 800b31c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800b31e:	237f      	movs	r3, #127	; 0x7f
 800b320:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800b322:	4b6a      	ldr	r3, [pc, #424]	; (800b4cc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800b324:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	0ddb      	lsrs	r3, r3, #23
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800b332:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b33a:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	da05      	bge.n	800b34e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 800b342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b344:	222d      	movs	r2, #45	; 0x2d
 800b346:	701a      	strb	r2, [r3, #0]
    current += 1;
 800b348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b34a:	3301      	adds	r3, #1
 800b34c:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800b34e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b350:	2200      	movs	r2, #0
 800b352:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800b354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b356:	2b80      	cmp	r3, #128	; 0x80
 800b358:	d118      	bne.n	800b38c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10a      	bne.n	800b376 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 800b360:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	4a5a      	ldr	r2, [pc, #360]	; (800b4d0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800b368:	4619      	mov	r1, r3
 800b36a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b36c:	f7ff ff0d 	bl	800b18a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800b370:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800b372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b374:	e0a5      	b.n	800b4c2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800b376:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	4a55      	ldr	r2, [pc, #340]	; (800b4d4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800b37e:	4619      	mov	r1, r3
 800b380:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b382:	f7ff ff02 	bl	800b18a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800b386:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800b388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b38a:	e09a      	b.n	800b4c2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800b38c:	230d      	movs	r3, #13
 800b38e:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800b390:	4b51      	ldr	r3, [pc, #324]	; (800b4d8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800b392:	f107 040c 	add.w	r4, r7, #12
 800b396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b398:	c407      	stmia	r4!, {r0, r1, r2}
 800b39a:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800b39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39e:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3a6:	2b0c      	cmp	r3, #12
 800b3a8:	dc0f      	bgt.n	800b3ca <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800b3aa:	f107 020c 	add.w	r2, r7, #12
 800b3ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f993 3000 	ldrsb.w	r3, [r3]
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ba:	40d3      	lsrs	r3, r2
 800b3bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b3be:	4413      	add	r3, r2
 800b3c0:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800b3c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3c8:	e7ec      	b.n	800b3a4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800b3ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3cc:	2231      	movs	r2, #49	; 0x31
 800b3ce:	701a      	strb	r2, [r3, #0]
  current += 1;
 800b3d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800b3d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3d8:	222e      	movs	r2, #46	; 0x2e
 800b3da:	701a      	strb	r2, [r3, #0]
  current += 1;
 800b3dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3de:	3301      	adds	r3, #1
 800b3e0:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800b3e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800b3e8:	2307      	movs	r3, #7
 800b3ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800b3ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	2b07      	cmp	r3, #7
 800b3f4:	dc01      	bgt.n	800b3fa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800b3f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3f8:	e063      	b.n	800b4c2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b400:	2b06      	cmp	r3, #6
 800b402:	dc08      	bgt.n	800b416 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 800b404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b406:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b408:	4413      	add	r3, r2
 800b40a:	2230      	movs	r2, #48	; 0x30
 800b40c:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800b40e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b410:	3301      	adds	r3, #1
 800b412:	65bb      	str	r3, [r7, #88]	; 0x58
 800b414:	e7f3      	b.n	800b3fe <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800b416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b418:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800b41a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b41c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b41e:	1ad1      	subs	r1, r2, r3
 800b420:	230a      	movs	r3, #10
 800b422:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b424:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b426:	f7ff ff4c 	bl	800b2c2 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800b42a:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800b42c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	f1c3 0307 	rsb	r3, r3, #7
 800b43a:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800b43c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b43e:	2230      	movs	r2, #48	; 0x30
 800b440:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 800b442:	6a3b      	ldr	r3, [r7, #32]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d018      	beq.n	800b47a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800b448:	2300      	movs	r3, #0
 800b44a:	657b      	str	r3, [r7, #84]	; 0x54
 800b44c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b450:	429a      	cmp	r2, r3
 800b452:	da0f      	bge.n	800b474 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 800b454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b456:	3b01      	subs	r3, #1
 800b458:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b45e:	4413      	add	r3, r2
 800b460:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b462:	7812      	ldrb	r2, [r2, #0]
 800b464:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800b466:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b468:	2230      	movs	r2, #48	; 0x30
 800b46a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800b46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b46e:	3301      	adds	r3, #1
 800b470:	657b      	str	r3, [r7, #84]	; 0x54
 800b472:	e7eb      	b.n	800b44c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 800b474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b476:	3307      	adds	r3, #7
 800b478:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800b47a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b47c:	3b01      	subs	r3, #1
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b30      	cmp	r3, #48	; 0x30
 800b482:	d108      	bne.n	800b496 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 800b484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b486:	3b01      	subs	r3, #1
 800b488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d203      	bcs.n	800b496 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800b48e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b490:	3b01      	subs	r3, #1
 800b492:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800b494:	e7f1      	b.n	800b47a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800b496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b498:	2200      	movs	r2, #0
 800b49a:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800b49c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b49e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	4a0e      	ldr	r2, [pc, #56]	; (800b4dc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b4a8:	f7ff fe6f 	bl	800b18a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800b4ac:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800b4ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b4ba:	f7ff feea 	bl	800b292 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800b4be:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800b4c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	376c      	adds	r7, #108	; 0x6c
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd90      	pop	{r4, r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	007fffff 	.word	0x007fffff
 800b4d0:	08016a44 	.word	0x08016a44
 800b4d4:	08016a48 	.word	0x08016a48
 800b4d8:	08016a50 	.word	0x08016a50
 800b4dc:	08016a4c 	.word	0x08016a4c

0800b4e0 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800b4ea:	6879      	ldr	r1, [r7, #4]
 800b4ec:	6838      	ldr	r0, [r7, #0]
 800b4ee:	f7ff feb4 	bl	800b25a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	1ad3      	subs	r3, r2, r3
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800b502:	b580      	push	{r7, lr}
 800b504:	b082      	sub	sp, #8
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800b50c:	220a      	movs	r2, #10
 800b50e:	6879      	ldr	r1, [r7, #4]
 800b510:	6838      	ldr	r0, [r7, #0]
 800b512:	f7ff fe6c 	bl	800b1ee <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800b516:	4603      	mov	r3, r0
 800b518:	461a      	mov	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	1ad3      	subs	r3, r2, r3
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800b526:	b580      	push	{r7, lr}
 800b528:	b082      	sub	sp, #8
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800b530:	2210      	movs	r2, #16
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	6838      	ldr	r0, [r7, #0]
 800b536:	f7ff fe5a 	bl	800b1ee <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800b53a:	4603      	mov	r3, r0
 800b53c:	461a      	mov	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	1ad3      	subs	r3, r2, r3
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	ed97 0a00 	vldr	s0, [r7]
 800b55c:	f7ff fecc 	bl	800b2f8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800b560:	4603      	mov	r3, r0
 800b562:	461a      	mov	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	1ad3      	subs	r3, r2, r3
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800b570:	b5b0      	push	{r4, r5, r7, lr}
 800b572:	b08a      	sub	sp, #40	; 0x28
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
 800b57c:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	3b01      	subs	r3, #1
 800b58a:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 8109 	beq.w	800b7a8 <MicroVsnprintf+0x238>
 800b596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	f280 8104 	bge.w	800b7a8 <MicroVsnprintf+0x238>
    if (*current == '%') {
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b25      	cmp	r3, #37	; 0x25
 800b5a6:	f040 80f3 	bne.w	800b790 <MicroVsnprintf+0x220>
      current++;
 800b5aa:	6a3b      	ldr	r3, [r7, #32]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b66      	cmp	r3, #102	; 0x66
 800b5b6:	f000 8083 	beq.w	800b6c0 <MicroVsnprintf+0x150>
 800b5ba:	2b66      	cmp	r3, #102	; 0x66
 800b5bc:	dc05      	bgt.n	800b5ca <MicroVsnprintf+0x5a>
 800b5be:	2b25      	cmp	r3, #37	; 0x25
 800b5c0:	f000 80b4 	beq.w	800b72c <MicroVsnprintf+0x1bc>
 800b5c4:	2b64      	cmp	r3, #100	; 0x64
 800b5c6:	d008      	beq.n	800b5da <MicroVsnprintf+0x6a>
 800b5c8:	e0ed      	b.n	800b7a6 <MicroVsnprintf+0x236>
 800b5ca:	2b75      	cmp	r3, #117	; 0x75
 800b5cc:	d026      	beq.n	800b61c <MicroVsnprintf+0xac>
 800b5ce:	2b78      	cmp	r3, #120	; 0x78
 800b5d0:	d045      	beq.n	800b65e <MicroVsnprintf+0xee>
 800b5d2:	2b73      	cmp	r3, #115	; 0x73
 800b5d4:	f000 80b6 	beq.w	800b744 <MicroVsnprintf+0x1d4>
 800b5d8:	e0e5      	b.n	800b7a6 <MicroVsnprintf+0x236>
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	2b0a      	cmp	r3, #10
 800b5e2:	dc09      	bgt.n	800b5f8 <MicroVsnprintf+0x88>
            output[output_index++] = '\0';
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	627a      	str	r2, [r7, #36]	; 0x24
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	e0e0      	b.n	800b7ba <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	18d0      	adds	r0, r2, r3
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	1d1a      	adds	r2, r3, #4
 800b602:	603a      	str	r2, [r7, #0]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4619      	mov	r1, r3
 800b608:	f7ff ff6a 	bl	800b4e0 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800b60c:	4602      	mov	r2, r0
          output_index +=
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	4413      	add	r3, r2
 800b612:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	3301      	adds	r3, #1
 800b618:	623b      	str	r3, [r7, #32]
          break;
 800b61a:	e0c4      	b.n	800b7a6 <MicroVsnprintf+0x236>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	2b0a      	cmp	r3, #10
 800b624:	dc09      	bgt.n	800b63a <MicroVsnprintf+0xca>
            output[output_index++] = '\0';
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	1c5a      	adds	r2, r3, #1
 800b62a:	627a      	str	r2, [r7, #36]	; 0x24
 800b62c:	461a      	mov	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	4413      	add	r3, r2
 800b632:	2200      	movs	r2, #0
 800b634:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b638:	e0bf      	b.n	800b7ba <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	18d0      	adds	r0, r2, r3
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	1d1a      	adds	r2, r3, #4
 800b644:	603a      	str	r2, [r7, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4619      	mov	r1, r3
 800b64a:	f7ff ff5a 	bl	800b502 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800b64e:	4602      	mov	r2, r0
          output_index +=
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	4413      	add	r3, r2
 800b654:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	3301      	adds	r3, #1
 800b65a:	623b      	str	r3, [r7, #32]
          break;
 800b65c:	e0a3      	b.n	800b7a6 <MicroVsnprintf+0x236>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	2b09      	cmp	r3, #9
 800b666:	dc09      	bgt.n	800b67c <MicroVsnprintf+0x10c>
            output[output_index++] = '\0';
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	627a      	str	r2, [r7, #36]	; 0x24
 800b66e:	461a      	mov	r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	4413      	add	r3, r2
 800b674:	2200      	movs	r2, #0
 800b676:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67a:	e09e      	b.n	800b7ba <MicroVsnprintf+0x24a>
          }
          output[output_index++] = '0';
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	1c5a      	adds	r2, r3, #1
 800b680:	627a      	str	r2, [r7, #36]	; 0x24
 800b682:	461a      	mov	r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	4413      	add	r3, r2
 800b688:	2230      	movs	r2, #48	; 0x30
 800b68a:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68e:	1c5a      	adds	r2, r3, #1
 800b690:	627a      	str	r2, [r7, #36]	; 0x24
 800b692:	461a      	mov	r2, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4413      	add	r3, r2
 800b698:	2278      	movs	r2, #120	; 0x78
 800b69a:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	18d0      	adds	r0, r2, r3
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	1d1a      	adds	r2, r3, #4
 800b6a6:	603a      	str	r2, [r7, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	f7ff ff3b 	bl	800b526 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800b6b0:	4602      	mov	r2, r0
          output_index +=
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	4413      	add	r3, r2
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b6b8:	6a3b      	ldr	r3, [r7, #32]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	623b      	str	r3, [r7, #32]
          break;
 800b6be:	e072      	b.n	800b7a6 <MicroVsnprintf+0x236>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800b6c0:	69ba      	ldr	r2, [r7, #24]
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6ce:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800b6d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6da:	d509      	bpl.n	800b6f0 <MicroVsnprintf+0x180>
            output[output_index++] = '\0';
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	627a      	str	r2, [r7, #36]	; 0x24
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	e064      	b.n	800b7ba <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	18d5      	adds	r5, r2, r3
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	3307      	adds	r3, #7
 800b6fa:	f023 0307 	bic.w	r3, r3, #7
 800b6fe:	f103 0208 	add.w	r2, r3, #8
 800b702:	603a      	str	r2, [r7, #0]
 800b704:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b708:	4618      	mov	r0, r3
 800b70a:	4621      	mov	r1, r4
 800b70c:	f7f5 fa5c 	bl	8000bc8 <__aeabi_d2f>
 800b710:	4603      	mov	r3, r0
 800b712:	ee00 3a10 	vmov	s0, r3
 800b716:	4628      	mov	r0, r5
 800b718:	f7ff ff17 	bl	800b54a <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800b71c:	4602      	mov	r2, r0
          output_index +=
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	4413      	add	r3, r2
 800b722:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b724:	6a3b      	ldr	r3, [r7, #32]
 800b726:	3301      	adds	r3, #1
 800b728:	623b      	str	r3, [r7, #32]
          break;
 800b72a:	e03c      	b.n	800b7a6 <MicroVsnprintf+0x236>
        case '%':
          output[output_index++] = *current++;
 800b72c:	6a3b      	ldr	r3, [r7, #32]
 800b72e:	1c5a      	adds	r2, r3, #1
 800b730:	623a      	str	r2, [r7, #32]
 800b732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b734:	1c51      	adds	r1, r2, #1
 800b736:	6279      	str	r1, [r7, #36]	; 0x24
 800b738:	4611      	mov	r1, r2
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	440a      	add	r2, r1
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	7013      	strb	r3, [r2, #0]
          break;
 800b742:	e030      	b.n	800b7a6 <MicroVsnprintf+0x236>
        case 's':
          char* string = va_arg(args, char*);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	1d1a      	adds	r2, r3, #4
 800b748:	603a      	str	r2, [r7, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800b752:	69fa      	ldr	r2, [r7, #28]
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	4413      	add	r3, r2
 800b758:	69ba      	ldr	r2, [r7, #24]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	dd14      	ble.n	800b788 <MicroVsnprintf+0x218>
                 string[string_idx] != '\0') {
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	4413      	add	r3, r2
 800b764:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00e      	beq.n	800b788 <MicroVsnprintf+0x218>
            output[output_index++] = string[string_idx++];
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	1c5a      	adds	r2, r3, #1
 800b76e:	61fa      	str	r2, [r7, #28]
 800b770:	461a      	mov	r2, r3
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	441a      	add	r2, r3
 800b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b778:	1c59      	adds	r1, r3, #1
 800b77a:	6279      	str	r1, [r7, #36]	; 0x24
 800b77c:	4619      	mov	r1, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	440b      	add	r3, r1
 800b782:	7812      	ldrb	r2, [r2, #0]
 800b784:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800b786:	e7e4      	b.n	800b752 <MicroVsnprintf+0x1e2>
          }
          current++;
 800b788:	6a3b      	ldr	r3, [r7, #32]
 800b78a:	3301      	adds	r3, #1
 800b78c:	623b      	str	r3, [r7, #32]
 800b78e:	e6fd      	b.n	800b58c <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 800b790:	6a3b      	ldr	r3, [r7, #32]
 800b792:	1c5a      	adds	r2, r3, #1
 800b794:	623a      	str	r2, [r7, #32]
 800b796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b798:	1c51      	adds	r1, r2, #1
 800b79a:	6279      	str	r1, [r7, #36]	; 0x24
 800b79c:	4611      	mov	r1, r2
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	440a      	add	r2, r1
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800b7a6:	e6f1      	b.n	800b58c <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	627a      	str	r2, [r7, #36]	; 0x24
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	701a      	strb	r2, [r3, #0]
  return output_index;
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3728      	adds	r7, #40	; 0x28
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bdb0      	pop	{r4, r5, r7, pc}

0800b7c2 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "common.h"
#include "op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 800b7c2:	b480      	push	{r7}
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  int result = 1;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60bb      	str	r3, [r7, #8]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	da0c      	bge.n	800b7f6 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4413      	add	r3, r2
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	fb02 f303 	mul.w	r3, r2, r3
 800b7ec:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	60bb      	str	r3, [r7, #8]
 800b7f4:	e7ed      	b.n	800b7d2 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2106      	movs	r1, #6
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe f9bc 	bl	8009b8e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800b816:	4603      	mov	r3, r0
  }
 800b818:	4618      	mov	r0, r3
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	2108      	movs	r1, #8
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f8 f90e 	bl	8003a50 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800b834:	4603      	mov	r3, r0
  }
 800b836:	4618      	mov	r0, r3
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
	...

0800b840 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800b84e:	2300      	movs	r3, #0
 800b850:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f000 fbf6 	bl	800c04a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800b85e:	4603      	mov	r3, r0
 800b860:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f7ff ffdc 	bl	800b820 <_ZNK6tflite12OperatorCode7versionEv>
 800b868:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 800b86a:	7fbb      	ldrb	r3, [r7, #30]
 800b86c:	2b83      	cmp	r3, #131	; 0x83
 800b86e:	d908      	bls.n	800b882 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 800b870:	7fbb      	ldrb	r3, [r7, #30]
 800b872:	461a      	mov	r2, r3
 800b874:	492a      	ldr	r1, [pc, #168]	; (800b920 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7f7 fb50 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 800b87c:	2301      	movs	r3, #1
 800b87e:	77fb      	strb	r3, [r7, #31]
 800b880:	e048      	b.n	800b914 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800b882:	7fbb      	ldrb	r3, [r7, #30]
 800b884:	2b20      	cmp	r3, #32
 800b886:	d01a      	beq.n	800b8be <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	7fb9      	ldrb	r1, [r7, #30]
 800b890:	69ba      	ldr	r2, [r7, #24]
 800b892:	68b8      	ldr	r0, [r7, #8]
 800b894:	4798      	blx	r3
 800b896:	4602      	mov	r2, r0
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d137      	bne.n	800b914 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 800b8a4:	7fbb      	ldrb	r3, [r7, #30]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fc fb0a 	bl	8007ec0 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	491c      	ldr	r1, [pc, #112]	; (800b924 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7f7 fb32 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	77fb      	strb	r3, [r7, #31]
 800b8bc:	e02a      	b.n	800b914 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f7ff ffa0 	bl	800b804 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	bf0c      	ite	eq
 800b8ca:	2301      	moveq	r3, #1
 800b8cc:	2300      	movne	r3, #0
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d006      	beq.n	800b8e2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 800b8d4:	4914      	ldr	r1, [pc, #80]	; (800b928 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7f7 fb20 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	77fb      	strb	r3, [r7, #31]
 800b8e0:	e018      	b.n	800b914 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f7ff ff8e 	bl	800b804 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fc fad1 	bl	8007e92 <_ZNK11flatbuffers6String5c_strEv>
 800b8f0:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	6979      	ldr	r1, [r7, #20]
 800b8fe:	68b8      	ldr	r0, [r7, #8]
 800b900:	4798      	blx	r3
 800b902:	4602      	mov	r2, r0
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800b910:	2301      	movs	r3, #1
 800b912:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800b914:	7ffb      	ldrb	r3, [r7, #31]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3720      	adds	r7, #32
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	08017088 	.word	0x08017088
 800b924:	080170dc 	.word	0x080170dc
 800b928:	08017114 	.word	0x08017114

0800b92c <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800b92c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b930:	b088      	sub	sp, #32
 800b932:	af00      	add	r7, sp, #0
 800b934:	ed87 0b02 	vstr	d0, [r7, #8]
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800b93c:	f04f 0200 	mov.w	r2, #0
 800b940:	f04f 0300 	mov.w	r3, #0
 800b944:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b948:	f7f5 f8ce 	bl	8000ae8 <__aeabi_dcmpeq>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d006      	beq.n	800b960 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	e06a      	b.n	800ba36 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800b960:	6838      	ldr	r0, [r7, #0]
 800b962:	ed97 0b02 	vldr	d0, [r7, #8]
 800b966:	f005 ffdb 	bl	8011920 <frexp>
 800b96a:	ed87 0b06 	vstr	d0, [r7, #24]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800b96e:	f04f 0200 	mov.w	r2, #0
 800b972:	4b33      	ldr	r3, [pc, #204]	; (800ba40 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 800b974:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b978:	f7f4 fe4e 	bl	8000618 <__aeabi_dmul>
 800b97c:	4603      	mov	r3, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	ec44 3b17 	vmov	d7, r3, r4
 800b984:	eeb0 0a47 	vmov.f32	s0, s14
 800b988:	eef0 0a67 	vmov.f32	s1, s15
 800b98c:	f000 f951 	bl	800bc32 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800b990:	ec54 3b10 	vmov	r3, r4, d0
 800b994:	4618      	mov	r0, r3
 800b996:	4621      	mov	r1, r4
 800b998:	f7f5 f97e 	bl	8000c98 <__aeabi_d2lz>
 800b99c:	4603      	mov	r3, r0
 800b99e:	460c      	mov	r4, r1
 800b9a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800b9a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b9a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b9ac:	f04f 0200 	mov.w	r2, #0
 800b9b0:	4299      	cmp	r1, r3
 800b9b2:	eb72 0304 	sbcs.w	r3, r2, r4
 800b9b6:	da01      	bge.n	800b9bc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>
 800b9b8:	f006 f9b2 	bl	8011d20 <abort>
  if (q_fixed == (1ll << 31)) {
 800b9bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b9c0:	2c00      	cmp	r4, #0
 800b9c2:	bf08      	it	eq
 800b9c4:	f1b3 4f00 	cmpeq.w	r3, #2147483648	; 0x80000000
 800b9c8:	d114      	bne.n	800b9f4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 800b9ca:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 800b9ce:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	f04f 0200 	mov.w	r2, #0
 800b9d8:	eb1b 0301 	adds.w	r3, fp, r1
 800b9dc:	eb4c 0402 	adc.w	r4, ip, r2
 800b9e0:	1064      	asrs	r4, r4, #1
 800b9e2:	ea4f 0333 	mov.w	r3, r3, rrx
 800b9e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ++*shift;
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800b9f4:	f7f5 fbb6 	bl	8001164 <_ZNSt14numeric_limitsIlE3maxEv>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800ba00:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ba04:	4299      	cmp	r1, r3
 800ba06:	eb72 0304 	sbcs.w	r3, r2, r4
 800ba0a:	da01      	bge.n	800ba10 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 800ba0c:	f006 f988 	bl	8011d20 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f113 0f1f 	cmn.w	r3, #31
 800ba18:	da08      	bge.n	800ba2c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800ba20:	f04f 0300 	mov.w	r3, #0
 800ba24:	f04f 0400 	mov.w	r4, #0
 800ba28:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800ba2c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ba30:	461a      	mov	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	601a      	str	r2, [r3, #0]
}
 800ba36:	3720      	adds	r7, #32
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ba3e:	bf00      	nop
 800ba40:	41e00000 	.word	0x41e00000

0800ba44 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	ed87 0b02 	vstr	d0, [r7, #8]
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800ba52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba56:	f04f 0200 	mov.w	r2, #0
 800ba5a:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x50>)
 800ba5c:	f7f5 f86c 	bl	8000b38 <__aeabi_dcmpgt>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800ba66:	f006 f95b 	bl	8011d20 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800ba6a:	ed97 7b02 	vldr	d7, [r7, #8]
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	eeb0 0a47 	vmov.f32	s0, s14
 800ba76:	eef0 0a67 	vmov.f32	s1, s15
 800ba7a:	f7ff ff57 	bl	800b92c <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	da01      	bge.n	800ba8a <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x46>
 800ba86:	f006 f94b 	bl	8011d20 <abort>
}
 800ba8a:	bf00      	nop
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	3ff00000 	.word	0x3ff00000

0800ba98 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ba98:	b590      	push	{r4, r7, lr}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800baae:	461a      	mov	r2, r3
 800bab0:	4623      	mov	r3, r4
 800bab2:	f7f5 f823 	bl	8000afc <__aeabi_dcmplt>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <_ZSt3minIdERKT_S2_S2_+0x28>
	return __b;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	e000      	b.n	800bac2 <_ZSt3minIdERKT_S2_S2_+0x2a>
      return __a;
 800bac0:	687b      	ldr	r3, [r7, #4]
    }
 800bac2:	4618      	mov	r0, r3
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd90      	pop	{r4, r7, pc}
 800baca:	0000      	movs	r0, r0
 800bacc:	0000      	movs	r0, r0
	...

0800bad0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800bad0:	b5b0      	push	{r4, r5, r7, lr}
 800bad2:	b08e      	sub	sp, #56	; 0x38
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	ed87 0b06 	vstr	d0, [r7, #24]
 800bada:	ed87 1b04 	vstr	d1, [r7, #16]
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800bae4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bae8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800baec:	f7f4 fd94 	bl	8000618 <__aeabi_dmul>
 800baf0:	4603      	mov	r3, r0
 800baf2:	460c      	mov	r4, r1
 800baf4:	4625      	mov	r5, r4
 800baf6:	461c      	mov	r4, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f1c3 031f 	rsb	r3, r3, #31
 800bafe:	2201      	movs	r2, #1
 800bb00:	fa02 f303 	lsl.w	r3, r2, r3
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7f4 fd1d 	bl	8000544 <__aeabi_i2d>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	4620      	mov	r0, r4
 800bb10:	4629      	mov	r1, r5
 800bb12:	f7f4 fd81 	bl	8000618 <__aeabi_dmul>
 800bb16:	4603      	mov	r3, r0
 800bb18:	460c      	mov	r4, r1
 800bb1a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800bb1e:	a40e      	add	r4, pc, #56	; (adr r4, 800bb58 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800bb20:	e9d4 3400 	ldrd	r3, r4, [r4]
 800bb24:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800bb28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bb2c:	f107 0320 	add.w	r3, r7, #32
 800bb30:	4611      	mov	r1, r2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7ff ffb0 	bl	800ba98 <_ZSt3minIdERKT_S2_S2_>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb3e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800bb42:	6879      	ldr	r1, [r7, #4]
 800bb44:	68b8      	ldr	r0, [r7, #8]
 800bb46:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800bb4a:	f7ff ff7b 	bl	800ba44 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800bb4e:	bf00      	nop
 800bb50:	3738      	adds	r7, #56	; 0x38
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bdb0      	pop	{r4, r5, r7, pc}
 800bb56:	bf00      	nop
 800bb58:	ffc00000 	.word	0xffc00000
 800bb5c:	41dfffff 	.word	0x41dfffff

0800bb60 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800bb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb64:	b087      	sub	sp, #28
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	60f8      	str	r0, [r7, #12]
 800bb6a:	60b9      	str	r1, [r7, #8]
 800bb6c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800bb6e:	2201      	movs	r2, #1
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	fa02 f303 	lsl.w	r3, r2, r3
 800bb76:	3b01      	subs	r3, #1
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7f4 fce3 	bl	8000544 <__aeabi_i2d>
 800bb7e:	4682      	mov	sl, r0
 800bb80:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	1ad1      	subs	r1, r2, r3
 800bb88:	f04f 0201 	mov.w	r2, #1
 800bb8c:	f04f 0300 	mov.w	r3, #0
 800bb90:	f1a1 0620 	sub.w	r6, r1, #32
 800bb94:	f1c1 0020 	rsb	r0, r1, #32
 800bb98:	fa03 f901 	lsl.w	r9, r3, r1
 800bb9c:	fa02 f606 	lsl.w	r6, r2, r6
 800bba0:	ea49 0906 	orr.w	r9, r9, r6
 800bba4:	fa22 f000 	lsr.w	r0, r2, r0
 800bba8:	ea49 0900 	orr.w	r9, r9, r0
 800bbac:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	f7f4 fd02 	bl	80005bc <__aeabi_l2d>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4650      	mov	r0, sl
 800bbbe:	4659      	mov	r1, fp
 800bbc0:	f7f4 fd2a 	bl	8000618 <__aeabi_dmul>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4690      	mov	r8, r2
 800bbca:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800bbcc:	f04f 0201 	mov.w	r2, #1
 800bbd0:	f04f 0300 	mov.w	r3, #0
 800bbd4:	68b9      	ldr	r1, [r7, #8]
 800bbd6:	f1a1 0620 	sub.w	r6, r1, #32
 800bbda:	f1c1 0020 	rsb	r0, r1, #32
 800bbde:	fa03 f501 	lsl.w	r5, r3, r1
 800bbe2:	fa02 f606 	lsl.w	r6, r2, r6
 800bbe6:	4335      	orrs	r5, r6
 800bbe8:	fa22 f000 	lsr.w	r0, r2, r0
 800bbec:	4305      	orrs	r5, r0
 800bbee:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	f7f4 fce1 	bl	80005bc <__aeabi_l2d>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	460c      	mov	r4, r1
  const double max_input_rescaled =
 800bbfe:	461a      	mov	r2, r3
 800bc00:	4623      	mov	r3, r4
 800bc02:	4640      	mov	r0, r8
 800bc04:	4649      	mov	r1, r9
 800bc06:	f7f4 fe31 	bl	800086c <__aeabi_ddiv>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	460c      	mov	r4, r1
 800bc0e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800bc12:	ed97 0b04 	vldr	d0, [r7, #16]
 800bc16:	f005 fdff 	bl	8011818 <floor>
 800bc1a:	ec54 3b10 	vmov	r3, r4, d0
 800bc1e:	4618      	mov	r0, r3
 800bc20:	4621      	mov	r1, r4
 800bc22:	f7f4 ffa9 	bl	8000b78 <__aeabi_d2iz>
 800bc26:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	371c      	adds	r7, #28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc32 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b082      	sub	sp, #8
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	ed87 0b00 	vstr	d0, [r7]
 800bc3c:	ed97 0b00 	vldr	d0, [r7]
 800bc40:	f005 fea4 	bl	801198c <round>
 800bc44:	eeb0 7a40 	vmov.f32	s14, s0
 800bc48:	eef0 7a60 	vmov.f32	s15, s1
 800bc4c:	eeb0 0a47 	vmov.f32	s0, s14
 800bc50:	eef0 0a67 	vmov.f32	s1, s15
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800bc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc76:	b08f      	sub	sp, #60	; 0x3c
 800bc78:	af04      	add	r7, sp, #16
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	6839      	ldr	r1, [r7, #0]
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7fa fc7a 	bl	800657e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800bc8a:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, input != nullptr);
 800bc8c:	6a3b      	ldr	r3, [r7, #32]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10a      	bne.n	800bca8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x34>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	695c      	ldr	r4, [r3, #20]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	4b62      	ldr	r3, [pc, #392]	; (800be24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	2323      	movs	r3, #35	; 0x23
 800bc9e:	4a62      	ldr	r2, [pc, #392]	; (800be28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800bca0:	4962      	ldr	r1, [pc, #392]	; (800be2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800bca2:	47a0      	blx	r4
 800bca4:	2301      	movs	r3, #1
 800bca6:	e0b9      	b.n	800be1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fa fc75 	bl	800659e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800bcb4:	61f8      	str	r0, [r7, #28]
  TF_LITE_ENSURE(context, output != nullptr);
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10a      	bne.n	800bcd2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5e>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	695c      	ldr	r4, [r3, #20]
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	4b5b      	ldr	r3, [pc, #364]	; (800be30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	2325      	movs	r3, #37	; 0x25
 800bcc8:	4a57      	ldr	r2, [pc, #348]	; (800be28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800bcca:	4958      	ldr	r1, [pc, #352]	; (800be2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800bccc:	47a0      	blx	r4
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e0a4      	b.n	800be1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 800bcd2:	6a38      	ldr	r0, [r7, #32]
 800bcd4:	f7fa fbc6 	bl	8006464 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	460c      	mov	r4, r1
 800bcdc:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	61bb      	str	r3, [r7, #24]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800bce4:	6838      	ldr	r0, [r7, #0]
 800bce6:	f7f5 ff9f 	bl	8001c28 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800bcea:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d109      	bne.n	800bd04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d105      	bne.n	800bd04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d101      	bne.n	800bd04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800bd00:	2301      	movs	r3, #1
 800bd02:	e000      	b.n	800bd06 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x92>
 800bd04:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d002      	beq.n	800bd10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9c>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 800bd10:	2301      	movs	r3, #1
 800bd12:	60fb      	str	r3, [r7, #12]
  int stretch_dim = -1;
 800bd14:	f04f 33ff 	mov.w	r3, #4294967295
 800bd18:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < output_shape->size; ++i) {
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd24:	429a      	cmp	r2, r3
 800bd26:	da2b      	bge.n	800bd80 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10c>
    int value = output_shape->data[i];
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	617b      	str	r3, [r7, #20]
    if (value == -1) {
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3a:	d118      	bne.n	800bd6e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfa>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd42:	d011      	beq.n	800bd68 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf4>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	695c      	ldr	r4, [r3, #20]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd50:	9203      	str	r2, [sp, #12]
 800bd52:	9302      	str	r3, [sp, #8]
 800bd54:	4b37      	ldr	r3, [pc, #220]	; (800be34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 800bd56:	9301      	str	r3, [sp, #4]
 800bd58:	4b37      	ldr	r3, [pc, #220]	; (800be38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	233a      	movs	r3, #58	; 0x3a
 800bd5e:	4a32      	ldr	r2, [pc, #200]	; (800be28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800bd60:	4936      	ldr	r1, [pc, #216]	; (800be3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800bd62:	47a0      	blx	r4
 800bd64:	2301      	movs	r3, #1
 800bd66:	e059      	b.n	800be1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
      stretch_dim = i;
 800bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6a:	60bb      	str	r3, [r7, #8]
 800bd6c:	e004      	b.n	800bd78 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x104>
    } else {
      num_output_elements *= value;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	697a      	ldr	r2, [r7, #20]
 800bd72:	fb02 f303 	mul.w	r3, r2, r3
 800bd76:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < output_shape->size; ++i) {
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd7e:	e7ce      	b.n	800bd1e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xaa>
    }
  }
  if (stretch_dim != -1) {
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd86:	d011      	beq.n	800bdac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800bd88:	6939      	ldr	r1, [r7, #16]
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	fb91 f2f2 	sdiv	r2, r1, r2
 800bd92:	69b9      	ldr	r1, [r7, #24]
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	440b      	add	r3, r1
 800bd98:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	69ba      	ldr	r2, [r7, #24]
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	fb02 f303 	mul.w	r3, r2, r3
 800bdaa:	60fb      	str	r3, [r7, #12]
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800bdac:	6a3b      	ldr	r3, [r7, #32]
 800bdae:	781a      	ldrb	r2, [r3, #0]
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d01b      	beq.n	800bdf0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	695c      	ldr	r4, [r3, #20]
 800bdbc:	687d      	ldr	r5, [r7, #4]
 800bdbe:	6a3b      	ldr	r3, [r7, #32]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7f5 f938 	bl	8001038 <TfLiteTypeGetName>
 800bdc8:	4606      	mov	r6, r0
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f5 f932 	bl	8001038 <TfLiteTypeGetName>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	9303      	str	r3, [sp, #12]
 800bdd8:	9602      	str	r6, [sp, #8]
 800bdda:	4b19      	ldr	r3, [pc, #100]	; (800be40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 800bddc:	9301      	str	r3, [sp, #4]
 800bdde:	4b19      	ldr	r3, [pc, #100]	; (800be44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	2345      	movs	r3, #69	; 0x45
 800bde4:	4a10      	ldr	r2, [pc, #64]	; (800be28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800bde6:	4918      	ldr	r1, [pc, #96]	; (800be48 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 800bde8:	4628      	mov	r0, r5
 800bdea:	47a0      	blx	r4
 800bdec:	2301      	movs	r3, #1
 800bdee:	e015      	b.n	800be1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d010      	beq.n	800be1a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a6>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	695c      	ldr	r4, [r3, #20]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	9203      	str	r2, [sp, #12]
 800be04:	9302      	str	r3, [sp, #8]
 800be06:	4b11      	ldr	r3, [pc, #68]	; (800be4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	4b11      	ldr	r3, [pc, #68]	; (800be50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1dc>)
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	2346      	movs	r3, #70	; 0x46
 800be10:	4a05      	ldr	r2, [pc, #20]	; (800be28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800be12:	490a      	ldr	r1, [pc, #40]	; (800be3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800be14:	47a0      	blx	r4
 800be16:	2301      	movs	r3, #1
 800be18:	e000      	b.n	800be1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  return kTfLiteOk;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	372c      	adds	r7, #44	; 0x2c
 800be20:	46bd      	mov	sp, r7
 800be22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be24:	08017190 	.word	0x08017190
 800be28:	08017160 	.word	0x08017160
 800be2c:	08017178 	.word	0x08017178
 800be30:	080171a4 	.word	0x080171a4
 800be34:	080171d4 	.word	0x080171d4
 800be38:	080171d8 	.word	0x080171d8
 800be3c:	080171b8 	.word	0x080171b8
 800be40:	08017200 	.word	0x08017200
 800be44:	08017210 	.word	0x08017210
 800be48:	080171e4 	.word	0x080171e4
 800be4c:	0801721c 	.word	0x0801721c
 800be50:	08017230 	.word	0x08017230

0800be54 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800be54:	b5b0      	push	{r4, r5, r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af04      	add	r7, sp, #16
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800be5e:	6838      	ldr	r0, [r7, #0]
 800be60:	f7f5 fee2 	bl	8001c28 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800be64:	4603      	mov	r3, r0
 800be66:	2b01      	cmp	r3, #1
 800be68:	d007      	beq.n	800be7a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800be6a:	6838      	ldr	r0, [r7, #0]
 800be6c:	f7f5 fedc 	bl	8001c28 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800be70:	4603      	mov	r3, r0
 800be72:	2b02      	cmp	r3, #2
 800be74:	d001      	beq.n	800be7a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800be76:	2301      	movs	r3, #1
 800be78:	e000      	b.n	800be7c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 800be7a:	2300      	movs	r3, #0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00a      	beq.n	800be96 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	695c      	ldr	r4, [r3, #20]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	4b29      	ldr	r3, [pc, #164]	; (800bf2c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	234b      	movs	r3, #75	; 0x4b
 800be8c:	4a28      	ldr	r2, [pc, #160]	; (800bf30 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800be8e:	4929      	ldr	r1, [pc, #164]	; (800bf34 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800be90:	47a0      	blx	r4
 800be92:	2301      	movs	r3, #1
 800be94:	e045      	b.n	800bf22 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800be96:	6838      	ldr	r0, [r7, #0]
 800be98:	f7ff fedf 	bl	800bc5a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	bf14      	ite	ne
 800bea2:	2301      	movne	r3, #1
 800bea4:	2300      	moveq	r3, #0
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d014      	beq.n	800bed6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x82>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	695c      	ldr	r4, [r3, #20]
 800beb0:	687d      	ldr	r5, [r7, #4]
 800beb2:	6838      	ldr	r0, [r7, #0]
 800beb4:	f7ff fed1 	bl	800bc5a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800beb8:	4602      	mov	r2, r0
 800beba:	2301      	movs	r3, #1
 800bebc:	9303      	str	r3, [sp, #12]
 800bebe:	9202      	str	r2, [sp, #8]
 800bec0:	4b1d      	ldr	r3, [pc, #116]	; (800bf38 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800bec2:	9301      	str	r3, [sp, #4]
 800bec4:	4b1d      	ldr	r3, [pc, #116]	; (800bf3c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	234c      	movs	r3, #76	; 0x4c
 800beca:	4a19      	ldr	r2, [pc, #100]	; (800bf30 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800becc:	491c      	ldr	r1, [pc, #112]	; (800bf40 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800bece:	4628      	mov	r0, r5
 800bed0:	47a0      	blx	r4
 800bed2:	2301      	movs	r3, #1
 800bed4:	e025      	b.n	800bf22 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff feca 	bl	800bc74 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	bf14      	ite	ne
 800bee6:	2301      	movne	r3, #1
 800bee8:	2300      	moveq	r3, #0
 800beea:	b2db      	uxtb	r3, r3
 800beec:	2b00      	cmp	r3, #0
 800beee:	d017      	beq.n	800bf20 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	695c      	ldr	r4, [r3, #20]
 800bef4:	687d      	ldr	r5, [r7, #4]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff feba 	bl	800bc74 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800bf00:	4603      	mov	r3, r0
 800bf02:	461a      	mov	r2, r3
 800bf04:	2300      	movs	r3, #0
 800bf06:	9303      	str	r3, [sp, #12]
 800bf08:	9202      	str	r2, [sp, #8]
 800bf0a:	4b0e      	ldr	r3, [pc, #56]	; (800bf44 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	4b0e      	ldr	r3, [pc, #56]	; (800bf48 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	234d      	movs	r3, #77	; 0x4d
 800bf14:	4a06      	ldr	r2, [pc, #24]	; (800bf30 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800bf16:	490a      	ldr	r1, [pc, #40]	; (800bf40 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800bf18:	4628      	mov	r0, r5
 800bf1a:	47a0      	blx	r4
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e000      	b.n	800bf22 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
  return kTfLiteOk;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bdb0      	pop	{r4, r5, r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	08017244 	.word	0x08017244
 800bf30:	08017160 	.word	0x08017160
 800bf34:	08017178 	.word	0x08017178
 800bf38:	08017274 	.word	0x08017274
 800bf3c:	08017278 	.word	0x08017278
 800bf40:	080171b8 	.word	0x080171b8
 800bf44:	0801728c 	.word	0x0801728c
 800bf48:	08017298 	.word	0x08017298

0800bf4c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b088      	sub	sp, #32
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800bf56:	2200      	movs	r2, #0
 800bf58:	6839      	ldr	r1, [r7, #0]
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7f5 ff37 	bl	8001dce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800bf60:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800bf62:	2200      	movs	r2, #0
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7f5 ff41 	bl	8001dee <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800bf6c:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	7a1b      	ldrb	r3, [r3, #8]
 800bf72:	f107 020c 	add.w	r2, r7, #12
 800bf76:	4611      	mov	r1, r2
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fb fe83 	bl	8007c84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	74fb      	strb	r3, [r7, #19]
 800bf82:	7cfb      	ldrb	r3, [r7, #19]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d001      	beq.n	800bf8c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 800bf88:	7cfb      	ldrb	r3, [r7, #19]
 800bf8a:	e024      	b.n	800bfd6 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7ff fc16 	bl	800b7c2 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 800bf96:	4602      	mov	r2, r0
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	fb02 f303 	mul.w	r3, r2, r3
 800bf9e:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d013      	beq.n	800bfd4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 800bfac:	2300      	movs	r3, #0
 800bfae:	61fb      	str	r3, [r7, #28]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	69fa      	ldr	r2, [r7, #28]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d20d      	bcs.n	800bfd4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	441a      	add	r2, r3
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	6819      	ldr	r1, [r3, #0]
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	440b      	add	r3, r1
 800bfc8:	7812      	ldrb	r2, [r2, #0]
 800bfca:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	61fb      	str	r3, [r7, #28]
 800bfd2:	e7ed      	b.n	800bfb0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3720      	adds	r7, #32
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
	...

0800bfe0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 800bfe0:	b4b0      	push	{r4, r5, r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a07      	ldr	r2, [pc, #28]	; (800c008 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 800bfec:	461c      	mov	r4, r3
 800bfee:	4615      	mov	r5, r2
 800bff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bff4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	bcb0      	pop	{r4, r5, r7}
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	080172b8 	.word	0x080172b8

0800c00c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	2104      	movs	r1, #4
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7f7 fd46 	bl	8003aac <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800c020:	4603      	mov	r3, r0
  }
 800c022:	4618      	mov	r0, r3
 800c024:	3708      	adds	r7, #8
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b082      	sub	sp, #8
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	210a      	movs	r1, #10
 800c038:	4618      	mov	r0, r3
 800c03a:	f7f7 fd09 	bl	8003a50 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800c03e:	4603      	mov	r3, r0
 800c040:	b2db      	uxtb	r3, r3
  }
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b084      	sub	sp, #16
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 800c058:	f005 fe62 	bl	8011d20 <abort>

  return std::max(
      op_code->builtin_code(),
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff ffe4 	bl	800c02a <_ZNK6tflite12OperatorCode12builtin_codeEv>
 800c062:	4603      	mov	r3, r0
 800c064:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff ffd0 	bl	800c00c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 800c06c:	4603      	mov	r3, r0
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	73fb      	strb	r3, [r7, #15]
 800c072:	f107 020f 	add.w	r2, r7, #15
 800c076:	f107 030e 	add.w	r3, r7, #14
 800c07a:	4611      	mov	r1, r2
 800c07c:	4618      	mov	r0, r3
 800c07e:	f000 f806 	bl	800c08e <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 800c082:	4603      	mov	r3, r0
 800c084:	781b      	ldrb	r3, [r3, #0]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 800c08e:	b480      	push	{r7}
 800c090:	b083      	sub	sp, #12
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	781a      	ldrb	r2, [r3, #0]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d201      	bcs.n	800c0a8 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	e000      	b.n	800c0aa <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 800c0a8:	687b      	ldr	r3, [r7, #4]
    }
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
	...

0800c0b8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "compatibility - Copy.h"
#include "memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
 800c0c4:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 800c0c6:	4a0e      	ldr	r2, [pc, #56]	; (800c100 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	601a      	str	r2, [r3, #0]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	605a      	str	r2, [r3, #4]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	609a      	str	r2, [r3, #8]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	60da      	str	r2, [r3, #12]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	611a      	str	r2, [r3, #16]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	615a      	str	r2, [r3, #20]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	689a      	ldr	r2, [r3, #8]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	619a      	str	r2, [r3, #24]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	0801f3c8 	.word	0x0801f3c8

0800c104 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	4413      	add	r3, r2
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	68b9      	ldr	r1, [r7, #8]
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f7ff ffcb 	bl	800c0b8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
 800c136:	4a11      	ldr	r2, [pc, #68]	; (800c17c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	605a      	str	r2, [r3, #4]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	689a      	ldr	r2, [r3, #8]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	609a      	str	r2, [r3, #8]
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	68da      	ldr	r2, [r3, #12]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	60da      	str	r2, [r3, #12]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	691a      	ldr	r2, [r3, #16]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	611a      	str	r2, [r3, #16]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	695a      	ldr	r2, [r3, #20]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	615a      	str	r2, [r3, #20]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	699a      	ldr	r2, [r3, #24]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	619a      	str	r2, [r3, #24]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4618      	mov	r0, r3
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	0801f3c8 	.word	0x0801f3c8

0800c180 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800c180:	b590      	push	{r4, r7, lr}
 800c182:	b08d      	sub	sp, #52	; 0x34
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d101      	bne.n	800c196 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800c192:	f005 fdc5 	bl	8011d20 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 800c19c:	f005 fdc0 	bl	8011d20 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800c1a0:	f107 0010 	add.w	r0, r7, #16
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	68f9      	ldr	r1, [r7, #12]
 800c1aa:	f7ff ffab 	bl	800c104 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
 800c1ae:	f107 0310 	add.w	r3, r7, #16
 800c1b2:	2204      	movs	r2, #4
 800c1b4:	211c      	movs	r1, #28
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 f87e 	bl	800c2b8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 800c1bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	201c      	movs	r0, #28
 800c1c4:	f7f6 fedd 	bl	8002f82 <_ZnwjPv>
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	2c00      	cmp	r4, #0
 800c1cc:	d005      	beq.n	800c1da <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x5a>
 800c1ce:	f107 0310 	add.w	r3, r7, #16
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7ff ffa9 	bl	800c12c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800c1da:	f107 0310 	add.w	r3, r7, #16
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 f806 	bl	800c1f0 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800c1e4:	4623      	mov	r3, r4
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3734      	adds	r7, #52	; 0x34
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd90      	pop	{r4, r7, pc}
	...

0800c1f0 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	4a04      	ldr	r2, [pc, #16]	; (800c20c <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	601a      	str	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4618      	mov	r0, r3
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	0801f3c8 	.word	0x0801f3c8

0800c210 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff ffe9 	bl	800c1f0 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800c21e:	211c      	movs	r1, #28
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f005 fac8 	bl	80117b6 <_ZdlPvj>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4618      	mov	r0, r3
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 800c230:	b580      	push	{r7, lr}
 800c232:	b088      	sub	sp, #32
 800c234:	af02      	add	r7, sp, #8
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	691a      	ldr	r2, [r3, #16]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	429a      	cmp	r2, r3
 800c246:	d007      	beq.n	800c258 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	4918      	ldr	r1, [pc, #96]	; (800c2b0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f6 fe64 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 800c254:	2301      	movs	r3, #1
 800c256:	e027      	b.n	800c2a8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x78>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	6879      	ldr	r1, [r7, #4]
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fb fcca 	bl	8007bf8 <_ZN6tflite14AlignPointerUpEPhj>
 800c264:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	461a      	mov	r2, r3
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	429a      	cmp	r2, r3
 800c278:	d20c      	bcs.n	800c294 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x64>
    TF_LITE_REPORT_ERROR(
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6858      	ldr	r0, [r3, #4]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	490a      	ldr	r1, [pc, #40]	; (800c2b4 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 800c28c:	f7f6 fe46 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 800c290:	2301      	movs	r3, #1
 800c292:	e009      	b.n	800c2a8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x78>
  }
  head_ = aligned_result + size;
 800c294:	697a      	ldr	r2, [r7, #20]
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	441a      	add	r2, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	691a      	ldr	r2, [r3, #16]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800c2a6:	2300      	movs	r3, #0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3718      	adds	r7, #24
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	080172ec 	.word	0x080172ec
 800c2b4:	08017344 	.word	0x08017344

0800c2b8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b088      	sub	sp, #32
 800c2bc:	af02      	add	r7, sp, #8
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	695a      	ldr	r2, [r3, #20]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	425b      	negs	r3, r3
 800c2cc:	4413      	add	r3, r2
 800c2ce:	6879      	ldr	r1, [r7, #4]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fb fcaa 	bl	8007c2a <_ZN6tflite16AlignPointerDownEPhj>
 800c2d6:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d213      	bcs.n	800c30a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x52>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6858      	ldr	r0, [r3, #4]
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	1ad2      	subs	r2, r2, r3
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	4906      	ldr	r1, [pc, #24]	; (800c31c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x64>)
 800c302:	f7f6 fe0b 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 800c306:	2300      	movs	r3, #0
 800c308:	e003      	b.n	800c312 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x5a>
  }
  tail_ = aligned_result;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	615a      	str	r2, [r3, #20]
  return aligned_result;
 800c310:	697b      	ldr	r3, [r7, #20]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	08017388 	.word	0x08017388

0800c320 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 800c320:	b580      	push	{r7, lr}
 800c322:	b088      	sub	sp, #32
 800c324:	af02      	add	r7, sp, #8
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	699b      	ldr	r3, [r3, #24]
 800c330:	6879      	ldr	r1, [r7, #4]
 800c332:	4618      	mov	r0, r3
 800c334:	f7fb fc60 	bl	8007bf8 <_ZN6tflite14AlignPointerUpEPhj>
 800c338:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	695b      	ldr	r3, [r3, #20]
 800c33e:	461a      	mov	r2, r3
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800c346:	693a      	ldr	r2, [r7, #16]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d20c      	bcs.n	800c368 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x48>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6858      	ldr	r0, [r3, #4]
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	4907      	ldr	r1, [pc, #28]	; (800c37c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 800c360:	f7f6 fddc 	bl	8002f1c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 800c364:	2300      	movs	r3, #0
 800c366:	e005      	b.n	800c374 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x54>
  }
  temp_ = aligned_result + size;
 800c368:	697a      	ldr	r2, [r7, #20]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	441a      	add	r2, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	619a      	str	r2, [r3, #24]
  return aligned_result;
 800c372:	697b      	ldr	r3, [r7, #20]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	080173d4 	.word	0x080173d4

0800c380 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	691a      	ldr	r2, [r3, #16]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	619a      	str	r2, [r3, #24]
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fb fc17 	bl	8007bf8 <_ZN6tflite14AlignPointerUpEPhj>
 800c3ca:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	695b      	ldr	r3, [r3, #20]
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fb fc29 	bl	8007c2a <_ZN6tflite16AlignPointerDownEPhj>
 800c3d8:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	1ad3      	subs	r3, r2, r3
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	ed87 0a01 	vstr	s0, [r7, #4]
 800c3f2:	ed97 0a01 	vldr	s0, [r7, #4]
 800c3f6:	f005 fb39 	bl	8011a6c <expf>
 800c3fa:	eef0 7a40 	vmov.f32	s15, s0
 800c3fe:	eeb0 0a67 	vmov.f32	s0, s15
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800c408:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800c40c:	b08b      	sub	sp, #44	; 0x2c
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c41a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b64 = b;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c424:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t sum = a64 + b64;
 800c428:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c42c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c430:	eb13 0b01 	adds.w	fp, r3, r1
 800c434:	eb44 0c02 	adc.w	ip, r4, r2
 800c438:	e9c7 bc04 	strd	fp, ip, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800c43c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c440:	2b00      	cmp	r3, #0
 800c442:	f174 0300 	sbcs.w	r3, r4, #0
 800c446:	db04      	blt.n	800c452 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4a>
 800c448:	f04f 0301 	mov.w	r3, #1
 800c44c:	f04f 0400 	mov.w	r4, #0
 800c450:	e003      	b.n	800c45a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x52>
 800c452:	f04f 33ff 	mov.w	r3, #4294967295
 800c456:	f04f 34ff 	mov.w	r4, #4294967295
 800c45a:	e9c7 3402 	strd	r3, r4, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800c45e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c462:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c466:	eb13 0b01 	adds.w	fp, r3, r1
 800c46a:	eb44 0c02 	adc.w	ip, r4, r2
 800c46e:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800c472:	4611      	mov	r1, r2
 800c474:	f04f 0200 	mov.w	r2, #0
 800c478:	eb1b 0301 	adds.w	r3, fp, r1
 800c47c:	eb4c 0402 	adc.w	r4, ip, r2
 800c480:	1064      	asrs	r4, r4, #1
 800c482:	ea4f 0333 	mov.w	r3, r3, rrx
}
 800c486:	4618      	mov	r0, r3
 800c488:	372c      	adds	r7, #44	; 0x2c
 800c48a:	46bd      	mov	sp, r7
 800c48c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800c490:	4770      	bx	lr

0800c492 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800c492:	b480      	push	{r7}
 800c494:	b083      	sub	sp, #12
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	da01      	bge.n	800c4b0 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	e000      	b.n	800c4b2 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 800c4b0:	687b      	ldr	r3, [r7, #4]
    }
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	370c      	adds	r7, #12
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr

0800c4be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800c4be:	b590      	push	{r4, r7, lr}
 800c4c0:	b087      	sub	sp, #28
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	60f8      	str	r0, [r7, #12]
 800c4c6:	60b9      	str	r1, [r7, #8]
 800c4c8:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f7f4 ff08 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c4d0:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	617b      	str	r3, [r7, #20]
 800c4d6:	697a      	ldr	r2, [r7, #20]
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	da15      	bge.n	800c50a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 800c4de:	697a      	ldr	r2, [r7, #20]
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d00d      	beq.n	800c502 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800c4e6:	6979      	ldr	r1, [r7, #20]
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7f4 ff05 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	6979      	ldr	r1, [r7, #20]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7f4 ff00 	bl	80012f8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	429c      	cmp	r4, r3
 800c4fc:	d001      	beq.n	800c502 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 800c4fe:	f005 fc0f 	bl	8011d20 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	3301      	adds	r3, #1
 800c506:	617b      	str	r3, [r7, #20]
 800c508:	e7e5      	b.n	800c4d6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800c50a:	68b9      	ldr	r1, [r7, #8]
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f7f8 fbd2 	bl	8004cb6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800c512:	4603      	mov	r3, r0
}
 800c514:	4618      	mov	r0, r3
 800c516:	371c      	adds	r7, #28
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd90      	pop	{r4, r7, pc}

0800c51c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	fa02 f303 	lsl.w	r3, r2, r3
                                           quantized_multiplier);
 800c530:	68b9      	ldr	r1, [r7, #8]
 800c532:	4618      	mov	r0, r3
 800c534:	f7f4 fe4e 	bl	80011d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800c538:	4603      	mov	r3, r0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
	...

0800c544 <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
 800c544:	b580      	push	{r7, lr}
 800c546:	ed2d 8b02 	vpush	{d8}
 800c54a:	b094      	sub	sp, #80	; 0x50
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6178      	str	r0, [r7, #20]
 800c550:	ed87 0a04 	vstr	s0, [r7, #16]
 800c554:	edc7 0a03 	vstr	s1, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
 800c55c:	ed97 7a03 	vldr	s14, [r7, #12]
 800c560:	edd7 7a04 	vldr	s15, [r7, #16]
 800c564:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	ee07 3a90 	vmov	s15, r3
 800c570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c578:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 800c57c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c580:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c584:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c588:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 800c58c:	2300      	movs	r3, #0
 800c58e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3b01      	subs	r3, #1
 800c594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c596:	429a      	cmp	r2, r3
 800c598:	f280 80c0 	bge.w	800c71c <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 800c59c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c59e:	ee07 3a90 	vmov	s15, r3
 800c5a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c5a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800c5aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5ae:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	eeb0 0a67 	vmov.f32	s0, s15
 800c5bc:	4798      	blx	r3
 800c5be:	eeb0 7a40 	vmov.f32	s14, s0
 800c5c2:	eddf 7a74 	vldr	s15, [pc, #464]	; 800c794 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800c5c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ca:	eeb0 0a67 	vmov.f32	s0, s15
 800c5ce:	f7fa fb8d 	bl	8006cec <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800c5d2:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800c5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d8:	3301      	adds	r3, #1
 800c5da:	ee07 3a90 	vmov	s15, r3
 800c5de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c5e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800c5e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	eeb0 0a67 	vmov.f32	s0, s15
 800c5f8:	4798      	blx	r3
 800c5fa:	eeb0 7a40 	vmov.f32	s14, s0
 800c5fe:	eddf 7a65 	vldr	s15, [pc, #404]	; 800c794 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800c602:	ee27 8a27 	vmul.f32	s16, s14, s15
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 800c606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c608:	ee07 3a90 	vmov	s15, r3
 800c60c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c610:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800c614:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c618:	edd7 7a04 	vldr	s15, [r7, #16]
 800c61c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	eeb0 0a67 	vmov.f32	s0, s15
 800c626:	4798      	blx	r3
 800c628:	eeb0 7a40 	vmov.f32	s14, s0
 800c62c:	eddf 7a59 	vldr	s15, [pc, #356]	; 800c794 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800c630:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c634:	eeb0 0a67 	vmov.f32	s0, s15
 800c638:	f7fa fb58 	bl	8006cec <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800c63c:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800c640:	ee78 7a27 	vadd.f32	s15, s16, s15
 800c644:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c648:	eec7 6a87 	vdiv.f32	s13, s15, s14
                    2.0f);
 800c64c:	eeb0 0a66 	vmov.f32	s0, s13
 800c650:	f7fa fb4c 	bl	8006cec <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800c654:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 800c658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c65a:	ee07 3a90 	vmov	s15, r3
 800c65e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c662:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800c666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c66a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c66e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c672:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	eeb0 0a67 	vmov.f32	s0, s15
 800c680:	4798      	blx	r3
 800c682:	eeb0 7a40 	vmov.f32	s14, s0
 800c686:	eddf 7a43 	vldr	s15, [pc, #268]	; 800c794 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800c68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c68e:	eeb0 0a67 	vmov.f32	s0, s15
 800c692:	f7fa fb2b 	bl	8006cec <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800c696:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 800c69a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c69e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c6a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6a6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 800c6aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c6ae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c6b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c6b6:	eeb0 0a66 	vmov.f32	s0, s13
 800c6ba:	f7fa fb17 	bl	8006cec <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800c6be:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min(std::max(sample_val - bias, -32768.0f), 32767.0f);
 800c6c2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c6c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c6ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6ce:	edc7 7a06 	vstr	s15, [r7, #24]
 800c6d2:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800c6d6:	61fb      	str	r3, [r7, #28]
 800c6d8:	f107 021c 	add.w	r2, r7, #28
 800c6dc:	f107 0318 	add.w	r3, r7, #24
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7f6 f870 	bl	80027c8 <_ZSt3maxIfERKT_S2_S2_>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	4b2b      	ldr	r3, [pc, #172]	; (800c798 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800c6ec:	623b      	str	r3, [r7, #32]
 800c6ee:	f107 0320 	add.w	r3, r7, #32
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	f7f6 f913 	bl	8002920 <_ZSt3minIfERKT_S2_S2_>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	edd3 7a00 	vldr	s15, [r3]
 800c700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	4413      	add	r3, r2
 800c708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c70c:	ee17 2a90 	vmov	r2, s15
 800c710:	b212      	sxth	r2, r2
 800c712:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 800c714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c716:	3301      	adds	r3, #1
 800c718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c71a:	e739      	b.n	800c590 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
  }
  table[num - 1] = std::min(
      std::max(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	ed97 0a03 	vldr	s0, [r7, #12]
 800c722:	4798      	blx	r3
 800c724:	eeb0 7a40 	vmov.f32	s14, s0
 800c728:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800c794 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800c72c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c730:	eeb0 0a67 	vmov.f32	s0, s15
 800c734:	f7fa fada 	bl	8006cec <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800c738:	eef0 7a40 	vmov.f32	s15, s0
 800c73c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800c740:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800c744:	62bb      	str	r3, [r7, #40]	; 0x28
 800c746:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c74a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c74e:	4611      	mov	r1, r2
 800c750:	4618      	mov	r0, r3
 800c752:	f7f6 f839 	bl	80027c8 <_ZSt3maxIfERKT_S2_S2_>
 800c756:	4602      	mov	r2, r0
 800c758:	4b0f      	ldr	r3, [pc, #60]	; (800c798 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800c75a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c75c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c760:	4619      	mov	r1, r3
 800c762:	4610      	mov	r0, r2
 800c764:	f7f6 f8dc 	bl	8002920 <_ZSt3minIfERKT_S2_S2_>
 800c768:	4603      	mov	r3, r0
  table[num - 1] = std::min(
 800c76a:	edd3 7a00 	vldr	s15, [r3]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c774:	3b01      	subs	r3, #1
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	4413      	add	r3, r2
 800c77c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c780:	ee17 2a90 	vmov	r2, s15
 800c784:	b212      	sxth	r2, r2
 800c786:	801a      	strh	r2, [r3, #0]
}
 800c788:	bf00      	nop
 800c78a:	3750      	adds	r7, #80	; 0x50
 800c78c:	46bd      	mov	sp, r7
 800c78e:	ecbd 8b02 	vpop	{d8}
 800c792:	bd80      	pop	{r7, pc}
 800c794:	47000000 	.word	0x47000000
 800c798:	46fffe00 	.word	0x46fffe00

0800c79c <_ZN6tflite26generic_int16_table_lookupEsPKs>:

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	6039      	str	r1, [r7, #0]
 800c7a6:	80fb      	strh	r3, [r7, #6]
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 800c7a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7ac:	11db      	asrs	r3, r3, #7
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c7b4:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 800c7b6:	8afb      	ldrh	r3, [r7, #22]
 800c7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7bc:	d306      	bcc.n	800c7cc <_ZN6tflite26generic_int16_table_lookupEsPKs+0x30>
 800c7be:	4b1b      	ldr	r3, [pc, #108]	; (800c82c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 800c7c0:	4a1b      	ldr	r2, [pc, #108]	; (800c830 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 800c7c2:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800c7c6:	481b      	ldr	r0, [pc, #108]	; (800c834 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 800c7c8:	f005 fab2 	bl	8011d30 <__assert_func>
  int16_t offset = value & 0x7f;
 800c7cc:	88fb      	ldrh	r3, [r7, #6]
 800c7ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7d2:	82bb      	strh	r3, [r7, #20]

  // base and slope are Q0.15
  int16_t base = lut[index];
 800c7d4:	8afb      	ldrh	r3, [r7, #22]
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	683a      	ldr	r2, [r7, #0]
 800c7da:	4413      	add	r3, r2
 800c7dc:	881b      	ldrh	r3, [r3, #0]
 800c7de:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 800c7e0:	8afb      	ldrh	r3, [r7, #22]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	005b      	lsls	r3, r3, #1
 800c7e6:	683a      	ldr	r2, [r7, #0]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	8afb      	ldrh	r3, [r7, #22]
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	440b      	add	r3, r1
 800c7f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	b29b      	uxth	r3, r3
 800c802:	823b      	strh	r3, [r7, #16]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 800c804:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c808:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800c80c:	fb02 f303 	mul.w	r3, r2, r3
 800c810:	3340      	adds	r3, #64	; 0x40
 800c812:	11db      	asrs	r3, r3, #7
 800c814:	60fb      	str	r3, [r7, #12]

  // Q0.15 + Q0.15
  return base + delta;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	b29a      	uxth	r2, r3
 800c81a:	8a7b      	ldrh	r3, [r7, #18]
 800c81c:	4413      	add	r3, r2
 800c81e:	b29b      	uxth	r3, r3
 800c820:	b21b      	sxth	r3, r3
}
 800c822:	4618      	mov	r0, r3
 800c824:	3718      	adds	r7, #24
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	08017420 	.word	0x08017420
 800c830:	0801f460 	.word	0x0801f460
 800c834:	0801744c 	.word	0x0801744c

0800c838 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 800c838:	b580      	push	{r7, lr}
 800c83a:	b088      	sub	sp, #32
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	4618      	mov	r0, r3
 800c848:	f001 f81c 	bl	800d884 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800c84c:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	1ad2      	subs	r2, r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	fa02 f303 	lsl.w	r3, r2, r3
 800c860:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 800c864:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 800c866:	69b8      	ldr	r0, [r7, #24]
 800c868:	f001 f81e 	bl	800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800c86c:	4603      	mov	r3, r0
 800c86e:	4618      	mov	r0, r3
 800c870:	f001 f82c 	bl	800d8cc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800c874:	4603      	mov	r3, r0
 800c876:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 800c878:	f107 0314 	add.w	r3, r7, #20
 800c87c:	4618      	mov	r0, r3
 800c87e:	f001 f885 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800c882:	4603      	mov	r3, r0
 800c884:	681b      	ldr	r3, [r3, #0]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3720      	adds	r7, #32
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800c88e:	b590      	push	{r4, r7, lr}
 800c890:	ed2d 8b02 	vpush	{d8}
 800c894:	b08f      	sub	sp, #60	; 0x3c
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
 800c89e:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800c8a0:	68b8      	ldr	r0, [r7, #8]
 800c8a2:	f7f4 fd1d 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	6a39      	ldr	r1, [r7, #32]
 800c8b0:	68b8      	ldr	r0, [r7, #8]
 800c8b2:	f7ff fe04 	bl	800c4be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800c8b6:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	6a39      	ldr	r1, [r7, #32]
 800c8be:	68b8      	ldr	r0, [r7, #8]
 800c8c0:	f7f4 fdd9 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800c8c4:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c8ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	f280 8087 	bge.w	800c9e2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 800c8d4:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800c8d8:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800c8da:	2300      	movs	r3, #0
 800c8dc:	633b      	str	r3, [r7, #48]	; 0x30
 800c8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	da15      	bge.n	800c912 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 800c8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e8:	69ba      	ldr	r2, [r7, #24]
 800c8ea:	fb02 f203 	mul.w	r2, r2, r3
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	441a      	add	r2, r3
 800c8f8:	f107 0310 	add.w	r3, r7, #16
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7f5 ff62 	bl	80027c8 <_ZSt3maxIfERKT_S2_S2_>
 800c904:	4603      	mov	r3, r0
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800c90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90c:	3301      	adds	r3, #1
 800c90e:	633b      	str	r3, [r7, #48]	; 0x30
 800c910:	e7e5      	b.n	800c8de <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 800c912:	f04f 0300 	mov.w	r3, #0
 800c916:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800c918:	2300      	movs	r3, #0
 800c91a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c91c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	429a      	cmp	r2, r3
 800c922:	da36      	bge.n	800c992 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800c924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c926:	69ba      	ldr	r2, [r7, #24]
 800c928:	fb02 f203 	mul.w	r2, r2, r3
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	4413      	add	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	4413      	add	r3, r2
 800c936:	ed93 7a00 	vldr	s14, [r3]
 800c93a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c93e:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c948:	4618      	mov	r0, r3
 800c94a:	4621      	mov	r1, r4
 800c94c:	f7f4 f93c 	bl	8000bc8 <__aeabi_d2f>
 800c950:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800c954:	ee68 7a27 	vmul.f32	s15, s16, s15
                                   static_cast<float>(params.beta));
 800c958:	eeb0 0a67 	vmov.f32	s0, s15
 800c95c:	f7ff fd44 	bl	800c3e8 <_ZSt3expf>
 800c960:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 800c964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c966:	69ba      	ldr	r2, [r7, #24]
 800c968:	fb02 f203 	mul.w	r2, r2, r3
 800c96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96e:	4413      	add	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c974:	4413      	add	r3, r2
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 800c97a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c97e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c982:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c986:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	3301      	adds	r3, #1
 800c98e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c990:	e7c4      	b.n	800c91c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 800c992:	2300      	movs	r3, #0
 800c994:	627b      	str	r3, [r7, #36]	; 0x24
 800c996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	da1d      	bge.n	800c9da <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 800c99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a0:	69ba      	ldr	r2, [r7, #24]
 800c9a2:	fb02 f203 	mul.w	r2, r2, r3
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	4413      	add	r3, r2
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9ae:	4413      	add	r3, r2
 800c9b0:	edd3 6a00 	vldr	s13, [r3]
 800c9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b6:	69ba      	ldr	r2, [r7, #24]
 800c9b8:	fb02 f203 	mul.w	r2, r2, r3
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	4413      	add	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9c4:	4413      	add	r3, r2
 800c9c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c9ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9ce:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	627b      	str	r3, [r7, #36]	; 0x24
 800c9d8:	e7dd      	b.n	800c996 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 800c9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9dc:	3301      	adds	r3, #1
 800c9de:	637b      	str	r3, [r7, #52]	; 0x34
 800c9e0:	e773      	b.n	800c8ca <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 800c9e2:	bf00      	nop
 800c9e4:	373c      	adds	r7, #60	; 0x3c
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	ecbd 8b02 	vpop	{d8}
 800c9ec:	bd90      	pop	{r4, r7, pc}
	...

0800c9f0 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b08a      	sub	sp, #40	; 0x28
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
 800c9fc:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	fb02 f203 	mul.w	r2, r2, r3
 800ca06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca08:	4413      	add	r3, r2
 800ca0a:	005b      	lsls	r3, r3, #1
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	4413      	add	r3, r2
 800ca10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca14:	461a      	mov	r2, r3
 800ca16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6899      	ldr	r1, [r3, #8]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	461a      	mov	r2, r3
 800ca28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca2a:	f7f4 fd53 	bl	80014d4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800ca2e:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 800ca30:	6a3b      	ldr	r3, [r7, #32]
 800ca32:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800ca36:	337f      	adds	r3, #127	; 0x7f
 800ca38:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
               static_cast<int32_t>(32767));
 800ca3a:	4b12      	ldr	r3, [pc, #72]	; (800ca84 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 800ca3c:	617b      	str	r3, [r7, #20]
 800ca3e:	f107 0214 	add.w	r2, r7, #20
 800ca42:	f107 0310 	add.w	r3, r7, #16
 800ca46:	4611      	mov	r1, r2
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7f4 fbaf 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ca54:	61bb      	str	r3, [r7, #24]
 800ca56:	f107 0318 	add.w	r3, r7, #24
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	f7f5 fe9f 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 800ca62:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 800ca64:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 800ca66:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca6c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ca70:	4611      	mov	r1, r2
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff fe92 	bl	800c79c <_ZN6tflite26generic_int16_table_lookupEsPKs>
 800ca78:	4603      	mov	r3, r0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3728      	adds	r7, #40	; 0x28
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	ffff8000 	.word	0xffff8000

0800ca88 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 800ca88:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800ca8c:	b09e      	sub	sp, #120	; 0x78
 800ca8e:	af02      	add	r7, sp, #8
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	60b9      	str	r1, [r7, #8]
 800ca94:	607a      	str	r2, [r7, #4]
 800ca96:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ca98:	68b8      	ldr	r0, [r7, #8]
 800ca9a:	f7f4 fc21 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	3b01      	subs	r3, #1
 800caa2:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800caa8:	68b8      	ldr	r0, [r7, #8]
 800caaa:	f7ff fd08 	bl	800c4be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800caae:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800cab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cab2:	683a      	ldr	r2, [r7, #0]
 800cab4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cab6:	68b8      	ldr	r0, [r7, #8]
 800cab8:	f7f4 fcdd 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800cabc:	6538      	str	r0, [r7, #80]	; 0x50

  for (int i = 0; i < outer_size; ++i) {
 800cabe:	2300      	movs	r3, #0
 800cac0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cac2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cac6:	429a      	cmp	r2, r3
 800cac8:	f280 8114 	bge.w	800ccf4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26c>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 800cacc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cad0:	83fb      	strh	r3, [r7, #30]
    for (int c = 0; c < depth; ++c) {
 800cad2:	2300      	movs	r3, #0
 800cad4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cad6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cada:	429a      	cmp	r2, r3
 800cadc:	da16      	bge.n	800cb0c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800cade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cae0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cae2:	fb02 f203 	mul.w	r2, r2, r3
 800cae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cae8:	4413      	add	r3, r2
 800caea:	005b      	lsls	r3, r3, #1
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	441a      	add	r2, r3
 800caf0:	f107 031e 	add.w	r3, r7, #30
 800caf4:	4611      	mov	r1, r2
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff fccb 	bl	800c492 <_ZSt3maxIsERKT_S2_S2_>
 800cafc:	4603      	mov	r3, r0
 800cafe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb02:	83fb      	strh	r3, [r7, #30]
    for (int c = 0; c < depth; ++c) {
 800cb04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb06:	3301      	adds	r3, #1
 800cb08:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb0a:	e7e4      	b.n	800cad6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	667b      	str	r3, [r7, #100]	; 0x64
    int16_t* exp_results_Q015 = output_data + i * depth;
 800cb10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb14:	fb02 f303 	mul.w	r3, r2, r3
 800cb18:	005b      	lsls	r3, r3, #1
 800cb1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cb1e:	4413      	add	r3, r2
 800cb20:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (int c = 0; c < depth; ++c) {
 800cb22:	2300      	movs	r3, #0
 800cb24:	663b      	str	r3, [r7, #96]	; 0x60
 800cb26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	da1f      	bge.n	800cb6e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800cb2e:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
      exp_results_Q015[c] =
 800cb32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb38:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800cb3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb3c:	9301      	str	r3, [sp, #4]
 800cb3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	460b      	mov	r3, r1
 800cb44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb46:	6879      	ldr	r1, [r7, #4]
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f7ff ff51 	bl	800c9f0 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 800cb4e:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 800cb50:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 800cb52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb58:	4413      	add	r3, r2
 800cb5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb62:	4413      	add	r3, r2
 800cb64:	667b      	str	r3, [r7, #100]	; 0x64
    for (int c = 0; c < depth; ++c) {
 800cb66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb68:	3301      	adds	r3, #1
 800cb6a:	663b      	str	r3, [r7, #96]	; 0x60
 800cb6c:	e7db      	b.n	800cb26 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 800cb6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 fe87 	bl	800d884 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800cb76:	4603      	mov	r3, r0
 800cb78:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 800cb7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb7e:	461a      	mov	r2, r3
 800cb80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800cb84:	f897 104b 	ldrb.w	r1, [r7, #75]	; 0x4b
 800cb88:	3901      	subs	r1, #1
 800cb8a:	f1a1 0620 	sub.w	r6, r1, #32
 800cb8e:	f1c1 0020 	rsb	r0, r1, #32
 800cb92:	fa03 f501 	lsl.w	r5, r3, r1
 800cb96:	fa02 f606 	lsl.w	r6, r2, r6
 800cb9a:	4335      	orrs	r5, r6
 800cb9c:	fa22 f000 	lsr.w	r0, r2, r0
 800cba0:	4305      	orrs	r5, r0
 800cba2:	fa02 f401 	lsl.w	r4, r2, r1
 800cba6:	f514 5000 	adds.w	r0, r4, #8192	; 0x2000
 800cbaa:	f145 0100 	adc.w	r1, r5, #0
         (1 << 13)) >>
 800cbae:	f04f 0200 	mov.w	r2, #0
 800cbb2:	f04f 0300 	mov.w	r3, #0
 800cbb6:	0b82      	lsrs	r2, r0, #14
 800cbb8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800cbbc:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	647b      	str	r3, [r7, #68]	; 0x44
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 800cbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbc4:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 800cbc8:	61bb      	str	r3, [r7, #24]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
                 static_cast<int32_t>(32767)));
 800cbca:	4b4d      	ldr	r3, [pc, #308]	; (800cd00 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x278>)
 800cbcc:	623b      	str	r3, [r7, #32]
 800cbce:	f107 0220 	add.w	r2, r7, #32
 800cbd2:	f107 0318 	add.w	r3, r7, #24
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7f4 fae7 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800cbe4:	627b      	str	r3, [r7, #36]	; 0x24
 800cbe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbea:	4619      	mov	r1, r3
 800cbec:	4610      	mov	r0, r2
 800cbee:	f7f5 fdd7 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 800cbf2:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 800cbf4:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 800cbf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbfe:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800cc02:	4611      	mov	r1, r2
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff fdc9 	bl	800c79c <_ZN6tflite26generic_int16_table_lookupEsPKs>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 800cc10:	2300      	movs	r3, #0
 800cc12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	da67      	bge.n	800ccec <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x264>
      uint8_t right_shift = 31 - headroom_plus_one;
 800cc1c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cc20:	f1c3 031f 	rsb	r3, r3, #31
 800cc24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      int64_t round = 1 << (right_shift - 1);
 800cc28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	2201      	movs	r2, #1
 800cc30:	fa02 f303 	lsl.w	r3, r2, r3
 800cc34:	461a      	mov	r2, r3
 800cc36:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800cc3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800cc3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc40:	005b      	lsls	r3, r3, #1
 800cc42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc44:	4413      	add	r3, r2
 800cc46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc4a:	b218      	sxth	r0, r3
 800cc4c:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800cc50:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800cc54:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800cc58:	fb02 fc01 	mul.w	ip, r2, r1
 800cc5c:	fb00 f603 	mul.w	r6, r0, r3
 800cc60:	4466      	add	r6, ip
 800cc62:	fba0 2302 	umull	r2, r3, r0, r2
 800cc66:	18f1      	adds	r1, r6, r3
 800cc68:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800cc6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cc6e:	eb12 0b00 	adds.w	fp, r2, r0
 800cc72:	eb43 0c01 	adc.w	ip, r3, r1
                        round) >>
 800cc76:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800cc7a:	f1c1 0620 	rsb	r6, r1, #32
 800cc7e:	f1b1 0020 	subs.w	r0, r1, #32
 800cc82:	fa2b f801 	lsr.w	r8, fp, r1
 800cc86:	fa0c f606 	lsl.w	r6, ip, r6
 800cc8a:	ea48 0806 	orr.w	r8, r8, r6
 800cc8e:	d403      	bmi.n	800cc98 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x210>
 800cc90:	fa4c f000 	asr.w	r0, ip, r0
 800cc94:	ea48 0800 	orr.w	r8, r8, r0
 800cc98:	fa4c f901 	asr.w	r9, ip, r1
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800cc9c:	4643      	mov	r3, r8
 800cc9e:	617b      	str	r3, [r7, #20]
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
                   static_cast<int32_t>(32767)));
 800cca0:	2300      	movs	r3, #0
 800cca2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cca4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cca8:	f107 0314 	add.w	r3, r7, #20
 800ccac:	4611      	mov	r1, r2
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7f4 fa7c 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ccba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	f7f5 fd6c 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 800ccc8:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 800ccca:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 800cccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccd0:	fb02 f203 	mul.w	r2, r2, r3
 800ccd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccd6:	4413      	add	r3, r2
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ccde:	4413      	add	r3, r2
 800cce0:	b20a      	sxth	r2, r1
 800cce2:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 800cce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cce6:	3301      	adds	r3, #1
 800cce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccea:	e793      	b.n	800cc14 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x18c>
  for (int i = 0; i < outer_size; ++i) {
 800ccec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccee:	3301      	adds	r3, #1
 800ccf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ccf2:	e6e6      	b.n	800cac2 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 800ccf4:	bf00      	nop
 800ccf6:	3770      	adds	r7, #112	; 0x70
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800ccfe:	bf00      	nop
 800cd00:	ffff8000 	.word	0xffff8000
 800cd04:	00000000 	.word	0x00000000

0800cd08 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	b091      	sub	sp, #68	; 0x44
 800cd0e:	af06      	add	r7, sp, #24
 800cd10:	60f8      	str	r0, [r7, #12]
 800cd12:	60b9      	str	r1, [r7, #8]
 800cd14:	607a      	str	r2, [r7, #4]
 800cd16:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8 ||
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	2b03      	cmp	r3, #3
 800cd1e:	d008      	beq.n	800cd32 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a>
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b09      	cmp	r3, #9
 800cd26:	d004      	beq.n	800cd32 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a>
      input->type == kTfLiteInt16) {
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8 ||
 800cd2c:	2b07      	cmp	r3, #7
 800cd2e:	f040 81f1 	bne.w	800d114 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x40c>
    if (input->type == kTfLiteUInt8) {
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b03      	cmp	r3, #3
 800cd38:	d134      	bne.n	800cda4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9c>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d019      	beq.n	800cd76 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x6e>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	695c      	ldr	r4, [r3, #20]
 800cd46:	68fd      	ldr	r5, [r7, #12]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7f4 f973 	bl	8001038 <TfLiteTypeGetName>
 800cd52:	4606      	mov	r6, r0
 800cd54:	2003      	movs	r0, #3
 800cd56:	f7f4 f96f 	bl	8001038 <TfLiteTypeGetName>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	9303      	str	r3, [sp, #12]
 800cd5e:	9602      	str	r6, [sp, #8]
 800cd60:	4ba1      	ldr	r3, [pc, #644]	; (800cfe8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 800cd62:	9301      	str	r3, [sp, #4]
 800cd64:	4ba1      	ldr	r3, [pc, #644]	; (800cfec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	2329      	movs	r3, #41	; 0x29
 800cd6a:	4aa1      	ldr	r2, [pc, #644]	; (800cff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800cd6c:	49a1      	ldr	r1, [pc, #644]	; (800cff4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800cd6e:	4628      	mov	r0, r5
 800cd70:	47a0      	blx	r4
 800cd72:	2301      	movs	r3, #1
 800cd74:	e215      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f000 8164 	beq.w	800d048 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	695c      	ldr	r4, [r3, #20]
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	9203      	str	r2, [sp, #12]
 800cd8e:	9302      	str	r3, [sp, #8]
 800cd90:	4b99      	ldr	r3, [pc, #612]	; (800cff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 800cd92:	9301      	str	r3, [sp, #4]
 800cd94:	4b99      	ldr	r3, [pc, #612]	; (800cffc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	232a      	movs	r3, #42	; 0x2a
 800cd9a:	4a95      	ldr	r2, [pc, #596]	; (800cff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800cd9c:	4998      	ldr	r1, [pc, #608]	; (800d000 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800cd9e:	47a0      	blx	r4
 800cda0:	2301      	movs	r3, #1
 800cda2:	e1fe      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
    } else if (input->type == kTfLiteInt16) {
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2b07      	cmp	r3, #7
 800cdaa:	d157      	bne.n	800ce5c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x154>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	691b      	ldr	r3, [r3, #16]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d011      	beq.n	800cdd8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd0>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	695c      	ldr	r4, [r3, #20]
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	9203      	str	r2, [sp, #12]
 800cdc2:	9302      	str	r3, [sp, #8]
 800cdc4:	4b8c      	ldr	r3, [pc, #560]	; (800cff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 800cdc6:	9301      	str	r3, [sp, #4]
 800cdc8:	4b8c      	ldr	r3, [pc, #560]	; (800cffc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	232c      	movs	r3, #44	; 0x2c
 800cdce:	4a88      	ldr	r2, [pc, #544]	; (800cff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800cdd0:	498b      	ldr	r1, [pc, #556]	; (800d000 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800cdd2:	47a0      	blx	r4
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e1e4      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	edd3 7a03 	vldr	s15, [r3, #12]
 800cdde:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800d004 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 800cde2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdea:	dd07      	ble.n	800cdfc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	edd3 7a03 	vldr	s15, [r3, #12]
 800cdf2:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800d004 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 800cdf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdfa:	e006      	b.n	800ce0a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x102>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	edd3 7a03 	vldr	s15, [r3, #12]
 800ce02:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800d004 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 800ce06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce0a:	edc7 7a08 	vstr	s15, [r7, #32]
 800ce0e:	edd7 7a08 	vldr	s15, [r7, #32]
 800ce12:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800d008 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800ce16:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce1e:	f340 8113 	ble.w	800d048 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	695d      	ldr	r5, [r3, #20]
 800ce26:	68fe      	ldr	r6, [r7, #12]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7f3 fb9b 	bl	8000568 <__aeabi_f2d>
 800ce32:	460a      	mov	r2, r1
 800ce34:	4601      	mov	r1, r0
 800ce36:	f04f 0300 	mov.w	r3, #0
 800ce3a:	f04f 547c 	mov.w	r4, #1056964608	; 0x3f000000
 800ce3e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ce42:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ce46:	4b71      	ldr	r3, [pc, #452]	; (800d00c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
 800ce48:	9301      	str	r3, [sp, #4]
 800ce4a:	4b71      	ldr	r3, [pc, #452]	; (800d010 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	232e      	movs	r3, #46	; 0x2e
 800ce50:	4a67      	ldr	r2, [pc, #412]	; (800cff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800ce52:	4970      	ldr	r1, [pc, #448]	; (800d014 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 800ce54:	4630      	mov	r0, r6
 800ce56:	47a8      	blx	r5
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e1a2      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b09      	cmp	r3, #9
 800ce62:	d019      	beq.n	800ce98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x190>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	695c      	ldr	r4, [r3, #20]
 800ce68:	68fd      	ldr	r5, [r7, #12]
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7f4 f8e2 	bl	8001038 <TfLiteTypeGetName>
 800ce74:	4606      	mov	r6, r0
 800ce76:	2009      	movs	r0, #9
 800ce78:	f7f4 f8de 	bl	8001038 <TfLiteTypeGetName>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	9303      	str	r3, [sp, #12]
 800ce80:	9602      	str	r6, [sp, #8]
 800ce82:	4b65      	ldr	r3, [pc, #404]	; (800d018 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 800ce84:	9301      	str	r3, [sp, #4]
 800ce86:	4b65      	ldr	r3, [pc, #404]	; (800d01c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	2330      	movs	r3, #48	; 0x30
 800ce8c:	4a58      	ldr	r2, [pc, #352]	; (800cff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800ce8e:	4959      	ldr	r1, [pc, #356]	; (800cff4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800ce90:	4628      	mov	r0, r5
 800ce92:	47a0      	blx	r4
 800ce94:	2301      	movs	r3, #1
 800ce96:	e184      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
      if (output->type == kTfLiteInt16) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b07      	cmp	r3, #7
 800ce9e:	d157      	bne.n	800cf50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x248>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cea8:	d011      	beq.n	800cece <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	695c      	ldr	r4, [r3, #20]
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	4a5a      	ldr	r2, [pc, #360]	; (800d020 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
 800ceb6:	9203      	str	r2, [sp, #12]
 800ceb8:	9302      	str	r3, [sp, #8]
 800ceba:	4b5a      	ldr	r3, [pc, #360]	; (800d024 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 800cebc:	9301      	str	r3, [sp, #4]
 800cebe:	4b4f      	ldr	r3, [pc, #316]	; (800cffc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	2332      	movs	r3, #50	; 0x32
 800cec4:	4a4a      	ldr	r2, [pc, #296]	; (800cff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800cec6:	494e      	ldr	r1, [pc, #312]	; (800d000 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800cec8:	47a0      	blx	r4
 800ceca:	2301      	movs	r3, #1
 800cecc:	e169      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	edd3 7a03 	vldr	s15, [r3, #12]
 800ced4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800d028 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 800ced8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee0:	dd07      	ble.n	800cef2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ea>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	edd3 7a03 	vldr	s15, [r3, #12]
 800cee8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800d028 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 800ceec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cef0:	e006      	b.n	800cf00 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1f8>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	edd3 7a03 	vldr	s15, [r3, #12]
 800cef8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d028 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 800cefc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800cf04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cf08:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800d02c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
 800cf0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf14:	f340 8098 	ble.w	800d048 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	695d      	ldr	r5, [r3, #20]
 800cf1c:	68fe      	ldr	r6, [r7, #12]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7f3 fb20 	bl	8000568 <__aeabi_f2d>
 800cf28:	460a      	mov	r2, r1
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	f04f 0300 	mov.w	r3, #0
 800cf30:	4c3f      	ldr	r4, [pc, #252]	; (800d030 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
 800cf32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cf36:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cf3a:	4b3e      	ldr	r3, [pc, #248]	; (800d034 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
 800cf3c:	9301      	str	r3, [sp, #4]
 800cf3e:	4b34      	ldr	r3, [pc, #208]	; (800d010 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	2334      	movs	r3, #52	; 0x34
 800cf44:	4a2a      	ldr	r2, [pc, #168]	; (800cff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800cf46:	4933      	ldr	r1, [pc, #204]	; (800d014 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 800cf48:	4630      	mov	r0, r6
 800cf4a:	47a8      	blx	r5
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e128      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	2b09      	cmp	r3, #9
 800cf56:	d019      	beq.n	800cf8c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x284>
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	695c      	ldr	r4, [r3, #20]
 800cf5c:	68fd      	ldr	r5, [r7, #12]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7f4 f868 	bl	8001038 <TfLiteTypeGetName>
 800cf68:	4606      	mov	r6, r0
 800cf6a:	2009      	movs	r0, #9
 800cf6c:	f7f4 f864 	bl	8001038 <TfLiteTypeGetName>
 800cf70:	4603      	mov	r3, r0
 800cf72:	9303      	str	r3, [sp, #12]
 800cf74:	9602      	str	r6, [sp, #8]
 800cf76:	4b28      	ldr	r3, [pc, #160]	; (800d018 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	4b1c      	ldr	r3, [pc, #112]	; (800cfec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	2336      	movs	r3, #54	; 0x36
 800cf80:	4a1b      	ldr	r2, [pc, #108]	; (800cff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800cf82:	491c      	ldr	r1, [pc, #112]	; (800cff4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800cf84:	4628      	mov	r0, r5
 800cf86:	47a0      	blx	r4
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e10a      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800cf94:	d012      	beq.n	800cfbc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	695c      	ldr	r4, [r3, #20]
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800cfa4:	9203      	str	r2, [sp, #12]
 800cfa6:	9302      	str	r3, [sp, #8]
 800cfa8:	4b23      	ldr	r3, [pc, #140]	; (800d038 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
 800cfaa:	9301      	str	r3, [sp, #4]
 800cfac:	4b13      	ldr	r3, [pc, #76]	; (800cffc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	2337      	movs	r3, #55	; 0x37
 800cfb2:	4a0f      	ldr	r2, [pc, #60]	; (800cff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800cfb4:	4912      	ldr	r1, [pc, #72]	; (800d000 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800cfb6:	47a0      	blx	r4
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e0f2      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	edd3 7a03 	vldr	s15, [r3, #12]
 800cfc2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d03c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x334>
 800cfc6:	eef4 7a47 	vcmp.f32	s15, s14
 800cfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfce:	d03b      	beq.n	800d048 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	695c      	ldr	r4, [r3, #20]
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	4b1a      	ldr	r3, [pc, #104]	; (800d040 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x338>)
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	2338      	movs	r3, #56	; 0x38
 800cfdc:	4a04      	ldr	r2, [pc, #16]	; (800cff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800cfde:	4919      	ldr	r1, [pc, #100]	; (800d044 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x33c>)
 800cfe0:	47a0      	blx	r4
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e0dd      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
 800cfe6:	bf00      	nop
 800cfe8:	0801749c 	.word	0x0801749c
 800cfec:	080174ac 	.word	0x080174ac
 800cff0:	08017468 	.word	0x08017468
 800cff4:	08017480 	.word	0x08017480
 800cff8:	080174d8 	.word	0x080174d8
 800cffc:	080174dc 	.word	0x080174dc
 800d000:	080174bc 	.word	0x080174bc
 800d004:	38000000 	.word	0x38000000
 800d008:	3303126f 	.word	0x3303126f
 800d00c:	08017518 	.word	0x08017518
 800d010:	08017524 	.word	0x08017524
 800d014:	080174f8 	.word	0x080174f8
 800d018:	0801753c 	.word	0x0801753c
 800d01c:	08017548 	.word	0x08017548
 800d020:	ffff8000 	.word	0xffff8000
 800d024:	08017554 	.word	0x08017554
 800d028:	37800000 	.word	0x37800000
 800d02c:	3283126f 	.word	0x3283126f
 800d030:	3ef00000 	.word	0x3ef00000
 800d034:	0801755c 	.word	0x0801755c
 800d038:	08017568 	.word	0x08017568
 800d03c:	3b800000 	.word	0x3b800000
 800d040:	08017588 	.word	0x08017588
 800d044:	08017570 	.word	0x08017570
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2b07      	cmp	r3, #7
 800d04e:	d12c      	bne.n	800d0aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a2>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	4618      	mov	r0, r3
 800d056:	f7f3 fa87 	bl	8000568 <__aeabi_f2d>
 800d05a:	4604      	mov	r4, r0
 800d05c:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4618      	mov	r0, r3
 800d064:	f7f3 fa80 	bl	8000568 <__aeabi_f2d>
 800d068:	4602      	mov	r2, r0
 800d06a:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 800d06c:	4620      	mov	r0, r4
 800d06e:	4629      	mov	r1, r5
 800d070:	f7f3 fad2 	bl	8000618 <__aeabi_dmul>
 800d074:	4603      	mov	r3, r0
 800d076:	460c      	mov	r4, r1
 800d078:	4618      	mov	r0, r3
 800d07a:	4621      	mov	r1, r4
      double input_scale_beta_rescale =
 800d07c:	a351      	add	r3, pc, #324	; (adr r3, 800d1c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4bc>)
 800d07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d082:	f7f3 fbf3 	bl	800086c <__aeabi_ddiv>
 800d086:	4603      	mov	r3, r0
 800d088:	460c      	mov	r4, r1
 800d08a:	e9c7 3406 	strd	r3, r4, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 800d08e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d090:	3308      	adds	r3, #8
 800d092:	f107 0214 	add.w	r2, r7, #20
 800d096:	4611      	mov	r1, r2
 800d098:	4618      	mov	r0, r3
 800d09a:	ed97 0b06 	vldr	d0, [r7, #24]
 800d09e:	f7fe fc45 	bl	800b92c <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a6:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 800d0a8:	e07a      	b.n	800d1a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x498>
          static_cast<double>(params->beta),
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7f3 fa5a 	bl	8000568 <__aeabi_f2d>
 800d0b4:	4680      	mov	r8, r0
 800d0b6:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7f3 fa53 	bl	8000568 <__aeabi_f2d>
 800d0c2:	4682      	mov	sl, r0
 800d0c4:	468b      	mov	fp, r1
 800d0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0c8:	3308      	adds	r3, #8
 800d0ca:	f107 0210 	add.w	r2, r7, #16
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	2005      	movs	r0, #5
 800d0d2:	ec4b ab11 	vmov	d1, sl, fp
 800d0d6:	ec49 8b10 	vmov	d0, r8, r9
 800d0da:	f7fe fcf9 	bl	800bad0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 800d0de:	693a      	ldr	r2, [r7, #16]
 800d0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0e2:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 800d0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0e6:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 800d0e8:	221f      	movs	r2, #31
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	2005      	movs	r0, #5
 800d0ee:	f7fe fd37 	bl	800bb60 <_ZN6tflite20CalculateInputRadiusEiii>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7f3 fa25 	bl	8000544 <__aeabi_i2d>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4614      	mov	r4, r2
 800d100:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 800d104:	4620      	mov	r0, r4
 800d106:	4629      	mov	r1, r5
 800d108:	f7f3 fd36 	bl	8000b78 <__aeabi_d2iz>
 800d10c:	4602      	mov	r2, r0
 800d10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d110:	619a      	str	r2, [r3, #24]
    }
 800d112:	e045      	b.n	800d1a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x498>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d019      	beq.n	800d150 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x448>
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	695c      	ldr	r4, [r3, #20]
 800d120:	68fd      	ldr	r5, [r7, #12]
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	4618      	mov	r0, r3
 800d128:	f7f3 ff86 	bl	8001038 <TfLiteTypeGetName>
 800d12c:	4606      	mov	r6, r0
 800d12e:	2001      	movs	r0, #1
 800d130:	f7f3 ff82 	bl	8001038 <TfLiteTypeGetName>
 800d134:	4603      	mov	r3, r0
 800d136:	9303      	str	r3, [sp, #12]
 800d138:	9602      	str	r6, [sp, #8]
 800d13a:	4b1d      	ldr	r3, [pc, #116]	; (800d1b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4a8>)
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	4b1d      	ldr	r3, [pc, #116]	; (800d1b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4ac>)
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	2355      	movs	r3, #85	; 0x55
 800d144:	4a1c      	ldr	r2, [pc, #112]	; (800d1b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b0>)
 800d146:	491d      	ldr	r1, [pc, #116]	; (800d1bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b4>)
 800d148:	4628      	mov	r0, r5
 800d14a:	47a0      	blx	r4
 800d14c:	2301      	movs	r3, #1
 800d14e:	e028      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d019      	beq.n	800d18c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x484>
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	695c      	ldr	r4, [r3, #20]
 800d15c:	68fd      	ldr	r5, [r7, #12]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	4618      	mov	r0, r3
 800d164:	f7f3 ff68 	bl	8001038 <TfLiteTypeGetName>
 800d168:	4606      	mov	r6, r0
 800d16a:	2001      	movs	r0, #1
 800d16c:	f7f3 ff64 	bl	8001038 <TfLiteTypeGetName>
 800d170:	4603      	mov	r3, r0
 800d172:	9303      	str	r3, [sp, #12]
 800d174:	9602      	str	r6, [sp, #8]
 800d176:	4b0e      	ldr	r3, [pc, #56]	; (800d1b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4a8>)
 800d178:	9301      	str	r3, [sp, #4]
 800d17a:	4b11      	ldr	r3, [pc, #68]	; (800d1c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b8>)
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	2356      	movs	r3, #86	; 0x56
 800d180:	4a0d      	ldr	r2, [pc, #52]	; (800d1b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b0>)
 800d182:	490e      	ldr	r1, [pc, #56]	; (800d1bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b4>)
 800d184:	4628      	mov	r0, r5
 800d186:	47a0      	blx	r4
 800d188:	2301      	movs	r3, #1
 800d18a:	e00a      	b.n	800d1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
    op_data->beta = static_cast<double>(params->beta);
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4618      	mov	r0, r3
 800d192:	f7f3 f9e9 	bl	8000568 <__aeabi_f2d>
 800d196:	4603      	mov	r3, r0
 800d198:	460c      	mov	r4, r1
 800d19a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d19c:	e9c2 3400 	strd	r3, r4, [r2]
  }
  return kTfLiteOk;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	372c      	adds	r7, #44	; 0x2c
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ac:	f3af 8000 	nop.w
 800d1b0:	080175ac 	.word	0x080175ac
 800d1b4:	08017548 	.word	0x08017548
 800d1b8:	08017468 	.word	0x08017468
 800d1bc:	08017480 	.word	0x08017480
 800d1c0:	080174ac 	.word	0x080174ac
 800d1c4:	00140014 	.word	0x00140014
 800d1c8:	3f240014 	.word	0x3f240014

0800d1cc <_ZN6tflite12_GLOBAL__N_112SoftmaxFloatEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                  const SoftmaxParams& op_data) {
 800d1cc:	b590      	push	{r4, r7, lr}
 800d1ce:	b093      	sub	sp, #76	; 0x4c
 800d1d0:	af02      	add	r7, sp, #8
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 800d1d8:	f107 0310 	add.w	r3, r7, #16
 800d1dc:	68f9      	ldr	r1, [r7, #12]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7f9 f8b9 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f7f5 fdaf 	bl	8002d48 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800d1ea:	4604      	mov	r4, r0
                                 tflite::micro::GetTensorData<float>(input),
                                 tflite::micro::GetTensorShape(output),
 800d1ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1f0:	68b9      	ldr	r1, [r7, #8]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7f9 f8af 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 800d1f8:	68b8      	ldr	r0, [r7, #8]
 800d1fa:	f7f5 fdb4 	bl	8002d66 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800d1fe:	4602      	mov	r2, r0
 800d200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d204:	f107 0110 	add.w	r1, r7, #16
 800d208:	9200      	str	r2, [sp, #0]
 800d20a:	4622      	mov	r2, r4
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f7ff fb3e 	bl	800c88e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                                 tflite::micro::GetTensorShape(output),
 800d212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d216:	4618      	mov	r0, r3
 800d218:	f7f4 f84c 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 800d21c:	f107 0310 	add.w	r3, r7, #16
 800d220:	4618      	mov	r0, r3
 800d222:	f7f4 f847 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
                                 tflite::micro::GetTensorData<float>(output));
}
 800d226:	bf00      	nop
 800d228:	3744      	adds	r7, #68	; 0x44
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd90      	pop	{r4, r7, pc}

0800d22e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 800d22e:	b590      	push	{r4, r7, lr}
 800d230:	b0b7      	sub	sp, #220	; 0xdc
 800d232:	af02      	add	r7, sp, #8
 800d234:	60f8      	str	r0, [r7, #12]
 800d236:	60b9      	str	r1, [r7, #8]
 800d238:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	7a1b      	ldrb	r3, [r3, #8]
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d127      	bne.n	800d292 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 800d242:	f107 0310 	add.w	r3, r7, #16
 800d246:	68f9      	ldr	r1, [r7, #12]
 800d248:	4618      	mov	r0, r3
 800d24a:	f7f9 f884 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	f7f5 fdc9 	bl	8002de6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800d254:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 800d256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d25a:	68b9      	ldr	r1, [r7, #8]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7f9 f87a 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 800d262:	68b8      	ldr	r0, [r7, #8]
 800d264:	f7f5 fdce 	bl	8002e04 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800d268:	4602      	mov	r2, r0
 800d26a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d26e:	f107 0110 	add.w	r1, r7, #16
 800d272:	9200      	str	r2, [sp, #0]
 800d274:	4622      	mov	r2, r4
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fbb4 	bl	800d9e4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 800d27c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d280:	4618      	mov	r0, r3
 800d282:	f7f4 f817 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 800d286:	f107 0310 	add.w	r3, r7, #16
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7f4 f812 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 800d290:	e07e      	b.n	800d390 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x162>
  } else if (input->type == kTfLiteInt8) {
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	7a1b      	ldrb	r3, [r3, #8]
 800d296:	2b09      	cmp	r3, #9
 800d298:	d153      	bne.n	800d342 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x114>
    if (output->type == kTfLiteInt16) {
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	7a1b      	ldrb	r3, [r3, #8]
 800d29e:	2b07      	cmp	r3, #7
 800d2a0:	d127      	bne.n	800d2f2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xc4>
          op_data, tflite::micro::GetTensorShape(input),
 800d2a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d2a6:	68f9      	ldr	r1, [r7, #12]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7f9 f854 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f7f5 fd6a 	bl	8002d88 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d2b4:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 800d2b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d2ba:	68b9      	ldr	r1, [r7, #8]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7f9 f84a 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800d2c2:	68b8      	ldr	r0, [r7, #8]
 800d2c4:	f7f8 fbe2 	bl	8005a8c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d2ce:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800d2d2:	9200      	str	r2, [sp, #0]
 800d2d4:	4622      	mov	r2, r4
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 fc9f 	bl	800dc1a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800d2dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7f3 ffe7 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800d2e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7f3 ffe2 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800d2f0:	e04e      	b.n	800d390 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x162>
          op_data, tflite::micro::GetTensorShape(input),
 800d2f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d2f6:	68f9      	ldr	r1, [r7, #12]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7f9 f82c 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f7f5 fd42 	bl	8002d88 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d304:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 800d306:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d30a:	68b9      	ldr	r1, [r7, #8]
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7f9 f822 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800d312:	68b8      	ldr	r0, [r7, #8]
 800d314:	f7f5 fd56 	bl	8002dc4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800d318:	4602      	mov	r2, r0
 800d31a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d31e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800d322:	9200      	str	r2, [sp, #0]
 800d324:	4622      	mov	r2, r4
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 fd95 	bl	800de56 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800d32c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d330:	4618      	mov	r0, r3
 800d332:	f7f3 ffbf 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800d336:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7f3 ffba 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800d340:	e026      	b.n	800d390 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x162>
        op_data, tflite::micro::GetTensorShape(input),
 800d342:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d346:	68f9      	ldr	r1, [r7, #12]
 800d348:	4618      	mov	r0, r3
 800d34a:	f7f9 f804 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f000 fe9f 	bl	800e092 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800d354:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 800d356:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800d35a:	68b9      	ldr	r1, [r7, #8]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7f8 fffa 	bl	8006356 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800d362:	68b8      	ldr	r0, [r7, #8]
 800d364:	f7f8 fb92 	bl	8005a8c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800d368:	4602      	mov	r2, r0
 800d36a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800d36e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800d372:	9200      	str	r2, [sp, #0]
 800d374:	4622      	mov	r2, r4
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7ff fb86 	bl	800ca88 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 800d37c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800d380:	4618      	mov	r0, r3
 800d382:	f7f3 ff97 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 800d386:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7f3 ff92 	bl	80012b4 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800d390:	bf00      	nop
 800d392:	37d4      	adds	r7, #212	; 0xd4
 800d394:	46bd      	mov	sp, r7
 800d396:	bd90      	pop	{r4, r7, pc}

0800d398 <_ZN6tflite12_GLOBAL__N_111SoftmaxInitEP13TfLiteContextPKcj>:

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d101      	bne.n	800d3b0 <_ZN6tflite12_GLOBAL__N_111SoftmaxInitEP13TfLiteContextPKcj+0x18>
 800d3ac:	f004 fcb8 	bl	8011d20 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b4:	2138      	movs	r1, #56	; 0x38
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	4798      	blx	r3
 800d3ba:	4603      	mov	r3, r0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	ed87 0a00 	vstr	s0, [r7]
 800d3d0:	ed97 0a00 	vldr	s0, [r7]
 800d3d4:	f7ff f808 	bl	800c3e8 <_ZSt3expf>
 800d3d8:	eef0 7a40 	vmov.f32	s15, s0
 800d3dc:	eeb0 0a67 	vmov.f32	s0, s15
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b082      	sub	sp, #8
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	ed87 0a01 	vstr	s0, [r7, #4]
 800d3f0:	ed97 0a01 	vldr	s0, [r7, #4]
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	f7ff ffe5 	bl	800d3c4 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 800d3fa:	eef0 7a40 	vmov.f32	s15, s0
 800d3fe:	eeb0 0a67 	vmov.f32	s0, s15
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	4b03      	ldr	r3, [pc, #12]	; (800d420 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 800d412:	4618      	mov	r0, r3
 800d414:	370c      	adds	r7, #12
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	0800d3e7 	.word	0x0800d3e7

0800d424 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	ed87 0a00 	vstr	s0, [r7]
 800d430:	edd7 7a00 	vldr	s15, [r7]
 800d434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d438:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d43c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d440:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d444:	eef0 7a66 	vmov.f32	s15, s13
 800d448:	eeb0 0a67 	vmov.f32	s0, s15
 800d44c:	370c      	adds	r7, #12
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr

0800d456 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 800d456:	b580      	push	{r7, lr}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	ed87 0a01 	vstr	s0, [r7, #4]
 800d460:	ed97 0a01 	vldr	s0, [r7, #4]
 800d464:	2000      	movs	r0, #0
 800d466:	f7ff ffdd 	bl	800d424 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 800d46a:	eef0 7a40 	vmov.f32	s15, s0
 800d46e:	eeb0 0a67 	vmov.f32	s0, s15
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	4b03      	ldr	r3, [pc, #12]	; (800d490 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 800d482:	4618      	mov	r0, r3
 800d484:	370c      	adds	r7, #12
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	0800d457 	.word	0x0800d457

0800d494 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800d494:	b5b0      	push	{r4, r5, r7, lr}
 800d496:	b08e      	sub	sp, #56	; 0x38
 800d498:	af04      	add	r7, sp, #16
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800d49e:	6838      	ldr	r0, [r7, #0]
 800d4a0:	f7f4 fbc2 	bl	8001c28 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	bf14      	ite	ne
 800d4aa:	2301      	movne	r3, #1
 800d4ac:	2300      	moveq	r3, #0
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d014      	beq.n	800d4de <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	695c      	ldr	r4, [r3, #20]
 800d4b8:	687d      	ldr	r5, [r7, #4]
 800d4ba:	6838      	ldr	r0, [r7, #0]
 800d4bc:	f7f4 fbb4 	bl	8001c28 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	9303      	str	r3, [sp, #12]
 800d4c6:	9202      	str	r2, [sp, #8]
 800d4c8:	4b80      	ldr	r3, [pc, #512]	; (800d6cc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800d4ca:	9301      	str	r3, [sp, #4]
 800d4cc:	4b80      	ldr	r3, [pc, #512]	; (800d6d0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	238a      	movs	r3, #138	; 0x8a
 800d4d2:	4a80      	ldr	r2, [pc, #512]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d4d4:	4980      	ldr	r1, [pc, #512]	; (800d6d8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	47a0      	blx	r4
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e14e      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800d4de:	6838      	ldr	r0, [r7, #0]
 800d4e0:	f7fe fbbb 	bl	800bc5a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	bf14      	ite	ne
 800d4ea:	2301      	movne	r3, #1
 800d4ec:	2300      	moveq	r3, #0
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d014      	beq.n	800d51e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	695c      	ldr	r4, [r3, #20]
 800d4f8:	687d      	ldr	r5, [r7, #4]
 800d4fa:	6838      	ldr	r0, [r7, #0]
 800d4fc:	f7fe fbad 	bl	800bc5a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800d500:	4602      	mov	r2, r0
 800d502:	2301      	movs	r3, #1
 800d504:	9303      	str	r3, [sp, #12]
 800d506:	9202      	str	r2, [sp, #8]
 800d508:	4b70      	ldr	r3, [pc, #448]	; (800d6cc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	4b73      	ldr	r3, [pc, #460]	; (800d6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	238b      	movs	r3, #139	; 0x8b
 800d512:	4a70      	ldr	r2, [pc, #448]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d514:	4970      	ldr	r1, [pc, #448]	; (800d6d8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800d516:	4628      	mov	r0, r5
 800d518:	47a0      	blx	r4
 800d51a:	2301      	movs	r3, #1
 800d51c:	e12e      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  const TfLiteTensor* input = GetInput(context, node, 0);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	6839      	ldr	r1, [r7, #0]
 800d524:	4618      	mov	r0, r3
 800d526:	f7f9 f82a 	bl	800657e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800d52a:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d10a      	bne.n	800d548 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	695c      	ldr	r4, [r3, #20]
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	4b69      	ldr	r3, [pc, #420]	; (800d6e0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 800d53a:	9300      	str	r3, [sp, #0]
 800d53c:	238d      	movs	r3, #141	; 0x8d
 800d53e:	4a65      	ldr	r2, [pc, #404]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d540:	4968      	ldr	r1, [pc, #416]	; (800d6e4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800d542:	47a0      	blx	r4
 800d544:	2301      	movs	r3, #1
 800d546:	e119      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800d548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d54a:	f7f8 ff4a 	bl	80063e2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	bfd4      	ite	le
 800d554:	2301      	movle	r3, #1
 800d556:	2300      	movgt	r3, #0
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00a      	beq.n	800d574 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	695c      	ldr	r4, [r3, #20]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	4b60      	ldr	r3, [pc, #384]	; (800d6e8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	238e      	movs	r3, #142	; 0x8e
 800d56a:	4a5a      	ldr	r2, [pc, #360]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d56c:	495d      	ldr	r1, [pc, #372]	; (800d6e4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800d56e:	47a0      	blx	r4
 800d570:	2301      	movs	r3, #1
 800d572:	e103      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TfLiteTensor* output = GetOutput(context, node, 0);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	6839      	ldr	r1, [r7, #0]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7f9 f80f 	bl	800659e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800d580:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d10a      	bne.n	800d59e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10a>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	695c      	ldr	r4, [r3, #20]
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	4b57      	ldr	r3, [pc, #348]	; (800d6ec <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	2390      	movs	r3, #144	; 0x90
 800d594:	4a4f      	ldr	r2, [pc, #316]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d596:	4953      	ldr	r1, [pc, #332]	; (800d6e4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800d598:	47a0      	blx	r4
 800d59a:	2301      	movs	r3, #1
 800d59c:	e0ee      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10a      	bne.n	800d5bc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x128>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	695c      	ldr	r4, [r3, #20]
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	4b50      	ldr	r3, [pc, #320]	; (800d6f0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	2392      	movs	r3, #146	; 0x92
 800d5b2:	4a48      	ldr	r2, [pc, #288]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d5b4:	494b      	ldr	r1, [pc, #300]	; (800d6e4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800d5b6:	47a0      	blx	r4
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e0df      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 800d5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	2b07      	cmp	r3, #7
 800d5c8:	d131      	bne.n	800d62e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19a>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ce:	687a      	ldr	r2, [r7, #4]
        context, sizeof(int16_t) * kInt16LUTArraySize);
 800d5d0:	f240 4102 	movw	r1, #1026	; 0x402
 800d5d4:	4610      	mov	r0, r2
 800d5d6:	4798      	blx	r3
 800d5d8:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d10a      	bne.n	800d5f6 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x162>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	695c      	ldr	r4, [r3, #20]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	4b43      	ldr	r3, [pc, #268]	; (800d6f4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	2398      	movs	r3, #152	; 0x98
 800d5ec:	4a39      	ldr	r2, [pc, #228]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d5ee:	493d      	ldr	r1, [pc, #244]	; (800d6e4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800d5f0:	47a0      	blx	r4
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e0c2      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	69ba      	ldr	r2, [r7, #24]
 800d5fa:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d600:	687a      	ldr	r2, [r7, #4]
        context, sizeof(int16_t) * kInt16LUTArraySize);
 800d602:	f240 4102 	movw	r1, #1026	; 0x402
 800d606:	4610      	mov	r0, r2
 800d608:	4798      	blx	r3
 800d60a:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10a      	bne.n	800d628 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x194>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	695c      	ldr	r4, [r3, #20]
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	4b37      	ldr	r3, [pc, #220]	; (800d6f8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	239c      	movs	r3, #156	; 0x9c
 800d61e:	4a2d      	ldr	r2, [pc, #180]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d620:	4930      	ldr	r1, [pc, #192]	; (800d6e4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800d622:	47a0      	blx	r4
 800d624:	2301      	movs	r3, #1
 800d626:	e0a9      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
    op_data->one_over_one_plus_x_lut =
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 800d62e:	6a3b      	ldr	r3, [r7, #32]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	2b07      	cmp	r3, #7
 800d634:	d116      	bne.n	800d664 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1d0>
    TF_LITE_ENSURE(context, input->type == kTfLiteInt8 ||
 800d636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b09      	cmp	r3, #9
 800d63c:	d02c      	beq.n	800d698 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 800d63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b03      	cmp	r3, #3
 800d644:	d028      	beq.n	800d698 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	2b07      	cmp	r3, #7
 800d64c:	d024      	beq.n	800d698 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	695c      	ldr	r4, [r3, #20]
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	4b29      	ldr	r3, [pc, #164]	; (800d6fc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	23a4      	movs	r3, #164	; 0xa4
 800d65a:	4a1e      	ldr	r2, [pc, #120]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d65c:	4921      	ldr	r1, [pc, #132]	; (800d6e4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800d65e:	47a0      	blx	r4
 800d660:	2301      	movs	r3, #1
 800d662:	e08b      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	781a      	ldrb	r2, [r3, #0]
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d013      	beq.n	800d698 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	695c      	ldr	r4, [r3, #20]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	461a      	mov	r2, r3
 800d67c:	6a3b      	ldr	r3, [r7, #32]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	9303      	str	r3, [sp, #12]
 800d682:	9202      	str	r2, [sp, #8]
 800d684:	4b1e      	ldr	r3, [pc, #120]	; (800d700 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	4b1e      	ldr	r3, [pc, #120]	; (800d704 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	23a6      	movs	r3, #166	; 0xa6
 800d68e:	4a11      	ldr	r2, [pc, #68]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d690:	4911      	ldr	r1, [pc, #68]	; (800d6d8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800d692:	47a0      	blx	r4
 800d694:	2301      	movs	r3, #1
 800d696:	e071      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  if (input->type == kTfLiteInt16) {
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b07      	cmp	r3, #7
 800d69e:	d161      	bne.n	800d764 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800d6a0:	6a3b      	ldr	r3, [r7, #32]
 800d6a2:	691b      	ldr	r3, [r3, #16]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d035      	beq.n	800d714 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	695c      	ldr	r4, [r3, #20]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	9203      	str	r2, [sp, #12]
 800d6b6:	9302      	str	r3, [sp, #8]
 800d6b8:	4b13      	ldr	r3, [pc, #76]	; (800d708 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 800d6ba:	9301      	str	r3, [sp, #4]
 800d6bc:	4b13      	ldr	r3, [pc, #76]	; (800d70c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	23ab      	movs	r3, #171	; 0xab
 800d6c2:	4a04      	ldr	r2, [pc, #16]	; (800d6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800d6c4:	4904      	ldr	r1, [pc, #16]	; (800d6d8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800d6c6:	47a0      	blx	r4
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e057      	b.n	800d77c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
 800d6cc:	080175bc 	.word	0x080175bc
 800d6d0:	080175c0 	.word	0x080175c0
 800d6d4:	08017468 	.word	0x08017468
 800d6d8:	080174bc 	.word	0x080174bc
 800d6dc:	080175d0 	.word	0x080175d0
 800d6e0:	080175e4 	.word	0x080175e4
 800d6e4:	08017570 	.word	0x08017570
 800d6e8:	080175f8 	.word	0x080175f8
 800d6ec:	08017614 	.word	0x08017614
 800d6f0:	08017628 	.word	0x08017628
 800d6f4:	08017644 	.word	0x08017644
 800d6f8:	0801765c 	.word	0x0801765c
 800d6fc:	08017680 	.word	0x08017680
 800d700:	080174ac 	.word	0x080174ac
 800d704:	08017548 	.word	0x08017548
 800d708:	080174d8 	.word	0x080174d8
 800d70c:	080174dc 	.word	0x080174dc
 800d710:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 800d714:	f107 0308 	add.w	r3, r7, #8
 800d718:	4618      	mov	r0, r3
 800d71a:	f7ff fe75 	bl	800d408 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d722:	f240 2201 	movw	r2, #513	; 0x201
 800d726:	4619      	mov	r1, r3
 800d728:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 800d710 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>
 800d72c:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800d730:	f7fe ff08 	bl	800c544 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 800d734:	f107 030c 	add.w	r3, r7, #12
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff fe9d 	bl	800d478 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d742:	f240 2201 	movw	r2, #513	; 0x201
 800d746:	4619      	mov	r1, r3
 800d748:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800d74c:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 800d710 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>
 800d750:	f7fe fef8 	bl	800c544 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 800d754:	6a3b      	ldr	r3, [r7, #32]
 800d756:	691a      	ldr	r2, [r3, #16]
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	68da      	ldr	r2, [r3, #12]
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	695b      	ldr	r3, [r3, #20]
 800d768:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	6a3a      	ldr	r2, [r7, #32]
 800d774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d776:	f7ff fac7 	bl	800cd08 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 800d77a:	4603      	mov	r3, r0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3728      	adds	r7, #40	; 0x28
 800d780:	46bd      	mov	sp, r7
 800d782:	bdb0      	pop	{r4, r5, r7, pc}

0800d784 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 800d784:	b5b0      	push	{r4, r5, r7, lr}
 800d786:	b092      	sub	sp, #72	; 0x48
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	6839      	ldr	r1, [r7, #0]
 800d794:	4618      	mov	r0, r3
 800d796:	f7f4 fb1a 	bl	8001dce <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d79a:	6478      	str	r0, [r7, #68]	; 0x44
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7f4 fb23 	bl	8001dee <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800d7a8:	6438      	str	r0, [r7, #64]	; 0x40

  TFLITE_DCHECK(node->user_data != nullptr);
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	691b      	ldr	r3, [r3, #16]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d101      	bne.n	800d7b6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x32>
 800d7b2:	f004 fab5 	bl	8011d20 <abort>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	691b      	ldr	r3, [r3, #16]
 800d7ba:	f107 0408 	add.w	r4, r7, #8
 800d7be:	461d      	mov	r5, r3
 800d7c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d7d0:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 800d7d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7d6:	7a1b      	ldrb	r3, [r3, #8]
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	2b08      	cmp	r3, #8
 800d7dc:	d826      	bhi.n	800d82c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
 800d7de:	a201      	add	r2, pc, #4	; (adr r2, 800d7e4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x60>)
 800d7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e4:	0800d809 	.word	0x0800d809
 800d7e8:	0800d82d 	.word	0x0800d82d
 800d7ec:	0800d81b 	.word	0x0800d81b
 800d7f0:	0800d82d 	.word	0x0800d82d
 800d7f4:	0800d82d 	.word	0x0800d82d
 800d7f8:	0800d82d 	.word	0x0800d82d
 800d7fc:	0800d81b 	.word	0x0800d81b
 800d800:	0800d82d 	.word	0x0800d82d
 800d804:	0800d81b 	.word	0x0800d81b
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 800d808:	f107 0308 	add.w	r3, r7, #8
 800d80c:	461a      	mov	r2, r3
 800d80e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d810:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d812:	f7ff fcdb 	bl	800d1cc <_ZN6tflite12_GLOBAL__N_112SoftmaxFloatEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800d816:	2300      	movs	r3, #0
 800d818:	e017      	b.n	800d84a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc6>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, op_data);
 800d81a:	f107 0308 	add.w	r3, r7, #8
 800d81e:	461a      	mov	r2, r3
 800d820:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d822:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d824:	f7ff fd03 	bl	800d22e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800d828:	2300      	movs	r3, #0
 800d82a:	e00e      	b.n	800d84a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc6>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	695c      	ldr	r4, [r3, #20]
 800d830:	687d      	ldr	r5, [r7, #4]
 800d832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d834:	7a1b      	ldrb	r3, [r3, #8]
 800d836:	4618      	mov	r0, r3
 800d838:	f7f3 fbfe 	bl	8001038 <TfLiteTypeGetName>
 800d83c:	4602      	mov	r2, r0
 800d83e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d840:	7a1b      	ldrb	r3, [r3, #8]
 800d842:	4904      	ldr	r1, [pc, #16]	; (800d854 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd0>)
 800d844:	4628      	mov	r0, r5
 800d846:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800d848:	2301      	movs	r3, #1
  }
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3748      	adds	r7, #72	; 0x48
 800d84e:	46bd      	mov	sp, r7
 800d850:	bdb0      	pop	{r4, r5, r7, pc}
 800d852:	bf00      	nop
 800d854:	080176dc 	.word	0x080176dc

0800d858 <_ZN6tflite16Register_SOFTMAXEv>:
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 800d858:	b4b0      	push	{r4, r5, r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	4a07      	ldr	r2, [pc, #28]	; (800d880 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 800d864:	461c      	mov	r4, r3
 800d866:	4615      	mov	r5, r2
 800d868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d86a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d86c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	bcb0      	pop	{r4, r5, r7}
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	080176f8 	.word	0x080176f8

0800d884 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d003      	beq.n	800d89a <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800d898:	e000      	b.n	800d89c <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800d89a:	2320      	movs	r3, #32
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 800d8b0:	f107 030c 	add.w	r3, r7, #12
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 f869 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6013      	str	r3, [r2, #0]
    return retval;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
  }
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
	...

0800d8cc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08a      	sub	sp, #40	; 0x28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800d8d4:	f000 fbec 	bl	800e0b0 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 fbf2 	bl	800e0c6 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800d8e6:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800d8ea:	f000 fc1e 	bl	800e12a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800d8ee:	4603      	mov	r3, r0
  const F2 constant_48_over_17 =
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f000 fc06 	bl	800e102 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800d8fa:	4823      	ldr	r0, [pc, #140]	; (800d988 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800d8fc:	f000 fc15 	bl	800e12a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800d900:	4603      	mov	r3, r0
  const F2 constant_neg_32_over_17 =
 800d902:	4618      	mov	r0, r3
 800d904:	f000 fbfd 	bl	800e102 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800d908:	4603      	mov	r3, r0
 800d90a:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800d90c:	69b9      	ldr	r1, [r7, #24]
 800d90e:	6a38      	ldr	r0, [r7, #32]
 800d910:	f000 fc18 	bl	800e144 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d914:	4603      	mov	r3, r0
 800d916:	4619      	mov	r1, r3
 800d918:	69f8      	ldr	r0, [r7, #28]
 800d91a:	f000 fc35 	bl	800e188 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d91e:	4603      	mov	r3, r0
 800d920:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800d922:	2300      	movs	r3, #0
 800d924:	627b      	str	r3, [r7, #36]	; 0x24
 800d926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d928:	2b02      	cmp	r3, #2
 800d92a:	dc21      	bgt.n	800d970 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 800d92c:	6979      	ldr	r1, [r7, #20]
 800d92e:	6a38      	ldr	r0, [r7, #32]
 800d930:	f000 fc08 	bl	800e144 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d934:	4603      	mov	r3, r0
 800d936:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800d938:	f000 fc44 	bl	800e1c4 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800d93c:	4603      	mov	r3, r0
    F2 one_minus_half_denominator_times_x =
 800d93e:	6939      	ldr	r1, [r7, #16]
 800d940:	4618      	mov	r0, r3
 800d942:	f000 fc48 	bl	800e1d6 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d946:	4603      	mov	r3, r0
 800d948:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800d94a:	68f9      	ldr	r1, [r7, #12]
 800d94c:	6978      	ldr	r0, [r7, #20]
 800d94e:	f000 fc60 	bl	800e212 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d952:	4603      	mov	r3, r0
 800d954:	4618      	mov	r0, r3
 800d956:	f000 fc7e 	bl	800e256 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800d95a:	4603      	mov	r3, r0
 800d95c:	4619      	mov	r1, r3
 800d95e:	6978      	ldr	r0, [r7, #20]
 800d960:	f000 fc12 	bl	800e188 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d964:	4603      	mov	r3, r0
 800d966:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800d968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96a:	3301      	adds	r3, #1
 800d96c:	627b      	str	r3, [r7, #36]	; 0x24
 800d96e:	e7da      	b.n	800d926 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800d970:	6978      	ldr	r0, [r7, #20]
 800d972:	f000 fc8a 	bl	800e28a <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800d976:	4603      	mov	r3, r0
 800d978:	4618      	mov	r0, r3
 800d97a:	f000 fc9c 	bl	800e2b6 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800d97e:	4603      	mov	r3, r0
}
 800d980:	4618      	mov	r0, r3
 800d982:	3728      	adds	r7, #40	; 0x28
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	c3c3c3c4 	.word	0xc3c3c3c4

0800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4618      	mov	r0, r3
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800d9a2:	b590      	push	{r4, r7, lr}
 800d9a4:	b085      	sub	sp, #20
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800d9aa:	f107 030c 	add.w	r3, r7, #12
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff ffec 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f7f5 fa35 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	6023      	str	r3, [r4, #0]
    return retval;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
  }
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3714      	adds	r7, #20
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd90      	pop	{r4, r7, pc}

0800d9ca <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7f4 ff31 	bl	800283c <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 800d9da:	4603      	mov	r3, r0
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800d9e4:	b590      	push	{r4, r7, lr}
 800d9e6:	b09f      	sub	sp, #124	; 0x7c
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]
 800d9f0:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	699b      	ldr	r3, [r3, #24]
 800da02:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800da04:	68b8      	ldr	r0, [r7, #8]
 800da06:	f7f3 fc6b 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800da0a:	4603      	mov	r3, r0
 800da0c:	3b01      	subs	r3, #1
 800da0e:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da14:	68b8      	ldr	r0, [r7, #8]
 800da16:	f7fe fd52 	bl	800c4be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800da1a:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 800da1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da22:	68b8      	ldr	r0, [r7, #8]
 800da24:	f7f3 fd27 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800da28:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800da2a:	2300      	movs	r3, #0
 800da2c:	677b      	str	r3, [r7, #116]	; 0x74
 800da2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800da30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da32:	429a      	cmp	r2, r3
 800da34:	f280 80ed 	bge.w	800dc12 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800da38:	2300      	movs	r3, #0
 800da3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800da3e:	2300      	movs	r3, #0
 800da40:	673b      	str	r3, [r7, #112]	; 0x70
 800da42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800da44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da46:	429a      	cmp	r2, r3
 800da48:	da16      	bge.n	800da78 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800da4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da4e:	fb02 f203 	mul.w	r2, r2, r3
 800da52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da54:	4413      	add	r3, r2
 800da56:	461a      	mov	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	441a      	add	r2, r3
 800da5c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800da60:	4611      	mov	r1, r2
 800da62:	4618      	mov	r0, r3
 800da64:	f000 fc5b 	bl	800e31e <_ZSt3maxIhERKT_S2_S2_>
 800da68:	4603      	mov	r3, r0
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800da70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da72:	3301      	adds	r3, #1
 800da74:	673b      	str	r3, [r7, #112]	; 0x70
 800da76:	e7e4      	b.n	800da42 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800da78:	f000 fc65 	bl	800e346 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800da7c:	4603      	mov	r3, r0
 800da7e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800da80:	2300      	movs	r3, #0
 800da82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da88:	429a      	cmp	r2, r3
 800da8a:	da2f      	bge.n	800daec <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800da8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da90:	fb02 f203 	mul.w	r2, r2, r3
 800da94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da96:	4413      	add	r3, r2
 800da98:	461a      	mov	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4413      	add	r3, r2
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	461a      	mov	r2, r3
 800daa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800daaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800daac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daae:	429a      	cmp	r2, r3
 800dab0:	db18      	blt.n	800dae4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32_t input_diff_rescaled =
 800dab2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dab4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dab6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dab8:	f7fe fd30 	bl	800c51c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800dabc:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 800dabe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dac0:	f000 fc49 	bl	800e356 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800dac4:	4603      	mov	r3, r0
 800dac6:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800dac8:	69f8      	ldr	r0, [r7, #28]
 800daca:	f000 fc73 	bl	800e3b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800dace:	4603      	mov	r3, r0
 800dad0:	4618      	mov	r0, r3
 800dad2:	f000 fdb7 	bl	800e644 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800dad6:	4603      	mov	r3, r0
 800dad8:	4619      	mov	r1, r3
 800dada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dadc:	f000 fc4c 	bl	800e378 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800dae0:	4603      	mov	r3, r0
 800dae2:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800dae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dae6:	3301      	adds	r3, #1
 800dae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800daea:	e7cb      	b.n	800da84 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800daec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800daf0:	4618      	mov	r0, r3
 800daf2:	f000 fdc1 	bl	800e678 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800daf6:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dafe:	210c      	movs	r1, #12
 800db00:	4618      	mov	r0, r3
 800db02:	f7fe fe99 	bl	800c838 <_ZN6tflite13GetReciprocalEliPi>
 800db06:	4603      	mov	r3, r0
 800db08:	4618      	mov	r0, r3
 800db0a:	f7ff fecd 	bl	800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800db0e:	4603      	mov	r3, r0
 800db10:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800db12:	2300      	movs	r3, #0
 800db14:	66bb      	str	r3, [r7, #104]	; 0x68
 800db16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db1a:	429a      	cmp	r2, r3
 800db1c:	da75      	bge.n	800dc0a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800db1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db22:	fb02 f203 	mul.w	r2, r2, r3
 800db26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db28:	4413      	add	r3, r2
 800db2a:	461a      	mov	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	4413      	add	r3, r2
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	461a      	mov	r2, r3
 800db34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800db3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db40:	429a      	cmp	r2, r3
 800db42:	db50      	blt.n	800dbe6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32_t input_diff_rescaled =
 800db44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800db48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800db4a:	f7fe fce7 	bl	800c51c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800db4e:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 800db50:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800db52:	f000 fc00 	bl	800e356 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800db56:	4603      	mov	r3, r0
 800db58:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800db5a:	69b8      	ldr	r0, [r7, #24]
 800db5c:	f000 fc2a 	bl	800e3b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800db60:	4603      	mov	r3, r0
 800db62:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800db64:	6979      	ldr	r1, [r7, #20]
 800db66:	6a38      	ldr	r0, [r7, #32]
 800db68:	f000 fd91 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800db6c:	4603      	mov	r3, r0
 800db6e:	633b      	str	r3, [r7, #48]	; 0x30
 800db70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db74:	4618      	mov	r0, r3
 800db76:	f7ff ff09 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800db7a:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800db7c:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800db7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800db80:	3217      	adds	r2, #23
 800db82:	4611      	mov	r1, r2
 800db84:	4618      	mov	r0, r3
 800db86:	f000 fda5 	bl	800e6d4 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>
 800db8a:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800db8c:	f7f8 fc05 	bl	800639a <_ZNSt14numeric_limitsIhE3minEv>
 800db90:	4603      	mov	r3, r0
 800db92:	461a      	mov	r2, r3
            unsat_output +
 800db94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db96:	4413      	add	r3, r2
        const int32_t shifted_output =
 800db98:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800db9a:	f7f8 fc06 	bl	80063aa <_ZNSt14numeric_limitsIhE3maxEv>
 800db9e:	4603      	mov	r3, r0
 800dba0:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800dba2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800dba6:	f107 0310 	add.w	r3, r7, #16
 800dbaa:	4611      	mov	r1, r2
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7f4 fdf7 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	f7f8 fbf1 	bl	800639a <_ZNSt14numeric_limitsIhE3minEv>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	63bb      	str	r3, [r7, #56]	; 0x38
 800dbbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f7f3 faf2 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 800dbc8:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800dbca:	6819      	ldr	r1, [r3, #0]
 800dbcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbd0:	fb02 f203 	mul.w	r2, r2, r3
 800dbd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbd6:	4413      	add	r3, r2
 800dbd8:	461a      	mov	r2, r3
 800dbda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dbde:	4413      	add	r3, r2
 800dbe0:	b2ca      	uxtb	r2, r1
 800dbe2:	701a      	strb	r2, [r3, #0]
 800dbe4:	e00d      	b.n	800dc02 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800dbe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbe8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbea:	fb02 f203 	mul.w	r2, r2, r3
 800dbee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbf0:	4413      	add	r3, r2
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dbf8:	189c      	adds	r4, r3, r2
 800dbfa:	f7f8 fbce 	bl	800639a <_ZNSt14numeric_limitsIhE3minEv>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800dc02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc04:	3301      	adds	r3, #1
 800dc06:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc08:	e785      	b.n	800db16 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 800dc0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	677b      	str	r3, [r7, #116]	; 0x74
 800dc10:	e70d      	b.n	800da2e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800dc12:	bf00      	nop
 800dc14:	377c      	adds	r7, #124	; 0x7c
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd90      	pop	{r4, r7, pc}

0800dc1a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800dc1a:	b590      	push	{r4, r7, lr}
 800dc1c:	b09f      	sub	sp, #124	; 0x7c
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	60f8      	str	r0, [r7, #12]
 800dc22:	60b9      	str	r1, [r7, #8]
 800dc24:	607a      	str	r2, [r7, #4]
 800dc26:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	699b      	ldr	r3, [r3, #24]
 800dc38:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800dc3a:	68b8      	ldr	r0, [r7, #8]
 800dc3c:	f7f3 fb50 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800dc40:	4603      	mov	r3, r0
 800dc42:	3b01      	subs	r3, #1
 800dc44:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 800dc46:	683a      	ldr	r2, [r7, #0]
 800dc48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc4a:	68b8      	ldr	r0, [r7, #8]
 800dc4c:	f7fe fc37 	bl	800c4be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800dc50:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 800dc52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc58:	68b8      	ldr	r0, [r7, #8]
 800dc5a:	f7f3 fc0c 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800dc5e:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800dc60:	2300      	movs	r3, #0
 800dc62:	677b      	str	r3, [r7, #116]	; 0x74
 800dc64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dc66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	f280 80f0 	bge.w	800de4e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800dc6e:	2380      	movs	r3, #128	; 0x80
 800dc70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800dc74:	2300      	movs	r3, #0
 800dc76:	673b      	str	r3, [r7, #112]	; 0x70
 800dc78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dc7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	da17      	bge.n	800dcb0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800dc80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc84:	fb02 f203 	mul.w	r2, r2, r3
 800dc88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc8a:	4413      	add	r3, r2
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	441a      	add	r2, r3
 800dc92:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800dc96:	4611      	mov	r1, r2
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 fd83 	bl	800e7a4 <_ZSt3maxIaERKT_S2_S2_>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	f993 3000 	ldrsb.w	r3, [r3]
 800dca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800dca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcaa:	3301      	adds	r3, #1
 800dcac:	673b      	str	r3, [r7, #112]	; 0x70
 800dcae:	e7e3      	b.n	800dc78 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800dcb0:	f000 fb49 	bl	800e346 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800dcb8:	2300      	movs	r3, #0
 800dcba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dcbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	da30      	bge.n	800dd26 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800dcc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dcc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dcc8:	fb02 f203 	mul.w	r2, r2, r3
 800dccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcce:	4413      	add	r3, r2
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f993 3000 	ldrsb.w	r3, [r3]
 800dcda:	461a      	mov	r2, r3
 800dcdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800dce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dce8:	429a      	cmp	r2, r3
 800dcea:	db18      	blt.n	800dd1e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32_t input_diff_rescaled =
 800dcec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dcf0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dcf2:	f7fe fc13 	bl	800c51c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800dcf6:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 800dcf8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dcfa:	f000 fb2c 	bl	800e356 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800dd02:	69f8      	ldr	r0, [r7, #28]
 800dd04:	f000 fb56 	bl	800e3b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f000 fc9a 	bl	800e644 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800dd10:	4603      	mov	r3, r0
 800dd12:	4619      	mov	r1, r3
 800dd14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd16:	f000 fb2f 	bl	800e378 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800dd1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd20:	3301      	adds	r3, #1
 800dd22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd24:	e7ca      	b.n	800dcbc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800dd26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f000 fca4 	bl	800e678 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800dd30:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dd38:	210c      	movs	r1, #12
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7fe fd7c 	bl	800c838 <_ZN6tflite13GetReciprocalEliPi>
 800dd40:	4603      	mov	r3, r0
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7ff fdb0 	bl	800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dd52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd54:	429a      	cmp	r2, r3
 800dd56:	da76      	bge.n	800de46 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800dd58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd5c:	fb02 f203 	mul.w	r2, r2, r3
 800dd60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd62:	4413      	add	r3, r2
 800dd64:	461a      	mov	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4413      	add	r3, r2
 800dd6a:	f993 3000 	ldrsb.w	r3, [r3]
 800dd6e:	461a      	mov	r2, r3
 800dd70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800dd78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	db50      	blt.n	800de22 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32_t input_diff_rescaled =
 800dd80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dd84:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dd86:	f7fe fbc9 	bl	800c51c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800dd8a:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 800dd8c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dd8e:	f000 fae2 	bl	800e356 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800dd92:	4603      	mov	r3, r0
 800dd94:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800dd96:	69b8      	ldr	r0, [r7, #24]
 800dd98:	f000 fb0c 	bl	800e3b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800dda0:	6979      	ldr	r1, [r7, #20]
 800dda2:	6a38      	ldr	r0, [r7, #32]
 800dda4:	f000 fc73 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	633b      	str	r3, [r7, #48]	; 0x30
 800ddac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7ff fdeb 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ddb6:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800ddb8:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800ddba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800ddbc:	320f      	adds	r2, #15
 800ddbe:	4611      	mov	r1, r2
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f000 fc87 	bl	800e6d4 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>
 800ddc6:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800ddc8:	f7f8 faf8 	bl	80063bc <_ZNSt14numeric_limitsIsE3minEv>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	461a      	mov	r2, r3
            unsat_output +
 800ddd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd2:	4413      	add	r3, r2
        const int32_t shifted_output =
 800ddd4:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800ddd6:	f7f8 fafb 	bl	80063d0 <_ZNSt14numeric_limitsIsE3maxEv>
 800ddda:	4603      	mov	r3, r0
 800dddc:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800ddde:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800dde2:	f107 0310 	add.w	r3, r7, #16
 800dde6:	4611      	mov	r1, r2
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7f4 fcd9 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 800ddee:	4604      	mov	r4, r0
 800ddf0:	f7f8 fae4 	bl	80063bc <_ZNSt14numeric_limitsIsE3minEv>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	4620      	mov	r0, r4
 800de00:	f7f3 f9d4 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 800de04:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800de06:	6819      	ldr	r1, [r3, #0]
 800de08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de0c:	fb02 f203 	mul.w	r2, r2, r3
 800de10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de12:	4413      	add	r3, r2
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800de1a:	4413      	add	r3, r2
 800de1c:	b20a      	sxth	r2, r1
 800de1e:	801a      	strh	r2, [r3, #0]
 800de20:	e00d      	b.n	800de3e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800de22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de26:	fb02 f203 	mul.w	r2, r2, r3
 800de2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de2c:	4413      	add	r3, r2
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800de34:	18d4      	adds	r4, r2, r3
 800de36:	f7f8 fac1 	bl	80063bc <_ZNSt14numeric_limitsIsE3minEv>
 800de3a:	4603      	mov	r3, r0
 800de3c:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800de3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de40:	3301      	adds	r3, #1
 800de42:	66bb      	str	r3, [r7, #104]	; 0x68
 800de44:	e784      	b.n	800dd50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800de46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de48:	3301      	adds	r3, #1
 800de4a:	677b      	str	r3, [r7, #116]	; 0x74
 800de4c:	e70a      	b.n	800dc64 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800de4e:	bf00      	nop
 800de50:	377c      	adds	r7, #124	; 0x7c
 800de52:	46bd      	mov	sp, r7
 800de54:	bd90      	pop	{r4, r7, pc}

0800de56 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800de56:	b590      	push	{r4, r7, lr}
 800de58:	b09f      	sub	sp, #124	; 0x7c
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	60f8      	str	r0, [r7, #12]
 800de5e:	60b9      	str	r1, [r7, #8]
 800de60:	607a      	str	r2, [r7, #4]
 800de62:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	68db      	ldr	r3, [r3, #12]
 800de6e:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	699b      	ldr	r3, [r3, #24]
 800de74:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800de76:	68b8      	ldr	r0, [r7, #8]
 800de78:	f7f3 fa32 	bl	80012e0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800de7c:	4603      	mov	r3, r0
 800de7e:	3b01      	subs	r3, #1
 800de80:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de86:	68b8      	ldr	r0, [r7, #8]
 800de88:	f7fe fb19 	bl	800c4be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800de8c:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 800de8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de90:	683a      	ldr	r2, [r7, #0]
 800de92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de94:	68b8      	ldr	r0, [r7, #8]
 800de96:	f7f3 faee 	bl	8001476 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800de9a:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800de9c:	2300      	movs	r3, #0
 800de9e:	677b      	str	r3, [r7, #116]	; 0x74
 800dea0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dea4:	429a      	cmp	r2, r3
 800dea6:	f280 80f0 	bge.w	800e08a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800deaa:	2380      	movs	r3, #128	; 0x80
 800deac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800deb0:	2300      	movs	r3, #0
 800deb2:	673b      	str	r3, [r7, #112]	; 0x70
 800deb4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800deb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deb8:	429a      	cmp	r2, r3
 800deba:	da17      	bge.n	800deec <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800debc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800debe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dec0:	fb02 f203 	mul.w	r2, r2, r3
 800dec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dec6:	4413      	add	r3, r2
 800dec8:	461a      	mov	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	441a      	add	r2, r3
 800dece:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800ded2:	4611      	mov	r1, r2
 800ded4:	4618      	mov	r0, r3
 800ded6:	f000 fc65 	bl	800e7a4 <_ZSt3maxIaERKT_S2_S2_>
 800deda:	4603      	mov	r3, r0
 800dedc:	f993 3000 	ldrsb.w	r3, [r3]
 800dee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800dee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dee6:	3301      	adds	r3, #1
 800dee8:	673b      	str	r3, [r7, #112]	; 0x70
 800deea:	e7e3      	b.n	800deb4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800deec:	f000 fa2b 	bl	800e346 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800def0:	4603      	mov	r3, r0
 800def2:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800def4:	2300      	movs	r3, #0
 800def6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800def8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800defa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800defc:	429a      	cmp	r2, r3
 800defe:	da30      	bge.n	800df62 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800df00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df04:	fb02 f203 	mul.w	r2, r2, r3
 800df08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df0a:	4413      	add	r3, r2
 800df0c:	461a      	mov	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	4413      	add	r3, r2
 800df12:	f993 3000 	ldrsb.w	r3, [r3]
 800df16:	461a      	mov	r2, r3
 800df18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800df20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df24:	429a      	cmp	r2, r3
 800df26:	db18      	blt.n	800df5a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32_t input_diff_rescaled =
 800df28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df2a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800df2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df2e:	f7fe faf5 	bl	800c51c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800df32:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 800df34:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800df36:	f000 fa0e 	bl	800e356 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800df3a:	4603      	mov	r3, r0
 800df3c:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800df3e:	69f8      	ldr	r0, [r7, #28]
 800df40:	f000 fa38 	bl	800e3b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800df44:	4603      	mov	r3, r0
 800df46:	4618      	mov	r0, r3
 800df48:	f000 fb7c 	bl	800e644 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800df4c:	4603      	mov	r3, r0
 800df4e:	4619      	mov	r1, r3
 800df50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df52:	f000 fa11 	bl	800e378 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800df56:	4603      	mov	r3, r0
 800df58:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800df5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df5c:	3301      	adds	r3, #1
 800df5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df60:	e7ca      	b.n	800def8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800df62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df66:	4618      	mov	r0, r3
 800df68:	f000 fb86 	bl	800e678 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800df6c:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800df74:	210c      	movs	r1, #12
 800df76:	4618      	mov	r0, r3
 800df78:	f7fe fc5e 	bl	800c838 <_ZN6tflite13GetReciprocalEliPi>
 800df7c:	4603      	mov	r3, r0
 800df7e:	4618      	mov	r0, r3
 800df80:	f7ff fc92 	bl	800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800df84:	4603      	mov	r3, r0
 800df86:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800df88:	2300      	movs	r3, #0
 800df8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800df8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df90:	429a      	cmp	r2, r3
 800df92:	da76      	bge.n	800e082 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800df94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df98:	fb02 f203 	mul.w	r2, r2, r3
 800df9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df9e:	4413      	add	r3, r2
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	f993 3000 	ldrsb.w	r3, [r3]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800dfb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	db50      	blt.n	800e05e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32_t input_diff_rescaled =
 800dfbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfbe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dfc0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dfc2:	f7fe faab 	bl	800c51c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800dfc6:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 800dfc8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dfca:	f000 f9c4 	bl	800e356 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800dfd2:	69b8      	ldr	r0, [r7, #24]
 800dfd4:	f000 f9ee 	bl	800e3b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800dfdc:	6979      	ldr	r1, [r7, #20]
 800dfde:	6a38      	ldr	r0, [r7, #32]
 800dfe0:	f000 fb55 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	633b      	str	r3, [r7, #48]	; 0x30
 800dfe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7ff fccd 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dff2:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800dff4:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800dff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800dff8:	3217      	adds	r2, #23
 800dffa:	4611      	mov	r1, r2
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 fb69 	bl	800e6d4 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>
 800e002:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800e004:	f7f3 f894 	bl	8001130 <_ZNSt14numeric_limitsIaE3minEv>
 800e008:	4603      	mov	r3, r0
 800e00a:	461a      	mov	r2, r3
            unsat_output +
 800e00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e00e:	4413      	add	r3, r2
        const int32_t shifted_output =
 800e010:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800e012:	f7f3 f896 	bl	8001142 <_ZNSt14numeric_limitsIaE3maxEv>
 800e016:	4603      	mov	r3, r0
 800e018:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800e01a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e01e:	f107 0310 	add.w	r3, r7, #16
 800e022:	4611      	mov	r1, r2
 800e024:	4618      	mov	r0, r3
 800e026:	f7f4 fbbb 	bl	80027a0 <_ZSt3minIlERKT_S2_S2_>
 800e02a:	4604      	mov	r4, r0
 800e02c:	f7f3 f880 	bl	8001130 <_ZNSt14numeric_limitsIaE3minEv>
 800e030:	4603      	mov	r3, r0
 800e032:	63bb      	str	r3, [r7, #56]	; 0x38
 800e034:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e038:	4619      	mov	r1, r3
 800e03a:	4620      	mov	r0, r4
 800e03c:	f7f3 f8b6 	bl	80011ac <_ZSt3maxIlERKT_S2_S2_>
 800e040:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800e042:	6819      	ldr	r1, [r3, #0]
 800e044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e046:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e048:	fb02 f203 	mul.w	r2, r2, r3
 800e04c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e04e:	4413      	add	r3, r2
 800e050:	461a      	mov	r2, r3
 800e052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e056:	4413      	add	r3, r2
 800e058:	b24a      	sxtb	r2, r1
 800e05a:	701a      	strb	r2, [r3, #0]
 800e05c:	e00d      	b.n	800e07a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800e05e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e060:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e062:	fb02 f203 	mul.w	r2, r2, r3
 800e066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e068:	4413      	add	r3, r2
 800e06a:	461a      	mov	r2, r3
 800e06c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e070:	189c      	adds	r4, r3, r2
 800e072:	f7f3 f85d 	bl	8001130 <_ZNSt14numeric_limitsIaE3minEv>
 800e076:	4603      	mov	r3, r0
 800e078:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800e07a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e07c:	3301      	adds	r3, #1
 800e07e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e080:	e784      	b.n	800df8c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800e082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e084:	3301      	adds	r3, #1
 800e086:	677b      	str	r3, [r7, #116]	; 0x74
 800e088:	e70a      	b.n	800dea0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800e08a:	bf00      	nop
 800e08c:	377c      	adds	r7, #124	; 0x7c
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd90      	pop	{r4, r7, pc}

0800e092 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800e092:	b580      	push	{r7, lr}
 800e094:	b082      	sub	sp, #8
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d101      	bne.n	800e0a4 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 800e0a0:	f003 fe3e 	bl	8011d20 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800e0b4:	f000 fb8c 	bl	800e7d0 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800e0b8:	4603      	mov	r3, r0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7ff fc71 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e0c0:	4603      	mov	r3, r0
  }
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800e0c6:	b590      	push	{r4, r7, lr}
 800e0c8:	b083      	sub	sp, #12
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
 800e0ce:	6039      	str	r1, [r7, #0]
 800e0d0:	1d3b      	adds	r3, r7, #4
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7ff fc5a 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	681c      	ldr	r4, [r3, #0]
 800e0dc:	463b      	mov	r3, r7
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7ff fc54 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f7fe f98c 	bl	800c408 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7ff fbd8 	bl	800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	370c      	adds	r7, #12
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd90      	pop	{r4, r7, pc}

0800e102 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800e102:	b590      	push	{r4, r7, lr}
 800e104:	b085      	sub	sp, #20
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800e10a:	f107 030c 	add.w	r3, r7, #12
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 fb65 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e114:	4604      	mov	r4, r0
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7f4 fe85 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e11c:	4603      	mov	r3, r0
 800e11e:	6023      	str	r3, [r4, #0]
    return retval;
 800e120:	68fb      	ldr	r3, [r7, #12]
  }
 800e122:	4618      	mov	r0, r3
 800e124:	3714      	adds	r7, #20
 800e126:	46bd      	mov	sp, r7
 800e128:	bd90      	pop	{r4, r7, pc}

0800e12a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b082      	sub	sp, #8
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800e132:	2100      	movs	r1, #0
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7f4 fb81 	bl	800283c <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 800e13a:	4603      	mov	r3, r0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800e144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800e14e:	1d3b      	adds	r3, r7, #4
 800e150:	4618      	mov	r0, r3
 800e152:	f7ff fc1b 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e156:	4603      	mov	r3, r0
 800e158:	681d      	ldr	r5, [r3, #0]
 800e15a:	463b      	mov	r3, r7
 800e15c:	4618      	mov	r0, r3
 800e15e:	f000 fb3e 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e162:	4603      	mov	r3, r0
 800e164:	681e      	ldr	r6, [r3, #0]
 800e166:	f107 030c 	add.w	r3, r7, #12
 800e16a:	4618      	mov	r0, r3
 800e16c:	f000 fb37 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e170:	4604      	mov	r4, r0
 800e172:	4631      	mov	r1, r6
 800e174:	4628      	mov	r0, r5
 800e176:	f7f3 f82d 	bl	80011d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800e17a:	4603      	mov	r3, r0
 800e17c:	6023      	str	r3, [r4, #0]
  return c;
 800e17e:	68fb      	ldr	r3, [r7, #12]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e188 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800e188:	b590      	push	{r4, r7, lr}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
 800e192:	1d3b      	adds	r3, r7, #4
 800e194:	4618      	mov	r0, r3
 800e196:	f000 fb22 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e19a:	4603      	mov	r3, r0
 800e19c:	681c      	ldr	r4, [r3, #0]
 800e19e:	463b      	mov	r3, r7
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f000 fb1c 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	f7f4 fe76 	bl	8002e9e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f000 fb1d 	bl	800e7f4 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	4618      	mov	r0, r3
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd90      	pop	{r4, r7, pc}

0800e1c4 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	af00      	add	r7, sp, #0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 800e1c8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800e1cc:	f7ff ff99 	bl	800e102 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800e1d0:	4603      	mov	r3, r0
  }
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800e1d6:	b590      	push	{r4, r7, lr}
 800e1d8:	b083      	sub	sp, #12
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
 800e1de:	6039      	str	r1, [r7, #0]
 800e1e0:	1d3b      	adds	r3, r7, #4
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f000 fafb 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	681c      	ldr	r4, [r3, #0]
 800e1ec:	463b      	mov	r3, r7
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f000 faf5 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f000 f881 	bl	800e302 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800e200:	4603      	mov	r3, r0
 800e202:	4618      	mov	r0, r3
 800e204:	f000 faf6 	bl	800e7f4 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800e208:	4603      	mov	r3, r0
 800e20a:	4618      	mov	r0, r3
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd90      	pop	{r4, r7, pc}

0800e212 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800e212:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e214:	b085      	sub	sp, #20
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
 800e21a:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800e21c:	1d3b      	adds	r3, r7, #4
 800e21e:	4618      	mov	r0, r3
 800e220:	f000 fadd 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e224:	4603      	mov	r3, r0
 800e226:	681d      	ldr	r5, [r3, #0]
 800e228:	463b      	mov	r3, r7
 800e22a:	4618      	mov	r0, r3
 800e22c:	f000 fad7 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e230:	4603      	mov	r3, r0
 800e232:	681e      	ldr	r6, [r3, #0]
 800e234:	f107 030c 	add.w	r3, r7, #12
 800e238:	4618      	mov	r0, r3
 800e23a:	f000 faec 	bl	800e816 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800e23e:	4604      	mov	r4, r0
 800e240:	4631      	mov	r1, r6
 800e242:	4628      	mov	r0, r5
 800e244:	f7f2 ffc6 	bl	80011d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800e248:	4603      	mov	r3, r0
 800e24a:	6023      	str	r3, [r4, #0]
  return c;
 800e24c:	68fb      	ldr	r3, [r7, #12]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3714      	adds	r7, #20
 800e252:	46bd      	mov	sp, r7
 800e254:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e256 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800e256:	b5b0      	push	{r4, r5, r7, lr}
 800e258:	b084      	sub	sp, #16
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800e25e:	1d3b      	adds	r3, r7, #4
 800e260:	4618      	mov	r0, r3
 800e262:	f000 fad8 	bl	800e816 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800e266:	4603      	mov	r3, r0
 800e268:	681d      	ldr	r5, [r3, #0]
 800e26a:	f107 030c 	add.w	r3, r7, #12
 800e26e:	4618      	mov	r0, r3
 800e270:	f000 fab5 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e274:	4604      	mov	r4, r0
 800e276:	4628      	mov	r0, r5
 800e278:	f000 fad8 	bl	800e82c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800e27c:	4603      	mov	r3, r0
 800e27e:	6023      	str	r3, [r4, #0]
  return result;
 800e280:	68fb      	ldr	r3, [r7, #12]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bdb0      	pop	{r4, r5, r7, pc}

0800e28a <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800e28a:	b590      	push	{r4, r7, lr}
 800e28c:	b085      	sub	sp, #20
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800e292:	1d3b      	adds	r3, r7, #4
 800e294:	4618      	mov	r0, r3
 800e296:	f000 faa2 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e29a:	4604      	mov	r4, r0
 800e29c:	f107 030c 	add.w	r3, r7, #12
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f000 facf 	bl	800e844 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	6823      	ldr	r3, [r4, #0]
 800e2aa:	6013      	str	r3, [r2, #0]
  return c;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3714      	adds	r7, #20
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd90      	pop	{r4, r7, pc}

0800e2b6 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800e2b6:	b5b0      	push	{r4, r5, r7, lr}
 800e2b8:	b084      	sub	sp, #16
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800e2be:	1d3b      	adds	r3, r7, #4
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f000 fabf 	bl	800e844 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	681d      	ldr	r5, [r3, #0]
 800e2ca:	f107 030c 	add.w	r3, r7, #12
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7ff fb5c 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f000 fabf 	bl	800e85a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	6023      	str	r3, [r4, #0]
  return result;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bdb0      	pop	{r4, r5, r7, pc}

0800e2ea <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b082      	sub	sp, #8
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fabd 	bl	800e872 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800e2f8:	4603      	mov	r3, r0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800e302:	b480      	push	{r7}
 800e304:	b083      	sub	sp, #12
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
 800e30a:	6039      	str	r1, [r7, #0]
  return a - b;
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	1ad3      	subs	r3, r2, r3
}
 800e312:	4618      	mov	r0, r3
 800e314:	370c      	adds	r7, #12
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr

0800e31e <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e31e:	b480      	push	{r7}
 800e320:	b083      	sub	sp, #12
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
 800e326:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	781a      	ldrb	r2, [r3, #0]
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	429a      	cmp	r2, r3
 800e332:	d201      	bcs.n	800e338 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	e000      	b.n	800e33a <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 800e338:	687b      	ldr	r3, [r7, #4]
    }
 800e33a:	4618      	mov	r0, r3
 800e33c:	370c      	adds	r7, #12
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr

0800e346 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 800e346:	b580      	push	{r7, lr}
 800e348:	af00      	add	r7, sp, #0
 800e34a:	2000      	movs	r0, #0
 800e34c:	f000 fa9e 	bl	800e88c <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 800e350:	4603      	mov	r3, r0
 800e352:	4618      	mov	r0, r3
 800e354:	bd80      	pop	{r7, pc}

0800e356 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800e356:	b580      	push	{r7, lr}
 800e358:	b084      	sub	sp, #16
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800e35e:	f107 030c 	add.w	r3, r7, #12
 800e362:	4618      	mov	r0, r3
 800e364:	f000 faa6 	bl	800e8b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e368:	4602      	mov	r2, r0
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6013      	str	r3, [r2, #0]
    return retval;
 800e36e:	68fb      	ldr	r3, [r7, #12]
  }
 800e370:	4618      	mov	r0, r3
 800e372:	3710      	adds	r7, #16
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800e378:	b590      	push	{r4, r7, lr}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
 800e382:	1d3b      	adds	r3, r7, #4
 800e384:	4618      	mov	r0, r3
 800e386:	f000 f977 	bl	800e678 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800e38a:	4603      	mov	r3, r0
 800e38c:	681c      	ldr	r4, [r3, #0]
 800e38e:	463b      	mov	r3, r7
 800e390:	4618      	mov	r0, r3
 800e392:	f000 f971 	bl	800e678 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800e396:	4603      	mov	r3, r0
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4619      	mov	r1, r3
 800e39c:	4620      	mov	r0, r4
 800e39e:	f7f4 fd7e 	bl	8002e9e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f000 fa90 	bl	800e8ca <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd90      	pop	{r4, r7, pc}

0800e3b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 800e3b4:	b590      	push	{r4, r7, lr}
 800e3b6:	b091      	sub	sp, #68	; 0x44
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 800e3bc:	f000 fa96 	bl	800e8ec <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 800e3c4:	2001      	movs	r0, #1
 800e3c6:	f000 fa9a 	bl	800e8fe <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3d0:	f000 faa9 	bl	800e926 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 800e3d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 fac1 	bl	800e962 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f000 fa9e 	bl	800e926 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 800e3ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3f0:	f000 fad5 	bl	800e99e <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f000 faec 	bl	800e9d4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 800e400:	6879      	ldr	r1, [r7, #4]
 800e402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e404:	f000 fa8f 	bl	800e926 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e408:	4603      	mov	r3, r0
 800e40a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e40c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e410:	4618      	mov	r0, r3
 800e412:	f000 fa4f 	bl	800e8b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e416:	4603      	mov	r3, r0
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);  // exp(-1/4)
 800e41c:	4883      	ldr	r0, [pc, #524]	; (800e62c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 800e41e:	f7ff fad4 	bl	800d9ca <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e422:	4603      	mov	r3, r0
 800e424:	4618      	mov	r0, r3
 800e426:	f7ff fabc 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e42a:	4603      	mov	r3, r0
 800e42c:	627b      	str	r3, [r7, #36]	; 0x24
 800e42e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800e432:	f7f4 fcf8 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e436:	4603      	mov	r3, r0
 800e438:	4619      	mov	r1, r3
 800e43a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e43c:	f7f4 fcfe 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e440:	4603      	mov	r3, r0
 800e442:	4618      	mov	r0, r3
 800e444:	f7f4 fd4d 	bl	8002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e448:	4604      	mov	r4, r0
 800e44a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e44c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e44e:	f000 f91e 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e452:	4603      	mov	r3, r0
 800e454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e456:	4619      	mov	r1, r3
 800e458:	4620      	mov	r0, r4
 800e45a:	f000 fb1d 	bl	800ea98 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800e45e:	4603      	mov	r3, r0
 800e460:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);  // exp(-1/2)
 800e462:	4873      	ldr	r0, [pc, #460]	; (800e630 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 800e464:	f7ff fab1 	bl	800d9ca <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e468:	4603      	mov	r3, r0
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7ff fa99 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e470:	4603      	mov	r3, r0
 800e472:	623b      	str	r3, [r7, #32]
 800e474:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800e478:	f7f4 fcd5 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e47c:	4603      	mov	r3, r0
 800e47e:	4619      	mov	r1, r3
 800e480:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e482:	f7f4 fcdb 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e486:	4603      	mov	r3, r0
 800e488:	4618      	mov	r0, r3
 800e48a:	f7f4 fd2a 	bl	8002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e48e:	4604      	mov	r4, r0
 800e490:	6a39      	ldr	r1, [r7, #32]
 800e492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e494:	f000 f8fb 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e498:	4603      	mov	r3, r0
 800e49a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e49c:	4619      	mov	r1, r3
 800e49e:	4620      	mov	r0, r4
 800e4a0:	f000 fafa 	bl	800ea98 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);   // exp(-1)
 800e4a8:	4862      	ldr	r0, [pc, #392]	; (800e634 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 800e4aa:	f7ff fa8e 	bl	800d9ca <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7ff fa76 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	61fb      	str	r3, [r7, #28]
 800e4ba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e4be:	f7f4 fcb2 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e4c8:	f7f4 fcb8 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7f4 fd07 	bl	8002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	69f9      	ldr	r1, [r7, #28]
 800e4d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4da:	f000 f8d8 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f000 fad7 	bl	800ea98 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);   // exp(-2)
 800e4ee:	4852      	ldr	r0, [pc, #328]	; (800e638 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 800e4f0:	f7ff fa6b 	bl	800d9ca <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7ff fa53 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	61bb      	str	r3, [r7, #24]
 800e500:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800e504:	f7f4 fc8f 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e508:	4603      	mov	r3, r0
 800e50a:	4619      	mov	r1, r3
 800e50c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e50e:	f7f4 fc95 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e512:	4603      	mov	r3, r0
 800e514:	4618      	mov	r0, r3
 800e516:	f7f4 fce4 	bl	8002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e51a:	4604      	mov	r4, r0
 800e51c:	69b9      	ldr	r1, [r7, #24]
 800e51e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e520:	f000 f8b5 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e524:	4603      	mov	r3, r0
 800e526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e528:	4619      	mov	r1, r3
 800e52a:	4620      	mov	r0, r4
 800e52c:	f000 fab4 	bl	800ea98 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800e530:	4603      	mov	r3, r0
 800e532:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);    // exp(-4)
 800e534:	4841      	ldr	r0, [pc, #260]	; (800e63c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 800e536:	f7ff fa48 	bl	800d9ca <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e53a:	4603      	mov	r3, r0
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7ff fa30 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e542:	4603      	mov	r3, r0
 800e544:	617b      	str	r3, [r7, #20]
 800e546:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800e54a:	f7f4 fc6c 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e54e:	4603      	mov	r3, r0
 800e550:	4619      	mov	r1, r3
 800e552:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e554:	f7f4 fc72 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e558:	4603      	mov	r3, r0
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7f4 fcc1 	bl	8002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e560:	4604      	mov	r4, r0
 800e562:	6979      	ldr	r1, [r7, #20]
 800e564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e566:	f000 f892 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e56a:	4603      	mov	r3, r0
 800e56c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e56e:	4619      	mov	r1, r3
 800e570:	4620      	mov	r0, r4
 800e572:	f000 fa91 	bl	800ea98 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800e576:	4603      	mov	r3, r0
 800e578:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);      // exp(-8)
 800e57a:	4831      	ldr	r0, [pc, #196]	; (800e640 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 800e57c:	f7ff fa25 	bl	800d9ca <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e580:	4603      	mov	r3, r0
 800e582:	4618      	mov	r0, r3
 800e584:	f7ff fa0d 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e588:	4603      	mov	r3, r0
 800e58a:	613b      	str	r3, [r7, #16]
 800e58c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800e590:	f7f4 fc49 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e594:	4603      	mov	r3, r0
 800e596:	4619      	mov	r1, r3
 800e598:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e59a:	f7f4 fc4f 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f4 fc9e 	bl	8002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	6939      	ldr	r1, [r7, #16]
 800e5aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ac:	f000 f86f 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f000 fa6e 	bl	800ea98 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);         // exp(-16)
 800e5c0:	20f2      	movs	r0, #242	; 0xf2
 800e5c2:	f7ff fa02 	bl	800d9ca <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7ff f9ea 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	60fb      	str	r3, [r7, #12]
 800e5d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e5d6:	f7f4 fc26 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	4619      	mov	r1, r3
 800e5de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5e0:	f7f4 fc2c 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7f4 fc7b 	bl	8002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	68f9      	ldr	r1, [r7, #12]
 800e5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5f2:	f000 f84c 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f000 fa4b 	bl	800ea98 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800e602:	4603      	mov	r3, r0
 800e604:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 fa67 	bl	800eada <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 800e60c:	4604      	mov	r4, r0
 800e60e:	f7ff fd4f 	bl	800e0b0 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800e612:	4603      	mov	r3, r0
 800e614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e616:	4619      	mov	r1, r3
 800e618:	4620      	mov	r0, r4
 800e61a:	f000 fa3d 	bl	800ea98 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800e61e:	4603      	mov	r3, r0
 800e620:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e624:	4618      	mov	r0, r3
 800e626:	3744      	adds	r7, #68	; 0x44
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd90      	pop	{r4, r7, pc}
 800e62c:	63afbe7b 	.word	0x63afbe7b
 800e630:	4da2cbf2 	.word	0x4da2cbf2
 800e634:	2f16ac6c 	.word	0x2f16ac6c
 800e638:	1152aaa4 	.word	0x1152aaa4
 800e63c:	02582ab7 	.word	0x02582ab7
 800e640:	000afe11 	.word	0x000afe11

0800e644 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800e644:	b5b0      	push	{r4, r5, r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800e64c:	1d3b      	adds	r3, r7, #4
 800e64e:	4618      	mov	r0, r3
 800e650:	f7ff f99c 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e654:	4603      	mov	r3, r0
 800e656:	681d      	ldr	r5, [r3, #0]
 800e658:	f107 030c 	add.w	r3, r7, #12
 800e65c:	4618      	mov	r0, r3
 800e65e:	f000 f80b 	bl	800e678 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800e662:	4604      	mov	r4, r0
 800e664:	4628      	mov	r0, r5
 800e666:	f000 fa4a 	bl	800eafe <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 800e66a:	4603      	mov	r3, r0
 800e66c:	6023      	str	r3, [r4, #0]
  return result;
 800e66e:	68fb      	ldr	r3, [r7, #12]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bdb0      	pop	{r4, r5, r7, pc}

0800e678 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4618      	mov	r0, r3
 800e684:	370c      	adds	r7, #12
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr

0800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800e68e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e690:	b085      	sub	sp, #20
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800e698:	1d3b      	adds	r3, r7, #4
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7ff f976 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	681d      	ldr	r5, [r3, #0]
 800e6a4:	463b      	mov	r3, r7
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7ff f970 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	681e      	ldr	r6, [r3, #0]
 800e6b0:	f107 030c 	add.w	r3, r7, #12
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7ff f969 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	4631      	mov	r1, r6
 800e6be:	4628      	mov	r0, r5
 800e6c0:	f7f2 fd88 	bl	80011d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	6023      	str	r3, [r4, #0]
  return c;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3714      	adds	r7, #20
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e6d4 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>:
inline IntegerType RoundingDivideByPOT(IntegerType x, ExponentType exponent) {
 800e6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6d6:	b089      	sub	sp, #36	; 0x24
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  assert(exponent <= 31);
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	2a1f      	cmp	r2, #31
 800e6e2:	d906      	bls.n	800e6f2 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0x1e>
 800e6e4:	4b2c      	ldr	r3, [pc, #176]	; (800e798 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0xc4>)
 800e6e6:	4a2d      	ldr	r2, [pc, #180]	; (800e79c <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0xc8>)
 800e6e8:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800e6ec:	482c      	ldr	r0, [pc, #176]	; (800e7a0 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0xcc>)
 800e6ee:	f003 fb1f 	bl	8011d30 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800e6f2:	f04f 0101 	mov.w	r1, #1
 800e6f6:	f04f 0200 	mov.w	r2, #0
 800e6fa:	6838      	ldr	r0, [r7, #0]
 800e6fc:	f1a0 0620 	sub.w	r6, r0, #32
 800e700:	f1c0 0520 	rsb	r5, r0, #32
 800e704:	fa02 f400 	lsl.w	r4, r2, r0
 800e708:	fa01 f606 	lsl.w	r6, r1, r6
 800e70c:	4334      	orrs	r4, r6
 800e70e:	fa21 f505 	lsr.w	r5, r1, r5
 800e712:	432c      	orrs	r4, r5
 800e714:	fa01 f300 	lsl.w	r3, r1, r0
 800e718:	3b01      	subs	r3, #1
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7f4 fb83 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e720:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800e722:	2000      	movs	r0, #0
 800e724:	f7f4 fb7f 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e728:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800e72a:	2001      	movs	r0, #1
 800e72c:	f7f4 fb7b 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e730:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800e732:	69f9      	ldr	r1, [r7, #28]
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7f4 fb81 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e73a:	6138      	str	r0, [r7, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800e73c:	2101      	movs	r1, #1
 800e73e:	69f8      	ldr	r0, [r7, #28]
 800e740:	f7f4 fb8a 	bl	8002e58 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800e744:	4604      	mov	r4, r0
 800e746:	69b9      	ldr	r1, [r7, #24]
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7f4 fb94 	bl	8002e76 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800e74e:	4603      	mov	r3, r0
 800e750:	6979      	ldr	r1, [r7, #20]
 800e752:	4618      	mov	r0, r3
 800e754:	f7f4 fb72 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e758:	4603      	mov	r3, r0
  const IntegerType threshold =
 800e75a:	4619      	mov	r1, r3
 800e75c:	4620      	mov	r0, r4
 800e75e:	f7f4 fb9e 	bl	8002e9e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800e762:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	4619      	mov	r1, r3
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7f4 fb75 	bl	8002e58 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800e76e:	4604      	mov	r4, r0
 800e770:	68f9      	ldr	r1, [r7, #12]
 800e772:	6938      	ldr	r0, [r7, #16]
 800e774:	f7f4 fba1 	bl	8002eba <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800e778:	4603      	mov	r3, r0
 800e77a:	6979      	ldr	r1, [r7, #20]
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7f4 fb5d 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e782:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 800e784:	4619      	mov	r1, r3
 800e786:	4620      	mov	r0, r4
 800e788:	f7f4 fb89 	bl	8002e9e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800e78c:	4603      	mov	r3, r0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3724      	adds	r7, #36	; 0x24
 800e792:	46bd      	mov	sp, r7
 800e794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e796:	bf00      	nop
 800e798:	08017744 	.word	0x08017744
 800e79c:	0801f3e0 	.word	0x0801f3e0
 800e7a0:	08017728 	.word	0x08017728

0800e7a4 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f993 2000 	ldrsb.w	r2, [r3]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	f993 3000 	ldrsb.w	r3, [r3]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	da01      	bge.n	800e7c2 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	e000      	b.n	800e7c4 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 800e7c2:	687b      	ldr	r3, [r7, #4]
    }
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800e7d4:	f7f2 fcc6 	bl	8001164 <_ZNSt14numeric_limitsIlE3maxEv>
 800e7d8:	4603      	mov	r3, r0
  }
 800e7da:	4618      	mov	r0, r3
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800e7de:	b480      	push	{r7}
 800e7e0:	b083      	sub	sp, #12
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800e7fc:	f107 030c 	add.w	r3, r7, #12
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff ffec 	bl	800e7de <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800e806:	4602      	mov	r2, r0
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6013      	str	r3, [r2, #0]
    return retval;
 800e80c:	68fb      	ldr	r3, [r7, #12]
  }
 800e80e:	4618      	mov	r0, r3
 800e810:	3710      	adds	r7, #16
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800e816:	b480      	push	{r7}
 800e818:	b083      	sub	sp, #12
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	6078      	str	r0, [r7, #4]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4618      	mov	r0, r3
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 f96f 	bl	800eb18 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800e83a:	4603      	mov	r3, r0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3708      	adds	r7, #8
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4618      	mov	r0, r3
 800e850:	370c      	adds	r7, #12
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b082      	sub	sp, #8
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 f99a 	bl	800eb9c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800e868:	4603      	mov	r3, r0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e872:	b580      	push	{r7, lr}
 800e874:	b082      	sub	sp, #8
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800e87a:	2101      	movs	r1, #1
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f7f3 ffdd 	bl	800283c <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 800e882:	4603      	mov	r3, r0
  }
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800e88c:	b590      	push	{r4, r7, lr}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800e894:	f107 030c 	add.w	r3, r7, #12
 800e898:	4618      	mov	r0, r3
 800e89a:	f7ff feed 	bl	800e678 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800e89e:	4604      	mov	r4, r0
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7f4 fac0 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	6023      	str	r3, [r4, #0]
    return retval;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
  }
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3714      	adds	r7, #20
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd90      	pop	{r4, r7, pc}

0800e8b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	370c      	adds	r7, #12
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800e8ca:	b580      	push	{r7, lr}
 800e8cc:	b084      	sub	sp, #16
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800e8d2:	f107 030c 	add.w	r3, r7, #12
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7ff fece 	bl	800e678 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6013      	str	r3, [r2, #0]
    return retval;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
  }
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3710      	adds	r7, #16
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800e8f0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800e8f4:	f000 f803 	bl	800e8fe <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800e8f8:	4603      	mov	r3, r0
  }
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	bd80      	pop	{r7, pc}

0800e8fe <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800e8fe:	b590      	push	{r4, r7, lr}
 800e900:	b085      	sub	sp, #20
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800e906:	f107 030c 	add.w	r3, r7, #12
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7ff ffd2 	bl	800e8b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e910:	4604      	mov	r4, r0
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f7f4 fa87 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e918:	4603      	mov	r3, r0
 800e91a:	6023      	str	r3, [r4, #0]
    return retval;
 800e91c:	68fb      	ldr	r3, [r7, #12]
  }
 800e91e:	4618      	mov	r0, r3
 800e920:	3714      	adds	r7, #20
 800e922:	46bd      	mov	sp, r7
 800e924:	bd90      	pop	{r4, r7, pc}

0800e926 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800e926:	b590      	push	{r4, r7, lr}
 800e928:	b083      	sub	sp, #12
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
 800e92e:	6039      	str	r1, [r7, #0]
 800e930:	1d3b      	adds	r3, r7, #4
 800e932:	4618      	mov	r0, r3
 800e934:	f7ff ffbe 	bl	800e8b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e938:	4603      	mov	r3, r0
 800e93a:	681c      	ldr	r4, [r3, #0]
 800e93c:	463b      	mov	r3, r7
 800e93e:	4618      	mov	r0, r3
 800e940:	f7ff ffb8 	bl	800e8b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e944:	4603      	mov	r3, r0
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4619      	mov	r1, r3
 800e94a:	4620      	mov	r0, r4
 800e94c:	f7ff fcd9 	bl	800e302 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800e950:	4603      	mov	r3, r0
 800e952:	4618      	mov	r0, r3
 800e954:	f7ff fcff 	bl	800e356 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800e958:	4603      	mov	r3, r0
 800e95a:	4618      	mov	r0, r3
 800e95c:	370c      	adds	r7, #12
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd90      	pop	{r4, r7, pc}

0800e962 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 800e962:	b590      	push	{r4, r7, lr}
 800e964:	b083      	sub	sp, #12
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
 800e96a:	6039      	str	r1, [r7, #0]
 800e96c:	1d3b      	adds	r3, r7, #4
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff ffa0 	bl	800e8b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e974:	4603      	mov	r3, r0
 800e976:	681c      	ldr	r4, [r3, #0]
 800e978:	463b      	mov	r3, r7
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7ff ff9a 	bl	800e8b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e980:	4603      	mov	r3, r0
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4619      	mov	r1, r3
 800e986:	4620      	mov	r0, r4
 800e988:	f7f4 fa58 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e98c:	4603      	mov	r3, r0
 800e98e:	4618      	mov	r0, r3
 800e990:	f7ff fce1 	bl	800e356 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800e994:	4603      	mov	r3, r0
 800e996:	4618      	mov	r0, r3
 800e998:	370c      	adds	r7, #12
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd90      	pop	{r4, r7, pc}

0800e99e <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800e99e:	b5b0      	push	{r4, r5, r7, lr}
 800e9a0:	b084      	sub	sp, #16
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800e9a6:	1d3b      	adds	r3, r7, #4
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7ff ff83 	bl	800e8b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	681d      	ldr	r5, [r3, #0]
 800e9b2:	f107 030c 	add.w	r3, r7, #12
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fe ffe8 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e9bc:	4604      	mov	r4, r0
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f000 f98e 	bl	800ece0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	6023      	str	r3, [r4, #0]
  return result;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e9d4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b08a      	sub	sp, #40	; 0x28
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800e9dc:	482c      	ldr	r0, [pc, #176]	; (800ea90 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800e9de:	f7fe fff4 	bl	800d9ca <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e9e2:	4603      	mov	r3, r0
  const F constant_term =
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7fe ffdc 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800e9ee:	4829      	ldr	r0, [pc, #164]	; (800ea94 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800e9f0:	f7fe ffeb 	bl	800d9ca <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800e9f4:	4603      	mov	r3, r0
  const F constant_1_over_3 =
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fe ffd3 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 800ea00:	f000 f97a 	bl	800ecf8 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 800ea04:	4603      	mov	r3, r0
 800ea06:	4619      	mov	r1, r3
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 f97e 	bl	800ed0a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 800ea12:	69f9      	ldr	r1, [r7, #28]
 800ea14:	69f8      	ldr	r0, [r7, #28]
 800ea16:	f7ff fe3a 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 800ea1e:	69f9      	ldr	r1, [r7, #28]
 800ea20:	69b8      	ldr	r0, [r7, #24]
 800ea22:	f7ff fe34 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ea26:	4603      	mov	r3, r0
 800ea28:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 800ea2a:	69b9      	ldr	r1, [r7, #24]
 800ea2c:	69b8      	ldr	r0, [r7, #24]
 800ea2e:	f7ff fe2e 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ea32:	4603      	mov	r3, r0
 800ea34:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 800ea36:	6938      	ldr	r0, [r7, #16]
 800ea38:	f000 f985 	bl	800ed46 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 800ea40:	6979      	ldr	r1, [r7, #20]
 800ea42:	68f8      	ldr	r0, [r7, #12]
 800ea44:	f000 f961 	bl	800ed0a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	6a39      	ldr	r1, [r7, #32]
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7ff fe1e 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ea52:	4603      	mov	r3, r0
 800ea54:	69b9      	ldr	r1, [r7, #24]
 800ea56:	4618      	mov	r0, r3
 800ea58:	f000 f957 	bl	800ed0a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ea5c:	4603      	mov	r3, r0
  F x4_over_24_plus_x3_over_6_plus_x2_over_2 =
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f000 f987 	bl	800ed72 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800ea64:	4603      	mov	r3, r0
 800ea66:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 800ea68:	68b9      	ldr	r1, [r7, #8]
 800ea6a:	69f8      	ldr	r0, [r7, #28]
 800ea6c:	f000 f94d 	bl	800ed0a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ea70:	4603      	mov	r3, r0
 800ea72:	4619      	mov	r1, r3
 800ea74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea76:	f7ff fe0a 	bl	800e68e <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ea7a:	4603      	mov	r3, r0
      constant_term * (x + x4_over_24_plus_x3_over_6_plus_x2_over_2));
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea80:	f000 f98d 	bl	800ed9e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ea84:	4603      	mov	r3, r0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3728      	adds	r7, #40	; 0x28
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	70f5a894 	.word	0x70f5a894
 800ea94:	2aaaaaab 	.word	0x2aaaaaab

0800ea98 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 800ea98:	b590      	push	{r4, r7, lr}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800eaa4:	f107 0308 	add.w	r3, r7, #8
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fe ff6f 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800eaae:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800eab0:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800eab2:	1d3b      	adds	r3, r7, #4
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fe ff69 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800eaba:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	461a      	mov	r2, r3
 800eac0:	4621      	mov	r1, r4
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f000 f8ef 	bl	800eca6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800eac8:	4603      	mov	r3, r0
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fe feec 	bl	800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ead0:	4603      	mov	r3, r0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3714      	adds	r7, #20
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd90      	pop	{r4, r7, pc}

0800eada <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 800eada:	b580      	push	{r7, lr}
 800eadc:	b082      	sub	sp, #8
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
 800eae2:	1d3b      	adds	r3, r7, #4
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7ff fee5 	bl	800e8b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800eaea:	4603      	mov	r3, r0
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f000 f973 	bl	800edda <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b082      	sub	sp, #8
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 f979 	bl	800edfe <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 800eb0c:	4603      	mov	r3, r0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3708      	adds	r7, #8
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
	...

0800eb18 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08a      	sub	sp, #40	; 0x28
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800eb20:	f7f2 fb17 	bl	8001152 <_ZNSt14numeric_limitsIlE3minEv>
 800eb24:	4603      	mov	r3, r0
    const IntegerType min =
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7f4 f97d 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800eb2c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800eb2e:	f7f2 fb19 	bl	8001164 <_ZNSt14numeric_limitsIlE3maxEv>
 800eb32:	4603      	mov	r3, r0
    const IntegerType max =
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7f4 f976 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800eb3a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800eb3c:	2320      	movs	r3, #32
 800eb3e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800eb40:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800eb44:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800eb46:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800eb4a:	f7f4 f96c 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800eb4e:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 800eb50:	4619      	mov	r1, r3
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f7f4 f9b1 	bl	8002eba <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800eb58:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800eb5a:	480f      	ldr	r0, [pc, #60]	; (800eb98 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800eb5c:	f7f4 f963 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800eb60:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 800eb62:	4619      	mov	r1, r3
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f7f4 f986 	bl	8002e76 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800eb6a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800eb6c:	2102      	movs	r1, #2
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 f856 	bl	800ec20 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>
 800eb74:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800eb76:	68fa      	ldr	r2, [r7, #12]
 800eb78:	6a39      	ldr	r1, [r7, #32]
 800eb7a:	6978      	ldr	r0, [r7, #20]
 800eb7c:	f000 f893 	bl	800eca6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800eb80:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb86:	6938      	ldr	r0, [r7, #16]
 800eb88:	f000 f88d 	bl	800eca6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800eb8c:	60f8      	str	r0, [r7, #12]
    return result;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
  }
 800eb90:	4618      	mov	r0, r3
 800eb92:	3728      	adds	r7, #40	; 0x28
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	e0000001 	.word	0xe0000001

0800eb9c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b08a      	sub	sp, #40	; 0x28
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800eba4:	f7f2 fad5 	bl	8001152 <_ZNSt14numeric_limitsIlE3minEv>
 800eba8:	4603      	mov	r3, r0
    const IntegerType min =
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7f4 f93b 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ebb0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800ebb2:	f7f2 fad7 	bl	8001164 <_ZNSt14numeric_limitsIlE3maxEv>
 800ebb6:	4603      	mov	r3, r0
    const IntegerType max =
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7f4 f934 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ebbe:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800ebc0:	2320      	movs	r3, #32
 800ebc2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800ebc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ebc8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800ebca:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800ebce:	f7f4 f92a 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ebd2:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7f4 f96f 	bl	8002eba <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800ebdc:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800ebde:	480f      	ldr	r0, [pc, #60]	; (800ec1c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800ebe0:	f7f4 f921 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ebe4:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f7f4 f944 	bl	8002e76 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800ebee:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800ebf0:	2101      	movs	r1, #1
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 f814 	bl	800ec20 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>
 800ebf8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	6a39      	ldr	r1, [r7, #32]
 800ebfe:	6978      	ldr	r0, [r7, #20]
 800ec00:	f000 f851 	bl	800eca6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800ec04:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec0a:	6938      	ldr	r0, [r7, #16]
 800ec0c:	f000 f84b 	bl	800eca6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800ec10:	60f8      	str	r0, [r7, #12]
    return result;
 800ec12:	68fb      	ldr	r3, [r7, #12]
  }
 800ec14:	4618      	mov	r0, r3
 800ec16:	3728      	adds	r7, #40	; 0x28
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	c0000001 	.word	0xc0000001

0800ec20 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>:
tIntegerType ShiftLeft(tIntegerType a, OffsetType offset) {
 800ec20:	b490      	push	{r4, r7}
 800ec22:	b088      	sub	sp, #32
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800ec30:	e9c7 3406 	strd	r3, r4, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800ec34:	2201      	movs	r2, #1
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	fa02 f303 	lsl.w	r3, r2, r3
 800ec3c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800ec40:	69fa      	ldr	r2, [r7, #28]
 800ec42:	fb03 f102 	mul.w	r1, r3, r2
 800ec46:	69ba      	ldr	r2, [r7, #24]
 800ec48:	fb04 f202 	mul.w	r2, r4, r2
 800ec4c:	440a      	add	r2, r1
 800ec4e:	69b9      	ldr	r1, [r7, #24]
 800ec50:	fba1 3403 	umull	r3, r4, r1, r3
 800ec54:	4422      	add	r2, r4
 800ec56:	4614      	mov	r4, r2
 800ec58:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800ec5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800ec60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec64:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800ec66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ec6a:	60bb      	str	r3, [r7, #8]
             ? min
 800ec6c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ec70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec74:	f174 33ff 	sbcs.w	r3, r4, #4294967295
 800ec78:	db0e      	blt.n	800ec98 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x78>
             : wide_shifted > max ? max
 800ec7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ec7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec82:	f04f 0200 	mov.w	r2, #0
 800ec86:	4299      	cmp	r1, r3
 800ec88:	eb72 0304 	sbcs.w	r3, r2, r4
 800ec8c:	db01      	blt.n	800ec92 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x72>
 800ec8e:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800ec90:	e004      	b.n	800ec9c <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x7c>
             : wide_shifted > max ? max
 800ec92:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800ec96:	e001      	b.n	800ec9c <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x7c>
             ? min
 800ec98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3720      	adds	r7, #32
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bc90      	pop	{r4, r7}
 800eca4:	4770      	bx	lr

0800eca6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800eca6:	b590      	push	{r4, r7, lr}
 800eca8:	b085      	sub	sp, #20
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	60f8      	str	r0, [r7, #12]
 800ecae:	60b9      	str	r1, [r7, #8]
 800ecb0:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800ecb2:	68b9      	ldr	r1, [r7, #8]
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f7f4 f8c1 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800ecba:	4604      	mov	r4, r0
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f7f4 f921 	bl	8002f04 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	6879      	ldr	r1, [r7, #4]
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7f4 f8b8 	bl	8002e3c <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800eccc:	4603      	mov	r3, r0
 800ecce:	4619      	mov	r1, r3
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f000 f8a1 	bl	800ee18 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800ecd6:	4603      	mov	r3, r0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3714      	adds	r7, #20
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd90      	pop	{r4, r7, pc}

0800ece0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f8a3 	bl	800ee34 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 800ecee:	4603      	mov	r3, r0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800ecfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800ed00:	f7fe fe4f 	bl	800d9a2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800ed04:	4603      	mov	r3, r0
  }
 800ed06:	4618      	mov	r0, r3
 800ed08:	bd80      	pop	{r7, pc}

0800ed0a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800ed0a:	b590      	push	{r4, r7, lr}
 800ed0c:	b083      	sub	sp, #12
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
 800ed12:	6039      	str	r1, [r7, #0]
 800ed14:	1d3b      	adds	r3, r7, #4
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fe fe38 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	681c      	ldr	r4, [r3, #0]
 800ed20:	463b      	mov	r3, r7
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7fe fe32 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f7f4 f8b5 	bl	8002e9e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800ed34:	4603      	mov	r3, r0
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fe fdb6 	bl	800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	4618      	mov	r0, r3
 800ed40:	370c      	adds	r7, #12
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd90      	pop	{r4, r7, pc}

0800ed46 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b082      	sub	sp, #8
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800ed4e:	1d3b      	adds	r3, r7, #4
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7fe fe1b 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ed56:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 f8ac 	bl	800eeb8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 800ed60:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fe fda0 	bl	800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ed68:	4603      	mov	r3, r0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b082      	sub	sp, #8
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800ed7a:	1d3b      	adds	r3, r7, #4
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fe fe05 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ed82:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7ff faaf 	bl	800e2ea <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800ed8c:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fe fd8a 	bl	800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ed94:	4603      	mov	r3, r0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800ed9e:	b590      	push	{r4, r7, lr}
 800eda0:	b083      	sub	sp, #12
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800eda8:	1d3b      	adds	r3, r7, #4
 800edaa:	4618      	mov	r0, r3
 800edac:	f7fe fdee 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800edb0:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800edb2:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800edb4:	463b      	mov	r3, r7
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fe fde8 	bl	800d98c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800edbc:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4619      	mov	r1, r3
 800edc2:	4620      	mov	r0, r4
 800edc4:	f000 f884 	bl	800eed0 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 800edc8:	4603      	mov	r3, r0
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fe fd6c 	bl	800d8a8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800edd0:	4603      	mov	r3, r0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	370c      	adds	r7, #12
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd90      	pop	{r4, r7, pc}

0800edda <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 800edda:	b580      	push	{r7, lr}
 800eddc:	b082      	sub	sp, #8
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	bf0c      	ite	eq
 800ede8:	2301      	moveq	r3, #1
 800edea:	2300      	movne	r3, #0
 800edec:	b2db      	uxtb	r3, r3
 800edee:	4618      	mov	r0, r3
 800edf0:	f7f4 f877 	bl	8002ee2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800edf4:	4603      	mov	r3, r0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b082      	sub	sp, #8
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800ee06:	210c      	movs	r1, #12
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7f3 fd17 	bl	800283c <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 800ee0e:	4603      	mov	r3, r0
  }
 800ee10:	4618      	mov	r0, r3
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800ee18:	b480      	push	{r7}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	4053      	eors	r3, r2
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b08a      	sub	sp, #40	; 0x28
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800ee3c:	f7f2 f989 	bl	8001152 <_ZNSt14numeric_limitsIlE3minEv>
 800ee40:	4603      	mov	r3, r0
    const IntegerType min =
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7f3 ffef 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ee48:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800ee4a:	f7f2 f98b 	bl	8001164 <_ZNSt14numeric_limitsIlE3maxEv>
 800ee4e:	4603      	mov	r3, r0
    const IntegerType max =
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7f3 ffe8 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ee56:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800ee58:	2320      	movs	r3, #32
 800ee5a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800ee5c:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 800ee60:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800ee62:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 800ee66:	f7f3 ffde 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ee6a:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f7f4 f823 	bl	8002eba <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800ee74:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800ee76:	480f      	ldr	r0, [pc, #60]	; (800eeb4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 800ee78:	f7f3 ffd5 	bl	8002e26 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ee7c:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 800ee7e:	4619      	mov	r1, r3
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7f3 fff8 	bl	8002e76 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800ee86:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800ee88:	2105      	movs	r1, #5
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7ff fec8 	bl	800ec20 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>
 800ee90:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	6a39      	ldr	r1, [r7, #32]
 800ee96:	6978      	ldr	r0, [r7, #20]
 800ee98:	f7ff ff05 	bl	800eca6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800ee9c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eea2:	6938      	ldr	r0, [r7, #16]
 800eea4:	f7ff feff 	bl	800eca6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800eea8:	60f8      	str	r0, [r7, #12]
    return result;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
  }
 800eeac:	4618      	mov	r0, r3
 800eeae:	3728      	adds	r7, #40	; 0x28
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	fc000001 	.word	0xfc000001

0800eeb8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 f813 	bl	800eeec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 800eec6:	4603      	mov	r3, r0
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
                                                                             b);
 800eeda:	6839      	ldr	r1, [r7, #0]
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 f812 	bl	800ef06 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 800eee2:	4603      	mov	r3, r0
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3708      	adds	r7, #8
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800eef4:	2102      	movs	r1, #2
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f7f3 fca0 	bl	800283c <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 800eefc:	4603      	mov	r3, r0
  }
 800eefe:	4618      	mov	r0, r3
 800ef00:	3708      	adds	r7, #8
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b082      	sub	sp, #8
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
 800ef0e:	6039      	str	r1, [r7, #0]
 800ef10:	6839      	ldr	r1, [r7, #0]
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7f3 ffc3 	bl	8002e9e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
	...

0800ef24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ef2a:	4b0f      	ldr	r3, [pc, #60]	; (800ef68 <HAL_MspInit+0x44>)
 800ef2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef2e:	4a0e      	ldr	r2, [pc, #56]	; (800ef68 <HAL_MspInit+0x44>)
 800ef30:	f043 0301 	orr.w	r3, r3, #1
 800ef34:	6613      	str	r3, [r2, #96]	; 0x60
 800ef36:	4b0c      	ldr	r3, [pc, #48]	; (800ef68 <HAL_MspInit+0x44>)
 800ef38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef3a:	f003 0301 	and.w	r3, r3, #1
 800ef3e:	607b      	str	r3, [r7, #4]
 800ef40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ef42:	4b09      	ldr	r3, [pc, #36]	; (800ef68 <HAL_MspInit+0x44>)
 800ef44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef46:	4a08      	ldr	r2, [pc, #32]	; (800ef68 <HAL_MspInit+0x44>)
 800ef48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef4c:	6593      	str	r3, [r2, #88]	; 0x58
 800ef4e:	4b06      	ldr	r3, [pc, #24]	; (800ef68 <HAL_MspInit+0x44>)
 800ef50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef56:	603b      	str	r3, [r7, #0]
 800ef58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ef5a:	bf00      	nop
 800ef5c:	370c      	adds	r7, #12
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr
 800ef66:	bf00      	nop
 800ef68:	40021000 	.word	0x40021000

0800ef6c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a0a      	ldr	r2, [pc, #40]	; (800efa4 <HAL_CRC_MspInit+0x38>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d10b      	bne.n	800ef96 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800ef7e:	4b0a      	ldr	r3, [pc, #40]	; (800efa8 <HAL_CRC_MspInit+0x3c>)
 800ef80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef82:	4a09      	ldr	r2, [pc, #36]	; (800efa8 <HAL_CRC_MspInit+0x3c>)
 800ef84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ef88:	6493      	str	r3, [r2, #72]	; 0x48
 800ef8a:	4b07      	ldr	r3, [pc, #28]	; (800efa8 <HAL_CRC_MspInit+0x3c>)
 800ef8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ef92:	60fb      	str	r3, [r7, #12]
 800ef94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800ef96:	bf00      	nop
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	40023000 	.word	0x40023000
 800efa8:	40021000 	.word	0x40021000

0800efac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800efac:	b480      	push	{r7}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a0a      	ldr	r2, [pc, #40]	; (800efe4 <HAL_TIM_Base_MspInit+0x38>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d10b      	bne.n	800efd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800efbe:	4b0a      	ldr	r3, [pc, #40]	; (800efe8 <HAL_TIM_Base_MspInit+0x3c>)
 800efc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efc2:	4a09      	ldr	r2, [pc, #36]	; (800efe8 <HAL_TIM_Base_MspInit+0x3c>)
 800efc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efc8:	6613      	str	r3, [r2, #96]	; 0x60
 800efca:	4b07      	ldr	r3, [pc, #28]	; (800efe8 <HAL_TIM_Base_MspInit+0x3c>)
 800efcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efd2:	60fb      	str	r3, [r7, #12]
 800efd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800efd6:	bf00      	nop
 800efd8:	3714      	adds	r7, #20
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	40014400 	.word	0x40014400
 800efe8:	40021000 	.word	0x40021000

0800efec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b08a      	sub	sp, #40	; 0x28
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eff4:	f107 0314 	add.w	r3, r7, #20
 800eff8:	2200      	movs	r2, #0
 800effa:	601a      	str	r2, [r3, #0]
 800effc:	605a      	str	r2, [r3, #4]
 800effe:	609a      	str	r2, [r3, #8]
 800f000:	60da      	str	r2, [r3, #12]
 800f002:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4a17      	ldr	r2, [pc, #92]	; (800f068 <HAL_UART_MspInit+0x7c>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d128      	bne.n	800f060 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800f00e:	4b17      	ldr	r3, [pc, #92]	; (800f06c <HAL_UART_MspInit+0x80>)
 800f010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f012:	4a16      	ldr	r2, [pc, #88]	; (800f06c <HAL_UART_MspInit+0x80>)
 800f014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f018:	6593      	str	r3, [r2, #88]	; 0x58
 800f01a:	4b14      	ldr	r3, [pc, #80]	; (800f06c <HAL_UART_MspInit+0x80>)
 800f01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f01e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f022:	613b      	str	r3, [r7, #16]
 800f024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f026:	4b11      	ldr	r3, [pc, #68]	; (800f06c <HAL_UART_MspInit+0x80>)
 800f028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f02a:	4a10      	ldr	r2, [pc, #64]	; (800f06c <HAL_UART_MspInit+0x80>)
 800f02c:	f043 0301 	orr.w	r3, r3, #1
 800f030:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f032:	4b0e      	ldr	r3, [pc, #56]	; (800f06c <HAL_UART_MspInit+0x80>)
 800f034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f036:	f003 0301 	and.w	r3, r3, #1
 800f03a:	60fb      	str	r3, [r7, #12]
 800f03c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800f03e:	230c      	movs	r3, #12
 800f040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f042:	2302      	movs	r3, #2
 800f044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f046:	2300      	movs	r3, #0
 800f048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f04a:	2303      	movs	r3, #3
 800f04c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f04e:	2307      	movs	r3, #7
 800f050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f052:	f107 0314 	add.w	r3, r7, #20
 800f056:	4619      	mov	r1, r3
 800f058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f05c:	f000 fba0 	bl	800f7a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800f060:	bf00      	nop
 800f062:	3728      	adds	r7, #40	; 0x28
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	40004400 	.word	0x40004400
 800f06c:	40021000 	.word	0x40021000

0800f070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f070:	b480      	push	{r7}
 800f072:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800f074:	bf00      	nop
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f07e:	b480      	push	{r7}
 800f080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f082:	e7fe      	b.n	800f082 <HardFault_Handler+0x4>

0800f084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f084:	b480      	push	{r7}
 800f086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f088:	e7fe      	b.n	800f088 <MemManage_Handler+0x4>

0800f08a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f08a:	b480      	push	{r7}
 800f08c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f08e:	e7fe      	b.n	800f08e <BusFault_Handler+0x4>

0800f090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f090:	b480      	push	{r7}
 800f092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f094:	e7fe      	b.n	800f094 <UsageFault_Handler+0x4>

0800f096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f096:	b480      	push	{r7}
 800f098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f09a:	bf00      	nop
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f0a8:	bf00      	nop
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b0:	4770      	bx	lr

0800f0b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f0b2:	b480      	push	{r7}
 800f0b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f0b6:	bf00      	nop
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f0c4:	f000 f97c 	bl	800f3c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f0c8:	bf00      	nop
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	af00      	add	r7, sp, #0
	return 1;
 800f0d0:	2301      	movs	r3, #1
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <_kill>:

int _kill(int pid, int sig)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800f0e6:	f002 fe41 	bl	8011d6c <__errno>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	2316      	movs	r3, #22
 800f0ee:	6013      	str	r3, [r2, #0]
	return -1;
 800f0f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <_exit>:

void _exit (int status)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800f104:	f04f 31ff 	mov.w	r1, #4294967295
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f7ff ffe7 	bl	800f0dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800f10e:	e7fe      	b.n	800f10e <_exit+0x12>

0800f110 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b086      	sub	sp, #24
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f11c:	2300      	movs	r3, #0
 800f11e:	617b      	str	r3, [r7, #20]
 800f120:	e00a      	b.n	800f138 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800f122:	f3af 8000 	nop.w
 800f126:	4601      	mov	r1, r0
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	1c5a      	adds	r2, r3, #1
 800f12c:	60ba      	str	r2, [r7, #8]
 800f12e:	b2ca      	uxtb	r2, r1
 800f130:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	3301      	adds	r3, #1
 800f136:	617b      	str	r3, [r7, #20]
 800f138:	697a      	ldr	r2, [r7, #20]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	dbf0      	blt.n	800f122 <_read+0x12>
	}

return len;
 800f140:	687b      	ldr	r3, [r7, #4]
}
 800f142:	4618      	mov	r0, r3
 800f144:	3718      	adds	r7, #24
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b086      	sub	sp, #24
 800f14e:	af00      	add	r7, sp, #0
 800f150:	60f8      	str	r0, [r7, #12]
 800f152:	60b9      	str	r1, [r7, #8]
 800f154:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f156:	2300      	movs	r3, #0
 800f158:	617b      	str	r3, [r7, #20]
 800f15a:	e009      	b.n	800f170 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	1c5a      	adds	r2, r3, #1
 800f160:	60ba      	str	r2, [r7, #8]
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	4618      	mov	r0, r3
 800f166:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	3301      	adds	r3, #1
 800f16e:	617b      	str	r3, [r7, #20]
 800f170:	697a      	ldr	r2, [r7, #20]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	429a      	cmp	r2, r3
 800f176:	dbf1      	blt.n	800f15c <_write+0x12>
	}
	return len;
 800f178:	687b      	ldr	r3, [r7, #4]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3718      	adds	r7, #24
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <_close>:

int _close(int file)
{
 800f182:	b480      	push	{r7}
 800f184:	b083      	sub	sp, #12
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
	return -1;
 800f18a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f18e:	4618      	mov	r0, r3
 800f190:	370c      	adds	r7, #12
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b083      	sub	sp, #12
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f1aa:	605a      	str	r2, [r3, #4]
	return 0;
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	370c      	adds	r7, #12
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <_isatty>:

int _isatty(int file)
{
 800f1ba:	b480      	push	{r7}
 800f1bc:	b083      	sub	sp, #12
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
	return 1;
 800f1c2:	2301      	movs	r3, #1
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b085      	sub	sp, #20
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
	return 0;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3714      	adds	r7, #20
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr
	...

0800f1ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b086      	sub	sp, #24
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f1f4:	4a14      	ldr	r2, [pc, #80]	; (800f248 <_sbrk+0x5c>)
 800f1f6:	4b15      	ldr	r3, [pc, #84]	; (800f24c <_sbrk+0x60>)
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f200:	4b13      	ldr	r3, [pc, #76]	; (800f250 <_sbrk+0x64>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d102      	bne.n	800f20e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f208:	4b11      	ldr	r3, [pc, #68]	; (800f250 <_sbrk+0x64>)
 800f20a:	4a12      	ldr	r2, [pc, #72]	; (800f254 <_sbrk+0x68>)
 800f20c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f20e:	4b10      	ldr	r3, [pc, #64]	; (800f250 <_sbrk+0x64>)
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4413      	add	r3, r2
 800f216:	693a      	ldr	r2, [r7, #16]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d207      	bcs.n	800f22c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f21c:	f002 fda6 	bl	8011d6c <__errno>
 800f220:	4602      	mov	r2, r0
 800f222:	230c      	movs	r3, #12
 800f224:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800f226:	f04f 33ff 	mov.w	r3, #4294967295
 800f22a:	e009      	b.n	800f240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f22c:	4b08      	ldr	r3, [pc, #32]	; (800f250 <_sbrk+0x64>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f232:	4b07      	ldr	r3, [pc, #28]	; (800f250 <_sbrk+0x64>)
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4413      	add	r3, r2
 800f23a:	4a05      	ldr	r2, [pc, #20]	; (800f250 <_sbrk+0x64>)
 800f23c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f23e:	68fb      	ldr	r3, [r7, #12]
}
 800f240:	4618      	mov	r0, r3
 800f242:	3718      	adds	r7, #24
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	20010000 	.word	0x20010000
 800f24c:	00000800 	.word	0x00000800
 800f250:	200002f0 	.word	0x200002f0
 800f254:	20000308 	.word	0x20000308

0800f258 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800f258:	b480      	push	{r7}
 800f25a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f25c:	4b17      	ldr	r3, [pc, #92]	; (800f2bc <SystemInit+0x64>)
 800f25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f262:	4a16      	ldr	r2, [pc, #88]	; (800f2bc <SystemInit+0x64>)
 800f264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800f26c:	4b14      	ldr	r3, [pc, #80]	; (800f2c0 <SystemInit+0x68>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a13      	ldr	r2, [pc, #76]	; (800f2c0 <SystemInit+0x68>)
 800f272:	f043 0301 	orr.w	r3, r3, #1
 800f276:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800f278:	4b11      	ldr	r3, [pc, #68]	; (800f2c0 <SystemInit+0x68>)
 800f27a:	2200      	movs	r2, #0
 800f27c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800f27e:	4b10      	ldr	r3, [pc, #64]	; (800f2c0 <SystemInit+0x68>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4a0f      	ldr	r2, [pc, #60]	; (800f2c0 <SystemInit+0x68>)
 800f284:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800f288:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800f28c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800f28e:	4b0c      	ldr	r3, [pc, #48]	; (800f2c0 <SystemInit+0x68>)
 800f290:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f294:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f296:	4b0a      	ldr	r3, [pc, #40]	; (800f2c0 <SystemInit+0x68>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4a09      	ldr	r2, [pc, #36]	; (800f2c0 <SystemInit+0x68>)
 800f29c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f2a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800f2a2:	4b07      	ldr	r3, [pc, #28]	; (800f2c0 <SystemInit+0x68>)
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f2a8:	4b04      	ldr	r3, [pc, #16]	; (800f2bc <SystemInit+0x64>)
 800f2aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f2ae:	609a      	str	r2, [r3, #8]
#endif
}
 800f2b0:	bf00      	nop
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr
 800f2ba:	bf00      	nop
 800f2bc:	e000ed00 	.word	0xe000ed00
 800f2c0:	40021000 	.word	0x40021000

0800f2c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800f2c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f2fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800f2c8:	f7ff ffc6 	bl	800f258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800f2cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800f2ce:	e003      	b.n	800f2d8 <LoopCopyDataInit>

0800f2d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800f2d0:	4b0b      	ldr	r3, [pc, #44]	; (800f300 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800f2d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800f2d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800f2d6:	3104      	adds	r1, #4

0800f2d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800f2d8:	480a      	ldr	r0, [pc, #40]	; (800f304 <LoopForever+0xa>)
	ldr	r3, =_edata
 800f2da:	4b0b      	ldr	r3, [pc, #44]	; (800f308 <LoopForever+0xe>)
	adds	r2, r0, r1
 800f2dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800f2de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800f2e0:	d3f6      	bcc.n	800f2d0 <CopyDataInit>
	ldr	r2, =_sbss
 800f2e2:	4a0a      	ldr	r2, [pc, #40]	; (800f30c <LoopForever+0x12>)
	b	LoopFillZerobss
 800f2e4:	e002      	b.n	800f2ec <LoopFillZerobss>

0800f2e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800f2e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800f2e8:	f842 3b04 	str.w	r3, [r2], #4

0800f2ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800f2ec:	4b08      	ldr	r3, [pc, #32]	; (800f310 <LoopForever+0x16>)
	cmp	r2, r3
 800f2ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800f2f0:	d3f9      	bcc.n	800f2e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f2f2:	f002 fda3 	bl	8011e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800f2f6:	f7f7 fdf5 	bl	8006ee4 <main>

0800f2fa <LoopForever>:

LoopForever:
    b LoopForever
 800f2fa:	e7fe      	b.n	800f2fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800f2fc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800f300:	0801ffc0 	.word	0x0801ffc0
	ldr	r0, =_sdata
 800f304:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800f308:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 800f30c:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 800f310:	20000308 	.word	0x20000308

0800f314 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f314:	e7fe      	b.n	800f314 <ADC1_IRQHandler>

0800f316 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f316:	b580      	push	{r7, lr}
 800f318:	b082      	sub	sp, #8
 800f31a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f31c:	2300      	movs	r3, #0
 800f31e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f320:	2003      	movs	r0, #3
 800f322:	f000 f91f 	bl	800f564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f326:	2000      	movs	r0, #0
 800f328:	f000 f80e 	bl	800f348 <HAL_InitTick>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d002      	beq.n	800f338 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800f332:	2301      	movs	r3, #1
 800f334:	71fb      	strb	r3, [r7, #7]
 800f336:	e001      	b.n	800f33c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800f338:	f7ff fdf4 	bl	800ef24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f33c:	79fb      	ldrb	r3, [r7, #7]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
	...

0800f348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800f350:	2300      	movs	r3, #0
 800f352:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800f354:	4b17      	ldr	r3, [pc, #92]	; (800f3b4 <HAL_InitTick+0x6c>)
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d023      	beq.n	800f3a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800f35c:	4b16      	ldr	r3, [pc, #88]	; (800f3b8 <HAL_InitTick+0x70>)
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	4b14      	ldr	r3, [pc, #80]	; (800f3b4 <HAL_InitTick+0x6c>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	4619      	mov	r1, r3
 800f366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f36a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f372:	4618      	mov	r0, r3
 800f374:	f000 f91d 	bl	800f5b2 <HAL_SYSTICK_Config>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d10f      	bne.n	800f39e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2b0f      	cmp	r3, #15
 800f382:	d809      	bhi.n	800f398 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f384:	2200      	movs	r2, #0
 800f386:	6879      	ldr	r1, [r7, #4]
 800f388:	f04f 30ff 	mov.w	r0, #4294967295
 800f38c:	f000 f8f5 	bl	800f57a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f390:	4a0a      	ldr	r2, [pc, #40]	; (800f3bc <HAL_InitTick+0x74>)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6013      	str	r3, [r2, #0]
 800f396:	e007      	b.n	800f3a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800f398:	2301      	movs	r3, #1
 800f39a:	73fb      	strb	r3, [r7, #15]
 800f39c:	e004      	b.n	800f3a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	73fb      	strb	r3, [r7, #15]
 800f3a2:	e001      	b.n	800f3a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800f3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3710      	adds	r7, #16
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	20000008 	.word	0x20000008
 800f3b8:	20000000 	.word	0x20000000
 800f3bc:	20000004 	.word	0x20000004

0800f3c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800f3c4:	4b06      	ldr	r3, [pc, #24]	; (800f3e0 <HAL_IncTick+0x20>)
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	4b06      	ldr	r3, [pc, #24]	; (800f3e4 <HAL_IncTick+0x24>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4413      	add	r3, r2
 800f3d0:	4a04      	ldr	r2, [pc, #16]	; (800f3e4 <HAL_IncTick+0x24>)
 800f3d2:	6013      	str	r3, [r2, #0]
}
 800f3d4:	bf00      	nop
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	20000008 	.word	0x20000008
 800f3e4:	20000300 	.word	0x20000300

0800f3e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	af00      	add	r7, sp, #0
  return uwTick;
 800f3ec:	4b03      	ldr	r3, [pc, #12]	; (800f3fc <HAL_GetTick+0x14>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop
 800f3fc:	20000300 	.word	0x20000300

0800f400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f400:	b480      	push	{r7}
 800f402:	b085      	sub	sp, #20
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f003 0307 	and.w	r3, r3, #7
 800f40e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f410:	4b0c      	ldr	r3, [pc, #48]	; (800f444 <__NVIC_SetPriorityGrouping+0x44>)
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f416:	68ba      	ldr	r2, [r7, #8]
 800f418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f41c:	4013      	ands	r3, r2
 800f41e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f42c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f432:	4a04      	ldr	r2, [pc, #16]	; (800f444 <__NVIC_SetPriorityGrouping+0x44>)
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	60d3      	str	r3, [r2, #12]
}
 800f438:	bf00      	nop
 800f43a:	3714      	adds	r7, #20
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr
 800f444:	e000ed00 	.word	0xe000ed00

0800f448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f448:	b480      	push	{r7}
 800f44a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f44c:	4b04      	ldr	r3, [pc, #16]	; (800f460 <__NVIC_GetPriorityGrouping+0x18>)
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	0a1b      	lsrs	r3, r3, #8
 800f452:	f003 0307 	and.w	r3, r3, #7
}
 800f456:	4618      	mov	r0, r3
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr
 800f460:	e000ed00 	.word	0xe000ed00

0800f464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	4603      	mov	r3, r0
 800f46c:	6039      	str	r1, [r7, #0]
 800f46e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f474:	2b00      	cmp	r3, #0
 800f476:	db0a      	blt.n	800f48e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	b2da      	uxtb	r2, r3
 800f47c:	490c      	ldr	r1, [pc, #48]	; (800f4b0 <__NVIC_SetPriority+0x4c>)
 800f47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f482:	0112      	lsls	r2, r2, #4
 800f484:	b2d2      	uxtb	r2, r2
 800f486:	440b      	add	r3, r1
 800f488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f48c:	e00a      	b.n	800f4a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	b2da      	uxtb	r2, r3
 800f492:	4908      	ldr	r1, [pc, #32]	; (800f4b4 <__NVIC_SetPriority+0x50>)
 800f494:	79fb      	ldrb	r3, [r7, #7]
 800f496:	f003 030f 	and.w	r3, r3, #15
 800f49a:	3b04      	subs	r3, #4
 800f49c:	0112      	lsls	r2, r2, #4
 800f49e:	b2d2      	uxtb	r2, r2
 800f4a0:	440b      	add	r3, r1
 800f4a2:	761a      	strb	r2, [r3, #24]
}
 800f4a4:	bf00      	nop
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr
 800f4b0:	e000e100 	.word	0xe000e100
 800f4b4:	e000ed00 	.word	0xe000ed00

0800f4b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b089      	sub	sp, #36	; 0x24
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f003 0307 	and.w	r3, r3, #7
 800f4ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	f1c3 0307 	rsb	r3, r3, #7
 800f4d2:	2b04      	cmp	r3, #4
 800f4d4:	bf28      	it	cs
 800f4d6:	2304      	movcs	r3, #4
 800f4d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	3304      	adds	r3, #4
 800f4de:	2b06      	cmp	r3, #6
 800f4e0:	d902      	bls.n	800f4e8 <NVIC_EncodePriority+0x30>
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	3b03      	subs	r3, #3
 800f4e6:	e000      	b.n	800f4ea <NVIC_EncodePriority+0x32>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f4f6:	43da      	mvns	r2, r3
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	401a      	ands	r2, r3
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f500:	f04f 31ff 	mov.w	r1, #4294967295
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	fa01 f303 	lsl.w	r3, r1, r3
 800f50a:	43d9      	mvns	r1, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f510:	4313      	orrs	r3, r2
         );
}
 800f512:	4618      	mov	r0, r3
 800f514:	3724      	adds	r7, #36	; 0x24
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr
	...

0800f520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3b01      	subs	r3, #1
 800f52c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f530:	d301      	bcc.n	800f536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f532:	2301      	movs	r3, #1
 800f534:	e00f      	b.n	800f556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f536:	4a0a      	ldr	r2, [pc, #40]	; (800f560 <SysTick_Config+0x40>)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	3b01      	subs	r3, #1
 800f53c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f53e:	210f      	movs	r1, #15
 800f540:	f04f 30ff 	mov.w	r0, #4294967295
 800f544:	f7ff ff8e 	bl	800f464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f548:	4b05      	ldr	r3, [pc, #20]	; (800f560 <SysTick_Config+0x40>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f54e:	4b04      	ldr	r3, [pc, #16]	; (800f560 <SysTick_Config+0x40>)
 800f550:	2207      	movs	r2, #7
 800f552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	e000e010 	.word	0xe000e010

0800f564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7ff ff47 	bl	800f400 <__NVIC_SetPriorityGrouping>
}
 800f572:	bf00      	nop
 800f574:	3708      	adds	r7, #8
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f57a:	b580      	push	{r7, lr}
 800f57c:	b086      	sub	sp, #24
 800f57e:	af00      	add	r7, sp, #0
 800f580:	4603      	mov	r3, r0
 800f582:	60b9      	str	r1, [r7, #8]
 800f584:	607a      	str	r2, [r7, #4]
 800f586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800f588:	2300      	movs	r3, #0
 800f58a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800f58c:	f7ff ff5c 	bl	800f448 <__NVIC_GetPriorityGrouping>
 800f590:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	68b9      	ldr	r1, [r7, #8]
 800f596:	6978      	ldr	r0, [r7, #20]
 800f598:	f7ff ff8e 	bl	800f4b8 <NVIC_EncodePriority>
 800f59c:	4602      	mov	r2, r0
 800f59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5a2:	4611      	mov	r1, r2
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7ff ff5d 	bl	800f464 <__NVIC_SetPriority>
}
 800f5aa:	bf00      	nop
 800f5ac:	3718      	adds	r7, #24
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}

0800f5b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b082      	sub	sp, #8
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f7ff ffb0 	bl	800f520 <SysTick_Config>
 800f5c0:	4603      	mov	r3, r0
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3708      	adds	r7, #8
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
	...

0800f5cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d101      	bne.n	800f5de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e054      	b.n	800f688 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	7f5b      	ldrb	r3, [r3, #29]
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d105      	bne.n	800f5f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7ff fcbc 	bl	800ef6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2202      	movs	r2, #2
 800f5f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	791b      	ldrb	r3, [r3, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d10c      	bne.n	800f61c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a22      	ldr	r2, [pc, #136]	; (800f690 <HAL_CRC_Init+0xc4>)
 800f608:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	689a      	ldr	r2, [r3, #8]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f022 0218 	bic.w	r2, r2, #24
 800f618:	609a      	str	r2, [r3, #8]
 800f61a:	e00c      	b.n	800f636 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6899      	ldr	r1, [r3, #8]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	461a      	mov	r2, r3
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 f834 	bl	800f694 <HAL_CRCEx_Polynomial_Set>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800f632:	2301      	movs	r3, #1
 800f634:	e028      	b.n	800f688 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	795b      	ldrb	r3, [r3, #5]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d105      	bne.n	800f64a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f04f 32ff 	mov.w	r2, #4294967295
 800f646:	611a      	str	r2, [r3, #16]
 800f648:	e004      	b.n	800f654 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	6912      	ldr	r2, [r2, #16]
 800f652:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	695a      	ldr	r2, [r3, #20]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	430a      	orrs	r2, r1
 800f668:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	699a      	ldr	r2, [r3, #24]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	430a      	orrs	r2, r1
 800f67e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2201      	movs	r2, #1
 800f684:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800f686:	2300      	movs	r3, #0
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3708      	adds	r7, #8
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	04c11db7 	.word	0x04c11db7

0800f694 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800f694:	b480      	push	{r7}
 800f696:	b087      	sub	sp, #28
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800f6a4:	231f      	movs	r3, #31
 800f6a6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800f6a8:	bf00      	nop
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	1e5a      	subs	r2, r3, #1
 800f6ae:	613a      	str	r2, [r7, #16]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d009      	beq.n	800f6c8 <HAL_CRCEx_Polynomial_Set+0x34>
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	f003 031f 	and.w	r3, r3, #31
 800f6ba:	68ba      	ldr	r2, [r7, #8]
 800f6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800f6c0:	f003 0301 	and.w	r3, r3, #1
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d0f0      	beq.n	800f6aa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2b18      	cmp	r3, #24
 800f6cc:	d846      	bhi.n	800f75c <HAL_CRCEx_Polynomial_Set+0xc8>
 800f6ce:	a201      	add	r2, pc, #4	; (adr r2, 800f6d4 <HAL_CRCEx_Polynomial_Set+0x40>)
 800f6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d4:	0800f763 	.word	0x0800f763
 800f6d8:	0800f75d 	.word	0x0800f75d
 800f6dc:	0800f75d 	.word	0x0800f75d
 800f6e0:	0800f75d 	.word	0x0800f75d
 800f6e4:	0800f75d 	.word	0x0800f75d
 800f6e8:	0800f75d 	.word	0x0800f75d
 800f6ec:	0800f75d 	.word	0x0800f75d
 800f6f0:	0800f75d 	.word	0x0800f75d
 800f6f4:	0800f751 	.word	0x0800f751
 800f6f8:	0800f75d 	.word	0x0800f75d
 800f6fc:	0800f75d 	.word	0x0800f75d
 800f700:	0800f75d 	.word	0x0800f75d
 800f704:	0800f75d 	.word	0x0800f75d
 800f708:	0800f75d 	.word	0x0800f75d
 800f70c:	0800f75d 	.word	0x0800f75d
 800f710:	0800f75d 	.word	0x0800f75d
 800f714:	0800f745 	.word	0x0800f745
 800f718:	0800f75d 	.word	0x0800f75d
 800f71c:	0800f75d 	.word	0x0800f75d
 800f720:	0800f75d 	.word	0x0800f75d
 800f724:	0800f75d 	.word	0x0800f75d
 800f728:	0800f75d 	.word	0x0800f75d
 800f72c:	0800f75d 	.word	0x0800f75d
 800f730:	0800f75d 	.word	0x0800f75d
 800f734:	0800f739 	.word	0x0800f739
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	2b06      	cmp	r3, #6
 800f73c:	d913      	bls.n	800f766 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800f73e:	2301      	movs	r3, #1
 800f740:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f742:	e010      	b.n	800f766 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	2b07      	cmp	r3, #7
 800f748:	d90f      	bls.n	800f76a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800f74a:	2301      	movs	r3, #1
 800f74c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f74e:	e00c      	b.n	800f76a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	2b0f      	cmp	r3, #15
 800f754:	d90b      	bls.n	800f76e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800f756:	2301      	movs	r3, #1
 800f758:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f75a:	e008      	b.n	800f76e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800f75c:	2301      	movs	r3, #1
 800f75e:	75fb      	strb	r3, [r7, #23]
      break;
 800f760:	e006      	b.n	800f770 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800f762:	bf00      	nop
 800f764:	e004      	b.n	800f770 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800f766:	bf00      	nop
 800f768:	e002      	b.n	800f770 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800f76a:	bf00      	nop
 800f76c:	e000      	b.n	800f770 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800f76e:	bf00      	nop
  }
  if (status == HAL_OK)
 800f770:	7dfb      	ldrb	r3, [r7, #23]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10d      	bne.n	800f792 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	68ba      	ldr	r2, [r7, #8]
 800f77c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	689b      	ldr	r3, [r3, #8]
 800f784:	f023 0118 	bic.w	r1, r3, #24
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	430a      	orrs	r2, r1
 800f790:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800f792:	7dfb      	ldrb	r3, [r7, #23]
}
 800f794:	4618      	mov	r0, r3
 800f796:	371c      	adds	r7, #28
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b087      	sub	sp, #28
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f7ae:	e148      	b.n	800fa42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	2101      	movs	r1, #1
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	fa01 f303 	lsl.w	r3, r1, r3
 800f7bc:	4013      	ands	r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	f000 813a 	beq.w	800fa3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d00b      	beq.n	800f7e8 <HAL_GPIO_Init+0x48>
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	d007      	beq.n	800f7e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f7dc:	2b11      	cmp	r3, #17
 800f7de:	d003      	beq.n	800f7e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	2b12      	cmp	r3, #18
 800f7e6:	d130      	bne.n	800f84a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	005b      	lsls	r3, r3, #1
 800f7f2:	2203      	movs	r2, #3
 800f7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800f7f8:	43db      	mvns	r3, r3
 800f7fa:	693a      	ldr	r2, [r7, #16]
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	68da      	ldr	r2, [r3, #12]
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	005b      	lsls	r3, r3, #1
 800f808:	fa02 f303 	lsl.w	r3, r2, r3
 800f80c:	693a      	ldr	r2, [r7, #16]
 800f80e:	4313      	orrs	r3, r2
 800f810:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	693a      	ldr	r2, [r7, #16]
 800f816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f81e:	2201      	movs	r2, #1
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	fa02 f303 	lsl.w	r3, r2, r3
 800f826:	43db      	mvns	r3, r3
 800f828:	693a      	ldr	r2, [r7, #16]
 800f82a:	4013      	ands	r3, r2
 800f82c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	091b      	lsrs	r3, r3, #4
 800f834:	f003 0201 	and.w	r2, r3, #1
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	fa02 f303 	lsl.w	r3, r2, r3
 800f83e:	693a      	ldr	r2, [r7, #16]
 800f840:	4313      	orrs	r3, r2
 800f842:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	693a      	ldr	r2, [r7, #16]
 800f848:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	2203      	movs	r2, #3
 800f856:	fa02 f303 	lsl.w	r3, r2, r3
 800f85a:	43db      	mvns	r3, r3
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	4013      	ands	r3, r2
 800f860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	689a      	ldr	r2, [r3, #8]
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	fa02 f303 	lsl.w	r3, r2, r3
 800f86e:	693a      	ldr	r2, [r7, #16]
 800f870:	4313      	orrs	r3, r2
 800f872:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	693a      	ldr	r2, [r7, #16]
 800f878:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	2b02      	cmp	r3, #2
 800f880:	d003      	beq.n	800f88a <HAL_GPIO_Init+0xea>
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	2b12      	cmp	r3, #18
 800f888:	d123      	bne.n	800f8d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	08da      	lsrs	r2, r3, #3
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	3208      	adds	r2, #8
 800f892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	f003 0307 	and.w	r3, r3, #7
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	220f      	movs	r2, #15
 800f8a2:	fa02 f303 	lsl.w	r3, r2, r3
 800f8a6:	43db      	mvns	r3, r3
 800f8a8:	693a      	ldr	r2, [r7, #16]
 800f8aa:	4013      	ands	r3, r2
 800f8ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	691a      	ldr	r2, [r3, #16]
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	f003 0307 	and.w	r3, r3, #7
 800f8b8:	009b      	lsls	r3, r3, #2
 800f8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f8be:	693a      	ldr	r2, [r7, #16]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	08da      	lsrs	r2, r3, #3
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	3208      	adds	r2, #8
 800f8cc:	6939      	ldr	r1, [r7, #16]
 800f8ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	005b      	lsls	r3, r3, #1
 800f8dc:	2203      	movs	r2, #3
 800f8de:	fa02 f303 	lsl.w	r3, r2, r3
 800f8e2:	43db      	mvns	r3, r3
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	4013      	ands	r3, r2
 800f8e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	f003 0203 	and.w	r2, r3, #3
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	005b      	lsls	r3, r3, #1
 800f8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f8fa:	693a      	ldr	r2, [r7, #16]
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	693a      	ldr	r2, [r7, #16]
 800f904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f90e:	2b00      	cmp	r3, #0
 800f910:	f000 8094 	beq.w	800fa3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f914:	4b52      	ldr	r3, [pc, #328]	; (800fa60 <HAL_GPIO_Init+0x2c0>)
 800f916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f918:	4a51      	ldr	r2, [pc, #324]	; (800fa60 <HAL_GPIO_Init+0x2c0>)
 800f91a:	f043 0301 	orr.w	r3, r3, #1
 800f91e:	6613      	str	r3, [r2, #96]	; 0x60
 800f920:	4b4f      	ldr	r3, [pc, #316]	; (800fa60 <HAL_GPIO_Init+0x2c0>)
 800f922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f924:	f003 0301 	and.w	r3, r3, #1
 800f928:	60bb      	str	r3, [r7, #8]
 800f92a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800f92c:	4a4d      	ldr	r2, [pc, #308]	; (800fa64 <HAL_GPIO_Init+0x2c4>)
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	089b      	lsrs	r3, r3, #2
 800f932:	3302      	adds	r3, #2
 800f934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	f003 0303 	and.w	r3, r3, #3
 800f940:	009b      	lsls	r3, r3, #2
 800f942:	220f      	movs	r2, #15
 800f944:	fa02 f303 	lsl.w	r3, r2, r3
 800f948:	43db      	mvns	r3, r3
 800f94a:	693a      	ldr	r2, [r7, #16]
 800f94c:	4013      	ands	r3, r2
 800f94e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800f956:	d00d      	beq.n	800f974 <HAL_GPIO_Init+0x1d4>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a43      	ldr	r2, [pc, #268]	; (800fa68 <HAL_GPIO_Init+0x2c8>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d007      	beq.n	800f970 <HAL_GPIO_Init+0x1d0>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a42      	ldr	r2, [pc, #264]	; (800fa6c <HAL_GPIO_Init+0x2cc>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d101      	bne.n	800f96c <HAL_GPIO_Init+0x1cc>
 800f968:	2302      	movs	r3, #2
 800f96a:	e004      	b.n	800f976 <HAL_GPIO_Init+0x1d6>
 800f96c:	2307      	movs	r3, #7
 800f96e:	e002      	b.n	800f976 <HAL_GPIO_Init+0x1d6>
 800f970:	2301      	movs	r3, #1
 800f972:	e000      	b.n	800f976 <HAL_GPIO_Init+0x1d6>
 800f974:	2300      	movs	r3, #0
 800f976:	697a      	ldr	r2, [r7, #20]
 800f978:	f002 0203 	and.w	r2, r2, #3
 800f97c:	0092      	lsls	r2, r2, #2
 800f97e:	4093      	lsls	r3, r2
 800f980:	693a      	ldr	r2, [r7, #16]
 800f982:	4313      	orrs	r3, r2
 800f984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800f986:	4937      	ldr	r1, [pc, #220]	; (800fa64 <HAL_GPIO_Init+0x2c4>)
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	089b      	lsrs	r3, r3, #2
 800f98c:	3302      	adds	r3, #2
 800f98e:	693a      	ldr	r2, [r7, #16]
 800f990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800f994:	4b36      	ldr	r3, [pc, #216]	; (800fa70 <HAL_GPIO_Init+0x2d0>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	43db      	mvns	r3, r3
 800f99e:	693a      	ldr	r2, [r7, #16]
 800f9a0:	4013      	ands	r3, r2
 800f9a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d003      	beq.n	800f9b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800f9b0:	693a      	ldr	r2, [r7, #16]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800f9b8:	4a2d      	ldr	r2, [pc, #180]	; (800fa70 <HAL_GPIO_Init+0x2d0>)
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800f9be:	4b2c      	ldr	r3, [pc, #176]	; (800fa70 <HAL_GPIO_Init+0x2d0>)
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	43db      	mvns	r3, r3
 800f9c8:	693a      	ldr	r2, [r7, #16]
 800f9ca:	4013      	ands	r3, r2
 800f9cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d003      	beq.n	800f9e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800f9da:	693a      	ldr	r2, [r7, #16]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800f9e2:	4a23      	ldr	r2, [pc, #140]	; (800fa70 <HAL_GPIO_Init+0x2d0>)
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f9e8:	4b21      	ldr	r3, [pc, #132]	; (800fa70 <HAL_GPIO_Init+0x2d0>)
 800f9ea:	689b      	ldr	r3, [r3, #8]
 800f9ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	43db      	mvns	r3, r3
 800f9f2:	693a      	ldr	r2, [r7, #16]
 800f9f4:	4013      	ands	r3, r2
 800f9f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d003      	beq.n	800fa0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800fa04:	693a      	ldr	r2, [r7, #16]
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800fa0c:	4a18      	ldr	r2, [pc, #96]	; (800fa70 <HAL_GPIO_Init+0x2d0>)
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800fa12:	4b17      	ldr	r3, [pc, #92]	; (800fa70 <HAL_GPIO_Init+0x2d0>)
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	43db      	mvns	r3, r3
 800fa1c:	693a      	ldr	r2, [r7, #16]
 800fa1e:	4013      	ands	r3, r2
 800fa20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d003      	beq.n	800fa36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800fa2e:	693a      	ldr	r2, [r7, #16]
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800fa36:	4a0e      	ldr	r2, [pc, #56]	; (800fa70 <HAL_GPIO_Init+0x2d0>)
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	3301      	adds	r3, #1
 800fa40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	fa22 f303 	lsr.w	r3, r2, r3
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f47f aeaf 	bne.w	800f7b0 <HAL_GPIO_Init+0x10>
  }
}
 800fa52:	bf00      	nop
 800fa54:	371c      	adds	r7, #28
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop
 800fa60:	40021000 	.word	0x40021000
 800fa64:	40010000 	.word	0x40010000
 800fa68:	48000400 	.word	0x48000400
 800fa6c:	48000800 	.word	0x48000800
 800fa70:	40010400 	.word	0x40010400

0800fa74 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800fa74:	b480      	push	{r7}
 800fa76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fa78:	4b05      	ldr	r3, [pc, #20]	; (800fa90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4a04      	ldr	r2, [pc, #16]	; (800fa90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800fa7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa82:	6013      	str	r3, [r2, #0]
}
 800fa84:	bf00      	nop
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	40007000 	.word	0x40007000

0800fa94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800fa94:	b480      	push	{r7}
 800fa96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800fa98:	4b04      	ldr	r3, [pc, #16]	; (800faac <HAL_PWREx_GetVoltageRange+0x18>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	40007000 	.word	0x40007000

0800fab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fabe:	d130      	bne.n	800fb22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800fac0:	4b23      	ldr	r3, [pc, #140]	; (800fb50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800facc:	d038      	beq.n	800fb40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800face:	4b20      	ldr	r3, [pc, #128]	; (800fb50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800fad6:	4a1e      	ldr	r2, [pc, #120]	; (800fb50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fadc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800fade:	4b1d      	ldr	r3, [pc, #116]	; (800fb54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	2232      	movs	r2, #50	; 0x32
 800fae4:	fb02 f303 	mul.w	r3, r2, r3
 800fae8:	4a1b      	ldr	r2, [pc, #108]	; (800fb58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800faea:	fba2 2303 	umull	r2, r3, r2, r3
 800faee:	0c9b      	lsrs	r3, r3, #18
 800faf0:	3301      	adds	r3, #1
 800faf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800faf4:	e002      	b.n	800fafc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	3b01      	subs	r3, #1
 800fafa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800fafc:	4b14      	ldr	r3, [pc, #80]	; (800fb50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fafe:	695b      	ldr	r3, [r3, #20]
 800fb00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb08:	d102      	bne.n	800fb10 <HAL_PWREx_ControlVoltageScaling+0x60>
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d1f2      	bne.n	800faf6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800fb10:	4b0f      	ldr	r3, [pc, #60]	; (800fb50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fb12:	695b      	ldr	r3, [r3, #20]
 800fb14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb1c:	d110      	bne.n	800fb40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800fb1e:	2303      	movs	r3, #3
 800fb20:	e00f      	b.n	800fb42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800fb22:	4b0b      	ldr	r3, [pc, #44]	; (800fb50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fb2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb2e:	d007      	beq.n	800fb40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800fb30:	4b07      	ldr	r3, [pc, #28]	; (800fb50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800fb38:	4a05      	ldr	r2, [pc, #20]	; (800fb50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fb3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fb3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800fb40:	2300      	movs	r3, #0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3714      	adds	r7, #20
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop
 800fb50:	40007000 	.word	0x40007000
 800fb54:	20000000 	.word	0x20000000
 800fb58:	431bde83 	.word	0x431bde83

0800fb5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b088      	sub	sp, #32
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d102      	bne.n	800fb70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	f000 bc11 	b.w	8010392 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fb70:	4ba0      	ldr	r3, [pc, #640]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	f003 030c 	and.w	r3, r3, #12
 800fb78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fb7a:	4b9e      	ldr	r3, [pc, #632]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	f003 0303 	and.w	r3, r3, #3
 800fb82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f003 0310 	and.w	r3, r3, #16
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f000 80e4 	beq.w	800fd5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800fb92:	69bb      	ldr	r3, [r7, #24]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d007      	beq.n	800fba8 <HAL_RCC_OscConfig+0x4c>
 800fb98:	69bb      	ldr	r3, [r7, #24]
 800fb9a:	2b0c      	cmp	r3, #12
 800fb9c:	f040 808b 	bne.w	800fcb6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	f040 8087 	bne.w	800fcb6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fba8:	4b92      	ldr	r3, [pc, #584]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f003 0302 	and.w	r3, r3, #2
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d005      	beq.n	800fbc0 <HAL_RCC_OscConfig+0x64>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	699b      	ldr	r3, [r3, #24]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d101      	bne.n	800fbc0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	e3e8      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6a1a      	ldr	r2, [r3, #32]
 800fbc4:	4b8b      	ldr	r3, [pc, #556]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f003 0308 	and.w	r3, r3, #8
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d004      	beq.n	800fbda <HAL_RCC_OscConfig+0x7e>
 800fbd0:	4b88      	ldr	r3, [pc, #544]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbd8:	e005      	b.n	800fbe6 <HAL_RCC_OscConfig+0x8a>
 800fbda:	4b86      	ldr	r3, [pc, #536]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fbdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbe0:	091b      	lsrs	r3, r3, #4
 800fbe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d223      	bcs.n	800fc32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6a1b      	ldr	r3, [r3, #32]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f000 fd78 	bl	80106e4 <RCC_SetFlashLatencyFromMSIRange>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d001      	beq.n	800fbfe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e3c9      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fbfe:	4b7d      	ldr	r3, [pc, #500]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	4a7c      	ldr	r2, [pc, #496]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc04:	f043 0308 	orr.w	r3, r3, #8
 800fc08:	6013      	str	r3, [r2, #0]
 800fc0a:	4b7a      	ldr	r3, [pc, #488]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a1b      	ldr	r3, [r3, #32]
 800fc16:	4977      	ldr	r1, [pc, #476]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc18:	4313      	orrs	r3, r2
 800fc1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fc1c:	4b75      	ldr	r3, [pc, #468]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	69db      	ldr	r3, [r3, #28]
 800fc28:	021b      	lsls	r3, r3, #8
 800fc2a:	4972      	ldr	r1, [pc, #456]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	604b      	str	r3, [r1, #4]
 800fc30:	e025      	b.n	800fc7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fc32:	4b70      	ldr	r3, [pc, #448]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	4a6f      	ldr	r2, [pc, #444]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc38:	f043 0308 	orr.w	r3, r3, #8
 800fc3c:	6013      	str	r3, [r2, #0]
 800fc3e:	4b6d      	ldr	r3, [pc, #436]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a1b      	ldr	r3, [r3, #32]
 800fc4a:	496a      	ldr	r1, [pc, #424]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fc50:	4b68      	ldr	r3, [pc, #416]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	69db      	ldr	r3, [r3, #28]
 800fc5c:	021b      	lsls	r3, r3, #8
 800fc5e:	4965      	ldr	r1, [pc, #404]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc60:	4313      	orrs	r3, r2
 800fc62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fc64:	69bb      	ldr	r3, [r7, #24]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d109      	bne.n	800fc7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6a1b      	ldr	r3, [r3, #32]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f000 fd38 	bl	80106e4 <RCC_SetFlashLatencyFromMSIRange>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e389      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fc7e:	f000 fc6f 	bl	8010560 <HAL_RCC_GetSysClockFreq>
 800fc82:	4601      	mov	r1, r0
 800fc84:	4b5b      	ldr	r3, [pc, #364]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	091b      	lsrs	r3, r3, #4
 800fc8a:	f003 030f 	and.w	r3, r3, #15
 800fc8e:	4a5a      	ldr	r2, [pc, #360]	; (800fdf8 <HAL_RCC_OscConfig+0x29c>)
 800fc90:	5cd3      	ldrb	r3, [r2, r3]
 800fc92:	f003 031f 	and.w	r3, r3, #31
 800fc96:	fa21 f303 	lsr.w	r3, r1, r3
 800fc9a:	4a58      	ldr	r2, [pc, #352]	; (800fdfc <HAL_RCC_OscConfig+0x2a0>)
 800fc9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800fc9e:	4b58      	ldr	r3, [pc, #352]	; (800fe00 <HAL_RCC_OscConfig+0x2a4>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7ff fb50 	bl	800f348 <HAL_InitTick>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800fcac:	7bfb      	ldrb	r3, [r7, #15]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d052      	beq.n	800fd58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800fcb2:	7bfb      	ldrb	r3, [r7, #15]
 800fcb4:	e36d      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	699b      	ldr	r3, [r3, #24]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d032      	beq.n	800fd24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fcbe:	4b4d      	ldr	r3, [pc, #308]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4a4c      	ldr	r2, [pc, #304]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fcc4:	f043 0301 	orr.w	r3, r3, #1
 800fcc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fcca:	f7ff fb8d 	bl	800f3e8 <HAL_GetTick>
 800fcce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fcd0:	e008      	b.n	800fce4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fcd2:	f7ff fb89 	bl	800f3e8 <HAL_GetTick>
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	1ad3      	subs	r3, r2, r3
 800fcdc:	2b02      	cmp	r3, #2
 800fcde:	d901      	bls.n	800fce4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800fce0:	2303      	movs	r3, #3
 800fce2:	e356      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fce4:	4b43      	ldr	r3, [pc, #268]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	f003 0302 	and.w	r3, r3, #2
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d0f0      	beq.n	800fcd2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fcf0:	4b40      	ldr	r3, [pc, #256]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a3f      	ldr	r2, [pc, #252]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fcf6:	f043 0308 	orr.w	r3, r3, #8
 800fcfa:	6013      	str	r3, [r2, #0]
 800fcfc:	4b3d      	ldr	r3, [pc, #244]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6a1b      	ldr	r3, [r3, #32]
 800fd08:	493a      	ldr	r1, [pc, #232]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fd0e:	4b39      	ldr	r3, [pc, #228]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	69db      	ldr	r3, [r3, #28]
 800fd1a:	021b      	lsls	r3, r3, #8
 800fd1c:	4935      	ldr	r1, [pc, #212]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	604b      	str	r3, [r1, #4]
 800fd22:	e01a      	b.n	800fd5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fd24:	4b33      	ldr	r3, [pc, #204]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4a32      	ldr	r2, [pc, #200]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fd2a:	f023 0301 	bic.w	r3, r3, #1
 800fd2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fd30:	f7ff fb5a 	bl	800f3e8 <HAL_GetTick>
 800fd34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fd36:	e008      	b.n	800fd4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fd38:	f7ff fb56 	bl	800f3e8 <HAL_GetTick>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	1ad3      	subs	r3, r2, r3
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d901      	bls.n	800fd4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800fd46:	2303      	movs	r3, #3
 800fd48:	e323      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fd4a:	4b2a      	ldr	r3, [pc, #168]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f003 0302 	and.w	r3, r3, #2
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d1f0      	bne.n	800fd38 <HAL_RCC_OscConfig+0x1dc>
 800fd56:	e000      	b.n	800fd5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fd58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f003 0301 	and.w	r3, r3, #1
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d073      	beq.n	800fe4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800fd66:	69bb      	ldr	r3, [r7, #24]
 800fd68:	2b08      	cmp	r3, #8
 800fd6a:	d005      	beq.n	800fd78 <HAL_RCC_OscConfig+0x21c>
 800fd6c:	69bb      	ldr	r3, [r7, #24]
 800fd6e:	2b0c      	cmp	r3, #12
 800fd70:	d10e      	bne.n	800fd90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	2b03      	cmp	r3, #3
 800fd76:	d10b      	bne.n	800fd90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fd78:	4b1e      	ldr	r3, [pc, #120]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d063      	beq.n	800fe4c <HAL_RCC_OscConfig+0x2f0>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d15f      	bne.n	800fe4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	e300      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd98:	d106      	bne.n	800fda8 <HAL_RCC_OscConfig+0x24c>
 800fd9a:	4b16      	ldr	r3, [pc, #88]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	4a15      	ldr	r2, [pc, #84]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fda0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fda4:	6013      	str	r3, [r2, #0]
 800fda6:	e01d      	b.n	800fde4 <HAL_RCC_OscConfig+0x288>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	685b      	ldr	r3, [r3, #4]
 800fdac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fdb0:	d10c      	bne.n	800fdcc <HAL_RCC_OscConfig+0x270>
 800fdb2:	4b10      	ldr	r3, [pc, #64]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a0f      	ldr	r2, [pc, #60]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fdb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fdbc:	6013      	str	r3, [r2, #0]
 800fdbe:	4b0d      	ldr	r3, [pc, #52]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	4a0c      	ldr	r2, [pc, #48]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fdc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fdc8:	6013      	str	r3, [r2, #0]
 800fdca:	e00b      	b.n	800fde4 <HAL_RCC_OscConfig+0x288>
 800fdcc:	4b09      	ldr	r3, [pc, #36]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a08      	ldr	r2, [pc, #32]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fdd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fdd6:	6013      	str	r3, [r2, #0]
 800fdd8:	4b06      	ldr	r3, [pc, #24]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	4a05      	ldr	r2, [pc, #20]	; (800fdf4 <HAL_RCC_OscConfig+0x298>)
 800fdde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fde2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d01b      	beq.n	800fe24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fdec:	f7ff fafc 	bl	800f3e8 <HAL_GetTick>
 800fdf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fdf2:	e010      	b.n	800fe16 <HAL_RCC_OscConfig+0x2ba>
 800fdf4:	40021000 	.word	0x40021000
 800fdf8:	0801f4a4 	.word	0x0801f4a4
 800fdfc:	20000000 	.word	0x20000000
 800fe00:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fe04:	f7ff faf0 	bl	800f3e8 <HAL_GetTick>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	1ad3      	subs	r3, r2, r3
 800fe0e:	2b64      	cmp	r3, #100	; 0x64
 800fe10:	d901      	bls.n	800fe16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800fe12:	2303      	movs	r3, #3
 800fe14:	e2bd      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fe16:	4baf      	ldr	r3, [pc, #700]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d0f0      	beq.n	800fe04 <HAL_RCC_OscConfig+0x2a8>
 800fe22:	e014      	b.n	800fe4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe24:	f7ff fae0 	bl	800f3e8 <HAL_GetTick>
 800fe28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fe2a:	e008      	b.n	800fe3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fe2c:	f7ff fadc 	bl	800f3e8 <HAL_GetTick>
 800fe30:	4602      	mov	r2, r0
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	1ad3      	subs	r3, r2, r3
 800fe36:	2b64      	cmp	r3, #100	; 0x64
 800fe38:	d901      	bls.n	800fe3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800fe3a:	2303      	movs	r3, #3
 800fe3c:	e2a9      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fe3e:	4ba5      	ldr	r3, [pc, #660]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d1f0      	bne.n	800fe2c <HAL_RCC_OscConfig+0x2d0>
 800fe4a:	e000      	b.n	800fe4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fe4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f003 0302 	and.w	r3, r3, #2
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d060      	beq.n	800ff1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	2b04      	cmp	r3, #4
 800fe5e:	d005      	beq.n	800fe6c <HAL_RCC_OscConfig+0x310>
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	2b0c      	cmp	r3, #12
 800fe64:	d119      	bne.n	800fe9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d116      	bne.n	800fe9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fe6c:	4b99      	ldr	r3, [pc, #612]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d005      	beq.n	800fe84 <HAL_RCC_OscConfig+0x328>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	68db      	ldr	r3, [r3, #12]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d101      	bne.n	800fe84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800fe80:	2301      	movs	r3, #1
 800fe82:	e286      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fe84:	4b93      	ldr	r3, [pc, #588]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	691b      	ldr	r3, [r3, #16]
 800fe90:	061b      	lsls	r3, r3, #24
 800fe92:	4990      	ldr	r1, [pc, #576]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800fe94:	4313      	orrs	r3, r2
 800fe96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fe98:	e040      	b.n	800ff1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	68db      	ldr	r3, [r3, #12]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d023      	beq.n	800feea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fea2:	4b8c      	ldr	r3, [pc, #560]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4a8b      	ldr	r2, [pc, #556]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800fea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800feac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800feae:	f7ff fa9b 	bl	800f3e8 <HAL_GetTick>
 800feb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800feb4:	e008      	b.n	800fec8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800feb6:	f7ff fa97 	bl	800f3e8 <HAL_GetTick>
 800feba:	4602      	mov	r2, r0
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	2b02      	cmp	r3, #2
 800fec2:	d901      	bls.n	800fec8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800fec4:	2303      	movs	r3, #3
 800fec6:	e264      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fec8:	4b82      	ldr	r3, [pc, #520]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d0f0      	beq.n	800feb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fed4:	4b7f      	ldr	r3, [pc, #508]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	691b      	ldr	r3, [r3, #16]
 800fee0:	061b      	lsls	r3, r3, #24
 800fee2:	497c      	ldr	r1, [pc, #496]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800fee4:	4313      	orrs	r3, r2
 800fee6:	604b      	str	r3, [r1, #4]
 800fee8:	e018      	b.n	800ff1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800feea:	4b7a      	ldr	r3, [pc, #488]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4a79      	ldr	r2, [pc, #484]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800fef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fef6:	f7ff fa77 	bl	800f3e8 <HAL_GetTick>
 800fefa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fefc:	e008      	b.n	800ff10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fefe:	f7ff fa73 	bl	800f3e8 <HAL_GetTick>
 800ff02:	4602      	mov	r2, r0
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	1ad3      	subs	r3, r2, r3
 800ff08:	2b02      	cmp	r3, #2
 800ff0a:	d901      	bls.n	800ff10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	e240      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ff10:	4b70      	ldr	r3, [pc, #448]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d1f0      	bne.n	800fefe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f003 0308 	and.w	r3, r3, #8
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d03c      	beq.n	800ffa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	695b      	ldr	r3, [r3, #20]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d01c      	beq.n	800ff6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ff30:	4b68      	ldr	r3, [pc, #416]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ff32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff36:	4a67      	ldr	r2, [pc, #412]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ff38:	f043 0301 	orr.w	r3, r3, #1
 800ff3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ff40:	f7ff fa52 	bl	800f3e8 <HAL_GetTick>
 800ff44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ff46:	e008      	b.n	800ff5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ff48:	f7ff fa4e 	bl	800f3e8 <HAL_GetTick>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	2b02      	cmp	r3, #2
 800ff54:	d901      	bls.n	800ff5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ff56:	2303      	movs	r3, #3
 800ff58:	e21b      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ff5a:	4b5e      	ldr	r3, [pc, #376]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ff5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff60:	f003 0302 	and.w	r3, r3, #2
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d0ef      	beq.n	800ff48 <HAL_RCC_OscConfig+0x3ec>
 800ff68:	e01b      	b.n	800ffa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ff6a:	4b5a      	ldr	r3, [pc, #360]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ff6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff70:	4a58      	ldr	r2, [pc, #352]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ff72:	f023 0301 	bic.w	r3, r3, #1
 800ff76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ff7a:	f7ff fa35 	bl	800f3e8 <HAL_GetTick>
 800ff7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ff80:	e008      	b.n	800ff94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ff82:	f7ff fa31 	bl	800f3e8 <HAL_GetTick>
 800ff86:	4602      	mov	r2, r0
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	1ad3      	subs	r3, r2, r3
 800ff8c:	2b02      	cmp	r3, #2
 800ff8e:	d901      	bls.n	800ff94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ff90:	2303      	movs	r3, #3
 800ff92:	e1fe      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ff94:	4b4f      	ldr	r3, [pc, #316]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ff96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff9a:	f003 0302 	and.w	r3, r3, #2
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1ef      	bne.n	800ff82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f003 0304 	and.w	r3, r3, #4
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f000 80a6 	beq.w	80100fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ffb4:	4b47      	ldr	r3, [pc, #284]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ffb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d10d      	bne.n	800ffdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ffc0:	4b44      	ldr	r3, [pc, #272]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ffc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffc4:	4a43      	ldr	r2, [pc, #268]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ffc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffca:	6593      	str	r3, [r2, #88]	; 0x58
 800ffcc:	4b41      	ldr	r3, [pc, #260]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 800ffce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ffd4:	60bb      	str	r3, [r7, #8]
 800ffd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ffdc:	4b3e      	ldr	r3, [pc, #248]	; (80100d8 <HAL_RCC_OscConfig+0x57c>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d118      	bne.n	801001a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ffe8:	4b3b      	ldr	r3, [pc, #236]	; (80100d8 <HAL_RCC_OscConfig+0x57c>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a3a      	ldr	r2, [pc, #232]	; (80100d8 <HAL_RCC_OscConfig+0x57c>)
 800ffee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fff4:	f7ff f9f8 	bl	800f3e8 <HAL_GetTick>
 800fff8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fffa:	e008      	b.n	801000e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fffc:	f7ff f9f4 	bl	800f3e8 <HAL_GetTick>
 8010000:	4602      	mov	r2, r0
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	2b02      	cmp	r3, #2
 8010008:	d901      	bls.n	801000e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801000a:	2303      	movs	r3, #3
 801000c:	e1c1      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801000e:	4b32      	ldr	r3, [pc, #200]	; (80100d8 <HAL_RCC_OscConfig+0x57c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010016:	2b00      	cmp	r3, #0
 8010018:	d0f0      	beq.n	800fffc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	689b      	ldr	r3, [r3, #8]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d108      	bne.n	8010034 <HAL_RCC_OscConfig+0x4d8>
 8010022:	4b2c      	ldr	r3, [pc, #176]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 8010024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010028:	4a2a      	ldr	r2, [pc, #168]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 801002a:	f043 0301 	orr.w	r3, r3, #1
 801002e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8010032:	e024      	b.n	801007e <HAL_RCC_OscConfig+0x522>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	2b05      	cmp	r3, #5
 801003a:	d110      	bne.n	801005e <HAL_RCC_OscConfig+0x502>
 801003c:	4b25      	ldr	r3, [pc, #148]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 801003e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010042:	4a24      	ldr	r2, [pc, #144]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 8010044:	f043 0304 	orr.w	r3, r3, #4
 8010048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801004c:	4b21      	ldr	r3, [pc, #132]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 801004e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010052:	4a20      	ldr	r2, [pc, #128]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 8010054:	f043 0301 	orr.w	r3, r3, #1
 8010058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801005c:	e00f      	b.n	801007e <HAL_RCC_OscConfig+0x522>
 801005e:	4b1d      	ldr	r3, [pc, #116]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 8010060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010064:	4a1b      	ldr	r2, [pc, #108]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 8010066:	f023 0301 	bic.w	r3, r3, #1
 801006a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801006e:	4b19      	ldr	r3, [pc, #100]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 8010070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010074:	4a17      	ldr	r2, [pc, #92]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 8010076:	f023 0304 	bic.w	r3, r3, #4
 801007a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	689b      	ldr	r3, [r3, #8]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d016      	beq.n	80100b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010086:	f7ff f9af 	bl	800f3e8 <HAL_GetTick>
 801008a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801008c:	e00a      	b.n	80100a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801008e:	f7ff f9ab 	bl	800f3e8 <HAL_GetTick>
 8010092:	4602      	mov	r2, r0
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	1ad3      	subs	r3, r2, r3
 8010098:	f241 3288 	movw	r2, #5000	; 0x1388
 801009c:	4293      	cmp	r3, r2
 801009e:	d901      	bls.n	80100a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80100a0:	2303      	movs	r3, #3
 80100a2:	e176      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80100a4:	4b0b      	ldr	r3, [pc, #44]	; (80100d4 <HAL_RCC_OscConfig+0x578>)
 80100a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100aa:	f003 0302 	and.w	r3, r3, #2
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d0ed      	beq.n	801008e <HAL_RCC_OscConfig+0x532>
 80100b2:	e01a      	b.n	80100ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80100b4:	f7ff f998 	bl	800f3e8 <HAL_GetTick>
 80100b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80100ba:	e00f      	b.n	80100dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80100bc:	f7ff f994 	bl	800f3e8 <HAL_GetTick>
 80100c0:	4602      	mov	r2, r0
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	1ad3      	subs	r3, r2, r3
 80100c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d906      	bls.n	80100dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80100ce:	2303      	movs	r3, #3
 80100d0:	e15f      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
 80100d2:	bf00      	nop
 80100d4:	40021000 	.word	0x40021000
 80100d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80100dc:	4baa      	ldr	r3, [pc, #680]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 80100de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100e2:	f003 0302 	and.w	r3, r3, #2
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d1e8      	bne.n	80100bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80100ea:	7ffb      	ldrb	r3, [r7, #31]
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d105      	bne.n	80100fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80100f0:	4ba5      	ldr	r3, [pc, #660]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 80100f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100f4:	4aa4      	ldr	r2, [pc, #656]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 80100f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80100fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f003 0320 	and.w	r3, r3, #32
 8010104:	2b00      	cmp	r3, #0
 8010106:	d03c      	beq.n	8010182 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801010c:	2b00      	cmp	r3, #0
 801010e:	d01c      	beq.n	801014a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010110:	4b9d      	ldr	r3, [pc, #628]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010116:	4a9c      	ldr	r2, [pc, #624]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010118:	f043 0301 	orr.w	r3, r3, #1
 801011c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010120:	f7ff f962 	bl	800f3e8 <HAL_GetTick>
 8010124:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8010126:	e008      	b.n	801013a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010128:	f7ff f95e 	bl	800f3e8 <HAL_GetTick>
 801012c:	4602      	mov	r2, r0
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	1ad3      	subs	r3, r2, r3
 8010132:	2b02      	cmp	r3, #2
 8010134:	d901      	bls.n	801013a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8010136:	2303      	movs	r3, #3
 8010138:	e12b      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801013a:	4b93      	ldr	r3, [pc, #588]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 801013c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010140:	f003 0302 	and.w	r3, r3, #2
 8010144:	2b00      	cmp	r3, #0
 8010146:	d0ef      	beq.n	8010128 <HAL_RCC_OscConfig+0x5cc>
 8010148:	e01b      	b.n	8010182 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801014a:	4b8f      	ldr	r3, [pc, #572]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 801014c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010150:	4a8d      	ldr	r2, [pc, #564]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010152:	f023 0301 	bic.w	r3, r3, #1
 8010156:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801015a:	f7ff f945 	bl	800f3e8 <HAL_GetTick>
 801015e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8010160:	e008      	b.n	8010174 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010162:	f7ff f941 	bl	800f3e8 <HAL_GetTick>
 8010166:	4602      	mov	r2, r0
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	1ad3      	subs	r3, r2, r3
 801016c:	2b02      	cmp	r3, #2
 801016e:	d901      	bls.n	8010174 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8010170:	2303      	movs	r3, #3
 8010172:	e10e      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8010174:	4b84      	ldr	r3, [pc, #528]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801017a:	f003 0302 	and.w	r3, r3, #2
 801017e:	2b00      	cmp	r3, #0
 8010180:	d1ef      	bne.n	8010162 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010186:	2b00      	cmp	r3, #0
 8010188:	f000 8102 	beq.w	8010390 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010190:	2b02      	cmp	r3, #2
 8010192:	f040 80c5 	bne.w	8010320 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8010196:	4b7c      	ldr	r3, [pc, #496]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010198:	68db      	ldr	r3, [r3, #12]
 801019a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	f003 0203 	and.w	r2, r3, #3
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d12c      	bne.n	8010204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101b4:	3b01      	subs	r3, #1
 80101b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d123      	bne.n	8010204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d11b      	bne.n	8010204 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80101d8:	429a      	cmp	r2, r3
 80101da:	d113      	bne.n	8010204 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101e6:	085b      	lsrs	r3, r3, #1
 80101e8:	3b01      	subs	r3, #1
 80101ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d109      	bne.n	8010204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fa:	085b      	lsrs	r3, r3, #1
 80101fc:	3b01      	subs	r3, #1
 80101fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010200:	429a      	cmp	r2, r3
 8010202:	d067      	beq.n	80102d4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	2b0c      	cmp	r3, #12
 8010208:	d062      	beq.n	80102d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801020a:	4b5f      	ldr	r3, [pc, #380]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010212:	2b00      	cmp	r3, #0
 8010214:	d001      	beq.n	801021a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8010216:	2301      	movs	r3, #1
 8010218:	e0bb      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801021a:	4b5b      	ldr	r3, [pc, #364]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	4a5a      	ldr	r2, [pc, #360]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010224:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010226:	f7ff f8df 	bl	800f3e8 <HAL_GetTick>
 801022a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801022c:	e008      	b.n	8010240 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801022e:	f7ff f8db 	bl	800f3e8 <HAL_GetTick>
 8010232:	4602      	mov	r2, r0
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	2b02      	cmp	r3, #2
 801023a:	d901      	bls.n	8010240 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 801023c:	2303      	movs	r3, #3
 801023e:	e0a8      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010240:	4b51      	ldr	r3, [pc, #324]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010248:	2b00      	cmp	r3, #0
 801024a:	d1f0      	bne.n	801022e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801024c:	4b4e      	ldr	r3, [pc, #312]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 801024e:	68da      	ldr	r2, [r3, #12]
 8010250:	4b4e      	ldr	r3, [pc, #312]	; (801038c <HAL_RCC_OscConfig+0x830>)
 8010252:	4013      	ands	r3, r2
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801025c:	3a01      	subs	r2, #1
 801025e:	0112      	lsls	r2, r2, #4
 8010260:	4311      	orrs	r1, r2
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010266:	0212      	lsls	r2, r2, #8
 8010268:	4311      	orrs	r1, r2
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801026e:	0852      	lsrs	r2, r2, #1
 8010270:	3a01      	subs	r2, #1
 8010272:	0552      	lsls	r2, r2, #21
 8010274:	4311      	orrs	r1, r2
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801027a:	0852      	lsrs	r2, r2, #1
 801027c:	3a01      	subs	r2, #1
 801027e:	0652      	lsls	r2, r2, #25
 8010280:	4311      	orrs	r1, r2
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010286:	06d2      	lsls	r2, r2, #27
 8010288:	430a      	orrs	r2, r1
 801028a:	493f      	ldr	r1, [pc, #252]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 801028c:	4313      	orrs	r3, r2
 801028e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8010290:	4b3d      	ldr	r3, [pc, #244]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a3c      	ldr	r2, [pc, #240]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801029a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801029c:	4b3a      	ldr	r3, [pc, #232]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	4a39      	ldr	r2, [pc, #228]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 80102a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80102a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80102a8:	f7ff f89e 	bl	800f3e8 <HAL_GetTick>
 80102ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102ae:	e008      	b.n	80102c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80102b0:	f7ff f89a 	bl	800f3e8 <HAL_GetTick>
 80102b4:	4602      	mov	r2, r0
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	1ad3      	subs	r3, r2, r3
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	d901      	bls.n	80102c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80102be:	2303      	movs	r3, #3
 80102c0:	e067      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102c2:	4b31      	ldr	r3, [pc, #196]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d0f0      	beq.n	80102b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80102ce:	e05f      	b.n	8010390 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80102d0:	2301      	movs	r3, #1
 80102d2:	e05e      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102d4:	4b2c      	ldr	r3, [pc, #176]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d157      	bne.n	8010390 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80102e0:	4b29      	ldr	r3, [pc, #164]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	4a28      	ldr	r2, [pc, #160]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 80102e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80102ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80102ec:	4b26      	ldr	r3, [pc, #152]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	4a25      	ldr	r2, [pc, #148]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 80102f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80102f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80102f8:	f7ff f876 	bl	800f3e8 <HAL_GetTick>
 80102fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102fe:	e008      	b.n	8010312 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010300:	f7ff f872 	bl	800f3e8 <HAL_GetTick>
 8010304:	4602      	mov	r2, r0
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	1ad3      	subs	r3, r2, r3
 801030a:	2b02      	cmp	r3, #2
 801030c:	d901      	bls.n	8010312 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 801030e:	2303      	movs	r3, #3
 8010310:	e03f      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010312:	4b1d      	ldr	r3, [pc, #116]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801031a:	2b00      	cmp	r3, #0
 801031c:	d0f0      	beq.n	8010300 <HAL_RCC_OscConfig+0x7a4>
 801031e:	e037      	b.n	8010390 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8010320:	69bb      	ldr	r3, [r7, #24]
 8010322:	2b0c      	cmp	r3, #12
 8010324:	d02d      	beq.n	8010382 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010326:	4b18      	ldr	r3, [pc, #96]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4a17      	ldr	r2, [pc, #92]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 801032c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010330:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010332:	4b15      	ldr	r3, [pc, #84]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801033a:	2b00      	cmp	r3, #0
 801033c:	d105      	bne.n	801034a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801033e:	4b12      	ldr	r3, [pc, #72]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	4a11      	ldr	r2, [pc, #68]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010344:	f023 0303 	bic.w	r3, r3, #3
 8010348:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 801034a:	4b0f      	ldr	r3, [pc, #60]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 801034c:	68db      	ldr	r3, [r3, #12]
 801034e:	4a0e      	ldr	r2, [pc, #56]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010350:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8010354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010358:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801035a:	f7ff f845 	bl	800f3e8 <HAL_GetTick>
 801035e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010360:	e008      	b.n	8010374 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010362:	f7ff f841 	bl	800f3e8 <HAL_GetTick>
 8010366:	4602      	mov	r2, r0
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	2b02      	cmp	r3, #2
 801036e:	d901      	bls.n	8010374 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8010370:	2303      	movs	r3, #3
 8010372:	e00e      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010374:	4b04      	ldr	r3, [pc, #16]	; (8010388 <HAL_RCC_OscConfig+0x82c>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1f0      	bne.n	8010362 <HAL_RCC_OscConfig+0x806>
 8010380:	e006      	b.n	8010390 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8010382:	2301      	movs	r3, #1
 8010384:	e005      	b.n	8010392 <HAL_RCC_OscConfig+0x836>
 8010386:	bf00      	nop
 8010388:	40021000 	.word	0x40021000
 801038c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8010390:	2300      	movs	r3, #0
}
 8010392:	4618      	mov	r0, r3
 8010394:	3720      	adds	r7, #32
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop

0801039c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d101      	bne.n	80103b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80103ac:	2301      	movs	r3, #1
 80103ae:	e0c8      	b.n	8010542 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80103b0:	4b66      	ldr	r3, [pc, #408]	; (801054c <HAL_RCC_ClockConfig+0x1b0>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f003 0307 	and.w	r3, r3, #7
 80103b8:	683a      	ldr	r2, [r7, #0]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d910      	bls.n	80103e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80103be:	4b63      	ldr	r3, [pc, #396]	; (801054c <HAL_RCC_ClockConfig+0x1b0>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f023 0207 	bic.w	r2, r3, #7
 80103c6:	4961      	ldr	r1, [pc, #388]	; (801054c <HAL_RCC_ClockConfig+0x1b0>)
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	4313      	orrs	r3, r2
 80103cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80103ce:	4b5f      	ldr	r3, [pc, #380]	; (801054c <HAL_RCC_ClockConfig+0x1b0>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f003 0307 	and.w	r3, r3, #7
 80103d6:	683a      	ldr	r2, [r7, #0]
 80103d8:	429a      	cmp	r2, r3
 80103da:	d001      	beq.n	80103e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80103dc:	2301      	movs	r3, #1
 80103de:	e0b0      	b.n	8010542 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f003 0301 	and.w	r3, r3, #1
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d04c      	beq.n	8010486 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	2b03      	cmp	r3, #3
 80103f2:	d107      	bne.n	8010404 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80103f4:	4b56      	ldr	r3, [pc, #344]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d121      	bne.n	8010444 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8010400:	2301      	movs	r3, #1
 8010402:	e09e      	b.n	8010542 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	2b02      	cmp	r3, #2
 801040a:	d107      	bne.n	801041c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801040c:	4b50      	ldr	r3, [pc, #320]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010414:	2b00      	cmp	r3, #0
 8010416:	d115      	bne.n	8010444 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8010418:	2301      	movs	r3, #1
 801041a:	e092      	b.n	8010542 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d107      	bne.n	8010434 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010424:	4b4a      	ldr	r3, [pc, #296]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f003 0302 	and.w	r3, r3, #2
 801042c:	2b00      	cmp	r3, #0
 801042e:	d109      	bne.n	8010444 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8010430:	2301      	movs	r3, #1
 8010432:	e086      	b.n	8010542 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010434:	4b46      	ldr	r3, [pc, #280]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801043c:	2b00      	cmp	r3, #0
 801043e:	d101      	bne.n	8010444 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8010440:	2301      	movs	r3, #1
 8010442:	e07e      	b.n	8010542 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010444:	4b42      	ldr	r3, [pc, #264]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 8010446:	689b      	ldr	r3, [r3, #8]
 8010448:	f023 0203 	bic.w	r2, r3, #3
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	493f      	ldr	r1, [pc, #252]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 8010452:	4313      	orrs	r3, r2
 8010454:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010456:	f7fe ffc7 	bl	800f3e8 <HAL_GetTick>
 801045a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801045c:	e00a      	b.n	8010474 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801045e:	f7fe ffc3 	bl	800f3e8 <HAL_GetTick>
 8010462:	4602      	mov	r2, r0
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	1ad3      	subs	r3, r2, r3
 8010468:	f241 3288 	movw	r2, #5000	; 0x1388
 801046c:	4293      	cmp	r3, r2
 801046e:	d901      	bls.n	8010474 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8010470:	2303      	movs	r3, #3
 8010472:	e066      	b.n	8010542 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010474:	4b36      	ldr	r3, [pc, #216]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 8010476:	689b      	ldr	r3, [r3, #8]
 8010478:	f003 020c 	and.w	r2, r3, #12
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	429a      	cmp	r2, r3
 8010484:	d1eb      	bne.n	801045e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f003 0302 	and.w	r3, r3, #2
 801048e:	2b00      	cmp	r3, #0
 8010490:	d008      	beq.n	80104a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010492:	4b2f      	ldr	r3, [pc, #188]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	492c      	ldr	r1, [pc, #176]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 80104a0:	4313      	orrs	r3, r2
 80104a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80104a4:	4b29      	ldr	r3, [pc, #164]	; (801054c <HAL_RCC_ClockConfig+0x1b0>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	f003 0307 	and.w	r3, r3, #7
 80104ac:	683a      	ldr	r2, [r7, #0]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d210      	bcs.n	80104d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80104b2:	4b26      	ldr	r3, [pc, #152]	; (801054c <HAL_RCC_ClockConfig+0x1b0>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f023 0207 	bic.w	r2, r3, #7
 80104ba:	4924      	ldr	r1, [pc, #144]	; (801054c <HAL_RCC_ClockConfig+0x1b0>)
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	4313      	orrs	r3, r2
 80104c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80104c2:	4b22      	ldr	r3, [pc, #136]	; (801054c <HAL_RCC_ClockConfig+0x1b0>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f003 0307 	and.w	r3, r3, #7
 80104ca:	683a      	ldr	r2, [r7, #0]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d001      	beq.n	80104d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80104d0:	2301      	movs	r3, #1
 80104d2:	e036      	b.n	8010542 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f003 0304 	and.w	r3, r3, #4
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d008      	beq.n	80104f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80104e0:	4b1b      	ldr	r3, [pc, #108]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 80104e2:	689b      	ldr	r3, [r3, #8]
 80104e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	68db      	ldr	r3, [r3, #12]
 80104ec:	4918      	ldr	r1, [pc, #96]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 80104ee:	4313      	orrs	r3, r2
 80104f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f003 0308 	and.w	r3, r3, #8
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d009      	beq.n	8010512 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80104fe:	4b14      	ldr	r3, [pc, #80]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 8010500:	689b      	ldr	r3, [r3, #8]
 8010502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	00db      	lsls	r3, r3, #3
 801050c:	4910      	ldr	r1, [pc, #64]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 801050e:	4313      	orrs	r3, r2
 8010510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010512:	f000 f825 	bl	8010560 <HAL_RCC_GetSysClockFreq>
 8010516:	4601      	mov	r1, r0
 8010518:	4b0d      	ldr	r3, [pc, #52]	; (8010550 <HAL_RCC_ClockConfig+0x1b4>)
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	091b      	lsrs	r3, r3, #4
 801051e:	f003 030f 	and.w	r3, r3, #15
 8010522:	4a0c      	ldr	r2, [pc, #48]	; (8010554 <HAL_RCC_ClockConfig+0x1b8>)
 8010524:	5cd3      	ldrb	r3, [r2, r3]
 8010526:	f003 031f 	and.w	r3, r3, #31
 801052a:	fa21 f303 	lsr.w	r3, r1, r3
 801052e:	4a0a      	ldr	r2, [pc, #40]	; (8010558 <HAL_RCC_ClockConfig+0x1bc>)
 8010530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010532:	4b0a      	ldr	r3, [pc, #40]	; (801055c <HAL_RCC_ClockConfig+0x1c0>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe ff06 	bl	800f348 <HAL_InitTick>
 801053c:	4603      	mov	r3, r0
 801053e:	72fb      	strb	r3, [r7, #11]

  return status;
 8010540:	7afb      	ldrb	r3, [r7, #11]
}
 8010542:	4618      	mov	r0, r3
 8010544:	3710      	adds	r7, #16
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	40022000 	.word	0x40022000
 8010550:	40021000 	.word	0x40021000
 8010554:	0801f4a4 	.word	0x0801f4a4
 8010558:	20000000 	.word	0x20000000
 801055c:	20000004 	.word	0x20000004

08010560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010560:	b480      	push	{r7}
 8010562:	b089      	sub	sp, #36	; 0x24
 8010564:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8010566:	2300      	movs	r3, #0
 8010568:	61fb      	str	r3, [r7, #28]
 801056a:	2300      	movs	r3, #0
 801056c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801056e:	4b3d      	ldr	r3, [pc, #244]	; (8010664 <HAL_RCC_GetSysClockFreq+0x104>)
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	f003 030c 	and.w	r3, r3, #12
 8010576:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010578:	4b3a      	ldr	r3, [pc, #232]	; (8010664 <HAL_RCC_GetSysClockFreq+0x104>)
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	f003 0303 	and.w	r3, r3, #3
 8010580:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d005      	beq.n	8010594 <HAL_RCC_GetSysClockFreq+0x34>
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	2b0c      	cmp	r3, #12
 801058c:	d121      	bne.n	80105d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2b01      	cmp	r3, #1
 8010592:	d11e      	bne.n	80105d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010594:	4b33      	ldr	r3, [pc, #204]	; (8010664 <HAL_RCC_GetSysClockFreq+0x104>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f003 0308 	and.w	r3, r3, #8
 801059c:	2b00      	cmp	r3, #0
 801059e:	d107      	bne.n	80105b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80105a0:	4b30      	ldr	r3, [pc, #192]	; (8010664 <HAL_RCC_GetSysClockFreq+0x104>)
 80105a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80105a6:	0a1b      	lsrs	r3, r3, #8
 80105a8:	f003 030f 	and.w	r3, r3, #15
 80105ac:	61fb      	str	r3, [r7, #28]
 80105ae:	e005      	b.n	80105bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80105b0:	4b2c      	ldr	r3, [pc, #176]	; (8010664 <HAL_RCC_GetSysClockFreq+0x104>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	091b      	lsrs	r3, r3, #4
 80105b6:	f003 030f 	and.w	r3, r3, #15
 80105ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80105bc:	4a2a      	ldr	r2, [pc, #168]	; (8010668 <HAL_RCC_GetSysClockFreq+0x108>)
 80105be:	69fb      	ldr	r3, [r7, #28]
 80105c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d10d      	bne.n	80105e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80105d0:	e00a      	b.n	80105e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	2b04      	cmp	r3, #4
 80105d6:	d102      	bne.n	80105de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80105d8:	4b24      	ldr	r3, [pc, #144]	; (801066c <HAL_RCC_GetSysClockFreq+0x10c>)
 80105da:	61bb      	str	r3, [r7, #24]
 80105dc:	e004      	b.n	80105e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	2b08      	cmp	r3, #8
 80105e2:	d101      	bne.n	80105e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80105e4:	4b22      	ldr	r3, [pc, #136]	; (8010670 <HAL_RCC_GetSysClockFreq+0x110>)
 80105e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	2b0c      	cmp	r3, #12
 80105ec:	d133      	bne.n	8010656 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80105ee:	4b1d      	ldr	r3, [pc, #116]	; (8010664 <HAL_RCC_GetSysClockFreq+0x104>)
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	f003 0303 	and.w	r3, r3, #3
 80105f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	2b02      	cmp	r3, #2
 80105fc:	d002      	beq.n	8010604 <HAL_RCC_GetSysClockFreq+0xa4>
 80105fe:	2b03      	cmp	r3, #3
 8010600:	d003      	beq.n	801060a <HAL_RCC_GetSysClockFreq+0xaa>
 8010602:	e005      	b.n	8010610 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8010604:	4b19      	ldr	r3, [pc, #100]	; (801066c <HAL_RCC_GetSysClockFreq+0x10c>)
 8010606:	617b      	str	r3, [r7, #20]
      break;
 8010608:	e005      	b.n	8010616 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801060a:	4b19      	ldr	r3, [pc, #100]	; (8010670 <HAL_RCC_GetSysClockFreq+0x110>)
 801060c:	617b      	str	r3, [r7, #20]
      break;
 801060e:	e002      	b.n	8010616 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8010610:	69fb      	ldr	r3, [r7, #28]
 8010612:	617b      	str	r3, [r7, #20]
      break;
 8010614:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010616:	4b13      	ldr	r3, [pc, #76]	; (8010664 <HAL_RCC_GetSysClockFreq+0x104>)
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	091b      	lsrs	r3, r3, #4
 801061c:	f003 0307 	and.w	r3, r3, #7
 8010620:	3301      	adds	r3, #1
 8010622:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8010624:	4b0f      	ldr	r3, [pc, #60]	; (8010664 <HAL_RCC_GetSysClockFreq+0x104>)
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	0a1b      	lsrs	r3, r3, #8
 801062a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	fb02 f203 	mul.w	r2, r2, r3
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	fbb2 f3f3 	udiv	r3, r2, r3
 801063a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801063c:	4b09      	ldr	r3, [pc, #36]	; (8010664 <HAL_RCC_GetSysClockFreq+0x104>)
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	0e5b      	lsrs	r3, r3, #25
 8010642:	f003 0303 	and.w	r3, r3, #3
 8010646:	3301      	adds	r3, #1
 8010648:	005b      	lsls	r3, r3, #1
 801064a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801064c:	697a      	ldr	r2, [r7, #20]
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	fbb2 f3f3 	udiv	r3, r2, r3
 8010654:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010656:	69bb      	ldr	r3, [r7, #24]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3724      	adds	r7, #36	; 0x24
 801065c:	46bd      	mov	sp, r7
 801065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010662:	4770      	bx	lr
 8010664:	40021000 	.word	0x40021000
 8010668:	0801f4bc 	.word	0x0801f4bc
 801066c:	00f42400 	.word	0x00f42400
 8010670:	007a1200 	.word	0x007a1200

08010674 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010674:	b480      	push	{r7}
 8010676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010678:	4b03      	ldr	r3, [pc, #12]	; (8010688 <HAL_RCC_GetHCLKFreq+0x14>)
 801067a:	681b      	ldr	r3, [r3, #0]
}
 801067c:	4618      	mov	r0, r3
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	20000000 	.word	0x20000000

0801068c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8010690:	f7ff fff0 	bl	8010674 <HAL_RCC_GetHCLKFreq>
 8010694:	4601      	mov	r1, r0
 8010696:	4b06      	ldr	r3, [pc, #24]	; (80106b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	0a1b      	lsrs	r3, r3, #8
 801069c:	f003 0307 	and.w	r3, r3, #7
 80106a0:	4a04      	ldr	r2, [pc, #16]	; (80106b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80106a2:	5cd3      	ldrb	r3, [r2, r3]
 80106a4:	f003 031f 	and.w	r3, r3, #31
 80106a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	40021000 	.word	0x40021000
 80106b4:	0801f4b4 	.word	0x0801f4b4

080106b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80106bc:	f7ff ffda 	bl	8010674 <HAL_RCC_GetHCLKFreq>
 80106c0:	4601      	mov	r1, r0
 80106c2:	4b06      	ldr	r3, [pc, #24]	; (80106dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	0adb      	lsrs	r3, r3, #11
 80106c8:	f003 0307 	and.w	r3, r3, #7
 80106cc:	4a04      	ldr	r2, [pc, #16]	; (80106e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80106ce:	5cd3      	ldrb	r3, [r2, r3]
 80106d0:	f003 031f 	and.w	r3, r3, #31
 80106d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80106d8:	4618      	mov	r0, r3
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	40021000 	.word	0x40021000
 80106e0:	0801f4b4 	.word	0x0801f4b4

080106e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b086      	sub	sp, #24
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80106ec:	2300      	movs	r3, #0
 80106ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80106f0:	4b2a      	ldr	r3, [pc, #168]	; (801079c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80106f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80106fc:	f7ff f9ca 	bl	800fa94 <HAL_PWREx_GetVoltageRange>
 8010700:	6178      	str	r0, [r7, #20]
 8010702:	e014      	b.n	801072e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8010704:	4b25      	ldr	r3, [pc, #148]	; (801079c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010708:	4a24      	ldr	r2, [pc, #144]	; (801079c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801070e:	6593      	str	r3, [r2, #88]	; 0x58
 8010710:	4b22      	ldr	r3, [pc, #136]	; (801079c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010718:	60fb      	str	r3, [r7, #12]
 801071a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801071c:	f7ff f9ba 	bl	800fa94 <HAL_PWREx_GetVoltageRange>
 8010720:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8010722:	4b1e      	ldr	r3, [pc, #120]	; (801079c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010726:	4a1d      	ldr	r2, [pc, #116]	; (801079c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801072c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010734:	d10b      	bne.n	801074e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2b80      	cmp	r3, #128	; 0x80
 801073a:	d919      	bls.n	8010770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2ba0      	cmp	r3, #160	; 0xa0
 8010740:	d902      	bls.n	8010748 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010742:	2302      	movs	r3, #2
 8010744:	613b      	str	r3, [r7, #16]
 8010746:	e013      	b.n	8010770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010748:	2301      	movs	r3, #1
 801074a:	613b      	str	r3, [r7, #16]
 801074c:	e010      	b.n	8010770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2b80      	cmp	r3, #128	; 0x80
 8010752:	d902      	bls.n	801075a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010754:	2303      	movs	r3, #3
 8010756:	613b      	str	r3, [r7, #16]
 8010758:	e00a      	b.n	8010770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2b80      	cmp	r3, #128	; 0x80
 801075e:	d102      	bne.n	8010766 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010760:	2302      	movs	r3, #2
 8010762:	613b      	str	r3, [r7, #16]
 8010764:	e004      	b.n	8010770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b70      	cmp	r3, #112	; 0x70
 801076a:	d101      	bne.n	8010770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801076c:	2301      	movs	r3, #1
 801076e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010770:	4b0b      	ldr	r3, [pc, #44]	; (80107a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	f023 0207 	bic.w	r2, r3, #7
 8010778:	4909      	ldr	r1, [pc, #36]	; (80107a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	4313      	orrs	r3, r2
 801077e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010780:	4b07      	ldr	r3, [pc, #28]	; (80107a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f003 0307 	and.w	r3, r3, #7
 8010788:	693a      	ldr	r2, [r7, #16]
 801078a:	429a      	cmp	r2, r3
 801078c:	d001      	beq.n	8010792 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801078e:	2301      	movs	r3, #1
 8010790:	e000      	b.n	8010794 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3718      	adds	r7, #24
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	40021000 	.word	0x40021000
 80107a0:	40022000 	.word	0x40022000

080107a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b086      	sub	sp, #24
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80107ac:	2300      	movs	r3, #0
 80107ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80107b0:	2300      	movs	r3, #0
 80107b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d02f      	beq.n	8010820 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80107c8:	d005      	beq.n	80107d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80107ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80107ce:	d015      	beq.n	80107fc <HAL_RCCEx_PeriphCLKConfig+0x58>
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d007      	beq.n	80107e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80107d4:	e00f      	b.n	80107f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80107d6:	4bac      	ldr	r3, [pc, #688]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	4aab      	ldr	r2, [pc, #684]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80107dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80107e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80107e2:	e00c      	b.n	80107fe <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	3304      	adds	r3, #4
 80107e8:	2100      	movs	r1, #0
 80107ea:	4618      	mov	r0, r3
 80107ec:	f000 f9dc 	bl	8010ba8 <RCCEx_PLLSAI1_Config>
 80107f0:	4603      	mov	r3, r0
 80107f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80107f4:	e003      	b.n	80107fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80107f6:	2301      	movs	r3, #1
 80107f8:	74fb      	strb	r3, [r7, #19]
      break;
 80107fa:	e000      	b.n	80107fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80107fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80107fe:	7cfb      	ldrb	r3, [r7, #19]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d10b      	bne.n	801081c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010804:	4ba0      	ldr	r3, [pc, #640]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801080a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010812:	499d      	ldr	r1, [pc, #628]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010814:	4313      	orrs	r3, r2
 8010816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801081a:	e001      	b.n	8010820 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801081c:	7cfb      	ldrb	r3, [r7, #19]
 801081e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010828:	2b00      	cmp	r3, #0
 801082a:	f000 8099 	beq.w	8010960 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 801082e:	2300      	movs	r3, #0
 8010830:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010832:	4b95      	ldr	r3, [pc, #596]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801083a:	2b00      	cmp	r3, #0
 801083c:	d101      	bne.n	8010842 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 801083e:	2301      	movs	r3, #1
 8010840:	e000      	b.n	8010844 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8010842:	2300      	movs	r3, #0
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00d      	beq.n	8010864 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010848:	4b8f      	ldr	r3, [pc, #572]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801084a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801084c:	4a8e      	ldr	r2, [pc, #568]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010852:	6593      	str	r3, [r2, #88]	; 0x58
 8010854:	4b8c      	ldr	r3, [pc, #560]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801085c:	60bb      	str	r3, [r7, #8]
 801085e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010860:	2301      	movs	r3, #1
 8010862:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010864:	4b89      	ldr	r3, [pc, #548]	; (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4a88      	ldr	r2, [pc, #544]	; (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 801086a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801086e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010870:	f7fe fdba 	bl	800f3e8 <HAL_GetTick>
 8010874:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010876:	e009      	b.n	801088c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010878:	f7fe fdb6 	bl	800f3e8 <HAL_GetTick>
 801087c:	4602      	mov	r2, r0
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	2b02      	cmp	r3, #2
 8010884:	d902      	bls.n	801088c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8010886:	2303      	movs	r3, #3
 8010888:	74fb      	strb	r3, [r7, #19]
        break;
 801088a:	e005      	b.n	8010898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801088c:	4b7f      	ldr	r3, [pc, #508]	; (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010894:	2b00      	cmp	r3, #0
 8010896:	d0ef      	beq.n	8010878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8010898:	7cfb      	ldrb	r3, [r7, #19]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d155      	bne.n	801094a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801089e:	4b7a      	ldr	r3, [pc, #488]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80108a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80108a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d01e      	beq.n	80108ee <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108b4:	697a      	ldr	r2, [r7, #20]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d019      	beq.n	80108ee <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80108ba:	4b73      	ldr	r3, [pc, #460]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80108bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80108c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80108c6:	4b70      	ldr	r3, [pc, #448]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80108c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108cc:	4a6e      	ldr	r2, [pc, #440]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80108ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80108d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80108d6:	4b6c      	ldr	r3, [pc, #432]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80108d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108dc:	4a6a      	ldr	r2, [pc, #424]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80108de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80108e6:	4a68      	ldr	r2, [pc, #416]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	f003 0301 	and.w	r3, r3, #1
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d016      	beq.n	8010926 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108f8:	f7fe fd76 	bl	800f3e8 <HAL_GetTick>
 80108fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80108fe:	e00b      	b.n	8010918 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010900:	f7fe fd72 	bl	800f3e8 <HAL_GetTick>
 8010904:	4602      	mov	r2, r0
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	1ad3      	subs	r3, r2, r3
 801090a:	f241 3288 	movw	r2, #5000	; 0x1388
 801090e:	4293      	cmp	r3, r2
 8010910:	d902      	bls.n	8010918 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8010912:	2303      	movs	r3, #3
 8010914:	74fb      	strb	r3, [r7, #19]
            break;
 8010916:	e006      	b.n	8010926 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010918:	4b5b      	ldr	r3, [pc, #364]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801091a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801091e:	f003 0302 	and.w	r3, r3, #2
 8010922:	2b00      	cmp	r3, #0
 8010924:	d0ec      	beq.n	8010900 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8010926:	7cfb      	ldrb	r3, [r7, #19]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d10b      	bne.n	8010944 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801092c:	4b56      	ldr	r3, [pc, #344]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801092e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010932:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801093a:	4953      	ldr	r1, [pc, #332]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801093c:	4313      	orrs	r3, r2
 801093e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8010942:	e004      	b.n	801094e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010944:	7cfb      	ldrb	r3, [r7, #19]
 8010946:	74bb      	strb	r3, [r7, #18]
 8010948:	e001      	b.n	801094e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801094a:	7cfb      	ldrb	r3, [r7, #19]
 801094c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801094e:	7c7b      	ldrb	r3, [r7, #17]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d105      	bne.n	8010960 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010954:	4b4c      	ldr	r3, [pc, #304]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010958:	4a4b      	ldr	r2, [pc, #300]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801095a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801095e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f003 0301 	and.w	r3, r3, #1
 8010968:	2b00      	cmp	r3, #0
 801096a:	d00a      	beq.n	8010982 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801096c:	4b46      	ldr	r3, [pc, #280]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010972:	f023 0203 	bic.w	r2, r3, #3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6a1b      	ldr	r3, [r3, #32]
 801097a:	4943      	ldr	r1, [pc, #268]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801097c:	4313      	orrs	r3, r2
 801097e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f003 0302 	and.w	r3, r3, #2
 801098a:	2b00      	cmp	r3, #0
 801098c:	d00a      	beq.n	80109a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801098e:	4b3e      	ldr	r3, [pc, #248]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010994:	f023 020c 	bic.w	r2, r3, #12
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801099c:	493a      	ldr	r1, [pc, #232]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801099e:	4313      	orrs	r3, r2
 80109a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f003 0320 	and.w	r3, r3, #32
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00a      	beq.n	80109c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80109b0:	4b35      	ldr	r3, [pc, #212]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80109b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109be:	4932      	ldr	r1, [pc, #200]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80109c0:	4313      	orrs	r3, r2
 80109c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00a      	beq.n	80109e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80109d2:	4b2d      	ldr	r3, [pc, #180]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80109d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109e0:	4929      	ldr	r1, [pc, #164]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80109e2:	4313      	orrs	r3, r2
 80109e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d00a      	beq.n	8010a0a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80109f4:	4b24      	ldr	r3, [pc, #144]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80109f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a02:	4921      	ldr	r1, [pc, #132]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010a04:	4313      	orrs	r3, r2
 8010a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00a      	beq.n	8010a2c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010a16:	4b1c      	ldr	r3, [pc, #112]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a24:	4918      	ldr	r1, [pc, #96]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010a26:	4313      	orrs	r3, r2
 8010a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00a      	beq.n	8010a4e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010a38:	4b13      	ldr	r3, [pc, #76]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a46:	4910      	ldr	r1, [pc, #64]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010a48:	4313      	orrs	r3, r2
 8010a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d02c      	beq.n	8010ab4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010a5a:	4b0b      	ldr	r3, [pc, #44]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a68:	4907      	ldr	r1, [pc, #28]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010a6a:	4313      	orrs	r3, r2
 8010a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a78:	d10a      	bne.n	8010a90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010a7a:	4b03      	ldr	r3, [pc, #12]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	4a02      	ldr	r2, [pc, #8]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8010a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a84:	60d3      	str	r3, [r2, #12]
 8010a86:	e015      	b.n	8010ab4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8010a88:	40021000 	.word	0x40021000
 8010a8c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010a98:	d10c      	bne.n	8010ab4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	3304      	adds	r3, #4
 8010a9e:	2101      	movs	r1, #1
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f000 f881 	bl	8010ba8 <RCCEx_PLLSAI1_Config>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8010aaa:	7cfb      	ldrb	r3, [r7, #19]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d001      	beq.n	8010ab4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8010ab0:	7cfb      	ldrb	r3, [r7, #19]
 8010ab2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d028      	beq.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010ac0:	4b30      	ldr	r3, [pc, #192]	; (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8010ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ace:	492d      	ldr	r1, [pc, #180]	; (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8010ad0:	4313      	orrs	r3, r2
 8010ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010ade:	d106      	bne.n	8010aee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010ae0:	4b28      	ldr	r3, [pc, #160]	; (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	4a27      	ldr	r2, [pc, #156]	; (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8010ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010aea:	60d3      	str	r3, [r2, #12]
 8010aec:	e011      	b.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010af6:	d10c      	bne.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	3304      	adds	r3, #4
 8010afc:	2101      	movs	r1, #1
 8010afe:	4618      	mov	r0, r3
 8010b00:	f000 f852 	bl	8010ba8 <RCCEx_PLLSAI1_Config>
 8010b04:	4603      	mov	r3, r0
 8010b06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010b08:	7cfb      	ldrb	r3, [r7, #19]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d001      	beq.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8010b0e:	7cfb      	ldrb	r3, [r7, #19]
 8010b10:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d01c      	beq.n	8010b58 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010b1e:	4b19      	ldr	r3, [pc, #100]	; (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8010b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b2c:	4915      	ldr	r1, [pc, #84]	; (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010b3c:	d10c      	bne.n	8010b58 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	3304      	adds	r3, #4
 8010b42:	2102      	movs	r1, #2
 8010b44:	4618      	mov	r0, r3
 8010b46:	f000 f82f 	bl	8010ba8 <RCCEx_PLLSAI1_Config>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010b4e:	7cfb      	ldrb	r3, [r7, #19]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d001      	beq.n	8010b58 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8010b54:	7cfb      	ldrb	r3, [r7, #19]
 8010b56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d00a      	beq.n	8010b7a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010b64:	4b07      	ldr	r3, [pc, #28]	; (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8010b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b72:	4904      	ldr	r1, [pc, #16]	; (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8010b74:	4313      	orrs	r3, r2
 8010b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010b7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3718      	adds	r7, #24
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	40021000 	.word	0x40021000

08010b88 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8010b8c:	4b05      	ldr	r3, [pc, #20]	; (8010ba4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a04      	ldr	r2, [pc, #16]	; (8010ba4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8010b92:	f043 0304 	orr.w	r3, r3, #4
 8010b96:	6013      	str	r3, [r2, #0]
}
 8010b98:	bf00      	nop
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop
 8010ba4:	40021000 	.word	0x40021000

08010ba8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010bb6:	4b73      	ldr	r3, [pc, #460]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	f003 0303 	and.w	r3, r3, #3
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d018      	beq.n	8010bf4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8010bc2:	4b70      	ldr	r3, [pc, #448]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010bc4:	68db      	ldr	r3, [r3, #12]
 8010bc6:	f003 0203 	and.w	r2, r3, #3
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d10d      	bne.n	8010bee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
       ||
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d009      	beq.n	8010bee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010bda:	4b6a      	ldr	r3, [pc, #424]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	091b      	lsrs	r3, r3, #4
 8010be0:	f003 0307 	and.w	r3, r3, #7
 8010be4:	1c5a      	adds	r2, r3, #1
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	685b      	ldr	r3, [r3, #4]
       ||
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d044      	beq.n	8010c78 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8010bee:	2301      	movs	r3, #1
 8010bf0:	73fb      	strb	r3, [r7, #15]
 8010bf2:	e041      	b.n	8010c78 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2b02      	cmp	r3, #2
 8010bfa:	d00c      	beq.n	8010c16 <RCCEx_PLLSAI1_Config+0x6e>
 8010bfc:	2b03      	cmp	r3, #3
 8010bfe:	d013      	beq.n	8010c28 <RCCEx_PLLSAI1_Config+0x80>
 8010c00:	2b01      	cmp	r3, #1
 8010c02:	d120      	bne.n	8010c46 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010c04:	4b5f      	ldr	r3, [pc, #380]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f003 0302 	and.w	r3, r3, #2
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d11d      	bne.n	8010c4c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8010c10:	2301      	movs	r3, #1
 8010c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010c14:	e01a      	b.n	8010c4c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010c16:	4b5b      	ldr	r3, [pc, #364]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d116      	bne.n	8010c50 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8010c22:	2301      	movs	r3, #1
 8010c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010c26:	e013      	b.n	8010c50 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010c28:	4b56      	ldr	r3, [pc, #344]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d10f      	bne.n	8010c54 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010c34:	4b53      	ldr	r3, [pc, #332]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d109      	bne.n	8010c54 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8010c40:	2301      	movs	r3, #1
 8010c42:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010c44:	e006      	b.n	8010c54 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8010c46:	2301      	movs	r3, #1
 8010c48:	73fb      	strb	r3, [r7, #15]
      break;
 8010c4a:	e004      	b.n	8010c56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8010c4c:	bf00      	nop
 8010c4e:	e002      	b.n	8010c56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8010c50:	bf00      	nop
 8010c52:	e000      	b.n	8010c56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8010c54:	bf00      	nop
    }

    if(status == HAL_OK)
 8010c56:	7bfb      	ldrb	r3, [r7, #15]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d10d      	bne.n	8010c78 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010c5c:	4b49      	ldr	r3, [pc, #292]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6819      	ldr	r1, [r3, #0]
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	3b01      	subs	r3, #1
 8010c6e:	011b      	lsls	r3, r3, #4
 8010c70:	430b      	orrs	r3, r1
 8010c72:	4944      	ldr	r1, [pc, #272]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010c74:	4313      	orrs	r3, r2
 8010c76:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010c78:	7bfb      	ldrb	r3, [r7, #15]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d17c      	bne.n	8010d78 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010c7e:	4b41      	ldr	r3, [pc, #260]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	4a40      	ldr	r2, [pc, #256]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010c84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c8a:	f7fe fbad 	bl	800f3e8 <HAL_GetTick>
 8010c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010c90:	e009      	b.n	8010ca6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010c92:	f7fe fba9 	bl	800f3e8 <HAL_GetTick>
 8010c96:	4602      	mov	r2, r0
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	d902      	bls.n	8010ca6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8010ca0:	2303      	movs	r3, #3
 8010ca2:	73fb      	strb	r3, [r7, #15]
        break;
 8010ca4:	e005      	b.n	8010cb2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010ca6:	4b37      	ldr	r3, [pc, #220]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1ef      	bne.n	8010c92 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8010cb2:	7bfb      	ldrb	r3, [r7, #15]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d15f      	bne.n	8010d78 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d110      	bne.n	8010ce0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010cbe:	4b31      	ldr	r3, [pc, #196]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010cc0:	691b      	ldr	r3, [r3, #16]
 8010cc2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8010cc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010cca:	687a      	ldr	r2, [r7, #4]
 8010ccc:	6892      	ldr	r2, [r2, #8]
 8010cce:	0211      	lsls	r1, r2, #8
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	68d2      	ldr	r2, [r2, #12]
 8010cd4:	06d2      	lsls	r2, r2, #27
 8010cd6:	430a      	orrs	r2, r1
 8010cd8:	492a      	ldr	r1, [pc, #168]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010cda:	4313      	orrs	r3, r2
 8010cdc:	610b      	str	r3, [r1, #16]
 8010cde:	e027      	b.n	8010d30 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	d112      	bne.n	8010d0c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010ce6:	4b27      	ldr	r3, [pc, #156]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010ce8:	691b      	ldr	r3, [r3, #16]
 8010cea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8010cee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	6892      	ldr	r2, [r2, #8]
 8010cf6:	0211      	lsls	r1, r2, #8
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	6912      	ldr	r2, [r2, #16]
 8010cfc:	0852      	lsrs	r2, r2, #1
 8010cfe:	3a01      	subs	r2, #1
 8010d00:	0552      	lsls	r2, r2, #21
 8010d02:	430a      	orrs	r2, r1
 8010d04:	491f      	ldr	r1, [pc, #124]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010d06:	4313      	orrs	r3, r2
 8010d08:	610b      	str	r3, [r1, #16]
 8010d0a:	e011      	b.n	8010d30 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010d0c:	4b1d      	ldr	r3, [pc, #116]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010d0e:	691b      	ldr	r3, [r3, #16]
 8010d10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8010d14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	6892      	ldr	r2, [r2, #8]
 8010d1c:	0211      	lsls	r1, r2, #8
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	6952      	ldr	r2, [r2, #20]
 8010d22:	0852      	lsrs	r2, r2, #1
 8010d24:	3a01      	subs	r2, #1
 8010d26:	0652      	lsls	r2, r2, #25
 8010d28:	430a      	orrs	r2, r1
 8010d2a:	4916      	ldr	r1, [pc, #88]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010d2c:	4313      	orrs	r3, r2
 8010d2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010d30:	4b14      	ldr	r3, [pc, #80]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a13      	ldr	r2, [pc, #76]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010d36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010d3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010d3c:	f7fe fb54 	bl	800f3e8 <HAL_GetTick>
 8010d40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010d42:	e009      	b.n	8010d58 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010d44:	f7fe fb50 	bl	800f3e8 <HAL_GetTick>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	1ad3      	subs	r3, r2, r3
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d902      	bls.n	8010d58 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8010d52:	2303      	movs	r3, #3
 8010d54:	73fb      	strb	r3, [r7, #15]
          break;
 8010d56:	e005      	b.n	8010d64 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010d58:	4b0a      	ldr	r3, [pc, #40]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d0ef      	beq.n	8010d44 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8010d64:	7bfb      	ldrb	r3, [r7, #15]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d106      	bne.n	8010d78 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8010d6a:	4b06      	ldr	r3, [pc, #24]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010d6c:	691a      	ldr	r2, [r3, #16]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	699b      	ldr	r3, [r3, #24]
 8010d72:	4904      	ldr	r1, [pc, #16]	; (8010d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010d74:	4313      	orrs	r3, r2
 8010d76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8010d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop
 8010d84:	40021000 	.word	0x40021000

08010d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d101      	bne.n	8010d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010d96:	2301      	movs	r3, #1
 8010d98:	e049      	b.n	8010e2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d106      	bne.n	8010db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2200      	movs	r2, #0
 8010daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f7fe f8fc 	bl	800efac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2202      	movs	r2, #2
 8010db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681a      	ldr	r2, [r3, #0]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	3304      	adds	r3, #4
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	4610      	mov	r0, r2
 8010dc8:	f000 f836 	bl	8010e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2201      	movs	r2, #1
 8010dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2201      	movs	r2, #1
 8010de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2201      	movs	r2, #1
 8010de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2201      	movs	r2, #1
 8010df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2201      	movs	r2, #1
 8010df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2201      	movs	r2, #1
 8010e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2201      	movs	r2, #1
 8010e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2201      	movs	r2, #1
 8010e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2201      	movs	r2, #1
 8010e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2201      	movs	r2, #1
 8010e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2201      	movs	r2, #1
 8010e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010e2c:	2300      	movs	r3, #0
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
	...

08010e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b085      	sub	sp, #20
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	4a2a      	ldr	r2, [pc, #168]	; (8010ef4 <TIM_Base_SetConfig+0xbc>)
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d003      	beq.n	8010e58 <TIM_Base_SetConfig+0x20>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e56:	d108      	bne.n	8010e6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	68fa      	ldr	r2, [r7, #12]
 8010e66:	4313      	orrs	r3, r2
 8010e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	4a21      	ldr	r2, [pc, #132]	; (8010ef4 <TIM_Base_SetConfig+0xbc>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d00b      	beq.n	8010e8a <TIM_Base_SetConfig+0x52>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e78:	d007      	beq.n	8010e8a <TIM_Base_SetConfig+0x52>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4a1e      	ldr	r2, [pc, #120]	; (8010ef8 <TIM_Base_SetConfig+0xc0>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d003      	beq.n	8010e8a <TIM_Base_SetConfig+0x52>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	4a1d      	ldr	r2, [pc, #116]	; (8010efc <TIM_Base_SetConfig+0xc4>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d108      	bne.n	8010e9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	4313      	orrs	r3, r2
 8010e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	695b      	ldr	r3, [r3, #20]
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	68fa      	ldr	r2, [r7, #12]
 8010eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	689a      	ldr	r2, [r3, #8]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	4a0c      	ldr	r2, [pc, #48]	; (8010ef4 <TIM_Base_SetConfig+0xbc>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d007      	beq.n	8010ed8 <TIM_Base_SetConfig+0xa0>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	4a0b      	ldr	r2, [pc, #44]	; (8010ef8 <TIM_Base_SetConfig+0xc0>)
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d003      	beq.n	8010ed8 <TIM_Base_SetConfig+0xa0>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	4a0a      	ldr	r2, [pc, #40]	; (8010efc <TIM_Base_SetConfig+0xc4>)
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	d103      	bne.n	8010ee0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	691a      	ldr	r2, [r3, #16]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	615a      	str	r2, [r3, #20]
}
 8010ee6:	bf00      	nop
 8010ee8:	3714      	adds	r7, #20
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr
 8010ef2:	bf00      	nop
 8010ef4:	40012c00 	.word	0x40012c00
 8010ef8:	40014000 	.word	0x40014000
 8010efc:	40014400 	.word	0x40014400

08010f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d101      	bne.n	8010f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	e040      	b.n	8010f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d106      	bne.n	8010f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f7fe f862 	bl	800efec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2224      	movs	r2, #36	; 0x24
 8010f2c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	681a      	ldr	r2, [r3, #0]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f022 0201 	bic.w	r2, r2, #1
 8010f3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 f8c0 	bl	80110c4 <UART_SetConfig>
 8010f44:	4603      	mov	r3, r0
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d101      	bne.n	8010f4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	e022      	b.n	8010f94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d002      	beq.n	8010f5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fac4 	bl	80114e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	685a      	ldr	r2, [r3, #4]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	689a      	ldr	r2, [r3, #8]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	681a      	ldr	r2, [r3, #0]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f042 0201 	orr.w	r2, r2, #1
 8010f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 fb4b 	bl	8011628 <UART_CheckIdleState>
 8010f92:	4603      	mov	r3, r0
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b08a      	sub	sp, #40	; 0x28
 8010fa0:	af02      	add	r7, sp, #8
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	603b      	str	r3, [r7, #0]
 8010fa8:	4613      	mov	r3, r2
 8010faa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fb0:	2b20      	cmp	r3, #32
 8010fb2:	f040 8081 	bne.w	80110b8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d002      	beq.n	8010fc2 <HAL_UART_Transmit+0x26>
 8010fbc:	88fb      	ldrh	r3, [r7, #6]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d101      	bne.n	8010fc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	e079      	b.n	80110ba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d101      	bne.n	8010fd4 <HAL_UART_Transmit+0x38>
 8010fd0:	2302      	movs	r3, #2
 8010fd2:	e072      	b.n	80110ba <HAL_UART_Transmit+0x11e>
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2221      	movs	r2, #33	; 0x21
 8010fe6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8010fe8:	f7fe f9fe 	bl	800f3e8 <HAL_GetTick>
 8010fec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	88fa      	ldrh	r2, [r7, #6]
 8010ff2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	88fa      	ldrh	r2, [r7, #6]
 8010ffa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	689b      	ldr	r3, [r3, #8]
 8011002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011006:	d108      	bne.n	801101a <HAL_UART_Transmit+0x7e>
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	691b      	ldr	r3, [r3, #16]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d104      	bne.n	801101a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8011010:	2300      	movs	r3, #0
 8011012:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	61bb      	str	r3, [r7, #24]
 8011018:	e003      	b.n	8011022 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801101e:	2300      	movs	r3, #0
 8011020:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2200      	movs	r2, #0
 8011026:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 801102a:	e02d      	b.n	8011088 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	9300      	str	r3, [sp, #0]
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	2200      	movs	r2, #0
 8011034:	2180      	movs	r1, #128	; 0x80
 8011036:	68f8      	ldr	r0, [r7, #12]
 8011038:	f000 fb3b 	bl	80116b2 <UART_WaitOnFlagUntilTimeout>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d001      	beq.n	8011046 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8011042:	2303      	movs	r3, #3
 8011044:	e039      	b.n	80110ba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d10b      	bne.n	8011064 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801104c:	69bb      	ldr	r3, [r7, #24]
 801104e:	881a      	ldrh	r2, [r3, #0]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011058:	b292      	uxth	r2, r2
 801105a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801105c:	69bb      	ldr	r3, [r7, #24]
 801105e:	3302      	adds	r3, #2
 8011060:	61bb      	str	r3, [r7, #24]
 8011062:	e008      	b.n	8011076 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011064:	69fb      	ldr	r3, [r7, #28]
 8011066:	781a      	ldrb	r2, [r3, #0]
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	b292      	uxth	r2, r2
 801106e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	3301      	adds	r3, #1
 8011074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801107c:	b29b      	uxth	r3, r3
 801107e:	3b01      	subs	r3, #1
 8011080:	b29a      	uxth	r2, r3
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801108e:	b29b      	uxth	r3, r3
 8011090:	2b00      	cmp	r3, #0
 8011092:	d1cb      	bne.n	801102c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	9300      	str	r3, [sp, #0]
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	2200      	movs	r2, #0
 801109c:	2140      	movs	r1, #64	; 0x40
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	f000 fb07 	bl	80116b2 <UART_WaitOnFlagUntilTimeout>
 80110a4:	4603      	mov	r3, r0
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d001      	beq.n	80110ae <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80110aa:	2303      	movs	r3, #3
 80110ac:	e005      	b.n	80110ba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2220      	movs	r2, #32
 80110b2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80110b4:	2300      	movs	r3, #0
 80110b6:	e000      	b.n	80110ba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80110b8:	2302      	movs	r3, #2
  }
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3720      	adds	r7, #32
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
	...

080110c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80110c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80110c8:	b088      	sub	sp, #32
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80110ce:	2300      	movs	r3, #0
 80110d0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	689a      	ldr	r2, [r3, #8]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	691b      	ldr	r3, [r3, #16]
 80110da:	431a      	orrs	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	695b      	ldr	r3, [r3, #20]
 80110e0:	431a      	orrs	r2, r3
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	69db      	ldr	r3, [r3, #28]
 80110e6:	4313      	orrs	r3, r2
 80110e8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	4bb0      	ldr	r3, [pc, #704]	; (80113b4 <UART_SetConfig+0x2f0>)
 80110f2:	4013      	ands	r3, r2
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	6812      	ldr	r2, [r2, #0]
 80110f8:	69f9      	ldr	r1, [r7, #28]
 80110fa:	430b      	orrs	r3, r1
 80110fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	68da      	ldr	r2, [r3, #12]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	430a      	orrs	r2, r1
 8011112:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	699b      	ldr	r3, [r3, #24]
 8011118:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	4aa6      	ldr	r2, [pc, #664]	; (80113b8 <UART_SetConfig+0x2f4>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d004      	beq.n	801112e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6a1b      	ldr	r3, [r3, #32]
 8011128:	69fa      	ldr	r2, [r7, #28]
 801112a:	4313      	orrs	r3, r2
 801112c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	689b      	ldr	r3, [r3, #8]
 8011134:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	69fa      	ldr	r2, [r7, #28]
 801113e:	430a      	orrs	r2, r1
 8011140:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	4a9d      	ldr	r2, [pc, #628]	; (80113bc <UART_SetConfig+0x2f8>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d121      	bne.n	8011190 <UART_SetConfig+0xcc>
 801114c:	4b9c      	ldr	r3, [pc, #624]	; (80113c0 <UART_SetConfig+0x2fc>)
 801114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011152:	f003 0303 	and.w	r3, r3, #3
 8011156:	2b03      	cmp	r3, #3
 8011158:	d816      	bhi.n	8011188 <UART_SetConfig+0xc4>
 801115a:	a201      	add	r2, pc, #4	; (adr r2, 8011160 <UART_SetConfig+0x9c>)
 801115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011160:	08011171 	.word	0x08011171
 8011164:	0801117d 	.word	0x0801117d
 8011168:	08011177 	.word	0x08011177
 801116c:	08011183 	.word	0x08011183
 8011170:	2301      	movs	r3, #1
 8011172:	76fb      	strb	r3, [r7, #27]
 8011174:	e072      	b.n	801125c <UART_SetConfig+0x198>
 8011176:	2302      	movs	r3, #2
 8011178:	76fb      	strb	r3, [r7, #27]
 801117a:	e06f      	b.n	801125c <UART_SetConfig+0x198>
 801117c:	2304      	movs	r3, #4
 801117e:	76fb      	strb	r3, [r7, #27]
 8011180:	e06c      	b.n	801125c <UART_SetConfig+0x198>
 8011182:	2308      	movs	r3, #8
 8011184:	76fb      	strb	r3, [r7, #27]
 8011186:	e069      	b.n	801125c <UART_SetConfig+0x198>
 8011188:	2310      	movs	r3, #16
 801118a:	76fb      	strb	r3, [r7, #27]
 801118c:	bf00      	nop
 801118e:	e065      	b.n	801125c <UART_SetConfig+0x198>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	4a8b      	ldr	r2, [pc, #556]	; (80113c4 <UART_SetConfig+0x300>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d134      	bne.n	8011204 <UART_SetConfig+0x140>
 801119a:	4b89      	ldr	r3, [pc, #548]	; (80113c0 <UART_SetConfig+0x2fc>)
 801119c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111a0:	f003 030c 	and.w	r3, r3, #12
 80111a4:	2b0c      	cmp	r3, #12
 80111a6:	d829      	bhi.n	80111fc <UART_SetConfig+0x138>
 80111a8:	a201      	add	r2, pc, #4	; (adr r2, 80111b0 <UART_SetConfig+0xec>)
 80111aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ae:	bf00      	nop
 80111b0:	080111e5 	.word	0x080111e5
 80111b4:	080111fd 	.word	0x080111fd
 80111b8:	080111fd 	.word	0x080111fd
 80111bc:	080111fd 	.word	0x080111fd
 80111c0:	080111f1 	.word	0x080111f1
 80111c4:	080111fd 	.word	0x080111fd
 80111c8:	080111fd 	.word	0x080111fd
 80111cc:	080111fd 	.word	0x080111fd
 80111d0:	080111eb 	.word	0x080111eb
 80111d4:	080111fd 	.word	0x080111fd
 80111d8:	080111fd 	.word	0x080111fd
 80111dc:	080111fd 	.word	0x080111fd
 80111e0:	080111f7 	.word	0x080111f7
 80111e4:	2300      	movs	r3, #0
 80111e6:	76fb      	strb	r3, [r7, #27]
 80111e8:	e038      	b.n	801125c <UART_SetConfig+0x198>
 80111ea:	2302      	movs	r3, #2
 80111ec:	76fb      	strb	r3, [r7, #27]
 80111ee:	e035      	b.n	801125c <UART_SetConfig+0x198>
 80111f0:	2304      	movs	r3, #4
 80111f2:	76fb      	strb	r3, [r7, #27]
 80111f4:	e032      	b.n	801125c <UART_SetConfig+0x198>
 80111f6:	2308      	movs	r3, #8
 80111f8:	76fb      	strb	r3, [r7, #27]
 80111fa:	e02f      	b.n	801125c <UART_SetConfig+0x198>
 80111fc:	2310      	movs	r3, #16
 80111fe:	76fb      	strb	r3, [r7, #27]
 8011200:	bf00      	nop
 8011202:	e02b      	b.n	801125c <UART_SetConfig+0x198>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4a6b      	ldr	r2, [pc, #428]	; (80113b8 <UART_SetConfig+0x2f4>)
 801120a:	4293      	cmp	r3, r2
 801120c:	d124      	bne.n	8011258 <UART_SetConfig+0x194>
 801120e:	4b6c      	ldr	r3, [pc, #432]	; (80113c0 <UART_SetConfig+0x2fc>)
 8011210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011214:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801121c:	d012      	beq.n	8011244 <UART_SetConfig+0x180>
 801121e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011222:	d802      	bhi.n	801122a <UART_SetConfig+0x166>
 8011224:	2b00      	cmp	r3, #0
 8011226:	d007      	beq.n	8011238 <UART_SetConfig+0x174>
 8011228:	e012      	b.n	8011250 <UART_SetConfig+0x18c>
 801122a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801122e:	d006      	beq.n	801123e <UART_SetConfig+0x17a>
 8011230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011234:	d009      	beq.n	801124a <UART_SetConfig+0x186>
 8011236:	e00b      	b.n	8011250 <UART_SetConfig+0x18c>
 8011238:	2300      	movs	r3, #0
 801123a:	76fb      	strb	r3, [r7, #27]
 801123c:	e00e      	b.n	801125c <UART_SetConfig+0x198>
 801123e:	2302      	movs	r3, #2
 8011240:	76fb      	strb	r3, [r7, #27]
 8011242:	e00b      	b.n	801125c <UART_SetConfig+0x198>
 8011244:	2304      	movs	r3, #4
 8011246:	76fb      	strb	r3, [r7, #27]
 8011248:	e008      	b.n	801125c <UART_SetConfig+0x198>
 801124a:	2308      	movs	r3, #8
 801124c:	76fb      	strb	r3, [r7, #27]
 801124e:	e005      	b.n	801125c <UART_SetConfig+0x198>
 8011250:	2310      	movs	r3, #16
 8011252:	76fb      	strb	r3, [r7, #27]
 8011254:	bf00      	nop
 8011256:	e001      	b.n	801125c <UART_SetConfig+0x198>
 8011258:	2310      	movs	r3, #16
 801125a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	4a55      	ldr	r2, [pc, #340]	; (80113b8 <UART_SetConfig+0x2f4>)
 8011262:	4293      	cmp	r3, r2
 8011264:	d174      	bne.n	8011350 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011266:	7efb      	ldrb	r3, [r7, #27]
 8011268:	2b08      	cmp	r3, #8
 801126a:	d824      	bhi.n	80112b6 <UART_SetConfig+0x1f2>
 801126c:	a201      	add	r2, pc, #4	; (adr r2, 8011274 <UART_SetConfig+0x1b0>)
 801126e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011272:	bf00      	nop
 8011274:	08011299 	.word	0x08011299
 8011278:	080112b7 	.word	0x080112b7
 801127c:	080112a1 	.word	0x080112a1
 8011280:	080112b7 	.word	0x080112b7
 8011284:	080112a7 	.word	0x080112a7
 8011288:	080112b7 	.word	0x080112b7
 801128c:	080112b7 	.word	0x080112b7
 8011290:	080112b7 	.word	0x080112b7
 8011294:	080112af 	.word	0x080112af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011298:	f7ff f9f8 	bl	801068c <HAL_RCC_GetPCLK1Freq>
 801129c:	6178      	str	r0, [r7, #20]
        break;
 801129e:	e00f      	b.n	80112c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80112a0:	4b49      	ldr	r3, [pc, #292]	; (80113c8 <UART_SetConfig+0x304>)
 80112a2:	617b      	str	r3, [r7, #20]
        break;
 80112a4:	e00c      	b.n	80112c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80112a6:	f7ff f95b 	bl	8010560 <HAL_RCC_GetSysClockFreq>
 80112aa:	6178      	str	r0, [r7, #20]
        break;
 80112ac:	e008      	b.n	80112c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112b2:	617b      	str	r3, [r7, #20]
        break;
 80112b4:	e004      	b.n	80112c0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80112b6:	2300      	movs	r3, #0
 80112b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80112ba:	2301      	movs	r3, #1
 80112bc:	76bb      	strb	r3, [r7, #26]
        break;
 80112be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	f000 8100 	beq.w	80114c8 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	685a      	ldr	r2, [r3, #4]
 80112cc:	4613      	mov	r3, r2
 80112ce:	005b      	lsls	r3, r3, #1
 80112d0:	4413      	add	r3, r2
 80112d2:	697a      	ldr	r2, [r7, #20]
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d305      	bcc.n	80112e4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80112de:	697a      	ldr	r2, [r7, #20]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d902      	bls.n	80112ea <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80112e4:	2301      	movs	r3, #1
 80112e6:	76bb      	strb	r3, [r7, #26]
 80112e8:	e0ee      	b.n	80114c8 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	4619      	mov	r1, r3
 80112ee:	f04f 0200 	mov.w	r2, #0
 80112f2:	f04f 0300 	mov.w	r3, #0
 80112f6:	f04f 0400 	mov.w	r4, #0
 80112fa:	0214      	lsls	r4, r2, #8
 80112fc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8011300:	020b      	lsls	r3, r1, #8
 8011302:	687a      	ldr	r2, [r7, #4]
 8011304:	6852      	ldr	r2, [r2, #4]
 8011306:	0852      	lsrs	r2, r2, #1
 8011308:	4611      	mov	r1, r2
 801130a:	f04f 0200 	mov.w	r2, #0
 801130e:	eb13 0b01 	adds.w	fp, r3, r1
 8011312:	eb44 0c02 	adc.w	ip, r4, r2
 8011316:	4658      	mov	r0, fp
 8011318:	4661      	mov	r1, ip
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	f04f 0400 	mov.w	r4, #0
 8011322:	461a      	mov	r2, r3
 8011324:	4623      	mov	r3, r4
 8011326:	f7ef fc9f 	bl	8000c68 <__aeabi_uldivmod>
 801132a:	4603      	mov	r3, r0
 801132c:	460c      	mov	r4, r1
 801132e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011336:	d308      	bcc.n	801134a <UART_SetConfig+0x286>
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801133e:	d204      	bcs.n	801134a <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	693a      	ldr	r2, [r7, #16]
 8011346:	60da      	str	r2, [r3, #12]
 8011348:	e0be      	b.n	80114c8 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 801134a:	2301      	movs	r3, #1
 801134c:	76bb      	strb	r3, [r7, #26]
 801134e:	e0bb      	b.n	80114c8 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	69db      	ldr	r3, [r3, #28]
 8011354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011358:	d169      	bne.n	801142e <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 801135a:	7efb      	ldrb	r3, [r7, #27]
 801135c:	2b08      	cmp	r3, #8
 801135e:	d835      	bhi.n	80113cc <UART_SetConfig+0x308>
 8011360:	a201      	add	r2, pc, #4	; (adr r2, 8011368 <UART_SetConfig+0x2a4>)
 8011362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011366:	bf00      	nop
 8011368:	0801138d 	.word	0x0801138d
 801136c:	08011395 	.word	0x08011395
 8011370:	0801139d 	.word	0x0801139d
 8011374:	080113cd 	.word	0x080113cd
 8011378:	080113a3 	.word	0x080113a3
 801137c:	080113cd 	.word	0x080113cd
 8011380:	080113cd 	.word	0x080113cd
 8011384:	080113cd 	.word	0x080113cd
 8011388:	080113ab 	.word	0x080113ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801138c:	f7ff f97e 	bl	801068c <HAL_RCC_GetPCLK1Freq>
 8011390:	6178      	str	r0, [r7, #20]
        break;
 8011392:	e020      	b.n	80113d6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011394:	f7ff f990 	bl	80106b8 <HAL_RCC_GetPCLK2Freq>
 8011398:	6178      	str	r0, [r7, #20]
        break;
 801139a:	e01c      	b.n	80113d6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801139c:	4b0a      	ldr	r3, [pc, #40]	; (80113c8 <UART_SetConfig+0x304>)
 801139e:	617b      	str	r3, [r7, #20]
        break;
 80113a0:	e019      	b.n	80113d6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80113a2:	f7ff f8dd 	bl	8010560 <HAL_RCC_GetSysClockFreq>
 80113a6:	6178      	str	r0, [r7, #20]
        break;
 80113a8:	e015      	b.n	80113d6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113ae:	617b      	str	r3, [r7, #20]
        break;
 80113b0:	e011      	b.n	80113d6 <UART_SetConfig+0x312>
 80113b2:	bf00      	nop
 80113b4:	efff69f3 	.word	0xefff69f3
 80113b8:	40008000 	.word	0x40008000
 80113bc:	40013800 	.word	0x40013800
 80113c0:	40021000 	.word	0x40021000
 80113c4:	40004400 	.word	0x40004400
 80113c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80113cc:	2300      	movs	r3, #0
 80113ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80113d0:	2301      	movs	r3, #1
 80113d2:	76bb      	strb	r3, [r7, #26]
        break;
 80113d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d075      	beq.n	80114c8 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	005a      	lsls	r2, r3, #1
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	085b      	lsrs	r3, r3, #1
 80113e6:	441a      	add	r2, r3
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	2b0f      	cmp	r3, #15
 80113f8:	d916      	bls.n	8011428 <UART_SetConfig+0x364>
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011400:	d212      	bcs.n	8011428 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	b29b      	uxth	r3, r3
 8011406:	f023 030f 	bic.w	r3, r3, #15
 801140a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	085b      	lsrs	r3, r3, #1
 8011410:	b29b      	uxth	r3, r3
 8011412:	f003 0307 	and.w	r3, r3, #7
 8011416:	b29a      	uxth	r2, r3
 8011418:	89fb      	ldrh	r3, [r7, #14]
 801141a:	4313      	orrs	r3, r2
 801141c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	89fa      	ldrh	r2, [r7, #14]
 8011424:	60da      	str	r2, [r3, #12]
 8011426:	e04f      	b.n	80114c8 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8011428:	2301      	movs	r3, #1
 801142a:	76bb      	strb	r3, [r7, #26]
 801142c:	e04c      	b.n	80114c8 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 801142e:	7efb      	ldrb	r3, [r7, #27]
 8011430:	2b08      	cmp	r3, #8
 8011432:	d828      	bhi.n	8011486 <UART_SetConfig+0x3c2>
 8011434:	a201      	add	r2, pc, #4	; (adr r2, 801143c <UART_SetConfig+0x378>)
 8011436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801143a:	bf00      	nop
 801143c:	08011461 	.word	0x08011461
 8011440:	08011469 	.word	0x08011469
 8011444:	08011471 	.word	0x08011471
 8011448:	08011487 	.word	0x08011487
 801144c:	08011477 	.word	0x08011477
 8011450:	08011487 	.word	0x08011487
 8011454:	08011487 	.word	0x08011487
 8011458:	08011487 	.word	0x08011487
 801145c:	0801147f 	.word	0x0801147f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011460:	f7ff f914 	bl	801068c <HAL_RCC_GetPCLK1Freq>
 8011464:	6178      	str	r0, [r7, #20]
        break;
 8011466:	e013      	b.n	8011490 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011468:	f7ff f926 	bl	80106b8 <HAL_RCC_GetPCLK2Freq>
 801146c:	6178      	str	r0, [r7, #20]
        break;
 801146e:	e00f      	b.n	8011490 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011470:	4b1b      	ldr	r3, [pc, #108]	; (80114e0 <UART_SetConfig+0x41c>)
 8011472:	617b      	str	r3, [r7, #20]
        break;
 8011474:	e00c      	b.n	8011490 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011476:	f7ff f873 	bl	8010560 <HAL_RCC_GetSysClockFreq>
 801147a:	6178      	str	r0, [r7, #20]
        break;
 801147c:	e008      	b.n	8011490 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801147e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011482:	617b      	str	r3, [r7, #20]
        break;
 8011484:	e004      	b.n	8011490 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8011486:	2300      	movs	r3, #0
 8011488:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801148a:	2301      	movs	r3, #1
 801148c:	76bb      	strb	r3, [r7, #26]
        break;
 801148e:	bf00      	nop
    }

    if (pclk != 0U)
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d018      	beq.n	80114c8 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	085a      	lsrs	r2, r3, #1
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	441a      	add	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	2b0f      	cmp	r3, #15
 80114b0:	d908      	bls.n	80114c4 <UART_SetConfig+0x400>
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114b8:	d204      	bcs.n	80114c4 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	693a      	ldr	r2, [r7, #16]
 80114c0:	60da      	str	r2, [r3, #12]
 80114c2:	e001      	b.n	80114c8 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80114c4:	2301      	movs	r3, #1
 80114c6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2200      	movs	r2, #0
 80114d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80114d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3720      	adds	r7, #32
 80114da:	46bd      	mov	sp, r7
 80114dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80114e0:	00f42400 	.word	0x00f42400

080114e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114f0:	f003 0301 	and.w	r3, r3, #1
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d00a      	beq.n	801150e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	430a      	orrs	r2, r1
 801150c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011512:	f003 0302 	and.w	r3, r3, #2
 8011516:	2b00      	cmp	r3, #0
 8011518:	d00a      	beq.n	8011530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	430a      	orrs	r2, r1
 801152e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011534:	f003 0304 	and.w	r3, r3, #4
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00a      	beq.n	8011552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	430a      	orrs	r2, r1
 8011550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011556:	f003 0308 	and.w	r3, r3, #8
 801155a:	2b00      	cmp	r3, #0
 801155c:	d00a      	beq.n	8011574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	430a      	orrs	r2, r1
 8011572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011578:	f003 0310 	and.w	r3, r3, #16
 801157c:	2b00      	cmp	r3, #0
 801157e:	d00a      	beq.n	8011596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	689b      	ldr	r3, [r3, #8]
 8011586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	430a      	orrs	r2, r1
 8011594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801159a:	f003 0320 	and.w	r3, r3, #32
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d00a      	beq.n	80115b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	689b      	ldr	r3, [r3, #8]
 80115a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	430a      	orrs	r2, r1
 80115b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d01a      	beq.n	80115fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	685b      	ldr	r3, [r3, #4]
 80115ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	430a      	orrs	r2, r1
 80115d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115e2:	d10a      	bne.n	80115fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	430a      	orrs	r2, r1
 80115f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00a      	beq.n	801161c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	430a      	orrs	r2, r1
 801161a:	605a      	str	r2, [r3, #4]
  }
}
 801161c:	bf00      	nop
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr

08011628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b086      	sub	sp, #24
 801162c:	af02      	add	r7, sp, #8
 801162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2200      	movs	r2, #0
 8011634:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8011636:	f7fd fed7 	bl	800f3e8 <HAL_GetTick>
 801163a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f003 0308 	and.w	r3, r3, #8
 8011646:	2b08      	cmp	r3, #8
 8011648:	d10e      	bne.n	8011668 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801164a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801164e:	9300      	str	r3, [sp, #0]
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2200      	movs	r2, #0
 8011654:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011658:	6878      	ldr	r0, [r7, #4]
 801165a:	f000 f82a 	bl	80116b2 <UART_WaitOnFlagUntilTimeout>
 801165e:	4603      	mov	r3, r0
 8011660:	2b00      	cmp	r3, #0
 8011662:	d001      	beq.n	8011668 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011664:	2303      	movs	r3, #3
 8011666:	e020      	b.n	80116aa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f003 0304 	and.w	r3, r3, #4
 8011672:	2b04      	cmp	r3, #4
 8011674:	d10e      	bne.n	8011694 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011676:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2200      	movs	r2, #0
 8011680:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 f814 	bl	80116b2 <UART_WaitOnFlagUntilTimeout>
 801168a:	4603      	mov	r3, r0
 801168c:	2b00      	cmp	r3, #0
 801168e:	d001      	beq.n	8011694 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011690:	2303      	movs	r3, #3
 8011692:	e00a      	b.n	80116aa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2220      	movs	r2, #32
 8011698:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2220      	movs	r2, #32
 801169e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80116a8:	2300      	movs	r3, #0
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b084      	sub	sp, #16
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	60f8      	str	r0, [r7, #12]
 80116ba:	60b9      	str	r1, [r7, #8]
 80116bc:	603b      	str	r3, [r7, #0]
 80116be:	4613      	mov	r3, r2
 80116c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116c2:	e05d      	b.n	8011780 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80116c4:	69bb      	ldr	r3, [r7, #24]
 80116c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ca:	d059      	beq.n	8011780 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80116cc:	f7fd fe8c 	bl	800f3e8 <HAL_GetTick>
 80116d0:	4602      	mov	r2, r0
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	69ba      	ldr	r2, [r7, #24]
 80116d8:	429a      	cmp	r2, r3
 80116da:	d302      	bcc.n	80116e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80116dc:	69bb      	ldr	r3, [r7, #24]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d11b      	bne.n	801171a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80116f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	689a      	ldr	r2, [r3, #8]
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f022 0201 	bic.w	r2, r2, #1
 8011700:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	2220      	movs	r2, #32
 8011706:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2220      	movs	r2, #32
 801170c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2200      	movs	r2, #0
 8011712:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8011716:	2303      	movs	r3, #3
 8011718:	e042      	b.n	80117a0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	f003 0304 	and.w	r3, r3, #4
 8011724:	2b00      	cmp	r3, #0
 8011726:	d02b      	beq.n	8011780 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	69db      	ldr	r3, [r3, #28]
 801172e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011736:	d123      	bne.n	8011780 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011740:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011750:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	689a      	ldr	r2, [r3, #8]
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	f022 0201 	bic.w	r2, r2, #1
 8011760:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2220      	movs	r2, #32
 8011766:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2220      	movs	r2, #32
 801176c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2220      	movs	r2, #32
 8011772:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2200      	movs	r2, #0
 8011778:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 801177c:	2303      	movs	r3, #3
 801177e:	e00f      	b.n	80117a0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	69da      	ldr	r2, [r3, #28]
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	4013      	ands	r3, r2
 801178a:	68ba      	ldr	r2, [r7, #8]
 801178c:	429a      	cmp	r2, r3
 801178e:	bf0c      	ite	eq
 8011790:	2301      	moveq	r3, #1
 8011792:	2300      	movne	r3, #0
 8011794:	b2db      	uxtb	r3, r3
 8011796:	461a      	mov	r2, r3
 8011798:	79fb      	ldrb	r3, [r7, #7]
 801179a:	429a      	cmp	r2, r3
 801179c:	d092      	beq.n	80116c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801179e:	2300      	movs	r3, #0
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3710      	adds	r7, #16
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}

080117a8 <_ZdaPv>:
 80117a8:	f000 b820 	b.w	80117ec <_ZdlPv>

080117ac <__cxa_pure_virtual>:
 80117ac:	b508      	push	{r3, lr}
 80117ae:	f000 f82b 	bl	8011808 <_ZSt9terminatev>

080117b2 <_Znaj>:
 80117b2:	f000 b802 	b.w	80117ba <_Znwj>

080117b6 <_ZdlPvj>:
 80117b6:	f000 b819 	b.w	80117ec <_ZdlPv>

080117ba <_Znwj>:
 80117ba:	b510      	push	{r4, lr}
 80117bc:	2800      	cmp	r0, #0
 80117be:	bf14      	ite	ne
 80117c0:	4604      	movne	r4, r0
 80117c2:	2401      	moveq	r4, #1
 80117c4:	4620      	mov	r0, r4
 80117c6:	f000 fb5d 	bl	8011e84 <malloc>
 80117ca:	b930      	cbnz	r0, 80117da <_Znwj+0x20>
 80117cc:	f000 f806 	bl	80117dc <_ZSt15get_new_handlerv>
 80117d0:	b908      	cbnz	r0, 80117d6 <_Znwj+0x1c>
 80117d2:	f000 faa5 	bl	8011d20 <abort>
 80117d6:	4780      	blx	r0
 80117d8:	e7f4      	b.n	80117c4 <_Znwj+0xa>
 80117da:	bd10      	pop	{r4, pc}

080117dc <_ZSt15get_new_handlerv>:
 80117dc:	4b02      	ldr	r3, [pc, #8]	; (80117e8 <_ZSt15get_new_handlerv+0xc>)
 80117de:	6818      	ldr	r0, [r3, #0]
 80117e0:	f3bf 8f5b 	dmb	ish
 80117e4:	4770      	bx	lr
 80117e6:	bf00      	nop
 80117e8:	200002f4 	.word	0x200002f4

080117ec <_ZdlPv>:
 80117ec:	f000 bb52 	b.w	8011e94 <free>

080117f0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80117f0:	b508      	push	{r3, lr}
 80117f2:	4780      	blx	r0
 80117f4:	f000 fa94 	bl	8011d20 <abort>

080117f8 <_ZSt13get_terminatev>:
 80117f8:	4b02      	ldr	r3, [pc, #8]	; (8011804 <_ZSt13get_terminatev+0xc>)
 80117fa:	6818      	ldr	r0, [r3, #0]
 80117fc:	f3bf 8f5b 	dmb	ish
 8011800:	4770      	bx	lr
 8011802:	bf00      	nop
 8011804:	2000000c 	.word	0x2000000c

08011808 <_ZSt9terminatev>:
 8011808:	b508      	push	{r3, lr}
 801180a:	f7ff fff5 	bl	80117f8 <_ZSt13get_terminatev>
 801180e:	f7ff ffef 	bl	80117f0 <_ZN10__cxxabiv111__terminateEPFvvE>
 8011812:	0000      	movs	r0, r0
 8011814:	0000      	movs	r0, r0
	...

08011818 <floor>:
 8011818:	ec51 0b10 	vmov	r0, r1, d0
 801181c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011820:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011824:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011828:	2e13      	cmp	r6, #19
 801182a:	460c      	mov	r4, r1
 801182c:	ee10 5a10 	vmov	r5, s0
 8011830:	4680      	mov	r8, r0
 8011832:	dc34      	bgt.n	801189e <floor+0x86>
 8011834:	2e00      	cmp	r6, #0
 8011836:	da16      	bge.n	8011866 <floor+0x4e>
 8011838:	a335      	add	r3, pc, #212	; (adr r3, 8011910 <floor+0xf8>)
 801183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183e:	f7ee fd35 	bl	80002ac <__adddf3>
 8011842:	2200      	movs	r2, #0
 8011844:	2300      	movs	r3, #0
 8011846:	f7ef f977 	bl	8000b38 <__aeabi_dcmpgt>
 801184a:	b148      	cbz	r0, 8011860 <floor+0x48>
 801184c:	2c00      	cmp	r4, #0
 801184e:	da59      	bge.n	8011904 <floor+0xec>
 8011850:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011854:	4a30      	ldr	r2, [pc, #192]	; (8011918 <floor+0x100>)
 8011856:	432b      	orrs	r3, r5
 8011858:	2500      	movs	r5, #0
 801185a:	42ab      	cmp	r3, r5
 801185c:	bf18      	it	ne
 801185e:	4614      	movne	r4, r2
 8011860:	4621      	mov	r1, r4
 8011862:	4628      	mov	r0, r5
 8011864:	e025      	b.n	80118b2 <floor+0x9a>
 8011866:	4f2d      	ldr	r7, [pc, #180]	; (801191c <floor+0x104>)
 8011868:	4137      	asrs	r7, r6
 801186a:	ea01 0307 	and.w	r3, r1, r7
 801186e:	4303      	orrs	r3, r0
 8011870:	d01f      	beq.n	80118b2 <floor+0x9a>
 8011872:	a327      	add	r3, pc, #156	; (adr r3, 8011910 <floor+0xf8>)
 8011874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011878:	f7ee fd18 	bl	80002ac <__adddf3>
 801187c:	2200      	movs	r2, #0
 801187e:	2300      	movs	r3, #0
 8011880:	f7ef f95a 	bl	8000b38 <__aeabi_dcmpgt>
 8011884:	2800      	cmp	r0, #0
 8011886:	d0eb      	beq.n	8011860 <floor+0x48>
 8011888:	2c00      	cmp	r4, #0
 801188a:	bfbe      	ittt	lt
 801188c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011890:	fa43 f606 	asrlt.w	r6, r3, r6
 8011894:	19a4      	addlt	r4, r4, r6
 8011896:	ea24 0407 	bic.w	r4, r4, r7
 801189a:	2500      	movs	r5, #0
 801189c:	e7e0      	b.n	8011860 <floor+0x48>
 801189e:	2e33      	cmp	r6, #51	; 0x33
 80118a0:	dd0b      	ble.n	80118ba <floor+0xa2>
 80118a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80118a6:	d104      	bne.n	80118b2 <floor+0x9a>
 80118a8:	ee10 2a10 	vmov	r2, s0
 80118ac:	460b      	mov	r3, r1
 80118ae:	f7ee fcfd 	bl	80002ac <__adddf3>
 80118b2:	ec41 0b10 	vmov	d0, r0, r1
 80118b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80118be:	f04f 33ff 	mov.w	r3, #4294967295
 80118c2:	fa23 f707 	lsr.w	r7, r3, r7
 80118c6:	4207      	tst	r7, r0
 80118c8:	d0f3      	beq.n	80118b2 <floor+0x9a>
 80118ca:	a311      	add	r3, pc, #68	; (adr r3, 8011910 <floor+0xf8>)
 80118cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d0:	f7ee fcec 	bl	80002ac <__adddf3>
 80118d4:	2200      	movs	r2, #0
 80118d6:	2300      	movs	r3, #0
 80118d8:	f7ef f92e 	bl	8000b38 <__aeabi_dcmpgt>
 80118dc:	2800      	cmp	r0, #0
 80118de:	d0bf      	beq.n	8011860 <floor+0x48>
 80118e0:	2c00      	cmp	r4, #0
 80118e2:	da02      	bge.n	80118ea <floor+0xd2>
 80118e4:	2e14      	cmp	r6, #20
 80118e6:	d103      	bne.n	80118f0 <floor+0xd8>
 80118e8:	3401      	adds	r4, #1
 80118ea:	ea25 0507 	bic.w	r5, r5, r7
 80118ee:	e7b7      	b.n	8011860 <floor+0x48>
 80118f0:	2301      	movs	r3, #1
 80118f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80118f6:	fa03 f606 	lsl.w	r6, r3, r6
 80118fa:	4435      	add	r5, r6
 80118fc:	4545      	cmp	r5, r8
 80118fe:	bf38      	it	cc
 8011900:	18e4      	addcc	r4, r4, r3
 8011902:	e7f2      	b.n	80118ea <floor+0xd2>
 8011904:	2500      	movs	r5, #0
 8011906:	462c      	mov	r4, r5
 8011908:	e7aa      	b.n	8011860 <floor+0x48>
 801190a:	bf00      	nop
 801190c:	f3af 8000 	nop.w
 8011910:	8800759c 	.word	0x8800759c
 8011914:	7e37e43c 	.word	0x7e37e43c
 8011918:	bff00000 	.word	0xbff00000
 801191c:	000fffff 	.word	0x000fffff

08011920 <frexp>:
 8011920:	b570      	push	{r4, r5, r6, lr}
 8011922:	2100      	movs	r1, #0
 8011924:	ec55 4b10 	vmov	r4, r5, d0
 8011928:	6001      	str	r1, [r0, #0]
 801192a:	4916      	ldr	r1, [pc, #88]	; (8011984 <frexp+0x64>)
 801192c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011930:	428b      	cmp	r3, r1
 8011932:	4606      	mov	r6, r0
 8011934:	462a      	mov	r2, r5
 8011936:	dc22      	bgt.n	801197e <frexp+0x5e>
 8011938:	ee10 1a10 	vmov	r1, s0
 801193c:	4319      	orrs	r1, r3
 801193e:	d01e      	beq.n	801197e <frexp+0x5e>
 8011940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011944:	da0d      	bge.n	8011962 <frexp+0x42>
 8011946:	2200      	movs	r2, #0
 8011948:	4b0f      	ldr	r3, [pc, #60]	; (8011988 <frexp+0x68>)
 801194a:	ee10 0a10 	vmov	r0, s0
 801194e:	4629      	mov	r1, r5
 8011950:	f7ee fe62 	bl	8000618 <__aeabi_dmul>
 8011954:	460a      	mov	r2, r1
 8011956:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801195a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801195e:	4604      	mov	r4, r0
 8011960:	6031      	str	r1, [r6, #0]
 8011962:	6831      	ldr	r1, [r6, #0]
 8011964:	151b      	asrs	r3, r3, #20
 8011966:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801196a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801196e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8011972:	440b      	add	r3, r1
 8011974:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011978:	6033      	str	r3, [r6, #0]
 801197a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801197e:	ec45 4b10 	vmov	d0, r4, r5
 8011982:	bd70      	pop	{r4, r5, r6, pc}
 8011984:	7fefffff 	.word	0x7fefffff
 8011988:	43500000 	.word	0x43500000

0801198c <round>:
 801198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801198e:	ec57 6b10 	vmov	r6, r7, d0
 8011992:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8011996:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801199a:	2c13      	cmp	r4, #19
 801199c:	463b      	mov	r3, r7
 801199e:	463d      	mov	r5, r7
 80119a0:	dc17      	bgt.n	80119d2 <round+0x46>
 80119a2:	2c00      	cmp	r4, #0
 80119a4:	da09      	bge.n	80119ba <round+0x2e>
 80119a6:	3401      	adds	r4, #1
 80119a8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80119ac:	d103      	bne.n	80119b6 <round+0x2a>
 80119ae:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80119b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80119b6:	2100      	movs	r1, #0
 80119b8:	e02c      	b.n	8011a14 <round+0x88>
 80119ba:	4a18      	ldr	r2, [pc, #96]	; (8011a1c <round+0x90>)
 80119bc:	4122      	asrs	r2, r4
 80119be:	4217      	tst	r7, r2
 80119c0:	d100      	bne.n	80119c4 <round+0x38>
 80119c2:	b19e      	cbz	r6, 80119ec <round+0x60>
 80119c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80119c8:	4123      	asrs	r3, r4
 80119ca:	442b      	add	r3, r5
 80119cc:	ea23 0302 	bic.w	r3, r3, r2
 80119d0:	e7f1      	b.n	80119b6 <round+0x2a>
 80119d2:	2c33      	cmp	r4, #51	; 0x33
 80119d4:	dd0d      	ble.n	80119f2 <round+0x66>
 80119d6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80119da:	d107      	bne.n	80119ec <round+0x60>
 80119dc:	4630      	mov	r0, r6
 80119de:	4639      	mov	r1, r7
 80119e0:	ee10 2a10 	vmov	r2, s0
 80119e4:	f7ee fc62 	bl	80002ac <__adddf3>
 80119e8:	4606      	mov	r6, r0
 80119ea:	460f      	mov	r7, r1
 80119ec:	ec47 6b10 	vmov	d0, r6, r7
 80119f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119f2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80119f6:	f04f 30ff 	mov.w	r0, #4294967295
 80119fa:	40d0      	lsrs	r0, r2
 80119fc:	4206      	tst	r6, r0
 80119fe:	d0f5      	beq.n	80119ec <round+0x60>
 8011a00:	2201      	movs	r2, #1
 8011a02:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011a06:	fa02 f404 	lsl.w	r4, r2, r4
 8011a0a:	1931      	adds	r1, r6, r4
 8011a0c:	bf28      	it	cs
 8011a0e:	189b      	addcs	r3, r3, r2
 8011a10:	ea21 0100 	bic.w	r1, r1, r0
 8011a14:	461f      	mov	r7, r3
 8011a16:	460e      	mov	r6, r1
 8011a18:	e7e8      	b.n	80119ec <round+0x60>
 8011a1a:	bf00      	nop
 8011a1c:	000fffff 	.word	0x000fffff

08011a20 <roundf>:
 8011a20:	ee10 0a10 	vmov	r0, s0
 8011a24:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011a28:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8011a2c:	2a16      	cmp	r2, #22
 8011a2e:	dc15      	bgt.n	8011a5c <roundf+0x3c>
 8011a30:	2a00      	cmp	r2, #0
 8011a32:	da08      	bge.n	8011a46 <roundf+0x26>
 8011a34:	3201      	adds	r2, #1
 8011a36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8011a3a:	d101      	bne.n	8011a40 <roundf+0x20>
 8011a3c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8011a40:	ee00 3a10 	vmov	s0, r3
 8011a44:	4770      	bx	lr
 8011a46:	4908      	ldr	r1, [pc, #32]	; (8011a68 <roundf+0x48>)
 8011a48:	4111      	asrs	r1, r2
 8011a4a:	4208      	tst	r0, r1
 8011a4c:	d0fa      	beq.n	8011a44 <roundf+0x24>
 8011a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011a52:	4113      	asrs	r3, r2
 8011a54:	4403      	add	r3, r0
 8011a56:	ea23 0301 	bic.w	r3, r3, r1
 8011a5a:	e7f1      	b.n	8011a40 <roundf+0x20>
 8011a5c:	2a80      	cmp	r2, #128	; 0x80
 8011a5e:	d1f1      	bne.n	8011a44 <roundf+0x24>
 8011a60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011a64:	4770      	bx	lr
 8011a66:	bf00      	nop
 8011a68:	007fffff 	.word	0x007fffff

08011a6c <expf>:
 8011a6c:	b530      	push	{r4, r5, lr}
 8011a6e:	ed2d 8b02 	vpush	{d8}
 8011a72:	4d35      	ldr	r5, [pc, #212]	; (8011b48 <expf+0xdc>)
 8011a74:	b08b      	sub	sp, #44	; 0x2c
 8011a76:	eeb0 8a40 	vmov.f32	s16, s0
 8011a7a:	f000 f871 	bl	8011b60 <__ieee754_expf>
 8011a7e:	f995 3000 	ldrsb.w	r3, [r5]
 8011a82:	3301      	adds	r3, #1
 8011a84:	ee10 4a10 	vmov	r4, s0
 8011a88:	d030      	beq.n	8011aec <expf+0x80>
 8011a8a:	eeb0 0a48 	vmov.f32	s0, s16
 8011a8e:	f000 f93d 	bl	8011d0c <finitef>
 8011a92:	b358      	cbz	r0, 8011aec <expf+0x80>
 8011a94:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8011b4c <expf+0xe0>
 8011a98:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa0:	dd35      	ble.n	8011b0e <expf+0xa2>
 8011aa2:	2303      	movs	r3, #3
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	4b2a      	ldr	r3, [pc, #168]	; (8011b50 <expf+0xe4>)
 8011aa8:	9301      	str	r3, [sp, #4]
 8011aaa:	ee18 0a10 	vmov	r0, s16
 8011aae:	2300      	movs	r3, #0
 8011ab0:	9308      	str	r3, [sp, #32]
 8011ab2:	f7ee fd59 	bl	8000568 <__aeabi_f2d>
 8011ab6:	f995 3000 	ldrsb.w	r3, [r5]
 8011aba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ac2:	b9cb      	cbnz	r3, 8011af8 <expf+0x8c>
 8011ac4:	4b23      	ldr	r3, [pc, #140]	; (8011b54 <expf+0xe8>)
 8011ac6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011aca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011ace:	4668      	mov	r0, sp
 8011ad0:	f000 f91a 	bl	8011d08 <matherr>
 8011ad4:	b1b0      	cbz	r0, 8011b04 <expf+0x98>
 8011ad6:	9b08      	ldr	r3, [sp, #32]
 8011ad8:	b11b      	cbz	r3, 8011ae2 <expf+0x76>
 8011ada:	f000 f947 	bl	8011d6c <__errno>
 8011ade:	9b08      	ldr	r3, [sp, #32]
 8011ae0:	6003      	str	r3, [r0, #0]
 8011ae2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ae6:	f7ef f86f 	bl	8000bc8 <__aeabi_d2f>
 8011aea:	4604      	mov	r4, r0
 8011aec:	ee00 4a10 	vmov	s0, r4
 8011af0:	b00b      	add	sp, #44	; 0x2c
 8011af2:	ecbd 8b02 	vpop	{d8}
 8011af6:	bd30      	pop	{r4, r5, pc}
 8011af8:	4917      	ldr	r1, [pc, #92]	; (8011b58 <expf+0xec>)
 8011afa:	2000      	movs	r0, #0
 8011afc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011b00:	2b02      	cmp	r3, #2
 8011b02:	d1e4      	bne.n	8011ace <expf+0x62>
 8011b04:	f000 f932 	bl	8011d6c <__errno>
 8011b08:	2322      	movs	r3, #34	; 0x22
 8011b0a:	6003      	str	r3, [r0, #0]
 8011b0c:	e7e3      	b.n	8011ad6 <expf+0x6a>
 8011b0e:	eddf 7a13 	vldr	s15, [pc, #76]	; 8011b5c <expf+0xf0>
 8011b12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b1a:	d5e7      	bpl.n	8011aec <expf+0x80>
 8011b1c:	2304      	movs	r3, #4
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	4b0b      	ldr	r3, [pc, #44]	; (8011b50 <expf+0xe4>)
 8011b22:	9301      	str	r3, [sp, #4]
 8011b24:	ee18 0a10 	vmov	r0, s16
 8011b28:	2300      	movs	r3, #0
 8011b2a:	9308      	str	r3, [sp, #32]
 8011b2c:	f7ee fd1c 	bl	8000568 <__aeabi_f2d>
 8011b30:	2300      	movs	r3, #0
 8011b32:	2200      	movs	r2, #0
 8011b34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011b38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b40:	f995 3000 	ldrsb.w	r3, [r5]
 8011b44:	e7dc      	b.n	8011b00 <expf+0x94>
 8011b46:	bf00      	nop
 8011b48:	20000010 	.word	0x20000010
 8011b4c:	42b17180 	.word	0x42b17180
 8011b50:	0801fc94 	.word	0x0801fc94
 8011b54:	47efffff 	.word	0x47efffff
 8011b58:	7ff00000 	.word	0x7ff00000
 8011b5c:	c2cff1b5 	.word	0xc2cff1b5

08011b60 <__ieee754_expf>:
 8011b60:	ee10 2a10 	vmov	r2, s0
 8011b64:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011b68:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011b6c:	d902      	bls.n	8011b74 <__ieee754_expf+0x14>
 8011b6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011b72:	4770      	bx	lr
 8011b74:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8011b78:	d106      	bne.n	8011b88 <__ieee754_expf+0x28>
 8011b7a:	eddf 7a51 	vldr	s15, [pc, #324]	; 8011cc0 <__ieee754_expf+0x160>
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	bf18      	it	ne
 8011b82:	eeb0 0a67 	vmovne.f32	s0, s15
 8011b86:	4770      	bx	lr
 8011b88:	484e      	ldr	r0, [pc, #312]	; (8011cc4 <__ieee754_expf+0x164>)
 8011b8a:	4282      	cmp	r2, r0
 8011b8c:	dd04      	ble.n	8011b98 <__ieee754_expf+0x38>
 8011b8e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8011cc8 <__ieee754_expf+0x168>
 8011b92:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011b96:	4770      	bx	lr
 8011b98:	2a00      	cmp	r2, #0
 8011b9a:	da03      	bge.n	8011ba4 <__ieee754_expf+0x44>
 8011b9c:	4a4b      	ldr	r2, [pc, #300]	; (8011ccc <__ieee754_expf+0x16c>)
 8011b9e:	4291      	cmp	r1, r2
 8011ba0:	f200 808a 	bhi.w	8011cb8 <__ieee754_expf+0x158>
 8011ba4:	4a4a      	ldr	r2, [pc, #296]	; (8011cd0 <__ieee754_expf+0x170>)
 8011ba6:	4291      	cmp	r1, r2
 8011ba8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011bac:	d954      	bls.n	8011c58 <__ieee754_expf+0xf8>
 8011bae:	4a49      	ldr	r2, [pc, #292]	; (8011cd4 <__ieee754_expf+0x174>)
 8011bb0:	4291      	cmp	r1, r2
 8011bb2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011bb6:	d836      	bhi.n	8011c26 <__ieee754_expf+0xc6>
 8011bb8:	4947      	ldr	r1, [pc, #284]	; (8011cd8 <__ieee754_expf+0x178>)
 8011bba:	4411      	add	r1, r2
 8011bbc:	ed91 7a00 	vldr	s14, [r1]
 8011bc0:	4946      	ldr	r1, [pc, #280]	; (8011cdc <__ieee754_expf+0x17c>)
 8011bc2:	440a      	add	r2, r1
 8011bc4:	edd2 7a00 	vldr	s15, [r2]
 8011bc8:	ee30 7a47 	vsub.f32	s14, s0, s14
 8011bcc:	f1c3 0201 	rsb	r2, r3, #1
 8011bd0:	1ad2      	subs	r2, r2, r3
 8011bd2:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011bd6:	ee60 6a00 	vmul.f32	s13, s0, s0
 8011bda:	eddf 5a41 	vldr	s11, [pc, #260]	; 8011ce0 <__ieee754_expf+0x180>
 8011bde:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8011ce4 <__ieee754_expf+0x184>
 8011be2:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8011be6:	eddf 5a40 	vldr	s11, [pc, #256]	; 8011ce8 <__ieee754_expf+0x188>
 8011bea:	eee5 5a26 	vfma.f32	s11, s10, s13
 8011bee:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8011cec <__ieee754_expf+0x18c>
 8011bf2:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8011bf6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8011cf0 <__ieee754_expf+0x190>
 8011bfa:	eee5 5a26 	vfma.f32	s11, s10, s13
 8011bfe:	eeb0 5a40 	vmov.f32	s10, s0
 8011c02:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8011c06:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8011c0a:	eef0 6a45 	vmov.f32	s13, s10
 8011c0e:	ee20 5a05 	vmul.f32	s10, s0, s10
 8011c12:	bb92      	cbnz	r2, 8011c7a <__ieee754_expf+0x11a>
 8011c14:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8011c18:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8011c1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011c20:	ee36 0a40 	vsub.f32	s0, s12, s0
 8011c24:	4770      	bx	lr
 8011c26:	4b33      	ldr	r3, [pc, #204]	; (8011cf4 <__ieee754_expf+0x194>)
 8011c28:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011cf8 <__ieee754_expf+0x198>
 8011c2c:	4413      	add	r3, r2
 8011c2e:	edd3 7a00 	vldr	s15, [r3]
 8011c32:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011c36:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011cfc <__ieee754_expf+0x19c>
 8011c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c3e:	ee17 2a90 	vmov	r2, s15
 8011c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c46:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011c4a:	eeb0 7a40 	vmov.f32	s14, s0
 8011c4e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8011d00 <__ieee754_expf+0x1a0>
 8011c52:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011c56:	e7bc      	b.n	8011bd2 <__ieee754_expf+0x72>
 8011c58:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8011c5c:	d20b      	bcs.n	8011c76 <__ieee754_expf+0x116>
 8011c5e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8011cc8 <__ieee754_expf+0x168>
 8011c62:	ee70 6a26 	vadd.f32	s13, s0, s13
 8011c66:	eef4 6ac6 	vcmpe.f32	s13, s12
 8011c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6e:	dd02      	ble.n	8011c76 <__ieee754_expf+0x116>
 8011c70:	ee30 0a06 	vadd.f32	s0, s0, s12
 8011c74:	4770      	bx	lr
 8011c76:	2200      	movs	r2, #0
 8011c78:	e7ad      	b.n	8011bd6 <__ieee754_expf+0x76>
 8011c7a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8011c7e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8011c82:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8011c86:	bfb8      	it	lt
 8011c88:	3264      	addlt	r2, #100	; 0x64
 8011c8a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011c8e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8011c92:	ee76 7a40 	vsub.f32	s15, s12, s0
 8011c96:	ee17 3a90 	vmov	r3, s15
 8011c9a:	bfab      	itete	ge
 8011c9c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011ca0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011ca4:	ee00 3a10 	vmovge	s0, r3
 8011ca8:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8011d04 <__ieee754_expf+0x1a4>
 8011cac:	bfbc      	itt	lt
 8011cae:	ee00 3a10 	vmovlt	s0, r3
 8011cb2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8011cb6:	4770      	bx	lr
 8011cb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011cc0 <__ieee754_expf+0x160>
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	00000000 	.word	0x00000000
 8011cc4:	42b17217 	.word	0x42b17217
 8011cc8:	7149f2ca 	.word	0x7149f2ca
 8011ccc:	42cff1b5 	.word	0x42cff1b5
 8011cd0:	3eb17218 	.word	0x3eb17218
 8011cd4:	3f851591 	.word	0x3f851591
 8011cd8:	0801fca4 	.word	0x0801fca4
 8011cdc:	0801fcac 	.word	0x0801fcac
 8011ce0:	3331bb4c 	.word	0x3331bb4c
 8011ce4:	b5ddea0e 	.word	0xb5ddea0e
 8011ce8:	388ab355 	.word	0x388ab355
 8011cec:	bb360b61 	.word	0xbb360b61
 8011cf0:	3e2aaaab 	.word	0x3e2aaaab
 8011cf4:	0801fc9c 	.word	0x0801fc9c
 8011cf8:	3fb8aa3b 	.word	0x3fb8aa3b
 8011cfc:	3f317180 	.word	0x3f317180
 8011d00:	3717f7d1 	.word	0x3717f7d1
 8011d04:	0d800000 	.word	0x0d800000

08011d08 <matherr>:
 8011d08:	2000      	movs	r0, #0
 8011d0a:	4770      	bx	lr

08011d0c <finitef>:
 8011d0c:	ee10 3a10 	vmov	r3, s0
 8011d10:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8011d14:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011d18:	bfac      	ite	ge
 8011d1a:	2000      	movge	r0, #0
 8011d1c:	2001      	movlt	r0, #1
 8011d1e:	4770      	bx	lr

08011d20 <abort>:
 8011d20:	b508      	push	{r3, lr}
 8011d22:	2006      	movs	r0, #6
 8011d24:	f000 ff74 	bl	8012c10 <raise>
 8011d28:	2001      	movs	r0, #1
 8011d2a:	f7fd f9e7 	bl	800f0fc <_exit>
	...

08011d30 <__assert_func>:
 8011d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d32:	461c      	mov	r4, r3
 8011d34:	4b09      	ldr	r3, [pc, #36]	; (8011d5c <__assert_func+0x2c>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	4605      	mov	r5, r0
 8011d3a:	68d8      	ldr	r0, [r3, #12]
 8011d3c:	b152      	cbz	r2, 8011d54 <__assert_func+0x24>
 8011d3e:	4b08      	ldr	r3, [pc, #32]	; (8011d60 <__assert_func+0x30>)
 8011d40:	9100      	str	r1, [sp, #0]
 8011d42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011d46:	4907      	ldr	r1, [pc, #28]	; (8011d64 <__assert_func+0x34>)
 8011d48:	462b      	mov	r3, r5
 8011d4a:	4622      	mov	r2, r4
 8011d4c:	f000 f814 	bl	8011d78 <fiprintf>
 8011d50:	f7ff ffe6 	bl	8011d20 <abort>
 8011d54:	4b04      	ldr	r3, [pc, #16]	; (8011d68 <__assert_func+0x38>)
 8011d56:	461a      	mov	r2, r3
 8011d58:	e7f2      	b.n	8011d40 <__assert_func+0x10>
 8011d5a:	bf00      	nop
 8011d5c:	20000014 	.word	0x20000014
 8011d60:	0801fcb4 	.word	0x0801fcb4
 8011d64:	0801fcc1 	.word	0x0801fcc1
 8011d68:	0801fcef 	.word	0x0801fcef

08011d6c <__errno>:
 8011d6c:	4b01      	ldr	r3, [pc, #4]	; (8011d74 <__errno+0x8>)
 8011d6e:	6818      	ldr	r0, [r3, #0]
 8011d70:	4770      	bx	lr
 8011d72:	bf00      	nop
 8011d74:	20000014 	.word	0x20000014

08011d78 <fiprintf>:
 8011d78:	b40e      	push	{r1, r2, r3}
 8011d7a:	b503      	push	{r0, r1, lr}
 8011d7c:	4601      	mov	r1, r0
 8011d7e:	ab03      	add	r3, sp, #12
 8011d80:	4805      	ldr	r0, [pc, #20]	; (8011d98 <fiprintf+0x20>)
 8011d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d86:	6800      	ldr	r0, [r0, #0]
 8011d88:	9301      	str	r3, [sp, #4]
 8011d8a:	f000 f997 	bl	80120bc <_vfiprintf_r>
 8011d8e:	b002      	add	sp, #8
 8011d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d94:	b003      	add	sp, #12
 8011d96:	4770      	bx	lr
 8011d98:	20000014 	.word	0x20000014

08011d9c <_fputs_r>:
 8011d9c:	b570      	push	{r4, r5, r6, lr}
 8011d9e:	460e      	mov	r6, r1
 8011da0:	4614      	mov	r4, r2
 8011da2:	4605      	mov	r5, r0
 8011da4:	b118      	cbz	r0, 8011dae <_fputs_r+0x12>
 8011da6:	6983      	ldr	r3, [r0, #24]
 8011da8:	b90b      	cbnz	r3, 8011dae <_fputs_r+0x12>
 8011daa:	f001 ff75 	bl	8013c98 <__sinit>
 8011dae:	4b1c      	ldr	r3, [pc, #112]	; (8011e20 <_fputs_r+0x84>)
 8011db0:	429c      	cmp	r4, r3
 8011db2:	d10b      	bne.n	8011dcc <_fputs_r+0x30>
 8011db4:	686c      	ldr	r4, [r5, #4]
 8011db6:	89a3      	ldrh	r3, [r4, #12]
 8011db8:	071b      	lsls	r3, r3, #28
 8011dba:	d511      	bpl.n	8011de0 <_fputs_r+0x44>
 8011dbc:	6923      	ldr	r3, [r4, #16]
 8011dbe:	b17b      	cbz	r3, 8011de0 <_fputs_r+0x44>
 8011dc0:	3e01      	subs	r6, #1
 8011dc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011dc6:	b9a1      	cbnz	r1, 8011df2 <_fputs_r+0x56>
 8011dc8:	4608      	mov	r0, r1
 8011dca:	e011      	b.n	8011df0 <_fputs_r+0x54>
 8011dcc:	4b15      	ldr	r3, [pc, #84]	; (8011e24 <_fputs_r+0x88>)
 8011dce:	429c      	cmp	r4, r3
 8011dd0:	d101      	bne.n	8011dd6 <_fputs_r+0x3a>
 8011dd2:	68ac      	ldr	r4, [r5, #8]
 8011dd4:	e7ef      	b.n	8011db6 <_fputs_r+0x1a>
 8011dd6:	4b14      	ldr	r3, [pc, #80]	; (8011e28 <_fputs_r+0x8c>)
 8011dd8:	429c      	cmp	r4, r3
 8011dda:	bf08      	it	eq
 8011ddc:	68ec      	ldreq	r4, [r5, #12]
 8011dde:	e7ea      	b.n	8011db6 <_fputs_r+0x1a>
 8011de0:	4621      	mov	r1, r4
 8011de2:	4628      	mov	r0, r5
 8011de4:	f000 ffb4 	bl	8012d50 <__swsetup_r>
 8011de8:	2800      	cmp	r0, #0
 8011dea:	d0e9      	beq.n	8011dc0 <_fputs_r+0x24>
 8011dec:	f04f 30ff 	mov.w	r0, #4294967295
 8011df0:	bd70      	pop	{r4, r5, r6, pc}
 8011df2:	68a3      	ldr	r3, [r4, #8]
 8011df4:	3b01      	subs	r3, #1
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	60a3      	str	r3, [r4, #8]
 8011dfa:	da04      	bge.n	8011e06 <_fputs_r+0x6a>
 8011dfc:	69a2      	ldr	r2, [r4, #24]
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	db06      	blt.n	8011e10 <_fputs_r+0x74>
 8011e02:	290a      	cmp	r1, #10
 8011e04:	d004      	beq.n	8011e10 <_fputs_r+0x74>
 8011e06:	6823      	ldr	r3, [r4, #0]
 8011e08:	1c5a      	adds	r2, r3, #1
 8011e0a:	6022      	str	r2, [r4, #0]
 8011e0c:	7019      	strb	r1, [r3, #0]
 8011e0e:	e7d8      	b.n	8011dc2 <_fputs_r+0x26>
 8011e10:	4622      	mov	r2, r4
 8011e12:	4628      	mov	r0, r5
 8011e14:	f000 ff4a 	bl	8012cac <__swbuf_r>
 8011e18:	3001      	adds	r0, #1
 8011e1a:	d1d2      	bne.n	8011dc2 <_fputs_r+0x26>
 8011e1c:	e7e6      	b.n	8011dec <_fputs_r+0x50>
 8011e1e:	bf00      	nop
 8011e20:	0801fd68 	.word	0x0801fd68
 8011e24:	0801fd88 	.word	0x0801fd88
 8011e28:	0801fd48 	.word	0x0801fd48

08011e2c <fputs>:
 8011e2c:	4b02      	ldr	r3, [pc, #8]	; (8011e38 <fputs+0xc>)
 8011e2e:	460a      	mov	r2, r1
 8011e30:	4601      	mov	r1, r0
 8011e32:	6818      	ldr	r0, [r3, #0]
 8011e34:	f7ff bfb2 	b.w	8011d9c <_fputs_r>
 8011e38:	20000014 	.word	0x20000014

08011e3c <__libc_init_array>:
 8011e3c:	b570      	push	{r4, r5, r6, lr}
 8011e3e:	4e0d      	ldr	r6, [pc, #52]	; (8011e74 <__libc_init_array+0x38>)
 8011e40:	4c0d      	ldr	r4, [pc, #52]	; (8011e78 <__libc_init_array+0x3c>)
 8011e42:	1ba4      	subs	r4, r4, r6
 8011e44:	10a4      	asrs	r4, r4, #2
 8011e46:	2500      	movs	r5, #0
 8011e48:	42a5      	cmp	r5, r4
 8011e4a:	d109      	bne.n	8011e60 <__libc_init_array+0x24>
 8011e4c:	4e0b      	ldr	r6, [pc, #44]	; (8011e7c <__libc_init_array+0x40>)
 8011e4e:	4c0c      	ldr	r4, [pc, #48]	; (8011e80 <__libc_init_array+0x44>)
 8011e50:	f002 fd48 	bl	80148e4 <_init>
 8011e54:	1ba4      	subs	r4, r4, r6
 8011e56:	10a4      	asrs	r4, r4, #2
 8011e58:	2500      	movs	r5, #0
 8011e5a:	42a5      	cmp	r5, r4
 8011e5c:	d105      	bne.n	8011e6a <__libc_init_array+0x2e>
 8011e5e:	bd70      	pop	{r4, r5, r6, pc}
 8011e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011e64:	4798      	blx	r3
 8011e66:	3501      	adds	r5, #1
 8011e68:	e7ee      	b.n	8011e48 <__libc_init_array+0xc>
 8011e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011e6e:	4798      	blx	r3
 8011e70:	3501      	adds	r5, #1
 8011e72:	e7f2      	b.n	8011e5a <__libc_init_array+0x1e>
 8011e74:	0801ffb8 	.word	0x0801ffb8
 8011e78:	0801ffb8 	.word	0x0801ffb8
 8011e7c:	0801ffb8 	.word	0x0801ffb8
 8011e80:	0801ffbc 	.word	0x0801ffbc

08011e84 <malloc>:
 8011e84:	4b02      	ldr	r3, [pc, #8]	; (8011e90 <malloc+0xc>)
 8011e86:	4601      	mov	r1, r0
 8011e88:	6818      	ldr	r0, [r3, #0]
 8011e8a:	f000 b893 	b.w	8011fb4 <_malloc_r>
 8011e8e:	bf00      	nop
 8011e90:	20000014 	.word	0x20000014

08011e94 <free>:
 8011e94:	4b02      	ldr	r3, [pc, #8]	; (8011ea0 <free+0xc>)
 8011e96:	4601      	mov	r1, r0
 8011e98:	6818      	ldr	r0, [r3, #0]
 8011e9a:	f000 b83d 	b.w	8011f18 <_free_r>
 8011e9e:	bf00      	nop
 8011ea0:	20000014 	.word	0x20000014

08011ea4 <memcpy>:
 8011ea4:	b510      	push	{r4, lr}
 8011ea6:	1e43      	subs	r3, r0, #1
 8011ea8:	440a      	add	r2, r1
 8011eaa:	4291      	cmp	r1, r2
 8011eac:	d100      	bne.n	8011eb0 <memcpy+0xc>
 8011eae:	bd10      	pop	{r4, pc}
 8011eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011eb8:	e7f7      	b.n	8011eaa <memcpy+0x6>

08011eba <memmove>:
 8011eba:	4288      	cmp	r0, r1
 8011ebc:	b510      	push	{r4, lr}
 8011ebe:	eb01 0302 	add.w	r3, r1, r2
 8011ec2:	d807      	bhi.n	8011ed4 <memmove+0x1a>
 8011ec4:	1e42      	subs	r2, r0, #1
 8011ec6:	4299      	cmp	r1, r3
 8011ec8:	d00a      	beq.n	8011ee0 <memmove+0x26>
 8011eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ece:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011ed2:	e7f8      	b.n	8011ec6 <memmove+0xc>
 8011ed4:	4283      	cmp	r3, r0
 8011ed6:	d9f5      	bls.n	8011ec4 <memmove+0xa>
 8011ed8:	1881      	adds	r1, r0, r2
 8011eda:	1ad2      	subs	r2, r2, r3
 8011edc:	42d3      	cmn	r3, r2
 8011ede:	d100      	bne.n	8011ee2 <memmove+0x28>
 8011ee0:	bd10      	pop	{r4, pc}
 8011ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ee6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011eea:	e7f7      	b.n	8011edc <memmove+0x22>

08011eec <memset>:
 8011eec:	4402      	add	r2, r0
 8011eee:	4603      	mov	r3, r0
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d100      	bne.n	8011ef6 <memset+0xa>
 8011ef4:	4770      	bx	lr
 8011ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8011efa:	e7f9      	b.n	8011ef0 <memset+0x4>

08011efc <_calloc_r>:
 8011efc:	b538      	push	{r3, r4, r5, lr}
 8011efe:	fb02 f401 	mul.w	r4, r2, r1
 8011f02:	4621      	mov	r1, r4
 8011f04:	f000 f856 	bl	8011fb4 <_malloc_r>
 8011f08:	4605      	mov	r5, r0
 8011f0a:	b118      	cbz	r0, 8011f14 <_calloc_r+0x18>
 8011f0c:	4622      	mov	r2, r4
 8011f0e:	2100      	movs	r1, #0
 8011f10:	f7ff ffec 	bl	8011eec <memset>
 8011f14:	4628      	mov	r0, r5
 8011f16:	bd38      	pop	{r3, r4, r5, pc}

08011f18 <_free_r>:
 8011f18:	b538      	push	{r3, r4, r5, lr}
 8011f1a:	4605      	mov	r5, r0
 8011f1c:	2900      	cmp	r1, #0
 8011f1e:	d045      	beq.n	8011fac <_free_r+0x94>
 8011f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f24:	1f0c      	subs	r4, r1, #4
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	bfb8      	it	lt
 8011f2a:	18e4      	addlt	r4, r4, r3
 8011f2c:	f001 ffb0 	bl	8013e90 <__malloc_lock>
 8011f30:	4a1f      	ldr	r2, [pc, #124]	; (8011fb0 <_free_r+0x98>)
 8011f32:	6813      	ldr	r3, [r2, #0]
 8011f34:	4610      	mov	r0, r2
 8011f36:	b933      	cbnz	r3, 8011f46 <_free_r+0x2e>
 8011f38:	6063      	str	r3, [r4, #4]
 8011f3a:	6014      	str	r4, [r2, #0]
 8011f3c:	4628      	mov	r0, r5
 8011f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f42:	f001 bfa6 	b.w	8013e92 <__malloc_unlock>
 8011f46:	42a3      	cmp	r3, r4
 8011f48:	d90c      	bls.n	8011f64 <_free_r+0x4c>
 8011f4a:	6821      	ldr	r1, [r4, #0]
 8011f4c:	1862      	adds	r2, r4, r1
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	bf04      	itt	eq
 8011f52:	681a      	ldreq	r2, [r3, #0]
 8011f54:	685b      	ldreq	r3, [r3, #4]
 8011f56:	6063      	str	r3, [r4, #4]
 8011f58:	bf04      	itt	eq
 8011f5a:	1852      	addeq	r2, r2, r1
 8011f5c:	6022      	streq	r2, [r4, #0]
 8011f5e:	6004      	str	r4, [r0, #0]
 8011f60:	e7ec      	b.n	8011f3c <_free_r+0x24>
 8011f62:	4613      	mov	r3, r2
 8011f64:	685a      	ldr	r2, [r3, #4]
 8011f66:	b10a      	cbz	r2, 8011f6c <_free_r+0x54>
 8011f68:	42a2      	cmp	r2, r4
 8011f6a:	d9fa      	bls.n	8011f62 <_free_r+0x4a>
 8011f6c:	6819      	ldr	r1, [r3, #0]
 8011f6e:	1858      	adds	r0, r3, r1
 8011f70:	42a0      	cmp	r0, r4
 8011f72:	d10b      	bne.n	8011f8c <_free_r+0x74>
 8011f74:	6820      	ldr	r0, [r4, #0]
 8011f76:	4401      	add	r1, r0
 8011f78:	1858      	adds	r0, r3, r1
 8011f7a:	4282      	cmp	r2, r0
 8011f7c:	6019      	str	r1, [r3, #0]
 8011f7e:	d1dd      	bne.n	8011f3c <_free_r+0x24>
 8011f80:	6810      	ldr	r0, [r2, #0]
 8011f82:	6852      	ldr	r2, [r2, #4]
 8011f84:	605a      	str	r2, [r3, #4]
 8011f86:	4401      	add	r1, r0
 8011f88:	6019      	str	r1, [r3, #0]
 8011f8a:	e7d7      	b.n	8011f3c <_free_r+0x24>
 8011f8c:	d902      	bls.n	8011f94 <_free_r+0x7c>
 8011f8e:	230c      	movs	r3, #12
 8011f90:	602b      	str	r3, [r5, #0]
 8011f92:	e7d3      	b.n	8011f3c <_free_r+0x24>
 8011f94:	6820      	ldr	r0, [r4, #0]
 8011f96:	1821      	adds	r1, r4, r0
 8011f98:	428a      	cmp	r2, r1
 8011f9a:	bf04      	itt	eq
 8011f9c:	6811      	ldreq	r1, [r2, #0]
 8011f9e:	6852      	ldreq	r2, [r2, #4]
 8011fa0:	6062      	str	r2, [r4, #4]
 8011fa2:	bf04      	itt	eq
 8011fa4:	1809      	addeq	r1, r1, r0
 8011fa6:	6021      	streq	r1, [r4, #0]
 8011fa8:	605c      	str	r4, [r3, #4]
 8011faa:	e7c7      	b.n	8011f3c <_free_r+0x24>
 8011fac:	bd38      	pop	{r3, r4, r5, pc}
 8011fae:	bf00      	nop
 8011fb0:	200002f8 	.word	0x200002f8

08011fb4 <_malloc_r>:
 8011fb4:	b570      	push	{r4, r5, r6, lr}
 8011fb6:	1ccd      	adds	r5, r1, #3
 8011fb8:	f025 0503 	bic.w	r5, r5, #3
 8011fbc:	3508      	adds	r5, #8
 8011fbe:	2d0c      	cmp	r5, #12
 8011fc0:	bf38      	it	cc
 8011fc2:	250c      	movcc	r5, #12
 8011fc4:	2d00      	cmp	r5, #0
 8011fc6:	4606      	mov	r6, r0
 8011fc8:	db01      	blt.n	8011fce <_malloc_r+0x1a>
 8011fca:	42a9      	cmp	r1, r5
 8011fcc:	d903      	bls.n	8011fd6 <_malloc_r+0x22>
 8011fce:	230c      	movs	r3, #12
 8011fd0:	6033      	str	r3, [r6, #0]
 8011fd2:	2000      	movs	r0, #0
 8011fd4:	bd70      	pop	{r4, r5, r6, pc}
 8011fd6:	f001 ff5b 	bl	8013e90 <__malloc_lock>
 8011fda:	4a21      	ldr	r2, [pc, #132]	; (8012060 <_malloc_r+0xac>)
 8011fdc:	6814      	ldr	r4, [r2, #0]
 8011fde:	4621      	mov	r1, r4
 8011fe0:	b991      	cbnz	r1, 8012008 <_malloc_r+0x54>
 8011fe2:	4c20      	ldr	r4, [pc, #128]	; (8012064 <_malloc_r+0xb0>)
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	b91b      	cbnz	r3, 8011ff0 <_malloc_r+0x3c>
 8011fe8:	4630      	mov	r0, r6
 8011fea:	f000 fdd9 	bl	8012ba0 <_sbrk_r>
 8011fee:	6020      	str	r0, [r4, #0]
 8011ff0:	4629      	mov	r1, r5
 8011ff2:	4630      	mov	r0, r6
 8011ff4:	f000 fdd4 	bl	8012ba0 <_sbrk_r>
 8011ff8:	1c43      	adds	r3, r0, #1
 8011ffa:	d124      	bne.n	8012046 <_malloc_r+0x92>
 8011ffc:	230c      	movs	r3, #12
 8011ffe:	6033      	str	r3, [r6, #0]
 8012000:	4630      	mov	r0, r6
 8012002:	f001 ff46 	bl	8013e92 <__malloc_unlock>
 8012006:	e7e4      	b.n	8011fd2 <_malloc_r+0x1e>
 8012008:	680b      	ldr	r3, [r1, #0]
 801200a:	1b5b      	subs	r3, r3, r5
 801200c:	d418      	bmi.n	8012040 <_malloc_r+0x8c>
 801200e:	2b0b      	cmp	r3, #11
 8012010:	d90f      	bls.n	8012032 <_malloc_r+0x7e>
 8012012:	600b      	str	r3, [r1, #0]
 8012014:	50cd      	str	r5, [r1, r3]
 8012016:	18cc      	adds	r4, r1, r3
 8012018:	4630      	mov	r0, r6
 801201a:	f001 ff3a 	bl	8013e92 <__malloc_unlock>
 801201e:	f104 000b 	add.w	r0, r4, #11
 8012022:	1d23      	adds	r3, r4, #4
 8012024:	f020 0007 	bic.w	r0, r0, #7
 8012028:	1ac3      	subs	r3, r0, r3
 801202a:	d0d3      	beq.n	8011fd4 <_malloc_r+0x20>
 801202c:	425a      	negs	r2, r3
 801202e:	50e2      	str	r2, [r4, r3]
 8012030:	e7d0      	b.n	8011fd4 <_malloc_r+0x20>
 8012032:	428c      	cmp	r4, r1
 8012034:	684b      	ldr	r3, [r1, #4]
 8012036:	bf16      	itet	ne
 8012038:	6063      	strne	r3, [r4, #4]
 801203a:	6013      	streq	r3, [r2, #0]
 801203c:	460c      	movne	r4, r1
 801203e:	e7eb      	b.n	8012018 <_malloc_r+0x64>
 8012040:	460c      	mov	r4, r1
 8012042:	6849      	ldr	r1, [r1, #4]
 8012044:	e7cc      	b.n	8011fe0 <_malloc_r+0x2c>
 8012046:	1cc4      	adds	r4, r0, #3
 8012048:	f024 0403 	bic.w	r4, r4, #3
 801204c:	42a0      	cmp	r0, r4
 801204e:	d005      	beq.n	801205c <_malloc_r+0xa8>
 8012050:	1a21      	subs	r1, r4, r0
 8012052:	4630      	mov	r0, r6
 8012054:	f000 fda4 	bl	8012ba0 <_sbrk_r>
 8012058:	3001      	adds	r0, #1
 801205a:	d0cf      	beq.n	8011ffc <_malloc_r+0x48>
 801205c:	6025      	str	r5, [r4, #0]
 801205e:	e7db      	b.n	8012018 <_malloc_r+0x64>
 8012060:	200002f8 	.word	0x200002f8
 8012064:	200002fc 	.word	0x200002fc

08012068 <__sfputc_r>:
 8012068:	6893      	ldr	r3, [r2, #8]
 801206a:	3b01      	subs	r3, #1
 801206c:	2b00      	cmp	r3, #0
 801206e:	b410      	push	{r4}
 8012070:	6093      	str	r3, [r2, #8]
 8012072:	da08      	bge.n	8012086 <__sfputc_r+0x1e>
 8012074:	6994      	ldr	r4, [r2, #24]
 8012076:	42a3      	cmp	r3, r4
 8012078:	db01      	blt.n	801207e <__sfputc_r+0x16>
 801207a:	290a      	cmp	r1, #10
 801207c:	d103      	bne.n	8012086 <__sfputc_r+0x1e>
 801207e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012082:	f000 be13 	b.w	8012cac <__swbuf_r>
 8012086:	6813      	ldr	r3, [r2, #0]
 8012088:	1c58      	adds	r0, r3, #1
 801208a:	6010      	str	r0, [r2, #0]
 801208c:	7019      	strb	r1, [r3, #0]
 801208e:	4608      	mov	r0, r1
 8012090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012094:	4770      	bx	lr

08012096 <__sfputs_r>:
 8012096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012098:	4606      	mov	r6, r0
 801209a:	460f      	mov	r7, r1
 801209c:	4614      	mov	r4, r2
 801209e:	18d5      	adds	r5, r2, r3
 80120a0:	42ac      	cmp	r4, r5
 80120a2:	d101      	bne.n	80120a8 <__sfputs_r+0x12>
 80120a4:	2000      	movs	r0, #0
 80120a6:	e007      	b.n	80120b8 <__sfputs_r+0x22>
 80120a8:	463a      	mov	r2, r7
 80120aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ae:	4630      	mov	r0, r6
 80120b0:	f7ff ffda 	bl	8012068 <__sfputc_r>
 80120b4:	1c43      	adds	r3, r0, #1
 80120b6:	d1f3      	bne.n	80120a0 <__sfputs_r+0xa>
 80120b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080120bc <_vfiprintf_r>:
 80120bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c0:	460c      	mov	r4, r1
 80120c2:	b09d      	sub	sp, #116	; 0x74
 80120c4:	4617      	mov	r7, r2
 80120c6:	461d      	mov	r5, r3
 80120c8:	4606      	mov	r6, r0
 80120ca:	b118      	cbz	r0, 80120d4 <_vfiprintf_r+0x18>
 80120cc:	6983      	ldr	r3, [r0, #24]
 80120ce:	b90b      	cbnz	r3, 80120d4 <_vfiprintf_r+0x18>
 80120d0:	f001 fde2 	bl	8013c98 <__sinit>
 80120d4:	4b7c      	ldr	r3, [pc, #496]	; (80122c8 <_vfiprintf_r+0x20c>)
 80120d6:	429c      	cmp	r4, r3
 80120d8:	d158      	bne.n	801218c <_vfiprintf_r+0xd0>
 80120da:	6874      	ldr	r4, [r6, #4]
 80120dc:	89a3      	ldrh	r3, [r4, #12]
 80120de:	0718      	lsls	r0, r3, #28
 80120e0:	d55e      	bpl.n	80121a0 <_vfiprintf_r+0xe4>
 80120e2:	6923      	ldr	r3, [r4, #16]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d05b      	beq.n	80121a0 <_vfiprintf_r+0xe4>
 80120e8:	2300      	movs	r3, #0
 80120ea:	9309      	str	r3, [sp, #36]	; 0x24
 80120ec:	2320      	movs	r3, #32
 80120ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120f2:	2330      	movs	r3, #48	; 0x30
 80120f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120f8:	9503      	str	r5, [sp, #12]
 80120fa:	f04f 0b01 	mov.w	fp, #1
 80120fe:	46b8      	mov	r8, r7
 8012100:	4645      	mov	r5, r8
 8012102:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012106:	b10b      	cbz	r3, 801210c <_vfiprintf_r+0x50>
 8012108:	2b25      	cmp	r3, #37	; 0x25
 801210a:	d154      	bne.n	80121b6 <_vfiprintf_r+0xfa>
 801210c:	ebb8 0a07 	subs.w	sl, r8, r7
 8012110:	d00b      	beq.n	801212a <_vfiprintf_r+0x6e>
 8012112:	4653      	mov	r3, sl
 8012114:	463a      	mov	r2, r7
 8012116:	4621      	mov	r1, r4
 8012118:	4630      	mov	r0, r6
 801211a:	f7ff ffbc 	bl	8012096 <__sfputs_r>
 801211e:	3001      	adds	r0, #1
 8012120:	f000 80c2 	beq.w	80122a8 <_vfiprintf_r+0x1ec>
 8012124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012126:	4453      	add	r3, sl
 8012128:	9309      	str	r3, [sp, #36]	; 0x24
 801212a:	f898 3000 	ldrb.w	r3, [r8]
 801212e:	2b00      	cmp	r3, #0
 8012130:	f000 80ba 	beq.w	80122a8 <_vfiprintf_r+0x1ec>
 8012134:	2300      	movs	r3, #0
 8012136:	f04f 32ff 	mov.w	r2, #4294967295
 801213a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801213e:	9304      	str	r3, [sp, #16]
 8012140:	9307      	str	r3, [sp, #28]
 8012142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012146:	931a      	str	r3, [sp, #104]	; 0x68
 8012148:	46a8      	mov	r8, r5
 801214a:	2205      	movs	r2, #5
 801214c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012150:	485e      	ldr	r0, [pc, #376]	; (80122cc <_vfiprintf_r+0x210>)
 8012152:	f7ee f855 	bl	8000200 <memchr>
 8012156:	9b04      	ldr	r3, [sp, #16]
 8012158:	bb78      	cbnz	r0, 80121ba <_vfiprintf_r+0xfe>
 801215a:	06d9      	lsls	r1, r3, #27
 801215c:	bf44      	itt	mi
 801215e:	2220      	movmi	r2, #32
 8012160:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012164:	071a      	lsls	r2, r3, #28
 8012166:	bf44      	itt	mi
 8012168:	222b      	movmi	r2, #43	; 0x2b
 801216a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801216e:	782a      	ldrb	r2, [r5, #0]
 8012170:	2a2a      	cmp	r2, #42	; 0x2a
 8012172:	d02a      	beq.n	80121ca <_vfiprintf_r+0x10e>
 8012174:	9a07      	ldr	r2, [sp, #28]
 8012176:	46a8      	mov	r8, r5
 8012178:	2000      	movs	r0, #0
 801217a:	250a      	movs	r5, #10
 801217c:	4641      	mov	r1, r8
 801217e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012182:	3b30      	subs	r3, #48	; 0x30
 8012184:	2b09      	cmp	r3, #9
 8012186:	d969      	bls.n	801225c <_vfiprintf_r+0x1a0>
 8012188:	b360      	cbz	r0, 80121e4 <_vfiprintf_r+0x128>
 801218a:	e024      	b.n	80121d6 <_vfiprintf_r+0x11a>
 801218c:	4b50      	ldr	r3, [pc, #320]	; (80122d0 <_vfiprintf_r+0x214>)
 801218e:	429c      	cmp	r4, r3
 8012190:	d101      	bne.n	8012196 <_vfiprintf_r+0xda>
 8012192:	68b4      	ldr	r4, [r6, #8]
 8012194:	e7a2      	b.n	80120dc <_vfiprintf_r+0x20>
 8012196:	4b4f      	ldr	r3, [pc, #316]	; (80122d4 <_vfiprintf_r+0x218>)
 8012198:	429c      	cmp	r4, r3
 801219a:	bf08      	it	eq
 801219c:	68f4      	ldreq	r4, [r6, #12]
 801219e:	e79d      	b.n	80120dc <_vfiprintf_r+0x20>
 80121a0:	4621      	mov	r1, r4
 80121a2:	4630      	mov	r0, r6
 80121a4:	f000 fdd4 	bl	8012d50 <__swsetup_r>
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d09d      	beq.n	80120e8 <_vfiprintf_r+0x2c>
 80121ac:	f04f 30ff 	mov.w	r0, #4294967295
 80121b0:	b01d      	add	sp, #116	; 0x74
 80121b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b6:	46a8      	mov	r8, r5
 80121b8:	e7a2      	b.n	8012100 <_vfiprintf_r+0x44>
 80121ba:	4a44      	ldr	r2, [pc, #272]	; (80122cc <_vfiprintf_r+0x210>)
 80121bc:	1a80      	subs	r0, r0, r2
 80121be:	fa0b f000 	lsl.w	r0, fp, r0
 80121c2:	4318      	orrs	r0, r3
 80121c4:	9004      	str	r0, [sp, #16]
 80121c6:	4645      	mov	r5, r8
 80121c8:	e7be      	b.n	8012148 <_vfiprintf_r+0x8c>
 80121ca:	9a03      	ldr	r2, [sp, #12]
 80121cc:	1d11      	adds	r1, r2, #4
 80121ce:	6812      	ldr	r2, [r2, #0]
 80121d0:	9103      	str	r1, [sp, #12]
 80121d2:	2a00      	cmp	r2, #0
 80121d4:	db01      	blt.n	80121da <_vfiprintf_r+0x11e>
 80121d6:	9207      	str	r2, [sp, #28]
 80121d8:	e004      	b.n	80121e4 <_vfiprintf_r+0x128>
 80121da:	4252      	negs	r2, r2
 80121dc:	f043 0302 	orr.w	r3, r3, #2
 80121e0:	9207      	str	r2, [sp, #28]
 80121e2:	9304      	str	r3, [sp, #16]
 80121e4:	f898 3000 	ldrb.w	r3, [r8]
 80121e8:	2b2e      	cmp	r3, #46	; 0x2e
 80121ea:	d10e      	bne.n	801220a <_vfiprintf_r+0x14e>
 80121ec:	f898 3001 	ldrb.w	r3, [r8, #1]
 80121f0:	2b2a      	cmp	r3, #42	; 0x2a
 80121f2:	d138      	bne.n	8012266 <_vfiprintf_r+0x1aa>
 80121f4:	9b03      	ldr	r3, [sp, #12]
 80121f6:	1d1a      	adds	r2, r3, #4
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	9203      	str	r2, [sp, #12]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	bfb8      	it	lt
 8012200:	f04f 33ff 	movlt.w	r3, #4294967295
 8012204:	f108 0802 	add.w	r8, r8, #2
 8012208:	9305      	str	r3, [sp, #20]
 801220a:	4d33      	ldr	r5, [pc, #204]	; (80122d8 <_vfiprintf_r+0x21c>)
 801220c:	f898 1000 	ldrb.w	r1, [r8]
 8012210:	2203      	movs	r2, #3
 8012212:	4628      	mov	r0, r5
 8012214:	f7ed fff4 	bl	8000200 <memchr>
 8012218:	b140      	cbz	r0, 801222c <_vfiprintf_r+0x170>
 801221a:	2340      	movs	r3, #64	; 0x40
 801221c:	1b40      	subs	r0, r0, r5
 801221e:	fa03 f000 	lsl.w	r0, r3, r0
 8012222:	9b04      	ldr	r3, [sp, #16]
 8012224:	4303      	orrs	r3, r0
 8012226:	f108 0801 	add.w	r8, r8, #1
 801222a:	9304      	str	r3, [sp, #16]
 801222c:	f898 1000 	ldrb.w	r1, [r8]
 8012230:	482a      	ldr	r0, [pc, #168]	; (80122dc <_vfiprintf_r+0x220>)
 8012232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012236:	2206      	movs	r2, #6
 8012238:	f108 0701 	add.w	r7, r8, #1
 801223c:	f7ed ffe0 	bl	8000200 <memchr>
 8012240:	2800      	cmp	r0, #0
 8012242:	d037      	beq.n	80122b4 <_vfiprintf_r+0x1f8>
 8012244:	4b26      	ldr	r3, [pc, #152]	; (80122e0 <_vfiprintf_r+0x224>)
 8012246:	bb1b      	cbnz	r3, 8012290 <_vfiprintf_r+0x1d4>
 8012248:	9b03      	ldr	r3, [sp, #12]
 801224a:	3307      	adds	r3, #7
 801224c:	f023 0307 	bic.w	r3, r3, #7
 8012250:	3308      	adds	r3, #8
 8012252:	9303      	str	r3, [sp, #12]
 8012254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012256:	444b      	add	r3, r9
 8012258:	9309      	str	r3, [sp, #36]	; 0x24
 801225a:	e750      	b.n	80120fe <_vfiprintf_r+0x42>
 801225c:	fb05 3202 	mla	r2, r5, r2, r3
 8012260:	2001      	movs	r0, #1
 8012262:	4688      	mov	r8, r1
 8012264:	e78a      	b.n	801217c <_vfiprintf_r+0xc0>
 8012266:	2300      	movs	r3, #0
 8012268:	f108 0801 	add.w	r8, r8, #1
 801226c:	9305      	str	r3, [sp, #20]
 801226e:	4619      	mov	r1, r3
 8012270:	250a      	movs	r5, #10
 8012272:	4640      	mov	r0, r8
 8012274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012278:	3a30      	subs	r2, #48	; 0x30
 801227a:	2a09      	cmp	r2, #9
 801227c:	d903      	bls.n	8012286 <_vfiprintf_r+0x1ca>
 801227e:	2b00      	cmp	r3, #0
 8012280:	d0c3      	beq.n	801220a <_vfiprintf_r+0x14e>
 8012282:	9105      	str	r1, [sp, #20]
 8012284:	e7c1      	b.n	801220a <_vfiprintf_r+0x14e>
 8012286:	fb05 2101 	mla	r1, r5, r1, r2
 801228a:	2301      	movs	r3, #1
 801228c:	4680      	mov	r8, r0
 801228e:	e7f0      	b.n	8012272 <_vfiprintf_r+0x1b6>
 8012290:	ab03      	add	r3, sp, #12
 8012292:	9300      	str	r3, [sp, #0]
 8012294:	4622      	mov	r2, r4
 8012296:	4b13      	ldr	r3, [pc, #76]	; (80122e4 <_vfiprintf_r+0x228>)
 8012298:	a904      	add	r1, sp, #16
 801229a:	4630      	mov	r0, r6
 801229c:	f000 f8b8 	bl	8012410 <_printf_float>
 80122a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80122a4:	4681      	mov	r9, r0
 80122a6:	d1d5      	bne.n	8012254 <_vfiprintf_r+0x198>
 80122a8:	89a3      	ldrh	r3, [r4, #12]
 80122aa:	065b      	lsls	r3, r3, #25
 80122ac:	f53f af7e 	bmi.w	80121ac <_vfiprintf_r+0xf0>
 80122b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122b2:	e77d      	b.n	80121b0 <_vfiprintf_r+0xf4>
 80122b4:	ab03      	add	r3, sp, #12
 80122b6:	9300      	str	r3, [sp, #0]
 80122b8:	4622      	mov	r2, r4
 80122ba:	4b0a      	ldr	r3, [pc, #40]	; (80122e4 <_vfiprintf_r+0x228>)
 80122bc:	a904      	add	r1, sp, #16
 80122be:	4630      	mov	r0, r6
 80122c0:	f000 fb5c 	bl	801297c <_printf_i>
 80122c4:	e7ec      	b.n	80122a0 <_vfiprintf_r+0x1e4>
 80122c6:	bf00      	nop
 80122c8:	0801fd68 	.word	0x0801fd68
 80122cc:	0801fcf4 	.word	0x0801fcf4
 80122d0:	0801fd88 	.word	0x0801fd88
 80122d4:	0801fd48 	.word	0x0801fd48
 80122d8:	0801fcfa 	.word	0x0801fcfa
 80122dc:	0801fcfe 	.word	0x0801fcfe
 80122e0:	08012411 	.word	0x08012411
 80122e4:	08012097 	.word	0x08012097

080122e8 <__cvt>:
 80122e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80122ec:	ec55 4b10 	vmov	r4, r5, d0
 80122f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80122f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80122f6:	2d00      	cmp	r5, #0
 80122f8:	460e      	mov	r6, r1
 80122fa:	4691      	mov	r9, r2
 80122fc:	4619      	mov	r1, r3
 80122fe:	bfb8      	it	lt
 8012300:	4622      	movlt	r2, r4
 8012302:	462b      	mov	r3, r5
 8012304:	f027 0720 	bic.w	r7, r7, #32
 8012308:	bfbb      	ittet	lt
 801230a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801230e:	461d      	movlt	r5, r3
 8012310:	2300      	movge	r3, #0
 8012312:	232d      	movlt	r3, #45	; 0x2d
 8012314:	bfb8      	it	lt
 8012316:	4614      	movlt	r4, r2
 8012318:	2f46      	cmp	r7, #70	; 0x46
 801231a:	700b      	strb	r3, [r1, #0]
 801231c:	d004      	beq.n	8012328 <__cvt+0x40>
 801231e:	2f45      	cmp	r7, #69	; 0x45
 8012320:	d100      	bne.n	8012324 <__cvt+0x3c>
 8012322:	3601      	adds	r6, #1
 8012324:	2102      	movs	r1, #2
 8012326:	e000      	b.n	801232a <__cvt+0x42>
 8012328:	2103      	movs	r1, #3
 801232a:	ab03      	add	r3, sp, #12
 801232c:	9301      	str	r3, [sp, #4]
 801232e:	ab02      	add	r3, sp, #8
 8012330:	9300      	str	r3, [sp, #0]
 8012332:	4632      	mov	r2, r6
 8012334:	4653      	mov	r3, sl
 8012336:	ec45 4b10 	vmov	d0, r4, r5
 801233a:	f000 fe05 	bl	8012f48 <_dtoa_r>
 801233e:	2f47      	cmp	r7, #71	; 0x47
 8012340:	4680      	mov	r8, r0
 8012342:	d102      	bne.n	801234a <__cvt+0x62>
 8012344:	f019 0f01 	tst.w	r9, #1
 8012348:	d026      	beq.n	8012398 <__cvt+0xb0>
 801234a:	2f46      	cmp	r7, #70	; 0x46
 801234c:	eb08 0906 	add.w	r9, r8, r6
 8012350:	d111      	bne.n	8012376 <__cvt+0x8e>
 8012352:	f898 3000 	ldrb.w	r3, [r8]
 8012356:	2b30      	cmp	r3, #48	; 0x30
 8012358:	d10a      	bne.n	8012370 <__cvt+0x88>
 801235a:	2200      	movs	r2, #0
 801235c:	2300      	movs	r3, #0
 801235e:	4620      	mov	r0, r4
 8012360:	4629      	mov	r1, r5
 8012362:	f7ee fbc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8012366:	b918      	cbnz	r0, 8012370 <__cvt+0x88>
 8012368:	f1c6 0601 	rsb	r6, r6, #1
 801236c:	f8ca 6000 	str.w	r6, [sl]
 8012370:	f8da 3000 	ldr.w	r3, [sl]
 8012374:	4499      	add	r9, r3
 8012376:	2200      	movs	r2, #0
 8012378:	2300      	movs	r3, #0
 801237a:	4620      	mov	r0, r4
 801237c:	4629      	mov	r1, r5
 801237e:	f7ee fbb3 	bl	8000ae8 <__aeabi_dcmpeq>
 8012382:	b938      	cbnz	r0, 8012394 <__cvt+0xac>
 8012384:	2230      	movs	r2, #48	; 0x30
 8012386:	9b03      	ldr	r3, [sp, #12]
 8012388:	454b      	cmp	r3, r9
 801238a:	d205      	bcs.n	8012398 <__cvt+0xb0>
 801238c:	1c59      	adds	r1, r3, #1
 801238e:	9103      	str	r1, [sp, #12]
 8012390:	701a      	strb	r2, [r3, #0]
 8012392:	e7f8      	b.n	8012386 <__cvt+0x9e>
 8012394:	f8cd 900c 	str.w	r9, [sp, #12]
 8012398:	9b03      	ldr	r3, [sp, #12]
 801239a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801239c:	eba3 0308 	sub.w	r3, r3, r8
 80123a0:	4640      	mov	r0, r8
 80123a2:	6013      	str	r3, [r2, #0]
 80123a4:	b004      	add	sp, #16
 80123a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080123aa <__exponent>:
 80123aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123ac:	2900      	cmp	r1, #0
 80123ae:	4604      	mov	r4, r0
 80123b0:	bfba      	itte	lt
 80123b2:	4249      	neglt	r1, r1
 80123b4:	232d      	movlt	r3, #45	; 0x2d
 80123b6:	232b      	movge	r3, #43	; 0x2b
 80123b8:	2909      	cmp	r1, #9
 80123ba:	f804 2b02 	strb.w	r2, [r4], #2
 80123be:	7043      	strb	r3, [r0, #1]
 80123c0:	dd20      	ble.n	8012404 <__exponent+0x5a>
 80123c2:	f10d 0307 	add.w	r3, sp, #7
 80123c6:	461f      	mov	r7, r3
 80123c8:	260a      	movs	r6, #10
 80123ca:	fb91 f5f6 	sdiv	r5, r1, r6
 80123ce:	fb06 1115 	mls	r1, r6, r5, r1
 80123d2:	3130      	adds	r1, #48	; 0x30
 80123d4:	2d09      	cmp	r5, #9
 80123d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80123da:	f103 32ff 	add.w	r2, r3, #4294967295
 80123de:	4629      	mov	r1, r5
 80123e0:	dc09      	bgt.n	80123f6 <__exponent+0x4c>
 80123e2:	3130      	adds	r1, #48	; 0x30
 80123e4:	3b02      	subs	r3, #2
 80123e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80123ea:	42bb      	cmp	r3, r7
 80123ec:	4622      	mov	r2, r4
 80123ee:	d304      	bcc.n	80123fa <__exponent+0x50>
 80123f0:	1a10      	subs	r0, r2, r0
 80123f2:	b003      	add	sp, #12
 80123f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123f6:	4613      	mov	r3, r2
 80123f8:	e7e7      	b.n	80123ca <__exponent+0x20>
 80123fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123fe:	f804 2b01 	strb.w	r2, [r4], #1
 8012402:	e7f2      	b.n	80123ea <__exponent+0x40>
 8012404:	2330      	movs	r3, #48	; 0x30
 8012406:	4419      	add	r1, r3
 8012408:	7083      	strb	r3, [r0, #2]
 801240a:	1d02      	adds	r2, r0, #4
 801240c:	70c1      	strb	r1, [r0, #3]
 801240e:	e7ef      	b.n	80123f0 <__exponent+0x46>

08012410 <_printf_float>:
 8012410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012414:	b08d      	sub	sp, #52	; 0x34
 8012416:	460c      	mov	r4, r1
 8012418:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801241c:	4616      	mov	r6, r2
 801241e:	461f      	mov	r7, r3
 8012420:	4605      	mov	r5, r0
 8012422:	f001 fcc3 	bl	8013dac <_localeconv_r>
 8012426:	6803      	ldr	r3, [r0, #0]
 8012428:	9304      	str	r3, [sp, #16]
 801242a:	4618      	mov	r0, r3
 801242c:	f7ed feda 	bl	80001e4 <strlen>
 8012430:	2300      	movs	r3, #0
 8012432:	930a      	str	r3, [sp, #40]	; 0x28
 8012434:	f8d8 3000 	ldr.w	r3, [r8]
 8012438:	9005      	str	r0, [sp, #20]
 801243a:	3307      	adds	r3, #7
 801243c:	f023 0307 	bic.w	r3, r3, #7
 8012440:	f103 0208 	add.w	r2, r3, #8
 8012444:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012448:	f8d4 b000 	ldr.w	fp, [r4]
 801244c:	f8c8 2000 	str.w	r2, [r8]
 8012450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012454:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012458:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801245c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012460:	9307      	str	r3, [sp, #28]
 8012462:	f8cd 8018 	str.w	r8, [sp, #24]
 8012466:	f04f 32ff 	mov.w	r2, #4294967295
 801246a:	4ba7      	ldr	r3, [pc, #668]	; (8012708 <_printf_float+0x2f8>)
 801246c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012470:	f7ee fb6c 	bl	8000b4c <__aeabi_dcmpun>
 8012474:	bb70      	cbnz	r0, 80124d4 <_printf_float+0xc4>
 8012476:	f04f 32ff 	mov.w	r2, #4294967295
 801247a:	4ba3      	ldr	r3, [pc, #652]	; (8012708 <_printf_float+0x2f8>)
 801247c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012480:	f7ee fb46 	bl	8000b10 <__aeabi_dcmple>
 8012484:	bb30      	cbnz	r0, 80124d4 <_printf_float+0xc4>
 8012486:	2200      	movs	r2, #0
 8012488:	2300      	movs	r3, #0
 801248a:	4640      	mov	r0, r8
 801248c:	4649      	mov	r1, r9
 801248e:	f7ee fb35 	bl	8000afc <__aeabi_dcmplt>
 8012492:	b110      	cbz	r0, 801249a <_printf_float+0x8a>
 8012494:	232d      	movs	r3, #45	; 0x2d
 8012496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801249a:	4a9c      	ldr	r2, [pc, #624]	; (801270c <_printf_float+0x2fc>)
 801249c:	4b9c      	ldr	r3, [pc, #624]	; (8012710 <_printf_float+0x300>)
 801249e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80124a2:	bf8c      	ite	hi
 80124a4:	4690      	movhi	r8, r2
 80124a6:	4698      	movls	r8, r3
 80124a8:	2303      	movs	r3, #3
 80124aa:	f02b 0204 	bic.w	r2, fp, #4
 80124ae:	6123      	str	r3, [r4, #16]
 80124b0:	6022      	str	r2, [r4, #0]
 80124b2:	f04f 0900 	mov.w	r9, #0
 80124b6:	9700      	str	r7, [sp, #0]
 80124b8:	4633      	mov	r3, r6
 80124ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80124bc:	4621      	mov	r1, r4
 80124be:	4628      	mov	r0, r5
 80124c0:	f000 f9e6 	bl	8012890 <_printf_common>
 80124c4:	3001      	adds	r0, #1
 80124c6:	f040 808d 	bne.w	80125e4 <_printf_float+0x1d4>
 80124ca:	f04f 30ff 	mov.w	r0, #4294967295
 80124ce:	b00d      	add	sp, #52	; 0x34
 80124d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d4:	4642      	mov	r2, r8
 80124d6:	464b      	mov	r3, r9
 80124d8:	4640      	mov	r0, r8
 80124da:	4649      	mov	r1, r9
 80124dc:	f7ee fb36 	bl	8000b4c <__aeabi_dcmpun>
 80124e0:	b110      	cbz	r0, 80124e8 <_printf_float+0xd8>
 80124e2:	4a8c      	ldr	r2, [pc, #560]	; (8012714 <_printf_float+0x304>)
 80124e4:	4b8c      	ldr	r3, [pc, #560]	; (8012718 <_printf_float+0x308>)
 80124e6:	e7da      	b.n	801249e <_printf_float+0x8e>
 80124e8:	6861      	ldr	r1, [r4, #4]
 80124ea:	1c4b      	adds	r3, r1, #1
 80124ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80124f0:	a80a      	add	r0, sp, #40	; 0x28
 80124f2:	d13e      	bne.n	8012572 <_printf_float+0x162>
 80124f4:	2306      	movs	r3, #6
 80124f6:	6063      	str	r3, [r4, #4]
 80124f8:	2300      	movs	r3, #0
 80124fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80124fe:	ab09      	add	r3, sp, #36	; 0x24
 8012500:	9300      	str	r3, [sp, #0]
 8012502:	ec49 8b10 	vmov	d0, r8, r9
 8012506:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801250a:	6022      	str	r2, [r4, #0]
 801250c:	f8cd a004 	str.w	sl, [sp, #4]
 8012510:	6861      	ldr	r1, [r4, #4]
 8012512:	4628      	mov	r0, r5
 8012514:	f7ff fee8 	bl	80122e8 <__cvt>
 8012518:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801251c:	2b47      	cmp	r3, #71	; 0x47
 801251e:	4680      	mov	r8, r0
 8012520:	d109      	bne.n	8012536 <_printf_float+0x126>
 8012522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012524:	1cd8      	adds	r0, r3, #3
 8012526:	db02      	blt.n	801252e <_printf_float+0x11e>
 8012528:	6862      	ldr	r2, [r4, #4]
 801252a:	4293      	cmp	r3, r2
 801252c:	dd47      	ble.n	80125be <_printf_float+0x1ae>
 801252e:	f1aa 0a02 	sub.w	sl, sl, #2
 8012532:	fa5f fa8a 	uxtb.w	sl, sl
 8012536:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801253a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801253c:	d824      	bhi.n	8012588 <_printf_float+0x178>
 801253e:	3901      	subs	r1, #1
 8012540:	4652      	mov	r2, sl
 8012542:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012546:	9109      	str	r1, [sp, #36]	; 0x24
 8012548:	f7ff ff2f 	bl	80123aa <__exponent>
 801254c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801254e:	1813      	adds	r3, r2, r0
 8012550:	2a01      	cmp	r2, #1
 8012552:	4681      	mov	r9, r0
 8012554:	6123      	str	r3, [r4, #16]
 8012556:	dc02      	bgt.n	801255e <_printf_float+0x14e>
 8012558:	6822      	ldr	r2, [r4, #0]
 801255a:	07d1      	lsls	r1, r2, #31
 801255c:	d501      	bpl.n	8012562 <_printf_float+0x152>
 801255e:	3301      	adds	r3, #1
 8012560:	6123      	str	r3, [r4, #16]
 8012562:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012566:	2b00      	cmp	r3, #0
 8012568:	d0a5      	beq.n	80124b6 <_printf_float+0xa6>
 801256a:	232d      	movs	r3, #45	; 0x2d
 801256c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012570:	e7a1      	b.n	80124b6 <_printf_float+0xa6>
 8012572:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012576:	f000 8177 	beq.w	8012868 <_printf_float+0x458>
 801257a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801257e:	d1bb      	bne.n	80124f8 <_printf_float+0xe8>
 8012580:	2900      	cmp	r1, #0
 8012582:	d1b9      	bne.n	80124f8 <_printf_float+0xe8>
 8012584:	2301      	movs	r3, #1
 8012586:	e7b6      	b.n	80124f6 <_printf_float+0xe6>
 8012588:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801258c:	d119      	bne.n	80125c2 <_printf_float+0x1b2>
 801258e:	2900      	cmp	r1, #0
 8012590:	6863      	ldr	r3, [r4, #4]
 8012592:	dd0c      	ble.n	80125ae <_printf_float+0x19e>
 8012594:	6121      	str	r1, [r4, #16]
 8012596:	b913      	cbnz	r3, 801259e <_printf_float+0x18e>
 8012598:	6822      	ldr	r2, [r4, #0]
 801259a:	07d2      	lsls	r2, r2, #31
 801259c:	d502      	bpl.n	80125a4 <_printf_float+0x194>
 801259e:	3301      	adds	r3, #1
 80125a0:	440b      	add	r3, r1
 80125a2:	6123      	str	r3, [r4, #16]
 80125a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80125a8:	f04f 0900 	mov.w	r9, #0
 80125ac:	e7d9      	b.n	8012562 <_printf_float+0x152>
 80125ae:	b913      	cbnz	r3, 80125b6 <_printf_float+0x1a6>
 80125b0:	6822      	ldr	r2, [r4, #0]
 80125b2:	07d0      	lsls	r0, r2, #31
 80125b4:	d501      	bpl.n	80125ba <_printf_float+0x1aa>
 80125b6:	3302      	adds	r3, #2
 80125b8:	e7f3      	b.n	80125a2 <_printf_float+0x192>
 80125ba:	2301      	movs	r3, #1
 80125bc:	e7f1      	b.n	80125a2 <_printf_float+0x192>
 80125be:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80125c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80125c6:	4293      	cmp	r3, r2
 80125c8:	db05      	blt.n	80125d6 <_printf_float+0x1c6>
 80125ca:	6822      	ldr	r2, [r4, #0]
 80125cc:	6123      	str	r3, [r4, #16]
 80125ce:	07d1      	lsls	r1, r2, #31
 80125d0:	d5e8      	bpl.n	80125a4 <_printf_float+0x194>
 80125d2:	3301      	adds	r3, #1
 80125d4:	e7e5      	b.n	80125a2 <_printf_float+0x192>
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	bfd4      	ite	le
 80125da:	f1c3 0302 	rsble	r3, r3, #2
 80125de:	2301      	movgt	r3, #1
 80125e0:	4413      	add	r3, r2
 80125e2:	e7de      	b.n	80125a2 <_printf_float+0x192>
 80125e4:	6823      	ldr	r3, [r4, #0]
 80125e6:	055a      	lsls	r2, r3, #21
 80125e8:	d407      	bmi.n	80125fa <_printf_float+0x1ea>
 80125ea:	6923      	ldr	r3, [r4, #16]
 80125ec:	4642      	mov	r2, r8
 80125ee:	4631      	mov	r1, r6
 80125f0:	4628      	mov	r0, r5
 80125f2:	47b8      	blx	r7
 80125f4:	3001      	adds	r0, #1
 80125f6:	d12b      	bne.n	8012650 <_printf_float+0x240>
 80125f8:	e767      	b.n	80124ca <_printf_float+0xba>
 80125fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80125fe:	f240 80dc 	bls.w	80127ba <_printf_float+0x3aa>
 8012602:	2200      	movs	r2, #0
 8012604:	2300      	movs	r3, #0
 8012606:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801260a:	f7ee fa6d 	bl	8000ae8 <__aeabi_dcmpeq>
 801260e:	2800      	cmp	r0, #0
 8012610:	d033      	beq.n	801267a <_printf_float+0x26a>
 8012612:	2301      	movs	r3, #1
 8012614:	4a41      	ldr	r2, [pc, #260]	; (801271c <_printf_float+0x30c>)
 8012616:	4631      	mov	r1, r6
 8012618:	4628      	mov	r0, r5
 801261a:	47b8      	blx	r7
 801261c:	3001      	adds	r0, #1
 801261e:	f43f af54 	beq.w	80124ca <_printf_float+0xba>
 8012622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012626:	429a      	cmp	r2, r3
 8012628:	db02      	blt.n	8012630 <_printf_float+0x220>
 801262a:	6823      	ldr	r3, [r4, #0]
 801262c:	07d8      	lsls	r0, r3, #31
 801262e:	d50f      	bpl.n	8012650 <_printf_float+0x240>
 8012630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012634:	4631      	mov	r1, r6
 8012636:	4628      	mov	r0, r5
 8012638:	47b8      	blx	r7
 801263a:	3001      	adds	r0, #1
 801263c:	f43f af45 	beq.w	80124ca <_printf_float+0xba>
 8012640:	f04f 0800 	mov.w	r8, #0
 8012644:	f104 091a 	add.w	r9, r4, #26
 8012648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801264a:	3b01      	subs	r3, #1
 801264c:	4543      	cmp	r3, r8
 801264e:	dc09      	bgt.n	8012664 <_printf_float+0x254>
 8012650:	6823      	ldr	r3, [r4, #0]
 8012652:	079b      	lsls	r3, r3, #30
 8012654:	f100 8103 	bmi.w	801285e <_printf_float+0x44e>
 8012658:	68e0      	ldr	r0, [r4, #12]
 801265a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801265c:	4298      	cmp	r0, r3
 801265e:	bfb8      	it	lt
 8012660:	4618      	movlt	r0, r3
 8012662:	e734      	b.n	80124ce <_printf_float+0xbe>
 8012664:	2301      	movs	r3, #1
 8012666:	464a      	mov	r2, r9
 8012668:	4631      	mov	r1, r6
 801266a:	4628      	mov	r0, r5
 801266c:	47b8      	blx	r7
 801266e:	3001      	adds	r0, #1
 8012670:	f43f af2b 	beq.w	80124ca <_printf_float+0xba>
 8012674:	f108 0801 	add.w	r8, r8, #1
 8012678:	e7e6      	b.n	8012648 <_printf_float+0x238>
 801267a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801267c:	2b00      	cmp	r3, #0
 801267e:	dc2b      	bgt.n	80126d8 <_printf_float+0x2c8>
 8012680:	2301      	movs	r3, #1
 8012682:	4a26      	ldr	r2, [pc, #152]	; (801271c <_printf_float+0x30c>)
 8012684:	4631      	mov	r1, r6
 8012686:	4628      	mov	r0, r5
 8012688:	47b8      	blx	r7
 801268a:	3001      	adds	r0, #1
 801268c:	f43f af1d 	beq.w	80124ca <_printf_float+0xba>
 8012690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012692:	b923      	cbnz	r3, 801269e <_printf_float+0x28e>
 8012694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012696:	b913      	cbnz	r3, 801269e <_printf_float+0x28e>
 8012698:	6823      	ldr	r3, [r4, #0]
 801269a:	07d9      	lsls	r1, r3, #31
 801269c:	d5d8      	bpl.n	8012650 <_printf_float+0x240>
 801269e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126a2:	4631      	mov	r1, r6
 80126a4:	4628      	mov	r0, r5
 80126a6:	47b8      	blx	r7
 80126a8:	3001      	adds	r0, #1
 80126aa:	f43f af0e 	beq.w	80124ca <_printf_float+0xba>
 80126ae:	f04f 0900 	mov.w	r9, #0
 80126b2:	f104 0a1a 	add.w	sl, r4, #26
 80126b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126b8:	425b      	negs	r3, r3
 80126ba:	454b      	cmp	r3, r9
 80126bc:	dc01      	bgt.n	80126c2 <_printf_float+0x2b2>
 80126be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126c0:	e794      	b.n	80125ec <_printf_float+0x1dc>
 80126c2:	2301      	movs	r3, #1
 80126c4:	4652      	mov	r2, sl
 80126c6:	4631      	mov	r1, r6
 80126c8:	4628      	mov	r0, r5
 80126ca:	47b8      	blx	r7
 80126cc:	3001      	adds	r0, #1
 80126ce:	f43f aefc 	beq.w	80124ca <_printf_float+0xba>
 80126d2:	f109 0901 	add.w	r9, r9, #1
 80126d6:	e7ee      	b.n	80126b6 <_printf_float+0x2a6>
 80126d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126dc:	429a      	cmp	r2, r3
 80126de:	bfa8      	it	ge
 80126e0:	461a      	movge	r2, r3
 80126e2:	2a00      	cmp	r2, #0
 80126e4:	4691      	mov	r9, r2
 80126e6:	dd07      	ble.n	80126f8 <_printf_float+0x2e8>
 80126e8:	4613      	mov	r3, r2
 80126ea:	4631      	mov	r1, r6
 80126ec:	4642      	mov	r2, r8
 80126ee:	4628      	mov	r0, r5
 80126f0:	47b8      	blx	r7
 80126f2:	3001      	adds	r0, #1
 80126f4:	f43f aee9 	beq.w	80124ca <_printf_float+0xba>
 80126f8:	f104 031a 	add.w	r3, r4, #26
 80126fc:	f04f 0b00 	mov.w	fp, #0
 8012700:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012704:	9306      	str	r3, [sp, #24]
 8012706:	e015      	b.n	8012734 <_printf_float+0x324>
 8012708:	7fefffff 	.word	0x7fefffff
 801270c:	0801fd09 	.word	0x0801fd09
 8012710:	0801fd05 	.word	0x0801fd05
 8012714:	0801fd11 	.word	0x0801fd11
 8012718:	0801fd0d 	.word	0x0801fd0d
 801271c:	0801fd15 	.word	0x0801fd15
 8012720:	2301      	movs	r3, #1
 8012722:	9a06      	ldr	r2, [sp, #24]
 8012724:	4631      	mov	r1, r6
 8012726:	4628      	mov	r0, r5
 8012728:	47b8      	blx	r7
 801272a:	3001      	adds	r0, #1
 801272c:	f43f aecd 	beq.w	80124ca <_printf_float+0xba>
 8012730:	f10b 0b01 	add.w	fp, fp, #1
 8012734:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012738:	ebaa 0309 	sub.w	r3, sl, r9
 801273c:	455b      	cmp	r3, fp
 801273e:	dcef      	bgt.n	8012720 <_printf_float+0x310>
 8012740:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012744:	429a      	cmp	r2, r3
 8012746:	44d0      	add	r8, sl
 8012748:	db15      	blt.n	8012776 <_printf_float+0x366>
 801274a:	6823      	ldr	r3, [r4, #0]
 801274c:	07da      	lsls	r2, r3, #31
 801274e:	d412      	bmi.n	8012776 <_printf_float+0x366>
 8012750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012752:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012754:	eba3 020a 	sub.w	r2, r3, sl
 8012758:	eba3 0a01 	sub.w	sl, r3, r1
 801275c:	4592      	cmp	sl, r2
 801275e:	bfa8      	it	ge
 8012760:	4692      	movge	sl, r2
 8012762:	f1ba 0f00 	cmp.w	sl, #0
 8012766:	dc0e      	bgt.n	8012786 <_printf_float+0x376>
 8012768:	f04f 0800 	mov.w	r8, #0
 801276c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012770:	f104 091a 	add.w	r9, r4, #26
 8012774:	e019      	b.n	80127aa <_printf_float+0x39a>
 8012776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801277a:	4631      	mov	r1, r6
 801277c:	4628      	mov	r0, r5
 801277e:	47b8      	blx	r7
 8012780:	3001      	adds	r0, #1
 8012782:	d1e5      	bne.n	8012750 <_printf_float+0x340>
 8012784:	e6a1      	b.n	80124ca <_printf_float+0xba>
 8012786:	4653      	mov	r3, sl
 8012788:	4642      	mov	r2, r8
 801278a:	4631      	mov	r1, r6
 801278c:	4628      	mov	r0, r5
 801278e:	47b8      	blx	r7
 8012790:	3001      	adds	r0, #1
 8012792:	d1e9      	bne.n	8012768 <_printf_float+0x358>
 8012794:	e699      	b.n	80124ca <_printf_float+0xba>
 8012796:	2301      	movs	r3, #1
 8012798:	464a      	mov	r2, r9
 801279a:	4631      	mov	r1, r6
 801279c:	4628      	mov	r0, r5
 801279e:	47b8      	blx	r7
 80127a0:	3001      	adds	r0, #1
 80127a2:	f43f ae92 	beq.w	80124ca <_printf_float+0xba>
 80127a6:	f108 0801 	add.w	r8, r8, #1
 80127aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80127ae:	1a9b      	subs	r3, r3, r2
 80127b0:	eba3 030a 	sub.w	r3, r3, sl
 80127b4:	4543      	cmp	r3, r8
 80127b6:	dcee      	bgt.n	8012796 <_printf_float+0x386>
 80127b8:	e74a      	b.n	8012650 <_printf_float+0x240>
 80127ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127bc:	2a01      	cmp	r2, #1
 80127be:	dc01      	bgt.n	80127c4 <_printf_float+0x3b4>
 80127c0:	07db      	lsls	r3, r3, #31
 80127c2:	d53a      	bpl.n	801283a <_printf_float+0x42a>
 80127c4:	2301      	movs	r3, #1
 80127c6:	4642      	mov	r2, r8
 80127c8:	4631      	mov	r1, r6
 80127ca:	4628      	mov	r0, r5
 80127cc:	47b8      	blx	r7
 80127ce:	3001      	adds	r0, #1
 80127d0:	f43f ae7b 	beq.w	80124ca <_printf_float+0xba>
 80127d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127d8:	4631      	mov	r1, r6
 80127da:	4628      	mov	r0, r5
 80127dc:	47b8      	blx	r7
 80127de:	3001      	adds	r0, #1
 80127e0:	f108 0801 	add.w	r8, r8, #1
 80127e4:	f43f ae71 	beq.w	80124ca <_printf_float+0xba>
 80127e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127ea:	2200      	movs	r2, #0
 80127ec:	f103 3aff 	add.w	sl, r3, #4294967295
 80127f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80127f4:	2300      	movs	r3, #0
 80127f6:	f7ee f977 	bl	8000ae8 <__aeabi_dcmpeq>
 80127fa:	b9c8      	cbnz	r0, 8012830 <_printf_float+0x420>
 80127fc:	4653      	mov	r3, sl
 80127fe:	4642      	mov	r2, r8
 8012800:	4631      	mov	r1, r6
 8012802:	4628      	mov	r0, r5
 8012804:	47b8      	blx	r7
 8012806:	3001      	adds	r0, #1
 8012808:	d10e      	bne.n	8012828 <_printf_float+0x418>
 801280a:	e65e      	b.n	80124ca <_printf_float+0xba>
 801280c:	2301      	movs	r3, #1
 801280e:	4652      	mov	r2, sl
 8012810:	4631      	mov	r1, r6
 8012812:	4628      	mov	r0, r5
 8012814:	47b8      	blx	r7
 8012816:	3001      	adds	r0, #1
 8012818:	f43f ae57 	beq.w	80124ca <_printf_float+0xba>
 801281c:	f108 0801 	add.w	r8, r8, #1
 8012820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012822:	3b01      	subs	r3, #1
 8012824:	4543      	cmp	r3, r8
 8012826:	dcf1      	bgt.n	801280c <_printf_float+0x3fc>
 8012828:	464b      	mov	r3, r9
 801282a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801282e:	e6de      	b.n	80125ee <_printf_float+0x1de>
 8012830:	f04f 0800 	mov.w	r8, #0
 8012834:	f104 0a1a 	add.w	sl, r4, #26
 8012838:	e7f2      	b.n	8012820 <_printf_float+0x410>
 801283a:	2301      	movs	r3, #1
 801283c:	e7df      	b.n	80127fe <_printf_float+0x3ee>
 801283e:	2301      	movs	r3, #1
 8012840:	464a      	mov	r2, r9
 8012842:	4631      	mov	r1, r6
 8012844:	4628      	mov	r0, r5
 8012846:	47b8      	blx	r7
 8012848:	3001      	adds	r0, #1
 801284a:	f43f ae3e 	beq.w	80124ca <_printf_float+0xba>
 801284e:	f108 0801 	add.w	r8, r8, #1
 8012852:	68e3      	ldr	r3, [r4, #12]
 8012854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012856:	1a9b      	subs	r3, r3, r2
 8012858:	4543      	cmp	r3, r8
 801285a:	dcf0      	bgt.n	801283e <_printf_float+0x42e>
 801285c:	e6fc      	b.n	8012658 <_printf_float+0x248>
 801285e:	f04f 0800 	mov.w	r8, #0
 8012862:	f104 0919 	add.w	r9, r4, #25
 8012866:	e7f4      	b.n	8012852 <_printf_float+0x442>
 8012868:	2900      	cmp	r1, #0
 801286a:	f43f ae8b 	beq.w	8012584 <_printf_float+0x174>
 801286e:	2300      	movs	r3, #0
 8012870:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012874:	ab09      	add	r3, sp, #36	; 0x24
 8012876:	9300      	str	r3, [sp, #0]
 8012878:	ec49 8b10 	vmov	d0, r8, r9
 801287c:	6022      	str	r2, [r4, #0]
 801287e:	f8cd a004 	str.w	sl, [sp, #4]
 8012882:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012886:	4628      	mov	r0, r5
 8012888:	f7ff fd2e 	bl	80122e8 <__cvt>
 801288c:	4680      	mov	r8, r0
 801288e:	e648      	b.n	8012522 <_printf_float+0x112>

08012890 <_printf_common>:
 8012890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012894:	4691      	mov	r9, r2
 8012896:	461f      	mov	r7, r3
 8012898:	688a      	ldr	r2, [r1, #8]
 801289a:	690b      	ldr	r3, [r1, #16]
 801289c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80128a0:	4293      	cmp	r3, r2
 80128a2:	bfb8      	it	lt
 80128a4:	4613      	movlt	r3, r2
 80128a6:	f8c9 3000 	str.w	r3, [r9]
 80128aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80128ae:	4606      	mov	r6, r0
 80128b0:	460c      	mov	r4, r1
 80128b2:	b112      	cbz	r2, 80128ba <_printf_common+0x2a>
 80128b4:	3301      	adds	r3, #1
 80128b6:	f8c9 3000 	str.w	r3, [r9]
 80128ba:	6823      	ldr	r3, [r4, #0]
 80128bc:	0699      	lsls	r1, r3, #26
 80128be:	bf42      	ittt	mi
 80128c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80128c4:	3302      	addmi	r3, #2
 80128c6:	f8c9 3000 	strmi.w	r3, [r9]
 80128ca:	6825      	ldr	r5, [r4, #0]
 80128cc:	f015 0506 	ands.w	r5, r5, #6
 80128d0:	d107      	bne.n	80128e2 <_printf_common+0x52>
 80128d2:	f104 0a19 	add.w	sl, r4, #25
 80128d6:	68e3      	ldr	r3, [r4, #12]
 80128d8:	f8d9 2000 	ldr.w	r2, [r9]
 80128dc:	1a9b      	subs	r3, r3, r2
 80128de:	42ab      	cmp	r3, r5
 80128e0:	dc28      	bgt.n	8012934 <_printf_common+0xa4>
 80128e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80128e6:	6822      	ldr	r2, [r4, #0]
 80128e8:	3300      	adds	r3, #0
 80128ea:	bf18      	it	ne
 80128ec:	2301      	movne	r3, #1
 80128ee:	0692      	lsls	r2, r2, #26
 80128f0:	d42d      	bmi.n	801294e <_printf_common+0xbe>
 80128f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80128f6:	4639      	mov	r1, r7
 80128f8:	4630      	mov	r0, r6
 80128fa:	47c0      	blx	r8
 80128fc:	3001      	adds	r0, #1
 80128fe:	d020      	beq.n	8012942 <_printf_common+0xb2>
 8012900:	6823      	ldr	r3, [r4, #0]
 8012902:	68e5      	ldr	r5, [r4, #12]
 8012904:	f8d9 2000 	ldr.w	r2, [r9]
 8012908:	f003 0306 	and.w	r3, r3, #6
 801290c:	2b04      	cmp	r3, #4
 801290e:	bf08      	it	eq
 8012910:	1aad      	subeq	r5, r5, r2
 8012912:	68a3      	ldr	r3, [r4, #8]
 8012914:	6922      	ldr	r2, [r4, #16]
 8012916:	bf0c      	ite	eq
 8012918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801291c:	2500      	movne	r5, #0
 801291e:	4293      	cmp	r3, r2
 8012920:	bfc4      	itt	gt
 8012922:	1a9b      	subgt	r3, r3, r2
 8012924:	18ed      	addgt	r5, r5, r3
 8012926:	f04f 0900 	mov.w	r9, #0
 801292a:	341a      	adds	r4, #26
 801292c:	454d      	cmp	r5, r9
 801292e:	d11a      	bne.n	8012966 <_printf_common+0xd6>
 8012930:	2000      	movs	r0, #0
 8012932:	e008      	b.n	8012946 <_printf_common+0xb6>
 8012934:	2301      	movs	r3, #1
 8012936:	4652      	mov	r2, sl
 8012938:	4639      	mov	r1, r7
 801293a:	4630      	mov	r0, r6
 801293c:	47c0      	blx	r8
 801293e:	3001      	adds	r0, #1
 8012940:	d103      	bne.n	801294a <_printf_common+0xba>
 8012942:	f04f 30ff 	mov.w	r0, #4294967295
 8012946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801294a:	3501      	adds	r5, #1
 801294c:	e7c3      	b.n	80128d6 <_printf_common+0x46>
 801294e:	18e1      	adds	r1, r4, r3
 8012950:	1c5a      	adds	r2, r3, #1
 8012952:	2030      	movs	r0, #48	; 0x30
 8012954:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012958:	4422      	add	r2, r4
 801295a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801295e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012962:	3302      	adds	r3, #2
 8012964:	e7c5      	b.n	80128f2 <_printf_common+0x62>
 8012966:	2301      	movs	r3, #1
 8012968:	4622      	mov	r2, r4
 801296a:	4639      	mov	r1, r7
 801296c:	4630      	mov	r0, r6
 801296e:	47c0      	blx	r8
 8012970:	3001      	adds	r0, #1
 8012972:	d0e6      	beq.n	8012942 <_printf_common+0xb2>
 8012974:	f109 0901 	add.w	r9, r9, #1
 8012978:	e7d8      	b.n	801292c <_printf_common+0x9c>
	...

0801297c <_printf_i>:
 801297c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012980:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012984:	460c      	mov	r4, r1
 8012986:	7e09      	ldrb	r1, [r1, #24]
 8012988:	b085      	sub	sp, #20
 801298a:	296e      	cmp	r1, #110	; 0x6e
 801298c:	4617      	mov	r7, r2
 801298e:	4606      	mov	r6, r0
 8012990:	4698      	mov	r8, r3
 8012992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012994:	f000 80b3 	beq.w	8012afe <_printf_i+0x182>
 8012998:	d822      	bhi.n	80129e0 <_printf_i+0x64>
 801299a:	2963      	cmp	r1, #99	; 0x63
 801299c:	d036      	beq.n	8012a0c <_printf_i+0x90>
 801299e:	d80a      	bhi.n	80129b6 <_printf_i+0x3a>
 80129a0:	2900      	cmp	r1, #0
 80129a2:	f000 80b9 	beq.w	8012b18 <_printf_i+0x19c>
 80129a6:	2958      	cmp	r1, #88	; 0x58
 80129a8:	f000 8083 	beq.w	8012ab2 <_printf_i+0x136>
 80129ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80129b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80129b4:	e032      	b.n	8012a1c <_printf_i+0xa0>
 80129b6:	2964      	cmp	r1, #100	; 0x64
 80129b8:	d001      	beq.n	80129be <_printf_i+0x42>
 80129ba:	2969      	cmp	r1, #105	; 0x69
 80129bc:	d1f6      	bne.n	80129ac <_printf_i+0x30>
 80129be:	6820      	ldr	r0, [r4, #0]
 80129c0:	6813      	ldr	r3, [r2, #0]
 80129c2:	0605      	lsls	r5, r0, #24
 80129c4:	f103 0104 	add.w	r1, r3, #4
 80129c8:	d52a      	bpl.n	8012a20 <_printf_i+0xa4>
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	6011      	str	r1, [r2, #0]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	da03      	bge.n	80129da <_printf_i+0x5e>
 80129d2:	222d      	movs	r2, #45	; 0x2d
 80129d4:	425b      	negs	r3, r3
 80129d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80129da:	486f      	ldr	r0, [pc, #444]	; (8012b98 <_printf_i+0x21c>)
 80129dc:	220a      	movs	r2, #10
 80129de:	e039      	b.n	8012a54 <_printf_i+0xd8>
 80129e0:	2973      	cmp	r1, #115	; 0x73
 80129e2:	f000 809d 	beq.w	8012b20 <_printf_i+0x1a4>
 80129e6:	d808      	bhi.n	80129fa <_printf_i+0x7e>
 80129e8:	296f      	cmp	r1, #111	; 0x6f
 80129ea:	d020      	beq.n	8012a2e <_printf_i+0xb2>
 80129ec:	2970      	cmp	r1, #112	; 0x70
 80129ee:	d1dd      	bne.n	80129ac <_printf_i+0x30>
 80129f0:	6823      	ldr	r3, [r4, #0]
 80129f2:	f043 0320 	orr.w	r3, r3, #32
 80129f6:	6023      	str	r3, [r4, #0]
 80129f8:	e003      	b.n	8012a02 <_printf_i+0x86>
 80129fa:	2975      	cmp	r1, #117	; 0x75
 80129fc:	d017      	beq.n	8012a2e <_printf_i+0xb2>
 80129fe:	2978      	cmp	r1, #120	; 0x78
 8012a00:	d1d4      	bne.n	80129ac <_printf_i+0x30>
 8012a02:	2378      	movs	r3, #120	; 0x78
 8012a04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a08:	4864      	ldr	r0, [pc, #400]	; (8012b9c <_printf_i+0x220>)
 8012a0a:	e055      	b.n	8012ab8 <_printf_i+0x13c>
 8012a0c:	6813      	ldr	r3, [r2, #0]
 8012a0e:	1d19      	adds	r1, r3, #4
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	6011      	str	r1, [r2, #0]
 8012a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	e08c      	b.n	8012b3a <_printf_i+0x1be>
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	6011      	str	r1, [r2, #0]
 8012a24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012a28:	bf18      	it	ne
 8012a2a:	b21b      	sxthne	r3, r3
 8012a2c:	e7cf      	b.n	80129ce <_printf_i+0x52>
 8012a2e:	6813      	ldr	r3, [r2, #0]
 8012a30:	6825      	ldr	r5, [r4, #0]
 8012a32:	1d18      	adds	r0, r3, #4
 8012a34:	6010      	str	r0, [r2, #0]
 8012a36:	0628      	lsls	r0, r5, #24
 8012a38:	d501      	bpl.n	8012a3e <_printf_i+0xc2>
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	e002      	b.n	8012a44 <_printf_i+0xc8>
 8012a3e:	0668      	lsls	r0, r5, #25
 8012a40:	d5fb      	bpl.n	8012a3a <_printf_i+0xbe>
 8012a42:	881b      	ldrh	r3, [r3, #0]
 8012a44:	4854      	ldr	r0, [pc, #336]	; (8012b98 <_printf_i+0x21c>)
 8012a46:	296f      	cmp	r1, #111	; 0x6f
 8012a48:	bf14      	ite	ne
 8012a4a:	220a      	movne	r2, #10
 8012a4c:	2208      	moveq	r2, #8
 8012a4e:	2100      	movs	r1, #0
 8012a50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012a54:	6865      	ldr	r5, [r4, #4]
 8012a56:	60a5      	str	r5, [r4, #8]
 8012a58:	2d00      	cmp	r5, #0
 8012a5a:	f2c0 8095 	blt.w	8012b88 <_printf_i+0x20c>
 8012a5e:	6821      	ldr	r1, [r4, #0]
 8012a60:	f021 0104 	bic.w	r1, r1, #4
 8012a64:	6021      	str	r1, [r4, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d13d      	bne.n	8012ae6 <_printf_i+0x16a>
 8012a6a:	2d00      	cmp	r5, #0
 8012a6c:	f040 808e 	bne.w	8012b8c <_printf_i+0x210>
 8012a70:	4665      	mov	r5, ip
 8012a72:	2a08      	cmp	r2, #8
 8012a74:	d10b      	bne.n	8012a8e <_printf_i+0x112>
 8012a76:	6823      	ldr	r3, [r4, #0]
 8012a78:	07db      	lsls	r3, r3, #31
 8012a7a:	d508      	bpl.n	8012a8e <_printf_i+0x112>
 8012a7c:	6923      	ldr	r3, [r4, #16]
 8012a7e:	6862      	ldr	r2, [r4, #4]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	bfde      	ittt	le
 8012a84:	2330      	movle	r3, #48	; 0x30
 8012a86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012a8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012a8e:	ebac 0305 	sub.w	r3, ip, r5
 8012a92:	6123      	str	r3, [r4, #16]
 8012a94:	f8cd 8000 	str.w	r8, [sp]
 8012a98:	463b      	mov	r3, r7
 8012a9a:	aa03      	add	r2, sp, #12
 8012a9c:	4621      	mov	r1, r4
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f7ff fef6 	bl	8012890 <_printf_common>
 8012aa4:	3001      	adds	r0, #1
 8012aa6:	d14d      	bne.n	8012b44 <_printf_i+0x1c8>
 8012aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8012aac:	b005      	add	sp, #20
 8012aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ab2:	4839      	ldr	r0, [pc, #228]	; (8012b98 <_printf_i+0x21c>)
 8012ab4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012ab8:	6813      	ldr	r3, [r2, #0]
 8012aba:	6821      	ldr	r1, [r4, #0]
 8012abc:	1d1d      	adds	r5, r3, #4
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	6015      	str	r5, [r2, #0]
 8012ac2:	060a      	lsls	r2, r1, #24
 8012ac4:	d50b      	bpl.n	8012ade <_printf_i+0x162>
 8012ac6:	07ca      	lsls	r2, r1, #31
 8012ac8:	bf44      	itt	mi
 8012aca:	f041 0120 	orrmi.w	r1, r1, #32
 8012ace:	6021      	strmi	r1, [r4, #0]
 8012ad0:	b91b      	cbnz	r3, 8012ada <_printf_i+0x15e>
 8012ad2:	6822      	ldr	r2, [r4, #0]
 8012ad4:	f022 0220 	bic.w	r2, r2, #32
 8012ad8:	6022      	str	r2, [r4, #0]
 8012ada:	2210      	movs	r2, #16
 8012adc:	e7b7      	b.n	8012a4e <_printf_i+0xd2>
 8012ade:	064d      	lsls	r5, r1, #25
 8012ae0:	bf48      	it	mi
 8012ae2:	b29b      	uxthmi	r3, r3
 8012ae4:	e7ef      	b.n	8012ac6 <_printf_i+0x14a>
 8012ae6:	4665      	mov	r5, ip
 8012ae8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012aec:	fb02 3311 	mls	r3, r2, r1, r3
 8012af0:	5cc3      	ldrb	r3, [r0, r3]
 8012af2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012af6:	460b      	mov	r3, r1
 8012af8:	2900      	cmp	r1, #0
 8012afa:	d1f5      	bne.n	8012ae8 <_printf_i+0x16c>
 8012afc:	e7b9      	b.n	8012a72 <_printf_i+0xf6>
 8012afe:	6813      	ldr	r3, [r2, #0]
 8012b00:	6825      	ldr	r5, [r4, #0]
 8012b02:	6961      	ldr	r1, [r4, #20]
 8012b04:	1d18      	adds	r0, r3, #4
 8012b06:	6010      	str	r0, [r2, #0]
 8012b08:	0628      	lsls	r0, r5, #24
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	d501      	bpl.n	8012b12 <_printf_i+0x196>
 8012b0e:	6019      	str	r1, [r3, #0]
 8012b10:	e002      	b.n	8012b18 <_printf_i+0x19c>
 8012b12:	066a      	lsls	r2, r5, #25
 8012b14:	d5fb      	bpl.n	8012b0e <_printf_i+0x192>
 8012b16:	8019      	strh	r1, [r3, #0]
 8012b18:	2300      	movs	r3, #0
 8012b1a:	6123      	str	r3, [r4, #16]
 8012b1c:	4665      	mov	r5, ip
 8012b1e:	e7b9      	b.n	8012a94 <_printf_i+0x118>
 8012b20:	6813      	ldr	r3, [r2, #0]
 8012b22:	1d19      	adds	r1, r3, #4
 8012b24:	6011      	str	r1, [r2, #0]
 8012b26:	681d      	ldr	r5, [r3, #0]
 8012b28:	6862      	ldr	r2, [r4, #4]
 8012b2a:	2100      	movs	r1, #0
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	f7ed fb67 	bl	8000200 <memchr>
 8012b32:	b108      	cbz	r0, 8012b38 <_printf_i+0x1bc>
 8012b34:	1b40      	subs	r0, r0, r5
 8012b36:	6060      	str	r0, [r4, #4]
 8012b38:	6863      	ldr	r3, [r4, #4]
 8012b3a:	6123      	str	r3, [r4, #16]
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b42:	e7a7      	b.n	8012a94 <_printf_i+0x118>
 8012b44:	6923      	ldr	r3, [r4, #16]
 8012b46:	462a      	mov	r2, r5
 8012b48:	4639      	mov	r1, r7
 8012b4a:	4630      	mov	r0, r6
 8012b4c:	47c0      	blx	r8
 8012b4e:	3001      	adds	r0, #1
 8012b50:	d0aa      	beq.n	8012aa8 <_printf_i+0x12c>
 8012b52:	6823      	ldr	r3, [r4, #0]
 8012b54:	079b      	lsls	r3, r3, #30
 8012b56:	d413      	bmi.n	8012b80 <_printf_i+0x204>
 8012b58:	68e0      	ldr	r0, [r4, #12]
 8012b5a:	9b03      	ldr	r3, [sp, #12]
 8012b5c:	4298      	cmp	r0, r3
 8012b5e:	bfb8      	it	lt
 8012b60:	4618      	movlt	r0, r3
 8012b62:	e7a3      	b.n	8012aac <_printf_i+0x130>
 8012b64:	2301      	movs	r3, #1
 8012b66:	464a      	mov	r2, r9
 8012b68:	4639      	mov	r1, r7
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	47c0      	blx	r8
 8012b6e:	3001      	adds	r0, #1
 8012b70:	d09a      	beq.n	8012aa8 <_printf_i+0x12c>
 8012b72:	3501      	adds	r5, #1
 8012b74:	68e3      	ldr	r3, [r4, #12]
 8012b76:	9a03      	ldr	r2, [sp, #12]
 8012b78:	1a9b      	subs	r3, r3, r2
 8012b7a:	42ab      	cmp	r3, r5
 8012b7c:	dcf2      	bgt.n	8012b64 <_printf_i+0x1e8>
 8012b7e:	e7eb      	b.n	8012b58 <_printf_i+0x1dc>
 8012b80:	2500      	movs	r5, #0
 8012b82:	f104 0919 	add.w	r9, r4, #25
 8012b86:	e7f5      	b.n	8012b74 <_printf_i+0x1f8>
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d1ac      	bne.n	8012ae6 <_printf_i+0x16a>
 8012b8c:	7803      	ldrb	r3, [r0, #0]
 8012b8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b96:	e76c      	b.n	8012a72 <_printf_i+0xf6>
 8012b98:	0801fd17 	.word	0x0801fd17
 8012b9c:	0801fd28 	.word	0x0801fd28

08012ba0 <_sbrk_r>:
 8012ba0:	b538      	push	{r3, r4, r5, lr}
 8012ba2:	4c06      	ldr	r4, [pc, #24]	; (8012bbc <_sbrk_r+0x1c>)
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	4605      	mov	r5, r0
 8012ba8:	4608      	mov	r0, r1
 8012baa:	6023      	str	r3, [r4, #0]
 8012bac:	f7fc fb1e 	bl	800f1ec <_sbrk>
 8012bb0:	1c43      	adds	r3, r0, #1
 8012bb2:	d102      	bne.n	8012bba <_sbrk_r+0x1a>
 8012bb4:	6823      	ldr	r3, [r4, #0]
 8012bb6:	b103      	cbz	r3, 8012bba <_sbrk_r+0x1a>
 8012bb8:	602b      	str	r3, [r5, #0]
 8012bba:	bd38      	pop	{r3, r4, r5, pc}
 8012bbc:	20000304 	.word	0x20000304

08012bc0 <_raise_r>:
 8012bc0:	291f      	cmp	r1, #31
 8012bc2:	b538      	push	{r3, r4, r5, lr}
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	460d      	mov	r5, r1
 8012bc8:	d904      	bls.n	8012bd4 <_raise_r+0x14>
 8012bca:	2316      	movs	r3, #22
 8012bcc:	6003      	str	r3, [r0, #0]
 8012bce:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd2:	bd38      	pop	{r3, r4, r5, pc}
 8012bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012bd6:	b112      	cbz	r2, 8012bde <_raise_r+0x1e>
 8012bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012bdc:	b94b      	cbnz	r3, 8012bf2 <_raise_r+0x32>
 8012bde:	4620      	mov	r0, r4
 8012be0:	f000 f830 	bl	8012c44 <_getpid_r>
 8012be4:	462a      	mov	r2, r5
 8012be6:	4601      	mov	r1, r0
 8012be8:	4620      	mov	r0, r4
 8012bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bee:	f000 b817 	b.w	8012c20 <_kill_r>
 8012bf2:	2b01      	cmp	r3, #1
 8012bf4:	d00a      	beq.n	8012c0c <_raise_r+0x4c>
 8012bf6:	1c59      	adds	r1, r3, #1
 8012bf8:	d103      	bne.n	8012c02 <_raise_r+0x42>
 8012bfa:	2316      	movs	r3, #22
 8012bfc:	6003      	str	r3, [r0, #0]
 8012bfe:	2001      	movs	r0, #1
 8012c00:	e7e7      	b.n	8012bd2 <_raise_r+0x12>
 8012c02:	2400      	movs	r4, #0
 8012c04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c08:	4628      	mov	r0, r5
 8012c0a:	4798      	blx	r3
 8012c0c:	2000      	movs	r0, #0
 8012c0e:	e7e0      	b.n	8012bd2 <_raise_r+0x12>

08012c10 <raise>:
 8012c10:	4b02      	ldr	r3, [pc, #8]	; (8012c1c <raise+0xc>)
 8012c12:	4601      	mov	r1, r0
 8012c14:	6818      	ldr	r0, [r3, #0]
 8012c16:	f7ff bfd3 	b.w	8012bc0 <_raise_r>
 8012c1a:	bf00      	nop
 8012c1c:	20000014 	.word	0x20000014

08012c20 <_kill_r>:
 8012c20:	b538      	push	{r3, r4, r5, lr}
 8012c22:	4c07      	ldr	r4, [pc, #28]	; (8012c40 <_kill_r+0x20>)
 8012c24:	2300      	movs	r3, #0
 8012c26:	4605      	mov	r5, r0
 8012c28:	4608      	mov	r0, r1
 8012c2a:	4611      	mov	r1, r2
 8012c2c:	6023      	str	r3, [r4, #0]
 8012c2e:	f7fc fa55 	bl	800f0dc <_kill>
 8012c32:	1c43      	adds	r3, r0, #1
 8012c34:	d102      	bne.n	8012c3c <_kill_r+0x1c>
 8012c36:	6823      	ldr	r3, [r4, #0]
 8012c38:	b103      	cbz	r3, 8012c3c <_kill_r+0x1c>
 8012c3a:	602b      	str	r3, [r5, #0]
 8012c3c:	bd38      	pop	{r3, r4, r5, pc}
 8012c3e:	bf00      	nop
 8012c40:	20000304 	.word	0x20000304

08012c44 <_getpid_r>:
 8012c44:	f7fc ba42 	b.w	800f0cc <_getpid>

08012c48 <siprintf>:
 8012c48:	b40e      	push	{r1, r2, r3}
 8012c4a:	b500      	push	{lr}
 8012c4c:	b09c      	sub	sp, #112	; 0x70
 8012c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8012c50:	9002      	str	r0, [sp, #8]
 8012c52:	9006      	str	r0, [sp, #24]
 8012c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012c58:	4809      	ldr	r0, [pc, #36]	; (8012c80 <siprintf+0x38>)
 8012c5a:	9107      	str	r1, [sp, #28]
 8012c5c:	9104      	str	r1, [sp, #16]
 8012c5e:	4909      	ldr	r1, [pc, #36]	; (8012c84 <siprintf+0x3c>)
 8012c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c64:	9105      	str	r1, [sp, #20]
 8012c66:	6800      	ldr	r0, [r0, #0]
 8012c68:	9301      	str	r3, [sp, #4]
 8012c6a:	a902      	add	r1, sp, #8
 8012c6c:	f001 fc6e 	bl	801454c <_svfiprintf_r>
 8012c70:	9b02      	ldr	r3, [sp, #8]
 8012c72:	2200      	movs	r2, #0
 8012c74:	701a      	strb	r2, [r3, #0]
 8012c76:	b01c      	add	sp, #112	; 0x70
 8012c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c7c:	b003      	add	sp, #12
 8012c7e:	4770      	bx	lr
 8012c80:	20000014 	.word	0x20000014
 8012c84:	ffff0208 	.word	0xffff0208

08012c88 <strncmp>:
 8012c88:	b510      	push	{r4, lr}
 8012c8a:	b16a      	cbz	r2, 8012ca8 <strncmp+0x20>
 8012c8c:	3901      	subs	r1, #1
 8012c8e:	1884      	adds	r4, r0, r2
 8012c90:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012c94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d103      	bne.n	8012ca4 <strncmp+0x1c>
 8012c9c:	42a0      	cmp	r0, r4
 8012c9e:	d001      	beq.n	8012ca4 <strncmp+0x1c>
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d1f5      	bne.n	8012c90 <strncmp+0x8>
 8012ca4:	1a98      	subs	r0, r3, r2
 8012ca6:	bd10      	pop	{r4, pc}
 8012ca8:	4610      	mov	r0, r2
 8012caa:	e7fc      	b.n	8012ca6 <strncmp+0x1e>

08012cac <__swbuf_r>:
 8012cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cae:	460e      	mov	r6, r1
 8012cb0:	4614      	mov	r4, r2
 8012cb2:	4605      	mov	r5, r0
 8012cb4:	b118      	cbz	r0, 8012cbe <__swbuf_r+0x12>
 8012cb6:	6983      	ldr	r3, [r0, #24]
 8012cb8:	b90b      	cbnz	r3, 8012cbe <__swbuf_r+0x12>
 8012cba:	f000 ffed 	bl	8013c98 <__sinit>
 8012cbe:	4b21      	ldr	r3, [pc, #132]	; (8012d44 <__swbuf_r+0x98>)
 8012cc0:	429c      	cmp	r4, r3
 8012cc2:	d12a      	bne.n	8012d1a <__swbuf_r+0x6e>
 8012cc4:	686c      	ldr	r4, [r5, #4]
 8012cc6:	69a3      	ldr	r3, [r4, #24]
 8012cc8:	60a3      	str	r3, [r4, #8]
 8012cca:	89a3      	ldrh	r3, [r4, #12]
 8012ccc:	071a      	lsls	r2, r3, #28
 8012cce:	d52e      	bpl.n	8012d2e <__swbuf_r+0x82>
 8012cd0:	6923      	ldr	r3, [r4, #16]
 8012cd2:	b363      	cbz	r3, 8012d2e <__swbuf_r+0x82>
 8012cd4:	6923      	ldr	r3, [r4, #16]
 8012cd6:	6820      	ldr	r0, [r4, #0]
 8012cd8:	1ac0      	subs	r0, r0, r3
 8012cda:	6963      	ldr	r3, [r4, #20]
 8012cdc:	b2f6      	uxtb	r6, r6
 8012cde:	4283      	cmp	r3, r0
 8012ce0:	4637      	mov	r7, r6
 8012ce2:	dc04      	bgt.n	8012cee <__swbuf_r+0x42>
 8012ce4:	4621      	mov	r1, r4
 8012ce6:	4628      	mov	r0, r5
 8012ce8:	f000 ff6c 	bl	8013bc4 <_fflush_r>
 8012cec:	bb28      	cbnz	r0, 8012d3a <__swbuf_r+0x8e>
 8012cee:	68a3      	ldr	r3, [r4, #8]
 8012cf0:	3b01      	subs	r3, #1
 8012cf2:	60a3      	str	r3, [r4, #8]
 8012cf4:	6823      	ldr	r3, [r4, #0]
 8012cf6:	1c5a      	adds	r2, r3, #1
 8012cf8:	6022      	str	r2, [r4, #0]
 8012cfa:	701e      	strb	r6, [r3, #0]
 8012cfc:	6963      	ldr	r3, [r4, #20]
 8012cfe:	3001      	adds	r0, #1
 8012d00:	4283      	cmp	r3, r0
 8012d02:	d004      	beq.n	8012d0e <__swbuf_r+0x62>
 8012d04:	89a3      	ldrh	r3, [r4, #12]
 8012d06:	07db      	lsls	r3, r3, #31
 8012d08:	d519      	bpl.n	8012d3e <__swbuf_r+0x92>
 8012d0a:	2e0a      	cmp	r6, #10
 8012d0c:	d117      	bne.n	8012d3e <__swbuf_r+0x92>
 8012d0e:	4621      	mov	r1, r4
 8012d10:	4628      	mov	r0, r5
 8012d12:	f000 ff57 	bl	8013bc4 <_fflush_r>
 8012d16:	b190      	cbz	r0, 8012d3e <__swbuf_r+0x92>
 8012d18:	e00f      	b.n	8012d3a <__swbuf_r+0x8e>
 8012d1a:	4b0b      	ldr	r3, [pc, #44]	; (8012d48 <__swbuf_r+0x9c>)
 8012d1c:	429c      	cmp	r4, r3
 8012d1e:	d101      	bne.n	8012d24 <__swbuf_r+0x78>
 8012d20:	68ac      	ldr	r4, [r5, #8]
 8012d22:	e7d0      	b.n	8012cc6 <__swbuf_r+0x1a>
 8012d24:	4b09      	ldr	r3, [pc, #36]	; (8012d4c <__swbuf_r+0xa0>)
 8012d26:	429c      	cmp	r4, r3
 8012d28:	bf08      	it	eq
 8012d2a:	68ec      	ldreq	r4, [r5, #12]
 8012d2c:	e7cb      	b.n	8012cc6 <__swbuf_r+0x1a>
 8012d2e:	4621      	mov	r1, r4
 8012d30:	4628      	mov	r0, r5
 8012d32:	f000 f80d 	bl	8012d50 <__swsetup_r>
 8012d36:	2800      	cmp	r0, #0
 8012d38:	d0cc      	beq.n	8012cd4 <__swbuf_r+0x28>
 8012d3a:	f04f 37ff 	mov.w	r7, #4294967295
 8012d3e:	4638      	mov	r0, r7
 8012d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d42:	bf00      	nop
 8012d44:	0801fd68 	.word	0x0801fd68
 8012d48:	0801fd88 	.word	0x0801fd88
 8012d4c:	0801fd48 	.word	0x0801fd48

08012d50 <__swsetup_r>:
 8012d50:	4b32      	ldr	r3, [pc, #200]	; (8012e1c <__swsetup_r+0xcc>)
 8012d52:	b570      	push	{r4, r5, r6, lr}
 8012d54:	681d      	ldr	r5, [r3, #0]
 8012d56:	4606      	mov	r6, r0
 8012d58:	460c      	mov	r4, r1
 8012d5a:	b125      	cbz	r5, 8012d66 <__swsetup_r+0x16>
 8012d5c:	69ab      	ldr	r3, [r5, #24]
 8012d5e:	b913      	cbnz	r3, 8012d66 <__swsetup_r+0x16>
 8012d60:	4628      	mov	r0, r5
 8012d62:	f000 ff99 	bl	8013c98 <__sinit>
 8012d66:	4b2e      	ldr	r3, [pc, #184]	; (8012e20 <__swsetup_r+0xd0>)
 8012d68:	429c      	cmp	r4, r3
 8012d6a:	d10f      	bne.n	8012d8c <__swsetup_r+0x3c>
 8012d6c:	686c      	ldr	r4, [r5, #4]
 8012d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d72:	b29a      	uxth	r2, r3
 8012d74:	0715      	lsls	r5, r2, #28
 8012d76:	d42c      	bmi.n	8012dd2 <__swsetup_r+0x82>
 8012d78:	06d0      	lsls	r0, r2, #27
 8012d7a:	d411      	bmi.n	8012da0 <__swsetup_r+0x50>
 8012d7c:	2209      	movs	r2, #9
 8012d7e:	6032      	str	r2, [r6, #0]
 8012d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d84:	81a3      	strh	r3, [r4, #12]
 8012d86:	f04f 30ff 	mov.w	r0, #4294967295
 8012d8a:	e03e      	b.n	8012e0a <__swsetup_r+0xba>
 8012d8c:	4b25      	ldr	r3, [pc, #148]	; (8012e24 <__swsetup_r+0xd4>)
 8012d8e:	429c      	cmp	r4, r3
 8012d90:	d101      	bne.n	8012d96 <__swsetup_r+0x46>
 8012d92:	68ac      	ldr	r4, [r5, #8]
 8012d94:	e7eb      	b.n	8012d6e <__swsetup_r+0x1e>
 8012d96:	4b24      	ldr	r3, [pc, #144]	; (8012e28 <__swsetup_r+0xd8>)
 8012d98:	429c      	cmp	r4, r3
 8012d9a:	bf08      	it	eq
 8012d9c:	68ec      	ldreq	r4, [r5, #12]
 8012d9e:	e7e6      	b.n	8012d6e <__swsetup_r+0x1e>
 8012da0:	0751      	lsls	r1, r2, #29
 8012da2:	d512      	bpl.n	8012dca <__swsetup_r+0x7a>
 8012da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012da6:	b141      	cbz	r1, 8012dba <__swsetup_r+0x6a>
 8012da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012dac:	4299      	cmp	r1, r3
 8012dae:	d002      	beq.n	8012db6 <__swsetup_r+0x66>
 8012db0:	4630      	mov	r0, r6
 8012db2:	f7ff f8b1 	bl	8011f18 <_free_r>
 8012db6:	2300      	movs	r3, #0
 8012db8:	6363      	str	r3, [r4, #52]	; 0x34
 8012dba:	89a3      	ldrh	r3, [r4, #12]
 8012dbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012dc0:	81a3      	strh	r3, [r4, #12]
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	6063      	str	r3, [r4, #4]
 8012dc6:	6923      	ldr	r3, [r4, #16]
 8012dc8:	6023      	str	r3, [r4, #0]
 8012dca:	89a3      	ldrh	r3, [r4, #12]
 8012dcc:	f043 0308 	orr.w	r3, r3, #8
 8012dd0:	81a3      	strh	r3, [r4, #12]
 8012dd2:	6923      	ldr	r3, [r4, #16]
 8012dd4:	b94b      	cbnz	r3, 8012dea <__swsetup_r+0x9a>
 8012dd6:	89a3      	ldrh	r3, [r4, #12]
 8012dd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012de0:	d003      	beq.n	8012dea <__swsetup_r+0x9a>
 8012de2:	4621      	mov	r1, r4
 8012de4:	4630      	mov	r0, r6
 8012de6:	f001 f813 	bl	8013e10 <__smakebuf_r>
 8012dea:	89a2      	ldrh	r2, [r4, #12]
 8012dec:	f012 0301 	ands.w	r3, r2, #1
 8012df0:	d00c      	beq.n	8012e0c <__swsetup_r+0xbc>
 8012df2:	2300      	movs	r3, #0
 8012df4:	60a3      	str	r3, [r4, #8]
 8012df6:	6963      	ldr	r3, [r4, #20]
 8012df8:	425b      	negs	r3, r3
 8012dfa:	61a3      	str	r3, [r4, #24]
 8012dfc:	6923      	ldr	r3, [r4, #16]
 8012dfe:	b953      	cbnz	r3, 8012e16 <__swsetup_r+0xc6>
 8012e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012e08:	d1ba      	bne.n	8012d80 <__swsetup_r+0x30>
 8012e0a:	bd70      	pop	{r4, r5, r6, pc}
 8012e0c:	0792      	lsls	r2, r2, #30
 8012e0e:	bf58      	it	pl
 8012e10:	6963      	ldrpl	r3, [r4, #20]
 8012e12:	60a3      	str	r3, [r4, #8]
 8012e14:	e7f2      	b.n	8012dfc <__swsetup_r+0xac>
 8012e16:	2000      	movs	r0, #0
 8012e18:	e7f7      	b.n	8012e0a <__swsetup_r+0xba>
 8012e1a:	bf00      	nop
 8012e1c:	20000014 	.word	0x20000014
 8012e20:	0801fd68 	.word	0x0801fd68
 8012e24:	0801fd88 	.word	0x0801fd88
 8012e28:	0801fd48 	.word	0x0801fd48

08012e2c <quorem>:
 8012e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e30:	6903      	ldr	r3, [r0, #16]
 8012e32:	690c      	ldr	r4, [r1, #16]
 8012e34:	42a3      	cmp	r3, r4
 8012e36:	4680      	mov	r8, r0
 8012e38:	f2c0 8082 	blt.w	8012f40 <quorem+0x114>
 8012e3c:	3c01      	subs	r4, #1
 8012e3e:	f101 0714 	add.w	r7, r1, #20
 8012e42:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012e46:	f100 0614 	add.w	r6, r0, #20
 8012e4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012e4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012e52:	eb06 030c 	add.w	r3, r6, ip
 8012e56:	3501      	adds	r5, #1
 8012e58:	eb07 090c 	add.w	r9, r7, ip
 8012e5c:	9301      	str	r3, [sp, #4]
 8012e5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8012e62:	b395      	cbz	r5, 8012eca <quorem+0x9e>
 8012e64:	f04f 0a00 	mov.w	sl, #0
 8012e68:	4638      	mov	r0, r7
 8012e6a:	46b6      	mov	lr, r6
 8012e6c:	46d3      	mov	fp, sl
 8012e6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012e72:	b293      	uxth	r3, r2
 8012e74:	fb05 a303 	mla	r3, r5, r3, sl
 8012e78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	ebab 0303 	sub.w	r3, fp, r3
 8012e82:	0c12      	lsrs	r2, r2, #16
 8012e84:	f8de b000 	ldr.w	fp, [lr]
 8012e88:	fb05 a202 	mla	r2, r5, r2, sl
 8012e8c:	fa13 f38b 	uxtah	r3, r3, fp
 8012e90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012e94:	fa1f fb82 	uxth.w	fp, r2
 8012e98:	f8de 2000 	ldr.w	r2, [lr]
 8012e9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012ea0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012ea4:	b29b      	uxth	r3, r3
 8012ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012eaa:	4581      	cmp	r9, r0
 8012eac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012eb0:	f84e 3b04 	str.w	r3, [lr], #4
 8012eb4:	d2db      	bcs.n	8012e6e <quorem+0x42>
 8012eb6:	f856 300c 	ldr.w	r3, [r6, ip]
 8012eba:	b933      	cbnz	r3, 8012eca <quorem+0x9e>
 8012ebc:	9b01      	ldr	r3, [sp, #4]
 8012ebe:	3b04      	subs	r3, #4
 8012ec0:	429e      	cmp	r6, r3
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	d330      	bcc.n	8012f28 <quorem+0xfc>
 8012ec6:	f8c8 4010 	str.w	r4, [r8, #16]
 8012eca:	4640      	mov	r0, r8
 8012ecc:	f001 f9f8 	bl	80142c0 <__mcmp>
 8012ed0:	2800      	cmp	r0, #0
 8012ed2:	db25      	blt.n	8012f20 <quorem+0xf4>
 8012ed4:	3501      	adds	r5, #1
 8012ed6:	4630      	mov	r0, r6
 8012ed8:	f04f 0c00 	mov.w	ip, #0
 8012edc:	f857 2b04 	ldr.w	r2, [r7], #4
 8012ee0:	f8d0 e000 	ldr.w	lr, [r0]
 8012ee4:	b293      	uxth	r3, r2
 8012ee6:	ebac 0303 	sub.w	r3, ip, r3
 8012eea:	0c12      	lsrs	r2, r2, #16
 8012eec:	fa13 f38e 	uxtah	r3, r3, lr
 8012ef0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012ef4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012efe:	45b9      	cmp	r9, r7
 8012f00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012f04:	f840 3b04 	str.w	r3, [r0], #4
 8012f08:	d2e8      	bcs.n	8012edc <quorem+0xb0>
 8012f0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012f0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012f12:	b92a      	cbnz	r2, 8012f20 <quorem+0xf4>
 8012f14:	3b04      	subs	r3, #4
 8012f16:	429e      	cmp	r6, r3
 8012f18:	461a      	mov	r2, r3
 8012f1a:	d30b      	bcc.n	8012f34 <quorem+0x108>
 8012f1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012f20:	4628      	mov	r0, r5
 8012f22:	b003      	add	sp, #12
 8012f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f28:	6812      	ldr	r2, [r2, #0]
 8012f2a:	3b04      	subs	r3, #4
 8012f2c:	2a00      	cmp	r2, #0
 8012f2e:	d1ca      	bne.n	8012ec6 <quorem+0x9a>
 8012f30:	3c01      	subs	r4, #1
 8012f32:	e7c5      	b.n	8012ec0 <quorem+0x94>
 8012f34:	6812      	ldr	r2, [r2, #0]
 8012f36:	3b04      	subs	r3, #4
 8012f38:	2a00      	cmp	r2, #0
 8012f3a:	d1ef      	bne.n	8012f1c <quorem+0xf0>
 8012f3c:	3c01      	subs	r4, #1
 8012f3e:	e7ea      	b.n	8012f16 <quorem+0xea>
 8012f40:	2000      	movs	r0, #0
 8012f42:	e7ee      	b.n	8012f22 <quorem+0xf6>
 8012f44:	0000      	movs	r0, r0
	...

08012f48 <_dtoa_r>:
 8012f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f4c:	ec57 6b10 	vmov	r6, r7, d0
 8012f50:	b097      	sub	sp, #92	; 0x5c
 8012f52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012f54:	9106      	str	r1, [sp, #24]
 8012f56:	4604      	mov	r4, r0
 8012f58:	920b      	str	r2, [sp, #44]	; 0x2c
 8012f5a:	9312      	str	r3, [sp, #72]	; 0x48
 8012f5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012f60:	e9cd 6700 	strd	r6, r7, [sp]
 8012f64:	b93d      	cbnz	r5, 8012f76 <_dtoa_r+0x2e>
 8012f66:	2010      	movs	r0, #16
 8012f68:	f7fe ff8c 	bl	8011e84 <malloc>
 8012f6c:	6260      	str	r0, [r4, #36]	; 0x24
 8012f6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012f72:	6005      	str	r5, [r0, #0]
 8012f74:	60c5      	str	r5, [r0, #12]
 8012f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f78:	6819      	ldr	r1, [r3, #0]
 8012f7a:	b151      	cbz	r1, 8012f92 <_dtoa_r+0x4a>
 8012f7c:	685a      	ldr	r2, [r3, #4]
 8012f7e:	604a      	str	r2, [r1, #4]
 8012f80:	2301      	movs	r3, #1
 8012f82:	4093      	lsls	r3, r2
 8012f84:	608b      	str	r3, [r1, #8]
 8012f86:	4620      	mov	r0, r4
 8012f88:	f000 ffb8 	bl	8013efc <_Bfree>
 8012f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f8e:	2200      	movs	r2, #0
 8012f90:	601a      	str	r2, [r3, #0]
 8012f92:	1e3b      	subs	r3, r7, #0
 8012f94:	bfbb      	ittet	lt
 8012f96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012f9a:	9301      	strlt	r3, [sp, #4]
 8012f9c:	2300      	movge	r3, #0
 8012f9e:	2201      	movlt	r2, #1
 8012fa0:	bfac      	ite	ge
 8012fa2:	f8c8 3000 	strge.w	r3, [r8]
 8012fa6:	f8c8 2000 	strlt.w	r2, [r8]
 8012faa:	4baf      	ldr	r3, [pc, #700]	; (8013268 <_dtoa_r+0x320>)
 8012fac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012fb0:	ea33 0308 	bics.w	r3, r3, r8
 8012fb4:	d114      	bne.n	8012fe0 <_dtoa_r+0x98>
 8012fb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012fb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8012fbc:	6013      	str	r3, [r2, #0]
 8012fbe:	9b00      	ldr	r3, [sp, #0]
 8012fc0:	b923      	cbnz	r3, 8012fcc <_dtoa_r+0x84>
 8012fc2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012fc6:	2800      	cmp	r0, #0
 8012fc8:	f000 8542 	beq.w	8013a50 <_dtoa_r+0xb08>
 8012fcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801327c <_dtoa_r+0x334>
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	f000 8544 	beq.w	8013a60 <_dtoa_r+0xb18>
 8012fd8:	f10b 0303 	add.w	r3, fp, #3
 8012fdc:	f000 bd3e 	b.w	8013a5c <_dtoa_r+0xb14>
 8012fe0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	4630      	mov	r0, r6
 8012fea:	4639      	mov	r1, r7
 8012fec:	f7ed fd7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ff0:	4681      	mov	r9, r0
 8012ff2:	b168      	cbz	r0, 8013010 <_dtoa_r+0xc8>
 8012ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	6013      	str	r3, [r2, #0]
 8012ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	f000 8524 	beq.w	8013a4a <_dtoa_r+0xb02>
 8013002:	4b9a      	ldr	r3, [pc, #616]	; (801326c <_dtoa_r+0x324>)
 8013004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013006:	f103 3bff 	add.w	fp, r3, #4294967295
 801300a:	6013      	str	r3, [r2, #0]
 801300c:	f000 bd28 	b.w	8013a60 <_dtoa_r+0xb18>
 8013010:	aa14      	add	r2, sp, #80	; 0x50
 8013012:	a915      	add	r1, sp, #84	; 0x54
 8013014:	ec47 6b10 	vmov	d0, r6, r7
 8013018:	4620      	mov	r0, r4
 801301a:	f001 f9c8 	bl	80143ae <__d2b>
 801301e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013022:	9004      	str	r0, [sp, #16]
 8013024:	2d00      	cmp	r5, #0
 8013026:	d07c      	beq.n	8013122 <_dtoa_r+0x1da>
 8013028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801302c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013030:	46b2      	mov	sl, r6
 8013032:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801303a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801303e:	2200      	movs	r2, #0
 8013040:	4b8b      	ldr	r3, [pc, #556]	; (8013270 <_dtoa_r+0x328>)
 8013042:	4650      	mov	r0, sl
 8013044:	4659      	mov	r1, fp
 8013046:	f7ed f92f 	bl	80002a8 <__aeabi_dsub>
 801304a:	a381      	add	r3, pc, #516	; (adr r3, 8013250 <_dtoa_r+0x308>)
 801304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013050:	f7ed fae2 	bl	8000618 <__aeabi_dmul>
 8013054:	a380      	add	r3, pc, #512	; (adr r3, 8013258 <_dtoa_r+0x310>)
 8013056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305a:	f7ed f927 	bl	80002ac <__adddf3>
 801305e:	4606      	mov	r6, r0
 8013060:	4628      	mov	r0, r5
 8013062:	460f      	mov	r7, r1
 8013064:	f7ed fa6e 	bl	8000544 <__aeabi_i2d>
 8013068:	a37d      	add	r3, pc, #500	; (adr r3, 8013260 <_dtoa_r+0x318>)
 801306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306e:	f7ed fad3 	bl	8000618 <__aeabi_dmul>
 8013072:	4602      	mov	r2, r0
 8013074:	460b      	mov	r3, r1
 8013076:	4630      	mov	r0, r6
 8013078:	4639      	mov	r1, r7
 801307a:	f7ed f917 	bl	80002ac <__adddf3>
 801307e:	4606      	mov	r6, r0
 8013080:	460f      	mov	r7, r1
 8013082:	f7ed fd79 	bl	8000b78 <__aeabi_d2iz>
 8013086:	2200      	movs	r2, #0
 8013088:	4682      	mov	sl, r0
 801308a:	2300      	movs	r3, #0
 801308c:	4630      	mov	r0, r6
 801308e:	4639      	mov	r1, r7
 8013090:	f7ed fd34 	bl	8000afc <__aeabi_dcmplt>
 8013094:	b148      	cbz	r0, 80130aa <_dtoa_r+0x162>
 8013096:	4650      	mov	r0, sl
 8013098:	f7ed fa54 	bl	8000544 <__aeabi_i2d>
 801309c:	4632      	mov	r2, r6
 801309e:	463b      	mov	r3, r7
 80130a0:	f7ed fd22 	bl	8000ae8 <__aeabi_dcmpeq>
 80130a4:	b908      	cbnz	r0, 80130aa <_dtoa_r+0x162>
 80130a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80130aa:	f1ba 0f16 	cmp.w	sl, #22
 80130ae:	d859      	bhi.n	8013164 <_dtoa_r+0x21c>
 80130b0:	4970      	ldr	r1, [pc, #448]	; (8013274 <_dtoa_r+0x32c>)
 80130b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80130b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130be:	f7ed fd3b 	bl	8000b38 <__aeabi_dcmpgt>
 80130c2:	2800      	cmp	r0, #0
 80130c4:	d050      	beq.n	8013168 <_dtoa_r+0x220>
 80130c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80130ca:	2300      	movs	r3, #0
 80130cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80130ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80130d0:	1b5d      	subs	r5, r3, r5
 80130d2:	f1b5 0801 	subs.w	r8, r5, #1
 80130d6:	bf49      	itett	mi
 80130d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80130dc:	2300      	movpl	r3, #0
 80130de:	9305      	strmi	r3, [sp, #20]
 80130e0:	f04f 0800 	movmi.w	r8, #0
 80130e4:	bf58      	it	pl
 80130e6:	9305      	strpl	r3, [sp, #20]
 80130e8:	f1ba 0f00 	cmp.w	sl, #0
 80130ec:	db3e      	blt.n	801316c <_dtoa_r+0x224>
 80130ee:	2300      	movs	r3, #0
 80130f0:	44d0      	add	r8, sl
 80130f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80130f6:	9307      	str	r3, [sp, #28]
 80130f8:	9b06      	ldr	r3, [sp, #24]
 80130fa:	2b09      	cmp	r3, #9
 80130fc:	f200 8090 	bhi.w	8013220 <_dtoa_r+0x2d8>
 8013100:	2b05      	cmp	r3, #5
 8013102:	bfc4      	itt	gt
 8013104:	3b04      	subgt	r3, #4
 8013106:	9306      	strgt	r3, [sp, #24]
 8013108:	9b06      	ldr	r3, [sp, #24]
 801310a:	f1a3 0302 	sub.w	r3, r3, #2
 801310e:	bfcc      	ite	gt
 8013110:	2500      	movgt	r5, #0
 8013112:	2501      	movle	r5, #1
 8013114:	2b03      	cmp	r3, #3
 8013116:	f200 808f 	bhi.w	8013238 <_dtoa_r+0x2f0>
 801311a:	e8df f003 	tbb	[pc, r3]
 801311e:	7f7d      	.short	0x7f7d
 8013120:	7131      	.short	0x7131
 8013122:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013126:	441d      	add	r5, r3
 8013128:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801312c:	2820      	cmp	r0, #32
 801312e:	dd13      	ble.n	8013158 <_dtoa_r+0x210>
 8013130:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013134:	9b00      	ldr	r3, [sp, #0]
 8013136:	fa08 f800 	lsl.w	r8, r8, r0
 801313a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801313e:	fa23 f000 	lsr.w	r0, r3, r0
 8013142:	ea48 0000 	orr.w	r0, r8, r0
 8013146:	f7ed f9ed 	bl	8000524 <__aeabi_ui2d>
 801314a:	2301      	movs	r3, #1
 801314c:	4682      	mov	sl, r0
 801314e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8013152:	3d01      	subs	r5, #1
 8013154:	9313      	str	r3, [sp, #76]	; 0x4c
 8013156:	e772      	b.n	801303e <_dtoa_r+0xf6>
 8013158:	9b00      	ldr	r3, [sp, #0]
 801315a:	f1c0 0020 	rsb	r0, r0, #32
 801315e:	fa03 f000 	lsl.w	r0, r3, r0
 8013162:	e7f0      	b.n	8013146 <_dtoa_r+0x1fe>
 8013164:	2301      	movs	r3, #1
 8013166:	e7b1      	b.n	80130cc <_dtoa_r+0x184>
 8013168:	900f      	str	r0, [sp, #60]	; 0x3c
 801316a:	e7b0      	b.n	80130ce <_dtoa_r+0x186>
 801316c:	9b05      	ldr	r3, [sp, #20]
 801316e:	eba3 030a 	sub.w	r3, r3, sl
 8013172:	9305      	str	r3, [sp, #20]
 8013174:	f1ca 0300 	rsb	r3, sl, #0
 8013178:	9307      	str	r3, [sp, #28]
 801317a:	2300      	movs	r3, #0
 801317c:	930e      	str	r3, [sp, #56]	; 0x38
 801317e:	e7bb      	b.n	80130f8 <_dtoa_r+0x1b0>
 8013180:	2301      	movs	r3, #1
 8013182:	930a      	str	r3, [sp, #40]	; 0x28
 8013184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013186:	2b00      	cmp	r3, #0
 8013188:	dd59      	ble.n	801323e <_dtoa_r+0x2f6>
 801318a:	9302      	str	r3, [sp, #8]
 801318c:	4699      	mov	r9, r3
 801318e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013190:	2200      	movs	r2, #0
 8013192:	6072      	str	r2, [r6, #4]
 8013194:	2204      	movs	r2, #4
 8013196:	f102 0014 	add.w	r0, r2, #20
 801319a:	4298      	cmp	r0, r3
 801319c:	6871      	ldr	r1, [r6, #4]
 801319e:	d953      	bls.n	8013248 <_dtoa_r+0x300>
 80131a0:	4620      	mov	r0, r4
 80131a2:	f000 fe77 	bl	8013e94 <_Balloc>
 80131a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80131a8:	6030      	str	r0, [r6, #0]
 80131aa:	f1b9 0f0e 	cmp.w	r9, #14
 80131ae:	f8d3 b000 	ldr.w	fp, [r3]
 80131b2:	f200 80e6 	bhi.w	8013382 <_dtoa_r+0x43a>
 80131b6:	2d00      	cmp	r5, #0
 80131b8:	f000 80e3 	beq.w	8013382 <_dtoa_r+0x43a>
 80131bc:	ed9d 7b00 	vldr	d7, [sp]
 80131c0:	f1ba 0f00 	cmp.w	sl, #0
 80131c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80131c8:	dd74      	ble.n	80132b4 <_dtoa_r+0x36c>
 80131ca:	4a2a      	ldr	r2, [pc, #168]	; (8013274 <_dtoa_r+0x32c>)
 80131cc:	f00a 030f 	and.w	r3, sl, #15
 80131d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80131d4:	ed93 7b00 	vldr	d7, [r3]
 80131d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80131dc:	06f0      	lsls	r0, r6, #27
 80131de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80131e2:	d565      	bpl.n	80132b0 <_dtoa_r+0x368>
 80131e4:	4b24      	ldr	r3, [pc, #144]	; (8013278 <_dtoa_r+0x330>)
 80131e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80131ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80131ee:	f7ed fb3d 	bl	800086c <__aeabi_ddiv>
 80131f2:	e9cd 0100 	strd	r0, r1, [sp]
 80131f6:	f006 060f 	and.w	r6, r6, #15
 80131fa:	2503      	movs	r5, #3
 80131fc:	4f1e      	ldr	r7, [pc, #120]	; (8013278 <_dtoa_r+0x330>)
 80131fe:	e04c      	b.n	801329a <_dtoa_r+0x352>
 8013200:	2301      	movs	r3, #1
 8013202:	930a      	str	r3, [sp, #40]	; 0x28
 8013204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013206:	4453      	add	r3, sl
 8013208:	f103 0901 	add.w	r9, r3, #1
 801320c:	9302      	str	r3, [sp, #8]
 801320e:	464b      	mov	r3, r9
 8013210:	2b01      	cmp	r3, #1
 8013212:	bfb8      	it	lt
 8013214:	2301      	movlt	r3, #1
 8013216:	e7ba      	b.n	801318e <_dtoa_r+0x246>
 8013218:	2300      	movs	r3, #0
 801321a:	e7b2      	b.n	8013182 <_dtoa_r+0x23a>
 801321c:	2300      	movs	r3, #0
 801321e:	e7f0      	b.n	8013202 <_dtoa_r+0x2ba>
 8013220:	2501      	movs	r5, #1
 8013222:	2300      	movs	r3, #0
 8013224:	9306      	str	r3, [sp, #24]
 8013226:	950a      	str	r5, [sp, #40]	; 0x28
 8013228:	f04f 33ff 	mov.w	r3, #4294967295
 801322c:	9302      	str	r3, [sp, #8]
 801322e:	4699      	mov	r9, r3
 8013230:	2200      	movs	r2, #0
 8013232:	2312      	movs	r3, #18
 8013234:	920b      	str	r2, [sp, #44]	; 0x2c
 8013236:	e7aa      	b.n	801318e <_dtoa_r+0x246>
 8013238:	2301      	movs	r3, #1
 801323a:	930a      	str	r3, [sp, #40]	; 0x28
 801323c:	e7f4      	b.n	8013228 <_dtoa_r+0x2e0>
 801323e:	2301      	movs	r3, #1
 8013240:	9302      	str	r3, [sp, #8]
 8013242:	4699      	mov	r9, r3
 8013244:	461a      	mov	r2, r3
 8013246:	e7f5      	b.n	8013234 <_dtoa_r+0x2ec>
 8013248:	3101      	adds	r1, #1
 801324a:	6071      	str	r1, [r6, #4]
 801324c:	0052      	lsls	r2, r2, #1
 801324e:	e7a2      	b.n	8013196 <_dtoa_r+0x24e>
 8013250:	636f4361 	.word	0x636f4361
 8013254:	3fd287a7 	.word	0x3fd287a7
 8013258:	8b60c8b3 	.word	0x8b60c8b3
 801325c:	3fc68a28 	.word	0x3fc68a28
 8013260:	509f79fb 	.word	0x509f79fb
 8013264:	3fd34413 	.word	0x3fd34413
 8013268:	7ff00000 	.word	0x7ff00000
 801326c:	0801fd16 	.word	0x0801fd16
 8013270:	3ff80000 	.word	0x3ff80000
 8013274:	0801fdd0 	.word	0x0801fdd0
 8013278:	0801fda8 	.word	0x0801fda8
 801327c:	0801fd42 	.word	0x0801fd42
 8013280:	07f1      	lsls	r1, r6, #31
 8013282:	d508      	bpl.n	8013296 <_dtoa_r+0x34e>
 8013284:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013288:	e9d7 2300 	ldrd	r2, r3, [r7]
 801328c:	f7ed f9c4 	bl	8000618 <__aeabi_dmul>
 8013290:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013294:	3501      	adds	r5, #1
 8013296:	1076      	asrs	r6, r6, #1
 8013298:	3708      	adds	r7, #8
 801329a:	2e00      	cmp	r6, #0
 801329c:	d1f0      	bne.n	8013280 <_dtoa_r+0x338>
 801329e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80132a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132a6:	f7ed fae1 	bl	800086c <__aeabi_ddiv>
 80132aa:	e9cd 0100 	strd	r0, r1, [sp]
 80132ae:	e01a      	b.n	80132e6 <_dtoa_r+0x39e>
 80132b0:	2502      	movs	r5, #2
 80132b2:	e7a3      	b.n	80131fc <_dtoa_r+0x2b4>
 80132b4:	f000 80a0 	beq.w	80133f8 <_dtoa_r+0x4b0>
 80132b8:	f1ca 0600 	rsb	r6, sl, #0
 80132bc:	4b9f      	ldr	r3, [pc, #636]	; (801353c <_dtoa_r+0x5f4>)
 80132be:	4fa0      	ldr	r7, [pc, #640]	; (8013540 <_dtoa_r+0x5f8>)
 80132c0:	f006 020f 	and.w	r2, r6, #15
 80132c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80132d0:	f7ed f9a2 	bl	8000618 <__aeabi_dmul>
 80132d4:	e9cd 0100 	strd	r0, r1, [sp]
 80132d8:	1136      	asrs	r6, r6, #4
 80132da:	2300      	movs	r3, #0
 80132dc:	2502      	movs	r5, #2
 80132de:	2e00      	cmp	r6, #0
 80132e0:	d17f      	bne.n	80133e2 <_dtoa_r+0x49a>
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d1e1      	bne.n	80132aa <_dtoa_r+0x362>
 80132e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	f000 8087 	beq.w	80133fc <_dtoa_r+0x4b4>
 80132ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80132f2:	2200      	movs	r2, #0
 80132f4:	4b93      	ldr	r3, [pc, #588]	; (8013544 <_dtoa_r+0x5fc>)
 80132f6:	4630      	mov	r0, r6
 80132f8:	4639      	mov	r1, r7
 80132fa:	f7ed fbff 	bl	8000afc <__aeabi_dcmplt>
 80132fe:	2800      	cmp	r0, #0
 8013300:	d07c      	beq.n	80133fc <_dtoa_r+0x4b4>
 8013302:	f1b9 0f00 	cmp.w	r9, #0
 8013306:	d079      	beq.n	80133fc <_dtoa_r+0x4b4>
 8013308:	9b02      	ldr	r3, [sp, #8]
 801330a:	2b00      	cmp	r3, #0
 801330c:	dd35      	ble.n	801337a <_dtoa_r+0x432>
 801330e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013312:	9308      	str	r3, [sp, #32]
 8013314:	4639      	mov	r1, r7
 8013316:	2200      	movs	r2, #0
 8013318:	4b8b      	ldr	r3, [pc, #556]	; (8013548 <_dtoa_r+0x600>)
 801331a:	4630      	mov	r0, r6
 801331c:	f7ed f97c 	bl	8000618 <__aeabi_dmul>
 8013320:	e9cd 0100 	strd	r0, r1, [sp]
 8013324:	9f02      	ldr	r7, [sp, #8]
 8013326:	3501      	adds	r5, #1
 8013328:	4628      	mov	r0, r5
 801332a:	f7ed f90b 	bl	8000544 <__aeabi_i2d>
 801332e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013332:	f7ed f971 	bl	8000618 <__aeabi_dmul>
 8013336:	2200      	movs	r2, #0
 8013338:	4b84      	ldr	r3, [pc, #528]	; (801354c <_dtoa_r+0x604>)
 801333a:	f7ec ffb7 	bl	80002ac <__adddf3>
 801333e:	4605      	mov	r5, r0
 8013340:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013344:	2f00      	cmp	r7, #0
 8013346:	d15d      	bne.n	8013404 <_dtoa_r+0x4bc>
 8013348:	2200      	movs	r2, #0
 801334a:	4b81      	ldr	r3, [pc, #516]	; (8013550 <_dtoa_r+0x608>)
 801334c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013350:	f7ec ffaa 	bl	80002a8 <__aeabi_dsub>
 8013354:	462a      	mov	r2, r5
 8013356:	4633      	mov	r3, r6
 8013358:	e9cd 0100 	strd	r0, r1, [sp]
 801335c:	f7ed fbec 	bl	8000b38 <__aeabi_dcmpgt>
 8013360:	2800      	cmp	r0, #0
 8013362:	f040 8288 	bne.w	8013876 <_dtoa_r+0x92e>
 8013366:	462a      	mov	r2, r5
 8013368:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801336c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013370:	f7ed fbc4 	bl	8000afc <__aeabi_dcmplt>
 8013374:	2800      	cmp	r0, #0
 8013376:	f040 827c 	bne.w	8013872 <_dtoa_r+0x92a>
 801337a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801337e:	e9cd 2300 	strd	r2, r3, [sp]
 8013382:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013384:	2b00      	cmp	r3, #0
 8013386:	f2c0 8150 	blt.w	801362a <_dtoa_r+0x6e2>
 801338a:	f1ba 0f0e 	cmp.w	sl, #14
 801338e:	f300 814c 	bgt.w	801362a <_dtoa_r+0x6e2>
 8013392:	4b6a      	ldr	r3, [pc, #424]	; (801353c <_dtoa_r+0x5f4>)
 8013394:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013398:	ed93 7b00 	vldr	d7, [r3]
 801339c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801339e:	2b00      	cmp	r3, #0
 80133a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80133a4:	f280 80d8 	bge.w	8013558 <_dtoa_r+0x610>
 80133a8:	f1b9 0f00 	cmp.w	r9, #0
 80133ac:	f300 80d4 	bgt.w	8013558 <_dtoa_r+0x610>
 80133b0:	f040 825e 	bne.w	8013870 <_dtoa_r+0x928>
 80133b4:	2200      	movs	r2, #0
 80133b6:	4b66      	ldr	r3, [pc, #408]	; (8013550 <_dtoa_r+0x608>)
 80133b8:	ec51 0b17 	vmov	r0, r1, d7
 80133bc:	f7ed f92c 	bl	8000618 <__aeabi_dmul>
 80133c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80133c4:	f7ed fbae 	bl	8000b24 <__aeabi_dcmpge>
 80133c8:	464f      	mov	r7, r9
 80133ca:	464e      	mov	r6, r9
 80133cc:	2800      	cmp	r0, #0
 80133ce:	f040 8234 	bne.w	801383a <_dtoa_r+0x8f2>
 80133d2:	2331      	movs	r3, #49	; 0x31
 80133d4:	f10b 0501 	add.w	r5, fp, #1
 80133d8:	f88b 3000 	strb.w	r3, [fp]
 80133dc:	f10a 0a01 	add.w	sl, sl, #1
 80133e0:	e22f      	b.n	8013842 <_dtoa_r+0x8fa>
 80133e2:	07f2      	lsls	r2, r6, #31
 80133e4:	d505      	bpl.n	80133f2 <_dtoa_r+0x4aa>
 80133e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133ea:	f7ed f915 	bl	8000618 <__aeabi_dmul>
 80133ee:	3501      	adds	r5, #1
 80133f0:	2301      	movs	r3, #1
 80133f2:	1076      	asrs	r6, r6, #1
 80133f4:	3708      	adds	r7, #8
 80133f6:	e772      	b.n	80132de <_dtoa_r+0x396>
 80133f8:	2502      	movs	r5, #2
 80133fa:	e774      	b.n	80132e6 <_dtoa_r+0x39e>
 80133fc:	f8cd a020 	str.w	sl, [sp, #32]
 8013400:	464f      	mov	r7, r9
 8013402:	e791      	b.n	8013328 <_dtoa_r+0x3e0>
 8013404:	4b4d      	ldr	r3, [pc, #308]	; (801353c <_dtoa_r+0x5f4>)
 8013406:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801340a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801340e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013410:	2b00      	cmp	r3, #0
 8013412:	d047      	beq.n	80134a4 <_dtoa_r+0x55c>
 8013414:	4602      	mov	r2, r0
 8013416:	460b      	mov	r3, r1
 8013418:	2000      	movs	r0, #0
 801341a:	494e      	ldr	r1, [pc, #312]	; (8013554 <_dtoa_r+0x60c>)
 801341c:	f7ed fa26 	bl	800086c <__aeabi_ddiv>
 8013420:	462a      	mov	r2, r5
 8013422:	4633      	mov	r3, r6
 8013424:	f7ec ff40 	bl	80002a8 <__aeabi_dsub>
 8013428:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801342c:	465d      	mov	r5, fp
 801342e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013432:	f7ed fba1 	bl	8000b78 <__aeabi_d2iz>
 8013436:	4606      	mov	r6, r0
 8013438:	f7ed f884 	bl	8000544 <__aeabi_i2d>
 801343c:	4602      	mov	r2, r0
 801343e:	460b      	mov	r3, r1
 8013440:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013444:	f7ec ff30 	bl	80002a8 <__aeabi_dsub>
 8013448:	3630      	adds	r6, #48	; 0x30
 801344a:	f805 6b01 	strb.w	r6, [r5], #1
 801344e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013452:	e9cd 0100 	strd	r0, r1, [sp]
 8013456:	f7ed fb51 	bl	8000afc <__aeabi_dcmplt>
 801345a:	2800      	cmp	r0, #0
 801345c:	d163      	bne.n	8013526 <_dtoa_r+0x5de>
 801345e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013462:	2000      	movs	r0, #0
 8013464:	4937      	ldr	r1, [pc, #220]	; (8013544 <_dtoa_r+0x5fc>)
 8013466:	f7ec ff1f 	bl	80002a8 <__aeabi_dsub>
 801346a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801346e:	f7ed fb45 	bl	8000afc <__aeabi_dcmplt>
 8013472:	2800      	cmp	r0, #0
 8013474:	f040 80b7 	bne.w	80135e6 <_dtoa_r+0x69e>
 8013478:	eba5 030b 	sub.w	r3, r5, fp
 801347c:	429f      	cmp	r7, r3
 801347e:	f77f af7c 	ble.w	801337a <_dtoa_r+0x432>
 8013482:	2200      	movs	r2, #0
 8013484:	4b30      	ldr	r3, [pc, #192]	; (8013548 <_dtoa_r+0x600>)
 8013486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801348a:	f7ed f8c5 	bl	8000618 <__aeabi_dmul>
 801348e:	2200      	movs	r2, #0
 8013490:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013494:	4b2c      	ldr	r3, [pc, #176]	; (8013548 <_dtoa_r+0x600>)
 8013496:	e9dd 0100 	ldrd	r0, r1, [sp]
 801349a:	f7ed f8bd 	bl	8000618 <__aeabi_dmul>
 801349e:	e9cd 0100 	strd	r0, r1, [sp]
 80134a2:	e7c4      	b.n	801342e <_dtoa_r+0x4e6>
 80134a4:	462a      	mov	r2, r5
 80134a6:	4633      	mov	r3, r6
 80134a8:	f7ed f8b6 	bl	8000618 <__aeabi_dmul>
 80134ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80134b0:	eb0b 0507 	add.w	r5, fp, r7
 80134b4:	465e      	mov	r6, fp
 80134b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80134ba:	f7ed fb5d 	bl	8000b78 <__aeabi_d2iz>
 80134be:	4607      	mov	r7, r0
 80134c0:	f7ed f840 	bl	8000544 <__aeabi_i2d>
 80134c4:	3730      	adds	r7, #48	; 0x30
 80134c6:	4602      	mov	r2, r0
 80134c8:	460b      	mov	r3, r1
 80134ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80134ce:	f7ec feeb 	bl	80002a8 <__aeabi_dsub>
 80134d2:	f806 7b01 	strb.w	r7, [r6], #1
 80134d6:	42ae      	cmp	r6, r5
 80134d8:	e9cd 0100 	strd	r0, r1, [sp]
 80134dc:	f04f 0200 	mov.w	r2, #0
 80134e0:	d126      	bne.n	8013530 <_dtoa_r+0x5e8>
 80134e2:	4b1c      	ldr	r3, [pc, #112]	; (8013554 <_dtoa_r+0x60c>)
 80134e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80134e8:	f7ec fee0 	bl	80002ac <__adddf3>
 80134ec:	4602      	mov	r2, r0
 80134ee:	460b      	mov	r3, r1
 80134f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80134f4:	f7ed fb20 	bl	8000b38 <__aeabi_dcmpgt>
 80134f8:	2800      	cmp	r0, #0
 80134fa:	d174      	bne.n	80135e6 <_dtoa_r+0x69e>
 80134fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013500:	2000      	movs	r0, #0
 8013502:	4914      	ldr	r1, [pc, #80]	; (8013554 <_dtoa_r+0x60c>)
 8013504:	f7ec fed0 	bl	80002a8 <__aeabi_dsub>
 8013508:	4602      	mov	r2, r0
 801350a:	460b      	mov	r3, r1
 801350c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013510:	f7ed faf4 	bl	8000afc <__aeabi_dcmplt>
 8013514:	2800      	cmp	r0, #0
 8013516:	f43f af30 	beq.w	801337a <_dtoa_r+0x432>
 801351a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801351e:	2b30      	cmp	r3, #48	; 0x30
 8013520:	f105 32ff 	add.w	r2, r5, #4294967295
 8013524:	d002      	beq.n	801352c <_dtoa_r+0x5e4>
 8013526:	f8dd a020 	ldr.w	sl, [sp, #32]
 801352a:	e04a      	b.n	80135c2 <_dtoa_r+0x67a>
 801352c:	4615      	mov	r5, r2
 801352e:	e7f4      	b.n	801351a <_dtoa_r+0x5d2>
 8013530:	4b05      	ldr	r3, [pc, #20]	; (8013548 <_dtoa_r+0x600>)
 8013532:	f7ed f871 	bl	8000618 <__aeabi_dmul>
 8013536:	e9cd 0100 	strd	r0, r1, [sp]
 801353a:	e7bc      	b.n	80134b6 <_dtoa_r+0x56e>
 801353c:	0801fdd0 	.word	0x0801fdd0
 8013540:	0801fda8 	.word	0x0801fda8
 8013544:	3ff00000 	.word	0x3ff00000
 8013548:	40240000 	.word	0x40240000
 801354c:	401c0000 	.word	0x401c0000
 8013550:	40140000 	.word	0x40140000
 8013554:	3fe00000 	.word	0x3fe00000
 8013558:	e9dd 6700 	ldrd	r6, r7, [sp]
 801355c:	465d      	mov	r5, fp
 801355e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013562:	4630      	mov	r0, r6
 8013564:	4639      	mov	r1, r7
 8013566:	f7ed f981 	bl	800086c <__aeabi_ddiv>
 801356a:	f7ed fb05 	bl	8000b78 <__aeabi_d2iz>
 801356e:	4680      	mov	r8, r0
 8013570:	f7ec ffe8 	bl	8000544 <__aeabi_i2d>
 8013574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013578:	f7ed f84e 	bl	8000618 <__aeabi_dmul>
 801357c:	4602      	mov	r2, r0
 801357e:	460b      	mov	r3, r1
 8013580:	4630      	mov	r0, r6
 8013582:	4639      	mov	r1, r7
 8013584:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8013588:	f7ec fe8e 	bl	80002a8 <__aeabi_dsub>
 801358c:	f805 6b01 	strb.w	r6, [r5], #1
 8013590:	eba5 060b 	sub.w	r6, r5, fp
 8013594:	45b1      	cmp	r9, r6
 8013596:	4602      	mov	r2, r0
 8013598:	460b      	mov	r3, r1
 801359a:	d139      	bne.n	8013610 <_dtoa_r+0x6c8>
 801359c:	f7ec fe86 	bl	80002ac <__adddf3>
 80135a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80135a4:	4606      	mov	r6, r0
 80135a6:	460f      	mov	r7, r1
 80135a8:	f7ed fac6 	bl	8000b38 <__aeabi_dcmpgt>
 80135ac:	b9c8      	cbnz	r0, 80135e2 <_dtoa_r+0x69a>
 80135ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80135b2:	4630      	mov	r0, r6
 80135b4:	4639      	mov	r1, r7
 80135b6:	f7ed fa97 	bl	8000ae8 <__aeabi_dcmpeq>
 80135ba:	b110      	cbz	r0, 80135c2 <_dtoa_r+0x67a>
 80135bc:	f018 0f01 	tst.w	r8, #1
 80135c0:	d10f      	bne.n	80135e2 <_dtoa_r+0x69a>
 80135c2:	9904      	ldr	r1, [sp, #16]
 80135c4:	4620      	mov	r0, r4
 80135c6:	f000 fc99 	bl	8013efc <_Bfree>
 80135ca:	2300      	movs	r3, #0
 80135cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80135ce:	702b      	strb	r3, [r5, #0]
 80135d0:	f10a 0301 	add.w	r3, sl, #1
 80135d4:	6013      	str	r3, [r2, #0]
 80135d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135d8:	2b00      	cmp	r3, #0
 80135da:	f000 8241 	beq.w	8013a60 <_dtoa_r+0xb18>
 80135de:	601d      	str	r5, [r3, #0]
 80135e0:	e23e      	b.n	8013a60 <_dtoa_r+0xb18>
 80135e2:	f8cd a020 	str.w	sl, [sp, #32]
 80135e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80135ea:	2a39      	cmp	r2, #57	; 0x39
 80135ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80135f0:	d108      	bne.n	8013604 <_dtoa_r+0x6bc>
 80135f2:	459b      	cmp	fp, r3
 80135f4:	d10a      	bne.n	801360c <_dtoa_r+0x6c4>
 80135f6:	9b08      	ldr	r3, [sp, #32]
 80135f8:	3301      	adds	r3, #1
 80135fa:	9308      	str	r3, [sp, #32]
 80135fc:	2330      	movs	r3, #48	; 0x30
 80135fe:	f88b 3000 	strb.w	r3, [fp]
 8013602:	465b      	mov	r3, fp
 8013604:	781a      	ldrb	r2, [r3, #0]
 8013606:	3201      	adds	r2, #1
 8013608:	701a      	strb	r2, [r3, #0]
 801360a:	e78c      	b.n	8013526 <_dtoa_r+0x5de>
 801360c:	461d      	mov	r5, r3
 801360e:	e7ea      	b.n	80135e6 <_dtoa_r+0x69e>
 8013610:	2200      	movs	r2, #0
 8013612:	4b9b      	ldr	r3, [pc, #620]	; (8013880 <_dtoa_r+0x938>)
 8013614:	f7ed f800 	bl	8000618 <__aeabi_dmul>
 8013618:	2200      	movs	r2, #0
 801361a:	2300      	movs	r3, #0
 801361c:	4606      	mov	r6, r0
 801361e:	460f      	mov	r7, r1
 8013620:	f7ed fa62 	bl	8000ae8 <__aeabi_dcmpeq>
 8013624:	2800      	cmp	r0, #0
 8013626:	d09a      	beq.n	801355e <_dtoa_r+0x616>
 8013628:	e7cb      	b.n	80135c2 <_dtoa_r+0x67a>
 801362a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801362c:	2a00      	cmp	r2, #0
 801362e:	f000 808b 	beq.w	8013748 <_dtoa_r+0x800>
 8013632:	9a06      	ldr	r2, [sp, #24]
 8013634:	2a01      	cmp	r2, #1
 8013636:	dc6e      	bgt.n	8013716 <_dtoa_r+0x7ce>
 8013638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801363a:	2a00      	cmp	r2, #0
 801363c:	d067      	beq.n	801370e <_dtoa_r+0x7c6>
 801363e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013642:	9f07      	ldr	r7, [sp, #28]
 8013644:	9d05      	ldr	r5, [sp, #20]
 8013646:	9a05      	ldr	r2, [sp, #20]
 8013648:	2101      	movs	r1, #1
 801364a:	441a      	add	r2, r3
 801364c:	4620      	mov	r0, r4
 801364e:	9205      	str	r2, [sp, #20]
 8013650:	4498      	add	r8, r3
 8013652:	f000 fcf3 	bl	801403c <__i2b>
 8013656:	4606      	mov	r6, r0
 8013658:	2d00      	cmp	r5, #0
 801365a:	dd0c      	ble.n	8013676 <_dtoa_r+0x72e>
 801365c:	f1b8 0f00 	cmp.w	r8, #0
 8013660:	dd09      	ble.n	8013676 <_dtoa_r+0x72e>
 8013662:	4545      	cmp	r5, r8
 8013664:	9a05      	ldr	r2, [sp, #20]
 8013666:	462b      	mov	r3, r5
 8013668:	bfa8      	it	ge
 801366a:	4643      	movge	r3, r8
 801366c:	1ad2      	subs	r2, r2, r3
 801366e:	9205      	str	r2, [sp, #20]
 8013670:	1aed      	subs	r5, r5, r3
 8013672:	eba8 0803 	sub.w	r8, r8, r3
 8013676:	9b07      	ldr	r3, [sp, #28]
 8013678:	b1eb      	cbz	r3, 80136b6 <_dtoa_r+0x76e>
 801367a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801367c:	2b00      	cmp	r3, #0
 801367e:	d067      	beq.n	8013750 <_dtoa_r+0x808>
 8013680:	b18f      	cbz	r7, 80136a6 <_dtoa_r+0x75e>
 8013682:	4631      	mov	r1, r6
 8013684:	463a      	mov	r2, r7
 8013686:	4620      	mov	r0, r4
 8013688:	f000 fd78 	bl	801417c <__pow5mult>
 801368c:	9a04      	ldr	r2, [sp, #16]
 801368e:	4601      	mov	r1, r0
 8013690:	4606      	mov	r6, r0
 8013692:	4620      	mov	r0, r4
 8013694:	f000 fcdb 	bl	801404e <__multiply>
 8013698:	9904      	ldr	r1, [sp, #16]
 801369a:	9008      	str	r0, [sp, #32]
 801369c:	4620      	mov	r0, r4
 801369e:	f000 fc2d 	bl	8013efc <_Bfree>
 80136a2:	9b08      	ldr	r3, [sp, #32]
 80136a4:	9304      	str	r3, [sp, #16]
 80136a6:	9b07      	ldr	r3, [sp, #28]
 80136a8:	1bda      	subs	r2, r3, r7
 80136aa:	d004      	beq.n	80136b6 <_dtoa_r+0x76e>
 80136ac:	9904      	ldr	r1, [sp, #16]
 80136ae:	4620      	mov	r0, r4
 80136b0:	f000 fd64 	bl	801417c <__pow5mult>
 80136b4:	9004      	str	r0, [sp, #16]
 80136b6:	2101      	movs	r1, #1
 80136b8:	4620      	mov	r0, r4
 80136ba:	f000 fcbf 	bl	801403c <__i2b>
 80136be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136c0:	4607      	mov	r7, r0
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	f000 81d0 	beq.w	8013a68 <_dtoa_r+0xb20>
 80136c8:	461a      	mov	r2, r3
 80136ca:	4601      	mov	r1, r0
 80136cc:	4620      	mov	r0, r4
 80136ce:	f000 fd55 	bl	801417c <__pow5mult>
 80136d2:	9b06      	ldr	r3, [sp, #24]
 80136d4:	2b01      	cmp	r3, #1
 80136d6:	4607      	mov	r7, r0
 80136d8:	dc40      	bgt.n	801375c <_dtoa_r+0x814>
 80136da:	9b00      	ldr	r3, [sp, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d139      	bne.n	8013754 <_dtoa_r+0x80c>
 80136e0:	9b01      	ldr	r3, [sp, #4]
 80136e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d136      	bne.n	8013758 <_dtoa_r+0x810>
 80136ea:	9b01      	ldr	r3, [sp, #4]
 80136ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136f0:	0d1b      	lsrs	r3, r3, #20
 80136f2:	051b      	lsls	r3, r3, #20
 80136f4:	b12b      	cbz	r3, 8013702 <_dtoa_r+0x7ba>
 80136f6:	9b05      	ldr	r3, [sp, #20]
 80136f8:	3301      	adds	r3, #1
 80136fa:	9305      	str	r3, [sp, #20]
 80136fc:	f108 0801 	add.w	r8, r8, #1
 8013700:	2301      	movs	r3, #1
 8013702:	9307      	str	r3, [sp, #28]
 8013704:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013706:	2b00      	cmp	r3, #0
 8013708:	d12a      	bne.n	8013760 <_dtoa_r+0x818>
 801370a:	2001      	movs	r0, #1
 801370c:	e030      	b.n	8013770 <_dtoa_r+0x828>
 801370e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013710:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013714:	e795      	b.n	8013642 <_dtoa_r+0x6fa>
 8013716:	9b07      	ldr	r3, [sp, #28]
 8013718:	f109 37ff 	add.w	r7, r9, #4294967295
 801371c:	42bb      	cmp	r3, r7
 801371e:	bfbf      	itttt	lt
 8013720:	9b07      	ldrlt	r3, [sp, #28]
 8013722:	9707      	strlt	r7, [sp, #28]
 8013724:	1afa      	sublt	r2, r7, r3
 8013726:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013728:	bfbb      	ittet	lt
 801372a:	189b      	addlt	r3, r3, r2
 801372c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801372e:	1bdf      	subge	r7, r3, r7
 8013730:	2700      	movlt	r7, #0
 8013732:	f1b9 0f00 	cmp.w	r9, #0
 8013736:	bfb5      	itete	lt
 8013738:	9b05      	ldrlt	r3, [sp, #20]
 801373a:	9d05      	ldrge	r5, [sp, #20]
 801373c:	eba3 0509 	sublt.w	r5, r3, r9
 8013740:	464b      	movge	r3, r9
 8013742:	bfb8      	it	lt
 8013744:	2300      	movlt	r3, #0
 8013746:	e77e      	b.n	8013646 <_dtoa_r+0x6fe>
 8013748:	9f07      	ldr	r7, [sp, #28]
 801374a:	9d05      	ldr	r5, [sp, #20]
 801374c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801374e:	e783      	b.n	8013658 <_dtoa_r+0x710>
 8013750:	9a07      	ldr	r2, [sp, #28]
 8013752:	e7ab      	b.n	80136ac <_dtoa_r+0x764>
 8013754:	2300      	movs	r3, #0
 8013756:	e7d4      	b.n	8013702 <_dtoa_r+0x7ba>
 8013758:	9b00      	ldr	r3, [sp, #0]
 801375a:	e7d2      	b.n	8013702 <_dtoa_r+0x7ba>
 801375c:	2300      	movs	r3, #0
 801375e:	9307      	str	r3, [sp, #28]
 8013760:	693b      	ldr	r3, [r7, #16]
 8013762:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013766:	6918      	ldr	r0, [r3, #16]
 8013768:	f000 fc1a 	bl	8013fa0 <__hi0bits>
 801376c:	f1c0 0020 	rsb	r0, r0, #32
 8013770:	4440      	add	r0, r8
 8013772:	f010 001f 	ands.w	r0, r0, #31
 8013776:	d047      	beq.n	8013808 <_dtoa_r+0x8c0>
 8013778:	f1c0 0320 	rsb	r3, r0, #32
 801377c:	2b04      	cmp	r3, #4
 801377e:	dd3b      	ble.n	80137f8 <_dtoa_r+0x8b0>
 8013780:	9b05      	ldr	r3, [sp, #20]
 8013782:	f1c0 001c 	rsb	r0, r0, #28
 8013786:	4403      	add	r3, r0
 8013788:	9305      	str	r3, [sp, #20]
 801378a:	4405      	add	r5, r0
 801378c:	4480      	add	r8, r0
 801378e:	9b05      	ldr	r3, [sp, #20]
 8013790:	2b00      	cmp	r3, #0
 8013792:	dd05      	ble.n	80137a0 <_dtoa_r+0x858>
 8013794:	461a      	mov	r2, r3
 8013796:	9904      	ldr	r1, [sp, #16]
 8013798:	4620      	mov	r0, r4
 801379a:	f000 fd3d 	bl	8014218 <__lshift>
 801379e:	9004      	str	r0, [sp, #16]
 80137a0:	f1b8 0f00 	cmp.w	r8, #0
 80137a4:	dd05      	ble.n	80137b2 <_dtoa_r+0x86a>
 80137a6:	4639      	mov	r1, r7
 80137a8:	4642      	mov	r2, r8
 80137aa:	4620      	mov	r0, r4
 80137ac:	f000 fd34 	bl	8014218 <__lshift>
 80137b0:	4607      	mov	r7, r0
 80137b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137b4:	b353      	cbz	r3, 801380c <_dtoa_r+0x8c4>
 80137b6:	4639      	mov	r1, r7
 80137b8:	9804      	ldr	r0, [sp, #16]
 80137ba:	f000 fd81 	bl	80142c0 <__mcmp>
 80137be:	2800      	cmp	r0, #0
 80137c0:	da24      	bge.n	801380c <_dtoa_r+0x8c4>
 80137c2:	2300      	movs	r3, #0
 80137c4:	220a      	movs	r2, #10
 80137c6:	9904      	ldr	r1, [sp, #16]
 80137c8:	4620      	mov	r0, r4
 80137ca:	f000 fbae 	bl	8013f2a <__multadd>
 80137ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137d0:	9004      	str	r0, [sp, #16]
 80137d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	f000 814d 	beq.w	8013a76 <_dtoa_r+0xb2e>
 80137dc:	2300      	movs	r3, #0
 80137de:	4631      	mov	r1, r6
 80137e0:	220a      	movs	r2, #10
 80137e2:	4620      	mov	r0, r4
 80137e4:	f000 fba1 	bl	8013f2a <__multadd>
 80137e8:	9b02      	ldr	r3, [sp, #8]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	4606      	mov	r6, r0
 80137ee:	dc4f      	bgt.n	8013890 <_dtoa_r+0x948>
 80137f0:	9b06      	ldr	r3, [sp, #24]
 80137f2:	2b02      	cmp	r3, #2
 80137f4:	dd4c      	ble.n	8013890 <_dtoa_r+0x948>
 80137f6:	e011      	b.n	801381c <_dtoa_r+0x8d4>
 80137f8:	d0c9      	beq.n	801378e <_dtoa_r+0x846>
 80137fa:	9a05      	ldr	r2, [sp, #20]
 80137fc:	331c      	adds	r3, #28
 80137fe:	441a      	add	r2, r3
 8013800:	9205      	str	r2, [sp, #20]
 8013802:	441d      	add	r5, r3
 8013804:	4498      	add	r8, r3
 8013806:	e7c2      	b.n	801378e <_dtoa_r+0x846>
 8013808:	4603      	mov	r3, r0
 801380a:	e7f6      	b.n	80137fa <_dtoa_r+0x8b2>
 801380c:	f1b9 0f00 	cmp.w	r9, #0
 8013810:	dc38      	bgt.n	8013884 <_dtoa_r+0x93c>
 8013812:	9b06      	ldr	r3, [sp, #24]
 8013814:	2b02      	cmp	r3, #2
 8013816:	dd35      	ble.n	8013884 <_dtoa_r+0x93c>
 8013818:	f8cd 9008 	str.w	r9, [sp, #8]
 801381c:	9b02      	ldr	r3, [sp, #8]
 801381e:	b963      	cbnz	r3, 801383a <_dtoa_r+0x8f2>
 8013820:	4639      	mov	r1, r7
 8013822:	2205      	movs	r2, #5
 8013824:	4620      	mov	r0, r4
 8013826:	f000 fb80 	bl	8013f2a <__multadd>
 801382a:	4601      	mov	r1, r0
 801382c:	4607      	mov	r7, r0
 801382e:	9804      	ldr	r0, [sp, #16]
 8013830:	f000 fd46 	bl	80142c0 <__mcmp>
 8013834:	2800      	cmp	r0, #0
 8013836:	f73f adcc 	bgt.w	80133d2 <_dtoa_r+0x48a>
 801383a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801383c:	465d      	mov	r5, fp
 801383e:	ea6f 0a03 	mvn.w	sl, r3
 8013842:	f04f 0900 	mov.w	r9, #0
 8013846:	4639      	mov	r1, r7
 8013848:	4620      	mov	r0, r4
 801384a:	f000 fb57 	bl	8013efc <_Bfree>
 801384e:	2e00      	cmp	r6, #0
 8013850:	f43f aeb7 	beq.w	80135c2 <_dtoa_r+0x67a>
 8013854:	f1b9 0f00 	cmp.w	r9, #0
 8013858:	d005      	beq.n	8013866 <_dtoa_r+0x91e>
 801385a:	45b1      	cmp	r9, r6
 801385c:	d003      	beq.n	8013866 <_dtoa_r+0x91e>
 801385e:	4649      	mov	r1, r9
 8013860:	4620      	mov	r0, r4
 8013862:	f000 fb4b 	bl	8013efc <_Bfree>
 8013866:	4631      	mov	r1, r6
 8013868:	4620      	mov	r0, r4
 801386a:	f000 fb47 	bl	8013efc <_Bfree>
 801386e:	e6a8      	b.n	80135c2 <_dtoa_r+0x67a>
 8013870:	2700      	movs	r7, #0
 8013872:	463e      	mov	r6, r7
 8013874:	e7e1      	b.n	801383a <_dtoa_r+0x8f2>
 8013876:	f8dd a020 	ldr.w	sl, [sp, #32]
 801387a:	463e      	mov	r6, r7
 801387c:	e5a9      	b.n	80133d2 <_dtoa_r+0x48a>
 801387e:	bf00      	nop
 8013880:	40240000 	.word	0x40240000
 8013884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013886:	f8cd 9008 	str.w	r9, [sp, #8]
 801388a:	2b00      	cmp	r3, #0
 801388c:	f000 80fa 	beq.w	8013a84 <_dtoa_r+0xb3c>
 8013890:	2d00      	cmp	r5, #0
 8013892:	dd05      	ble.n	80138a0 <_dtoa_r+0x958>
 8013894:	4631      	mov	r1, r6
 8013896:	462a      	mov	r2, r5
 8013898:	4620      	mov	r0, r4
 801389a:	f000 fcbd 	bl	8014218 <__lshift>
 801389e:	4606      	mov	r6, r0
 80138a0:	9b07      	ldr	r3, [sp, #28]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d04c      	beq.n	8013940 <_dtoa_r+0x9f8>
 80138a6:	6871      	ldr	r1, [r6, #4]
 80138a8:	4620      	mov	r0, r4
 80138aa:	f000 faf3 	bl	8013e94 <_Balloc>
 80138ae:	6932      	ldr	r2, [r6, #16]
 80138b0:	3202      	adds	r2, #2
 80138b2:	4605      	mov	r5, r0
 80138b4:	0092      	lsls	r2, r2, #2
 80138b6:	f106 010c 	add.w	r1, r6, #12
 80138ba:	300c      	adds	r0, #12
 80138bc:	f7fe faf2 	bl	8011ea4 <memcpy>
 80138c0:	2201      	movs	r2, #1
 80138c2:	4629      	mov	r1, r5
 80138c4:	4620      	mov	r0, r4
 80138c6:	f000 fca7 	bl	8014218 <__lshift>
 80138ca:	9b00      	ldr	r3, [sp, #0]
 80138cc:	f8cd b014 	str.w	fp, [sp, #20]
 80138d0:	f003 0301 	and.w	r3, r3, #1
 80138d4:	46b1      	mov	r9, r6
 80138d6:	9307      	str	r3, [sp, #28]
 80138d8:	4606      	mov	r6, r0
 80138da:	4639      	mov	r1, r7
 80138dc:	9804      	ldr	r0, [sp, #16]
 80138de:	f7ff faa5 	bl	8012e2c <quorem>
 80138e2:	4649      	mov	r1, r9
 80138e4:	4605      	mov	r5, r0
 80138e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80138ea:	9804      	ldr	r0, [sp, #16]
 80138ec:	f000 fce8 	bl	80142c0 <__mcmp>
 80138f0:	4632      	mov	r2, r6
 80138f2:	9000      	str	r0, [sp, #0]
 80138f4:	4639      	mov	r1, r7
 80138f6:	4620      	mov	r0, r4
 80138f8:	f000 fcfc 	bl	80142f4 <__mdiff>
 80138fc:	68c3      	ldr	r3, [r0, #12]
 80138fe:	4602      	mov	r2, r0
 8013900:	bb03      	cbnz	r3, 8013944 <_dtoa_r+0x9fc>
 8013902:	4601      	mov	r1, r0
 8013904:	9008      	str	r0, [sp, #32]
 8013906:	9804      	ldr	r0, [sp, #16]
 8013908:	f000 fcda 	bl	80142c0 <__mcmp>
 801390c:	9a08      	ldr	r2, [sp, #32]
 801390e:	4603      	mov	r3, r0
 8013910:	4611      	mov	r1, r2
 8013912:	4620      	mov	r0, r4
 8013914:	9308      	str	r3, [sp, #32]
 8013916:	f000 faf1 	bl	8013efc <_Bfree>
 801391a:	9b08      	ldr	r3, [sp, #32]
 801391c:	b9a3      	cbnz	r3, 8013948 <_dtoa_r+0xa00>
 801391e:	9a06      	ldr	r2, [sp, #24]
 8013920:	b992      	cbnz	r2, 8013948 <_dtoa_r+0xa00>
 8013922:	9a07      	ldr	r2, [sp, #28]
 8013924:	b982      	cbnz	r2, 8013948 <_dtoa_r+0xa00>
 8013926:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801392a:	d029      	beq.n	8013980 <_dtoa_r+0xa38>
 801392c:	9b00      	ldr	r3, [sp, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	dd01      	ble.n	8013936 <_dtoa_r+0x9ee>
 8013932:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013936:	9b05      	ldr	r3, [sp, #20]
 8013938:	1c5d      	adds	r5, r3, #1
 801393a:	f883 8000 	strb.w	r8, [r3]
 801393e:	e782      	b.n	8013846 <_dtoa_r+0x8fe>
 8013940:	4630      	mov	r0, r6
 8013942:	e7c2      	b.n	80138ca <_dtoa_r+0x982>
 8013944:	2301      	movs	r3, #1
 8013946:	e7e3      	b.n	8013910 <_dtoa_r+0x9c8>
 8013948:	9a00      	ldr	r2, [sp, #0]
 801394a:	2a00      	cmp	r2, #0
 801394c:	db04      	blt.n	8013958 <_dtoa_r+0xa10>
 801394e:	d125      	bne.n	801399c <_dtoa_r+0xa54>
 8013950:	9a06      	ldr	r2, [sp, #24]
 8013952:	bb1a      	cbnz	r2, 801399c <_dtoa_r+0xa54>
 8013954:	9a07      	ldr	r2, [sp, #28]
 8013956:	bb0a      	cbnz	r2, 801399c <_dtoa_r+0xa54>
 8013958:	2b00      	cmp	r3, #0
 801395a:	ddec      	ble.n	8013936 <_dtoa_r+0x9ee>
 801395c:	2201      	movs	r2, #1
 801395e:	9904      	ldr	r1, [sp, #16]
 8013960:	4620      	mov	r0, r4
 8013962:	f000 fc59 	bl	8014218 <__lshift>
 8013966:	4639      	mov	r1, r7
 8013968:	9004      	str	r0, [sp, #16]
 801396a:	f000 fca9 	bl	80142c0 <__mcmp>
 801396e:	2800      	cmp	r0, #0
 8013970:	dc03      	bgt.n	801397a <_dtoa_r+0xa32>
 8013972:	d1e0      	bne.n	8013936 <_dtoa_r+0x9ee>
 8013974:	f018 0f01 	tst.w	r8, #1
 8013978:	d0dd      	beq.n	8013936 <_dtoa_r+0x9ee>
 801397a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801397e:	d1d8      	bne.n	8013932 <_dtoa_r+0x9ea>
 8013980:	9b05      	ldr	r3, [sp, #20]
 8013982:	9a05      	ldr	r2, [sp, #20]
 8013984:	1c5d      	adds	r5, r3, #1
 8013986:	2339      	movs	r3, #57	; 0x39
 8013988:	7013      	strb	r3, [r2, #0]
 801398a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801398e:	2b39      	cmp	r3, #57	; 0x39
 8013990:	f105 32ff 	add.w	r2, r5, #4294967295
 8013994:	d04f      	beq.n	8013a36 <_dtoa_r+0xaee>
 8013996:	3301      	adds	r3, #1
 8013998:	7013      	strb	r3, [r2, #0]
 801399a:	e754      	b.n	8013846 <_dtoa_r+0x8fe>
 801399c:	9a05      	ldr	r2, [sp, #20]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	f102 0501 	add.w	r5, r2, #1
 80139a4:	dd06      	ble.n	80139b4 <_dtoa_r+0xa6c>
 80139a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80139aa:	d0e9      	beq.n	8013980 <_dtoa_r+0xa38>
 80139ac:	f108 0801 	add.w	r8, r8, #1
 80139b0:	9b05      	ldr	r3, [sp, #20]
 80139b2:	e7c2      	b.n	801393a <_dtoa_r+0x9f2>
 80139b4:	9a02      	ldr	r2, [sp, #8]
 80139b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80139ba:	eba5 030b 	sub.w	r3, r5, fp
 80139be:	4293      	cmp	r3, r2
 80139c0:	d021      	beq.n	8013a06 <_dtoa_r+0xabe>
 80139c2:	2300      	movs	r3, #0
 80139c4:	220a      	movs	r2, #10
 80139c6:	9904      	ldr	r1, [sp, #16]
 80139c8:	4620      	mov	r0, r4
 80139ca:	f000 faae 	bl	8013f2a <__multadd>
 80139ce:	45b1      	cmp	r9, r6
 80139d0:	9004      	str	r0, [sp, #16]
 80139d2:	f04f 0300 	mov.w	r3, #0
 80139d6:	f04f 020a 	mov.w	r2, #10
 80139da:	4649      	mov	r1, r9
 80139dc:	4620      	mov	r0, r4
 80139de:	d105      	bne.n	80139ec <_dtoa_r+0xaa4>
 80139e0:	f000 faa3 	bl	8013f2a <__multadd>
 80139e4:	4681      	mov	r9, r0
 80139e6:	4606      	mov	r6, r0
 80139e8:	9505      	str	r5, [sp, #20]
 80139ea:	e776      	b.n	80138da <_dtoa_r+0x992>
 80139ec:	f000 fa9d 	bl	8013f2a <__multadd>
 80139f0:	4631      	mov	r1, r6
 80139f2:	4681      	mov	r9, r0
 80139f4:	2300      	movs	r3, #0
 80139f6:	220a      	movs	r2, #10
 80139f8:	4620      	mov	r0, r4
 80139fa:	f000 fa96 	bl	8013f2a <__multadd>
 80139fe:	4606      	mov	r6, r0
 8013a00:	e7f2      	b.n	80139e8 <_dtoa_r+0xaa0>
 8013a02:	f04f 0900 	mov.w	r9, #0
 8013a06:	2201      	movs	r2, #1
 8013a08:	9904      	ldr	r1, [sp, #16]
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f000 fc04 	bl	8014218 <__lshift>
 8013a10:	4639      	mov	r1, r7
 8013a12:	9004      	str	r0, [sp, #16]
 8013a14:	f000 fc54 	bl	80142c0 <__mcmp>
 8013a18:	2800      	cmp	r0, #0
 8013a1a:	dcb6      	bgt.n	801398a <_dtoa_r+0xa42>
 8013a1c:	d102      	bne.n	8013a24 <_dtoa_r+0xadc>
 8013a1e:	f018 0f01 	tst.w	r8, #1
 8013a22:	d1b2      	bne.n	801398a <_dtoa_r+0xa42>
 8013a24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013a28:	2b30      	cmp	r3, #48	; 0x30
 8013a2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8013a2e:	f47f af0a 	bne.w	8013846 <_dtoa_r+0x8fe>
 8013a32:	4615      	mov	r5, r2
 8013a34:	e7f6      	b.n	8013a24 <_dtoa_r+0xadc>
 8013a36:	4593      	cmp	fp, r2
 8013a38:	d105      	bne.n	8013a46 <_dtoa_r+0xafe>
 8013a3a:	2331      	movs	r3, #49	; 0x31
 8013a3c:	f10a 0a01 	add.w	sl, sl, #1
 8013a40:	f88b 3000 	strb.w	r3, [fp]
 8013a44:	e6ff      	b.n	8013846 <_dtoa_r+0x8fe>
 8013a46:	4615      	mov	r5, r2
 8013a48:	e79f      	b.n	801398a <_dtoa_r+0xa42>
 8013a4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013ab0 <_dtoa_r+0xb68>
 8013a4e:	e007      	b.n	8013a60 <_dtoa_r+0xb18>
 8013a50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013ab4 <_dtoa_r+0xb6c>
 8013a56:	b11b      	cbz	r3, 8013a60 <_dtoa_r+0xb18>
 8013a58:	f10b 0308 	add.w	r3, fp, #8
 8013a5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013a5e:	6013      	str	r3, [r2, #0]
 8013a60:	4658      	mov	r0, fp
 8013a62:	b017      	add	sp, #92	; 0x5c
 8013a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a68:	9b06      	ldr	r3, [sp, #24]
 8013a6a:	2b01      	cmp	r3, #1
 8013a6c:	f77f ae35 	ble.w	80136da <_dtoa_r+0x792>
 8013a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a72:	9307      	str	r3, [sp, #28]
 8013a74:	e649      	b.n	801370a <_dtoa_r+0x7c2>
 8013a76:	9b02      	ldr	r3, [sp, #8]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	dc03      	bgt.n	8013a84 <_dtoa_r+0xb3c>
 8013a7c:	9b06      	ldr	r3, [sp, #24]
 8013a7e:	2b02      	cmp	r3, #2
 8013a80:	f73f aecc 	bgt.w	801381c <_dtoa_r+0x8d4>
 8013a84:	465d      	mov	r5, fp
 8013a86:	4639      	mov	r1, r7
 8013a88:	9804      	ldr	r0, [sp, #16]
 8013a8a:	f7ff f9cf 	bl	8012e2c <quorem>
 8013a8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013a92:	f805 8b01 	strb.w	r8, [r5], #1
 8013a96:	9a02      	ldr	r2, [sp, #8]
 8013a98:	eba5 030b 	sub.w	r3, r5, fp
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	ddb0      	ble.n	8013a02 <_dtoa_r+0xaba>
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	220a      	movs	r2, #10
 8013aa4:	9904      	ldr	r1, [sp, #16]
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	f000 fa3f 	bl	8013f2a <__multadd>
 8013aac:	9004      	str	r0, [sp, #16]
 8013aae:	e7ea      	b.n	8013a86 <_dtoa_r+0xb3e>
 8013ab0:	0801fd15 	.word	0x0801fd15
 8013ab4:	0801fd39 	.word	0x0801fd39

08013ab8 <__sflush_r>:
 8013ab8:	898a      	ldrh	r2, [r1, #12]
 8013aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013abe:	4605      	mov	r5, r0
 8013ac0:	0710      	lsls	r0, r2, #28
 8013ac2:	460c      	mov	r4, r1
 8013ac4:	d458      	bmi.n	8013b78 <__sflush_r+0xc0>
 8013ac6:	684b      	ldr	r3, [r1, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	dc05      	bgt.n	8013ad8 <__sflush_r+0x20>
 8013acc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	dc02      	bgt.n	8013ad8 <__sflush_r+0x20>
 8013ad2:	2000      	movs	r0, #0
 8013ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ada:	2e00      	cmp	r6, #0
 8013adc:	d0f9      	beq.n	8013ad2 <__sflush_r+0x1a>
 8013ade:	2300      	movs	r3, #0
 8013ae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013ae4:	682f      	ldr	r7, [r5, #0]
 8013ae6:	6a21      	ldr	r1, [r4, #32]
 8013ae8:	602b      	str	r3, [r5, #0]
 8013aea:	d032      	beq.n	8013b52 <__sflush_r+0x9a>
 8013aec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013aee:	89a3      	ldrh	r3, [r4, #12]
 8013af0:	075a      	lsls	r2, r3, #29
 8013af2:	d505      	bpl.n	8013b00 <__sflush_r+0x48>
 8013af4:	6863      	ldr	r3, [r4, #4]
 8013af6:	1ac0      	subs	r0, r0, r3
 8013af8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013afa:	b10b      	cbz	r3, 8013b00 <__sflush_r+0x48>
 8013afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013afe:	1ac0      	subs	r0, r0, r3
 8013b00:	2300      	movs	r3, #0
 8013b02:	4602      	mov	r2, r0
 8013b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b06:	6a21      	ldr	r1, [r4, #32]
 8013b08:	4628      	mov	r0, r5
 8013b0a:	47b0      	blx	r6
 8013b0c:	1c43      	adds	r3, r0, #1
 8013b0e:	89a3      	ldrh	r3, [r4, #12]
 8013b10:	d106      	bne.n	8013b20 <__sflush_r+0x68>
 8013b12:	6829      	ldr	r1, [r5, #0]
 8013b14:	291d      	cmp	r1, #29
 8013b16:	d848      	bhi.n	8013baa <__sflush_r+0xf2>
 8013b18:	4a29      	ldr	r2, [pc, #164]	; (8013bc0 <__sflush_r+0x108>)
 8013b1a:	40ca      	lsrs	r2, r1
 8013b1c:	07d6      	lsls	r6, r2, #31
 8013b1e:	d544      	bpl.n	8013baa <__sflush_r+0xf2>
 8013b20:	2200      	movs	r2, #0
 8013b22:	6062      	str	r2, [r4, #4]
 8013b24:	04d9      	lsls	r1, r3, #19
 8013b26:	6922      	ldr	r2, [r4, #16]
 8013b28:	6022      	str	r2, [r4, #0]
 8013b2a:	d504      	bpl.n	8013b36 <__sflush_r+0x7e>
 8013b2c:	1c42      	adds	r2, r0, #1
 8013b2e:	d101      	bne.n	8013b34 <__sflush_r+0x7c>
 8013b30:	682b      	ldr	r3, [r5, #0]
 8013b32:	b903      	cbnz	r3, 8013b36 <__sflush_r+0x7e>
 8013b34:	6560      	str	r0, [r4, #84]	; 0x54
 8013b36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b38:	602f      	str	r7, [r5, #0]
 8013b3a:	2900      	cmp	r1, #0
 8013b3c:	d0c9      	beq.n	8013ad2 <__sflush_r+0x1a>
 8013b3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b42:	4299      	cmp	r1, r3
 8013b44:	d002      	beq.n	8013b4c <__sflush_r+0x94>
 8013b46:	4628      	mov	r0, r5
 8013b48:	f7fe f9e6 	bl	8011f18 <_free_r>
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	6360      	str	r0, [r4, #52]	; 0x34
 8013b50:	e7c0      	b.n	8013ad4 <__sflush_r+0x1c>
 8013b52:	2301      	movs	r3, #1
 8013b54:	4628      	mov	r0, r5
 8013b56:	47b0      	blx	r6
 8013b58:	1c41      	adds	r1, r0, #1
 8013b5a:	d1c8      	bne.n	8013aee <__sflush_r+0x36>
 8013b5c:	682b      	ldr	r3, [r5, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d0c5      	beq.n	8013aee <__sflush_r+0x36>
 8013b62:	2b1d      	cmp	r3, #29
 8013b64:	d001      	beq.n	8013b6a <__sflush_r+0xb2>
 8013b66:	2b16      	cmp	r3, #22
 8013b68:	d101      	bne.n	8013b6e <__sflush_r+0xb6>
 8013b6a:	602f      	str	r7, [r5, #0]
 8013b6c:	e7b1      	b.n	8013ad2 <__sflush_r+0x1a>
 8013b6e:	89a3      	ldrh	r3, [r4, #12]
 8013b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b74:	81a3      	strh	r3, [r4, #12]
 8013b76:	e7ad      	b.n	8013ad4 <__sflush_r+0x1c>
 8013b78:	690f      	ldr	r7, [r1, #16]
 8013b7a:	2f00      	cmp	r7, #0
 8013b7c:	d0a9      	beq.n	8013ad2 <__sflush_r+0x1a>
 8013b7e:	0793      	lsls	r3, r2, #30
 8013b80:	680e      	ldr	r6, [r1, #0]
 8013b82:	bf08      	it	eq
 8013b84:	694b      	ldreq	r3, [r1, #20]
 8013b86:	600f      	str	r7, [r1, #0]
 8013b88:	bf18      	it	ne
 8013b8a:	2300      	movne	r3, #0
 8013b8c:	eba6 0807 	sub.w	r8, r6, r7
 8013b90:	608b      	str	r3, [r1, #8]
 8013b92:	f1b8 0f00 	cmp.w	r8, #0
 8013b96:	dd9c      	ble.n	8013ad2 <__sflush_r+0x1a>
 8013b98:	4643      	mov	r3, r8
 8013b9a:	463a      	mov	r2, r7
 8013b9c:	6a21      	ldr	r1, [r4, #32]
 8013b9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ba0:	4628      	mov	r0, r5
 8013ba2:	47b0      	blx	r6
 8013ba4:	2800      	cmp	r0, #0
 8013ba6:	dc06      	bgt.n	8013bb6 <__sflush_r+0xfe>
 8013ba8:	89a3      	ldrh	r3, [r4, #12]
 8013baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bae:	81a3      	strh	r3, [r4, #12]
 8013bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb4:	e78e      	b.n	8013ad4 <__sflush_r+0x1c>
 8013bb6:	4407      	add	r7, r0
 8013bb8:	eba8 0800 	sub.w	r8, r8, r0
 8013bbc:	e7e9      	b.n	8013b92 <__sflush_r+0xda>
 8013bbe:	bf00      	nop
 8013bc0:	20400001 	.word	0x20400001

08013bc4 <_fflush_r>:
 8013bc4:	b538      	push	{r3, r4, r5, lr}
 8013bc6:	690b      	ldr	r3, [r1, #16]
 8013bc8:	4605      	mov	r5, r0
 8013bca:	460c      	mov	r4, r1
 8013bcc:	b1db      	cbz	r3, 8013c06 <_fflush_r+0x42>
 8013bce:	b118      	cbz	r0, 8013bd8 <_fflush_r+0x14>
 8013bd0:	6983      	ldr	r3, [r0, #24]
 8013bd2:	b90b      	cbnz	r3, 8013bd8 <_fflush_r+0x14>
 8013bd4:	f000 f860 	bl	8013c98 <__sinit>
 8013bd8:	4b0c      	ldr	r3, [pc, #48]	; (8013c0c <_fflush_r+0x48>)
 8013bda:	429c      	cmp	r4, r3
 8013bdc:	d109      	bne.n	8013bf2 <_fflush_r+0x2e>
 8013bde:	686c      	ldr	r4, [r5, #4]
 8013be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013be4:	b17b      	cbz	r3, 8013c06 <_fflush_r+0x42>
 8013be6:	4621      	mov	r1, r4
 8013be8:	4628      	mov	r0, r5
 8013bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bee:	f7ff bf63 	b.w	8013ab8 <__sflush_r>
 8013bf2:	4b07      	ldr	r3, [pc, #28]	; (8013c10 <_fflush_r+0x4c>)
 8013bf4:	429c      	cmp	r4, r3
 8013bf6:	d101      	bne.n	8013bfc <_fflush_r+0x38>
 8013bf8:	68ac      	ldr	r4, [r5, #8]
 8013bfa:	e7f1      	b.n	8013be0 <_fflush_r+0x1c>
 8013bfc:	4b05      	ldr	r3, [pc, #20]	; (8013c14 <_fflush_r+0x50>)
 8013bfe:	429c      	cmp	r4, r3
 8013c00:	bf08      	it	eq
 8013c02:	68ec      	ldreq	r4, [r5, #12]
 8013c04:	e7ec      	b.n	8013be0 <_fflush_r+0x1c>
 8013c06:	2000      	movs	r0, #0
 8013c08:	bd38      	pop	{r3, r4, r5, pc}
 8013c0a:	bf00      	nop
 8013c0c:	0801fd68 	.word	0x0801fd68
 8013c10:	0801fd88 	.word	0x0801fd88
 8013c14:	0801fd48 	.word	0x0801fd48

08013c18 <std>:
 8013c18:	2300      	movs	r3, #0
 8013c1a:	b510      	push	{r4, lr}
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8013c22:	6083      	str	r3, [r0, #8]
 8013c24:	8181      	strh	r1, [r0, #12]
 8013c26:	6643      	str	r3, [r0, #100]	; 0x64
 8013c28:	81c2      	strh	r2, [r0, #14]
 8013c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c2e:	6183      	str	r3, [r0, #24]
 8013c30:	4619      	mov	r1, r3
 8013c32:	2208      	movs	r2, #8
 8013c34:	305c      	adds	r0, #92	; 0x5c
 8013c36:	f7fe f959 	bl	8011eec <memset>
 8013c3a:	4b05      	ldr	r3, [pc, #20]	; (8013c50 <std+0x38>)
 8013c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8013c3e:	4b05      	ldr	r3, [pc, #20]	; (8013c54 <std+0x3c>)
 8013c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c42:	4b05      	ldr	r3, [pc, #20]	; (8013c58 <std+0x40>)
 8013c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c46:	4b05      	ldr	r3, [pc, #20]	; (8013c5c <std+0x44>)
 8013c48:	6224      	str	r4, [r4, #32]
 8013c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8013c4c:	bd10      	pop	{r4, pc}
 8013c4e:	bf00      	nop
 8013c50:	0801473d 	.word	0x0801473d
 8013c54:	0801475f 	.word	0x0801475f
 8013c58:	08014797 	.word	0x08014797
 8013c5c:	080147bb 	.word	0x080147bb

08013c60 <_cleanup_r>:
 8013c60:	4901      	ldr	r1, [pc, #4]	; (8013c68 <_cleanup_r+0x8>)
 8013c62:	f000 b885 	b.w	8013d70 <_fwalk_reent>
 8013c66:	bf00      	nop
 8013c68:	08013bc5 	.word	0x08013bc5

08013c6c <__sfmoreglue>:
 8013c6c:	b570      	push	{r4, r5, r6, lr}
 8013c6e:	1e4a      	subs	r2, r1, #1
 8013c70:	2568      	movs	r5, #104	; 0x68
 8013c72:	4355      	muls	r5, r2
 8013c74:	460e      	mov	r6, r1
 8013c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013c7a:	f7fe f99b 	bl	8011fb4 <_malloc_r>
 8013c7e:	4604      	mov	r4, r0
 8013c80:	b140      	cbz	r0, 8013c94 <__sfmoreglue+0x28>
 8013c82:	2100      	movs	r1, #0
 8013c84:	e9c0 1600 	strd	r1, r6, [r0]
 8013c88:	300c      	adds	r0, #12
 8013c8a:	60a0      	str	r0, [r4, #8]
 8013c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013c90:	f7fe f92c 	bl	8011eec <memset>
 8013c94:	4620      	mov	r0, r4
 8013c96:	bd70      	pop	{r4, r5, r6, pc}

08013c98 <__sinit>:
 8013c98:	6983      	ldr	r3, [r0, #24]
 8013c9a:	b510      	push	{r4, lr}
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	bb33      	cbnz	r3, 8013cee <__sinit+0x56>
 8013ca0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013ca4:	6503      	str	r3, [r0, #80]	; 0x50
 8013ca6:	4b12      	ldr	r3, [pc, #72]	; (8013cf0 <__sinit+0x58>)
 8013ca8:	4a12      	ldr	r2, [pc, #72]	; (8013cf4 <__sinit+0x5c>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	6282      	str	r2, [r0, #40]	; 0x28
 8013cae:	4298      	cmp	r0, r3
 8013cb0:	bf04      	itt	eq
 8013cb2:	2301      	moveq	r3, #1
 8013cb4:	6183      	streq	r3, [r0, #24]
 8013cb6:	f000 f81f 	bl	8013cf8 <__sfp>
 8013cba:	6060      	str	r0, [r4, #4]
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	f000 f81b 	bl	8013cf8 <__sfp>
 8013cc2:	60a0      	str	r0, [r4, #8]
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f000 f817 	bl	8013cf8 <__sfp>
 8013cca:	2200      	movs	r2, #0
 8013ccc:	60e0      	str	r0, [r4, #12]
 8013cce:	2104      	movs	r1, #4
 8013cd0:	6860      	ldr	r0, [r4, #4]
 8013cd2:	f7ff ffa1 	bl	8013c18 <std>
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	2109      	movs	r1, #9
 8013cda:	68a0      	ldr	r0, [r4, #8]
 8013cdc:	f7ff ff9c 	bl	8013c18 <std>
 8013ce0:	2202      	movs	r2, #2
 8013ce2:	2112      	movs	r1, #18
 8013ce4:	68e0      	ldr	r0, [r4, #12]
 8013ce6:	f7ff ff97 	bl	8013c18 <std>
 8013cea:	2301      	movs	r3, #1
 8013cec:	61a3      	str	r3, [r4, #24]
 8013cee:	bd10      	pop	{r4, pc}
 8013cf0:	0801fcf0 	.word	0x0801fcf0
 8013cf4:	08013c61 	.word	0x08013c61

08013cf8 <__sfp>:
 8013cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cfa:	4b1b      	ldr	r3, [pc, #108]	; (8013d68 <__sfp+0x70>)
 8013cfc:	681e      	ldr	r6, [r3, #0]
 8013cfe:	69b3      	ldr	r3, [r6, #24]
 8013d00:	4607      	mov	r7, r0
 8013d02:	b913      	cbnz	r3, 8013d0a <__sfp+0x12>
 8013d04:	4630      	mov	r0, r6
 8013d06:	f7ff ffc7 	bl	8013c98 <__sinit>
 8013d0a:	3648      	adds	r6, #72	; 0x48
 8013d0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013d10:	3b01      	subs	r3, #1
 8013d12:	d503      	bpl.n	8013d1c <__sfp+0x24>
 8013d14:	6833      	ldr	r3, [r6, #0]
 8013d16:	b133      	cbz	r3, 8013d26 <__sfp+0x2e>
 8013d18:	6836      	ldr	r6, [r6, #0]
 8013d1a:	e7f7      	b.n	8013d0c <__sfp+0x14>
 8013d1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013d20:	b16d      	cbz	r5, 8013d3e <__sfp+0x46>
 8013d22:	3468      	adds	r4, #104	; 0x68
 8013d24:	e7f4      	b.n	8013d10 <__sfp+0x18>
 8013d26:	2104      	movs	r1, #4
 8013d28:	4638      	mov	r0, r7
 8013d2a:	f7ff ff9f 	bl	8013c6c <__sfmoreglue>
 8013d2e:	6030      	str	r0, [r6, #0]
 8013d30:	2800      	cmp	r0, #0
 8013d32:	d1f1      	bne.n	8013d18 <__sfp+0x20>
 8013d34:	230c      	movs	r3, #12
 8013d36:	603b      	str	r3, [r7, #0]
 8013d38:	4604      	mov	r4, r0
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d3e:	4b0b      	ldr	r3, [pc, #44]	; (8013d6c <__sfp+0x74>)
 8013d40:	6665      	str	r5, [r4, #100]	; 0x64
 8013d42:	e9c4 5500 	strd	r5, r5, [r4]
 8013d46:	60a5      	str	r5, [r4, #8]
 8013d48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013d4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013d50:	2208      	movs	r2, #8
 8013d52:	4629      	mov	r1, r5
 8013d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013d58:	f7fe f8c8 	bl	8011eec <memset>
 8013d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013d64:	e7e9      	b.n	8013d3a <__sfp+0x42>
 8013d66:	bf00      	nop
 8013d68:	0801fcf0 	.word	0x0801fcf0
 8013d6c:	ffff0001 	.word	0xffff0001

08013d70 <_fwalk_reent>:
 8013d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d74:	4680      	mov	r8, r0
 8013d76:	4689      	mov	r9, r1
 8013d78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013d7c:	2600      	movs	r6, #0
 8013d7e:	b914      	cbnz	r4, 8013d86 <_fwalk_reent+0x16>
 8013d80:	4630      	mov	r0, r6
 8013d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013d8a:	3f01      	subs	r7, #1
 8013d8c:	d501      	bpl.n	8013d92 <_fwalk_reent+0x22>
 8013d8e:	6824      	ldr	r4, [r4, #0]
 8013d90:	e7f5      	b.n	8013d7e <_fwalk_reent+0xe>
 8013d92:	89ab      	ldrh	r3, [r5, #12]
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	d907      	bls.n	8013da8 <_fwalk_reent+0x38>
 8013d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	d003      	beq.n	8013da8 <_fwalk_reent+0x38>
 8013da0:	4629      	mov	r1, r5
 8013da2:	4640      	mov	r0, r8
 8013da4:	47c8      	blx	r9
 8013da6:	4306      	orrs	r6, r0
 8013da8:	3568      	adds	r5, #104	; 0x68
 8013daa:	e7ee      	b.n	8013d8a <_fwalk_reent+0x1a>

08013dac <_localeconv_r>:
 8013dac:	4b04      	ldr	r3, [pc, #16]	; (8013dc0 <_localeconv_r+0x14>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	6a18      	ldr	r0, [r3, #32]
 8013db2:	4b04      	ldr	r3, [pc, #16]	; (8013dc4 <_localeconv_r+0x18>)
 8013db4:	2800      	cmp	r0, #0
 8013db6:	bf08      	it	eq
 8013db8:	4618      	moveq	r0, r3
 8013dba:	30f0      	adds	r0, #240	; 0xf0
 8013dbc:	4770      	bx	lr
 8013dbe:	bf00      	nop
 8013dc0:	20000014 	.word	0x20000014
 8013dc4:	20000078 	.word	0x20000078

08013dc8 <__swhatbuf_r>:
 8013dc8:	b570      	push	{r4, r5, r6, lr}
 8013dca:	460e      	mov	r6, r1
 8013dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dd0:	2900      	cmp	r1, #0
 8013dd2:	b096      	sub	sp, #88	; 0x58
 8013dd4:	4614      	mov	r4, r2
 8013dd6:	461d      	mov	r5, r3
 8013dd8:	da07      	bge.n	8013dea <__swhatbuf_r+0x22>
 8013dda:	2300      	movs	r3, #0
 8013ddc:	602b      	str	r3, [r5, #0]
 8013dde:	89b3      	ldrh	r3, [r6, #12]
 8013de0:	061a      	lsls	r2, r3, #24
 8013de2:	d410      	bmi.n	8013e06 <__swhatbuf_r+0x3e>
 8013de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013de8:	e00e      	b.n	8013e08 <__swhatbuf_r+0x40>
 8013dea:	466a      	mov	r2, sp
 8013dec:	f000 fd0c 	bl	8014808 <_fstat_r>
 8013df0:	2800      	cmp	r0, #0
 8013df2:	dbf2      	blt.n	8013dda <__swhatbuf_r+0x12>
 8013df4:	9a01      	ldr	r2, [sp, #4]
 8013df6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013dfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013dfe:	425a      	negs	r2, r3
 8013e00:	415a      	adcs	r2, r3
 8013e02:	602a      	str	r2, [r5, #0]
 8013e04:	e7ee      	b.n	8013de4 <__swhatbuf_r+0x1c>
 8013e06:	2340      	movs	r3, #64	; 0x40
 8013e08:	2000      	movs	r0, #0
 8013e0a:	6023      	str	r3, [r4, #0]
 8013e0c:	b016      	add	sp, #88	; 0x58
 8013e0e:	bd70      	pop	{r4, r5, r6, pc}

08013e10 <__smakebuf_r>:
 8013e10:	898b      	ldrh	r3, [r1, #12]
 8013e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e14:	079d      	lsls	r5, r3, #30
 8013e16:	4606      	mov	r6, r0
 8013e18:	460c      	mov	r4, r1
 8013e1a:	d507      	bpl.n	8013e2c <__smakebuf_r+0x1c>
 8013e1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013e20:	6023      	str	r3, [r4, #0]
 8013e22:	6123      	str	r3, [r4, #16]
 8013e24:	2301      	movs	r3, #1
 8013e26:	6163      	str	r3, [r4, #20]
 8013e28:	b002      	add	sp, #8
 8013e2a:	bd70      	pop	{r4, r5, r6, pc}
 8013e2c:	ab01      	add	r3, sp, #4
 8013e2e:	466a      	mov	r2, sp
 8013e30:	f7ff ffca 	bl	8013dc8 <__swhatbuf_r>
 8013e34:	9900      	ldr	r1, [sp, #0]
 8013e36:	4605      	mov	r5, r0
 8013e38:	4630      	mov	r0, r6
 8013e3a:	f7fe f8bb 	bl	8011fb4 <_malloc_r>
 8013e3e:	b948      	cbnz	r0, 8013e54 <__smakebuf_r+0x44>
 8013e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e44:	059a      	lsls	r2, r3, #22
 8013e46:	d4ef      	bmi.n	8013e28 <__smakebuf_r+0x18>
 8013e48:	f023 0303 	bic.w	r3, r3, #3
 8013e4c:	f043 0302 	orr.w	r3, r3, #2
 8013e50:	81a3      	strh	r3, [r4, #12]
 8013e52:	e7e3      	b.n	8013e1c <__smakebuf_r+0xc>
 8013e54:	4b0d      	ldr	r3, [pc, #52]	; (8013e8c <__smakebuf_r+0x7c>)
 8013e56:	62b3      	str	r3, [r6, #40]	; 0x28
 8013e58:	89a3      	ldrh	r3, [r4, #12]
 8013e5a:	6020      	str	r0, [r4, #0]
 8013e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e60:	81a3      	strh	r3, [r4, #12]
 8013e62:	9b00      	ldr	r3, [sp, #0]
 8013e64:	6163      	str	r3, [r4, #20]
 8013e66:	9b01      	ldr	r3, [sp, #4]
 8013e68:	6120      	str	r0, [r4, #16]
 8013e6a:	b15b      	cbz	r3, 8013e84 <__smakebuf_r+0x74>
 8013e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e70:	4630      	mov	r0, r6
 8013e72:	f000 fcdb 	bl	801482c <_isatty_r>
 8013e76:	b128      	cbz	r0, 8013e84 <__smakebuf_r+0x74>
 8013e78:	89a3      	ldrh	r3, [r4, #12]
 8013e7a:	f023 0303 	bic.w	r3, r3, #3
 8013e7e:	f043 0301 	orr.w	r3, r3, #1
 8013e82:	81a3      	strh	r3, [r4, #12]
 8013e84:	89a3      	ldrh	r3, [r4, #12]
 8013e86:	431d      	orrs	r5, r3
 8013e88:	81a5      	strh	r5, [r4, #12]
 8013e8a:	e7cd      	b.n	8013e28 <__smakebuf_r+0x18>
 8013e8c:	08013c61 	.word	0x08013c61

08013e90 <__malloc_lock>:
 8013e90:	4770      	bx	lr

08013e92 <__malloc_unlock>:
 8013e92:	4770      	bx	lr

08013e94 <_Balloc>:
 8013e94:	b570      	push	{r4, r5, r6, lr}
 8013e96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013e98:	4604      	mov	r4, r0
 8013e9a:	460e      	mov	r6, r1
 8013e9c:	b93d      	cbnz	r5, 8013eae <_Balloc+0x1a>
 8013e9e:	2010      	movs	r0, #16
 8013ea0:	f7fd fff0 	bl	8011e84 <malloc>
 8013ea4:	6260      	str	r0, [r4, #36]	; 0x24
 8013ea6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013eaa:	6005      	str	r5, [r0, #0]
 8013eac:	60c5      	str	r5, [r0, #12]
 8013eae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013eb0:	68eb      	ldr	r3, [r5, #12]
 8013eb2:	b183      	cbz	r3, 8013ed6 <_Balloc+0x42>
 8013eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013eb6:	68db      	ldr	r3, [r3, #12]
 8013eb8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013ebc:	b9b8      	cbnz	r0, 8013eee <_Balloc+0x5a>
 8013ebe:	2101      	movs	r1, #1
 8013ec0:	fa01 f506 	lsl.w	r5, r1, r6
 8013ec4:	1d6a      	adds	r2, r5, #5
 8013ec6:	0092      	lsls	r2, r2, #2
 8013ec8:	4620      	mov	r0, r4
 8013eca:	f7fe f817 	bl	8011efc <_calloc_r>
 8013ece:	b160      	cbz	r0, 8013eea <_Balloc+0x56>
 8013ed0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013ed4:	e00e      	b.n	8013ef4 <_Balloc+0x60>
 8013ed6:	2221      	movs	r2, #33	; 0x21
 8013ed8:	2104      	movs	r1, #4
 8013eda:	4620      	mov	r0, r4
 8013edc:	f7fe f80e 	bl	8011efc <_calloc_r>
 8013ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ee2:	60e8      	str	r0, [r5, #12]
 8013ee4:	68db      	ldr	r3, [r3, #12]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d1e4      	bne.n	8013eb4 <_Balloc+0x20>
 8013eea:	2000      	movs	r0, #0
 8013eec:	bd70      	pop	{r4, r5, r6, pc}
 8013eee:	6802      	ldr	r2, [r0, #0]
 8013ef0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013efa:	e7f7      	b.n	8013eec <_Balloc+0x58>

08013efc <_Bfree>:
 8013efc:	b570      	push	{r4, r5, r6, lr}
 8013efe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013f00:	4606      	mov	r6, r0
 8013f02:	460d      	mov	r5, r1
 8013f04:	b93c      	cbnz	r4, 8013f16 <_Bfree+0x1a>
 8013f06:	2010      	movs	r0, #16
 8013f08:	f7fd ffbc 	bl	8011e84 <malloc>
 8013f0c:	6270      	str	r0, [r6, #36]	; 0x24
 8013f0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f12:	6004      	str	r4, [r0, #0]
 8013f14:	60c4      	str	r4, [r0, #12]
 8013f16:	b13d      	cbz	r5, 8013f28 <_Bfree+0x2c>
 8013f18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013f1a:	686a      	ldr	r2, [r5, #4]
 8013f1c:	68db      	ldr	r3, [r3, #12]
 8013f1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013f22:	6029      	str	r1, [r5, #0]
 8013f24:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013f28:	bd70      	pop	{r4, r5, r6, pc}

08013f2a <__multadd>:
 8013f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f2e:	690d      	ldr	r5, [r1, #16]
 8013f30:	461f      	mov	r7, r3
 8013f32:	4606      	mov	r6, r0
 8013f34:	460c      	mov	r4, r1
 8013f36:	f101 0c14 	add.w	ip, r1, #20
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	f8dc 0000 	ldr.w	r0, [ip]
 8013f40:	b281      	uxth	r1, r0
 8013f42:	fb02 7101 	mla	r1, r2, r1, r7
 8013f46:	0c0f      	lsrs	r7, r1, #16
 8013f48:	0c00      	lsrs	r0, r0, #16
 8013f4a:	fb02 7000 	mla	r0, r2, r0, r7
 8013f4e:	b289      	uxth	r1, r1
 8013f50:	3301      	adds	r3, #1
 8013f52:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013f56:	429d      	cmp	r5, r3
 8013f58:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013f5c:	f84c 1b04 	str.w	r1, [ip], #4
 8013f60:	dcec      	bgt.n	8013f3c <__multadd+0x12>
 8013f62:	b1d7      	cbz	r7, 8013f9a <__multadd+0x70>
 8013f64:	68a3      	ldr	r3, [r4, #8]
 8013f66:	42ab      	cmp	r3, r5
 8013f68:	dc12      	bgt.n	8013f90 <__multadd+0x66>
 8013f6a:	6861      	ldr	r1, [r4, #4]
 8013f6c:	4630      	mov	r0, r6
 8013f6e:	3101      	adds	r1, #1
 8013f70:	f7ff ff90 	bl	8013e94 <_Balloc>
 8013f74:	6922      	ldr	r2, [r4, #16]
 8013f76:	3202      	adds	r2, #2
 8013f78:	f104 010c 	add.w	r1, r4, #12
 8013f7c:	4680      	mov	r8, r0
 8013f7e:	0092      	lsls	r2, r2, #2
 8013f80:	300c      	adds	r0, #12
 8013f82:	f7fd ff8f 	bl	8011ea4 <memcpy>
 8013f86:	4621      	mov	r1, r4
 8013f88:	4630      	mov	r0, r6
 8013f8a:	f7ff ffb7 	bl	8013efc <_Bfree>
 8013f8e:	4644      	mov	r4, r8
 8013f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013f94:	3501      	adds	r5, #1
 8013f96:	615f      	str	r7, [r3, #20]
 8013f98:	6125      	str	r5, [r4, #16]
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013fa0 <__hi0bits>:
 8013fa0:	0c02      	lsrs	r2, r0, #16
 8013fa2:	0412      	lsls	r2, r2, #16
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	b9b2      	cbnz	r2, 8013fd6 <__hi0bits+0x36>
 8013fa8:	0403      	lsls	r3, r0, #16
 8013faa:	2010      	movs	r0, #16
 8013fac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013fb0:	bf04      	itt	eq
 8013fb2:	021b      	lsleq	r3, r3, #8
 8013fb4:	3008      	addeq	r0, #8
 8013fb6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013fba:	bf04      	itt	eq
 8013fbc:	011b      	lsleq	r3, r3, #4
 8013fbe:	3004      	addeq	r0, #4
 8013fc0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013fc4:	bf04      	itt	eq
 8013fc6:	009b      	lsleq	r3, r3, #2
 8013fc8:	3002      	addeq	r0, #2
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	db06      	blt.n	8013fdc <__hi0bits+0x3c>
 8013fce:	005b      	lsls	r3, r3, #1
 8013fd0:	d503      	bpl.n	8013fda <__hi0bits+0x3a>
 8013fd2:	3001      	adds	r0, #1
 8013fd4:	4770      	bx	lr
 8013fd6:	2000      	movs	r0, #0
 8013fd8:	e7e8      	b.n	8013fac <__hi0bits+0xc>
 8013fda:	2020      	movs	r0, #32
 8013fdc:	4770      	bx	lr

08013fde <__lo0bits>:
 8013fde:	6803      	ldr	r3, [r0, #0]
 8013fe0:	f013 0207 	ands.w	r2, r3, #7
 8013fe4:	4601      	mov	r1, r0
 8013fe6:	d00b      	beq.n	8014000 <__lo0bits+0x22>
 8013fe8:	07da      	lsls	r2, r3, #31
 8013fea:	d423      	bmi.n	8014034 <__lo0bits+0x56>
 8013fec:	0798      	lsls	r0, r3, #30
 8013fee:	bf49      	itett	mi
 8013ff0:	085b      	lsrmi	r3, r3, #1
 8013ff2:	089b      	lsrpl	r3, r3, #2
 8013ff4:	2001      	movmi	r0, #1
 8013ff6:	600b      	strmi	r3, [r1, #0]
 8013ff8:	bf5c      	itt	pl
 8013ffa:	600b      	strpl	r3, [r1, #0]
 8013ffc:	2002      	movpl	r0, #2
 8013ffe:	4770      	bx	lr
 8014000:	b298      	uxth	r0, r3
 8014002:	b9a8      	cbnz	r0, 8014030 <__lo0bits+0x52>
 8014004:	0c1b      	lsrs	r3, r3, #16
 8014006:	2010      	movs	r0, #16
 8014008:	f013 0fff 	tst.w	r3, #255	; 0xff
 801400c:	bf04      	itt	eq
 801400e:	0a1b      	lsreq	r3, r3, #8
 8014010:	3008      	addeq	r0, #8
 8014012:	071a      	lsls	r2, r3, #28
 8014014:	bf04      	itt	eq
 8014016:	091b      	lsreq	r3, r3, #4
 8014018:	3004      	addeq	r0, #4
 801401a:	079a      	lsls	r2, r3, #30
 801401c:	bf04      	itt	eq
 801401e:	089b      	lsreq	r3, r3, #2
 8014020:	3002      	addeq	r0, #2
 8014022:	07da      	lsls	r2, r3, #31
 8014024:	d402      	bmi.n	801402c <__lo0bits+0x4e>
 8014026:	085b      	lsrs	r3, r3, #1
 8014028:	d006      	beq.n	8014038 <__lo0bits+0x5a>
 801402a:	3001      	adds	r0, #1
 801402c:	600b      	str	r3, [r1, #0]
 801402e:	4770      	bx	lr
 8014030:	4610      	mov	r0, r2
 8014032:	e7e9      	b.n	8014008 <__lo0bits+0x2a>
 8014034:	2000      	movs	r0, #0
 8014036:	4770      	bx	lr
 8014038:	2020      	movs	r0, #32
 801403a:	4770      	bx	lr

0801403c <__i2b>:
 801403c:	b510      	push	{r4, lr}
 801403e:	460c      	mov	r4, r1
 8014040:	2101      	movs	r1, #1
 8014042:	f7ff ff27 	bl	8013e94 <_Balloc>
 8014046:	2201      	movs	r2, #1
 8014048:	6144      	str	r4, [r0, #20]
 801404a:	6102      	str	r2, [r0, #16]
 801404c:	bd10      	pop	{r4, pc}

0801404e <__multiply>:
 801404e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014052:	4614      	mov	r4, r2
 8014054:	690a      	ldr	r2, [r1, #16]
 8014056:	6923      	ldr	r3, [r4, #16]
 8014058:	429a      	cmp	r2, r3
 801405a:	bfb8      	it	lt
 801405c:	460b      	movlt	r3, r1
 801405e:	4688      	mov	r8, r1
 8014060:	bfbc      	itt	lt
 8014062:	46a0      	movlt	r8, r4
 8014064:	461c      	movlt	r4, r3
 8014066:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801406a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801406e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014072:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014076:	eb07 0609 	add.w	r6, r7, r9
 801407a:	42b3      	cmp	r3, r6
 801407c:	bfb8      	it	lt
 801407e:	3101      	addlt	r1, #1
 8014080:	f7ff ff08 	bl	8013e94 <_Balloc>
 8014084:	f100 0514 	add.w	r5, r0, #20
 8014088:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801408c:	462b      	mov	r3, r5
 801408e:	2200      	movs	r2, #0
 8014090:	4573      	cmp	r3, lr
 8014092:	d316      	bcc.n	80140c2 <__multiply+0x74>
 8014094:	f104 0214 	add.w	r2, r4, #20
 8014098:	f108 0114 	add.w	r1, r8, #20
 801409c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80140a0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80140a4:	9300      	str	r3, [sp, #0]
 80140a6:	9b00      	ldr	r3, [sp, #0]
 80140a8:	9201      	str	r2, [sp, #4]
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d80c      	bhi.n	80140c8 <__multiply+0x7a>
 80140ae:	2e00      	cmp	r6, #0
 80140b0:	dd03      	ble.n	80140ba <__multiply+0x6c>
 80140b2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d05d      	beq.n	8014176 <__multiply+0x128>
 80140ba:	6106      	str	r6, [r0, #16]
 80140bc:	b003      	add	sp, #12
 80140be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140c2:	f843 2b04 	str.w	r2, [r3], #4
 80140c6:	e7e3      	b.n	8014090 <__multiply+0x42>
 80140c8:	f8b2 b000 	ldrh.w	fp, [r2]
 80140cc:	f1bb 0f00 	cmp.w	fp, #0
 80140d0:	d023      	beq.n	801411a <__multiply+0xcc>
 80140d2:	4689      	mov	r9, r1
 80140d4:	46ac      	mov	ip, r5
 80140d6:	f04f 0800 	mov.w	r8, #0
 80140da:	f859 4b04 	ldr.w	r4, [r9], #4
 80140de:	f8dc a000 	ldr.w	sl, [ip]
 80140e2:	b2a3      	uxth	r3, r4
 80140e4:	fa1f fa8a 	uxth.w	sl, sl
 80140e8:	fb0b a303 	mla	r3, fp, r3, sl
 80140ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80140f0:	f8dc 4000 	ldr.w	r4, [ip]
 80140f4:	4443      	add	r3, r8
 80140f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80140fa:	fb0b 840a 	mla	r4, fp, sl, r8
 80140fe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014102:	46e2      	mov	sl, ip
 8014104:	b29b      	uxth	r3, r3
 8014106:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801410a:	454f      	cmp	r7, r9
 801410c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014110:	f84a 3b04 	str.w	r3, [sl], #4
 8014114:	d82b      	bhi.n	801416e <__multiply+0x120>
 8014116:	f8cc 8004 	str.w	r8, [ip, #4]
 801411a:	9b01      	ldr	r3, [sp, #4]
 801411c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014120:	3204      	adds	r2, #4
 8014122:	f1ba 0f00 	cmp.w	sl, #0
 8014126:	d020      	beq.n	801416a <__multiply+0x11c>
 8014128:	682b      	ldr	r3, [r5, #0]
 801412a:	4689      	mov	r9, r1
 801412c:	46a8      	mov	r8, r5
 801412e:	f04f 0b00 	mov.w	fp, #0
 8014132:	f8b9 c000 	ldrh.w	ip, [r9]
 8014136:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801413a:	fb0a 440c 	mla	r4, sl, ip, r4
 801413e:	445c      	add	r4, fp
 8014140:	46c4      	mov	ip, r8
 8014142:	b29b      	uxth	r3, r3
 8014144:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014148:	f84c 3b04 	str.w	r3, [ip], #4
 801414c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014150:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014154:	0c1b      	lsrs	r3, r3, #16
 8014156:	fb0a b303 	mla	r3, sl, r3, fp
 801415a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801415e:	454f      	cmp	r7, r9
 8014160:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014164:	d805      	bhi.n	8014172 <__multiply+0x124>
 8014166:	f8c8 3004 	str.w	r3, [r8, #4]
 801416a:	3504      	adds	r5, #4
 801416c:	e79b      	b.n	80140a6 <__multiply+0x58>
 801416e:	46d4      	mov	ip, sl
 8014170:	e7b3      	b.n	80140da <__multiply+0x8c>
 8014172:	46e0      	mov	r8, ip
 8014174:	e7dd      	b.n	8014132 <__multiply+0xe4>
 8014176:	3e01      	subs	r6, #1
 8014178:	e799      	b.n	80140ae <__multiply+0x60>
	...

0801417c <__pow5mult>:
 801417c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014180:	4615      	mov	r5, r2
 8014182:	f012 0203 	ands.w	r2, r2, #3
 8014186:	4606      	mov	r6, r0
 8014188:	460f      	mov	r7, r1
 801418a:	d007      	beq.n	801419c <__pow5mult+0x20>
 801418c:	3a01      	subs	r2, #1
 801418e:	4c21      	ldr	r4, [pc, #132]	; (8014214 <__pow5mult+0x98>)
 8014190:	2300      	movs	r3, #0
 8014192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014196:	f7ff fec8 	bl	8013f2a <__multadd>
 801419a:	4607      	mov	r7, r0
 801419c:	10ad      	asrs	r5, r5, #2
 801419e:	d035      	beq.n	801420c <__pow5mult+0x90>
 80141a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80141a2:	b93c      	cbnz	r4, 80141b4 <__pow5mult+0x38>
 80141a4:	2010      	movs	r0, #16
 80141a6:	f7fd fe6d 	bl	8011e84 <malloc>
 80141aa:	6270      	str	r0, [r6, #36]	; 0x24
 80141ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80141b0:	6004      	str	r4, [r0, #0]
 80141b2:	60c4      	str	r4, [r0, #12]
 80141b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80141b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80141bc:	b94c      	cbnz	r4, 80141d2 <__pow5mult+0x56>
 80141be:	f240 2171 	movw	r1, #625	; 0x271
 80141c2:	4630      	mov	r0, r6
 80141c4:	f7ff ff3a 	bl	801403c <__i2b>
 80141c8:	2300      	movs	r3, #0
 80141ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80141ce:	4604      	mov	r4, r0
 80141d0:	6003      	str	r3, [r0, #0]
 80141d2:	f04f 0800 	mov.w	r8, #0
 80141d6:	07eb      	lsls	r3, r5, #31
 80141d8:	d50a      	bpl.n	80141f0 <__pow5mult+0x74>
 80141da:	4639      	mov	r1, r7
 80141dc:	4622      	mov	r2, r4
 80141de:	4630      	mov	r0, r6
 80141e0:	f7ff ff35 	bl	801404e <__multiply>
 80141e4:	4639      	mov	r1, r7
 80141e6:	4681      	mov	r9, r0
 80141e8:	4630      	mov	r0, r6
 80141ea:	f7ff fe87 	bl	8013efc <_Bfree>
 80141ee:	464f      	mov	r7, r9
 80141f0:	106d      	asrs	r5, r5, #1
 80141f2:	d00b      	beq.n	801420c <__pow5mult+0x90>
 80141f4:	6820      	ldr	r0, [r4, #0]
 80141f6:	b938      	cbnz	r0, 8014208 <__pow5mult+0x8c>
 80141f8:	4622      	mov	r2, r4
 80141fa:	4621      	mov	r1, r4
 80141fc:	4630      	mov	r0, r6
 80141fe:	f7ff ff26 	bl	801404e <__multiply>
 8014202:	6020      	str	r0, [r4, #0]
 8014204:	f8c0 8000 	str.w	r8, [r0]
 8014208:	4604      	mov	r4, r0
 801420a:	e7e4      	b.n	80141d6 <__pow5mult+0x5a>
 801420c:	4638      	mov	r0, r7
 801420e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014212:	bf00      	nop
 8014214:	0801fe98 	.word	0x0801fe98

08014218 <__lshift>:
 8014218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801421c:	460c      	mov	r4, r1
 801421e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014222:	6923      	ldr	r3, [r4, #16]
 8014224:	6849      	ldr	r1, [r1, #4]
 8014226:	eb0a 0903 	add.w	r9, sl, r3
 801422a:	68a3      	ldr	r3, [r4, #8]
 801422c:	4607      	mov	r7, r0
 801422e:	4616      	mov	r6, r2
 8014230:	f109 0501 	add.w	r5, r9, #1
 8014234:	42ab      	cmp	r3, r5
 8014236:	db32      	blt.n	801429e <__lshift+0x86>
 8014238:	4638      	mov	r0, r7
 801423a:	f7ff fe2b 	bl	8013e94 <_Balloc>
 801423e:	2300      	movs	r3, #0
 8014240:	4680      	mov	r8, r0
 8014242:	f100 0114 	add.w	r1, r0, #20
 8014246:	461a      	mov	r2, r3
 8014248:	4553      	cmp	r3, sl
 801424a:	db2b      	blt.n	80142a4 <__lshift+0x8c>
 801424c:	6920      	ldr	r0, [r4, #16]
 801424e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014252:	f104 0314 	add.w	r3, r4, #20
 8014256:	f016 021f 	ands.w	r2, r6, #31
 801425a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801425e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014262:	d025      	beq.n	80142b0 <__lshift+0x98>
 8014264:	f1c2 0e20 	rsb	lr, r2, #32
 8014268:	2000      	movs	r0, #0
 801426a:	681e      	ldr	r6, [r3, #0]
 801426c:	468a      	mov	sl, r1
 801426e:	4096      	lsls	r6, r2
 8014270:	4330      	orrs	r0, r6
 8014272:	f84a 0b04 	str.w	r0, [sl], #4
 8014276:	f853 0b04 	ldr.w	r0, [r3], #4
 801427a:	459c      	cmp	ip, r3
 801427c:	fa20 f00e 	lsr.w	r0, r0, lr
 8014280:	d814      	bhi.n	80142ac <__lshift+0x94>
 8014282:	6048      	str	r0, [r1, #4]
 8014284:	b108      	cbz	r0, 801428a <__lshift+0x72>
 8014286:	f109 0502 	add.w	r5, r9, #2
 801428a:	3d01      	subs	r5, #1
 801428c:	4638      	mov	r0, r7
 801428e:	f8c8 5010 	str.w	r5, [r8, #16]
 8014292:	4621      	mov	r1, r4
 8014294:	f7ff fe32 	bl	8013efc <_Bfree>
 8014298:	4640      	mov	r0, r8
 801429a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801429e:	3101      	adds	r1, #1
 80142a0:	005b      	lsls	r3, r3, #1
 80142a2:	e7c7      	b.n	8014234 <__lshift+0x1c>
 80142a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80142a8:	3301      	adds	r3, #1
 80142aa:	e7cd      	b.n	8014248 <__lshift+0x30>
 80142ac:	4651      	mov	r1, sl
 80142ae:	e7dc      	b.n	801426a <__lshift+0x52>
 80142b0:	3904      	subs	r1, #4
 80142b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80142b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80142ba:	459c      	cmp	ip, r3
 80142bc:	d8f9      	bhi.n	80142b2 <__lshift+0x9a>
 80142be:	e7e4      	b.n	801428a <__lshift+0x72>

080142c0 <__mcmp>:
 80142c0:	6903      	ldr	r3, [r0, #16]
 80142c2:	690a      	ldr	r2, [r1, #16]
 80142c4:	1a9b      	subs	r3, r3, r2
 80142c6:	b530      	push	{r4, r5, lr}
 80142c8:	d10c      	bne.n	80142e4 <__mcmp+0x24>
 80142ca:	0092      	lsls	r2, r2, #2
 80142cc:	3014      	adds	r0, #20
 80142ce:	3114      	adds	r1, #20
 80142d0:	1884      	adds	r4, r0, r2
 80142d2:	4411      	add	r1, r2
 80142d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80142d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80142dc:	4295      	cmp	r5, r2
 80142de:	d003      	beq.n	80142e8 <__mcmp+0x28>
 80142e0:	d305      	bcc.n	80142ee <__mcmp+0x2e>
 80142e2:	2301      	movs	r3, #1
 80142e4:	4618      	mov	r0, r3
 80142e6:	bd30      	pop	{r4, r5, pc}
 80142e8:	42a0      	cmp	r0, r4
 80142ea:	d3f3      	bcc.n	80142d4 <__mcmp+0x14>
 80142ec:	e7fa      	b.n	80142e4 <__mcmp+0x24>
 80142ee:	f04f 33ff 	mov.w	r3, #4294967295
 80142f2:	e7f7      	b.n	80142e4 <__mcmp+0x24>

080142f4 <__mdiff>:
 80142f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142f8:	460d      	mov	r5, r1
 80142fa:	4607      	mov	r7, r0
 80142fc:	4611      	mov	r1, r2
 80142fe:	4628      	mov	r0, r5
 8014300:	4614      	mov	r4, r2
 8014302:	f7ff ffdd 	bl	80142c0 <__mcmp>
 8014306:	1e06      	subs	r6, r0, #0
 8014308:	d108      	bne.n	801431c <__mdiff+0x28>
 801430a:	4631      	mov	r1, r6
 801430c:	4638      	mov	r0, r7
 801430e:	f7ff fdc1 	bl	8013e94 <_Balloc>
 8014312:	2301      	movs	r3, #1
 8014314:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801431c:	bfa4      	itt	ge
 801431e:	4623      	movge	r3, r4
 8014320:	462c      	movge	r4, r5
 8014322:	4638      	mov	r0, r7
 8014324:	6861      	ldr	r1, [r4, #4]
 8014326:	bfa6      	itte	ge
 8014328:	461d      	movge	r5, r3
 801432a:	2600      	movge	r6, #0
 801432c:	2601      	movlt	r6, #1
 801432e:	f7ff fdb1 	bl	8013e94 <_Balloc>
 8014332:	692b      	ldr	r3, [r5, #16]
 8014334:	60c6      	str	r6, [r0, #12]
 8014336:	6926      	ldr	r6, [r4, #16]
 8014338:	f105 0914 	add.w	r9, r5, #20
 801433c:	f104 0214 	add.w	r2, r4, #20
 8014340:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014344:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014348:	f100 0514 	add.w	r5, r0, #20
 801434c:	f04f 0e00 	mov.w	lr, #0
 8014350:	f852 ab04 	ldr.w	sl, [r2], #4
 8014354:	f859 4b04 	ldr.w	r4, [r9], #4
 8014358:	fa1e f18a 	uxtah	r1, lr, sl
 801435c:	b2a3      	uxth	r3, r4
 801435e:	1ac9      	subs	r1, r1, r3
 8014360:	0c23      	lsrs	r3, r4, #16
 8014362:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014366:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801436a:	b289      	uxth	r1, r1
 801436c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014370:	45c8      	cmp	r8, r9
 8014372:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014376:	4694      	mov	ip, r2
 8014378:	f845 3b04 	str.w	r3, [r5], #4
 801437c:	d8e8      	bhi.n	8014350 <__mdiff+0x5c>
 801437e:	45bc      	cmp	ip, r7
 8014380:	d304      	bcc.n	801438c <__mdiff+0x98>
 8014382:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014386:	b183      	cbz	r3, 80143aa <__mdiff+0xb6>
 8014388:	6106      	str	r6, [r0, #16]
 801438a:	e7c5      	b.n	8014318 <__mdiff+0x24>
 801438c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014390:	fa1e f381 	uxtah	r3, lr, r1
 8014394:	141a      	asrs	r2, r3, #16
 8014396:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801439a:	b29b      	uxth	r3, r3
 801439c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80143a4:	f845 3b04 	str.w	r3, [r5], #4
 80143a8:	e7e9      	b.n	801437e <__mdiff+0x8a>
 80143aa:	3e01      	subs	r6, #1
 80143ac:	e7e9      	b.n	8014382 <__mdiff+0x8e>

080143ae <__d2b>:
 80143ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143b2:	460e      	mov	r6, r1
 80143b4:	2101      	movs	r1, #1
 80143b6:	ec59 8b10 	vmov	r8, r9, d0
 80143ba:	4615      	mov	r5, r2
 80143bc:	f7ff fd6a 	bl	8013e94 <_Balloc>
 80143c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80143c4:	4607      	mov	r7, r0
 80143c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80143ca:	bb34      	cbnz	r4, 801441a <__d2b+0x6c>
 80143cc:	9301      	str	r3, [sp, #4]
 80143ce:	f1b8 0300 	subs.w	r3, r8, #0
 80143d2:	d027      	beq.n	8014424 <__d2b+0x76>
 80143d4:	a802      	add	r0, sp, #8
 80143d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80143da:	f7ff fe00 	bl	8013fde <__lo0bits>
 80143de:	9900      	ldr	r1, [sp, #0]
 80143e0:	b1f0      	cbz	r0, 8014420 <__d2b+0x72>
 80143e2:	9a01      	ldr	r2, [sp, #4]
 80143e4:	f1c0 0320 	rsb	r3, r0, #32
 80143e8:	fa02 f303 	lsl.w	r3, r2, r3
 80143ec:	430b      	orrs	r3, r1
 80143ee:	40c2      	lsrs	r2, r0
 80143f0:	617b      	str	r3, [r7, #20]
 80143f2:	9201      	str	r2, [sp, #4]
 80143f4:	9b01      	ldr	r3, [sp, #4]
 80143f6:	61bb      	str	r3, [r7, #24]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	bf14      	ite	ne
 80143fc:	2102      	movne	r1, #2
 80143fe:	2101      	moveq	r1, #1
 8014400:	6139      	str	r1, [r7, #16]
 8014402:	b1c4      	cbz	r4, 8014436 <__d2b+0x88>
 8014404:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014408:	4404      	add	r4, r0
 801440a:	6034      	str	r4, [r6, #0]
 801440c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014410:	6028      	str	r0, [r5, #0]
 8014412:	4638      	mov	r0, r7
 8014414:	b003      	add	sp, #12
 8014416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801441a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801441e:	e7d5      	b.n	80143cc <__d2b+0x1e>
 8014420:	6179      	str	r1, [r7, #20]
 8014422:	e7e7      	b.n	80143f4 <__d2b+0x46>
 8014424:	a801      	add	r0, sp, #4
 8014426:	f7ff fdda 	bl	8013fde <__lo0bits>
 801442a:	9b01      	ldr	r3, [sp, #4]
 801442c:	617b      	str	r3, [r7, #20]
 801442e:	2101      	movs	r1, #1
 8014430:	6139      	str	r1, [r7, #16]
 8014432:	3020      	adds	r0, #32
 8014434:	e7e5      	b.n	8014402 <__d2b+0x54>
 8014436:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801443a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801443e:	6030      	str	r0, [r6, #0]
 8014440:	6918      	ldr	r0, [r3, #16]
 8014442:	f7ff fdad 	bl	8013fa0 <__hi0bits>
 8014446:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801444a:	e7e1      	b.n	8014410 <__d2b+0x62>

0801444c <_realloc_r>:
 801444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801444e:	4607      	mov	r7, r0
 8014450:	4614      	mov	r4, r2
 8014452:	460e      	mov	r6, r1
 8014454:	b921      	cbnz	r1, 8014460 <_realloc_r+0x14>
 8014456:	4611      	mov	r1, r2
 8014458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801445c:	f7fd bdaa 	b.w	8011fb4 <_malloc_r>
 8014460:	b922      	cbnz	r2, 801446c <_realloc_r+0x20>
 8014462:	f7fd fd59 	bl	8011f18 <_free_r>
 8014466:	4625      	mov	r5, r4
 8014468:	4628      	mov	r0, r5
 801446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801446c:	f000 fa12 	bl	8014894 <_malloc_usable_size_r>
 8014470:	42a0      	cmp	r0, r4
 8014472:	d20f      	bcs.n	8014494 <_realloc_r+0x48>
 8014474:	4621      	mov	r1, r4
 8014476:	4638      	mov	r0, r7
 8014478:	f7fd fd9c 	bl	8011fb4 <_malloc_r>
 801447c:	4605      	mov	r5, r0
 801447e:	2800      	cmp	r0, #0
 8014480:	d0f2      	beq.n	8014468 <_realloc_r+0x1c>
 8014482:	4631      	mov	r1, r6
 8014484:	4622      	mov	r2, r4
 8014486:	f7fd fd0d 	bl	8011ea4 <memcpy>
 801448a:	4631      	mov	r1, r6
 801448c:	4638      	mov	r0, r7
 801448e:	f7fd fd43 	bl	8011f18 <_free_r>
 8014492:	e7e9      	b.n	8014468 <_realloc_r+0x1c>
 8014494:	4635      	mov	r5, r6
 8014496:	e7e7      	b.n	8014468 <_realloc_r+0x1c>

08014498 <__ssputs_r>:
 8014498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801449c:	688e      	ldr	r6, [r1, #8]
 801449e:	429e      	cmp	r6, r3
 80144a0:	4682      	mov	sl, r0
 80144a2:	460c      	mov	r4, r1
 80144a4:	4690      	mov	r8, r2
 80144a6:	4699      	mov	r9, r3
 80144a8:	d837      	bhi.n	801451a <__ssputs_r+0x82>
 80144aa:	898a      	ldrh	r2, [r1, #12]
 80144ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80144b0:	d031      	beq.n	8014516 <__ssputs_r+0x7e>
 80144b2:	6825      	ldr	r5, [r4, #0]
 80144b4:	6909      	ldr	r1, [r1, #16]
 80144b6:	1a6f      	subs	r7, r5, r1
 80144b8:	6965      	ldr	r5, [r4, #20]
 80144ba:	2302      	movs	r3, #2
 80144bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80144c4:	f109 0301 	add.w	r3, r9, #1
 80144c8:	443b      	add	r3, r7
 80144ca:	429d      	cmp	r5, r3
 80144cc:	bf38      	it	cc
 80144ce:	461d      	movcc	r5, r3
 80144d0:	0553      	lsls	r3, r2, #21
 80144d2:	d530      	bpl.n	8014536 <__ssputs_r+0x9e>
 80144d4:	4629      	mov	r1, r5
 80144d6:	f7fd fd6d 	bl	8011fb4 <_malloc_r>
 80144da:	4606      	mov	r6, r0
 80144dc:	b950      	cbnz	r0, 80144f4 <__ssputs_r+0x5c>
 80144de:	230c      	movs	r3, #12
 80144e0:	f8ca 3000 	str.w	r3, [sl]
 80144e4:	89a3      	ldrh	r3, [r4, #12]
 80144e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144ea:	81a3      	strh	r3, [r4, #12]
 80144ec:	f04f 30ff 	mov.w	r0, #4294967295
 80144f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144f4:	463a      	mov	r2, r7
 80144f6:	6921      	ldr	r1, [r4, #16]
 80144f8:	f7fd fcd4 	bl	8011ea4 <memcpy>
 80144fc:	89a3      	ldrh	r3, [r4, #12]
 80144fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014506:	81a3      	strh	r3, [r4, #12]
 8014508:	6126      	str	r6, [r4, #16]
 801450a:	6165      	str	r5, [r4, #20]
 801450c:	443e      	add	r6, r7
 801450e:	1bed      	subs	r5, r5, r7
 8014510:	6026      	str	r6, [r4, #0]
 8014512:	60a5      	str	r5, [r4, #8]
 8014514:	464e      	mov	r6, r9
 8014516:	454e      	cmp	r6, r9
 8014518:	d900      	bls.n	801451c <__ssputs_r+0x84>
 801451a:	464e      	mov	r6, r9
 801451c:	4632      	mov	r2, r6
 801451e:	4641      	mov	r1, r8
 8014520:	6820      	ldr	r0, [r4, #0]
 8014522:	f7fd fcca 	bl	8011eba <memmove>
 8014526:	68a3      	ldr	r3, [r4, #8]
 8014528:	1b9b      	subs	r3, r3, r6
 801452a:	60a3      	str	r3, [r4, #8]
 801452c:	6823      	ldr	r3, [r4, #0]
 801452e:	441e      	add	r6, r3
 8014530:	6026      	str	r6, [r4, #0]
 8014532:	2000      	movs	r0, #0
 8014534:	e7dc      	b.n	80144f0 <__ssputs_r+0x58>
 8014536:	462a      	mov	r2, r5
 8014538:	f7ff ff88 	bl	801444c <_realloc_r>
 801453c:	4606      	mov	r6, r0
 801453e:	2800      	cmp	r0, #0
 8014540:	d1e2      	bne.n	8014508 <__ssputs_r+0x70>
 8014542:	6921      	ldr	r1, [r4, #16]
 8014544:	4650      	mov	r0, sl
 8014546:	f7fd fce7 	bl	8011f18 <_free_r>
 801454a:	e7c8      	b.n	80144de <__ssputs_r+0x46>

0801454c <_svfiprintf_r>:
 801454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014550:	461d      	mov	r5, r3
 8014552:	898b      	ldrh	r3, [r1, #12]
 8014554:	061f      	lsls	r7, r3, #24
 8014556:	b09d      	sub	sp, #116	; 0x74
 8014558:	4680      	mov	r8, r0
 801455a:	460c      	mov	r4, r1
 801455c:	4616      	mov	r6, r2
 801455e:	d50f      	bpl.n	8014580 <_svfiprintf_r+0x34>
 8014560:	690b      	ldr	r3, [r1, #16]
 8014562:	b96b      	cbnz	r3, 8014580 <_svfiprintf_r+0x34>
 8014564:	2140      	movs	r1, #64	; 0x40
 8014566:	f7fd fd25 	bl	8011fb4 <_malloc_r>
 801456a:	6020      	str	r0, [r4, #0]
 801456c:	6120      	str	r0, [r4, #16]
 801456e:	b928      	cbnz	r0, 801457c <_svfiprintf_r+0x30>
 8014570:	230c      	movs	r3, #12
 8014572:	f8c8 3000 	str.w	r3, [r8]
 8014576:	f04f 30ff 	mov.w	r0, #4294967295
 801457a:	e0c8      	b.n	801470e <_svfiprintf_r+0x1c2>
 801457c:	2340      	movs	r3, #64	; 0x40
 801457e:	6163      	str	r3, [r4, #20]
 8014580:	2300      	movs	r3, #0
 8014582:	9309      	str	r3, [sp, #36]	; 0x24
 8014584:	2320      	movs	r3, #32
 8014586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801458a:	2330      	movs	r3, #48	; 0x30
 801458c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014590:	9503      	str	r5, [sp, #12]
 8014592:	f04f 0b01 	mov.w	fp, #1
 8014596:	4637      	mov	r7, r6
 8014598:	463d      	mov	r5, r7
 801459a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801459e:	b10b      	cbz	r3, 80145a4 <_svfiprintf_r+0x58>
 80145a0:	2b25      	cmp	r3, #37	; 0x25
 80145a2:	d13e      	bne.n	8014622 <_svfiprintf_r+0xd6>
 80145a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80145a8:	d00b      	beq.n	80145c2 <_svfiprintf_r+0x76>
 80145aa:	4653      	mov	r3, sl
 80145ac:	4632      	mov	r2, r6
 80145ae:	4621      	mov	r1, r4
 80145b0:	4640      	mov	r0, r8
 80145b2:	f7ff ff71 	bl	8014498 <__ssputs_r>
 80145b6:	3001      	adds	r0, #1
 80145b8:	f000 80a4 	beq.w	8014704 <_svfiprintf_r+0x1b8>
 80145bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145be:	4453      	add	r3, sl
 80145c0:	9309      	str	r3, [sp, #36]	; 0x24
 80145c2:	783b      	ldrb	r3, [r7, #0]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	f000 809d 	beq.w	8014704 <_svfiprintf_r+0x1b8>
 80145ca:	2300      	movs	r3, #0
 80145cc:	f04f 32ff 	mov.w	r2, #4294967295
 80145d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145d4:	9304      	str	r3, [sp, #16]
 80145d6:	9307      	str	r3, [sp, #28]
 80145d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80145dc:	931a      	str	r3, [sp, #104]	; 0x68
 80145de:	462f      	mov	r7, r5
 80145e0:	2205      	movs	r2, #5
 80145e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80145e6:	4850      	ldr	r0, [pc, #320]	; (8014728 <_svfiprintf_r+0x1dc>)
 80145e8:	f7eb fe0a 	bl	8000200 <memchr>
 80145ec:	9b04      	ldr	r3, [sp, #16]
 80145ee:	b9d0      	cbnz	r0, 8014626 <_svfiprintf_r+0xda>
 80145f0:	06d9      	lsls	r1, r3, #27
 80145f2:	bf44      	itt	mi
 80145f4:	2220      	movmi	r2, #32
 80145f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80145fa:	071a      	lsls	r2, r3, #28
 80145fc:	bf44      	itt	mi
 80145fe:	222b      	movmi	r2, #43	; 0x2b
 8014600:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014604:	782a      	ldrb	r2, [r5, #0]
 8014606:	2a2a      	cmp	r2, #42	; 0x2a
 8014608:	d015      	beq.n	8014636 <_svfiprintf_r+0xea>
 801460a:	9a07      	ldr	r2, [sp, #28]
 801460c:	462f      	mov	r7, r5
 801460e:	2000      	movs	r0, #0
 8014610:	250a      	movs	r5, #10
 8014612:	4639      	mov	r1, r7
 8014614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014618:	3b30      	subs	r3, #48	; 0x30
 801461a:	2b09      	cmp	r3, #9
 801461c:	d94d      	bls.n	80146ba <_svfiprintf_r+0x16e>
 801461e:	b1b8      	cbz	r0, 8014650 <_svfiprintf_r+0x104>
 8014620:	e00f      	b.n	8014642 <_svfiprintf_r+0xf6>
 8014622:	462f      	mov	r7, r5
 8014624:	e7b8      	b.n	8014598 <_svfiprintf_r+0x4c>
 8014626:	4a40      	ldr	r2, [pc, #256]	; (8014728 <_svfiprintf_r+0x1dc>)
 8014628:	1a80      	subs	r0, r0, r2
 801462a:	fa0b f000 	lsl.w	r0, fp, r0
 801462e:	4318      	orrs	r0, r3
 8014630:	9004      	str	r0, [sp, #16]
 8014632:	463d      	mov	r5, r7
 8014634:	e7d3      	b.n	80145de <_svfiprintf_r+0x92>
 8014636:	9a03      	ldr	r2, [sp, #12]
 8014638:	1d11      	adds	r1, r2, #4
 801463a:	6812      	ldr	r2, [r2, #0]
 801463c:	9103      	str	r1, [sp, #12]
 801463e:	2a00      	cmp	r2, #0
 8014640:	db01      	blt.n	8014646 <_svfiprintf_r+0xfa>
 8014642:	9207      	str	r2, [sp, #28]
 8014644:	e004      	b.n	8014650 <_svfiprintf_r+0x104>
 8014646:	4252      	negs	r2, r2
 8014648:	f043 0302 	orr.w	r3, r3, #2
 801464c:	9207      	str	r2, [sp, #28]
 801464e:	9304      	str	r3, [sp, #16]
 8014650:	783b      	ldrb	r3, [r7, #0]
 8014652:	2b2e      	cmp	r3, #46	; 0x2e
 8014654:	d10c      	bne.n	8014670 <_svfiprintf_r+0x124>
 8014656:	787b      	ldrb	r3, [r7, #1]
 8014658:	2b2a      	cmp	r3, #42	; 0x2a
 801465a:	d133      	bne.n	80146c4 <_svfiprintf_r+0x178>
 801465c:	9b03      	ldr	r3, [sp, #12]
 801465e:	1d1a      	adds	r2, r3, #4
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	9203      	str	r2, [sp, #12]
 8014664:	2b00      	cmp	r3, #0
 8014666:	bfb8      	it	lt
 8014668:	f04f 33ff 	movlt.w	r3, #4294967295
 801466c:	3702      	adds	r7, #2
 801466e:	9305      	str	r3, [sp, #20]
 8014670:	4d2e      	ldr	r5, [pc, #184]	; (801472c <_svfiprintf_r+0x1e0>)
 8014672:	7839      	ldrb	r1, [r7, #0]
 8014674:	2203      	movs	r2, #3
 8014676:	4628      	mov	r0, r5
 8014678:	f7eb fdc2 	bl	8000200 <memchr>
 801467c:	b138      	cbz	r0, 801468e <_svfiprintf_r+0x142>
 801467e:	2340      	movs	r3, #64	; 0x40
 8014680:	1b40      	subs	r0, r0, r5
 8014682:	fa03 f000 	lsl.w	r0, r3, r0
 8014686:	9b04      	ldr	r3, [sp, #16]
 8014688:	4303      	orrs	r3, r0
 801468a:	3701      	adds	r7, #1
 801468c:	9304      	str	r3, [sp, #16]
 801468e:	7839      	ldrb	r1, [r7, #0]
 8014690:	4827      	ldr	r0, [pc, #156]	; (8014730 <_svfiprintf_r+0x1e4>)
 8014692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014696:	2206      	movs	r2, #6
 8014698:	1c7e      	adds	r6, r7, #1
 801469a:	f7eb fdb1 	bl	8000200 <memchr>
 801469e:	2800      	cmp	r0, #0
 80146a0:	d038      	beq.n	8014714 <_svfiprintf_r+0x1c8>
 80146a2:	4b24      	ldr	r3, [pc, #144]	; (8014734 <_svfiprintf_r+0x1e8>)
 80146a4:	bb13      	cbnz	r3, 80146ec <_svfiprintf_r+0x1a0>
 80146a6:	9b03      	ldr	r3, [sp, #12]
 80146a8:	3307      	adds	r3, #7
 80146aa:	f023 0307 	bic.w	r3, r3, #7
 80146ae:	3308      	adds	r3, #8
 80146b0:	9303      	str	r3, [sp, #12]
 80146b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146b4:	444b      	add	r3, r9
 80146b6:	9309      	str	r3, [sp, #36]	; 0x24
 80146b8:	e76d      	b.n	8014596 <_svfiprintf_r+0x4a>
 80146ba:	fb05 3202 	mla	r2, r5, r2, r3
 80146be:	2001      	movs	r0, #1
 80146c0:	460f      	mov	r7, r1
 80146c2:	e7a6      	b.n	8014612 <_svfiprintf_r+0xc6>
 80146c4:	2300      	movs	r3, #0
 80146c6:	3701      	adds	r7, #1
 80146c8:	9305      	str	r3, [sp, #20]
 80146ca:	4619      	mov	r1, r3
 80146cc:	250a      	movs	r5, #10
 80146ce:	4638      	mov	r0, r7
 80146d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146d4:	3a30      	subs	r2, #48	; 0x30
 80146d6:	2a09      	cmp	r2, #9
 80146d8:	d903      	bls.n	80146e2 <_svfiprintf_r+0x196>
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d0c8      	beq.n	8014670 <_svfiprintf_r+0x124>
 80146de:	9105      	str	r1, [sp, #20]
 80146e0:	e7c6      	b.n	8014670 <_svfiprintf_r+0x124>
 80146e2:	fb05 2101 	mla	r1, r5, r1, r2
 80146e6:	2301      	movs	r3, #1
 80146e8:	4607      	mov	r7, r0
 80146ea:	e7f0      	b.n	80146ce <_svfiprintf_r+0x182>
 80146ec:	ab03      	add	r3, sp, #12
 80146ee:	9300      	str	r3, [sp, #0]
 80146f0:	4622      	mov	r2, r4
 80146f2:	4b11      	ldr	r3, [pc, #68]	; (8014738 <_svfiprintf_r+0x1ec>)
 80146f4:	a904      	add	r1, sp, #16
 80146f6:	4640      	mov	r0, r8
 80146f8:	f7fd fe8a 	bl	8012410 <_printf_float>
 80146fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014700:	4681      	mov	r9, r0
 8014702:	d1d6      	bne.n	80146b2 <_svfiprintf_r+0x166>
 8014704:	89a3      	ldrh	r3, [r4, #12]
 8014706:	065b      	lsls	r3, r3, #25
 8014708:	f53f af35 	bmi.w	8014576 <_svfiprintf_r+0x2a>
 801470c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801470e:	b01d      	add	sp, #116	; 0x74
 8014710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014714:	ab03      	add	r3, sp, #12
 8014716:	9300      	str	r3, [sp, #0]
 8014718:	4622      	mov	r2, r4
 801471a:	4b07      	ldr	r3, [pc, #28]	; (8014738 <_svfiprintf_r+0x1ec>)
 801471c:	a904      	add	r1, sp, #16
 801471e:	4640      	mov	r0, r8
 8014720:	f7fe f92c 	bl	801297c <_printf_i>
 8014724:	e7ea      	b.n	80146fc <_svfiprintf_r+0x1b0>
 8014726:	bf00      	nop
 8014728:	0801fcf4 	.word	0x0801fcf4
 801472c:	0801fcfa 	.word	0x0801fcfa
 8014730:	0801fcfe 	.word	0x0801fcfe
 8014734:	08012411 	.word	0x08012411
 8014738:	08014499 	.word	0x08014499

0801473c <__sread>:
 801473c:	b510      	push	{r4, lr}
 801473e:	460c      	mov	r4, r1
 8014740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014744:	f000 f8ae 	bl	80148a4 <_read_r>
 8014748:	2800      	cmp	r0, #0
 801474a:	bfab      	itete	ge
 801474c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801474e:	89a3      	ldrhlt	r3, [r4, #12]
 8014750:	181b      	addge	r3, r3, r0
 8014752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014756:	bfac      	ite	ge
 8014758:	6563      	strge	r3, [r4, #84]	; 0x54
 801475a:	81a3      	strhlt	r3, [r4, #12]
 801475c:	bd10      	pop	{r4, pc}

0801475e <__swrite>:
 801475e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014762:	461f      	mov	r7, r3
 8014764:	898b      	ldrh	r3, [r1, #12]
 8014766:	05db      	lsls	r3, r3, #23
 8014768:	4605      	mov	r5, r0
 801476a:	460c      	mov	r4, r1
 801476c:	4616      	mov	r6, r2
 801476e:	d505      	bpl.n	801477c <__swrite+0x1e>
 8014770:	2302      	movs	r3, #2
 8014772:	2200      	movs	r2, #0
 8014774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014778:	f000 f868 	bl	801484c <_lseek_r>
 801477c:	89a3      	ldrh	r3, [r4, #12]
 801477e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014786:	81a3      	strh	r3, [r4, #12]
 8014788:	4632      	mov	r2, r6
 801478a:	463b      	mov	r3, r7
 801478c:	4628      	mov	r0, r5
 801478e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014792:	f000 b817 	b.w	80147c4 <_write_r>

08014796 <__sseek>:
 8014796:	b510      	push	{r4, lr}
 8014798:	460c      	mov	r4, r1
 801479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801479e:	f000 f855 	bl	801484c <_lseek_r>
 80147a2:	1c43      	adds	r3, r0, #1
 80147a4:	89a3      	ldrh	r3, [r4, #12]
 80147a6:	bf15      	itete	ne
 80147a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80147aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80147ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80147b2:	81a3      	strheq	r3, [r4, #12]
 80147b4:	bf18      	it	ne
 80147b6:	81a3      	strhne	r3, [r4, #12]
 80147b8:	bd10      	pop	{r4, pc}

080147ba <__sclose>:
 80147ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147be:	f000 b813 	b.w	80147e8 <_close_r>
	...

080147c4 <_write_r>:
 80147c4:	b538      	push	{r3, r4, r5, lr}
 80147c6:	4c07      	ldr	r4, [pc, #28]	; (80147e4 <_write_r+0x20>)
 80147c8:	4605      	mov	r5, r0
 80147ca:	4608      	mov	r0, r1
 80147cc:	4611      	mov	r1, r2
 80147ce:	2200      	movs	r2, #0
 80147d0:	6022      	str	r2, [r4, #0]
 80147d2:	461a      	mov	r2, r3
 80147d4:	f7fa fcb9 	bl	800f14a <_write>
 80147d8:	1c43      	adds	r3, r0, #1
 80147da:	d102      	bne.n	80147e2 <_write_r+0x1e>
 80147dc:	6823      	ldr	r3, [r4, #0]
 80147de:	b103      	cbz	r3, 80147e2 <_write_r+0x1e>
 80147e0:	602b      	str	r3, [r5, #0]
 80147e2:	bd38      	pop	{r3, r4, r5, pc}
 80147e4:	20000304 	.word	0x20000304

080147e8 <_close_r>:
 80147e8:	b538      	push	{r3, r4, r5, lr}
 80147ea:	4c06      	ldr	r4, [pc, #24]	; (8014804 <_close_r+0x1c>)
 80147ec:	2300      	movs	r3, #0
 80147ee:	4605      	mov	r5, r0
 80147f0:	4608      	mov	r0, r1
 80147f2:	6023      	str	r3, [r4, #0]
 80147f4:	f7fa fcc5 	bl	800f182 <_close>
 80147f8:	1c43      	adds	r3, r0, #1
 80147fa:	d102      	bne.n	8014802 <_close_r+0x1a>
 80147fc:	6823      	ldr	r3, [r4, #0]
 80147fe:	b103      	cbz	r3, 8014802 <_close_r+0x1a>
 8014800:	602b      	str	r3, [r5, #0]
 8014802:	bd38      	pop	{r3, r4, r5, pc}
 8014804:	20000304 	.word	0x20000304

08014808 <_fstat_r>:
 8014808:	b538      	push	{r3, r4, r5, lr}
 801480a:	4c07      	ldr	r4, [pc, #28]	; (8014828 <_fstat_r+0x20>)
 801480c:	2300      	movs	r3, #0
 801480e:	4605      	mov	r5, r0
 8014810:	4608      	mov	r0, r1
 8014812:	4611      	mov	r1, r2
 8014814:	6023      	str	r3, [r4, #0]
 8014816:	f7fa fcc0 	bl	800f19a <_fstat>
 801481a:	1c43      	adds	r3, r0, #1
 801481c:	d102      	bne.n	8014824 <_fstat_r+0x1c>
 801481e:	6823      	ldr	r3, [r4, #0]
 8014820:	b103      	cbz	r3, 8014824 <_fstat_r+0x1c>
 8014822:	602b      	str	r3, [r5, #0]
 8014824:	bd38      	pop	{r3, r4, r5, pc}
 8014826:	bf00      	nop
 8014828:	20000304 	.word	0x20000304

0801482c <_isatty_r>:
 801482c:	b538      	push	{r3, r4, r5, lr}
 801482e:	4c06      	ldr	r4, [pc, #24]	; (8014848 <_isatty_r+0x1c>)
 8014830:	2300      	movs	r3, #0
 8014832:	4605      	mov	r5, r0
 8014834:	4608      	mov	r0, r1
 8014836:	6023      	str	r3, [r4, #0]
 8014838:	f7fa fcbf 	bl	800f1ba <_isatty>
 801483c:	1c43      	adds	r3, r0, #1
 801483e:	d102      	bne.n	8014846 <_isatty_r+0x1a>
 8014840:	6823      	ldr	r3, [r4, #0]
 8014842:	b103      	cbz	r3, 8014846 <_isatty_r+0x1a>
 8014844:	602b      	str	r3, [r5, #0]
 8014846:	bd38      	pop	{r3, r4, r5, pc}
 8014848:	20000304 	.word	0x20000304

0801484c <_lseek_r>:
 801484c:	b538      	push	{r3, r4, r5, lr}
 801484e:	4c07      	ldr	r4, [pc, #28]	; (801486c <_lseek_r+0x20>)
 8014850:	4605      	mov	r5, r0
 8014852:	4608      	mov	r0, r1
 8014854:	4611      	mov	r1, r2
 8014856:	2200      	movs	r2, #0
 8014858:	6022      	str	r2, [r4, #0]
 801485a:	461a      	mov	r2, r3
 801485c:	f7fa fcb8 	bl	800f1d0 <_lseek>
 8014860:	1c43      	adds	r3, r0, #1
 8014862:	d102      	bne.n	801486a <_lseek_r+0x1e>
 8014864:	6823      	ldr	r3, [r4, #0]
 8014866:	b103      	cbz	r3, 801486a <_lseek_r+0x1e>
 8014868:	602b      	str	r3, [r5, #0]
 801486a:	bd38      	pop	{r3, r4, r5, pc}
 801486c:	20000304 	.word	0x20000304

08014870 <__ascii_mbtowc>:
 8014870:	b082      	sub	sp, #8
 8014872:	b901      	cbnz	r1, 8014876 <__ascii_mbtowc+0x6>
 8014874:	a901      	add	r1, sp, #4
 8014876:	b142      	cbz	r2, 801488a <__ascii_mbtowc+0x1a>
 8014878:	b14b      	cbz	r3, 801488e <__ascii_mbtowc+0x1e>
 801487a:	7813      	ldrb	r3, [r2, #0]
 801487c:	600b      	str	r3, [r1, #0]
 801487e:	7812      	ldrb	r2, [r2, #0]
 8014880:	1c10      	adds	r0, r2, #0
 8014882:	bf18      	it	ne
 8014884:	2001      	movne	r0, #1
 8014886:	b002      	add	sp, #8
 8014888:	4770      	bx	lr
 801488a:	4610      	mov	r0, r2
 801488c:	e7fb      	b.n	8014886 <__ascii_mbtowc+0x16>
 801488e:	f06f 0001 	mvn.w	r0, #1
 8014892:	e7f8      	b.n	8014886 <__ascii_mbtowc+0x16>

08014894 <_malloc_usable_size_r>:
 8014894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014898:	1f18      	subs	r0, r3, #4
 801489a:	2b00      	cmp	r3, #0
 801489c:	bfbc      	itt	lt
 801489e:	580b      	ldrlt	r3, [r1, r0]
 80148a0:	18c0      	addlt	r0, r0, r3
 80148a2:	4770      	bx	lr

080148a4 <_read_r>:
 80148a4:	b538      	push	{r3, r4, r5, lr}
 80148a6:	4c07      	ldr	r4, [pc, #28]	; (80148c4 <_read_r+0x20>)
 80148a8:	4605      	mov	r5, r0
 80148aa:	4608      	mov	r0, r1
 80148ac:	4611      	mov	r1, r2
 80148ae:	2200      	movs	r2, #0
 80148b0:	6022      	str	r2, [r4, #0]
 80148b2:	461a      	mov	r2, r3
 80148b4:	f7fa fc2c 	bl	800f110 <_read>
 80148b8:	1c43      	adds	r3, r0, #1
 80148ba:	d102      	bne.n	80148c2 <_read_r+0x1e>
 80148bc:	6823      	ldr	r3, [r4, #0]
 80148be:	b103      	cbz	r3, 80148c2 <_read_r+0x1e>
 80148c0:	602b      	str	r3, [r5, #0]
 80148c2:	bd38      	pop	{r3, r4, r5, pc}
 80148c4:	20000304 	.word	0x20000304

080148c8 <__ascii_wctomb>:
 80148c8:	b149      	cbz	r1, 80148de <__ascii_wctomb+0x16>
 80148ca:	2aff      	cmp	r2, #255	; 0xff
 80148cc:	bf85      	ittet	hi
 80148ce:	238a      	movhi	r3, #138	; 0x8a
 80148d0:	6003      	strhi	r3, [r0, #0]
 80148d2:	700a      	strbls	r2, [r1, #0]
 80148d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80148d8:	bf98      	it	ls
 80148da:	2001      	movls	r0, #1
 80148dc:	4770      	bx	lr
 80148de:	4608      	mov	r0, r1
 80148e0:	4770      	bx	lr
	...

080148e4 <_init>:
 80148e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148e6:	bf00      	nop
 80148e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148ea:	bc08      	pop	{r3}
 80148ec:	469e      	mov	lr, r3
 80148ee:	4770      	bx	lr

080148f0 <_fini>:
 80148f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148f2:	bf00      	nop
 80148f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148f6:	bc08      	pop	{r3}
 80148f8:	469e      	mov	lr, r3
 80148fa:	4770      	bx	lr
