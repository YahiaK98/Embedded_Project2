
TFLITEm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c838  08016d00  08016d00  00026d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023538  08023538  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08023538  08023538  00033538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023540  08023540  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023540  08023540  00033540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023544  08023544  00033544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08023548  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  200001fc  08023744  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200007a0  08023744  000407a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   001ac9e7  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000e6cd  00000000  00000000  001ecc13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00006580  00000000  00000000  001fb2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00006358  00000000  00000000  00201860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030d94  00000000  00000000  00207bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003a442  00000000  00000000  0023894c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00192d38  00000000  00000000  00272d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00405ac6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001df18  00000000  00000000  00405b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016ce4 	.word	0x08016ce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08016ce4 	.word	0x08016ce4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9f7 	b.w	8001078 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f887 	bl	8000dac <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f87a 	bl	8000dac <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f869 	bl	8000dac <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f85b 	bl	8000dac <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b9ac 	b.w	8001078 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f840 	bl	8000dac <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff fedb 	bl	8000afc <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <__aeabi_d2ulz+0x3c>)
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc51 	bl	8000618 <__aeabi_dmul>
 8000d76:	f000 f981 	bl	800107c <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbd2 	bl	8000524 <__aeabi_ui2d>
 8000d80:	2200      	movs	r2, #0
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <__aeabi_d2ulz+0x40>)
 8000d84:	f7ff fc48 	bl	8000618 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa8a 	bl	80002a8 <__aeabi_dsub>
 8000d94:	f000 f972 	bl	800107c <__aeabi_d2uiz>
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4310      	orrs	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	bdd0      	pop	{r4, r6, r7, pc}
 8000da2:	bf00      	nop
 8000da4:	3df00000 	.word	0x3df00000
 8000da8:	41f00000 	.word	0x41f00000

08000dac <__udivmoddi4>:
 8000dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db0:	9e08      	ldr	r6, [sp, #32]
 8000db2:	4604      	mov	r4, r0
 8000db4:	4688      	mov	r8, r1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d14b      	bne.n	8000e52 <__udivmoddi4+0xa6>
 8000dba:	428a      	cmp	r2, r1
 8000dbc:	4615      	mov	r5, r2
 8000dbe:	d967      	bls.n	8000e90 <__udivmoddi4+0xe4>
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	b14a      	cbz	r2, 8000dda <__udivmoddi4+0x2e>
 8000dc6:	f1c2 0720 	rsb	r7, r2, #32
 8000dca:	fa01 f302 	lsl.w	r3, r1, r2
 8000dce:	fa20 f707 	lsr.w	r7, r0, r7
 8000dd2:	4095      	lsls	r5, r2
 8000dd4:	ea47 0803 	orr.w	r8, r7, r3
 8000dd8:	4094      	lsls	r4, r2
 8000dda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dde:	0c23      	lsrs	r3, r4, #16
 8000de0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000de4:	fa1f fc85 	uxth.w	ip, r5
 8000de8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000dec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df0:	fb07 f10c 	mul.w	r1, r7, ip
 8000df4:	4299      	cmp	r1, r3
 8000df6:	d909      	bls.n	8000e0c <__udivmoddi4+0x60>
 8000df8:	18eb      	adds	r3, r5, r3
 8000dfa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dfe:	f080 811b 	bcs.w	8001038 <__udivmoddi4+0x28c>
 8000e02:	4299      	cmp	r1, r3
 8000e04:	f240 8118 	bls.w	8001038 <__udivmoddi4+0x28c>
 8000e08:	3f02      	subs	r7, #2
 8000e0a:	442b      	add	r3, r5
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e20:	45a4      	cmp	ip, r4
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x8c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	f080 8107 	bcs.w	800103c <__udivmoddi4+0x290>
 8000e2e:	45a4      	cmp	ip, r4
 8000e30:	f240 8104 	bls.w	800103c <__udivmoddi4+0x290>
 8000e34:	3802      	subs	r0, #2
 8000e36:	442c      	add	r4, r5
 8000e38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e3c:	eba4 040c 	sub.w	r4, r4, ip
 8000e40:	2700      	movs	r7, #0
 8000e42:	b11e      	cbz	r6, 8000e4c <__udivmoddi4+0xa0>
 8000e44:	40d4      	lsrs	r4, r2
 8000e46:	2300      	movs	r3, #0
 8000e48:	e9c6 4300 	strd	r4, r3, [r6]
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d909      	bls.n	8000e6a <__udivmoddi4+0xbe>
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	f000 80eb 	beq.w	8001032 <__udivmoddi4+0x286>
 8000e5c:	2700      	movs	r7, #0
 8000e5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000e62:	4638      	mov	r0, r7
 8000e64:	4639      	mov	r1, r7
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	fab3 f783 	clz	r7, r3
 8000e6e:	2f00      	cmp	r7, #0
 8000e70:	d147      	bne.n	8000f02 <__udivmoddi4+0x156>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d302      	bcc.n	8000e7c <__udivmoddi4+0xd0>
 8000e76:	4282      	cmp	r2, r0
 8000e78:	f200 80fa 	bhi.w	8001070 <__udivmoddi4+0x2c4>
 8000e7c:	1a84      	subs	r4, r0, r2
 8000e7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e82:	2001      	movs	r0, #1
 8000e84:	4698      	mov	r8, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d0e0      	beq.n	8000e4c <__udivmoddi4+0xa0>
 8000e8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e8e:	e7dd      	b.n	8000e4c <__udivmoddi4+0xa0>
 8000e90:	b902      	cbnz	r2, 8000e94 <__udivmoddi4+0xe8>
 8000e92:	deff      	udf	#255	; 0xff
 8000e94:	fab2 f282 	clz	r2, r2
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	f040 808f 	bne.w	8000fbc <__udivmoddi4+0x210>
 8000e9e:	1b49      	subs	r1, r1, r5
 8000ea0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ea4:	fa1f f885 	uxth.w	r8, r5
 8000ea8:	2701      	movs	r7, #1
 8000eaa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000eae:	0c23      	lsrs	r3, r4, #16
 8000eb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000eb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d907      	bls.n	8000ed0 <__udivmoddi4+0x124>
 8000ec0:	18eb      	adds	r3, r5, r3
 8000ec2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ec6:	d202      	bcs.n	8000ece <__udivmoddi4+0x122>
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	f200 80cd 	bhi.w	8001068 <__udivmoddi4+0x2bc>
 8000ece:	4684      	mov	ip, r0
 8000ed0:	1a59      	subs	r1, r3, r1
 8000ed2:	b2a3      	uxth	r3, r4
 8000ed4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000edc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ee0:	fb08 f800 	mul.w	r8, r8, r0
 8000ee4:	45a0      	cmp	r8, r4
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x14c>
 8000ee8:	192c      	adds	r4, r5, r4
 8000eea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x14a>
 8000ef0:	45a0      	cmp	r8, r4
 8000ef2:	f200 80b6 	bhi.w	8001062 <__udivmoddi4+0x2b6>
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	eba4 0408 	sub.w	r4, r4, r8
 8000efc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f00:	e79f      	b.n	8000e42 <__udivmoddi4+0x96>
 8000f02:	f1c7 0c20 	rsb	ip, r7, #32
 8000f06:	40bb      	lsls	r3, r7
 8000f08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000f0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f10:	fa01 f407 	lsl.w	r4, r1, r7
 8000f14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000f18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000f1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000f20:	4325      	orrs	r5, r4
 8000f22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000f26:	0c2c      	lsrs	r4, r5, #16
 8000f28:	fb08 3319 	mls	r3, r8, r9, r3
 8000f2c:	fa1f fa8e 	uxth.w	sl, lr
 8000f30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f34:	fb09 f40a 	mul.w	r4, r9, sl
 8000f38:	429c      	cmp	r4, r3
 8000f3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000f3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000f42:	d90b      	bls.n	8000f5c <__udivmoddi4+0x1b0>
 8000f44:	eb1e 0303 	adds.w	r3, lr, r3
 8000f48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f4c:	f080 8087 	bcs.w	800105e <__udivmoddi4+0x2b2>
 8000f50:	429c      	cmp	r4, r3
 8000f52:	f240 8084 	bls.w	800105e <__udivmoddi4+0x2b2>
 8000f56:	f1a9 0902 	sub.w	r9, r9, #2
 8000f5a:	4473      	add	r3, lr
 8000f5c:	1b1b      	subs	r3, r3, r4
 8000f5e:	b2ad      	uxth	r5, r5
 8000f60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f64:	fb08 3310 	mls	r3, r8, r0, r3
 8000f68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f70:	45a2      	cmp	sl, r4
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x1da>
 8000f74:	eb1e 0404 	adds.w	r4, lr, r4
 8000f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f7c:	d26b      	bcs.n	8001056 <__udivmoddi4+0x2aa>
 8000f7e:	45a2      	cmp	sl, r4
 8000f80:	d969      	bls.n	8001056 <__udivmoddi4+0x2aa>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4474      	add	r4, lr
 8000f86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8e:	eba4 040a 	sub.w	r4, r4, sl
 8000f92:	454c      	cmp	r4, r9
 8000f94:	46c2      	mov	sl, r8
 8000f96:	464b      	mov	r3, r9
 8000f98:	d354      	bcc.n	8001044 <__udivmoddi4+0x298>
 8000f9a:	d051      	beq.n	8001040 <__udivmoddi4+0x294>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d069      	beq.n	8001074 <__udivmoddi4+0x2c8>
 8000fa0:	ebb1 050a 	subs.w	r5, r1, sl
 8000fa4:	eb64 0403 	sbc.w	r4, r4, r3
 8000fa8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000fac:	40fd      	lsrs	r5, r7
 8000fae:	40fc      	lsrs	r4, r7
 8000fb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000fb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000fb8:	2700      	movs	r7, #0
 8000fba:	e747      	b.n	8000e4c <__udivmoddi4+0xa0>
 8000fbc:	f1c2 0320 	rsb	r3, r2, #32
 8000fc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000fc4:	4095      	lsls	r5, r2
 8000fc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000fca:	fa21 f303 	lsr.w	r3, r1, r3
 8000fce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fd2:	4338      	orrs	r0, r7
 8000fd4:	0c01      	lsrs	r1, r0, #16
 8000fd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fda:	fa1f f885 	uxth.w	r8, r5
 8000fde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fe2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe6:	fb07 f308 	mul.w	r3, r7, r8
 8000fea:	428b      	cmp	r3, r1
 8000fec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff0:	d907      	bls.n	8001002 <__udivmoddi4+0x256>
 8000ff2:	1869      	adds	r1, r5, r1
 8000ff4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ff8:	d22f      	bcs.n	800105a <__udivmoddi4+0x2ae>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d92d      	bls.n	800105a <__udivmoddi4+0x2ae>
 8000ffe:	3f02      	subs	r7, #2
 8001000:	4429      	add	r1, r5
 8001002:	1acb      	subs	r3, r1, r3
 8001004:	b281      	uxth	r1, r0
 8001006:	fbb3 f0fe 	udiv	r0, r3, lr
 800100a:	fb0e 3310 	mls	r3, lr, r0, r3
 800100e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001012:	fb00 f308 	mul.w	r3, r0, r8
 8001016:	428b      	cmp	r3, r1
 8001018:	d907      	bls.n	800102a <__udivmoddi4+0x27e>
 800101a:	1869      	adds	r1, r5, r1
 800101c:	f100 3cff 	add.w	ip, r0, #4294967295
 8001020:	d217      	bcs.n	8001052 <__udivmoddi4+0x2a6>
 8001022:	428b      	cmp	r3, r1
 8001024:	d915      	bls.n	8001052 <__udivmoddi4+0x2a6>
 8001026:	3802      	subs	r0, #2
 8001028:	4429      	add	r1, r5
 800102a:	1ac9      	subs	r1, r1, r3
 800102c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001030:	e73b      	b.n	8000eaa <__udivmoddi4+0xfe>
 8001032:	4637      	mov	r7, r6
 8001034:	4630      	mov	r0, r6
 8001036:	e709      	b.n	8000e4c <__udivmoddi4+0xa0>
 8001038:	4607      	mov	r7, r0
 800103a:	e6e7      	b.n	8000e0c <__udivmoddi4+0x60>
 800103c:	4618      	mov	r0, r3
 800103e:	e6fb      	b.n	8000e38 <__udivmoddi4+0x8c>
 8001040:	4541      	cmp	r1, r8
 8001042:	d2ab      	bcs.n	8000f9c <__udivmoddi4+0x1f0>
 8001044:	ebb8 0a02 	subs.w	sl, r8, r2
 8001048:	eb69 020e 	sbc.w	r2, r9, lr
 800104c:	3801      	subs	r0, #1
 800104e:	4613      	mov	r3, r2
 8001050:	e7a4      	b.n	8000f9c <__udivmoddi4+0x1f0>
 8001052:	4660      	mov	r0, ip
 8001054:	e7e9      	b.n	800102a <__udivmoddi4+0x27e>
 8001056:	4618      	mov	r0, r3
 8001058:	e795      	b.n	8000f86 <__udivmoddi4+0x1da>
 800105a:	4667      	mov	r7, ip
 800105c:	e7d1      	b.n	8001002 <__udivmoddi4+0x256>
 800105e:	4681      	mov	r9, r0
 8001060:	e77c      	b.n	8000f5c <__udivmoddi4+0x1b0>
 8001062:	3802      	subs	r0, #2
 8001064:	442c      	add	r4, r5
 8001066:	e747      	b.n	8000ef8 <__udivmoddi4+0x14c>
 8001068:	f1ac 0c02 	sub.w	ip, ip, #2
 800106c:	442b      	add	r3, r5
 800106e:	e72f      	b.n	8000ed0 <__udivmoddi4+0x124>
 8001070:	4638      	mov	r0, r7
 8001072:	e708      	b.n	8000e86 <__udivmoddi4+0xda>
 8001074:	4637      	mov	r7, r6
 8001076:	e6e9      	b.n	8000e4c <__udivmoddi4+0xa0>

08001078 <__aeabi_idiv0>:
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <__aeabi_d2uiz>:
 800107c:	004a      	lsls	r2, r1, #1
 800107e:	d211      	bcs.n	80010a4 <__aeabi_d2uiz+0x28>
 8001080:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001084:	d211      	bcs.n	80010aa <__aeabi_d2uiz+0x2e>
 8001086:	d50d      	bpl.n	80010a4 <__aeabi_d2uiz+0x28>
 8001088:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800108c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001090:	d40e      	bmi.n	80010b0 <__aeabi_d2uiz+0x34>
 8001092:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001096:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800109e:	fa23 f002 	lsr.w	r0, r3, r2
 80010a2:	4770      	bx	lr
 80010a4:	f04f 0000 	mov.w	r0, #0
 80010a8:	4770      	bx	lr
 80010aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010ae:	d102      	bne.n	80010b6 <__aeabi_d2uiz+0x3a>
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <_Z20LatestAudioTimestampv>:
  *audio_samples_size = kMaxAudioSampleSize;
  *audio_samples = g_dummy_audio_data;
  return kTfLiteOk;
}

int32_t LatestAudioTimestamp() {
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  g_latest_audio_timestamp += 100;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <_Z20LatestAudioTimestampv+0x1c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3364      	adds	r3, #100	; 0x64
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <_Z20LatestAudioTimestampv+0x1c>)
 80010c8:	6013      	str	r3, [r2, #0]
  return g_latest_audio_timestamp;
 80010ca:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <_Z20LatestAudioTimestampv+0x1c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20000218 	.word	0x20000218

080010dc <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3301      	adds	r3, #1
 80010e8:	009b      	lsls	r3, r3, #2
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b0d      	cmp	r3, #13
 8001106:	d83b      	bhi.n	8001180 <TfLiteTypeGetName+0x88>
 8001108:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <TfLiteTypeGetName+0x18>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001149 	.word	0x08001149
 8001114:	0800114d 	.word	0x0800114d
 8001118:	08001155 	.word	0x08001155
 800111c:	08001159 	.word	0x08001159
 8001120:	08001161 	.word	0x08001161
 8001124:	08001175 	.word	0x08001175
 8001128:	08001169 	.word	0x08001169
 800112c:	08001151 	.word	0x08001151
 8001130:	0800116d 	.word	0x0800116d
 8001134:	0800115d 	.word	0x0800115d
 8001138:	08001179 	.word	0x08001179
 800113c:	0800117d 	.word	0x0800117d
 8001140:	08001171 	.word	0x08001171
 8001144:	08001165 	.word	0x08001165
    case kTfLiteNoType:
      return "NOTYPE";
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <TfLiteTypeGetName+0x98>)
 800114a:	e01a      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat32:
      return "FLOAT32";
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <TfLiteTypeGetName+0x9c>)
 800114e:	e018      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt16:
      return "INT16";
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <TfLiteTypeGetName+0xa0>)
 8001152:	e016      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt32:
      return "INT32";
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <TfLiteTypeGetName+0xa4>)
 8001156:	e014      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteUInt8:
      return "UINT8";
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <TfLiteTypeGetName+0xa8>)
 800115a:	e012      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt8:
      return "INT8";
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <TfLiteTypeGetName+0xac>)
 800115e:	e010      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt64:
      return "INT64";
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <TfLiteTypeGetName+0xb0>)
 8001162:	e00e      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteUInt64:
      return "UINT64";
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <TfLiteTypeGetName+0xb4>)
 8001166:	e00c      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteBool:
      return "BOOL";
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <TfLiteTypeGetName+0xb8>)
 800116a:	e00a      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <TfLiteTypeGetName+0xbc>)
 800116e:	e008      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <TfLiteTypeGetName+0xc0>)
 8001172:	e006      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteString:
      return "STRING";
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <TfLiteTypeGetName+0xc4>)
 8001176:	e004      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat16:
      return "FLOAT16";
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <TfLiteTypeGetName+0xc8>)
 800117a:	e002      	b.n	8001182 <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat64:
      return "FLOAT64";
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <TfLiteTypeGetName+0xcc>)
 800117e:	e000      	b.n	8001182 <TfLiteTypeGetName+0x8a>
  }
  return "Unknown type";
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <TfLiteTypeGetName+0xd0>)
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	08016d00 	.word	0x08016d00
 8001194:	08016d08 	.word	0x08016d08
 8001198:	08016d10 	.word	0x08016d10
 800119c:	08016d18 	.word	0x08016d18
 80011a0:	08016d20 	.word	0x08016d20
 80011a4:	08016d28 	.word	0x08016d28
 80011a8:	08016d30 	.word	0x08016d30
 80011ac:	08016d38 	.word	0x08016d38
 80011b0:	08016d40 	.word	0x08016d40
 80011b4:	08016d48 	.word	0x08016d48
 80011b8:	08016d54 	.word	0x08016d54
 80011bc:	08016d60 	.word	0x08016d60
 80011c0:	08016d68 	.word	0x08016d68
 80011c4:	08016d70 	.word	0x08016d70
 80011c8:	08016d78 	.word	0x08016d78

080011cc <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <DebugLog+0x20>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	4619      	mov	r1, r3
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f012 ffc3 	bl	8014168 <fputs>
#endif
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000002c 	.word	0x2000002c

080011f0 <_ZNSt14numeric_limitsIaE3minEv>:
    struct numeric_limits<signed char>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR signed char
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_ZNSt14numeric_limitsIaE3maxEv>:

      static _GLIBCXX_CONSTEXPR signed char
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
 8001206:	237f      	movs	r3, #127	; 0x7f
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <_ZNSt14numeric_limitsIlE3minEv>:
    struct numeric_limits<long>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
 8001216:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
 8001228:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	7f7fffff 	.word	0x7f7fffff

08001254 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
 8001258:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb0 0a67 	vmov.f32	s0, s15
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <_ZSt3maxIlERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	da01      	bge.n	8001286 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	e000      	b.n	8001288 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8001286:	687b      	ldr	r3, [r7, #4]
    }
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8001294:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001298:	b08c      	sub	sp, #48	; 0x30
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d107      	bne.n	80012b8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80012a8:	f7ff ffb3 	bl	8001212 <_ZNSt14numeric_limitsIlE3minEv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80012c4:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b_64(b);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80012ce:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	fb02 f203 	mul.w	r2, r2, r3
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	6a39      	ldr	r1, [r7, #32]
 80012de:	fb01 f303 	mul.w	r3, r1, r3
 80012e2:	441a      	add	r2, r3
 80012e4:	6a39      	ldr	r1, [r7, #32]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	fba1 3403 	umull	r3, r4, r1, r3
 80012ec:	4422      	add	r2, r4
 80012ee:	4614      	mov	r4, r2
 80012f0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80012f4:	e9c7 3404 	strd	r3, r4, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80012f8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f174 0300 	sbcs.w	r3, r4, #0
 8001302:	db02      	blt.n	800130a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x76>
 8001304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001308:	e000      	b.n	800130c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800130c:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4619      	mov	r1, r3
 8001312:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001316:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800131a:	eb13 0b01 	adds.w	fp, r3, r1
 800131e:	eb44 0c02 	adc.w	ip, r4, r2
 8001322:	465b      	mov	r3, fp
 8001324:	4664      	mov	r4, ip
 8001326:	2b00      	cmp	r3, #0
 8001328:	f174 0200 	sbcs.w	r2, r4, #0
 800132c:	da06      	bge.n	800133c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800132e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	185b      	adds	r3, r3, r1
 8001338:	eb44 0402 	adc.w	r4, r4, r2
 800133c:	f04f 0100 	mov.w	r1, #0
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	0fd9      	lsrs	r1, r3, #31
 8001346:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 800134a:	17e2      	asrs	r2, r4, #31
 800134c:	460b      	mov	r3, r1
 800134e:	4614      	mov	r4, r2
  std::int32_t ab_x2_high32 =
 8001350:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8001352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xce>
 800135a:	f7ff ff63 	bl	8001224 <_ZNSt14numeric_limitsIlE3maxEv>
 800135e:	4603      	mov	r3, r0
 8001360:	e000      	b.n	8001364 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8001362:	68bb      	ldr	r3, [r7, #8]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3730      	adds	r7, #48	; 0x30
 8001368:	46bd      	mov	sp, r7
 800136a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800136e:	bf00      	nop
 8001370:	c0000001 	.word	0xc0000001

08001374 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b05      	cmp	r3, #5
 8001382:	dd08      	ble.n	8001396 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d004      	beq.n	8001396 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4618      	mov	r0, r3
 8001392:	f012 fb93 	bl	8013abc <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	da01      	bge.n	80013cc <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 80013c8:	f012 fe42 	bl	8014050 <abort>
    TFLITE_DCHECK_LT(i, size_);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dc01      	bgt.n	80013da <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 80013d6:	f012 fe3b 	bl	8014050 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	dd06      	ble.n	80013f0 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	e004      	b.n	80013fa <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	685b      	ldr	r3, [r3, #4]
  }
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  }

  inline int32_t* DimsData() {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  inline const int32_t* DimsData() const {
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b05      	cmp	r3, #5
 8001410:	dd02      	ble.n	8001418 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	e001      	b.n	800141c <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3304      	adds	r3, #4
  }
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3304      	adds	r3, #4
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8001448:	2301      	movs	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ffd8 	bl	8001402 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8001452:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	429a      	cmp	r2, r3
 8001460:	da0c      	bge.n	800147c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4413      	add	r3, r2
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	3301      	adds	r3, #1
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	e7ed      	b.n	8001458 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 800147c:	697b      	ldr	r3, [r7, #20]
  }
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff ff83 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800149a:	4603      	mov	r3, r0
 800149c:	2b04      	cmp	r3, #4
 800149e:	d001      	beq.n	80014a4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 80014a0:	f012 fdd6 	bl	8014050 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff ffbf 	bl	8001428 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 80014aa:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db04      	blt.n	80014bc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	db01      	blt.n	80014c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 80014bc:	f012 fdc8 	bl	8014050 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db05      	blt.n	80014d2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3304      	adds	r3, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	db01      	blt.n	80014d6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 80014d2:	f012 fdbd 	bl	8014050 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db05      	blt.n	80014e8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3308      	adds	r3, #8
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	db01      	blt.n	80014ec <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 80014e8:	f012 fdb2 	bl	8014050 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db05      	blt.n	80014fe <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	330c      	adds	r3, #12
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6a3a      	ldr	r2, [r7, #32]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	db01      	blt.n	8001502 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 80014fe:	f012 fda7 	bl	8014050 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3304      	adds	r3, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	fb02 f203 	mul.w	r2, r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	3208      	adds	r2, #8
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	fb02 f203 	mul.w	r2, r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4413      	add	r3, r2
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	320c      	adds	r2, #12
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	fb02 f203 	mul.w	r2, r2, r3
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	4413      	add	r3, r2
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8001536:	b590      	push	{r4, r7, lr}
 8001538:	b087      	sub	sp, #28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff ff36 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800154c:	4604      	mov	r4, r0
 800154e:	6839      	ldr	r1, [r7, #0]
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff31 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001556:	4603      	mov	r3, r0
 8001558:	429c      	cmp	r4, r3
 800155a:	d001      	beq.n	8001560 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800155c:	f012 fd78 	bl	8014050 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff ff28 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001568:	4603      	mov	r3, r0
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	6839      	ldr	r1, [r7, #0]
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff22 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001574:	4603      	mov	r3, r0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	f107 0214 	add.w	r2, r7, #20
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f001 f96c 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 8001588:	4603      	mov	r3, r0
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}

08001594 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80015a6:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dc02      	bgt.n	80015b4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	425b      	negs	r3, r3
 80015b2:	e000      	b.n	80015b6 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe66 	bl	8001294 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80015c8:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 f995 	bl	80028fc <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 80015d2:	4603      	mov	r3, r0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b0ab      	sub	sp, #172	; 0xac
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001602:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800160a:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001612:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800161a:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001622:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	61bb      	str	r3, [r7, #24]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800163c:	6838      	ldr	r0, [r7, #0]
 800163e:	f7ff feaf 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8001642:	4603      	mov	r3, r0
 8001644:	2b04      	cmp	r3, #4
 8001646:	d001      	beq.n	800164c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 8001648:	f012 fd02 	bl	8014050 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800164c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001650:	f7ff fea6 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8001654:	4603      	mov	r3, r0
 8001656:	2b04      	cmp	r3, #4
 8001658:	d001      	beq.n	800165e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 800165a:	f012 fcf9 	bl	8014050 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800165e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001662:	f7ff fe9d 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8001666:	4603      	mov	r3, r0
 8001668:	2b04      	cmp	r3, #4
 800166a:	d001      	beq.n	8001670 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 800166c:	f012 fcf0 	bl	8014050 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	429a      	cmp	r2, r3
 8001676:	dd01      	ble.n	800167c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 8001678:	f012 fcea 	bl	8014050 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800167c:	2300      	movs	r3, #0
 800167e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001682:	2100      	movs	r1, #0
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f7ff ff56 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800168a:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800168c:	2303      	movs	r3, #3
 800168e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001692:	2103      	movs	r1, #3
 8001694:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001698:	f7ff ff4d 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800169c:	4603      	mov	r3, r0
 800169e:	617b      	str	r3, [r7, #20]
  const int input_height = input_shape.Dims(1);
 80016a0:	2101      	movs	r1, #1
 80016a2:	6838      	ldr	r0, [r7, #0]
 80016a4:	f7ff fe88 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016a8:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_width = input_shape.Dims(2);
 80016aa:	2102      	movs	r1, #2
 80016ac:	6838      	ldr	r0, [r7, #0]
 80016ae:	f7ff fe83 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016b2:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_depth = input_shape.Dims(3);
 80016b4:	2103      	movs	r1, #3
 80016b6:	6838      	ldr	r0, [r7, #0]
 80016b8:	f7ff fe7e 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016bc:	6538      	str	r0, [r7, #80]	; 0x50
  const int filter_height = filter_shape.Dims(1);
 80016be:	2101      	movs	r1, #1
 80016c0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80016c4:	f7ff fe78 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016c8:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_width = filter_shape.Dims(2);
 80016ca:	2102      	movs	r1, #2
 80016cc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80016d0:	f7ff fe72 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016d4:	64b8      	str	r0, [r7, #72]	; 0x48
  const int output_height = output_shape.Dims(1);
 80016d6:	2101      	movs	r1, #1
 80016d8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016dc:	f7ff fe6c 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016e0:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_width = output_shape.Dims(2);
 80016e2:	2102      	movs	r1, #2
 80016e4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016e8:	f7ff fe66 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016ec:	6438      	str	r0, [r7, #64]	; 0x40
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 80016ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80016f2:	fb02 f203 	mul.w	r2, r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
 80016fc:	f012 fca8 	bl	8014050 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8001700:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001704:	f7ff fe9c 	bl	8001440 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8001708:	4602      	mov	r2, r0
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x138>
 8001710:	f012 fc9e 	bl	8014050 <abort>

  for (int batch = 0; batch < batches; ++batch) {
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800171a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800171e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001720:	429a      	cmp	r2, r3
 8001722:	f280 811a 	bge.w	800195a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800172c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001732:	429a      	cmp	r2, r3
 8001734:	f280 810b 	bge.w	800194e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x372>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800173e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001744:	429a      	cmp	r2, r3
 8001746:	f280 80fc 	bge.w	8001942 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x366>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001750:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001756:	429a      	cmp	r2, r3
 8001758:	f280 80ed 	bge.w	8001936 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x35a>
          for (int m = 0; m < depth_multiplier; ++m) {
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001762:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001768:	429a      	cmp	r2, r3
 800176a:	f280 80de 	bge.w	800192a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34e>
            const int output_channel = m + in_channel * depth_multiplier;
 800176e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001772:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800177c:	4413      	add	r3, r2
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8001780:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001784:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001788:	fb02 f203 	mul.w	r2, r2, r3
 800178c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8001792:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001796:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001798:	fb02 f203 	mul.w	r2, r2, r3
 800179c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
            int32_t acc = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80017b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b2:	429a      	cmp	r2, r3
 80017b4:	da68      	bge.n	8001888 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ac>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80017c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c2:	429a      	cmp	r2, r3
 80017c4:	da5a      	bge.n	800187c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a0>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80017c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017d2:	4413      	add	r3, r2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 80017d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 80017e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017e2:	4413      	add	r3, r2
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80017e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0c      	blt.n	8001806 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 80017ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f0:	429a      	cmp	r2, r3
 80017f2:	da08      	bge.n	8001806 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db05      	blt.n	8001806 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 80017fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017fe:	429a      	cmp	r2, r3
 8001800:	da01      	bge.n	8001806 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22c>
 8001806:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8001808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    (in_y < input_height);
                if (is_point_inside_image) {
 800180c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001810:	2b00      	cmp	r3, #0
 8001812:	d02d      	beq.n	8001870 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>
                  int32_t input_val = input_data[Offset(
 8001814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001822:	6838      	ldr	r0, [r7, #0]
 8001824:	f7ff fe2f 	bl	8001486 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 800182c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001830:	4413      	add	r3, r2
 8001832:	f993 3000 	ldrsb.w	r3, [r3]
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
                  int32_t filter_val = filter_data[Offset(
 8001838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001840:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001844:	2100      	movs	r1, #0
 8001846:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800184a:	f7ff fe1c 	bl	8001486 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 8001852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001856:	4413      	add	r3, r2
 8001858:	f993 3000 	ldrsb.w	r3, [r3]
 800185c:	623b      	str	r3, [r7, #32]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001862:	4413      	add	r3, r2
 8001864:	6a3a      	ldr	r2, [r7, #32]
 8001866:	fb02 f203 	mul.w	r2, r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4413      	add	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8001870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001874:	3301      	adds	r3, #1
 8001876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800187a:	e79f      	b.n	80017bc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800187c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001880:	3301      	adds	r3, #1
 8001882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001886:	e791      	b.n	80017ac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d0>
                }
              }
            }
            if (bias_data) {
 8001888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c6>
              acc += bias_data[output_channel];
 8001890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001898:	4413      	add	r3, r2
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4413      	add	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 80018a2:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 80018a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 80018ac:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 80018ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	f7ff fe6b 	bl	8001594 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80018be:	4603      	mov	r3, r0
 80018c0:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018c6:	4413      	add	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 80018ca:	f107 021c 	add.w	r2, r7, #28
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fcc9 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 80018da:	4603      	mov	r3, r0
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 80018e0:	f107 0218 	add.w	r2, r7, #24
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 ffb8 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 80018f0:	4603      	mov	r3, r0
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 80018f6:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 80018f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001900:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001904:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001908:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800190c:	f7ff fdbb 	bl	8001486 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 8001914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001918:	4413      	add	r3, r2
 800191a:	b262      	sxtb	r2, r4
 800191c:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 800191e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001922:	3301      	adds	r3, #1
 8001924:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001928:	e71b      	b.n	8001762 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x186>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800192a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800192e:	3301      	adds	r3, #1
 8001930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001934:	e70c      	b.n	8001750 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001936:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800193a:	3301      	adds	r3, #1
 800193c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001940:	e6fd      	b.n	800173e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8001942:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001946:	3301      	adds	r3, #1
 8001948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800194c:	e6ee      	b.n	800172c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x150>
  for (int batch = 0; batch < batches; ++batch) {
 800194e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001952:	3301      	adds	r3, #1
 8001954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001958:	e6df      	b.n	800171a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
          }
        }
      }
    }
  }
}
 800195a:	bf00      	nop
 800195c:	37a4      	adds	r7, #164	; 0xa4
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}

08001962 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8001962:	b590      	push	{r4, r7, lr}
 8001964:	ed2d 8b02 	vpush	{d8}
 8001968:	b0a9      	sub	sp, #164	; 0xa4
 800196a:	af02      	add	r7, sp, #8
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800197a:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001982:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800198a:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001992:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800199a:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80019aa:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b6:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80019b8:	68b8      	ldr	r0, [r7, #8]
 80019ba:	f7ff fcf1 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d001      	beq.n	80019c8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 80019c4:	f012 fb44 	bl	8014050 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f7ff fce9 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d001      	beq.n	80019d8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 80019d4:	f012 fb3c 	bl	8014050 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80019d8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80019dc:	f7ff fce0 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d001      	beq.n	80019ea <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 80019e6:	f012 fb33 	bl	8014050 <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f0:	2100      	movs	r1, #0
 80019f2:	68b8      	ldr	r0, [r7, #8]
 80019f4:	f7ff fd9f 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80019f8:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 80019fa:	2303      	movs	r3, #3
 80019fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a00:	2103      	movs	r1, #3
 8001a02:	6838      	ldr	r0, [r7, #0]
 8001a04:	f7ff fd97 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]
  const int input_height = input_shape.Dims(1);
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	68b8      	ldr	r0, [r7, #8]
 8001a10:	f7ff fcd2 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a14:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
 8001a16:	2102      	movs	r1, #2
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f7ff fccd 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a1e:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_depth = input_shape.Dims(3);
 8001a20:	2103      	movs	r1, #3
 8001a22:	68b8      	ldr	r0, [r7, #8]
 8001a24:	f7ff fcc8 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a28:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	6838      	ldr	r0, [r7, #0]
 8001a2e:	f7ff fcc3 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a32:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 8001a34:	2102      	movs	r1, #2
 8001a36:	6838      	ldr	r0, [r7, #0]
 8001a38:	f7ff fcbe 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a3c:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 8001a3e:	2101      	movs	r1, #1
 8001a40:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001a44:	f7ff fcb8 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a48:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001a50:	f7ff fcb2 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a54:	6338      	str	r0, [r7, #48]	; 0x30
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8001a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a5a:	fb02 f203 	mul.w	r2, r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x106>
 8001a64:	f012 faf4 	bl	8014050 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8001a68:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001a6c:	f7ff fce8 	bl	8001440 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11a>
 8001a78:	f012 faea 	bl	8014050 <abort>

  for (int b = 0; b < batches; ++b) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f280 80eb 	bge.w	8001c64 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x302>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a94:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	f280 80dc 	bge.w	8001c58 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001aa6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f280 80cd 	bge.w	8001c4c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ea>
        for (int ic = 0; ic < input_depth; ++ic) {
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ab8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	f280 80be 	bge.w	8001c40 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2de>
          for (int m = 0; m < depth_multiplier; m++) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001aca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f280 80af 	bge.w	8001c34 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2d2>
            const int oc = m + ic * depth_multiplier;
 8001ad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ada:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001adc:	fb02 f303 	mul.w	r3, r2, r3
 8001ae0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ae4:	4413      	add	r3, r2
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8001ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001aee:	fb02 f203 	mul.w	r2, r2, r3
 8001af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8001af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001afc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001afe:	fb02 f203 	mul.w	r2, r2, r3
 8001b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
            float total = 0.f;
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8001b10:	2300      	movs	r3, #0
 8001b12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b14:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	da54      	bge.n	8001bc6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x264>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b24:	429a      	cmp	r2, r3
 8001b26:	da4a      	bge.n	8001bbe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25c>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8001b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b2a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b32:	4413      	add	r3, r2
 8001b34:	623b      	str	r3, [r7, #32]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8001b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b40:	4413      	add	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db35      	blt.n	8001bb6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
 8001b4a:	6a3a      	ldr	r2, [r7, #32]
 8001b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	da31      	bge.n	8001bb6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db2e      	blt.n	8001bb6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	da2a      	bge.n	8001bb6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8001b60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001b6e:	68b8      	ldr	r0, [r7, #8]
 8001b70:	f7ff fc89 	bl	8001486 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001b74:	4603      	mov	r3, r0
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	61bb      	str	r3, [r7, #24]
                  float filter_value = filter_data[Offset(
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b88:	2100      	movs	r1, #0
 8001b8a:	6838      	ldr	r0, [r7, #0]
 8001b8c:	f7ff fc7b 	bl	8001486 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001b90:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001b98:	4413      	add	r3, r2
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	617b      	str	r3, [r7, #20]
                  total += (input_value * filter_value);
 8001b9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001baa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8001bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bb8:	3301      	adds	r3, #1
 8001bba:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bbc:	e7b0      	b.n	8001b20 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1be>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8001bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bc4:	e7a6      	b.n	8001b14 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b2>
                }
              }
            }
            float bias_value = 0.0f;
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 8001bcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x280>
              bias_value = bias_data[oc];
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001bdc:	4413      	add	r3, r2
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 8001be2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001be6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001bea:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001bfa:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001bfe:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001c02:	f7ff fc40 	bl	8001486 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001c06:	4603      	mov	r3, r0
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001c0e:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 8001c10:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8001c14:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8001c18:	eeb0 0a48 	vmov.f32	s0, s16
 8001c1c:	f000 fe4d 	bl	80028ba <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8001c20:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8001c24:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 8001c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c32:	e74a      	b.n	8001aca <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x168>
        for (int ic = 0; ic < input_depth; ++ic) {
 8001c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c3e:	e73b      	b.n	8001ab8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x156>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c44:	3301      	adds	r3, #1
 8001c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c4a:	e72c      	b.n	8001aa6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8001c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c50:	3301      	adds	r3, #1
 8001c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c56:	e71d      	b.n	8001a94 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x132>
  for (int b = 0; b < batches; ++b) {
 8001c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c62:	e70e      	b.n	8001a82 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x120>
          }
        }
      }
    }
  }
}
 8001c64:	bf00      	nop
 8001c66:	379c      	adds	r7, #156	; 0x9c
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	ecbd 8b02 	vpop	{d8}
 8001c6e:	bd90      	pop	{r4, r7, pc}

08001c70 <_ZN6tflite13reference_ops14depthwise_conv18DepthwiseConvRoundILNS_27DepthwiseConvOutputRoundingE1EEEllli>:
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
}

template <>
inline int32_t DepthwiseConvRound<DepthwiseConvOutputRounding::kAwayFromZero>(
    int32_t x, int32_t quantized_multiplier, int shift) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7ff fc87 	bl	8001594 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8001c86:	4603      	mov	r3, r0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af06      	add	r7, sp, #24
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
  return depthwise_conv::DepthwiseConvBasicKernel<
      DepthwiseConvOutputRounding::kAwayFromZero>::Run(params, input_shape,
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca0:	9304      	str	r3, [sp, #16]
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	9303      	str	r3, [sp, #12]
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 feaa 	bl	8002a12 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph>
                                                       input_data, filter_shape,
                                                       filter_data, bias_shape,
                                                       bias_data, output_shape,
                                                       output_data);
 8001cbe:	bf00      	nop
}
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	685b      	ldr	r3, [r3, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_ZN6tflite9NumInputsEPK10TfLiteNode>:

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8001d02:	b480      	push	{r7}
 8001d04:	b087      	sub	sp, #28
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	fb02 f203 	mul.w	r2, r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	441a      	add	r2, r3
  int total_padding =
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d38:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	bfb8      	it	lt
 8001d44:	425b      	neglt	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	0fda      	lsrs	r2, r3, #31
 8001d50:	4413      	add	r3, r2
 8001d52:	105b      	asrs	r3, r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6a3a      	ldr	r2, [r7, #32]
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
  switch (padding) {
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d002      	beq.n	8001d8a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d008      	beq.n	8001d9a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x3a>
 8001d88:	e010      	b.n	8001dac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4c>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	1e5a      	subs	r2, r3, #1
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d98:	e009      	b.n	8001dae <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	441a      	add	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	1ad2      	subs	r2, r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001daa:	e000      	b.n	8001dae <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    default:
      return 0;
 8001dac:	2300      	movs	r3, #0
  }
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b088      	sub	sp, #32
 8001dbe:	af02      	add	r7, sp, #8
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8001dc8:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dd6:	f7ff ffc3 	bl	8001d60 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dde:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8001de0:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dee:	f7ff ffb7 	bl	8001d60 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8001df2:	4602      	mov	r2, r0
 8001df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df6:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8001dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f107 0214 	add.w	r2, r7, #20
 8001e04:	9201      	str	r2, [sp, #4]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	68b8      	ldr	r0, [r7, #8]
 8001e10:	f7ff ff77 	bl	8001d02 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8001e14:	4602      	mov	r2, r0
  padding_values.height =
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8001e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f107 0214 	add.w	r2, r7, #20
 8001e28:	9201      	str	r2, [sp, #4]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e30:	6a39      	ldr	r1, [r7, #32]
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ff65 	bl	8001d02 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8001e38:	4602      	mov	r2, r0
  padding_values.width =
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	609a      	str	r2, [r3, #8]
  return padding_values;
 8001e44:	bf00      	nop
}
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8001e60:	f012 f8f6 	bl	8014050 <abort>
  TFLITE_DCHECK(node != nullptr);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8001e6a:	f012 f8f1 	bl	8014050 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	6819      	ldr	r1, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	4790      	blx	r2
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ffd5 	bl	8001e4e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8001ea4:	4603      	mov	r3, r0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8001ec0:	f012 f8c6 	bl	8014050 <abort>
  TFLITE_DCHECK(node != nullptr);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8001eca:	f012 f8c1 	bl	8014050 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	6859      	ldr	r1, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	4790      	blx	r2
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             TfLiteDepthwiseConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             const TfLiteType data_type, OpData* data) {
 8001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef2:	b09d      	sub	sp, #116	; 0x74
 8001ef4:	af0a      	add	r7, sp, #40	; 0x28
 8001ef6:	6278      	str	r0, [r7, #36]	; 0x24
 8001ef8:	6239      	str	r1, [r7, #32]
 8001efa:	61fa      	str	r2, [r7, #28]
 8001efc:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8001f10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f14:	f083 0301 	eor.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00f      	beq.n	8001f3e <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x4e>
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d00a      	beq.n	8001f3e <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x4e>
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	695c      	ldr	r4, [r3, #20]
 8001f2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b4>)
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2345      	movs	r3, #69	; 0x45
 8001f34:	4a5c      	ldr	r2, [pc, #368]	; (80020a8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001f36:	495d      	ldr	r1, [pc, #372]	; (80020ac <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 8001f38:	47a0      	blx	r4
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0ae      	b.n	800209c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d012      	beq.n	8001f6e <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x7e>
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	695c      	ldr	r4, [r3, #20]
 8001f4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	9203      	str	r2, [sp, #12]
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	4b55      	ldr	r3, [pc, #340]	; (80020b0 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1c0>)
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	4b55      	ldr	r3, [pc, #340]	; (80020b4 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1c4>)
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2346      	movs	r3, #70	; 0x46
 8001f64:	4a50      	ldr	r2, [pc, #320]	; (80020a8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001f66:	4954      	ldr	r1, [pc, #336]	; (80020b8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1c8>)
 8001f68:	47a0      	blx	r4
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e096      	b.n	800209c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>

  int unused_output_height, unused_output_width;
  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width, 1, 1, height, width,
      filter_height, filter_width, params->padding, &unused_output_height,
      &unused_output_width);
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	6899      	ldr	r1, [r3, #8]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	685d      	ldr	r5, [r3, #4]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	781b      	ldrb	r3, [r3, #0]
  data->padding = ComputePaddingHeightWidth(
 8001f7a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8001f7c:	f107 0008 	add.w	r0, r7, #8
 8001f80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f84:	9207      	str	r2, [sp, #28]
 8001f86:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001f8a:	9206      	str	r2, [sp, #24]
 8001f8c:	9305      	str	r3, [sp, #20]
 8001f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f90:	9304      	str	r3, [sp, #16]
 8001f92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f94:	9303      	str	r3, [sp, #12]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	9302      	str	r3, [sp, #8]
 8001f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	462a      	mov	r2, r5
 8001fa6:	f7ff ff08 	bl	8001dba <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8001fb4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d06e      	beq.n	800209a <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1aa>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	6a39      	ldr	r1, [r7, #32]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 fb6d 	bl	80066a2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8001fc8:	6438      	str	r0, [r7, #64]	; 0x40
    TF_LITE_ENSURE(context, input != nullptr);
 8001fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0xf6>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	695c      	ldr	r4, [r3, #20]
 8001fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1cc>)
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2352      	movs	r3, #82	; 0x52
 8001fdc:	4a32      	ldr	r2, [pc, #200]	; (80020a8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001fde:	4933      	ldr	r1, [pc, #204]	; (80020ac <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 8001fe0:	47a0      	blx	r4
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e05a      	b.n	800209c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	2201      	movs	r2, #1
 8001fea:	6a39      	ldr	r1, [r7, #32]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 fb58 	bl	80066a2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8001ff2:	63f8      	str	r0, [r7, #60]	; 0x3c
    TF_LITE_ENSURE(context, filter != nullptr);
 8001ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10a      	bne.n	8002010 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x120>
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	695c      	ldr	r4, [r3, #20]
 8001ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002000:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1d0>)
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2354      	movs	r3, #84	; 0x54
 8002006:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8002008:	4928      	ldr	r1, [pc, #160]	; (80020ac <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 800200a:	47a0      	blx	r4
 800200c:	2301      	movs	r3, #1
 800200e:	e045      	b.n	800209c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
    const TfLiteTensor* bias =
        GetOptionalInputTensor(context, node, kBiasTensor);
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	2202      	movs	r2, #2
 8002014:	6a39      	ldr	r1, [r7, #32]
 8002016:	4618      	mov	r0, r3
 8002018:	f004 fb72 	bl	8006700 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800201c:	63b8      	str	r0, [r7, #56]	; 0x38
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	2200      	movs	r2, #0
 8002022:	6a39      	ldr	r1, [r7, #32]
 8002024:	4618      	mov	r0, r3
 8002026:	f004 fb4c 	bl	80066c2 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800202a:	6378      	str	r0, [r7, #52]	; 0x34
    TF_LITE_ENSURE(context, output != nullptr);
 800202c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x158>
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	695c      	ldr	r4, [r3, #20]
 8002036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1d4>)
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2358      	movs	r3, #88	; 0x58
 800203e:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8002040:	491a      	ldr	r1, [pc, #104]	; (80020ac <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 8002042:	47a0      	blx	r4
 8002044:	2301      	movs	r3, #1
 8002046:	e029      	b.n	800209c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
    int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 8002048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	633b      	str	r3, [r7, #48]	; 0x30

    return tflite::PopulateConvolutionQuantizationParams(
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3310      	adds	r3, #16
 8002058:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800205a:	321c      	adds	r2, #28
 800205c:	603a      	str	r2, [r7, #0]
 800205e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002060:	3120      	adds	r1, #32
 8002062:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002064:	302c      	adds	r0, #44	; 0x2c
 8002066:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002068:	3430      	adds	r4, #48	; 0x30
 800206a:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 800206c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
        context, input, filter, bias, output, params->activation,
        &data->output_multiplier, &data->output_shift,
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels);
 800206e:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8002070:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8002072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002074:	9208      	str	r2, [sp, #32]
 8002076:	9607      	str	r6, [sp, #28]
 8002078:	9506      	str	r5, [sp, #24]
 800207a:	9405      	str	r4, [sp, #20]
 800207c:	9004      	str	r0, [sp, #16]
 800207e:	9103      	str	r1, [sp, #12]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	9202      	str	r2, [sp, #8]
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800208e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f004 fb45 	bl	8006720 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 8002096:	4603      	mov	r3, r0
 8002098:	e000      	b.n	800209c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
  }
  return kTfLiteOk;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	374c      	adds	r7, #76	; 0x4c
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a4:	08016dc0 	.word	0x08016dc0
 80020a8:	08016d88 	.word	0x08016d88
 80020ac:	08016da8 	.word	0x08016da8
 80020b0:	08016e00 	.word	0x08016e00
 80020b4:	08016e04 	.word	0x08016e04
 80020b8:	08016de4 	.word	0x08016de4
 80020bc:	08016e18 	.word	0x08016e18
 80020c0:	08016e2c 	.word	0x08016e2c
 80020c4:	08016e40 	.word	0x08016e40

080020c8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 80020dc:	f011 ffb8 	bl	8014050 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	2134      	movs	r1, #52	; 0x34
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	4798      	blx	r3
 80020ea:	4603      	mov	r3, r0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b097      	sub	sp, #92	; 0x5c
 80020f8:	af06      	add	r7, sp, #24
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8002106:	f011 ffa3 	bl	8014050 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8002112:	f011 ff9d 	bl	8014050 <abort>

  auto* params =
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  OpData* data = static_cast<OpData*>(node->user_data);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	63bb      	str	r3, [r7, #56]	; 0x38

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f004 faca 	bl	80066c2 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800212e:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8002130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x58>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695c      	ldr	r4, [r3, #20]
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4b85      	ldr	r3, [pc, #532]	; (8002354 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2373      	movs	r3, #115	; 0x73
 8002142:	4a85      	ldr	r2, [pc, #532]	; (8002358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002144:	4985      	ldr	r1, [pc, #532]	; (800235c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002146:	47a0      	blx	r4
 8002148:	2301      	movs	r3, #1
 800214a:	e0ff      	b.n	800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	6839      	ldr	r1, [r7, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f004 faa5 	bl	80066a2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8002158:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(context, input != nullptr);
 800215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10a      	bne.n	8002176 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x82>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695c      	ldr	r4, [r3, #20]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4b7e      	ldr	r3, [pc, #504]	; (8002360 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2375      	movs	r3, #117	; 0x75
 800216c:	4a7a      	ldr	r2, [pc, #488]	; (8002358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800216e:	497b      	ldr	r1, [pc, #492]	; (800235c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002170:	47a0      	blx	r4
 8002172:	2301      	movs	r3, #1
 8002174:	e0ea      	b.n	800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fa90 	bl	80066a2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8002182:	62f8      	str	r0, [r7, #44]	; 0x2c
  TF_LITE_ENSURE(context, filter != nullptr);
 8002184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10a      	bne.n	80021a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695c      	ldr	r4, [r3, #20]
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4b74      	ldr	r3, [pc, #464]	; (8002364 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2377      	movs	r3, #119	; 0x77
 8002196:	4a70      	ldr	r2, [pc, #448]	; (8002358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002198:	4970      	ldr	r1, [pc, #448]	; (800235c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800219a:	47a0      	blx	r4
 800219c:	2301      	movs	r3, #1
 800219e:	e0d5      	b.n	800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>

  const TfLiteType data_type = input->type;
 80021a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  int width = SizeOfDimension(input, 2);
 80021a8:	2102      	movs	r1, #2
 80021aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ac:	f7ff fd8b 	bl	8001cc6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80021b0:	6278      	str	r0, [r7, #36]	; 0x24
  int height = SizeOfDimension(input, 1);
 80021b2:	2101      	movs	r1, #1
 80021b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021b6:	f7ff fd86 	bl	8001cc6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80021ba:	6238      	str	r0, [r7, #32]
  int filter_width = SizeOfDimension(filter, 2);
 80021bc:	2102      	movs	r1, #2
 80021be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021c0:	f7ff fd81 	bl	8001cc6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80021c4:	61f8      	str	r0, [r7, #28]
  int filter_height = SizeOfDimension(filter, 1);
 80021c6:	2101      	movs	r1, #1
 80021c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021ca:	f7ff fd7c 	bl	8001cc6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80021ce:	61b8      	str	r0, [r7, #24]

  // Per channel quantization is only needed for int8_t inference. For other
  // quantized types, only a single scale and zero point is needed.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 80021d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	617b      	str	r3, [r7, #20]
  // Dynamically allocate per-channel quantization parameters.
  data->per_channel_output_multiplier =
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	4611      	mov	r1, r2
 80021e4:	4798      	blx	r3
 80021e6:	4602      	mov	r2, r0
  data->per_channel_output_multiplier =
 80021e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4611      	mov	r1, r2
 80021f8:	4798      	blx	r3
 80021fa:	4602      	mov	r2, r0
  data->per_channel_output_shift =
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b09      	cmp	r3, #9
 8002206:	d17c      	bne.n	8002302 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20e>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800220e:	2b01      	cmp	r3, #1
 8002210:	d013      	beq.n	800223a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x146>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695c      	ldr	r4, [r3, #20]
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800221e:	461a      	mov	r2, r3
 8002220:	2301      	movs	r3, #1
 8002222:	9303      	str	r3, [sp, #12]
 8002224:	9202      	str	r2, [sp, #8]
 8002226:	4b50      	ldr	r3, [pc, #320]	; (8002368 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	4b50      	ldr	r3, [pc, #320]	; (800236c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	238d      	movs	r3, #141	; 0x8d
 8002230:	4a49      	ldr	r2, [pc, #292]	; (8002358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002232:	494f      	ldr	r1, [pc, #316]	; (8002370 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 8002234:	47a0      	blx	r4
 8002236:	2301      	movs	r3, #1
 8002238:	e088      	b.n	800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    const auto* affine_quantization =
 800223e:	60fb      	str	r3, [r7, #12]
    TF_LITE_ENSURE(context, affine_quantization);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695c      	ldr	r4, [r3, #20]
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4b49      	ldr	r3, [pc, #292]	; (8002374 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2392      	movs	r3, #146	; 0x92
 8002252:	4a41      	ldr	r2, [pc, #260]	; (8002358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002254:	4941      	ldr	r1, [pc, #260]	; (800235c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002256:	47a0      	blx	r4
 8002258:	2301      	movs	r3, #1
 800225a:	e077      	b.n	800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x186>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695c      	ldr	r4, [r3, #20]
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4b43      	ldr	r3, [pc, #268]	; (8002378 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2393      	movs	r3, #147	; 0x93
 8002270:	4a39      	ldr	r2, [pc, #228]	; (8002358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002272:	493a      	ldr	r1, [pc, #232]	; (800235c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002274:	47a0      	blx	r4
 8002276:	2301      	movs	r3, #1
 8002278:	e068      	b.n	800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10a      	bne.n	8002298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695c      	ldr	r4, [r3, #20]
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4b3c      	ldr	r3, [pc, #240]	; (800237c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2394      	movs	r3, #148	; 0x94
 800228e:	4a32      	ldr	r2, [pc, #200]	; (8002358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002290:	4932      	ldr	r1, [pc, #200]	; (800235c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002292:	47a0      	blx	r4
 8002294:	2301      	movs	r3, #1
 8002296:	e059      	b.n	800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    TF_LITE_ENSURE(
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d012      	beq.n	80022c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d00a      	beq.n	80022c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695c      	ldr	r4, [r3, #20]
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4b31      	ldr	r3, [pc, #196]	; (8002380 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2398      	movs	r3, #152	; 0x98
 80022be:	4a26      	ldr	r2, [pc, #152]	; (8002358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80022c0:	4926      	ldr	r1, [pc, #152]	; (800235c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 80022c2:	47a0      	blx	r4
 80022c4:	2301      	movs	r3, #1
 80022c6:	e041      	b.n	800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d014      	beq.n	8002302 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695c      	ldr	r4, [r3, #20]
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	6852      	ldr	r2, [r2, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	9203      	str	r2, [sp, #12]
 80022ec:	9302      	str	r3, [sp, #8]
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x290>)
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	4b25      	ldr	r3, [pc, #148]	; (8002388 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x294>)
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	239a      	movs	r3, #154	; 0x9a
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80022fa:	491d      	ldr	r1, [pc, #116]	; (8002370 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 80022fc:	47a0      	blx	r4
 80022fe:	2301      	movs	r3, #1
 8002300:	e024      	b.n	800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, width, height,
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002306:	9304      	str	r3, [sp, #16]
 8002308:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800230c:	9303      	str	r3, [sp, #12]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	9302      	str	r3, [sp, #8]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800231e:	6839      	ldr	r1, [r7, #0]
 8002320:	f7ff fde6 	bl	8001ef0 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE>
 8002324:	4603      	mov	r3, r0
 8002326:	74fb      	strb	r3, [r7, #19]
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23e>
 800232e:	7cfb      	ldrb	r3, [r7, #19]
 8002330:	e00c      	b.n	800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
                                        filter_width, filter_height, data_type,
                                        data));

  data->input_zero_point = input->params.zero_point;
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002338:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002340:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 8002342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3744      	adds	r7, #68	; 0x44
 8002350:	46bd      	mov	sp, r7
 8002352:	bd90      	pop	{r4, r7, pc}
 8002354:	08016e40 	.word	0x08016e40
 8002358:	08016d88 	.word	0x08016d88
 800235c:	08016da8 	.word	0x08016da8
 8002360:	08016e18 	.word	0x08016e18
 8002364:	08016e2c 	.word	0x08016e2c
 8002368:	08016e54 	.word	0x08016e54
 800236c:	08016e70 	.word	0x08016e70
 8002370:	08016de4 	.word	0x08016de4
 8002374:	08016e8c 	.word	0x08016e8c
 8002378:	08016ea0 	.word	0x08016ea0
 800237c:	08016ebc 	.word	0x08016ebc
 8002380:	08016edc 	.word	0x08016edc
 8002384:	08016f60 	.word	0x08016f60
 8002388:	08016f88 	.word	0x08016f88

0800238c <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteDepthwiseConvParams* params, const OpData& data,
               const TfLiteEvalTensor* input, const TfLiteEvalTensor* filter,
               const TfLiteEvalTensor* bias, TfLiteEvalTensor* output) {
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	b0b5      	sub	sp, #212	; 0xd4
 8002390:	af06      	add	r7, sp, #24
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	7c1b      	ldrb	r3, [r3, #16]
 800239e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80023a2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fcec 	bl	8002d84 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);

  tflite::DepthwiseParams op_params;
  // Padding type is ignored, but still set.
  op_params.padding_type = PaddingType::kSame;
 80023ac:	2301      	movs	r3, #1
 80023ae:	743b      	strb	r3, [r7, #16]
  op_params.padding_values.width = data.padding.width;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	827b      	strh	r3, [r7, #18]
  op_params.padding_values.height = data.padding.height;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	82bb      	strh	r3, [r7, #20]
  op_params.stride_width = params->stride_width;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	837b      	strh	r3, [r7, #26]
  op_params.stride_height = params->stride_height;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	83bb      	strh	r3, [r7, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	83fb      	strh	r3, [r7, #30]
  op_params.dilation_height_factor = params->dilation_height_factor;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	843b      	strh	r3, [r7, #32]
  op_params.depth_multiplier = params->depth_multiplier;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.float_activation_min = output_activation_min;
 80023e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ea:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.float_activation_max = output_activation_max;
 80023ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ee:	647b      	str	r3, [r7, #68]	; 0x44

  tflite::reference_ops::DepthwiseConv(
      op_params, tflite::micro::GetTensorShape(input),
 80023f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023f4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f004 f83e 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 80023fe:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002402:	f000 fd01 	bl	8002e08 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8002406:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<float>(input),
      tflite::micro::GetTensorShape(filter),
 8002408:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800240c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002410:	4618      	mov	r0, r3
 8002412:	f004 f832 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 8002416:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800241a:	f000 fcf5 	bl	8002e08 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800241e:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<float>(filter),
      tflite::micro::GetTensorShape(bias),
 8002420:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002424:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002428:	4618      	mov	r0, r3
 800242a:	f004 f826 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 800242e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002432:	f000 fce9 	bl	8002e08 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8002436:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<float>(bias),
      tflite::micro::GetTensorShape(output),
 8002438:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800243c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002440:	4618      	mov	r0, r3
 8002442:	f004 f81a 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 8002446:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800244a:	f000 fcec 	bl	8002e26 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800244e:	4603      	mov	r3, r0
 8002450:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002454:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002458:	f107 0010 	add.w	r0, r7, #16
 800245c:	9304      	str	r3, [sp, #16]
 800245e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002462:	9303      	str	r3, [sp, #12]
 8002464:	9502      	str	r5, [sp, #8]
 8002466:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	9400      	str	r4, [sp, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	4632      	mov	r2, r6
 8002472:	f7ff fa76 	bl	8001962 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      tflite::micro::GetTensorShape(output),
 8002476:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe ff7a 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 8002480:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe ff75 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 800248a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe ff70 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 8002494:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe ff6b 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<float>(output));
}
 800249e:	bf00      	nop
 80024a0:	37bc      	adds	r7, #188	; 0xbc
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024a6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteDepthwiseConvParams* params,
                             const OpData& data, const TfLiteEvalTensor* input,
                             const TfLiteEvalTensor* filter,
                             const TfLiteEvalTensor* bias,
                             TfLiteEvalTensor* output) {
 80024a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a8:	b0b7      	sub	sp, #220	; 0xdc
 80024aa:	af08      	add	r7, sp, #32
 80024ac:	6178      	str	r0, [r7, #20]
 80024ae:	6139      	str	r1, [r7, #16]
 80024b0:	60fa      	str	r2, [r7, #12]
 80024b2:	60bb      	str	r3, [r7, #8]
  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
 80024b4:	2301      	movs	r3, #1
 80024b6:	763b      	strb	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b21b      	sxth	r3, r3
 80024be:	837b      	strh	r3, [r7, #26]
  op_params.padding_values.height = data.padding.height;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	83bb      	strh	r3, [r7, #28]
  op_params.stride_width = params->stride_width;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.stride_height = params->stride_height;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.dilation_width_factor = params->dilation_width_factor;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	b21b      	sxth	r3, r3
 80024de:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.dilation_height_factor = params->dilation_height_factor;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	b21b      	sxth	r3, r3
 80024e6:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.depth_multiplier = params->depth_multiplier;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	b21b      	sxth	r3, r3
 80024ee:	857b      	strh	r3, [r7, #42]	; 0x2a
  op_params.input_offset = -data.input_zero_point;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	425b      	negs	r3, r3
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.weights_offset = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.output_offset = data.output_zero_point;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
  // TODO(b/130439627): Use calculated value for clamping.
  op_params.quantized_activation_min = std::numeric_limits<int8_t>::min();
 8002502:	f7fe fe75 	bl	80011f0 <_ZNSt14numeric_limitsIaE3minEv>
 8002506:	4603      	mov	r3, r0
 8002508:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
 800250a:	f7fe fe7a 	bl	8001202 <_ZNSt14numeric_limitsIaE3maxEv>
 800250e:	4603      	mov	r3, r0
 8002510:	647b      	str	r3, [r7, #68]	; 0x44

  reference_integer_ops::DepthwiseConvPerChannel(
      op_params, data.per_channel_output_multiplier,
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6a5c      	ldr	r4, [r3, #36]	; 0x24
      data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800251a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800251e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002522:	4618      	mov	r0, r3
 8002524:	f003 ffa9 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 8002528:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800252c:	f000 fc8c 	bl	8002e48 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8002530:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(filter),
 8002532:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002536:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800253a:	4618      	mov	r0, r3
 800253c:	f003 ff9d 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 8002540:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002544:	f000 fc80 	bl	8002e48 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8002548:	6078      	str	r0, [r7, #4]
      tflite::micro::GetTensorData<int8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 800254a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800254e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002552:	4618      	mov	r0, r3
 8002554:	f003 ff91 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 8002558:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800255c:	f000 fc83 	bl	8002e66 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8002560:	6038      	str	r0, [r7, #0]
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 8002562:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002566:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800256a:	4618      	mov	r0, r3
 800256c:	f003 ff85 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 8002570:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002574:	f000 fc86 	bl	8002e84 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8002578:	4603      	mov	r3, r0
 800257a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800257e:	f107 0018 	add.w	r0, r7, #24
 8002582:	9306      	str	r3, [sp, #24]
 8002584:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002588:	9305      	str	r3, [sp, #20]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9304      	str	r3, [sp, #16]
 800258e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002592:	9303      	str	r3, [sp, #12]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	9600      	str	r6, [sp, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	462a      	mov	r2, r5
 80025a4:	4621      	mov	r1, r4
 80025a6:	f7ff f819 	bl	80015dc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      tflite::micro::GetTensorShape(output),
 80025aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fee0 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 80025b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fedb 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 80025be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fed6 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 80025c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fed1 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
}
 80025d2:	bf00      	nop
 80025d4:	37bc      	adds	r7, #188	; 0xbc
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025da <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteDepthwiseConvParams* params, const OpData& data,
                   const TfLiteEvalTensor* input,
                   const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
                   TfLiteEvalTensor* output) {
 80025da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025dc:	b0b7      	sub	sp, #220	; 0xdc
 80025de:	af06      	add	r7, sp, #24
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = -data.input_zero_point;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	425b      	negs	r3, r3
 80025ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const int32_t filter_offset = -data.filter_zero_point;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	425b      	negs	r3, r3
 80025f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const int32_t output_offset = data.output_zero_point;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  tflite::DepthwiseParams op_params;
  // Padding type is ignored, but still set.
  op_params.padding_type = PaddingType::kSame;
 8002604:	2301      	movs	r3, #1
 8002606:	753b      	strb	r3, [r7, #20]
  op_params.padding_values.width = data.padding.width;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	b21b      	sxth	r3, r3
 800260e:	82fb      	strh	r3, [r7, #22]
  op_params.padding_values.height = data.padding.height;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	b21b      	sxth	r3, r3
 8002616:	833b      	strh	r3, [r7, #24]
  op_params.stride_width = params->stride_width;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	b21b      	sxth	r3, r3
 800261e:	83fb      	strh	r3, [r7, #30]
  op_params.stride_height = params->stride_height;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	b21b      	sxth	r3, r3
 8002626:	843b      	strh	r3, [r7, #32]
  op_params.dilation_width_factor = params->dilation_width_factor;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	b21b      	sxth	r3, r3
 800262e:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.dilation_height_factor = params->dilation_height_factor;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	b21b      	sxth	r3, r3
 8002636:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.depth_multiplier = params->depth_multiplier;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	b21b      	sxth	r3, r3
 800263e:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.quantized_activation_min = data.output_activation_min;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c
  op_params.quantized_activation_max = data.output_activation_max;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.input_offset = input_offset;
 800264c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.weights_offset = filter_offset;
 8002652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.output_offset = output_offset;
 8002658:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.output_multiplier = data.output_multiplier;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	425b      	negs	r3, r3
 800266a:	63bb      	str	r3, [r7, #56]	; 0x38

  tflite::reference_ops::DepthwiseConv(
      op_params, tflite::micro::GetTensorShape(input),
 800266c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002670:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002674:	4618      	mov	r0, r3
 8002676:	f003 ff00 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 800267a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800267e:	f000 fc12 	bl	8002ea6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8002682:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<uint8_t>(input),
      tflite::micro::GetTensorShape(filter),
 8002684:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002688:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fef4 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 8002692:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002696:	f000 fc06 	bl	8002ea6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800269a:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<uint8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 800269c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026a0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 fee8 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 80026aa:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80026ae:	f000 fbda 	bl	8002e66 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80026b2:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 80026b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026b8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 fedc 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 80026c2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80026c6:	f000 fbfd 	bl	8002ec4 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80026d0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80026d4:	f107 0014 	add.w	r0, r7, #20
 80026d8:	9304      	str	r3, [sp, #16]
 80026da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026de:	9303      	str	r3, [sp, #12]
 80026e0:	9502      	str	r5, [sp, #8]
 80026e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	9400      	str	r4, [sp, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	4632      	mov	r2, r6
 80026ee:	f7ff facf 	bl	8001c90 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
      tflite::micro::GetTensorShape(output),
 80026f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fe3c 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 80026fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fe37 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 8002706:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fe32 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 8002710:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fe2d 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<uint8_t>(output));
}
 800271a:	bf00      	nop
 800271c:	37c4      	adds	r7, #196	; 0xc4
 800271e:	46bd      	mov	sp, r7
 8002720:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8002724:	b5b0      	push	{r4, r5, r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af04      	add	r7, sp, #16
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8002736:	f011 fc8b 	bl	8014050 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 8002742:	f011 fc85 	bl	8014050 <abort>

  auto* params =
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	61fb      	str	r3, [r7, #28]
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	61bb      	str	r3, [r7, #24]

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fba8 	bl	8001eae <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800275e:	6178      	str	r0, [r7, #20]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	6839      	ldr	r1, [r7, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fb91 	bl	8001e8e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800276c:	6138      	str	r0, [r7, #16]
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFilterTensor);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	6839      	ldr	r1, [r7, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fb8a 	bl	8001e8e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800277a:	60f8      	str	r0, [r7, #12]
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 800277c:	6838      	ldr	r0, [r7, #0]
 800277e:	f7ff fab3 	bl	8001ce8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8002782:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kBiasTensor)
 8002784:	2b03      	cmp	r3, #3
 8002786:	d107      	bne.n	8002798 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x74>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	6839      	ldr	r1, [r7, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fb7d 	bl	8001e8e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8002794:	4603      	mov	r3, r0
 8002796:	e000      	b.n	800279a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
 8002798:	2300      	movs	r3, #0
          : nullptr;
 800279a:	60bb      	str	r3, [r7, #8]

  // TODO(aselle): Consider whether float conv and quantized conv should be
  // separate ops to avoid dispatch overhead here.
  switch (input->type) {  // Already know in/out types are same.
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	7a1b      	ldrb	r3, [r3, #8]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d021      	beq.n	80027e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	d010      	beq.n	80027ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa6>
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d12c      	bne.n	8002806 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe2>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, output);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	9303      	str	r3, [sp, #12]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	6839      	ldr	r1, [r7, #0]
 80027c4:	f7ff fde2 	bl	800238c <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>
      break;
 80027c8:	e02d      	b.n	8002826 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	9303      	str	r3, [sp, #12]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	6839      	ldr	r1, [r7, #0]
 80027e2:	f7ff fe60 	bl	80024a6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>
                              output);
      break;
 80027e6:	e01e      	b.n	8002826 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, data, input, filter, bias, output);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	9303      	str	r3, [sp, #12]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	f7ff feeb 	bl	80025da <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>
      break;
 8002804:	e00f      	b.n	8002826 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695c      	ldr	r4, [r3, #20]
 800280a:	687d      	ldr	r5, [r7, #4]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	7a1b      	ldrb	r3, [r3, #8]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fc71 	bl	80010f8 <TfLiteTypeGetName>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	7a1b      	ldrb	r3, [r3, #8]
 800281c:	4904      	ldr	r1, [pc, #16]	; (8002830 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10c>)
 800281e:	4628      	mov	r0, r5
 8002820:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>
  }
  return kTfLiteOk;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bdb0      	pop	{r4, r5, r7, pc}
 8002830:	08016fac 	.word	0x08016fac

08002834 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
 8002834:	b4b0      	push	{r4, r5, r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 8002840:	461c      	mov	r4, r3
 8002842:	4615      	mov	r5, r2
 8002844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002848:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800284c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bcb0      	pop	{r4, r5, r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	08016fc8 	.word	0x08016fc8

08002860 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	da01      	bge.n	800287a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	e000      	b.n	800287c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800287a:	687b      	ldr	r3, [r7, #4]
    }
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	ed93 7a00 	vldr	s14, [r3]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	d501      	bpl.n	80028ac <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	e000      	b.n	80028ae <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80028ac:	687b      	ldr	r3, [r7, #4]
    }
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	ed87 0a03 	vstr	s0, [r7, #12]
 80028c4:	edc7 0a02 	vstr	s1, [r7, #8]
 80028c8:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 80028cc:	f107 0208 	add.w	r2, r7, #8
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ffd6 	bl	8002888 <_ZSt3maxIfERKT_S2_S2_>
 80028dc:	4602      	mov	r2, r0
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f000 f87c 	bl	80029e0 <_ZSt3minIfERKT_S2_S2_>
 80028e8:	4603      	mov	r3, r0
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	ee07 3a90 	vmov	s15, r3
}
 80028f0:	eeb0 0a67 	vmov.f32	s0, s15
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType, typename ExponentType>
inline IntegerType RoundingDivideByPOT(IntegerType x, ExponentType exponent) {
 80028fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	2a00      	cmp	r2, #0
 800290a:	da06      	bge.n	800291a <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0x1e>
 800290c:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xd4>)
 800290e:	4a31      	ldr	r2, [pc, #196]	; (80029d4 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xd8>)
 8002910:	f240 1171 	movw	r1, #369	; 0x171
 8002914:	4830      	ldr	r0, [pc, #192]	; (80029d8 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xdc>)
 8002916:	f011 fba3 	bl	8014060 <__assert_func>
  assert(exponent <= 31);
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	2a1f      	cmp	r2, #31
 800291e:	dd06      	ble.n	800292e <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0x32>
 8002920:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xe0>)
 8002922:	4a2c      	ldr	r2, [pc, #176]	; (80029d4 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xd8>)
 8002924:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8002928:	482b      	ldr	r0, [pc, #172]	; (80029d8 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xdc>)
 800292a:	f011 fb99 	bl	8014060 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800292e:	f04f 0101 	mov.w	r1, #1
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	6838      	ldr	r0, [r7, #0]
 8002938:	f1a0 0620 	sub.w	r6, r0, #32
 800293c:	f1c0 0520 	rsb	r5, r0, #32
 8002940:	fa02 f400 	lsl.w	r4, r2, r0
 8002944:	fa01 f606 	lsl.w	r6, r1, r6
 8002948:	4334      	orrs	r4, r6
 800294a:	fa21 f505 	lsr.w	r5, r1, r5
 800294e:	432c      	orrs	r4, r5
 8002950:	fa01 f300 	lsl.w	r3, r1, r0
 8002954:	3b01      	subs	r3, #1
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fac5 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800295c:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800295e:	2000      	movs	r0, #0
 8002960:	f000 fac1 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8002964:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8002966:	2001      	movs	r0, #1
 8002968:	f000 fabd 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800296c:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800296e:	69f9      	ldr	r1, [r7, #28]
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fac3 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8002976:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8002978:	2101      	movs	r1, #1
 800297a:	69f8      	ldr	r0, [r7, #28]
 800297c:	f000 facc 	bl	8002f18 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8002980:	4604      	mov	r4, r0
 8002982:	69b9      	ldr	r1, [r7, #24]
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fad6 	bl	8002f36 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800298a:	4603      	mov	r3, r0
 800298c:	6979      	ldr	r1, [r7, #20]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fab4 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8002994:	4603      	mov	r3, r0
  const IntegerType threshold =
 8002996:	4619      	mov	r1, r3
 8002998:	4620      	mov	r0, r4
 800299a:	f000 fae0 	bl	8002f5e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800299e:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 80029a0:	6839      	ldr	r1, [r7, #0]
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fab8 	bl	8002f18 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80029a8:	4604      	mov	r4, r0
 80029aa:	68f9      	ldr	r1, [r7, #12]
 80029ac:	6938      	ldr	r0, [r7, #16]
 80029ae:	f000 fae4 	bl	8002f7a <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80029b2:	4603      	mov	r3, r0
 80029b4:	6979      	ldr	r1, [r7, #20]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 faa0 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80029bc:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 80029be:	4619      	mov	r1, r3
 80029c0:	4620      	mov	r0, r4
 80029c2:	f000 facc 	bl	8002f5e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80029c6:	4603      	mov	r3, r0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3724      	adds	r7, #36	; 0x24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d0:	08016fe8 	.word	0x08016fe8
 80029d4:	08019d88 	.word	0x08019d88
 80029d8:	08016ff8 	.word	0x08016ff8
 80029dc:	08017014 	.word	0x08017014

080029e0 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	ed93 7a00 	vldr	s14, [r3]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fe:	d501      	bpl.n	8002a04 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	e000      	b.n	8002a06 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002a04:	687b      	ldr	r3, [r7, #4]
    }
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph>:
  static inline void Run(
 8002a12:	b590      	push	{r4, r7, lr}
 8002a14:	b0ad      	sub	sp, #180	; 0xb4
 8002a16:	af02      	add	r7, sp, #8
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	603b      	str	r3, [r7, #0]
    const int stride_width = params.stride_width;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002a26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    const int stride_height = params.stride_height;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const int dilation_width_factor = params.dilation_width_factor;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int dilation_height_factor = params.dilation_height_factor;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002a44:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int pad_width = params.padding_values.width;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a4c:	67bb      	str	r3, [r7, #120]	; 0x78
    const int pad_height = params.padding_values.height;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a54:	677b      	str	r3, [r7, #116]	; 0x74
    const int depth_multiplier = params.depth_multiplier;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002a5c:	673b      	str	r3, [r7, #112]	; 0x70
    const int32_t output_activation_min = params.quantized_activation_min;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	61fb      	str	r3, [r7, #28]
    const int32_t output_activation_max = params.quantized_activation_max;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	61bb      	str	r3, [r7, #24]
    const int32_t input_offset = params.input_offset;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    const int32_t filter_offset = params.weights_offset;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t output_offset = params.output_offset;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_multiplier = params.output_multiplier;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	663b      	str	r3, [r7, #96]	; 0x60
    const int output_shift = params.output_shift;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	65fb      	str	r3, [r7, #92]	; 0x5c
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8002a88:	68b8      	ldr	r0, [r7, #8]
 8002a8a:	f7fe fc89 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d001      	beq.n	8002a98 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x86>
 8002a94:	f011 fadc 	bl	8014050 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8002a98:	6838      	ldr	r0, [r7, #0]
 8002a9a:	f7fe fc81 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d001      	beq.n	8002aa8 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x96>
 8002aa4:	f011 fad4 	bl	8014050 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8002aa8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002aac:	f7fe fc78 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d001      	beq.n	8002aba <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0xa8>
 8002ab6:	f011 facb 	bl	8014050 <abort>
    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	dd01      	ble.n	8002ac6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0xb4>
 8002ac2:	f011 fac5 	bl	8014050 <abort>
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002acc:	2100      	movs	r1, #0
 8002ace:	68b8      	ldr	r0, [r7, #8]
 8002ad0:	f7fe fd31 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8002ad4:	65b8      	str	r0, [r7, #88]	; 0x58
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002adc:	2103      	movs	r1, #3
 8002ade:	6838      	ldr	r0, [r7, #0]
 8002ae0:	f7fe fd29 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	617b      	str	r3, [r7, #20]
    const int input_height = input_shape.Dims(1);
 8002ae8:	2101      	movs	r1, #1
 8002aea:	68b8      	ldr	r0, [r7, #8]
 8002aec:	f7fe fc64 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002af0:	6578      	str	r0, [r7, #84]	; 0x54
    const int input_width = input_shape.Dims(2);
 8002af2:	2102      	movs	r1, #2
 8002af4:	68b8      	ldr	r0, [r7, #8]
 8002af6:	f7fe fc5f 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002afa:	6538      	str	r0, [r7, #80]	; 0x50
    const int input_depth = input_shape.Dims(3);
 8002afc:	2103      	movs	r1, #3
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	f7fe fc5a 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002b04:	64f8      	str	r0, [r7, #76]	; 0x4c
    const int filter_height = filter_shape.Dims(1);
 8002b06:	2101      	movs	r1, #1
 8002b08:	6838      	ldr	r0, [r7, #0]
 8002b0a:	f7fe fc55 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002b0e:	64b8      	str	r0, [r7, #72]	; 0x48
    const int filter_width = filter_shape.Dims(2);
 8002b10:	2102      	movs	r1, #2
 8002b12:	6838      	ldr	r0, [r7, #0]
 8002b14:	f7fe fc50 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002b18:	6478      	str	r0, [r7, #68]	; 0x44
    const int output_height = output_shape.Dims(1);
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002b20:	f7fe fc4a 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002b24:	6438      	str	r0, [r7, #64]	; 0x40
    const int output_width = output_shape.Dims(2);
 8002b26:	2102      	movs	r1, #2
 8002b28:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002b2c:	f7fe fc44 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002b30:	63f8      	str	r0, [r7, #60]	; 0x3c
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8002b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b36:	fb02 f203 	mul.w	r2, r2, r3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x132>
 8002b40:	f011 fa86 	bl	8014050 <abort>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8002b44:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002b48:	f7fe fc7a 	bl	8001440 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x146>
 8002b54:	f011 fa7c 	bl	8014050 <abort>
    for (int b = 0; b < batches; ++b) {
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002b5e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f280 8109 	bge.w	8002d7c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x36a>
      for (int out_y = 0; out_y < output_height; ++out_y) {
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b70:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b76:	429a      	cmp	r2, r3
 8002b78:	f280 80fa 	bge.w	8002d70 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x35e>
        for (int out_x = 0; out_x < output_width; ++out_x) {
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b82:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f280 80eb 	bge.w	8002d64 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x352>
          for (int ic = 0; ic < input_depth; ++ic) {
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	f280 80dc 	bge.w	8002d58 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x346>
            for (int m = 0; m < depth_multiplier; m++) {
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f280 80cd 	bge.w	8002d4c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x33a>
              const int oc = m + ic * depth_multiplier;
 8002bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002bb8:	fb02 f303 	mul.w	r3, r2, r3
 8002bbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bc0:	4413      	add	r3, r2
 8002bc2:	63bb      	str	r3, [r7, #56]	; 0x38
              const int in_x_origin = (out_x * stride_width) - pad_width;
 8002bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bc8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002bcc:	fb02 f203 	mul.w	r2, r2, r3
 8002bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y_origin = (out_y * stride_height) - pad_height;
 8002bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002bde:	fb02 f203 	mul.w	r2, r2, r3
 8002be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
              int32_t acc = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bf2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	da5e      	bge.n	8002cba <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x2a8>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c02:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	da50      	bge.n	8002cae <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x29c>
                      in_x_origin + dilation_width_factor * filter_x;
 8002c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c10:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002c14:	fb02 f303 	mul.w	r3, r2, r3
                  const int in_x =
 8002c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c1a:	4413      	add	r3, r2
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                      in_y_origin + dilation_height_factor * filter_y;
 8002c1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c20:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
                  const int in_y =
 8002c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2a:	4413      	add	r3, r2
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db36      	blt.n	8002ca2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
 8002c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	da32      	bge.n	8002ca2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db2f      	blt.n	8002ca2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
 8002c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c46:	429a      	cmp	r2, r3
 8002c48:	da2b      	bge.n	8002ca2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8002c4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c54:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c58:	68b8      	ldr	r0, [r7, #8]
 8002c5a:	f7fe fc14 	bl	8001486 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	461a      	mov	r2, r3
                    int32_t input_val =
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
                    int32_t filter_val = filter_data[Offset(
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c72:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c76:	2100      	movs	r1, #0
 8002c78:	6838      	ldr	r0, [r7, #0]
 8002c7a:	f7fe fc04 	bl	8001486 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c86:	4413      	add	r3, r2
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	623b      	str	r3, [r7, #32]
                    acc += (filter_val + filter_offset) *
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c90:	4413      	add	r3, r2
                           (input_val + input_offset);
 8002c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c96:	440a      	add	r2, r1
                    acc += (filter_val + filter_offset) *
 8002c98:	fb02 f203 	mul.w	r2, r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8002ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002cac:	e7a9      	b.n	8002c02 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1f0>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8002cae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cb8:	e79b      	b.n	8002bf2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1e0>
              if (bias_data) {
 8002cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x2c2>
                acc += bias_data[oc];
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cca:	4413      	add	r3, r2
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
              acc = DepthwiseConvRound<output_rounding>(acc, output_multiplier,
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cd8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe ffc8 	bl	8001c70 <_ZN6tflite13reference_ops14depthwise_conv18DepthwiseConvRoundILNS_27DepthwiseConvOutputRoundingE1EEEllli>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	613b      	str	r3, [r7, #16]
              acc += output_offset;
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ce8:	4413      	add	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
              acc = std::max(acc, output_activation_min);
 8002cec:	f107 021c 	add.w	r2, r7, #28
 8002cf0:	f107 0310 	add.w	r3, r7, #16
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fab8 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	613b      	str	r3, [r7, #16]
              acc = std::min(acc, output_activation_max);
 8002d02:	f107 0218 	add.w	r2, r7, #24
 8002d06:	f107 0310 	add.w	r3, r7, #16
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fda7 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 8002d12:	4603      	mov	r3, r0
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	613b      	str	r3, [r7, #16]
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8002d18:	693c      	ldr	r4, [r7, #16]
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d22:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d2a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002d2e:	f7fe fbaa 	bl	8001486 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b2e2      	uxtb	r2, r4
 8002d3e:	701a      	strb	r2, [r3, #0]
            for (int m = 0; m < depth_multiplier; m++) {
 8002d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d44:	3301      	adds	r3, #1
 8002d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d4a:	e72c      	b.n	8002ba6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x194>
          for (int ic = 0; ic < input_depth; ++ic) {
 8002d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d50:	3301      	adds	r3, #1
 8002d52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d56:	e71d      	b.n	8002b94 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x182>
        for (int out_x = 0; out_x < output_width; ++out_x) {
 8002d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d62:	e70e      	b.n	8002b82 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x170>
      for (int out_y = 0; out_y < output_height; ++out_y) {
 8002d64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d6e:	e6ff      	b.n	8002b70 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x15e>
    for (int b = 0; b < batches; ++b) {
 8002d70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d74:	3301      	adds	r3, #1
 8002d76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002d7a:	e6f0      	b.n	8002b5e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x14c>
  }
 8002d7c:	bf00      	nop
 8002d7e:	37ac      	adds	r7, #172	; 0xac
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd90      	pop	{r4, r7, pc}

08002d84 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10b      	bne.n	8002db0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8002da0:	f7fe fa4a 	bl	8001238 <_ZNSt14numeric_limitsIfE3maxEv>
 8002da4:	eef0 7a40 	vmov.f32	s15, s0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8002dae:	e023      	b.n	8002df8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d107      	bne.n	8002dc6 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a0f      	ldr	r2, [pc, #60]	; (8002e00 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8002dc2:	601a      	str	r2, [r3, #0]
}
 8002dc4:	e018      	b.n	8002df8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d107      	bne.n	8002ddc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8002dd0:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dd8:	601a      	str	r2, [r3, #0]
}
 8002dda:	e00d      	b.n	8002df8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8002ddc:	f7fe fa3a 	bl	8001254 <_ZNSt14numeric_limitsIfE6lowestEv>
 8002de0:	eef0 7a40 	vmov.f32	s15, s0
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8002dea:	f7fe fa25 	bl	8001238 <_ZNSt14numeric_limitsIfE3maxEv>
 8002dee:	eef0 7a40 	vmov.f32	s15, s0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	edc3 7a00 	vstr	s15, [r3]
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40c00000 	.word	0x40c00000
 8002e04:	bf800000 	.word	0xbf800000

08002e08 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8002e16:	f011 f91b 	bl	8014050 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	e000      	b.n	8002e3c <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8002e56:	f011 f8fb 	bl	8014050 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8002e74:	f011 f8ec 	bl	8014050 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	e000      	b.n	8002e9a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 8002eb4:	f011 f8cc 	bl	8014050 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	e000      	b.n	8002eda <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  return x;
 8002eee:	687b      	ldr	r3, [r7, #4]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  return a & b;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4013      	ands	r3, r2
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	fa42 f303 	asr.w	r3, r2, r3
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	bfb4      	ite	lt
 8002f48:	2301      	movlt	r3, #1
 8002f4a:	2300      	movge	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f827 	bl	8002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  return a + b;
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	4413      	add	r3, r2
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	bfcc      	ite	gt
 8002f8c:	2301      	movgt	r3, #1
 8002f8e:	2300      	movle	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f805 	bl	8002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8002f98:	4603      	mov	r3, r0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f000 f807 	bl	8002fc4 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	e000      	b.n	8002fbc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return ~a;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	43db      	mvns	r3, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8002fdc:	b40e      	push	{r1, r2, r3}
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8002fe6:	f107 0320 	add.w	r3, r7, #32
 8002fea:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	69f9      	ldr	r1, [r7, #28]
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4798      	blx	r3
 8002ffc:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800300a:	b003      	add	sp, #12
 800300c:	4770      	bx	lr

0800300e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 800300e:	b40c      	push	{r2, r3}
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 800301a:	f107 031c 	add.w	r3, r7, #28
 800301e:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3308      	adds	r3, #8
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800303e:	b002      	add	sp, #8
 8003040:	4770      	bx	lr

08003042 <_ZN15FeatureProviderC1EiPa>:

#include "audio_provider.h"
#include "micro_features_generator.h"
#include "micro_model_settings.h"

FeatureProvider::FeatureProvider(int feature_size, int8_t* feature_data)
 8003042:	b480      	push	{r7}
 8003044:	b087      	sub	sp, #28
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
    : feature_size_(feature_size),
      feature_data_(feature_data),
      is_first_run_(true) {
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	721a      	strb	r2, [r3, #8]
  // Initialize the feature data to default values.
  for (int n = 0; n < feature_size_; ++n) {
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	429a      	cmp	r2, r3
 800306c:	da09      	bge.n	8003082 <_ZN15FeatureProviderC1EiPa+0x40>
    feature_data_[n] = 0;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	4413      	add	r3, r2
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
  for (int n = 0; n < feature_size_; ++n) {
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3301      	adds	r3, #1
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e7f0      	b.n	8003064 <_ZN15FeatureProviderC1EiPa+0x22>
  }
}
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4618      	mov	r0, r3
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <_ZN15FeatureProviderD1Ev>:

FeatureProvider::~FeatureProvider() {}
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80030be:	b590      	push	{r4, r7, lr}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80030c6:	687c      	ldr	r4, [r7, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fd07 	bl	8003ade <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80030d0:	4603      	mov	r3, r0
 80030d2:	425b      	negs	r3, r3
 80030d4:	4423      	add	r3, r4
  }
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd90      	pop	{r4, r7, pc}

080030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ffe7 	bl	80030be <_ZNK11flatbuffers5Table9GetVTableEv>
 80030f0:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fcd7 	bl	8003aa6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80030f8:	4603      	mov	r3, r0
 80030fa:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80030fc:	887a      	ldrh	r2, [r7, #2]
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	429a      	cmp	r2, r3
 8003102:	d207      	bcs.n	8003114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 8003104:	887b      	ldrh	r3, [r7, #2]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fccb 	bl	8003aa6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8003110:	4603      	mov	r3, r0
 8003112:	e000      	b.n	8003116 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 8003114:	2300      	movs	r3, #0
  }
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
    VT_DEPTH_MULTIPLIER = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_W_FACTOR = 14,
    VT_DILATION_H_FACTOR = 16
  };
  tflite::Padding padding() const {
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	2104      	movs	r1, #4
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fd4f 	bl	8003bd0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003132:	4603      	mov	r3, r0
 8003134:	b2db      	uxtb	r3, r3
  }
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	2106      	movs	r1, #6
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fd11 	bl	8003b74 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003152:	4603      	mov	r3, r0
  }
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	2108      	movs	r1, #8
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fd02 	bl	8003b74 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003170:	4603      	mov	r3, r0
  }
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	210a      	movs	r1, #10
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fcf3 	bl	8003b74 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800318e:	4603      	mov	r3, r0
  }
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	210c      	movs	r1, #12
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fd12 	bl	8003bd0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80031ac:	4603      	mov	r3, r0
 80031ae:	b2db      	uxtb	r3, r3
  }
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	210e      	movs	r1, #14
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fcd4 	bl	8003b74 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80031cc:	4603      	mov	r3, r0
  }
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	2110      	movs	r1, #16
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fcc5 	bl	8003b74 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80031ea:	4603      	mov	r3, r0
  }
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_WEIGHTS_FORMAT = 6,
    VT_KEEP_NUM_DIMS = 8,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 10
  };
  tflite::ActivationFunctionType fused_activation_function() const {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	2104      	movs	r1, #4
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fce4 	bl	8003bd0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003208:	4603      	mov	r3, r0
 800320a:	b2db      	uxtb	r3, r3
  }
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	2106      	movs	r1, #6
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fcd4 	bl	8003bd0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003228:	4603      	mov	r3, r0
 800322a:	b2db      	uxtb	r3, r3
  }
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	2108      	movs	r1, #8
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fc67 	bl	8003b16 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
  }
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	210a      	movs	r1, #10
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fc53 	bl	8003b16 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	b2db      	uxtb	r3, r3
  }
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <_ZNK6tflite14SoftmaxOptions4betaEv>:
struct SoftmaxOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SoftmaxOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BETA = 4
  };
  float beta() const {
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80032a8 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8003292:	2104      	movs	r1, #4
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fcbb 	bl	8003c10 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 800329a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800329e:	eeb0 0a67 	vmov.f32	s0, s15
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	00000000 	.word	0x00000000

080032ac <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
struct ReshapeOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReshapeOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_SHAPE = 4
  };
  const flatbuffers::Vector<int32_t> *new_shape() const {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2104      	movs	r1, #4
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fc79 	bl	8003bb0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80032be:	4603      	mov	r3, r0
  }
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <_ZNK6tflite8Operator20builtin_options_typeEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	210a      	movs	r1, #10
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fc1d 	bl	8003b16 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80032dc:	4603      	mov	r3, r0
  }
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	210c      	movs	r1, #12
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fc2e 	bl	8003b54 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 80032f8:	4603      	mov	r3, r0
  }
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
  }
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ffdc 	bl	80032c8 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003310:	4603      	mov	r3, r0
 8003312:	2b02      	cmp	r3, #2
 8003314:	d104      	bne.n	8003320 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffe5 	bl	80032e6 <_ZNK6tflite8Operator15builtin_optionsEv>
 800331c:	4603      	mov	r3, r0
 800331e:	e000      	b.n	8003322 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 8003320:	2300      	movs	r3, #0
  }
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_SVDFOptions ? static_cast<const tflite::SVDFOptions *>(builtin_options()) : nullptr;
  }
  const tflite::RNNOptions *builtin_options_as_RNNOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ffc8 	bl	80032c8 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003338:	4603      	mov	r3, r0
 800333a:	2b08      	cmp	r3, #8
 800333c:	d104      	bne.n	8003348 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ffd1 	bl	80032e6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003344:	4603      	mov	r3, r0
 8003346:	e000      	b.n	800334a <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8003348:	2300      	movs	r3, #0
  }
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ffb4 	bl	80032c8 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003360:	4603      	mov	r3, r0
 8003362:	2b09      	cmp	r3, #9
 8003364:	d104      	bne.n	8003370 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ffbd 	bl	80032e6 <_ZNK6tflite8Operator15builtin_optionsEv>
 800336c:	4603      	mov	r3, r0
 800336e:	e000      	b.n	8003372 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 8003370:	2300      	movs	r3, #0
  }
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
  }
  const tflite::CallOptions *builtin_options_as_CallOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOptions ? static_cast<const tflite::CallOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff ffa0 	bl	80032c8 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003388:	4603      	mov	r3, r0
 800338a:	2b11      	cmp	r3, #17
 800338c:	d104      	bne.n	8003398 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffa9 	bl	80032e6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003394:	4603      	mov	r3, r0
 8003396:	e000      	b.n	800339a <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8003398:	2300      	movs	r3, #0
  }
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3304      	adds	r3, #4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	4610      	mov	r0, r2
 80033dc:	4798      	blx	r3
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8003418:	f010 fe1a 	bl	8014050 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8003422:	f010 fe15 	bl	8014050 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 800342c:	f010 fe10 	bl	8014050 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8003436:	f010 fe0b 	bl	8014050 <abort>
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8003458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345a:	4917      	ldr	r1, [pc, #92]	; (80034b8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 800345c:	6838      	ldr	r0, [r7, #0]
 800345e:	f7ff fdbd 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8003462:	2301      	movs	r3, #1
 8003464:	e024      	b.n	80034b0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8003466:	68b8      	ldr	r0, [r7, #8]
 8003468:	f000 fbf4 	bl	8003c54 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800346c:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	429a      	cmp	r2, r3
 8003476:	d906      	bls.n	8003486 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8003478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800347a:	4910      	ldr	r1, [pc, #64]	; (80034bc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 800347c:	6838      	ldr	r0, [r7, #0]
 800347e:	f7ff fdad 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8003482:	2301      	movs	r3, #1
 8003484:	e014      	b.n	80034b0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	429a      	cmp	r2, r3
 8003490:	d20d      	bcs.n	80034ae <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	18d4      	adds	r4, r2, r3
 800349a:	6979      	ldr	r1, [r7, #20]
 800349c:	68b8      	ldr	r0, [r7, #8]
 800349e:	f000 fbe7 	bl	8003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80034a2:	4603      	mov	r3, r0
 80034a4:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3301      	adds	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e7ed      	b.n	800348a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd90      	pop	{r4, r7, pc}
 80034b8:	08017038 	.word	0x08017038
 80034bc:	08017068 	.word	0x08017068

080034c0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d81b      	bhi.n	8003508 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034f1 	.word	0x080034f1
 80034dc:	080034f5 	.word	0x080034f5
 80034e0:	080034f9 	.word	0x080034f9
 80034e4:	080034fd 	.word	0x080034fd
 80034e8:	08003501 	.word	0x08003501
 80034ec:	08003505 	.word	0x08003505
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e00a      	b.n	800350a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e008      	b.n	800350a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 80034f8:	2302      	movs	r3, #2
 80034fa:	e006      	b.n	800350a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e004      	b.n	800350a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8003500:	2304      	movs	r3, #4
 8003502:	e002      	b.n	800350a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8003504:	2305      	movs	r3, #5
 8003506:	e000      	b.n	800350a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop

08003518 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 8003528:	2b01      	cmp	r3, #1
 800352a:	d002      	beq.n	8003532 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 800352c:	e003      	b.n	8003536 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 800352e:	2301      	movs	r3, #1
 8003530:	e002      	b.n	8003538 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 8003532:	2302      	movs	r3, #2
 8003534:	e000      	b.n	8003538 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d85e      	bhi.n	8003616 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd2>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	0800359f 	.word	0x0800359f
 8003564:	08003595 	.word	0x08003595
 8003568:	080035bd 	.word	0x080035bd
 800356c:	080035c7 	.word	0x080035c7
 8003570:	080035db 	.word	0x080035db
 8003574:	080035ef 	.word	0x080035ef
 8003578:	080035f9 	.word	0x080035f9
 800357c:	080035b3 	.word	0x080035b3
 8003580:	08003603 	.word	0x08003603
 8003584:	080035d1 	.word	0x080035d1
 8003588:	080035a9 	.word	0x080035a9
 800358c:	0800360d 	.word	0x0800360d
 8003590:	080035e5 	.word	0x080035e5
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	220a      	movs	r2, #10
 8003598:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800359a:	2300      	movs	r3, #0
 800359c:	e045      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e040      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	220b      	movs	r2, #11
 80035ac:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e03b      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2207      	movs	r2, #7
 80035b6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e036      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2202      	movs	r2, #2
 80035c0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e031      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2203      	movs	r2, #3
 80035ca:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e02c      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2209      	movs	r2, #9
 80035d4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e027      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2204      	movs	r2, #4
 80035de:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e022      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	220d      	movs	r2, #13
 80035e8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e01d      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_STRING:
      *type = kTfLiteString;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2205      	movs	r2, #5
 80035f2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e018      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2206      	movs	r2, #6
 80035fc:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80035fe:	2300      	movs	r3, #0
 8003600:	e013      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2208      	movs	r2, #8
 8003606:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003608:	2300      	movs	r3, #0
 800360a:	e00e      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	220c      	movs	r2, #12
 8003610:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003612:	2300      	movs	r3, #0
 8003614:	e009      	b.n	800362a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    default:
      *type = kTfLiteNoType;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	461a      	mov	r2, r3
 8003620:	4904      	ldr	r1, [pc, #16]	; (8003634 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xf0>)
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fcda 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8003628:	2301      	movs	r3, #1
  }
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	08017174 	.word	0x08017174

08003638 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 8003638:	b5b0      	push	{r4, r5, r7, lr}
 800363a:	b08a      	sub	sp, #40	; 0x28
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7ff fed9 	bl	8003404 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8003652:	f107 0318 	add.w	r3, r7, #24
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fec4 	bl	80033e6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 800365e:	f107 0310 	add.w	r3, r7, #16
 8003662:	f107 0218 	add.w	r2, r7, #24
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fb27 	bl	8003cbc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800366e:	f107 0310 	add.w	r3, r7, #16
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fb5e 	bl	8003d36 <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800367a:	4603      	mov	r3, r0
 800367c:	f083 0301 	eor.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8003686:	68b8      	ldr	r0, [r7, #8]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	4b3e      	ldr	r3, [pc, #248]	; (8003784 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	4b3c      	ldr	r3, [pc, #240]	; (8003788 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 8003696:	4a3d      	ldr	r2, [pc, #244]	; (800378c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 8003698:	f7ff fcb9 	bl	800300e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800369c:	2401      	movs	r4, #1
 800369e:	e066      	b.n	800376e <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff fe2e 	bl	8003302 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 80036a6:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d056      	beq.n	800375c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 80036ae:	69f8      	ldr	r0, [r7, #28]
 80036b0:	f7ff fd35 	bl	800311e <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461d      	mov	r5, r3
 80036b8:	f107 0310 	add.w	r3, r7, #16
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fb47 	bl	8003d50 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80036c2:	4604      	mov	r4, r0
 80036c4:	4628      	mov	r0, r5
 80036c6:	f7ff ff27 	bl	8003518 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 80036ca:	4603      	mov	r3, r0
 80036cc:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 80036ce:	f107 0310 	add.w	r3, r7, #16
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fb3c 	bl	8003d50 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80036d8:	4604      	mov	r4, r0
 80036da:	69f8      	ldr	r0, [r7, #28]
 80036dc:	f7ff fd2f 	bl	800313e <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 80036e0:	4603      	mov	r3, r0
 80036e2:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 80036e4:	f107 0310 	add.w	r3, r7, #16
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fb31 	bl	8003d50 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80036ee:	4604      	mov	r4, r0
 80036f0:	69f8      	ldr	r0, [r7, #28]
 80036f2:	f7ff fd33 	bl	800315c <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 80036f6:	4603      	mov	r3, r0
 80036f8:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 80036fa:	f107 0310 	add.w	r3, r7, #16
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fb26 	bl	8003d50 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003704:	4604      	mov	r4, r0
 8003706:	69f8      	ldr	r0, [r7, #28]
 8003708:	f7ff fd37 	bl	800317a <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 800370c:	4603      	mov	r3, r0
 800370e:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8003710:	69f8      	ldr	r0, [r7, #28]
 8003712:	f7ff fd41 	bl	8003198 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 8003716:	4603      	mov	r3, r0
 8003718:	461d      	mov	r5, r3
    params->activation =
 800371a:	f107 0310 	add.w	r3, r7, #16
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fb16 	bl	8003d50 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003724:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8003726:	4628      	mov	r0, r5
 8003728:	f7ff feca 	bl	80034c0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800372c:	4603      	mov	r3, r0
    params->activation =
 800372e:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 8003730:	f107 0310 	add.w	r3, r7, #16
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fb0b 	bl	8003d50 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800373a:	4604      	mov	r4, r0
 800373c:	69f8      	ldr	r0, [r7, #28]
 800373e:	f7ff fd3b 	bl	80031b8 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 8003742:	4603      	mov	r3, r0
 8003744:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8003746:	f107 0310 	add.w	r3, r7, #16
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fb00 	bl	8003d50 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003750:	4604      	mov	r4, r0
 8003752:	69f8      	ldr	r0, [r7, #28]
 8003754:	f7ff fd3f 	bl	80031d6 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 8003758:	4603      	mov	r3, r0
 800375a:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fb01 	bl	8003d68 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003766:	4602      	mov	r2, r0
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800376c:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 800376e:	f107 0310 	add.w	r3, r7, #16
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fac0 	bl	8003cf8 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8003778:	4623      	mov	r3, r4
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bdb0      	pop	{r4, r5, r7, pc}
 8003782:	bf00      	nop
 8003784:	080170ec 	.word	0x080170ec
 8003788:	080170ac 	.word	0x080170ac
 800378c:	080170d4 	.word	0x080170d4

08003790 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff fe2d 	bl	8003404 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80037aa:	f107 0318 	add.w	r3, r7, #24
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fe18 	bl	80033e6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 80037b6:	f107 0310 	add.w	r3, r7, #16
 80037ba:	f107 0218 	add.w	r2, r7, #24
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fae5 	bl	8003d90 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80037c6:	f107 0310 	add.w	r3, r7, #16
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fb1c 	bl	8003e0a <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f083 0301 	eor.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00c      	beq.n	80037f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4b36      	ldr	r3, [pc, #216]	; (80038bc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	f240 435c 	movw	r3, #1116	; 0x45c
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 80037ee:	4a35      	ldr	r2, [pc, #212]	; (80038c4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 80037f0:	f7ff fc0d 	bl	800300e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80037f4:	2401      	movs	r4, #1
 80037f6:	e057      	b.n	80038a8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff fd96 	bl	800332a <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 80037fe:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d047      	beq.n	8003896 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8003806:	69f8      	ldr	r0, [r7, #28]
 8003808:	f7ff fcf4 	bl	80031f4 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 800380c:	4603      	mov	r3, r0
 800380e:	461d      	mov	r5, r3
    params->activation =
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fb05 	bl	8003e24 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800381a:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 800381c:	4628      	mov	r0, r5
 800381e:	f7ff fe4f 	bl	80034c0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8003822:	4603      	mov	r3, r0
    params->activation =
 8003824:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 8003826:	f107 0310 	add.w	r3, r7, #16
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fafa 	bl	8003e24 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003830:	4604      	mov	r4, r0
 8003832:	69f8      	ldr	r0, [r7, #28]
 8003834:	f7ff fcfe 	bl	8003234 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8003838:	4603      	mov	r3, r0
 800383a:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 800383c:	f107 0310 	add.w	r3, r7, #16
 8003840:	4618      	mov	r0, r3
 8003842:	f000 faef 	bl	8003e24 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003846:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 8003848:	69f8      	ldr	r0, [r7, #28]
 800384a:	f7ff fd07 	bl	800325c <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 800384e:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 8003850:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 8003852:	69f8      	ldr	r0, [r7, #28]
 8003854:	f7ff fcde 	bl	8003214 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 800385e:	2b01      	cmp	r3, #1
 8003860:	d009      	beq.n	8003876 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 8003862:	e011      	b.n	8003888 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8003864:	f107 0310 	add.w	r3, r7, #16
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fadb 	bl	8003e24 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800386e:	4603      	mov	r3, r0
 8003870:	2200      	movs	r2, #0
 8003872:	705a      	strb	r2, [r3, #1]
        break;
 8003874:	e00f      	b.n	8003896 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8003876:	f107 0310 	add.w	r3, r7, #16
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fad2 	bl	8003e24 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003880:	4603      	mov	r3, r0
 8003882:	2201      	movs	r2, #1
 8003884:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8003886:	e006      	b.n	8003896 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	490f      	ldr	r1, [pc, #60]	; (80038c8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fba5 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 8003892:	2401      	movs	r4, #1
 8003894:	e008      	b.n	80038a8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003896:	f107 0310 	add.w	r3, r7, #16
 800389a:	4618      	mov	r0, r3
 800389c:	f000 face 	bl	8003e3c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80038a0:	4602      	mov	r2, r0
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80038a6:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 80038a8:	f107 0310 	add.w	r3, r7, #16
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fa8d 	bl	8003dcc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80038b2:	4623      	mov	r3, r4
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bdb0      	pop	{r4, r5, r7, pc}
 80038bc:	080170ec 	.word	0x080170ec
 80038c0:	080170ac 	.word	0x080170ac
 80038c4:	080170d4 	.word	0x080170d4
 80038c8:	08017198 	.word	0x08017198

080038cc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b08d      	sub	sp, #52	; 0x34
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f7ff fd8f 	bl	8003404 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80038e6:	f107 0318 	add.w	r3, r7, #24
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fd7a 	bl	80033e6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 80038f2:	f107 0310 	add.w	r3, r7, #16
 80038f6:	f107 0218 	add.w	r2, r7, #24
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fab1 	bl	8003e64 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8003902:	f107 0310 	add.w	r3, r7, #16
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fae8 	bl	8003ede <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800390e:	4603      	mov	r3, r0
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00c      	beq.n	8003934 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800391a:	68b8      	ldr	r0, [r7, #8]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4b27      	ldr	r3, [pc, #156]	; (80039bc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	f240 53ad 	movw	r3, #1453	; 0x5ad
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 800392a:	4a26      	ldr	r2, [pc, #152]	; (80039c4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 800392c:	f7ff fb6f 	bl	800300e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8003930:	2401      	movs	r4, #1
 8003932:	e039      	b.n	80039a8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fd20 	bl	800337a <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d029      	beq.n	8003996 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 8003942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003944:	f7ff fcb2 	bl	80032ac <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 8003948:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d022      	beq.n	8003996 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
      TF_LITE_ENSURE_STATUS(
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	4618      	mov	r0, r3
 8003956:	f000 facf 	bl	8003ef8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800395a:	4603      	mov	r3, r0
 800395c:	4619      	mov	r1, r3
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>)
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	460a      	mov	r2, r1
 8003968:	6a39      	ldr	r1, [r7, #32]
 800396a:	2020      	movs	r0, #32
 800396c:	f7ff fd6a 	bl	8003444 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 8003970:	4603      	mov	r3, r0
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
 800397a:	7ffc      	ldrb	r4, [r7, #31]
 800397c:	e014      	b.n	80039a8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 800397e:	6a38      	ldr	r0, [r7, #32]
 8003980:	f000 f968 	bl	8003c54 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8003984:	4604      	mov	r4, r0
 8003986:	f107 0310 	add.w	r3, r7, #16
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fab4 	bl	8003ef8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003990:	4603      	mov	r3, r0
 8003992:	4622      	mov	r2, r4
 8003994:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003996:	f107 0310 	add.w	r3, r7, #16
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fab8 	bl	8003f10 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80039a0:	4602      	mov	r2, r0
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80039a6:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 80039a8:	f107 0310 	add.w	r3, r7, #16
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fa77 	bl	8003ea0 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80039b2:	4623      	mov	r3, r4
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	372c      	adds	r7, #44	; 0x2c
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd90      	pop	{r4, r7, pc}
 80039bc:	080170ec 	.word	0x080170ec
 80039c0:	080170ac 	.word	0x080170ac
 80039c4:	080170d4 	.word	0x080170d4
 80039c8:	080171c4 	.word	0x080171c4

080039cc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b08b      	sub	sp, #44	; 0x2c
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f7ff fd0f 	bl	8003404 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80039e6:	f107 0318 	add.w	r3, r7, #24
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fcfa 	bl	80033e6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 80039f2:	f107 0310 	add.w	r3, r7, #16
 80039f6:	f107 0218 	add.w	r2, r7, #24
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fa9b 	bl	8003f38 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8003a02:	f107 0310 	add.w	r3, r7, #16
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fad2 	bl	8003fb2 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f083 0301 	eor.w	r3, r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00c      	beq.n	8003a34 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8003a1a:	68b8      	ldr	r0, [r7, #8]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	f240 6336 	movw	r3, #1590	; 0x636
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 8003a2a:	4a18      	ldr	r2, [pc, #96]	; (8003a8c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 8003a2c:	f7ff faef 	bl	800300e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8003a30:	2401      	movs	r4, #1
 8003a32:	e01c      	b.n	8003a6e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f7ff fc8c 	bl	8003352 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 8003a3a:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 8003a42:	f107 0310 	add.w	r3, r7, #16
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fac0 	bl	8003fcc <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	69f8      	ldr	r0, [r7, #28]
 8003a50:	f7ff fc18 	bl	8003284 <_ZNK6tflite14SoftmaxOptions4betaEv>
 8003a54:	eef0 7a40 	vmov.f32	s15, s0
 8003a58:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003a5c:	f107 0310 	add.w	r3, r7, #16
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fabf 	bl	8003fe4 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003a66:	4602      	mov	r2, r0
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8003a6c:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8003a6e:	f107 0310 	add.w	r3, r7, #16
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fa7e 	bl	8003f74 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8003a78:	4623      	mov	r3, r4
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3724      	adds	r7, #36	; 0x24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd90      	pop	{r4, r7, pc}
 8003a82:	bf00      	nop
 8003a84:	080170ec 	.word	0x080170ec
 8003a88:	080170ac 	.word	0x080170ac
 8003a8c:	080170d4 	.word	0x080170d4

08003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8003a98:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fab5 	bl	8004022 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff ffde 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8003ad4:	4603      	mov	r3, r0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fa8e 	bl	800400c <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8003af0:	4603      	mov	r3, r0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa97 	bl	800403a <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8003b0c:	4603      	mov	r3, r0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	807b      	strh	r3, [r7, #2]
 8003b22:	4613      	mov	r3, r2
 8003b24:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fad7 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003b30:	4603      	mov	r3, r0
 8003b32:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003b34:	89fb      	ldrh	r3, [r7, #14]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	89fb      	ldrh	r3, [r7, #14]
 8003b3e:	4413      	add	r3, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ffda 	bl	8003afa <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8003b46:	4603      	mov	r3, r0
 8003b48:	e000      	b.n	8003b4c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8003b4a:	787b      	ldrb	r3, [r7, #1]
  }
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fa74 	bl	8004052 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8003b6a:	4603      	mov	r3, r0
  }
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	4619      	mov	r1, r3
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f7ff faa9 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003b90:	8afb      	ldrh	r3, [r7, #22]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	8afb      	ldrh	r3, [r7, #22]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff ff9e 	bl	8003ade <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	e000      	b.n	8003ba8 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8003ba6:	687b      	ldr	r3, [r7, #4]
  }
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8003bbc:	887b      	ldrh	r3, [r7, #2]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fa66 	bl	8004092 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8003bc6:	4603      	mov	r3, r0
  }
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fa7a 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003bea:	4603      	mov	r3, r0
 8003bec:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003bee:	89fb      	ldrh	r3, [r7, #14]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	89fb      	ldrh	r3, [r7, #14]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fa69 	bl	80040d2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8003c00:	4603      	mov	r3, r0
 8003c02:	e001      	b.n	8003c08 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8003c04:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003c1e:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8003c20:	897b      	ldrh	r3, [r7, #10]
 8003c22:	4619      	mov	r1, r3
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff fa5a 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003c2e:	8afb      	ldrh	r3, [r7, #22]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	8afb      	ldrh	r3, [r7, #22]
 8003c38:	4413      	add	r3, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fa58 	bl	80040f0 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 8003c40:	eef0 7a40 	vmov.f32	s15, s0
 8003c44:	e001      	b.n	8003c4a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 8003c46:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 8003c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff15 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8003c66:	4603      	mov	r3, r0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ffea 	bl	8003c54 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8003c80:	4602      	mov	r2, r0
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d306      	bcc.n	8003c96 <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8003c8c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003c90:	4809      	ldr	r0, [pc, #36]	; (8003cb8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8003c92:	f010 f9e5 	bl	8014060 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fa4e 	bl	8004138 <_ZNK11flatbuffers6VectorIlE4DataEv>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	6839      	ldr	r1, [r7, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fa37 	bl	8004114 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 8003ca6:	4603      	mov	r3, r0
  }
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	080171cc 	.word	0x080171cc
 8003cb4:	08019e00 	.word	0x08019e00
 8003cb8:	080171d8 	.word	0x080171d8

08003cbc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003cbc:	b590      	push	{r4, r7, lr}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fa56 	bl	800417c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	f107 030c 	add.w	r3, r7, #12
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fb60 	bl	80033a2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003ce2:	f107 030c 	add.w	r3, r7, #12
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4621      	mov	r1, r4
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa75 	bl	80041da <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd90      	pop	{r4, r7, pc}

08003cf8 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fa85 	bl	8004212 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003d08:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fa8a 	bl	800422c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f7ff fb4d 	bl	80033c0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
      }
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fa96 	bl	8004272 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	return get();
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fa9b 	bl	8004294 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003d5e:	4603      	mov	r3, r0
      }
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fa8f 	bl	8004294 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003d76:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fa49 	bl	8004212 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003d80:	4602      	mov	r2, r0
 8003d82:	2300      	movs	r3, #0
 8003d84:	6013      	str	r3, [r2, #0]
	return __p;
 8003d86:	68fb      	ldr	r3, [r7, #12]
      }
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fa85 	bl	80042ae <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8003da4:	4604      	mov	r4, r0
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	f107 030c 	add.w	r3, r7, #12
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff faf6 	bl	80033a2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003db6:	f107 030c 	add.w	r3, r7, #12
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa9b 	bl	80042fa <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd90      	pop	{r4, r7, pc}

08003dcc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 faab 	bl	8004332 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003ddc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fab0 	bl	800434c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f7ff fae3 	bl	80033c0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
      }
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fabc 	bl	8004392 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	return get();
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fac1 	bl	80043b4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003e32:	4603      	mov	r3, r0
      }
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fab5 	bl	80043b4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003e4a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fa6f 	bl	8004332 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003e54:	4602      	mov	r2, r0
 8003e56:	2300      	movs	r3, #0
 8003e58:	6013      	str	r3, [r2, #0]
	return __p;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
      }
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 faab 	bl	80043ce <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 8003e78:	4604      	mov	r4, r0
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	f107 030c 	add.w	r3, r7, #12
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fa8c 	bl	80033a2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003e8a:	f107 030c 	add.w	r3, r7, #12
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4621      	mov	r1, r4
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fac7 	bl	8004426 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fad7 	bl	800445e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003eb0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fadc 	bl	8004478 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	f7ff fa79 	bl	80033c0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
      }
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fae8 	bl	80044be <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	return get();
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 faed 	bl	80044e0 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003f06:	4603      	mov	r3, r0
      }
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fae1 	bl	80044e0 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003f1e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fa9b 	bl	800445e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6013      	str	r3, [r2, #0]
	return __p;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
      }
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fad7 	bl	80044fa <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	f107 030c 	add.w	r3, r7, #12
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fa22 	bl	80033a2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	461a      	mov	r2, r3
 8003f64:	4621      	mov	r1, r4
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 faed 	bl	8004546 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd90      	pop	{r4, r7, pc}

08003f74 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fafd 	bl	800457e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003f84:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fb02 	bl	8004598 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f7ff fa0f 	bl	80033c0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
      }
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fb0e 	bl	80045de <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	return get();
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fb13 	bl	8004600 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003fda:	4603      	mov	r3, r0
      }
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fb07 	bl	8004600 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003ff2:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fac1 	bl	800457e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	2300      	movs	r3, #0
 8004000:	6013      	str	r3, [r2, #0]
	return __p;
 8004002:	68fb      	ldr	r3, [r7, #12]
      }
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
    return t;
 8004014:	687b      	ldr	r3, [r7, #4]
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	4603      	mov	r3, r0
 800402a:	80fb      	strh	r3, [r7, #6]
    return t;
 800402c:	88fb      	ldrh	r3, [r7, #6]
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	4603      	mov	r3, r0
 8004042:	71fb      	strb	r3, [r7, #7]
    return t;
 8004044:	79fb      	ldrb	r3, [r7, #7]
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800405e:	887b      	ldrh	r3, [r7, #2]
 8004060:	4619      	mov	r1, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff f83b 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004068:	4603      	mov	r3, r0
 800406a:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	89fb      	ldrh	r3, [r7, #14]
 8004070:	4413      	add	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d006      	beq.n	8004088 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 800407a:	68b8      	ldr	r0, [r7, #8]
 800407c:	f7ff fd21 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004080:	4602      	mov	r2, r0
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4413      	add	r3, r2
                        : nullptr;
 8004086:	e000      	b.n	800408a <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004088:	2300      	movs	r3, #0
  }
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800409e:	887b      	ldrh	r3, [r7, #2]
 80040a0:	4619      	mov	r1, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff f81b 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80040a8:	4603      	mov	r3, r0
 80040aa:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	89fb      	ldrh	r3, [r7, #14]
 80040b0:	4413      	add	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80040b4:	89fb      	ldrh	r3, [r7, #14]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d006      	beq.n	80040c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 80040ba:	68b8      	ldr	r0, [r7, #8]
 80040bc:	f7ff fd01 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4413      	add	r3, r2
                        : nullptr;
 80040c6:	e000      	b.n	80040ca <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80040c8:	2300      	movs	r3, #0
  }
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f993 3000 	ldrsb.w	r3, [r3]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fa9a 	bl	800461a <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 80040e6:	4603      	mov	r3, r0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	edd3 7a00 	vldr	s15, [r3]
 80040fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004102:	f000 fa97 	bl	8004634 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8004106:	eef0 7a40 	vmov.f32	s15, s0
}
 800410a:	eeb0 0a67 	vmov.f32	s0, s15
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff6f 	bl	800400c <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800412e:	4603      	mov	r3, r0
  }
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
  }
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2204      	movs	r2, #4
 800418c:	211c      	movs	r1, #28
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
 8004192:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4619      	mov	r1, r3
 8004198:	201c      	movs	r0, #28
 800419a:	f7fe ff84 	bl	80030a6 <_ZnwjPv>
 800419e:	4601      	mov	r1, r0
 80041a0:	2900      	cmp	r1, #0
 80041a2:	d00a      	beq.n	80041ba <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v+0x3e>
 80041a4:	460a      	mov	r2, r1
 80041a6:	2300      	movs	r3, #0
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	6053      	str	r3, [r2, #4]
 80041ac:	6093      	str	r3, [r2, #8]
 80041ae:	60d3      	str	r3, [r2, #12]
 80041b0:	6113      	str	r3, [r2, #16]
 80041b2:	6153      	str	r3, [r2, #20]
 80041b4:	6193      	str	r3, [r2, #24]
 80041b6:	460b      	mov	r3, r1
 80041b8:	e000      	b.n	80041bc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v+0x40>
 80041ba:	460b      	mov	r3, r1
  }
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 80041da:	b5b0      	push	{r4, r5, r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 80041e6:	68fc      	ldr	r4, [r7, #12]
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ffe9 	bl	80041c4 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80041f2:	4603      	mov	r3, r0
 80041f4:	681d      	ldr	r5, [r3, #0]
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ffaa 	bl	8004150 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80041fc:	4603      	mov	r3, r0
 80041fe:	461a      	mov	r2, r3
 8004200:	4629      	mov	r1, r5
 8004202:	4620      	mov	r0, r4
 8004204:	f000 f81f 	bl	8004246 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bdb0      	pop	{r4, r5, r7, pc}

08004212 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fa18 	bl	8004652 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004222:	4603      	mov	r3, r0
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fa18 	bl	800466c <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800423c:	4603      	mov	r3, r0
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004246:	b590      	push	{r4, r7, lr}
 8004248:	b085      	sub	sp, #20
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004252:	68fc      	ldr	r4, [r7, #12]
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff86 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800425a:	4602      	mov	r2, r0
 800425c:	f107 0308 	add.w	r3, r7, #8
 8004260:	4619      	mov	r1, r3
 8004262:	4620      	mov	r0, r4
 8004264:	f000 fa1a 	bl	800469c <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bd90      	pop	{r4, r7, pc}

08004272 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f80a 	bl	8004294 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	bf14      	ite	ne
 8004286:	2301      	movne	r3, #1
 8004288:	2300      	moveq	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fa15 	bl	80046ce <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80042a4:	4603      	mov	r3, r0
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  T* AllocatePOD() {
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2201      	movs	r2, #1
 80042be:	2104      	movs	r1, #4
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
 80042c4:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4619      	mov	r1, r3
 80042ca:	2004      	movs	r0, #4
 80042cc:	f7fe feeb 	bl	80030a6 <_ZnwjPv>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v+0x2e>
 80042d6:	4619      	mov	r1, r3
 80042d8:	2200      	movs	r2, #0
 80042da:	600a      	str	r2, [r1, #0]
  }
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 80042fa:	b5b0      	push	{r4, r5, r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 8004306:	68fc      	ldr	r4, [r7, #12]
 8004308:	f107 0308 	add.w	r3, r7, #8
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ffe9 	bl	80042e4 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004312:	4603      	mov	r3, r0
 8004314:	681d      	ldr	r5, [r3, #0]
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ff1a 	bl	8004150 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800431c:	4603      	mov	r3, r0
 800431e:	461a      	mov	r2, r3
 8004320:	4629      	mov	r1, r5
 8004322:	4620      	mov	r0, r4
 8004324:	f000 f81f 	bl	8004366 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bdb0      	pop	{r4, r5, r7, pc}

08004332 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f9d4 	bl	80046ea <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004342:	4603      	mov	r3, r0
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f9d4 	bl	8004704 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800435c:	4603      	mov	r3, r0
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004366:	b590      	push	{r4, r7, lr}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004372:	68fc      	ldr	r4, [r7, #12]
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fef6 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800437a:	4602      	mov	r2, r0
 800437c:	f107 0308 	add.w	r3, r7, #8
 8004380:	4619      	mov	r1, r3
 8004382:	4620      	mov	r0, r4
 8004384:	f000 f9d6 	bl	8004734 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bd90      	pop	{r4, r7, pc}

08004392 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f80a 	bl	80043b4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bf14      	ite	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	2300      	moveq	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f9d1 	bl	8004766 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 80043ce:	b590      	push	{r4, r7, lr}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2204      	movs	r2, #4
 80043de:	2124      	movs	r1, #36	; 0x24
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
 80043e4:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4619      	mov	r1, r3
 80043ea:	2024      	movs	r0, #36	; 0x24
 80043ec:	f7fe fe5b 	bl	80030a6 <_ZnwjPv>
 80043f0:	4604      	mov	r4, r0
 80043f2:	2c00      	cmp	r4, #0
 80043f4:	d007      	beq.n	8004406 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v+0x38>
 80043f6:	4620      	mov	r0, r4
 80043f8:	2324      	movs	r3, #36	; 0x24
 80043fa:	461a      	mov	r2, r3
 80043fc:	2100      	movs	r1, #0
 80043fe:	f00f ff13 	bl	8014228 <memset>
 8004402:	4623      	mov	r3, r4
 8004404:	e000      	b.n	8004408 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v+0x3a>
 8004406:	4623      	mov	r3, r4
  }
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	bd90      	pop	{r4, r7, pc}

08004410 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 8004426:	b5b0      	push	{r4, r5, r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 8004432:	68fc      	ldr	r4, [r7, #12]
 8004434:	f107 0308 	add.w	r3, r7, #8
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ffe9 	bl	8004410 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800443e:	4603      	mov	r3, r0
 8004440:	681d      	ldr	r5, [r3, #0]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff fe84 	bl	8004150 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004448:	4603      	mov	r3, r0
 800444a:	461a      	mov	r2, r3
 800444c:	4629      	mov	r1, r5
 800444e:	4620      	mov	r0, r4
 8004450:	f000 f81f 	bl	8004492 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bdb0      	pop	{r4, r5, r7, pc}

0800445e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 f98a 	bl	8004782 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800446e:	4603      	mov	r3, r0
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f98a 	bl	800479c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004488:	4603      	mov	r3, r0
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004492:	b590      	push	{r4, r7, lr}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800449e:	68fc      	ldr	r4, [r7, #12]
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fe60 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80044a6:	4602      	mov	r2, r0
 80044a8:	f107 0308 	add.w	r3, r7, #8
 80044ac:	4619      	mov	r1, r3
 80044ae:	4620      	mov	r0, r4
 80044b0:	f000 f98c 	bl	80047cc <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd90      	pop	{r4, r7, pc}

080044be <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f80a 	bl	80044e0 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f987 	bl	80047fe <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2204      	movs	r2, #4
 800450a:	2104      	movs	r1, #4
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
 8004510:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4619      	mov	r1, r3
 8004516:	2004      	movs	r0, #4
 8004518:	f7fe fdc5 	bl	80030a6 <_ZnwjPv>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v+0x2e>
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
  }
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 8004546:	b5b0      	push	{r4, r5, r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 8004552:	68fc      	ldr	r4, [r7, #12]
 8004554:	f107 0308 	add.w	r3, r7, #8
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ffe9 	bl	8004530 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800455e:	4603      	mov	r3, r0
 8004560:	681d      	ldr	r5, [r3, #0]
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff fdf4 	bl	8004150 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	4629      	mov	r1, r5
 800456e:	4620      	mov	r0, r4
 8004570:	f000 f81f 	bl	80045b2 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bdb0      	pop	{r4, r5, r7, pc}

0800457e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f946 	bl	800481a <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800458e:	4603      	mov	r3, r0
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f946 	bl	8004834 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80045a8:	4603      	mov	r3, r0
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80045b2:	b590      	push	{r4, r7, lr}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80045be:	68fc      	ldr	r4, [r7, #12]
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff fdd0 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80045c6:	4602      	mov	r2, r0
 80045c8:	f107 0308 	add.w	r3, r7, #8
 80045cc:	4619      	mov	r1, r3
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 f948 	bl	8004864 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd90      	pop	{r4, r7, pc}

080045de <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f80a 	bl	8004600 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f943 	bl	8004896 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004610:	4603      	mov	r3, r0
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	4603      	mov	r3, r0
 8004622:	71fb      	strb	r3, [r7, #7]
    return t;
 8004624:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	ee07 3a90 	vmov	s15, r3
}
 8004644:	eeb0 0a67 	vmov.f32	s0, s15
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f928 	bl	80048b2 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004662:	4603      	mov	r3, r0
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f927 	bl	80048ca <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800467c:	4603      	mov	r3, r0
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800469c:	b5b0      	push	{r4, r5, r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80046a8:	68fc      	ldr	r4, [r7, #12]
 80046aa:	68b8      	ldr	r0, [r7, #8]
 80046ac:	f7ff ffeb 	bl	8004686 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80046b0:	4605      	mov	r5, r0
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fd57 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80046b8:	4603      	mov	r3, r0
 80046ba:	461a      	mov	r2, r3
 80046bc:	4629      	mov	r1, r5
 80046be:	4620      	mov	r0, r4
 80046c0:	f000 f910 	bl	80048e4 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bdb0      	pop	{r4, r5, r7, pc}

080046ce <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 f921 	bl	8004920 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80046de:	4603      	mov	r3, r0
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f920 	bl	800493a <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80046fa:	4603      	mov	r3, r0
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f91f 	bl	8004952 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8004734:	b5b0      	push	{r4, r5, r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004740:	68fc      	ldr	r4, [r7, #12]
 8004742:	68b8      	ldr	r0, [r7, #8]
 8004744:	f7ff ffeb 	bl	800471e <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004748:	4605      	mov	r5, r0
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fd0b 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004750:	4603      	mov	r3, r0
 8004752:	461a      	mov	r2, r3
 8004754:	4629      	mov	r1, r5
 8004756:	4620      	mov	r0, r4
 8004758:	f000 f908 	bl	800496c <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bdb0      	pop	{r4, r5, r7, pc}

08004766 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 f919 	bl	80049a8 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004776:	4603      	mov	r3, r0
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 f918 	bl	80049c2 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004792:	4603      	mov	r3, r0
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f917 	bl	80049da <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80047ac:	4603      	mov	r3, r0
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80047cc:	b5b0      	push	{r4, r5, r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80047d8:	68fc      	ldr	r4, [r7, #12]
 80047da:	68b8      	ldr	r0, [r7, #8]
 80047dc:	f7ff ffeb 	bl	80047b6 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80047e0:	4605      	mov	r5, r0
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fcbf 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	4629      	mov	r1, r5
 80047ee:	4620      	mov	r0, r4
 80047f0:	f000 f900 	bl	80049f4 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bdb0      	pop	{r4, r5, r7, pc}

080047fe <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f911 	bl	8004a30 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800480e:	4603      	mov	r3, r0
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f910 	bl	8004a4a <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800482a:	4603      	mov	r3, r0
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f90f 	bl	8004a62 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004844:	4603      	mov	r3, r0
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8004864:	b5b0      	push	{r4, r5, r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004870:	68fc      	ldr	r4, [r7, #12]
 8004872:	68b8      	ldr	r0, [r7, #8]
 8004874:	f7ff ffeb 	bl	800484e <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004878:	4605      	mov	r5, r0
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fc73 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004880:	4603      	mov	r3, r0
 8004882:	461a      	mov	r2, r3
 8004884:	4629      	mov	r1, r5
 8004886:	4620      	mov	r0, r4
 8004888:	f000 f8f8 	bl	8004a7c <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bdb0      	pop	{r4, r5, r7, pc}

08004896 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 f909 	bl	8004ab8 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80048a6:	4603      	mov	r3, r0
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f928 	bl	8004b10 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80048c0:	4603      	mov	r3, r0
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 f8fc 	bl	8004ad2 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80048da:	4603      	mov	r3, r0
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80048f0:	68fc      	ldr	r4, [r7, #12]
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff fc37 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80048f8:	4603      	mov	r3, r0
 80048fa:	4619      	mov	r1, r3
 80048fc:	4620      	mov	r0, r4
 80048fe:	f000 f8f4 	bl	8004aea <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1d1c      	adds	r4, r3, #4
 8004906:	68b8      	ldr	r0, [r7, #8]
 8004908:	f7ff febd 	bl	8004686 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800490c:	4603      	mov	r3, r0
 800490e:	4619      	mov	r1, r3
 8004910:	4620      	mov	r0, r4
 8004912:	f000 f90b 	bl	8004b2c <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	bd90      	pop	{r4, r7, pc}

08004920 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f90f 	bl	8004b4e <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004930:	4603      	mov	r3, r0
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f90f 	bl	8004b66 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004948:	4603      	mov	r3, r0
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f8b8 	bl	8004ad2 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004962:	4603      	mov	r3, r0
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004978:	68fc      	ldr	r4, [r7, #12]
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fbf3 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004980:	4603      	mov	r3, r0
 8004982:	4619      	mov	r1, r3
 8004984:	4620      	mov	r0, r4
 8004986:	f000 f8b0 	bl	8004aea <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1d1c      	adds	r4, r3, #4
 800498e:	68b8      	ldr	r0, [r7, #8]
 8004990:	f7ff fec5 	bl	800471e <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004994:	4603      	mov	r3, r0
 8004996:	4619      	mov	r1, r3
 8004998:	4620      	mov	r0, r4
 800499a:	f000 f8f2 	bl	8004b82 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd90      	pop	{r4, r7, pc}

080049a8 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f8f6 	bl	8004ba4 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f8f6 	bl	8004bbc <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80049d0:	4603      	mov	r3, r0
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 f874 	bl	8004ad2 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80049ea:	4603      	mov	r3, r0
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004a00:	68fc      	ldr	r4, [r7, #12]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff fbaf 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f000 f86c 	bl	8004aea <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1d1c      	adds	r4, r3, #4
 8004a16:	68b8      	ldr	r0, [r7, #8]
 8004a18:	f7ff fecd 	bl	80047b6 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4620      	mov	r0, r4
 8004a22:	f000 f8d9 	bl	8004bd8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}

08004a30 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f8dd 	bl	8004bfa <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8dd 	bl	8004c12 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 f830 	bl	8004ad2 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004a88:	68fc      	ldr	r4, [r7, #12]
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fb6b 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4619      	mov	r1, r3
 8004a94:	4620      	mov	r0, r4
 8004a96:	f000 f828 	bl	8004aea <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1d1c      	adds	r4, r3, #4
 8004a9e:	68b8      	ldr	r0, [r7, #8]
 8004aa0:	f7ff fed5 	bl	800484e <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f000 f8c0 	bl	8004c2e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd90      	pop	{r4, r7, pc}

08004ab8 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f8c4 	bl	8004c50 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8c4 	bl	8004c68 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004aea:	b590      	push	{r4, r7, lr}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8004af4:	687c      	ldr	r4, [r7, #4]
 8004af6:	6838      	ldr	r0, [r7, #0]
 8004af8:	f7ff fb35 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004afc:	4603      	mov	r3, r0
 8004afe:	4619      	mov	r1, r3
 8004b00:	4620      	mov	r0, r4
 8004b02:	f000 f8be 	bl	8004c82 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd90      	pop	{r4, r7, pc}

08004b10 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 f8c1 	bl	8004ca4 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 8004b22:	4603      	mov	r3, r0
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004b36:	6838      	ldr	r0, [r7, #0]
 8004b38:	f7ff fda5 	bl	8004686 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f8af 	bl	8004cba <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3304      	adds	r3, #4
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 f8af 	bl	8004cd6 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004b8c:	6838      	ldr	r0, [r7, #0]
 8004b8e:	f7ff fdc6 	bl	800471e <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b92:	4603      	mov	r3, r0
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f89d 	bl	8004cec <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f89d 	bl	8004d08 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f7ff fde7 	bl	80047b6 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004be8:	4603      	mov	r3, r0
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f88b 	bl	8004d1e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f88b 	bl	8004d3a <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004c38:	6838      	ldr	r0, [r7, #0]
 8004c3a:	f7ff fe08 	bl	800484e <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f879 	bl	8004d50 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f87a 	bl	8004d6c <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004c8c:	6838      	ldr	r0, [r7, #0]
 8004c8e:	f7ff fa6a 	bl	8004166 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f85b 	bl	8004d82 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f84d 	bl	8004d98 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f83f 	bl	8004dae <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 f831 	bl	8004dc4 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 8004d62:	4603      	mov	r3, r0
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fc fadb 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004dea:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	db03      	blt.n	8004dfa <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	db01      	blt.n	8004dfe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8004dfa:	f00f f929 	bl	8014050 <abort>
  const auto* dims_data = shape.DimsData();
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc faff 	bl	8001402 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8004e04:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8004e06:	2301      	movs	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	da12      	bge.n	8004e3c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d005      	beq.n	8004e2a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	4413      	add	r3, r2
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	e000      	b.n	8004e2c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	fb03 f302 	mul.w	r3, r3, r2
 8004e32:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	3301      	adds	r3, #1
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	e7e8      	b.n	8004e0e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8004e3c:	697b      	ldr	r3, [r7, #20]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8004e46:	b590      	push	{r4, r7, lr}
 8004e48:	b091      	sub	sp, #68	; 0x44
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8004e60:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e62:	f7fc fa9d 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004e66:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8004e68:	6838      	ldr	r0, [r7, #0]
 8004e6a:	f7fc fa99 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004e6e:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	4619      	mov	r1, r3
 8004e76:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e78:	f7ff ffaf 	bl	8004dda <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8004e7c:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	1e99      	subs	r1, r3, #2
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	3b01      	subs	r3, #1
                                       output_shape, output_dims_count - 1);
 8004e86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e88:	6838      	ldr	r0, [r7, #0]
 8004e8a:	f7fc fb54 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8004e8e:	6178      	str	r0, [r7, #20]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4619      	mov	r1, r3
 8004e96:	6838      	ldr	r0, [r7, #0]
 8004e98:	f7fc fa8e 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8004e9c:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	da5f      	bge.n	8004f6a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8004eaa:	2300      	movs	r3, #0
 8004eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	da55      	bge.n	8004f62 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	da21      	bge.n	8004f0c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8004ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	fb02 f203 	mul.w	r2, r2, r3
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	4413      	add	r3, r2
 8004eda:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	fb02 f203 	mul.w	r2, r2, r3
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004eee:	4413      	add	r3, r2
 8004ef0:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8004ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f00:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	3301      	adds	r3, #1
 8004f08:	633b      	str	r3, [r7, #48]	; 0x30
 8004f0a:	e7d9      	b.n	8004ec0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8004f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f1e:	4413      	add	r3, r2
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8004f24:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004f28:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f34:	fb02 f203 	mul.w	r2, r2, r3
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f40:	18d4      	adds	r4, r2, r3
 8004f42:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8004f46:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8004f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f4e:	f7fd fcb4 	bl	80028ba <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8004f52:	eef0 7a40 	vmov.f32	s15, s0
 8004f56:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f60:	e7a5      	b.n	8004eae <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8004f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f64:	3301      	adds	r3, #1
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f68:	e79b      	b.n	8004ea2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3744      	adds	r7, #68	; 0x44
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd90      	pop	{r4, r7, pc}

08004f72 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b096      	sub	sp, #88	; 0x58
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8004faa:	6838      	ldr	r0, [r7, #0]
 8004fac:	f7fc f9f8 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	dc01      	bgt.n	8004fba <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8004fb6:	f00f f84b 	bl	8014050 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8004fba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fbc:	f7fc f9f0 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dc01      	bgt.n	8004fca <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8004fc6:	f00f f843 	bl	8014050 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	dd01      	ble.n	8004fd6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 8004fd2:	f00f f83d 	bl	8014050 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8004fd6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fd8:	f7fc f9e2 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004fdc:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8004fde:	6838      	ldr	r0, [r7, #0]
 8004fe0:	f7fc f9de 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8004fe4:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	4619      	mov	r1, r3
 8004fec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fee:	f7ff fef4 	bl	8004dda <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8004ff2:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	1e99      	subs	r1, r3, #2
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffa:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 8004ffc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ffe:	6838      	ldr	r0, [r7, #0]
 8005000:	f7fc fa99 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8005004:	62b8      	str	r0, [r7, #40]	; 0x28
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	3b01      	subs	r3, #1
 800500a:	4619      	mov	r1, r3
 800500c:	6838      	ldr	r0, [r7, #0]
 800500e:	f7fc f9d3 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8005012:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8005014:	2300      	movs	r3, #0
 8005016:	657b      	str	r3, [r7, #84]	; 0x54
 8005018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	429a      	cmp	r2, r3
 800501e:	da73      	bge.n	8005108 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8005020:	2300      	movs	r3, #0
 8005022:	653b      	str	r3, [r7, #80]	; 0x50
 8005024:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	429a      	cmp	r2, r3
 800502a:	da69      	bge.n	8005100 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8005030:	2300      	movs	r3, #0
 8005032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	429a      	cmp	r2, r3
 800503a:	da24      	bge.n	8005086 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 800503c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005040:	fb02 f203 	mul.w	r2, r2, r3
 8005044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005046:	4413      	add	r3, r2
 8005048:	461a      	mov	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8005052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005056:	fb02 f203 	mul.w	r2, r2, r3
 800505a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505c:	4413      	add	r3, r2
 800505e:	461a      	mov	r2, r3
 8005060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005062:	4413      	add	r3, r2
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506c:	4413      	add	r3, r2
 800506e:	6a39      	ldr	r1, [r7, #32]
 8005070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005072:	440a      	add	r2, r1
 8005074:	fb02 f203 	mul.w	r2, r2, r3
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4413      	add	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800507e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005080:	3301      	adds	r3, #1
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005084:	e7d6      	b.n	8005034 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8005086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 800508c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005092:	4413      	add	r3, r2
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc fa76 	bl	8001594 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80050a8:	4603      	mov	r3, r0
 80050aa:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b0:	4413      	add	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 80050b4:	f107 0218 	add.w	r2, r7, #24
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fc f8d4 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 80050c4:	4603      	mov	r3, r0
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 80050ca:	f107 0214 	add.w	r2, r7, #20
 80050ce:	f107 0310 	add.w	r3, r7, #16
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fd fbc3 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 80050da:	4603      	mov	r3, r0
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 80050e0:	6939      	ldr	r1, [r7, #16]
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050e6:	fb02 f203 	mul.w	r2, r2, r3
 80050ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ec:	4413      	add	r3, r2
 80050ee:	461a      	mov	r2, r3
 80050f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050f2:	4413      	add	r3, r2
 80050f4:	b2ca      	uxtb	r2, r1
 80050f6:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80050f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050fa:	3301      	adds	r3, #1
 80050fc:	653b      	str	r3, [r7, #80]	; 0x50
 80050fe:	e791      	b.n	8005024 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 8005100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005102:	3301      	adds	r3, #1
 8005104:	657b      	str	r3, [r7, #84]	; 0x54
 8005106:	e787      	b.n	8005018 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8005108:	bf00      	nop
 800510a:	3758      	adds	r7, #88	; 0x58
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b098      	sub	sp, #96	; 0x60
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	653b      	str	r3, [r7, #80]	; 0x50
  const int32_t filter_offset = params.weights_offset;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32_t output_offset = params.output_offset;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	623b      	str	r3, [r7, #32]
  const int32_t output_multiplier = params.output_multiplier;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	64bb      	str	r3, [r7, #72]	; 0x48
  const int output_shift = params.output_shift;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_activation_min = params.quantized_activation_min;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	61bb      	str	r3, [r7, #24]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	429a      	cmp	r2, r3
 800514e:	dd01      	ble.n	8005154 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 8005150:	f00e ff7e 	bl	8014050 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 800515a:	f00e ff79 	bl	8014050 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800515e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8005160:	f7fc f91e 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8005164:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_dim_count = filter_shape.DimensionsCount();
 8005166:	6838      	ldr	r0, [r7, #0]
 8005168:	f7fc f91a 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800516c:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800516e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005170:	3b01      	subs	r3, #1
 8005172:	4619      	mov	r1, r3
 8005174:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8005176:	f7ff fe30 	bl	8004dda <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800517a:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800517c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517e:	1e99      	subs	r1, r3, #2
 8005180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005182:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 8005184:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005186:	6838      	ldr	r0, [r7, #0]
 8005188:	f7fc f9d5 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800518c:	6378      	str	r0, [r7, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800518e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005190:	3b01      	subs	r3, #1
 8005192:	4619      	mov	r1, r3
 8005194:	6838      	ldr	r0, [r7, #0]
 8005196:	f7fc f90f 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800519a:	6338      	str	r0, [r7, #48]	; 0x30
  for (int b = 0; b < batches; ++b) {
 800519c:	2300      	movs	r3, #0
 800519e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	429a      	cmp	r2, r3
 80051a6:	da7c      	bge.n	80052a2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80051a8:	2300      	movs	r3, #0
 80051aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b0:	429a      	cmp	r2, r3
 80051b2:	da72      	bge.n	800529a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32_t accum = bias_data[out_c];
 80051b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80051ba:	4413      	add	r3, r2
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 80051c0:	2300      	movs	r3, #0
 80051c2:	657b      	str	r3, [r7, #84]	; 0x54
 80051c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	429a      	cmp	r2, r3
 80051ca:	da2c      	bge.n	8005226 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 80051cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d0:	fb02 f203 	mul.w	r2, r2, r3
 80051d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051d6:	4413      	add	r3, r2
 80051d8:	461a      	mov	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4413      	add	r3, r2
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
        int16_t filter_val =
            filter_data[out_c * accum_depth + d] + filter_offset;
 80051ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f0:	fb02 f203 	mul.w	r2, r2, r3
 80051f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f6:	4413      	add	r3, r2
 80051f8:	461a      	mov	r2, r3
 80051fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051fc:	4413      	add	r3, r2
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b29a      	uxth	r2, r3
 8005202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005204:	b29b      	uxth	r3, r3
 8005206:	4413      	add	r3, r2
 8005208:	b29b      	uxth	r3, r3
        int16_t filter_val =
 800520a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        accum += filter_val * input_val;
 800520c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005210:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8005214:	fb02 f203 	mul.w	r2, r2, r3
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	4413      	add	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800521e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005220:	3301      	adds	r3, #1
 8005222:	657b      	str	r3, [r7, #84]	; 0x54
 8005224:	e7ce      	b.n	80051c4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32_t accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800522a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800522c:	4618      	mov	r0, r3
 800522e:	f7fc f9b1 	bl	8001594 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8005232:	4603      	mov	r3, r0
      accum =
 8005234:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16_t, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
 800523e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005242:	f107 0314 	add.w	r3, r7, #20
 8005246:	4611      	mov	r1, r2
 8005248:	4618      	mov	r0, r3
 800524a:	f7fc f80f 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 800524e:	4603      	mov	r3, r0
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28
 800525c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f7fd fafa 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 800526c:	4603      	mov	r3, r0
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	4413      	add	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 800527a:	6979      	ldr	r1, [r7, #20]
 800527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005280:	fb02 f203 	mul.w	r2, r2, r3
 8005284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005286:	4413      	add	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800528c:	4413      	add	r3, r2
 800528e:	b20a      	sxth	r2, r1
 8005290:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8005292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005294:	3301      	adds	r3, #1
 8005296:	65bb      	str	r3, [r7, #88]	; 0x58
 8005298:	e788      	b.n	80051ac <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 800529a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800529c:	3301      	adds	r3, #1
 800529e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052a0:	e77e      	b.n	80051a0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 80052a2:	bf00      	nop
 80052a4:	3760      	adds	r7, #96	; 0x60
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b096      	sub	sp, #88	; 0x58
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	623b      	str	r3, [r7, #32]
  const int32_t output_activation_max = params.quantized_activation_max;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	61fb      	str	r3, [r7, #28]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 80052e2:	6838      	ldr	r0, [r7, #0]
 80052e4:	f7fc f85c 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	dc01      	bgt.n	80052f2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 80052ee:	f00e feaf 	bl	8014050 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80052f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052f4:	f7fc f854 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d001      	beq.n	8005302 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 80052fe:	f00e fea7 	bl	8014050 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	429a      	cmp	r2, r3
 8005308:	dd01      	ble.n	800530e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800530a:	f00e fea1 	bl	8014050 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800530e:	6838      	ldr	r0, [r7, #0]
 8005310:	f7fc f846 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8005314:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 8005316:	2100      	movs	r1, #0
 8005318:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800531a:	f7fc f84d 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800531e:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 8005320:	2101      	movs	r1, #1
 8005322:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005324:	f7fc f848 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8005328:	4603      	mov	r3, r0
 800532a:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532e:	3b02      	subs	r3, #2
 8005330:	4619      	mov	r1, r3
 8005332:	6838      	ldr	r0, [r7, #0]
 8005334:	f7fc f840 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8005338:	4602      	mov	r2, r0
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	429a      	cmp	r2, r3
 800533e:	da01      	bge.n	8005344 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x9a>
 8005340:	f00e fe86 	bl	8014050 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	3b01      	subs	r3, #1
 8005348:	4619      	mov	r1, r3
 800534a:	6838      	ldr	r0, [r7, #0]
 800534c:	f7fc f834 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8005350:	62f8      	str	r0, [r7, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
 8005352:	2300      	movs	r3, #0
 8005354:	657b      	str	r3, [r7, #84]	; 0x54
 8005356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	429a      	cmp	r2, r3
 800535c:	da75      	bge.n	800544a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x1a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800535e:	2300      	movs	r3, #0
 8005360:	653b      	str	r3, [r7, #80]	; 0x50
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005366:	429a      	cmp	r2, r3
 8005368:	da6b      	bge.n	8005442 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x198>
      int32_t acc = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800536e:	2300      	movs	r3, #0
 8005370:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005376:	429a      	cmp	r2, r3
 8005378:	da26      	bge.n	80053c8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11e>
        int32_t input_val = input_data[b * accum_depth + d];
 800537a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800537e:	fb02 f203 	mul.w	r2, r2, r3
 8005382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005384:	4413      	add	r3, r2
 8005386:	461a      	mov	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4413      	add	r3, r2
 800538c:	f993 3000 	ldrsb.w	r3, [r3]
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8005392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005396:	fb02 f203 	mul.w	r2, r2, r3
 800539a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539c:	4413      	add	r3, r2
 800539e:	461a      	mov	r2, r3
 80053a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053a2:	4413      	add	r3, r2
 80053a4:	f993 3000 	ldrsb.w	r3, [r3]
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 80053aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ae:	4413      	add	r3, r2
 80053b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b4:	440a      	add	r2, r1
 80053b6:	fb02 f203 	mul.w	r2, r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	4413      	add	r3, r2
 80053be:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 80053c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c2:	3301      	adds	r3, #1
 80053c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c6:	e7d4      	b.n	8005372 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc8>
      }
      if (bias_data) {
 80053c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d007      	beq.n	80053de <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x134>
        acc += bias_data[out_c];
 80053ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053d4:	4413      	add	r3, r2
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4413      	add	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fc f8d5 	bl	8001594 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80053ea:	4603      	mov	r3, r0
 80053ec:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f2:	4413      	add	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 80053f6:	f107 0220 	add.w	r2, r7, #32
 80053fa:	f107 0314 	add.w	r3, r7, #20
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f7fb ff33 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 8005406:	4603      	mov	r3, r0
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800540c:	f107 021c 	add.w	r2, r7, #28
 8005410:	f107 0314 	add.w	r3, r7, #20
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f7fd fa22 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 800541c:	4603      	mov	r3, r0
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 8005422:	6979      	ldr	r1, [r7, #20]
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005428:	fb02 f203 	mul.w	r2, r2, r3
 800542c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800542e:	4413      	add	r3, r2
 8005430:	461a      	mov	r2, r3
 8005432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005434:	4413      	add	r3, r2
 8005436:	b24a      	sxtb	r2, r1
 8005438:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800543a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800543c:	3301      	adds	r3, #1
 800543e:	653b      	str	r3, [r7, #80]	; 0x50
 8005440:	e78f      	b.n	8005362 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb8>
  for (int b = 0; b < batches; ++b) {
 8005442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005444:	3301      	adds	r3, #1
 8005446:	657b      	str	r3, [r7, #84]	; 0x54
 8005448:	e785      	b.n	8005356 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xac>
    }
  }
}
 800544a:	bf00      	nop
 800544c:	3758      	adds	r7, #88	; 0x58
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 8005452:	b590      	push	{r4, r7, lr}
 8005454:	b08d      	sub	sp, #52	; 0x34
 8005456:	af02      	add	r7, sp, #8
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	72fb      	strb	r3, [r7, #11]
 8005460:	4613      	mov	r3, r2
 8005462:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 800546a:	7abb      	ldrb	r3, [r7, #10]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d04d      	beq.n	800550c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xba>
    double real_multiplier = 0.0;
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	f04f 0400 	mov.w	r4, #0
 8005478:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800547c:	f107 0318 	add.w	r3, r7, #24
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f001 fadf 	bl	8006a50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8005492:	4603      	mov	r3, r0
 8005494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005498:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0x54>
 80054a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054a4:	e034      	b.n	8005510 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xbe>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 80054a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80054aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ac:	f107 0214 	add.w	r2, r7, #20
 80054b0:	4611      	mov	r1, r2
 80054b2:	4618      	mov	r0, r3
 80054b4:	eeb0 0a47 	vmov.f32	s0, s14
 80054b8:	eef0 0a67 	vmov.f32	s1, s15
 80054bc:	f006 fe9a 	bl	800c1f4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	425a      	negs	r2, r3
 80054c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c6:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 80054c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ca:	f103 0208 	add.w	r2, r3, #8
 80054ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d0:	330c      	adds	r3, #12
 80054d2:	7af9      	ldrb	r1, [r7, #11]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4613      	mov	r3, r2
 80054d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f001 fc46 	bl	8006d6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80054e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xa2>
 80054ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80054f2:	e00d      	b.n	8005510 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xbe>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));

    data->input_zero_point = input->params.zero_point;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054fa:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005502:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8005504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550a:	61da      	str	r2, [r3, #28]
  }
  return status;
 800550c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005510:	4618      	mov	r0, r3
 8005512:	372c      	adds	r7, #44	; 0x2c
 8005514:	46bd      	mov	sp, r7
 8005516:	bd90      	pop	{r4, r7, pc}

08005518 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800552c:	f00e fd90 	bl	8014050 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	2120      	movs	r1, #32
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	4798      	blx	r3
 800553a:	4603      	mov	r3, r0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8005544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005546:	b08d      	sub	sp, #52	; 0x34
 8005548:	af04      	add	r7, sp, #16
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8005556:	f00e fd7b 	bl	8014050 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8005562:	f00e fd75 	bl	8014050 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	61fb      	str	r3, [r7, #28]
  const auto params =
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f001 f892 	bl	80066a2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800557e:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x58>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695c      	ldr	r4, [r3, #20]
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4b3e      	ldr	r3, [pc, #248]	; (8005688 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	235c      	movs	r3, #92	; 0x5c
 8005592:	4a3e      	ldr	r2, [pc, #248]	; (800568c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 8005594:	493e      	ldr	r1, [pc, #248]	; (8005690 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 8005596:	47a0      	blx	r4
 8005598:	2301      	movs	r3, #1
 800559a:	e071      	b.n	8005680 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 f87d 	bl	80066a2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80055a8:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x82>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695c      	ldr	r4, [r3, #20]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4b37      	ldr	r3, [pc, #220]	; (8005694 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	235e      	movs	r3, #94	; 0x5e
 80055bc:	4a33      	ldr	r2, [pc, #204]	; (800568c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 80055be:	4934      	ldr	r1, [pc, #208]	; (8005690 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 80055c0:	47a0      	blx	r4
 80055c2:	2301      	movs	r3, #1
 80055c4:	e05c      	b.n	8005680 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f897 	bl	8006700 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 80055d2:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	6839      	ldr	r1, [r7, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 f871 	bl	80066c2 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80055e0:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, output != nullptr);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xba>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	695c      	ldr	r4, [r3, #20]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	2361      	movs	r3, #97	; 0x61
 80055f4:	4a25      	ldr	r2, [pc, #148]	; (800568c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 80055f6:	4926      	ldr	r1, [pc, #152]	; (8005690 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 80055f8:	47a0      	blx	r4
 80055fa:	2301      	movs	r3, #1
 80055fc:	e040      	b.n	8005680 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d01b      	beq.n	8005642 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695c      	ldr	r4, [r3, #20]
 800560e:	687d      	ldr	r5, [r7, #4]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f7fb fd6f 	bl	80010f8 <TfLiteTypeGetName>
 800561a:	4606      	mov	r6, r0
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f7fb fd69 	bl	80010f8 <TfLiteTypeGetName>
 8005626:	4603      	mov	r3, r0
 8005628:	9303      	str	r3, [sp, #12]
 800562a:	9602      	str	r6, [sp, #8]
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	4b1b      	ldr	r3, [pc, #108]	; (80056a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	2363      	movs	r3, #99	; 0x63
 8005636:	4a15      	ldr	r2, [pc, #84]	; (800568c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 8005638:	491a      	ldr	r1, [pc, #104]	; (80056a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
 800563a:	4628      	mov	r0, r5
 800563c:	47a0      	blx	r4
 800563e:	2301      	movs	r3, #1
 8005640:	e01e      	b.n	8005680 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	781a      	ldrb	r2, [r3, #0]
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d007      	beq.n	800565e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4914      	ldr	r1, [pc, #80]	; (80056a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 8005656:	4610      	mov	r0, r2
 8005658:	4798      	blx	r3
 800565a:	2301      	movs	r3, #1
 800565c:	e010      	b.n	8005680 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	7819      	ldrb	r1, [r3, #0]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	781a      	ldrb	r2, [r3, #0]
                         filter, bias, output, data);
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	9302      	str	r3, [sp, #8]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f7ff feea 	bl	8005452 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE>
 800567e:	4603      	mov	r3, r0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3724      	adds	r7, #36	; 0x24
 8005684:	46bd      	mov	sp, r7
 8005686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005688:	0801722c 	.word	0x0801722c
 800568c:	080171f4 	.word	0x080171f4
 8005690:	08017214 	.word	0x08017214
 8005694:	08017240 	.word	0x08017240
 8005698:	08017254 	.word	0x08017254
 800569c:	08017284 	.word	0x08017284
 80056a0:	08017294 	.word	0x08017294
 80056a4:	08017268 	.word	0x08017268
 80056a8:	080172a0 	.word	0x080172a0

080056ac <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 80056ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ae:	b0ad      	sub	sp, #180	; 0xb4
 80056b0:	af06      	add	r7, sp, #24
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -data.input_zero_point;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	425b      	negs	r3, r3
 80056c0:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -data.filter_zero_point;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	425b      	negs	r3, r3
 80056c8:	617b      	str	r3, [r7, #20]
  op_params.output_offset = data.output_zero_point;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	425b      	negs	r3, r3
 80056dc:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, tflite::micro::GetTensorShape(input),
 80056ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056ee:	6839      	ldr	r1, [r7, #0]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fec2 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 80056f6:	6838      	ldr	r0, [r7, #0]
 80056f8:	f7fd fba6 	bl	8002e48 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80056fc:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(filter),
 80056fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005702:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005706:	4618      	mov	r0, r3
 8005708:	f000 feb7 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 800570c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8005710:	f7fd fb9a 	bl	8002e48 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8005714:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 8005716:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800571a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800571e:	4618      	mov	r0, r3
 8005720:	f000 feab 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 8005724:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005728:	f7fd fb9d 	bl	8002e66 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800572c:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 800572e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005732:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fe9f 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 800573c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005740:	f7fd fba0 	bl	8002e84 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8005744:	4603      	mov	r3, r0
 8005746:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800574a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800574e:	f107 0010 	add.w	r0, r7, #16
 8005752:	9304      	str	r3, [sp, #16]
 8005754:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005758:	9303      	str	r3, [sp, #12]
 800575a:	9502      	str	r5, [sp, #8]
 800575c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	9400      	str	r4, [sp, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	4632      	mov	r2, r6
 8005768:	f7ff fd9f 	bl	80052aa <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      tflite::micro::GetTensorShape(output),
 800576c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005770:	4618      	mov	r0, r3
 8005772:	f7fb fdff 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 8005776:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800577a:	4618      	mov	r0, r3
 800577c:	f7fb fdfa 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 8005780:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005784:	4618      	mov	r0, r3
 8005786:	f7fb fdf5 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 800578a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800578e:	4618      	mov	r0, r3
 8005790:	f7fb fdf0 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
  return kTfLiteOk;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	379c      	adds	r7, #156	; 0x9c
 800579a:	46bd      	mov	sp, r7
 800579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080057a0 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteEvalTensor* input,
                           const TfLiteEvalTensor* filter,
                           const TfLiteEvalTensor* bias,
                           TfLiteEvalTensor* output) {
 80057a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a2:	b0c9      	sub	sp, #292	; 0x124
 80057a4:	af06      	add	r7, sp, #24
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	f107 0008 	add.w	r0, r7, #8
 80057ac:	6001      	str	r1, [r0, #0]
 80057ae:	1d39      	adds	r1, r7, #4
 80057b0:	600a      	str	r2, [r1, #0]
 80057b2:	463a      	mov	r2, r7
 80057b4:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -data.input_zero_point;
 80057b6:	1d3b      	adds	r3, r7, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	425b      	negs	r3, r3
 80057be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -data.filter_zero_point;
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	425b      	negs	r3, r3
 80057ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = data.output_zero_point;
 80057ce:	1d3b      	adds	r3, r7, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057dc:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 80057de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057e2:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 80057e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057e8:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 80057ea:	1d3b      	adds	r3, r7, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	425b      	negs	r3, r3
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tflite::micro::GetTensorData<uint8_t>(filter),   \
      tflite::micro::GetTensorShape(bias),             \
      tflite::micro::GetTensorData<int32_t>(bias),     \
      tflite::micro::GetTensorShape(output),           \
      tflite::micro::GetTensorData<output_data_type>(output))
  switch (output->type) {
 800580c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005810:	7a1b      	ldrb	r3, [r3, #8]
 8005812:	2b03      	cmp	r3, #3
 8005814:	d002      	beq.n	800581c <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x7c>
 8005816:	2b07      	cmp	r3, #7
 8005818:	d058      	beq.n	80058cc <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
 800581a:	e0af      	b.n	800597c <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 800581c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005820:	463b      	mov	r3, r7
 8005822:	6819      	ldr	r1, [r3, #0]
 8005824:	4610      	mov	r0, r2
 8005826:	f000 fe28 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800582a:	463b      	mov	r3, r7
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	f7fd fb3a 	bl	8002ea6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8005832:	4606      	mov	r6, r0
 8005834:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005838:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fe1c 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8005842:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005846:	f7fd fb2e 	bl	8002ea6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800584a:	4604      	mov	r4, r0
 800584c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005850:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fe10 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800585a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800585e:	f7fd fb02 	bl	8002e66 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8005862:	4605      	mov	r5, r0
 8005864:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005868:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fe04 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8005872:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005876:	f7fd fb25 	bl	8002ec4 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800587a:	4603      	mov	r3, r0
 800587c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005880:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005884:	f107 0014 	add.w	r0, r7, #20
 8005888:	9304      	str	r3, [sp, #16]
 800588a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800588e:	9303      	str	r3, [sp, #12]
 8005890:	9502      	str	r5, [sp, #8]
 8005892:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	9400      	str	r4, [sp, #0]
 800589a:	4613      	mov	r3, r2
 800589c:	4632      	mov	r2, r6
 800589e:	f7ff fb68 	bl	8004f72 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 80058a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fb fd64 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
 80058ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fb fd5f 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
 80058b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fb fd5a 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
 80058c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fb fd55 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 80058ca:	e069      	b.n	80059a0 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x200>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 80058cc:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80058d0:	463b      	mov	r3, r7
 80058d2:	6819      	ldr	r1, [r3, #0]
 80058d4:	4610      	mov	r0, r2
 80058d6:	f000 fdd0 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80058da:	463b      	mov	r3, r7
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	f7fd fae2 	bl	8002ea6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80058e2:	4606      	mov	r6, r0
 80058e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80058e8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fdc4 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80058f2:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80058f6:	f7fd fad6 	bl	8002ea6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80058fa:	4604      	mov	r4, r0
 80058fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005900:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fdb8 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800590a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800590e:	f7fd faaa 	bl	8002e66 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8005912:	4605      	mov	r5, r0
 8005914:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005918:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fdac 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8005922:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005926:	f000 f943 	bl	8005bb0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800592a:	4603      	mov	r3, r0
 800592c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8005930:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8005934:	f107 0014 	add.w	r0, r7, #20
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800593e:	9303      	str	r3, [sp, #12]
 8005940:	9502      	str	r5, [sp, #8]
 8005942:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	9400      	str	r4, [sp, #0]
 800594a:	4613      	mov	r3, r2
 800594c:	4632      	mov	r2, r6
 800594e:	f7ff fbdf 	bl	8005110 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 8005952:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005956:	4618      	mov	r0, r3
 8005958:	f7fb fd0c 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
 800595c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005960:	4618      	mov	r0, r3
 8005962:	f7fb fd07 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
 8005966:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800596a:	4618      	mov	r0, r3
 800596c:	f7fb fd02 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
 8005970:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005974:	4618      	mov	r0, r3
 8005976:	f7fb fcfd 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800597a:	e011      	b.n	80059a0 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x200>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	695c      	ldr	r4, [r3, #20]
 8005980:	68fd      	ldr	r5, [r7, #12]
 8005982:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005986:	7a1b      	ldrb	r3, [r3, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f7fb fbb5 	bl	80010f8 <TfLiteTypeGetName>
 800598e:	4602      	mov	r2, r0
 8005990:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005994:	7a1b      	ldrb	r3, [r3, #8]
 8005996:	4905      	ldr	r1, [pc, #20]	; (80059ac <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x20c>)
 8005998:	4628      	mov	r0, r5
 800599a:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x202>
  }

  return kTfLiteOk;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ac:	080172f0 	.word	0x080172f0

080059b0 <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK16TfLiteEvalTensorS8_S8_PS6_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteEvalTensor* input,
                       const TfLiteEvalTensor* filter,
                       const TfLiteEvalTensor* bias, TfLiteEvalTensor* output) {
 80059b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059b2:	b0af      	sub	sp, #188	; 0xbc
 80059b4:	af06      	add	r7, sp, #24
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 80059c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80059c4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fd f9da 	bl	8002d84 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 80059d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, tflite::micro::GetTensorShape(input),
 80059d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fd4b 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 80059e4:	6838      	ldr	r0, [r7, #0]
 80059e6:	f7fd fa0f 	bl	8002e08 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80059ea:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<float>(input),
      tflite::micro::GetTensorShape(filter),
 80059ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80059f0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fd40 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 80059fa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80059fe:	f7fd fa03 	bl	8002e08 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8005a02:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<float>(filter),
      tflite::micro::GetTensorShape(bias),
 8005a04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a08:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fd34 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 8005a12:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8005a16:	f7fd f9f7 	bl	8002e08 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8005a1a:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<float>(bias),
      tflite::micro::GetTensorShape(output),
 8005a1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005a20:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fd28 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 8005a2a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8005a2e:	f7fd f9fa 	bl	8002e26 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005a38:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005a3c:	f107 0010 	add.w	r0, r7, #16
 8005a40:	9304      	str	r3, [sp, #16]
 8005a42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005a46:	9303      	str	r3, [sp, #12]
 8005a48:	9502      	str	r5, [sp, #8]
 8005a4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	9400      	str	r4, [sp, #0]
 8005a52:	4613      	mov	r3, r2
 8005a54:	4632      	mov	r2, r6
 8005a56:	f7ff f9f6 	bl	8004e46 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      tflite::micro::GetTensorShape(output),
 8005a5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fb fc88 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 8005a64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fb fc83 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 8005a6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fb fc7e 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 8005a78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fb fc79 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<float>(output));
  return kTfLiteOk;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	37a4      	adds	r7, #164	; 0xa4
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8005a8c:	b5b0      	push	{r4, r5, r7, lr}
 8005a8e:	b08c      	sub	sp, #48	; 0x30
 8005a90:	af04      	add	r7, sp, #16
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8005a9e:	f00e fad7 	bl	8014050 <abort>
  const auto* params =
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fc f9ed 	bl	8001e8e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8005ab4:	61b8      	str	r0, [r7, #24]
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kWeightsTensor);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fc f9e6 	bl	8001e8e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8005ac2:	6178      	str	r0, [r7, #20]
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kBiasTensor);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fc f9df 	bl	8001e8e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8005ad0:	6138      	str	r0, [r7, #16]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fc f9e8 	bl	8001eae <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8005ade:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
 8005ae8:	f00e fab2 	bl	8014050 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	7a1b      	ldrb	r3, [r3, #8]
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d020      	beq.n	8005b3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 8005afa:	2b09      	cmp	r3, #9
 8005afc:	d010      	beq.n	8005b20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d12a      	bne.n	8005b58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	781a      	ldrb	r2, [r3, #0]
                       output);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	9302      	str	r3, [sp, #8]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	f7ff ff4a 	bl	80059b0 <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK16TfLiteEvalTensorS8_S8_PS6_>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	e02a      	b.n	8005b76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8005b20:	6878      	ldr	r0, [r7, #4]
                               output);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	9302      	str	r3, [sp, #8]
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	f7ff fdba 	bl	80056ac <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	e01c      	b.n	8005b76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	9302      	str	r3, [sp, #8]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	f7ff fe26 	bl	80057a0 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8005b54:	4603      	mov	r3, r0
 8005b56:	e00e      	b.n	8005b76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695c      	ldr	r4, [r3, #20]
 8005b5c:	687d      	ldr	r5, [r7, #4]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	7a1b      	ldrb	r3, [r3, #8]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fb fac8 	bl	80010f8 <TfLiteTypeGetName>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	7a1b      	ldrb	r3, [r3, #8]
 8005b6e:	4904      	ldr	r1, [pc, #16]	; (8005b80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 8005b70:	4628      	mov	r0, r5
 8005b72:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8005b74:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	080172f0 	.word	0x080172f0

08005b84 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8005b84:	b4b0      	push	{r4, r5, r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a07      	ldr	r2, [pc, #28]	; (8005bac <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 8005b90:	461c      	mov	r4, r3
 8005b92:	4615      	mov	r5, r2
 8005b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005b9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bcb0      	pop	{r4, r5, r7}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	0801730c 	.word	0x0801730c

08005bb0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	e000      	b.n	8005bc6 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	08019ef8 	.word	0x08019ef8

08005bf4 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	4a04      	ldr	r2, [pc, #16]	; (8005c10 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	08019ef8 	.word	0x08019ef8

08005c14 <_ZN6tflite13MemoryPlannerD0Ev>:
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff ffe9 	bl	8005bf4 <_ZN6tflite13MemoryPlannerD1Ev>
 8005c22:	2104      	movs	r1, #4
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f00d ff50 	bl	8013aca <_ZdlPvj>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8005c3a:	2328      	movs	r3, #40	; 0x28
 8005c3c:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8005c3e:	2328      	movs	r3, #40	; 0x28
  }
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8005c4c:	b480      	push	{r7}
 8005c4e:	b089      	sub	sp, #36	; 0x24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	da4c      	bge.n	8005d02 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	68f9      	ldr	r1, [r7, #12]
 8005c7e:	440b      	add	r3, r1
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	da39      	bge.n	8005cfa <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	441a      	add	r2, r3
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	440b      	add	r3, r1
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4413      	add	r3, r2
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	4413      	add	r3, r2
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	441a      	add	r2, r3
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	440b      	add	r3, r1
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61bb      	str	r3, [r7, #24]
 8005d00:	e7ae      	b.n	8005c60 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8005d02:	7ffb      	ldrb	r3, [r7, #31]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d000      	beq.n	8005d0a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 8005d08:	e7a6      	b.n	8005c58 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8005d0a:	bf00      	nop
 8005d0c:	3724      	adds	r7, #36	; 0x24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 8005d18:	b590      	push	{r4, r7, lr}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff ff54 	bl	8005bd4 <_ZN6tflite13MemoryPlannerC1Ev>
 8005d2c:	4a22      	ldr	r2, [pc, #136]	; (8005db8 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	609a      	str	r2, [r3, #8]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8005d40:	687c      	ldr	r4, [r7, #4]
 8005d42:	f7ff ff77 	bl	8005c34 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 8005d46:	4603      	mov	r3, r0
 8005d48:	fbb4 f3f3 	udiv	r3, r4, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4413      	add	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4413      	add	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	461a      	mov	r2, r3
 8005d98:	4613      	mov	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	461a      	mov	r2, r3
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4413      	add	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4618      	mov	r0, r3
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd90      	pop	{r4, r7, pc}
 8005db8:	08019ed8 	.word	0x08019ed8

08005dbc <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	4a05      	ldr	r2, [pc, #20]	; (8005ddc <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff ff11 	bl	8005bf4 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	08019ed8 	.word	0x08019ed8

08005de0 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
}
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ffe7 	bl	8005dbc <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8005dee:	212c      	movs	r1, #44	; 0x2c
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f00d fe6a 	bl	8013aca <_ZdlPvj>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	db08      	blt.n	8005e2c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4913      	ldr	r1, [pc, #76]	; (8005e70 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 8005e22:	68b8      	ldr	r0, [r7, #8]
 8005e24:	f7fd f8da 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e01d      	b.n	8005e68 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	4413      	add	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]
  current->size = size;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	6a3a      	ldr	r2, [r7, #32]
 8005e4a:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e52:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	08017368 	.word	0x08017368

08005e74 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b089      	sub	sp, #36	; 0x24
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	4413      	add	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	681c      	ldr	r4, [r3, #0]
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68b9      	ldr	r1, [r7, #8]
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	47a0      	blx	r4
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e003      	b.n	8005ec2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ebe:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd90      	pop	{r4, r7, pc}

08005eca <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 8005eca:	b480      	push	{r7}
 8005ecc:	b087      	sub	sp, #28
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8005ee2:	4413      	add	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	da01      	bge.n	8005ef4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e007      	b.n	8005f04 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	dd01      	ble.n	8005f02 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e000      	b.n	8005f04 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 8005f02:	2301      	movs	r3, #1
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10b      	bne.n	8005f40 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	4619      	mov	r1, r3
 8005f32:	460b      	mov	r3, r1
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	440b      	add	r3, r1
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
 8005f3e:	e011      	b.n	8005f64 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d101      	bne.n	8005f4e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e029      	b.n	8005fa2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	4619      	mov	r1, r3
 8005f58:	460b      	mov	r3, r1
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	440b      	add	r3, r1
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6939      	ldr	r1, [r7, #16]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff ffad 	bl	8005eca <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	617b      	str	r3, [r7, #20]
      break;
 8005f7a:	e011      	b.n	8005fa0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d00b      	beq.n	8005f9e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	460b      	mov	r3, r1
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	440b      	add	r3, r1
 8005f96:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 8005f98:	4413      	add	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8005f9c:	e7e2      	b.n	8005f64 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 8005f9e:	bf00      	nop
  } while (true);
  return result;
 8005fa0:	697b      	ldr	r3, [r7, #20]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b098      	sub	sp, #96	; 0x60
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fb8:	f083 0301 	eor.w	r3, r3, #1
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f040 815f 	bne.w	8006282 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 815a 	beq.w	8006282 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fea:	429a      	cmp	r2, r3
 8005fec:	da4d      	bge.n	800608a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	4413      	add	r3, r2
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffe:	d11e      	bne.n	800603e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 8006000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006002:	3b01      	subs	r3, #1
 8006004:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	441a      	add	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6919      	ldr	r1, [r3, #16]
 8006014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695a      	ldr	r2, [r3, #20]
 8006022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800602a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	f04f 32ff 	mov.w	r2, #4294967295
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e021      	b.n	8006082 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	441a      	add	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6919      	ldr	r1, [r3, #16]
 800604c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006062:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	441a      	add	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	6852      	ldr	r2, [r2, #4]
 800607a:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 800607c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800607e:	3301      	adds	r3, #1
 8006080:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8006082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006084:	3301      	adds	r3, #1
 8006086:	657b      	str	r3, [r7, #84]	; 0x54
 8006088:	e7ac      	b.n	8005fe4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695a      	ldr	r2, [r3, #20]
 8006098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800609a:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800609c:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80060a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	f7ff fdd0 	bl	8005c4c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	4619      	mov	r1, r3
 80060c2:	460b      	mov	r3, r1
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	440b      	add	r3, r1
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 80060ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d0:	f04f 32ff 	mov.w	r2, #4294967295
 80060d4:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 80060de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060e2:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	4413      	add	r3, r2
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f4:	d106      	bne.n	8006104 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006112:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 8006114:	2301      	movs	r3, #1
 8006116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800611e:	429a      	cmp	r2, r3
 8006120:	f280 80b0 	bge.w	8006284 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695a      	ldr	r2, [r3, #20]
 8006128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	4413      	add	r3, r2
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d12d      	bne.n	80061ba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 800615e:	2300      	movs	r3, #0
 8006160:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
            prior_entry, wanted_first_time_used, wanted_last_time_used);
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff fed1 	bl	8005f10 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800616e:	62b8      	str	r0, [r7, #40]	; 0x28

        if (prior_entry) {
 8006170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006172:	2b00      	cmp	r3, #0
 8006174:	d012      	beq.n	800619c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 8006180:	4413      	add	r3, r2
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 8006184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 800618c:	4413      	add	r3, r2
 800618e:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 8006190:	6a3a      	ldr	r2, [r7, #32]
 8006192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006194:	429a      	cmp	r2, r3
 8006196:	dd01      	ble.n	800619c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00f      	beq.n	80061c2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	429a      	cmp	r2, r3
 80061b2:	da08      	bge.n	80061c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	647b      	str	r3, [r7, #68]	; 0x44
      }
 80061b8:	e7d3      	b.n	8006162 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	64bb      	str	r3, [r7, #72]	; 0x48
 80061c0:	e002      	b.n	80061c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 80061c6:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d4:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	4619      	mov	r1, r3
 80061e0:	460b      	mov	r3, r1
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	440b      	add	r3, r1
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061f0:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061f6:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 8006208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800620e:	429a      	cmp	r2, r3
 8006210:	da09      	bge.n	8006226 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621c:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	621a      	str	r2, [r3, #32]
 8006224:	e029      	b.n	800627a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 8006226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006228:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 800622a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006236:	d107      	bne.n	8006248 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 8006238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f04f 32ff 	mov.w	r2, #4294967295
 8006244:	609a      	str	r2, [r3, #8]
          break;
 8006246:	e018      	b.n	800627a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6999      	ldr	r1, [r3, #24]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4613      	mov	r3, r2
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	440b      	add	r3, r1
 8006258:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006260:	429a      	cmp	r2, r3
 8006262:	da07      	bge.n	8006274 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 8006264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 800626c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	609a      	str	r2, [r3, #8]
          break;
 8006272:	e002      	b.n	800627a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	643b      	str	r3, [r7, #64]	; 0x40
      }
 8006278:	e7d7      	b.n	800622a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 800627a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627c:	3301      	adds	r3, #1
 800627e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006280:	e74a      	b.n	8006118 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 8006282:	bf00      	nop
    }
  }
}
 8006284:	3760      	adds	r7, #96	; 0x60
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff fe89 	bl	8005faa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	e035      	b.n	8006310 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	4619      	mov	r1, r3
 80062ae:	460b      	mov	r3, r1
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	440b      	add	r3, r1
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	613b      	str	r3, [r7, #16]
  while (entry) {
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d024      	beq.n	800630e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 80062ce:	4413      	add	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4413      	add	r3, r2
 80062dc:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d901      	bls.n	80062ea <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	d00b      	beq.n	800630c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4619      	mov	r1, r3
 80062fe:	460b      	mov	r3, r1
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	440b      	add	r3, r1
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	617b      	str	r3, [r7, #20]
  while (entry) {
 800630a:	e7d8      	b.n	80062be <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 800630c:	bf00      	nop
  }
  return max_size;
 800630e:	693b      	ldr	r3, [r7, #16]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff fe33 	bl	8005faa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	db04      	blt.n	8006354 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	db08      	blt.n	8006366 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	4909      	ldr	r1, [pc, #36]	; (8006380 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 800635c:	68b8      	ldr	r0, [r7, #8]
 800635e:	f7fc fe3d 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 8006362:	2301      	movs	r3, #1
 8006364:	e008      	b.n	8006378 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	080173f8 	.word	0x080173f8

08006384 <_ZN6tflite12RuntimeShapeC1Ev>:
  RuntimeShape() : size_(0) {}
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <_ZN6tflite12RuntimeShapeC1EiPKl>:
  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f846 	bl	8006448 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <_ZN6tflite12RuntimeShape8DimsDataEv>:
  inline int32_t* DimsData() {
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	dd02      	ble.n	80063dc <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	e001      	b.n	80063e0 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3304      	adds	r3, #4
  }
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <_ZN6tflite12RuntimeShape6ResizeEi>:
  inline void Resize(int dimensions_count) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	dd08      	ble.n	8006410 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
      delete[] dims_pointer_;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4618      	mov	r0, r3
 800640c:	f00d fb56 	bl	8013abc <_ZdaPv>
    size_ = dimensions_count;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b05      	cmp	r3, #5
 800641a:	dd0e      	ble.n	800643a <_ZN6tflite12RuntimeShape6ResizeEi+0x4e>
      dims_pointer_ = new int32_t[dimensions_count];
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	4a09      	ldr	r2, [pc, #36]	; (8006444 <_ZN6tflite12RuntimeShape6ResizeEi+0x58>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d801      	bhi.n	8006428 <_ZN6tflite12RuntimeShape6ResizeEi+0x3c>
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	e001      	b.n	800642c <_ZN6tflite12RuntimeShape6ResizeEi+0x40>
 8006428:	f04f 33ff 	mov.w	r3, #4294967295
 800642c:	4618      	mov	r0, r3
 800642e:	f00d fb4a 	bl	8013ac6 <_Znaj>
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	605a      	str	r2, [r3, #4]
  }
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	1ffffffe 	.word	0x1ffffffe

08006448 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff ffc8 	bl	80063ec <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f7ff ffb2 	bl	80063c6 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8006462:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	461a      	mov	r2, r3
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	6978      	ldr	r0, [r7, #20]
 800646e:	f00d feb7 	bl	80141e0 <memcpy>
  }
 8006472:	bf00      	nop
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff ff76 	bl	8006384 <_ZN6tflite12RuntimeShapeC1Ev>
 8006498:	e00d      	b.n	80064b6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	3304      	adds	r3, #4
 80064aa:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	6939      	ldr	r1, [r7, #16]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff ff75 	bl	80063a0 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 80064be:	b480      	push	{r7}
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	2300      	movs	r3, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 80064ce:	b480      	push	{r7}
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	23ff      	movs	r3, #255	; 0xff
 80064d4:	4618      	mov	r0, r3
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	4b02      	ldr	r3, [pc, #8]	; (80064f0 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 80064e6:	4618      	mov	r0, r3
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	ffff8000 	.word	0xffff8000

080064f4 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80064fc:	4618      	mov	r0, r3
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int64_t NumElements(const TfLiteIntArray* dims) {
 8006520:	b490      	push	{r4, r7}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 8006528:	f04f 0301 	mov.w	r3, #1
 800652c:	f04f 0400 	mov.w	r4, #0
 8006530:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	429a      	cmp	r2, r3
 8006540:	da1a      	bge.n	8006578 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x58>
    count *= dims->data[i];
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	fb03 f102 	mul.w	r1, r3, r2
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	fb04 f202 	mul.w	r2, r4, r2
 800655c:	440a      	add	r2, r1
 800655e:	6939      	ldr	r1, [r7, #16]
 8006560:	fba1 3403 	umull	r3, r4, r1, r3
 8006564:	4422      	add	r2, r4
 8006566:	4614      	mov	r4, r2
 8006568:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800656c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3301      	adds	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	e7df      	b.n	8006538 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  return count;
 8006578:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 800657c:	4618      	mov	r0, r3
 800657e:	4621      	mov	r1, r4
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bc90      	pop	{r4, r7}
 8006586:	4770      	bx	lr

08006588 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff ffc3 	bl	8006520 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800659a:	4603      	mov	r3, r0
 800659c:	460c      	mov	r4, r1
}
 800659e:	4618      	mov	r0, r3
 80065a0:	4621      	mov	r1, r4
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd90      	pop	{r4, r7, pc}

080065a8 <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80065a8:	b490      	push	{r4, r7}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	ed87 0b00 	vstr	d0, [r7]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 80065ba:	ec44 3b17 	vmov	d7, r3, r4
 80065be:	eeb0 0a47 	vmov.f32	s0, s14
 80065c2:	eef0 0a67 	vmov.f32	s1, s15
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc90      	pop	{r4, r7}
 80065cc:	4770      	bx	lr

080065ce <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	ed87 0a01 	vstr	s0, [r7, #4]
 80065d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80065dc:	f00d fbb8 	bl	8013d50 <roundf>
 80065e0:	eef0 7a40 	vmov.f32	s15, s0
 80065e4:	eeb0 0a67 	vmov.f32	s0, s15
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	019b      	lsls	r3, r3, #6
 8006608:	4413      	add	r3, r2
 800660a:	e005      	b.n	8006618 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2a>
  } else {
    return context->GetTensor(context, tensor_index);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
 8006616:	4603      	mov	r3, r0
  }
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	db0f      	blt.n	8006654 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	da0b      	bge.n	8006654 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	4413      	add	r3, r2
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664e:	d001      	beq.n	8006654 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	e001      	b.n	8006658 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8006654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006658:	4618      	mov	r0, r3
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8006674:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800667a:	3304      	adds	r3, #4
      context, index, node->inputs->size, node->inputs->data);
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f7ff ffce 	bl	8006620 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8006684:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	da01      	bge.n	8006690 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800668c:	2300      	movs	r3, #0
 800668e:	e004      	b.n	800669a <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  }
  return GetTensorAtIndex(context, tensor_index);
 8006690:	6979      	ldr	r1, [r7, #20]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff ffab 	bl	80065ee <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8006698:	4603      	mov	r3, r0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff ffd6 	bl	8006664 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 80066b8:	4603      	mov	r3, r0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b086      	sub	sp, #24
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80066d2:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80066d8:	3304      	adds	r3, #4
      context, index, node->outputs->size, node->outputs->data);
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff ff9f 	bl	8006620 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80066e2:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	da01      	bge.n	80066ee <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e004      	b.n	80066f8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  }
  return GetTensorAtIndex(context, tensor_index);
 80066ee:	6979      	ldr	r1, [r7, #20]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff7c 	bl	80065ee <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80066f6:	4603      	mov	r3, r0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff ffc6 	bl	80066a2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8006716:	4603      	mov	r3, r0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8006720:	b5b0      	push	{r4, r5, r7, lr}
 8006722:	b09a      	sub	sp, #104	; 0x68
 8006724:	af04      	add	r7, sp, #16
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006734:	2b01      	cmp	r3, #1
 8006736:	d013      	beq.n	8006760 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	695c      	ldr	r4, [r3, #20]
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006744:	461a      	mov	r2, r3
 8006746:	2301      	movs	r3, #1
 8006748:	9303      	str	r3, [sp, #12]
 800674a:	9202      	str	r2, [sp, #8]
 800674c:	4b97      	ldr	r3, [pc, #604]	; (80069ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	4b97      	ldr	r3, [pc, #604]	; (80069b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	23d2      	movs	r3, #210	; 0xd2
 8006756:	4a97      	ldr	r2, [pc, #604]	; (80069b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8006758:	4997      	ldr	r1, [pc, #604]	; (80069b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800675a:	47a0      	blx	r4
 800675c:	2301      	movs	r3, #1
 800675e:	e171      	b.n	8006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006766:	2b01      	cmp	r3, #1
 8006768:	d013      	beq.n	8006792 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	695c      	ldr	r4, [r3, #20]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006776:	461a      	mov	r2, r3
 8006778:	2301      	movs	r3, #1
 800677a:	9303      	str	r3, [sp, #12]
 800677c:	9202      	str	r2, [sp, #8]
 800677e:	4b8b      	ldr	r3, [pc, #556]	; (80069ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	4b8e      	ldr	r3, [pc, #568]	; (80069bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	23d4      	movs	r3, #212	; 0xd4
 8006788:	4a8a      	ldr	r2, [pc, #552]	; (80069b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800678a:	498b      	ldr	r1, [pc, #556]	; (80069b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800678c:	47a0      	blx	r4
 800678e:	2301      	movs	r3, #1
 8006790:	e158      	b.n	8006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  const auto* affine_quantization =
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28
  TF_LITE_ENSURE(context, affine_quantization);
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	695c      	ldr	r4, [r3, #20]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	4b86      	ldr	r3, [pc, #536]	; (80069c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	23de      	movs	r3, #222	; 0xde
 80067aa:	4a82      	ldr	r2, [pc, #520]	; (80069b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80067ac:	4985      	ldr	r1, [pc, #532]	; (80069c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 80067ae:	47a0      	blx	r4
 80067b0:	2301      	movs	r3, #1
 80067b2:	e147      	b.n	8006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	695c      	ldr	r4, [r3, #20]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	4b81      	ldr	r3, [pc, #516]	; (80069c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	23df      	movs	r3, #223	; 0xdf
 80067c8:	4a7a      	ldr	r2, [pc, #488]	; (80069b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80067ca:	497e      	ldr	r1, [pc, #504]	; (80069c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 80067cc:	47a0      	blx	r4
 80067ce:	2301      	movs	r3, #1
 80067d0:	e138      	b.n	8006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	bfcc      	ite	gt
 80067dc:	2301      	movgt	r3, #1
 80067de:	2300      	movle	r3, #0
 80067e0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (is_per_channel) {
 80067e4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d067      	beq.n	80068bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b09      	cmp	r3, #9
 80067f2:	d00e      	beq.n	8006812 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b07      	cmp	r3, #7
 80067fa:	d00a      	beq.n	8006812 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	695c      	ldr	r4, [r3, #20]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	4b72      	ldr	r3, [pc, #456]	; (80069cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	23e4      	movs	r3, #228	; 0xe4
 8006808:	4a6a      	ldr	r2, [pc, #424]	; (80069b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800680a:	496e      	ldr	r1, [pc, #440]	; (80069c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800680c:	47a0      	blx	r4
 800680e:	2301      	movs	r3, #1
 8006810:	e118      	b.n	8006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b09      	cmp	r3, #9
 8006818:	d012      	beq.n	8006840 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	695c      	ldr	r4, [r3, #20]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	2309      	movs	r3, #9
 8006828:	9303      	str	r3, [sp, #12]
 800682a:	9202      	str	r2, [sp, #8]
 800682c:	4b68      	ldr	r3, [pc, #416]	; (80069d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	4b68      	ldr	r3, [pc, #416]	; (80069d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	23e5      	movs	r3, #229	; 0xe5
 8006836:	4a5f      	ldr	r2, [pc, #380]	; (80069b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8006838:	495f      	ldr	r1, [pc, #380]	; (80069b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800683a:	47a0      	blx	r4
 800683c:	2301      	movs	r3, #1
 800683e:	e101      	b.n	8006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800684a:	429a      	cmp	r2, r3
 800684c:	d013      	beq.n	8006876 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	695c      	ldr	r4, [r3, #20]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800685e:	9203      	str	r2, [sp, #12]
 8006860:	9302      	str	r3, [sp, #8]
 8006862:	4b5d      	ldr	r3, [pc, #372]	; (80069d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	4b5d      	ldr	r3, [pc, #372]	; (80069dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	23e6      	movs	r3, #230	; 0xe6
 800686c:	4a51      	ldr	r2, [pc, #324]	; (80069b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800686e:	4952      	ldr	r1, [pc, #328]	; (80069b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8006870:	47a0      	blx	r4
 8006872:	2301      	movs	r3, #1
 8006874:	e0e6      	b.n	8006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
    TF_LITE_ENSURE_EQ(
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006888:	429a      	cmp	r2, r3
 800688a:	d017      	beq.n	80068bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	695c      	ldr	r4, [r3, #20]
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6899      	ldr	r1, [r3, #8]
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	9303      	str	r3, [sp, #12]
 80068a6:	9202      	str	r2, [sp, #8]
 80068a8:	4b4d      	ldr	r3, [pc, #308]	; (80069e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	4b4a      	ldr	r3, [pc, #296]	; (80069d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	23e9      	movs	r3, #233	; 0xe9
 80068b2:	4a40      	ldr	r2, [pc, #256]	; (80069b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80068b4:	4940      	ldr	r1, [pc, #256]	; (80069b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80068b6:	47a0      	blx	r4
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0c3      	b.n	8006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float output_scale = output->params.scale;
 80068c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	64bb      	str	r3, [r7, #72]	; 0x48
  const float* filter_scales = affine_quantization->scale->data;
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3304      	adds	r3, #4
 80068ce:	647b      	str	r3, [r7, #68]	; 0x44
  for (int i = 0; i < num_channels; ++i) {
 80068d0:	2300      	movs	r3, #0
 80068d2:	657b      	str	r3, [r7, #84]	; 0x54
 80068d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068da:	429a      	cmp	r2, r3
 80068dc:	da47      	bge.n	800696e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 80068de:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 80068e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ec:	4413      	add	r3, r2
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	e001      	b.n	80068f6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 80068f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	643b      	str	r3, [r7, #64]	; 0x40
    const double filter_scale = static_cast<double>(scale);
 80068f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80068fa:	f7f9 fe35 	bl	8000568 <__aeabi_f2d>
 80068fe:	4603      	mov	r3, r0
 8006900:	460c      	mov	r4, r1
 8006902:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 8006906:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006908:	f7f9 fe2e 	bl	8000568 <__aeabi_f2d>
 800690c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006910:	f7f9 fe82 	bl	8000618 <__aeabi_dmul>
 8006914:	4603      	mov	r3, r0
 8006916:	460c      	mov	r4, r1
 8006918:	4625      	mov	r5, r4
 800691a:	461c      	mov	r4, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 800691c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800691e:	f7f9 fe23 	bl	8000568 <__aeabi_f2d>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 8006926:	4620      	mov	r0, r4
 8006928:	4629      	mov	r1, r5
 800692a:	f7f9 ff9f 	bl	800086c <__aeabi_ddiv>
 800692e:	4603      	mov	r3, r0
 8006930:	460c      	mov	r4, r1
 8006932:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8006936:	f107 0220 	add.w	r2, r7, #32
 800693a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800693e:	4611      	mov	r1, r2
 8006940:	4618      	mov	r0, r3
 8006942:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8006946:	f005 fc55 	bl	800c1f4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800694a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006952:	4413      	add	r3, r2
 8006954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006956:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 8006958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006960:	4413      	add	r3, r2
 8006962:	6a3a      	ldr	r2, [r7, #32]
 8006964:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 8006966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006968:	3301      	adds	r3, #1
 800696a:	657b      	str	r3, [r7, #84]	; 0x54
 800696c:	e7b2      	b.n	80068d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b03      	cmp	r3, #3
 8006974:	d146      	bne.n	8006a04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	f04f 0400 	mov.w	r4, #0
 800697e:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f107 0318 	add.w	r3, r7, #24
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	68b9      	ldr	r1, [r7, #8]
 8006994:	f000 f85c 	bl	8006a50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800699e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d01e      	beq.n	80069e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 80069a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069aa:	e04b      	b.n	8006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
 80069ac:	080174f0 	.word	0x080174f0
 80069b0:	0801750c 	.word	0x0801750c
 80069b4:	080174b8 	.word	0x080174b8
 80069b8:	080174d4 	.word	0x080174d4
 80069bc:	08017528 	.word	0x08017528
 80069c0:	0801755c 	.word	0x0801755c
 80069c4:	08017544 	.word	0x08017544
 80069c8:	08017570 	.word	0x08017570
 80069cc:	0801758c 	.word	0x0801758c
 80069d0:	080175c8 	.word	0x080175c8
 80069d4:	080175d4 	.word	0x080175d4
 80069d8:	080175e4 	.word	0x080175e4
 80069dc:	080175f4 	.word	0x080175f4
 80069e0:	08017618 	.word	0x08017618
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 80069e4:	ed97 7b06 	vldr	d7, [r7, #24]
 80069e8:	f107 0314 	add.w	r3, r7, #20
 80069ec:	4619      	mov	r1, r3
 80069ee:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80069f0:	eeb0 0a47 	vmov.f32	s0, s14
 80069f4:	eef0 0a67 	vmov.f32	s1, s15
 80069f8:	f005 fbfc 	bl	800c1f4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	425a      	negs	r2, r3
 8006a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a02:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b09      	cmp	r3, #9
 8006a0a:	d007      	beq.n	8006a1c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d003      	beq.n	8006a1c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8006a18:	2b07      	cmp	r3, #7
 8006a1a:	d112      	bne.n	8006a42 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x322>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a20:	7819      	ldrb	r1, [r3, #0]
 8006a22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a2a:	f000 f99f 	bl	8006d6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006a34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x322>
 8006a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a40:	e000      	b.n	8006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3758      	adds	r7, #88	; 0x58
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8006a4c:	0000      	movs	r0, r0
	...

08006a50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8006a50:	b5b0      	push	{r4, r5, r7, lr}
 8006a52:	b08e      	sub	sp, #56	; 0x38
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7f9 fd80 	bl	8000568 <__aeabi_f2d>
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7f9 fd79 	bl	8000568 <__aeabi_f2d>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	f7f9 fdcb 	bl	8000618 <__aeabi_dmul>
 8006a82:	4603      	mov	r3, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d04b      	beq.n	8006b28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7f9 fd67 	bl	8000568 <__aeabi_f2d>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	e9c7 3408 	strd	r3, r4, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8006aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006aaa:	f7f9 fbfd 	bl	80002a8 <__aeabi_dsub>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	ec44 3b17 	vmov	d7, r3, r4
 8006ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8006aba:	eef0 0a67 	vmov.f32	s1, s15
 8006abe:	f7ff fd73 	bl	80065a8 <_ZSt3absd>
 8006ac2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8006ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7f9 fd4c 	bl	8000568 <__aeabi_f2d>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	e9c7 3404 	strd	r3, r4, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8006ad8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006adc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ae0:	f7f9 fec4 	bl	800086c <__aeabi_ddiv>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	4618      	mov	r0, r3
 8006aea:	4621      	mov	r1, r4
 8006aec:	2301      	movs	r3, #1
 8006aee:	461c      	mov	r4, r3
 8006af0:	a318      	add	r3, pc, #96	; (adr r3, 8006b54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f7fa f80b 	bl	8000b10 <__aeabi_dcmple>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8006b00:	2300      	movs	r3, #0
 8006b02:	461c      	mov	r4, r3
 8006b04:	b2e3      	uxtb	r3, r4
 8006b06:	f083 0301 	eor.w	r3, r3, #1
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	695c      	ldr	r4, [r3, #20]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	f240 1335 	movw	r3, #309	; 0x135
 8006b1e:	4a0b      	ldr	r2, [pc, #44]	; (8006b4c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8006b20:	490b      	ldr	r1, [pc, #44]	; (8006b50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8006b22:	47a0      	blx	r4
 8006b24:	2301      	movs	r3, #1
 8006b26:	e008      	b.n	8006b3a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8006b28:	68f8      	ldr	r0, [r7, #12]
                                          multiplier);
 8006b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	f000 f812 	bl	8006b5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8006b38:	4603      	mov	r3, r0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3730      	adds	r7, #48	; 0x30
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bdb0      	pop	{r4, r5, r7, pc}
 8006b42:	bf00      	nop
 8006b44:	f3af 8000 	nop.w
 8006b48:	08017658 	.word	0x08017658
 8006b4c:	080174b8 	.word	0x080174b8
 8006b50:	08017544 	.word	0x08017544
 8006b54:	47ae147b 	.word	0x47ae147b
 8006b58:	3f947ae1 	.word	0x3f947ae1

08006b5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8006b5c:	b590      	push	{r4, r7, lr}
 8006b5e:	b089      	sub	sp, #36	; 0x24
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b76:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8006b7a:	ee17 0a90 	vmov	r0, s15
 8006b7e:	f7f9 fcf3 	bl	8000568 <__aeabi_f2d>
 8006b82:	4603      	mov	r3, r0
 8006b84:	460c      	mov	r4, r1
 8006b86:	e9c7 3404 	strd	r3, r4, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	461c      	mov	r4, r3
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b9a:	f7f9 ffc3 	bl	8000b24 <__aeabi_dcmpge>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	461c      	mov	r4, r3
 8006ba8:	b2e3      	uxtb	r3, r4
 8006baa:	f083 0301 	eor.w	r3, r3, #1
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	695c      	ldr	r4, [r3, #20]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	4b10      	ldr	r3, [pc, #64]	; (8006bfc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	f44f 73a1 	mov.w	r3, #322	; 0x142
 8006bc2:	4a0f      	ldr	r2, [pc, #60]	; (8006c00 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8006bc4:	490f      	ldr	r1, [pc, #60]	; (8006c04 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa8>)
 8006bc6:	47a0      	blx	r4
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e012      	b.n	8006bf2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x96>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7f9 fcc9 	bl	8000568 <__aeabi_f2d>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4623      	mov	r3, r4
 8006bde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006be2:	f7f9 fe43 	bl	800086c <__aeabi_ddiv>
 8006be6:	4603      	mov	r3, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bec:	e9c2 3400 	strd	r3, r4, [r2]

  return kTfLiteOk;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd90      	pop	{r4, r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	0801767c 	.word	0x0801767c
 8006c00:	080174b8 	.word	0x080174b8
 8006c04:	08017544 	.word	0x08017544

08006c08 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	ed87 0a00 	vstr	s0, [r7]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8006c1a:	ed97 7a00 	vldr	s14, [r7]
 8006c1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006c22:	eeb0 0a66 	vmov.f32	s0, s13
 8006c26:	f000 f8f5 	bl	8006e14 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8006c2a:	eef0 7a40 	vmov.f32	s15, s0
 8006c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c32:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
  };
 8006c3a:	4413      	add	r3, r2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08e      	sub	sp, #56	; 0x38
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	4603      	mov	r3, r0
 8006c52:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d118      	bne.n	8006ca0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8006c6e:	f107 0314 	add.w	r3, r7, #20
 8006c72:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8006d68 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff ffc6 	bl	8006c08 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	f107 021c 	add.w	r2, r7, #28
 8006c84:	f107 0308 	add.w	r3, r7, #8
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fa faee 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 8006c90:	4603      	mov	r3, r0
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c96:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8006c9e:	e05f      	b.n	8006d60 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d129      	bne.n	8006cfa <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8006ca6:	f107 0314 	add.w	r3, r7, #20
 8006caa:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8006d68 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff ffaa 	bl	8006c08 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	623b      	str	r3, [r7, #32]
 8006cb8:	f107 0220 	add.w	r2, r7, #32
 8006cbc:	f107 0308 	add.w	r3, r7, #8
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fa fad2 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cce:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff ff95 	bl	8006c08 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006ce6:	1d3b      	adds	r3, r7, #4
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fb fdb8 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cf6:	601a      	str	r2, [r3, #0]
}
 8006cf8:	e032      	b.n	8006d60 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d129      	bne.n	8006d54 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8006d00:	f107 0314 	add.w	r3, r7, #20
 8006d04:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff ff7d 	bl	8006c08 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006d16:	f107 0308 	add.w	r3, r7, #8
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fa faa5 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 8006d22:	4603      	mov	r3, r0
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d28:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8006d2a:	f107 0314 	add.w	r3, r7, #20
 8006d2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff ff68 	bl	8006c08 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006d40:	1d3b      	adds	r3, r7, #4
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fb fd8b 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d50:	601a      	str	r2, [r3, #0]
}
 8006d52:	e005      	b.n	8006d60 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d58:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5e:	601a      	str	r2, [r3, #0]
}
 8006d60:	bf00      	nop
 8006d62:	3738      	adds	r7, #56	; 0x38
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	00000000 	.word	0x00000000

08006d6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8006d6c:	b590      	push	{r4, r7, lr}
 8006d6e:	b089      	sub	sp, #36	; 0x24
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	607a      	str	r2, [r7, #4]
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d108      	bne.n	8006d9e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8006d8c:	f7ff fb97 	bl	80064be <_ZNSt14numeric_limitsIhE3minEv>
 8006d90:	4603      	mov	r3, r0
 8006d92:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8006d94:	f7ff fb9b 	bl	80064ce <_ZNSt14numeric_limitsIhE3maxEv>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	e025      	b.n	8006dea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b09      	cmp	r3, #9
 8006da4:	d108      	bne.n	8006db8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8006da6:	f7fa fa23 	bl	80011f0 <_ZNSt14numeric_limitsIaE3minEv>
 8006daa:	4603      	mov	r3, r0
 8006dac:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8006dae:	f7fa fa28 	bl	8001202 <_ZNSt14numeric_limitsIaE3maxEv>
 8006db2:	4603      	mov	r3, r0
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	e018      	b.n	8006dea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b07      	cmp	r3, #7
 8006dbe:	d108      	bne.n	8006dd2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8006dc0:	f7ff fb8e 	bl	80064e0 <_ZNSt14numeric_limitsIsE3minEv>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8006dc8:	f7ff fb94 	bl	80064f4 <_ZNSt14numeric_limitsIsE3maxEv>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	e00b      	b.n	8006dea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	695c      	ldr	r4, [r3, #20]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	f240 1375 	movw	r3, #373	; 0x175
 8006de0:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8006de2:	490b      	ldr	r1, [pc, #44]	; (8006e10 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8006de4:	47a0      	blx	r4
 8006de6:	2301      	movs	r3, #1
 8006de8:	e00a      	b.n	8006e00 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8006dea:	7af8      	ldrb	r0, [r7, #11]
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	6979      	ldr	r1, [r7, #20]
 8006dfa:	f7ff ff23 	bl	8006c44 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd90      	pop	{r4, r7, pc}
 8006e08:	08017698 	.word	0x08017698
 8006e0c:	080174b8 	.word	0x080174b8
 8006e10:	08017544 	.word	0x08017544

08006e14 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8006e1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006e22:	f7ff fbd4 	bl	80065ce <_ZSt5roundf>
 8006e26:	eef0 7a40 	vmov.f32	s15, s0
 8006e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	4a04      	ldr	r2, [pc, #16]	; (8006e50 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	08019f84 	.word	0x08019f84

08006e54 <_ZN6tflite13ErrorReporterD0Ev>:
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ffe9 	bl	8006e34 <_ZN6tflite13ErrorReporterD1Ev>
 8006e62:	2104      	movs	r1, #4
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f00c fe30 	bl	8013aca <_ZdlPvj>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	4a05      	ldr	r2, [pc, #20]	; (8006e94 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff ffd5 	bl	8006e34 <_ZN6tflite13ErrorReporterD1Ev>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	0801a9e0 	.word	0x0801a9e0

08006e98 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff ffe7 	bl	8006e74 <_ZN6tflite18MicroErrorReporterD1Ev>
 8006ea6:	2104      	movs	r1, #4
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f00c fe0e 	bl	8013aca <_ZdlPvj>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <_ZN11flatbuffers11EndianCheckEv>:
inline void EndianCheck() {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	607b      	str	r3, [r7, #4]
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 8006ec2:	1d3b      	adds	r3, r7, #4
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d005      	beq.n	8006ed6 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8006ecc:	4a05      	ldr	r2, [pc, #20]	; (8006ee4 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8006ece:	214e      	movs	r1, #78	; 0x4e
 8006ed0:	4805      	ldr	r0, [pc, #20]	; (8006ee8 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8006ed2:	f00d f8c5 	bl	8014060 <__assert_func>
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	08017714 	.word	0x08017714
 8006ee4:	08019f90 	.word	0x08019f90
 8006ee8:	08017758 	.word	0x08017758

08006eec <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2104      	movs	r1, #4
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 f86f 	bl	8007fde <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006f00:	4603      	mov	r3, r0
  }
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 f881 	bl	800801a <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8006f18:	4603      	mov	r3, r0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f001 f87f 	bl	8008032 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	4a04      	ldr	r2, [pc, #16]	; (8006f58 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	08019f68 	.word	0x08019f68

08006f5c <_ZN6tflite10OpResolverD0Ev>:
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7ff ffe9 	bl	8006f3c <_ZN6tflite10OpResolverD1Ev>
 8006f6a:	2104      	movs	r1, #4
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f00c fdac 	bl	8013aca <_ZdlPvj>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	460b      	mov	r3, r1
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3314      	adds	r3, #20
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	7afa      	ldrb	r2, [r7, #11]
 8006f94:	4611      	mov	r1, r2
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	4798      	blx	r3
 8006f9a:	4603      	mov	r3, r0
  }
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3318      	adds	r3, #24
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	4798      	blx	r3
 8006fbe:	4603      	mov	r3, r0
  }
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	4a05      	ldr	r2, [pc, #20]	; (8006fe8 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ffaf 	bl	8006f3c <_ZN6tflite10OpResolverD1Ev>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	08019f40 	.word	0x08019f40

08006fec <_ZN6tflite15MicroOpResolverD0Ev>:
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff ffe7 	bl	8006fc8 <_ZN6tflite15MicroOpResolverD1Ev>
 8006ffa:	2104      	movs	r1, #4
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f00c fd64 	bl	8013aca <_ZdlPvj>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <_Z7forwardv>:
char buff[2];
int fwd_delay = 1500;//3100; // value was set to 4800ms but due to battery power error we found that 3100ms made it move 2m


void forward(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
	// Forward
		buff[1] = 0x40; // Set speed to be 50% of max (1.5 km/h)
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <_Z7forwardv+0x34>)
 8007012:	2240      	movs	r2, #64	; 0x40
 8007014:	705a      	strb	r2, [r3, #1]
		buff[0] = 0xC2;
 8007016:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <_Z7forwardv+0x34>)
 8007018:	22c2      	movs	r2, #194	; 0xc2
 800701a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) buff, sizeof(buff), 200);
 800701c:	23c8      	movs	r3, #200	; 0xc8
 800701e:	2202      	movs	r2, #2
 8007020:	4907      	ldr	r1, [pc, #28]	; (8007040 <_Z7forwardv+0x34>)
 8007022:	4808      	ldr	r0, [pc, #32]	; (8007044 <_Z7forwardv+0x38>)
 8007024:	f00c f944 	bl	80132b0 <HAL_UART_Transmit>
		buff[0] = 0xCA;
 8007028:	4b05      	ldr	r3, [pc, #20]	; (8007040 <_Z7forwardv+0x34>)
 800702a:	22ca      	movs	r2, #202	; 0xca
 800702c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) buff, sizeof(buff), 200);
 800702e:	23c8      	movs	r3, #200	; 0xc8
 8007030:	2202      	movs	r2, #2
 8007032:	4903      	ldr	r1, [pc, #12]	; (8007040 <_Z7forwardv+0x34>)
 8007034:	4803      	ldr	r0, [pc, #12]	; (8007044 <_Z7forwardv+0x38>)
 8007036:	f00c f93b 	bl	80132b0 <HAL_UART_Transmit>

		//HAL_Delay(fwd_delay); // Delay to move forward for a set time

}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000460 	.word	0x20000460
 8007044:	2000033c 	.word	0x2000033c

08007048 <_Z4leftv>:

void left(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
	// Turn Left
		//buff[1] = 0x06; //set slower speed to 6 (calculated above)
		//buff[0] = 0xC2;
		buff[1] = 0x40; //set slower speed to 6 (calculated above)
 800704c:	4b0e      	ldr	r3, [pc, #56]	; (8007088 <_Z4leftv+0x40>)
 800704e:	2240      	movs	r2, #64	; 0x40
 8007050:	705a      	strb	r2, [r3, #1]
		buff[0] = 0xC1;
 8007052:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <_Z4leftv+0x40>)
 8007054:	22c1      	movs	r2, #193	; 0xc1
 8007056:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) buff, sizeof(buff), 200);
 8007058:	23c8      	movs	r3, #200	; 0xc8
 800705a:	2202      	movs	r2, #2
 800705c:	490a      	ldr	r1, [pc, #40]	; (8007088 <_Z4leftv+0x40>)
 800705e:	480b      	ldr	r0, [pc, #44]	; (800708c <_Z4leftv+0x44>)
 8007060:	f00c f926 	bl	80132b0 <HAL_UART_Transmit>

		buff[1] = 0x40;
 8007064:	4b08      	ldr	r3, [pc, #32]	; (8007088 <_Z4leftv+0x40>)
 8007066:	2240      	movs	r2, #64	; 0x40
 8007068:	705a      	strb	r2, [r3, #1]
		buff[0] = 0xCA;
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <_Z4leftv+0x40>)
 800706c:	22ca      	movs	r2, #202	; 0xca
 800706e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) buff, sizeof(buff), 200);
 8007070:	23c8      	movs	r3, #200	; 0xc8
 8007072:	2202      	movs	r2, #2
 8007074:	4904      	ldr	r1, [pc, #16]	; (8007088 <_Z4leftv+0x40>)
 8007076:	4805      	ldr	r0, [pc, #20]	; (800708c <_Z4leftv+0x44>)
 8007078:	f00c f91a 	bl	80132b0 <HAL_UART_Transmit>

		HAL_Delay(530); // since turning speed of 5.6 was calculated for 1500ms -> we changed delay to 1400 to account for the fact that we're using 6 instead
 800707c:	f240 2012 	movw	r0, #530	; 0x212
 8007080:	f009 fa58 	bl	8010534 <HAL_Delay>

}
 8007084:	bf00      	nop
 8007086:	bd80      	pop	{r7, pc}
 8007088:	20000460 	.word	0x20000460
 800708c:	2000033c 	.word	0x2000033c

08007090 <_Z5rightv>:

void right(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
			// Turn Right
		buff[1] = 0x40;
 8007094:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <_Z5rightv+0x40>)
 8007096:	2240      	movs	r2, #64	; 0x40
 8007098:	705a      	strb	r2, [r3, #1]
		buff[0] = 0xC2;
 800709a:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <_Z5rightv+0x40>)
 800709c:	22c2      	movs	r2, #194	; 0xc2
 800709e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) buff, sizeof(buff), 200);
 80070a0:	23c8      	movs	r3, #200	; 0xc8
 80070a2:	2202      	movs	r2, #2
 80070a4:	490a      	ldr	r1, [pc, #40]	; (80070d0 <_Z5rightv+0x40>)
 80070a6:	480b      	ldr	r0, [pc, #44]	; (80070d4 <_Z5rightv+0x44>)
 80070a8:	f00c f902 	bl	80132b0 <HAL_UART_Transmit>

		//buff[1] = 0x06;
		//buff[0] = 0xCA;
		buff[1] = 0x40;
 80070ac:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <_Z5rightv+0x40>)
 80070ae:	2240      	movs	r2, #64	; 0x40
 80070b0:	705a      	strb	r2, [r3, #1]
		buff[0] = 0xC9;
 80070b2:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <_Z5rightv+0x40>)
 80070b4:	22c9      	movs	r2, #201	; 0xc9
 80070b6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) buff, sizeof(buff), 200);
 80070b8:	23c8      	movs	r3, #200	; 0xc8
 80070ba:	2202      	movs	r2, #2
 80070bc:	4904      	ldr	r1, [pc, #16]	; (80070d0 <_Z5rightv+0x40>)
 80070be:	4805      	ldr	r0, [pc, #20]	; (80070d4 <_Z5rightv+0x44>)
 80070c0:	f00c f8f6 	bl	80132b0 <HAL_UART_Transmit>

		HAL_Delay(550); // we found that the left motor was weaker -> the same delay made it turn less degrees -> increase delay to account for weaker motor
 80070c4:	f240 2026 	movw	r0, #550	; 0x226
 80070c8:	f009 fa34 	bl	8010534 <HAL_Delay>


}
 80070cc:	bf00      	nop
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000460 	.word	0x20000460
 80070d4:	2000033c 	.word	0x2000033c

080070d8 <_Z5brakev>:

void brake(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
	// Brake
		buff[1] = 0x00;
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <_Z5brakev+0x34>)
 80070de:	2200      	movs	r2, #0
 80070e0:	705a      	strb	r2, [r3, #1]
		buff[0] = 0xC0;
 80070e2:	4b0a      	ldr	r3, [pc, #40]	; (800710c <_Z5brakev+0x34>)
 80070e4:	22c0      	movs	r2, #192	; 0xc0
 80070e6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) buff, sizeof(buff), 200);
 80070e8:	23c8      	movs	r3, #200	; 0xc8
 80070ea:	2202      	movs	r2, #2
 80070ec:	4907      	ldr	r1, [pc, #28]	; (800710c <_Z5brakev+0x34>)
 80070ee:	4808      	ldr	r0, [pc, #32]	; (8007110 <_Z5brakev+0x38>)
 80070f0:	f00c f8de 	bl	80132b0 <HAL_UART_Transmit>
		buff[0] = 0xC8;
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <_Z5brakev+0x34>)
 80070f6:	22c8      	movs	r2, #200	; 0xc8
 80070f8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) buff, sizeof(buff), 200);
 80070fa:	23c8      	movs	r3, #200	; 0xc8
 80070fc:	2202      	movs	r2, #2
 80070fe:	4903      	ldr	r1, [pc, #12]	; (800710c <_Z5brakev+0x34>)
 8007100:	4803      	ldr	r0, [pc, #12]	; (8007110 <_Z5brakev+0x38>)
 8007102:	f00c f8d5 	bl	80132b0 <HAL_UART_Transmit>

		//HAL_Delay(500);

}
 8007106:	bf00      	nop
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20000460 	.word	0x20000460
 8007110:	2000033c 	.word	0x2000033c

08007114 <_Z7moveCari>:
void moveCar(int state){
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	if(state==0)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <_Z7moveCari+0x14>
		brake();
 8007122:	f7ff ffd9 	bl	80070d8 <_Z5brakev>
		forward();
	else if(state==2)
		left();
	else
		right();
}
 8007126:	e00d      	b.n	8007144 <_Z7moveCari+0x30>
	else if(state==1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d102      	bne.n	8007134 <_Z7moveCari+0x20>
		forward();
 800712e:	f7ff ff6d 	bl	800700c <_Z7forwardv>
}
 8007132:	e007      	b.n	8007144 <_Z7moveCari+0x30>
	else if(state==2)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b02      	cmp	r3, #2
 8007138:	d102      	bne.n	8007140 <_Z7moveCari+0x2c>
		left();
 800713a:	f7ff ff85 	bl	8007048 <_Z4leftv>
}
 800713e:	e001      	b.n	8007144 <_Z7moveCari+0x30>
		right();
 8007140:	f7ff ffa6 	bl	8007090 <_Z5rightv>
}
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <_Z11readSamplesv>:
const int no_of_samples = 64000;
//int16_t samples[no_of_samples];


int readSamples()
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0

	//char debug [10];
//	int a =0;
	//int read;
	int bit, toggle, prescalerCounter=0;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
	int debouncerPositiveCounter =0;
 8007156:	2300      	movs	r3, #0
 8007158:	60bb      	str	r3, [r7, #8]
	int debouncerNegativeCounter=0;
 800715a:	2300      	movs	r3, #0
 800715c:	607b      	str	r3, [r7, #4]
	int stateTriggered= 0;
 800715e:	2300      	movs	r3, #0
 8007160:	603b      	str	r3, [r7, #0]
	//float convf;
	//float volt;
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8007162:	4b39      	ldr	r3, [pc, #228]	; (8007248 <_Z11readSamplesv+0xfc>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2200      	movs	r2, #0
 8007168:	625a      	str	r2, [r3, #36]	; 0x24
	toggle=0;
 800716a:	2300      	movs	r3, #0
 800716c:	613b      	str	r3, [r7, #16]
	while(sampleCompleted<no_of_samples)
 800716e:	4b37      	ldr	r3, [pc, #220]	; (800724c <_Z11readSamplesv+0x100>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8007176:	da4e      	bge.n	8007216 <_Z11readSamplesv+0xca>
	{
		while (__HAL_TIM_GET_COUNTER(&htim1) < 10);
 8007178:	4b33      	ldr	r3, [pc, #204]	; (8007248 <_Z11readSamplesv+0xfc>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	2b09      	cmp	r3, #9
 8007180:	bf94      	ite	ls
 8007182:	2301      	movls	r3, #1
 8007184:	2300      	movhi	r3, #0
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d000      	beq.n	800718e <_Z11readSamplesv+0x42>
 800718c:	e7f4      	b.n	8007178 <_Z11readSamplesv+0x2c>

		prescalerCounter +=1;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
		if(prescalerCounter>1)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b01      	cmp	r3, #1
 8007198:	dd37      	ble.n	800720a <_Z11readSamplesv+0xbe>
		{
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 800719a:	4b2b      	ldr	r3, [pc, #172]	; (8007248 <_Z11readSamplesv+0xfc>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2200      	movs	r2, #0
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24

			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5))
 80071a2:	2120      	movs	r1, #32
 80071a4:	482a      	ldr	r0, [pc, #168]	; (8007250 <_Z11readSamplesv+0x104>)
 80071a6:	f00a fbd1 	bl	801194c <HAL_GPIO_ReadPin>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf14      	ite	ne
 80071b0:	2301      	movne	r3, #1
 80071b2:	2300      	moveq	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <_Z11readSamplesv+0x74>
				bit =0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	e001      	b.n	80071c4 <_Z11readSamplesv+0x78>
			else
				bit =1;
 80071c0:	2301      	movs	r3, #1
 80071c2:	617b      	str	r3, [r7, #20]

			if(bit){
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d010      	beq.n	80071ec <_Z11readSamplesv+0xa0>
				debouncerPositiveCounter +=1;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	3301      	adds	r3, #1
 80071ce:	60bb      	str	r3, [r7, #8]
				if(debouncerPositiveCounter>10){
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b0a      	cmp	r3, #10
 80071d4:	dd07      	ble.n	80071e6 <_Z11readSamplesv+0x9a>
					if(stateTriggered==0)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d102      	bne.n	80071e2 <_Z11readSamplesv+0x96>
						toggle+=1;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	3301      	adds	r3, #1
 80071e0:	613b      	str	r3, [r7, #16]
					stateTriggered=1;
 80071e2:	2301      	movs	r3, #1
 80071e4:	603b      	str	r3, [r7, #0]
				}

				debouncerNegativeCounter = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	607b      	str	r3, [r7, #4]
 80071ea:	e002      	b.n	80071f2 <_Z11readSamplesv+0xa6>
			}else{
				debouncerNegativeCounter +=1;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3301      	adds	r3, #1
 80071f0:	607b      	str	r3, [r7, #4]
			}

			if(debouncerNegativeCounter>600){
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80071f8:	dd05      	ble.n	8007206 <_Z11readSamplesv+0xba>
				stateTriggered =0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	603b      	str	r3, [r7, #0]
				debouncerPositiveCounter=0;
 80071fe:	2300      	movs	r3, #0
 8007200:	60bb      	str	r3, [r7, #8]
				debouncerNegativeCounter=0;
 8007202:	2300      	movs	r3, #0
 8007204:	607b      	str	r3, [r7, #4]
			}



			prescalerCounter=0;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
		}

		sampleCompleted++;
 800720a:	4b10      	ldr	r3, [pc, #64]	; (800724c <_Z11readSamplesv+0x100>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3301      	adds	r3, #1
 8007210:	4a0e      	ldr	r2, [pc, #56]	; (800724c <_Z11readSamplesv+0x100>)
 8007212:	6013      	str	r3, [r2, #0]
	while(sampleCompleted<no_of_samples)
 8007214:	e7ab      	b.n	800716e <_Z11readSamplesv+0x22>

	}


	sprintf(message,"NOISY  = %d TOGGLE = %d \r\n", bit,toggle);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	490e      	ldr	r1, [pc, #56]	; (8007254 <_Z11readSamplesv+0x108>)
 800721c:	480e      	ldr	r0, [pc, #56]	; (8007258 <_Z11readSamplesv+0x10c>)
 800721e:	f00d feb1 	bl	8014f84 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)&message, 25, 100);
 8007222:	2364      	movs	r3, #100	; 0x64
 8007224:	2219      	movs	r2, #25
 8007226:	490c      	ldr	r1, [pc, #48]	; (8007258 <_Z11readSamplesv+0x10c>)
 8007228:	480c      	ldr	r0, [pc, #48]	; (800725c <_Z11readSamplesv+0x110>)
 800722a:	f00c f841 	bl	80132b0 <HAL_UART_Transmit>
	sampleCompleted = 0;
 800722e:	4b07      	ldr	r3, [pc, #28]	; (800724c <_Z11readSamplesv+0x100>)
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
	if(toggle<4)
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	2b03      	cmp	r3, #3
 8007238:	dc01      	bgt.n	800723e <_Z11readSamplesv+0xf2>
		return toggle;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	e000      	b.n	8007240 <_Z11readSamplesv+0xf4>
	else return 0;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	200002a4 	.word	0x200002a4
 800724c:	2000043c 	.word	0x2000043c
 8007250:	48000400 	.word	0x48000400
 8007254:	08017788 	.word	0x08017788
 8007258:	20000440 	.word	0x20000440
 800725c:	200003bc 	.word	0x200003bc

08007260 <__tcf_0>:
  interpreter.AllocateTensors();

  // Get information about the memory area to use for the model's input.
  TfLiteTensor* input = interpreter.input(0);
  static FeatureProvider static_feature_provider(kFeatureElementCount,
                                                   feature_buffer);
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
 8007264:	4801      	ldr	r0, [pc, #4]	; (800726c <__tcf_0+0xc>)
 8007266:	f7fb ff13 	bl	8003090 <_ZN15FeatureProviderD1Ev>
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000464 	.word	0x20000464

08007270 <main>:
{
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	f5ad 5d47 	sub.w	sp, sp, #12736	; 0x31c0
 8007276:	b08d      	sub	sp, #52	; 0x34
 8007278:	af04      	add	r7, sp, #16
	FeatureProvider* feature_provider = nullptr;
 800727a:	2300      	movs	r3, #0
 800727c:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007280:	6013      	str	r3, [r2, #0]
	RecognizeCommands* recognizer = nullptr;
 8007282:	2300      	movs	r3, #0
 8007284:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 8007288:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800728c:	6013      	str	r3, [r2, #0]
  HAL_Init();
 800728e:	f009 f8dc 	bl	801044a <HAL_Init>
  SystemClock_Config();
 8007292:	f000 fc31 	bl	8007af8 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8007296:	f000 fe57 	bl	8007f48 <_ZL12MX_GPIO_Initv>
  MX_TIM16_Init();
 800729a:	f000 fdc1 	bl	8007e20 <_ZL13MX_TIM16_Initv>
  MX_USART2_UART_Init();
 800729e:	f000 fe1f 	bl	8007ee0 <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 80072a2:	f000 fd33 	bl	8007d0c <_ZL11MX_CRC_Initv>
  MX_ADC1_Init();
 80072a6:	f000 fcc3 	bl	8007c30 <_ZL12MX_ADC1_Initv>
  MX_TIM1_Init();
 80072aa:	f000 fd57 	bl	8007d5c <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 80072ae:	f000 fde3 	bl	8007e78 <_ZL19MX_USART1_UART_Initv>
  tflite::MicroErrorReporter micro_error_reporter;
 80072b2:	4ac9      	ldr	r2, [pc, #804]	; (80075d8 <main+0x368>)
 80072b4:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 80072b8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80072bc:	601a      	str	r2, [r3, #0]
  tflite::ErrorReporter* error_reporter = &micro_error_reporter;
 80072be:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 80072c2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80072c6:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 80072ca:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80072ce:	6013      	str	r3, [r2, #0]
  const tflite::Model* model = ::tflite::GetModel(g_model);
 80072d0:	48c2      	ldr	r0, [pc, #776]	; (80075dc <main+0x36c>)
 80072d2:	f7ff fe1a 	bl	8006f0a <_ZN6tflite8GetModelEPKv>
 80072d6:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 80072da:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80072de:	6018      	str	r0, [r3, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION)
 80072e0:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 80072e4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80072e8:	6818      	ldr	r0, [r3, #0]
 80072ea:	f7ff fdff 	bl	8006eec <_ZNK6tflite5Model7versionEv>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	bf14      	ite	ne
 80072f4:	2301      	movne	r3, #1
 80072f6:	2300      	moveq	r3, #0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00f      	beq.n	800731e <main+0xae>
	  TF_LITE_REPORT_ERROR(&micro_error_reporter,
 80072fe:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8007302:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007306:	6818      	ldr	r0, [r3, #0]
 8007308:	f7ff fdf0 	bl	8006eec <_ZNK6tflite5Model7versionEv>
 800730c:	4602      	mov	r2, r0
 800730e:	f507 5026 	add.w	r0, r7, #10624	; 0x2980
 8007312:	f100 002c 	add.w	r0, r0, #44	; 0x2c
 8007316:	2303      	movs	r3, #3
 8007318:	49b1      	ldr	r1, [pc, #708]	; (80075e0 <main+0x370>)
 800731a:	f7fb fe5f 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
  tflite::MicroMutableOpResolver<4> micro_op_resolver;
 800731e:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8007322:	f103 0308 	add.w	r3, r3, #8
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f000 feb1 	bl	8008090 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>
  micro_op_resolver.AddDepthwiseConv2D();
 800732e:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8007332:	f103 0308 	add.w	r3, r3, #8
 8007336:	4618      	mov	r0, r3
 8007338:	f000 feca 	bl	80080d0 <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv>
    return AddBuiltin(BuiltinOperator_FLOOR,
                      tflite::ops::micro::Register_FLOOR(), ParseFloor);
  }

  TfLiteStatus AddFullyConnected(
      const TfLiteRegistration& registration = Register_FULLY_CONNECTED()) {
 800733c:	f507 5345 	add.w	r3, r7, #12608	; 0x3140
 8007340:	f103 0318 	add.w	r3, r3, #24
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fc1d 	bl	8005b84 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
  micro_op_resolver.AddFullyConnected();
 800734a:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800734e:	f102 0218 	add.w	r2, r2, #24
 8007352:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8007356:	f103 0308 	add.w	r3, r3, #8
 800735a:	4611      	mov	r1, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fecf 	bl	8008100 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration>
  micro_op_resolver.AddReshape();
 8007362:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8007366:	f103 0308 	add.w	r3, r3, #8
 800736a:	4618      	mov	r0, r3
 800736c:	f000 feda 	bl	8008124 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv>
  micro_op_resolver.AddSoftmax();
 8007370:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8007374:	f103 0308 	add.w	r3, r3, #8
 8007378:	4618      	mov	r0, r3
 800737a:	f000 feeb 	bl	8008154 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxEv>
  const int tensor_arena_size = 10 * 1024;
 800737e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007382:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 8007386:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800738a:	6013      	str	r3, [r2, #0]
									 &micro_error_reporter);
 800738c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007390:	3b18      	subs	r3, #24
 8007392:	f507 5124 	add.w	r1, r7, #10496	; 0x2900
 8007396:	f101 0108 	add.w	r1, r1, #8
 800739a:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800739e:	3830      	subs	r0, #48	; 0x30
 80073a0:	2200      	movs	r2, #0
 80073a2:	9202      	str	r2, [sp, #8]
 80073a4:	f507 5226 	add.w	r2, r7, #10624	; 0x2980
 80073a8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80073ac:	9201      	str	r2, [sp, #4]
 80073ae:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80073b2:	9200      	str	r2, [sp, #0]
 80073b4:	460a      	mov	r2, r1
 80073b6:	f507 5146 	add.w	r1, r7, #12672	; 0x3180
 80073ba:	f101 0134 	add.w	r1, r1, #52	; 0x34
 80073be:	6809      	ldr	r1, [r1, #0]
 80073c0:	f003 ff34 	bl	800b22c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
  interpreter.AllocateTensors();
 80073c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80073c8:	3b30      	subs	r3, #48	; 0x30
 80073ca:	4618      	mov	r0, r3
 80073cc:	f004 f810 	bl	800b3f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
  TfLiteTensor* input = interpreter.input(0);
 80073d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80073d4:	3b30      	subs	r3, #48	; 0x30
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f004 f9d9 	bl	800b790 <_ZN6tflite16MicroInterpreter5inputEj>
 80073de:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 80073e2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80073e6:	6018      	str	r0, [r3, #0]
                                                   feature_buffer);
 80073e8:	4b7e      	ldr	r3, [pc, #504]	; (80075e4 <main+0x374>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f3bf 8f5b 	dmb	ish
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	bf0c      	ite	eq
 80073fa:	2301      	moveq	r3, #1
 80073fc:	2300      	movne	r3, #0
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01a      	beq.n	800743a <main+0x1ca>
 8007404:	4877      	ldr	r0, [pc, #476]	; (80075e4 <main+0x374>)
 8007406:	f00c fb73 	bl	8013af0 <__cxa_guard_acquire>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	bf14      	ite	ne
 8007410:	2301      	movne	r3, #1
 8007412:	2300      	moveq	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00f      	beq.n	800743a <main+0x1ca>
 800741a:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 800741e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8007422:	461a      	mov	r2, r3
 8007424:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8007428:	486f      	ldr	r0, [pc, #444]	; (80075e8 <main+0x378>)
 800742a:	f7fb fe0a 	bl	8003042 <_ZN15FeatureProviderC1EiPa>
 800742e:	486d      	ldr	r0, [pc, #436]	; (80075e4 <main+0x374>)
 8007430:	f00c fb6a 	bl	8013b08 <__cxa_guard_release>
 8007434:	486d      	ldr	r0, [pc, #436]	; (80075ec <main+0x37c>)
 8007436:	f00c fe31 	bl	801409c <atexit>
  feature_provider = &static_feature_provider;
 800743a:	4b6b      	ldr	r3, [pc, #428]	; (80075e8 <main+0x378>)
 800743c:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007440:	6013      	str	r3, [r2, #0]

  static RecognizeCommands static_recognizer(error_reporter);
 8007442:	4b6b      	ldr	r3, [pc, #428]	; (80075f0 <main+0x380>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	f3bf 8f5b 	dmb	ish
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	bf0c      	ite	eq
 8007454:	2301      	moveq	r3, #1
 8007456:	2300      	movne	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d01d      	beq.n	800749a <main+0x22a>
 800745e:	4864      	ldr	r0, [pc, #400]	; (80075f0 <main+0x380>)
 8007460:	f00c fb46 	bl	8013af0 <__cxa_guard_acquire>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	bf14      	ite	ne
 800746a:	2301      	movne	r3, #1
 800746c:	2300      	moveq	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	d012      	beq.n	800749a <main+0x22a>
 8007474:	2303      	movs	r3, #3
 8007476:	9301      	str	r3, [sp, #4]
 8007478:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	23c8      	movs	r3, #200	; 0xc8
 8007480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007484:	f507 5146 	add.w	r1, r7, #12672	; 0x3180
 8007488:	f101 0138 	add.w	r1, r1, #56	; 0x38
 800748c:	6809      	ldr	r1, [r1, #0]
 800748e:	4859      	ldr	r0, [pc, #356]	; (80075f4 <main+0x384>)
 8007490:	f005 f9a2 	bl	800c7d8 <_ZN17RecognizeCommandsC1EPN6tflite13ErrorReporterElhll>
 8007494:	4856      	ldr	r0, [pc, #344]	; (80075f0 <main+0x380>)
 8007496:	f00c fb37 	bl	8013b08 <__cxa_guard_release>
  recognizer = &static_recognizer;
 800749a:	4b56      	ldr	r3, [pc, #344]	; (80075f4 <main+0x384>)
 800749c:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 80074a0:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80074a4:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   //float convF;
   //uint32_t converted;
   HAL_TIM_Base_Start (&htim1);
 80074a6:	4854      	ldr	r0, [pc, #336]	; (80075f8 <main+0x388>)
 80074a8:	f00b fc4a 	bl	8012d40 <HAL_TIM_Base_Start>
   //volatile int bit;
   __HAL_TIM_ENABLE_IT(&htim1,TIM_IT_CC1);
 80074ac:	4b52      	ldr	r3, [pc, #328]	; (80075f8 <main+0x388>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	4b51      	ldr	r3, [pc, #324]	; (80075f8 <main+0x388>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0202 	orr.w	r2, r2, #2
 80074ba:	60da      	str	r2, [r3, #12]
   int32_t previous_time = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 80074c2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80074c6:	6013      	str	r3, [r2, #0]
   HAL_UART_Transmit(&huart2,(uint8_t *)"STRT!\r\n", 7, 100);
 80074c8:	2364      	movs	r3, #100	; 0x64
 80074ca:	2207      	movs	r2, #7
 80074cc:	494b      	ldr	r1, [pc, #300]	; (80075fc <main+0x38c>)
 80074ce:	484c      	ldr	r0, [pc, #304]	; (8007600 <main+0x390>)
 80074d0:	f00b feee 	bl	80132b0 <HAL_UART_Transmit>

   const int8_t* go_features_data = g_go_micro_f2e59fea_nohash_1_data;
 80074d4:	4b4b      	ldr	r3, [pc, #300]	; (8007604 <main+0x394>)
 80074d6:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 80074da:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80074de:	6013      	str	r3, [r2, #0]
   const int8_t* stop_features_data = g_stop_micro_f2e59fea_nohash_1_data;
 80074e0:	4b49      	ldr	r3, [pc, #292]	; (8007608 <main+0x398>)
 80074e2:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 80074e6:	f102 0220 	add.w	r2, r2, #32
 80074ea:	6013      	str	r3, [r2, #0]
   const int8_t* right_features_data = g_right_micro_f2e59fea_nohash_1_data;
 80074ec:	4b47      	ldr	r3, [pc, #284]	; (800760c <main+0x39c>)
 80074ee:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 80074f2:	f102 021c 	add.w	r2, r2, #28
 80074f6:	6013      	str	r3, [r2, #0]
   const int8_t* left_features_data = g_left_micro_f2e59fea_nohash_1_data;
 80074f8:	4b45      	ldr	r3, [pc, #276]	; (8007610 <main+0x3a0>)
 80074fa:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 80074fe:	f102 0218 	add.w	r2, r2, #24
 8007502:	6013      	str	r3, [r2, #0]

   int counter = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 800750a:	f102 0214 	add.w	r2, r2, #20
 800750e:	6013      	str	r3, [r2, #0]
   int carState =0;
 8007510:	2300      	movs	r3, #0
 8007512:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007516:	f102 021c 	add.w	r2, r2, #28
 800751a:	6013      	str	r3, [r2, #0]
   int prevCarState =0;
 800751c:	2300      	movs	r3, #0
 800751e:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007522:	f102 0218 	add.w	r2, r2, #24
 8007526:	6013      	str	r3, [r2, #0]
   int firstLoop = 1;
 8007528:	2301      	movs	r3, #1
 800752a:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 800752e:	f102 0214 	add.w	r2, r2, #20
 8007532:	6013      	str	r3, [r2, #0]
   int detectedState=0;
 8007534:	2300      	movs	r3, #0
 8007536:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 800753a:	f102 0210 	add.w	r2, r2, #16
 800753e:	6013      	str	r3, [r2, #0]
   int changeOfState =1;
 8007540:	2301      	movs	r3, #1
 8007542:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007546:	f102 0210 	add.w	r2, r2, #16
 800754a:	6013      	str	r3, [r2, #0]
   // 2 Left
   // 3 Right

   while(1)
   {
	   if(firstLoop==0)
 800754c:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007550:	f103 0314 	add.w	r3, r3, #20
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 8082 	bne.w	8007660 <main+0x3f0>
	   {
			detectedState = readSamples();
 800755c:	f7ff fdf6 	bl	800714c <_Z11readSamplesv>
 8007560:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8007564:	f103 0310 	add.w	r3, r3, #16
 8007568:	6018      	str	r0, [r3, #0]
			prevCarState = carState;
 800756a:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 800756e:	f103 031c 	add.w	r3, r3, #28
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007578:	f102 0218 	add.w	r2, r2, #24
 800757c:	6013      	str	r3, [r2, #0]

			if(detectedState ==1){
 800757e:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8007582:	f103 0310 	add.w	r3, r3, #16
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d143      	bne.n	8007614 <main+0x3a4>
				changeOfState =1;
 800758c:	2301      	movs	r3, #1
 800758e:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007592:	f102 0210 	add.w	r2, r2, #16
 8007596:	6013      	str	r3, [r2, #0]
				if(carState == 0 || carState == 1)
 8007598:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 800759c:	f103 031c 	add.w	r3, r3, #28
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d006      	beq.n	80075b4 <main+0x344>
 80075a6:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 80075aa:	f103 031c 	add.w	r3, r3, #28
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d140      	bne.n	8007636 <main+0x3c6>
					carState = (carState+1)%2;
 80075b4:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 80075b8:	f103 031c 	add.w	r3, r3, #28
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3301      	adds	r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	bfb8      	it	lt
 80075c8:	425b      	neglt	r3, r3
 80075ca:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 80075ce:	f102 021c 	add.w	r2, r2, #28
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	e02f      	b.n	8007636 <main+0x3c6>
 80075d6:	bf00      	nop
 80075d8:	0801a9e0 	.word	0x0801a9e0
 80075dc:	0801a9ec 	.word	0x0801a9ec
 80075e0:	080177a4 	.word	0x080177a4
 80075e4:	20000470 	.word	0x20000470
 80075e8:	20000464 	.word	0x20000464
 80075ec:	08007261 	.word	0x08007261
 80075f0:	200006f4 	.word	0x200006f4
 80075f4:	20000474 	.word	0x20000474
 80075f8:	200002a4 	.word	0x200002a4
 80075fc:	080177ec 	.word	0x080177ec
 8007600:	200003bc 	.word	0x200003bc
 8007604:	08021378 	.word	0x08021378
 8007608:	08021b20 	.word	0x08021b20
 800760c:	080222c8 	.word	0x080222c8
 8007610:	08022a70 	.word	0x08022a70
			} else if (detectedState != 0){
 8007614:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8007618:	f103 0310 	add.w	r3, r3, #16
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <main+0x3c6>



				carState = detectedState;
 8007622:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8007626:	f103 0310 	add.w	r3, r3, #16
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007630:	f102 021c 	add.w	r2, r2, #28
 8007634:	6013      	str	r3, [r2, #0]
			}

			changeOfState = (carState!=prevCarState);
 8007636:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 800763a:	f103 031c 	add.w	r3, r3, #28
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007644:	f103 0318 	add.w	r3, r3, #24
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	bf14      	ite	ne
 800764e:	2301      	movne	r3, #1
 8007650:	2300      	moveq	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007658:	f102 0210 	add.w	r2, r2, #16
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	e005      	b.n	800766c <main+0x3fc>
		}
	   else
	   {
			firstLoop=false;
 8007660:	2300      	movs	r3, #0
 8007662:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007666:	f102 0214 	add.w	r2, r2, #20
 800766a:	6013      	str	r3, [r2, #0]
	   }

	   	int how_many_new_slices = 0;
 800766c:	2300      	movs	r3, #0
 800766e:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 8007672:	f102 020c 	add.w	r2, r2, #12
 8007676:	6013      	str	r3, [r2, #0]

		// Copy a spectrogram created from a .wav audio file of someone saying respective "Command",
		// into the memory area used for the input.
		//const int8_t* yes_features_data = g_go_micro_f2e59fea_nohash_1_data;

	   	for (size_t i = 0; i < input->bytes; ++i)
 8007678:	2300      	movs	r3, #0
 800767a:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 800767e:	f102 020c 	add.w	r2, r2, #12
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8007688:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007694:	f102 020c 	add.w	r2, r2, #12
 8007698:	6812      	ldr	r2, [r2, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	f080 8093 	bcs.w	80077c6 <main+0x556>
	   	{
			if(carState == 0)
 80076a0:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 80076a4:	f103 031c 	add.w	r3, r3, #28
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d11a      	bne.n	80076e4 <main+0x474>
				input->data.int8[i] = stop_features_data[i];
 80076ae:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 80076b2:	f103 0320 	add.w	r3, r3, #32
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 80076bc:	f103 030c 	add.w	r3, r3, #12
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	441a      	add	r2, r3
 80076c4:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 80076c8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6859      	ldr	r1, [r3, #4]
 80076d0:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 80076d4:	f103 030c 	add.w	r3, r3, #12
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	440b      	add	r3, r1
 80076dc:	f992 2000 	ldrsb.w	r2, [r2]
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	e064      	b.n	80077ae <main+0x53e>
			else if(carState == 1)
 80076e4:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 80076e8:	f103 031c 	add.w	r3, r3, #28
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d11a      	bne.n	8007728 <main+0x4b8>
				input->data.int8[i] = go_features_data[i];
 80076f2:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 80076f6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007700:	f103 030c 	add.w	r3, r3, #12
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	441a      	add	r2, r3
 8007708:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800770c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6859      	ldr	r1, [r3, #4]
 8007714:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007718:	f103 030c 	add.w	r3, r3, #12
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	440b      	add	r3, r1
 8007720:	f992 2000 	ldrsb.w	r2, [r2]
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	e042      	b.n	80077ae <main+0x53e>
			else if(carState == 2)
 8007728:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 800772c:	f103 031c 	add.w	r3, r3, #28
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b02      	cmp	r3, #2
 8007734:	d11a      	bne.n	800776c <main+0x4fc>
				input->data.int8[i] = left_features_data[i];
 8007736:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800773a:	f103 0318 	add.w	r3, r3, #24
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007744:	f103 030c 	add.w	r3, r3, #12
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	441a      	add	r2, r3
 800774c:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8007750:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6859      	ldr	r1, [r3, #4]
 8007758:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 800775c:	f103 030c 	add.w	r3, r3, #12
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	440b      	add	r3, r1
 8007764:	f992 2000 	ldrsb.w	r2, [r2]
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e020      	b.n	80077ae <main+0x53e>
			else if(carState == 3)
 800776c:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007770:	f103 031c 	add.w	r3, r3, #28
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d119      	bne.n	80077ae <main+0x53e>
				input->data.int8[i] = right_features_data[i];
 800777a:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800777e:	f103 031c 	add.w	r3, r3, #28
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007788:	f103 030c 	add.w	r3, r3, #12
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	441a      	add	r2, r3
 8007790:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8007794:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6859      	ldr	r1, [r3, #4]
 800779c:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 80077a0:	f103 030c 	add.w	r3, r3, #12
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	440b      	add	r3, r1
 80077a8:	f992 2000 	ldrsb.w	r2, [r2]
 80077ac:	701a      	strb	r2, [r3, #0]
	   	for (size_t i = 0; i < input->bytes; ++i)
 80077ae:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 80077b2:	f103 030c 	add.w	r3, r3, #12
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 80077be:	f102 020c 	add.w	r2, r2, #12
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	e75e      	b.n	8007684 <main+0x414>
	   	}

	   	// Run the model on this input and make sure it succeeds.
	   	if(changeOfState)
 80077c6:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 80077ca:	f103 0310 	add.w	r3, r3, #16
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f43f aebb 	beq.w	800754c <main+0x2dc>
	   	{
			changeOfState = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 80077dc:	f102 0210 	add.w	r2, r2, #16
 80077e0:	6013      	str	r3, [r2, #0]

			TfLiteStatus invoke_status = interpreter.Invoke();
 80077e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80077e6:	3b30      	subs	r3, #48	; 0x30
 80077e8:	4618      	mov	r0, r3
 80077ea:	f003 ff33 	bl	800b654 <_ZN6tflite16MicroInterpreter6InvokeEv>
 80077ee:	4603      	mov	r3, r0
 80077f0:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 80077f4:	f102 020b 	add.w	r2, r2, #11
 80077f8:	7013      	strb	r3, [r2, #0]
			if (invoke_status != kTfLiteOk)
 80077fa:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 80077fe:	f103 030b 	add.w	r3, r3, #11
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d007      	beq.n	8007818 <main+0x5a8>
			{
			  TF_LITE_REPORT_ERROR(&micro_error_reporter, "Invoke failed\n");
 8007808:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 800780c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007810:	49af      	ldr	r1, [pc, #700]	; (8007ad0 <main+0x860>)
 8007812:	4618      	mov	r0, r3
 8007814:	f7fb fbe2 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
			}

			// Get the output from the model, and make sure it's the expected size and
			// type.
			TfLiteTensor* output = interpreter.output(0);
 8007818:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800781c:	3b30      	subs	r3, #48	; 0x30
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f004 f81b 	bl	800b85c <_ZN6tflite16MicroInterpreter6outputEj>
 8007826:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800782a:	f103 0304 	add.w	r3, r3, #4
 800782e:	6018      	str	r0, [r3, #0]

			bool is_new_command = false;
 8007830:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007834:	3b31      	subs	r3, #49	; 0x31
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]
			int watchdogCounter = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007840:	f102 0208 	add.w	r2, r2, #8
 8007844:	6013      	str	r3, [r2, #0]
			const char* found_command = nullptr;
 8007846:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800784a:	3b38      	subs	r3, #56	; 0x38
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
			while(!is_new_command && watchdogCounter<20)
 8007850:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007854:	3b31      	subs	r3, #49	; 0x31
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f040 80a3 	bne.w	80079a4 <main+0x734>
 800785e:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007862:	f103 0308 	add.w	r3, r3, #8
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b13      	cmp	r3, #19
 800786a:	f300 809b 	bgt.w	80079a4 <main+0x734>
			{
				watchdogCounter++;
 800786e:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007872:	f103 0308 	add.w	r3, r3, #8
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3301      	adds	r3, #1
 800787a:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 800787e:	f102 0208 	add.w	r2, r2, #8
 8007882:	6013      	str	r3, [r2, #0]
				const int32_t current_time = LatestAudioTimestamp();
 8007884:	f7f9 fc1a 	bl	80010bc <_Z20LatestAudioTimestampv>
 8007888:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800788c:	6018      	str	r0, [r3, #0]

				uint8_t score = 0;
 800788e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007892:	3b39      	subs	r3, #57	; 0x39
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]

				TfLiteStatus process_status = recognizer->ProcessLatestResults(
				output, current_time, &found_command, &score, &is_new_command);
 8007898:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800789c:	3a38      	subs	r2, #56	; 0x38
 800789e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80078a2:	3b31      	subs	r3, #49	; 0x31
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80078aa:	3b39      	subs	r3, #57	; 0x39
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	4613      	mov	r3, r2
 80078b0:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 80078b4:	6812      	ldr	r2, [r2, #0]
 80078b6:	f507 5146 	add.w	r1, r7, #12672	; 0x3180
 80078ba:	f101 0104 	add.w	r1, r1, #4
 80078be:	6809      	ldr	r1, [r1, #0]
 80078c0:	f507 5046 	add.w	r0, r7, #12672	; 0x3180
 80078c4:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 80078c8:	6800      	ldr	r0, [r0, #0]
 80078ca:	f004 ffb3 	bl	800c834 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 80078d4:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80078d8:	7013      	strb	r3, [r2, #0]
				if (process_status != kTfLiteOk)
 80078da:	f507 5345 	add.w	r3, r7, #12608	; 0x3140
 80078de:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01e      	beq.n	8007926 <main+0x6b6>
				{
					error_reporter->Report("RecognizeCommands::ProcessLatestResults() failed");
 80078e8:	497a      	ldr	r1, [pc, #488]	; (8007ad4 <main+0x864>)
 80078ea:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 80078ee:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	f7fb fb72 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
					return -1;
 80078f8:	f04f 34ff 	mov.w	r4, #4294967295
									 &micro_error_reporter);
 80078fc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007900:	3b30      	subs	r3, #48	; 0x30
 8007902:	4618      	mov	r0, r3
 8007904:	f003 fce0 	bl	800b2c8 <_ZN6tflite16MicroInterpreterD1Ev>
  tflite::MicroMutableOpResolver<4> micro_op_resolver;
 8007908:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 800790c:	f103 0308 	add.w	r3, r3, #8
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fd3d 	bl	8008390 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
  tflite::MicroErrorReporter micro_error_reporter;
 8007916:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 800791a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff faa8 	bl	8006e74 <_ZN6tflite18MicroErrorReporterD1Ev>
 8007924:	e0cd      	b.n	8007ac2 <main+0x852>
				}

				HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r Heard: ", 10, 100);
 8007926:	2364      	movs	r3, #100	; 0x64
 8007928:	220a      	movs	r2, #10
 800792a:	496b      	ldr	r1, [pc, #428]	; (8007ad8 <main+0x868>)
 800792c:	486b      	ldr	r0, [pc, #428]	; (8007adc <main+0x86c>)
 800792e:	f00b fcbf 	bl	80132b0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)found_command, 2, 100);
 8007932:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007936:	3b38      	subs	r3, #56	; 0x38
 8007938:	6819      	ldr	r1, [r3, #0]
 800793a:	2364      	movs	r3, #100	; 0x64
 800793c:	2202      	movs	r2, #2
 800793e:	4867      	ldr	r0, [pc, #412]	; (8007adc <main+0x86c>)
 8007940:	f00b fcb6 	bl	80132b0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)"  State:  ", 10, 100);
 8007944:	2364      	movs	r3, #100	; 0x64
 8007946:	220a      	movs	r2, #10
 8007948:	4965      	ldr	r1, [pc, #404]	; (8007ae0 <main+0x870>)
 800794a:	4864      	ldr	r0, [pc, #400]	; (8007adc <main+0x86c>)
 800794c:	f00b fcb0 	bl	80132b0 <HAL_UART_Transmit>
				char buf2[100]="";
 8007950:	f107 0320 	add.w	r3, r7, #32
 8007954:	3b20      	subs	r3, #32
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	3304      	adds	r3, #4
 800795c:	2260      	movs	r2, #96	; 0x60
 800795e:	2100      	movs	r1, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f00c fc61 	bl	8014228 <memset>

				int len = sprintf(buf2, "%d ",carState);
 8007966:	f107 0320 	add.w	r3, r7, #32
 800796a:	3b20      	subs	r3, #32
 800796c:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007970:	f102 021c 	add.w	r2, r2, #28
 8007974:	6812      	ldr	r2, [r2, #0]
 8007976:	495b      	ldr	r1, [pc, #364]	; (8007ae4 <main+0x874>)
 8007978:	4618      	mov	r0, r3
 800797a:	f00d fb03 	bl	8014f84 <siprintf>
 800797e:	f507 5345 	add.w	r3, r7, #12608	; 0x3140
 8007982:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8007986:	6018      	str	r0, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t *)buf2, len, 100);
 8007988:	f507 5345 	add.w	r3, r7, #12608	; 0x3140
 800798c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	b29a      	uxth	r2, r3
 8007994:	f107 0120 	add.w	r1, r7, #32
 8007998:	3920      	subs	r1, #32
 800799a:	2364      	movs	r3, #100	; 0x64
 800799c:	484f      	ldr	r0, [pc, #316]	; (8007adc <main+0x86c>)
 800799e:	f00b fc87 	bl	80132b0 <HAL_UART_Transmit>
			while(!is_new_command && watchdogCounter<20)
 80079a2:	e755      	b.n	8007850 <main+0x5e0>
			}
			int tempState = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 80079aa:	f102 0204 	add.w	r2, r2, #4
 80079ae:	6013      	str	r3, [r2, #0]

			if(!strcmp(found_command,"stop"))
 80079b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80079b4:	3b38      	subs	r3, #56	; 0x38
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	494b      	ldr	r1, [pc, #300]	; (8007ae8 <main+0x878>)
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7f8 fc08 	bl	80001d0 <strcmp>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <main+0x764>
			  tempState =0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 80079cc:	f102 0204 	add.w	r2, r2, #4
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	e034      	b.n	8007a3e <main+0x7ce>
			else if(!strcmp(found_command,"go"))
 80079d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80079d8:	3b38      	subs	r3, #56	; 0x38
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4943      	ldr	r1, [pc, #268]	; (8007aec <main+0x87c>)
 80079de:	4618      	mov	r0, r3
 80079e0:	f7f8 fbf6 	bl	80001d0 <strcmp>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d106      	bne.n	80079f8 <main+0x788>
			  tempState =1;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 80079f0:	f102 0204 	add.w	r2, r2, #4
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	e022      	b.n	8007a3e <main+0x7ce>
			else if(!strcmp(found_command,"left") )
 80079f8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80079fc:	3b38      	subs	r3, #56	; 0x38
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	493b      	ldr	r1, [pc, #236]	; (8007af0 <main+0x880>)
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7f8 fbe4 	bl	80001d0 <strcmp>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <main+0x7ac>
			  tempState =2;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007a14:	f102 0204 	add.w	r2, r2, #4
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	e010      	b.n	8007a3e <main+0x7ce>
			else if(!strcmp(found_command,"right"))
 8007a1c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007a20:	3b38      	subs	r3, #56	; 0x38
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4933      	ldr	r1, [pc, #204]	; (8007af4 <main+0x884>)
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7f8 fbd2 	bl	80001d0 <strcmp>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d105      	bne.n	8007a3e <main+0x7ce>
			  tempState =3;
 8007a32:	2303      	movs	r3, #3
 8007a34:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007a38:	f102 0204 	add.w	r2, r2, #4
 8007a3c:	6013      	str	r3, [r2, #0]

			moveCar(tempState);
 8007a3e:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007a42:	f103 0304 	add.w	r3, r3, #4
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	f7ff fb64 	bl	8007114 <_Z7moveCari>
			if(carState ==2 || carState==3)
 8007a4c:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007a50:	f103 031c 	add.w	r3, r3, #28
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d007      	beq.n	8007a6a <main+0x7fa>
 8007a5a:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007a5e:	f103 031c 	add.w	r3, r3, #28
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	f47f ad71 	bne.w	800754c <main+0x2dc>
			{
				prevCarState = prevCarState==2||prevCarState==3? 0 : prevCarState;
 8007a6a:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007a6e:	f103 0318 	add.w	r3, r3, #24
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d00c      	beq.n	8007a92 <main+0x822>
 8007a78:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007a7c:	f103 0318 	add.w	r3, r3, #24
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d005      	beq.n	8007a92 <main+0x822>
 8007a86:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007a8a:	f103 0318 	add.w	r3, r3, #24
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	e000      	b.n	8007a94 <main+0x824>
 8007a92:	2300      	movs	r3, #0
 8007a94:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007a98:	f102 0218 	add.w	r2, r2, #24
 8007a9c:	6013      	str	r3, [r2, #0]
				carState =  prevCarState;
 8007a9e:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007aa2:	f103 0318 	add.w	r3, r3, #24
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8007aac:	f102 021c 	add.w	r2, r2, #28
 8007ab0:	6013      	str	r3, [r2, #0]

				moveCar(carState);
 8007ab2:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8007ab6:	f103 031c 	add.w	r3, r3, #28
 8007aba:	6818      	ldr	r0, [r3, #0]
 8007abc:	f7ff fb2a 	bl	8007114 <_Z7moveCari>
			}
	   	}
   	}
 8007ac0:	e544      	b.n	800754c <main+0x2dc>
 8007ac2:	4623      	mov	r3, r4
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //}
  /* USER CODE END 3 */
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f507 5747 	add.w	r7, r7, #12736	; 0x31c0
 8007aca:	3724      	adds	r7, #36	; 0x24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd90      	pop	{r4, r7, pc}
 8007ad0:	080177f4 	.word	0x080177f4
 8007ad4:	08017804 	.word	0x08017804
 8007ad8:	08017838 	.word	0x08017838
 8007adc:	200003bc 	.word	0x200003bc
 8007ae0:	08017844 	.word	0x08017844
 8007ae4:	08017850 	.word	0x08017850
 8007ae8:	08017854 	.word	0x08017854
 8007aec:	0801785c 	.word	0x0801785c
 8007af0:	08017860 	.word	0x08017860
 8007af4:	08017868 	.word	0x08017868

08007af8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b0ac      	sub	sp, #176	; 0xb0
 8007afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007afe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007b02:	2244      	movs	r2, #68	; 0x44
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f00c fb8e 	bl	8014228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	609a      	str	r2, [r3, #8]
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b1c:	1d3b      	adds	r3, r7, #4
 8007b1e:	2254      	movs	r2, #84	; 0x54
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f00c fb80 	bl	8014228 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007b28:	f009 ff28 	bl	801197c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007b2c:	4b3f      	ldr	r3, [pc, #252]	; (8007c2c <_Z18SystemClock_Configv+0x134>)
 8007b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b32:	4a3e      	ldr	r2, [pc, #248]	; (8007c2c <_Z18SystemClock_Configv+0x134>)
 8007b34:	f023 0318 	bic.w	r3, r3, #24
 8007b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8007b3c:	2314      	movs	r3, #20
 8007b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007b40:	2301      	movs	r3, #1
 8007b42:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007b50:	2360      	movs	r3, #96	; 0x60
 8007b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b56:	2302      	movs	r3, #2
 8007b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007b62:	2301      	movs	r3, #1
 8007b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8007b68:	2328      	movs	r3, #40	; 0x28
 8007b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007b6e:	2307      	movs	r3, #7
 8007b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007b74:	2302      	movs	r3, #2
 8007b76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007b84:	4618      	mov	r0, r3
 8007b86:	f009 ff6d 	bl	8011a64 <HAL_RCC_OscConfig>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8007b9a:	f000 fa19 	bl	8007fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b9e:	230f      	movs	r3, #15
 8007ba0:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007baa:	2300      	movs	r3, #0
 8007bac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007bb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bb6:	2104      	movs	r1, #4
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f00a fb73 	bl	80122a4 <HAL_RCC_ClockConfig>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf14      	ite	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2300      	moveq	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8007bce:	f000 f9ff 	bl	8007fd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8007bd2:	f244 0303 	movw	r3, #16387	; 0x4003
 8007bd6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8007be0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007be6:	1d3b      	adds	r3, r7, #4
 8007be8:	4618      	mov	r0, r3
 8007bea:	f00a fd5f 	bl	80126ac <HAL_RCCEx_PeriphCLKConfig>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf14      	ite	ne
 8007bf4:	2301      	movne	r3, #1
 8007bf6:	2300      	moveq	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <_Z18SystemClock_Configv+0x10a>
  {
    Error_Handler();
 8007bfe:	f000 f9e7 	bl	8007fd0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007c02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c06:	f009 fed7 	bl	80119b8 <HAL_PWREx_ControlVoltageScaling>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bf14      	ite	ne
 8007c10:	2301      	movne	r3, #1
 8007c12:	2300      	moveq	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <_Z18SystemClock_Configv+0x126>
  {
    Error_Handler();
 8007c1a:	f000 f9d9 	bl	8007fd0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8007c1e:	f00a ff37 	bl	8012a90 <HAL_RCCEx_EnableMSIPLLMode>
}
 8007c22:	bf00      	nop
 8007c24:	37b0      	adds	r7, #176	; 0xb0
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40021000 	.word	0x40021000

08007c30 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007c36:	463b      	mov	r3, r7
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	605a      	str	r2, [r3, #4]
 8007c3e:	609a      	str	r2, [r3, #8]
 8007c40:	60da      	str	r2, [r3, #12]
 8007c42:	611a      	str	r2, [r3, #16]
 8007c44:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8007c46:	4b2e      	ldr	r3, [pc, #184]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c48:	4a2e      	ldr	r2, [pc, #184]	; (8007d04 <_ZL12MX_ADC1_Initv+0xd4>)
 8007c4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007c4c:	4b2c      	ldr	r3, [pc, #176]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007c52:	4b2b      	ldr	r3, [pc, #172]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007c58:	4b29      	ldr	r3, [pc, #164]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007c5e:	4b28      	ldr	r3, [pc, #160]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007c64:	4b26      	ldr	r3, [pc, #152]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c66:	2204      	movs	r2, #4
 8007c68:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007c6a:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007c70:	4b23      	ldr	r3, [pc, #140]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8007c76:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c78:	2201      	movs	r2, #1
 8007c7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007c7c:	4b20      	ldr	r3, [pc, #128]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007c84:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007c8a:	4b1d      	ldr	r3, [pc, #116]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007c90:	4b1b      	ldr	r3, [pc, #108]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007c98:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8007c9e:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007ca6:	4816      	ldr	r0, [pc, #88]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007ca8:	f008 fdf2 	bl	8010890 <HAL_ADC_Init>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bf14      	ite	ne
 8007cb2:	2301      	movne	r3, #1
 8007cb4:	2300      	moveq	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <_ZL12MX_ADC1_Initv+0x90>
  {
    Error_Handler();
 8007cbc:	f000 f988 	bl	8007fd0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8007cc0:	4b11      	ldr	r3, [pc, #68]	; (8007d08 <_ZL12MX_ADC1_Initv+0xd8>)
 8007cc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007cc4:	2306      	movs	r3, #6
 8007cc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007ccc:	237f      	movs	r3, #127	; 0x7f
 8007cce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cd8:	463b      	mov	r3, r7
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4808      	ldr	r0, [pc, #32]	; (8007d00 <_ZL12MX_ADC1_Initv+0xd0>)
 8007cde:	f008 ff1d 	bl	8010b1c <HAL_ADC_ConfigChannel>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bf14      	ite	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	2300      	moveq	r3, #0
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8007cf2:	f000 f96d 	bl	8007fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007cf6:	bf00      	nop
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	2000021c 	.word	0x2000021c
 8007d04:	50040000 	.word	0x50040000
 8007d08:	32601000 	.word	0x32601000

08007d0c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007d10:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <_ZL11MX_CRC_Initv+0x48>)
 8007d12:	4a11      	ldr	r2, [pc, #68]	; (8007d58 <_ZL11MX_CRC_Initv+0x4c>)
 8007d14:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007d16:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <_ZL11MX_CRC_Initv+0x48>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <_ZL11MX_CRC_Initv+0x48>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007d22:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <_ZL11MX_CRC_Initv+0x48>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <_ZL11MX_CRC_Initv+0x48>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007d2e:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <_ZL11MX_CRC_Initv+0x48>)
 8007d30:	2201      	movs	r2, #1
 8007d32:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007d34:	4807      	ldr	r0, [pc, #28]	; (8007d54 <_ZL11MX_CRC_Initv+0x48>)
 8007d36:	f009 fbb5 	bl	80114a4 <HAL_CRC_Init>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bf14      	ite	ne
 8007d40:	2301      	movne	r3, #1
 8007d42:	2300      	moveq	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8007d4a:	f000 f941 	bl	8007fd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007d4e:	bf00      	nop
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20000280 	.word	0x20000280
 8007d58:	40023000 	.word	0x40023000

08007d5c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d62:	f107 0310 	add.w	r3, r7, #16
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	605a      	str	r2, [r3, #4]
 8007d6c:	609a      	str	r2, [r3, #8]
 8007d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d70:	1d3b      	adds	r3, r7, #4
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	605a      	str	r2, [r3, #4]
 8007d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007d7a:	4b27      	ldr	r3, [pc, #156]	; (8007e18 <_ZL12MX_TIM1_Initv+0xbc>)
 8007d7c:	4a27      	ldr	r2, [pc, #156]	; (8007e1c <_ZL12MX_TIM1_Initv+0xc0>)
 8007d7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 499;
 8007d80:	4b25      	ldr	r3, [pc, #148]	; (8007e18 <_ZL12MX_TIM1_Initv+0xbc>)
 8007d82:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007d86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d88:	4b23      	ldr	r3, [pc, #140]	; (8007e18 <_ZL12MX_TIM1_Initv+0xbc>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19;
 8007d8e:	4b22      	ldr	r3, [pc, #136]	; (8007e18 <_ZL12MX_TIM1_Initv+0xbc>)
 8007d90:	2213      	movs	r2, #19
 8007d92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d94:	4b20      	ldr	r3, [pc, #128]	; (8007e18 <_ZL12MX_TIM1_Initv+0xbc>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007d9a:	4b1f      	ldr	r3, [pc, #124]	; (8007e18 <_ZL12MX_TIM1_Initv+0xbc>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007da0:	4b1d      	ldr	r3, [pc, #116]	; (8007e18 <_ZL12MX_TIM1_Initv+0xbc>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007da6:	481c      	ldr	r0, [pc, #112]	; (8007e18 <_ZL12MX_TIM1_Initv+0xbc>)
 8007da8:	f00a ff72 	bl	8012c90 <HAL_TIM_Base_Init>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bf14      	ite	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	2300      	moveq	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8007dbc:	f000 f908 	bl	8007fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007dc6:	f107 0310 	add.w	r3, r7, #16
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4812      	ldr	r0, [pc, #72]	; (8007e18 <_ZL12MX_TIM1_Initv+0xbc>)
 8007dce:	f00b f803 	bl	8012dd8 <HAL_TIM_ConfigClockSource>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bf14      	ite	ne
 8007dd8:	2301      	movne	r3, #1
 8007dda:	2300      	moveq	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8007de2:	f000 f8f5 	bl	8007fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007de6:	2300      	movs	r3, #0
 8007de8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007df2:	1d3b      	adds	r3, r7, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4808      	ldr	r0, [pc, #32]	; (8007e18 <_ZL12MX_TIM1_Initv+0xbc>)
 8007df8:	f00b f9a6 	bl	8013148 <HAL_TIMEx_MasterConfigSynchronization>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bf14      	ite	ne
 8007e02:	2301      	movne	r3, #1
 8007e04:	2300      	moveq	r3, #0
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8007e0c:	f000 f8e0 	bl	8007fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007e10:	bf00      	nop
 8007e12:	3720      	adds	r7, #32
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	200002a4 	.word	0x200002a4
 8007e1c:	40012c00 	.word	0x40012c00

08007e20 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007e24:	4b12      	ldr	r3, [pc, #72]	; (8007e70 <_ZL13MX_TIM16_Initv+0x50>)
 8007e26:	4a13      	ldr	r2, [pc, #76]	; (8007e74 <_ZL13MX_TIM16_Initv+0x54>)
 8007e28:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8007e2a:	4b11      	ldr	r3, [pc, #68]	; (8007e70 <_ZL13MX_TIM16_Initv+0x50>)
 8007e2c:	224f      	movs	r2, #79	; 0x4f
 8007e2e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e30:	4b0f      	ldr	r3, [pc, #60]	; (8007e70 <_ZL13MX_TIM16_Initv+0x50>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8007e36:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <_ZL13MX_TIM16_Initv+0x50>)
 8007e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e3c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <_ZL13MX_TIM16_Initv+0x50>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007e44:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <_ZL13MX_TIM16_Initv+0x50>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e4a:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <_ZL13MX_TIM16_Initv+0x50>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007e50:	4807      	ldr	r0, [pc, #28]	; (8007e70 <_ZL13MX_TIM16_Initv+0x50>)
 8007e52:	f00a ff1d 	bl	8012c90 <HAL_TIM_Base_Init>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bf14      	ite	ne
 8007e5c:	2301      	movne	r3, #1
 8007e5e:	2300      	moveq	r3, #0
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 8007e66:	f000 f8b3 	bl	8007fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8007e6a:	bf00      	nop
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	200002f0 	.word	0x200002f0
 8007e74:	40014400 	.word	0x40014400

08007e78 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007e7c:	4b16      	ldr	r3, [pc, #88]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007e7e:	4a17      	ldr	r2, [pc, #92]	; (8007edc <_ZL19MX_USART1_UART_Initv+0x64>)
 8007e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8007e82:	4b15      	ldr	r3, [pc, #84]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007e84:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8007e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007e8a:	4b13      	ldr	r3, [pc, #76]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007e90:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007e96:	4b10      	ldr	r3, [pc, #64]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007e9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007e9e:	220c      	movs	r2, #12
 8007ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ea8:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007eae:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007eba:	4807      	ldr	r0, [pc, #28]	; (8007ed8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8007ebc:	f00b f9aa 	bl	8013214 <HAL_UART_Init>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	bf14      	ite	ne
 8007ec6:	2301      	movne	r3, #1
 8007ec8:	2300      	moveq	r3, #0
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8007ed0:	f000 f87e 	bl	8007fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007ed4:	bf00      	nop
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	2000033c 	.word	0x2000033c
 8007edc:	40013800 	.word	0x40013800

08007ee0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007ee4:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007ee6:	4a17      	ldr	r2, [pc, #92]	; (8007f44 <_ZL19MX_USART2_UART_Initv+0x64>)
 8007ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007eea:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007ef2:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007ef8:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007efe:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007f04:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007f06:	220c      	movs	r2, #12
 8007f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f0a:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f16:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f1c:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007f22:	4807      	ldr	r0, [pc, #28]	; (8007f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8007f24:	f00b f976 	bl	8013214 <HAL_UART_Init>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bf14      	ite	ne
 8007f2e:	2301      	movne	r3, #1
 8007f30:	2300      	moveq	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8007f38:	f000 f84a 	bl	8007fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007f3c:	bf00      	nop
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	200003bc 	.word	0x200003bc
 8007f44:	40004400 	.word	0x40004400

08007f48 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f4e:	f107 030c 	add.w	r3, r7, #12
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	605a      	str	r2, [r3, #4]
 8007f58:	609a      	str	r2, [r3, #8]
 8007f5a:	60da      	str	r2, [r3, #12]
 8007f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f5e:	4b1a      	ldr	r3, [pc, #104]	; (8007fc8 <_ZL12MX_GPIO_Initv+0x80>)
 8007f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f62:	4a19      	ldr	r2, [pc, #100]	; (8007fc8 <_ZL12MX_GPIO_Initv+0x80>)
 8007f64:	f043 0304 	orr.w	r3, r3, #4
 8007f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f6a:	4b17      	ldr	r3, [pc, #92]	; (8007fc8 <_ZL12MX_GPIO_Initv+0x80>)
 8007f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	60bb      	str	r3, [r7, #8]
 8007f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <_ZL12MX_GPIO_Initv+0x80>)
 8007f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f7a:	4a13      	ldr	r2, [pc, #76]	; (8007fc8 <_ZL12MX_GPIO_Initv+0x80>)
 8007f7c:	f043 0301 	orr.w	r3, r3, #1
 8007f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f82:	4b11      	ldr	r3, [pc, #68]	; (8007fc8 <_ZL12MX_GPIO_Initv+0x80>)
 8007f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	607b      	str	r3, [r7, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f8e:	4b0e      	ldr	r3, [pc, #56]	; (8007fc8 <_ZL12MX_GPIO_Initv+0x80>)
 8007f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f92:	4a0d      	ldr	r2, [pc, #52]	; (8007fc8 <_ZL12MX_GPIO_Initv+0x80>)
 8007f94:	f043 0302 	orr.w	r3, r3, #2
 8007f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f9a:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <_ZL12MX_GPIO_Initv+0x80>)
 8007f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007fa6:	2320      	movs	r3, #32
 8007fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007faa:	2300      	movs	r3, #0
 8007fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fb2:	f107 030c 	add.w	r3, r7, #12
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4804      	ldr	r0, [pc, #16]	; (8007fcc <_ZL12MX_GPIO_Initv+0x84>)
 8007fba:	f009 fb5d 	bl	8011678 <HAL_GPIO_Init>

}
 8007fbe:	bf00      	nop
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	40021000 	.word	0x40021000
 8007fcc:	48000400 	.word	0x48000400

08007fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007fd4:	bf00      	nop
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b086      	sub	sp, #24
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8007fec:	897b      	ldrh	r3, [r7, #10]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f7fb f874 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007ffa:	8afb      	ldrh	r3, [r7, #22]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d007      	beq.n	8008010 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	8afb      	ldrh	r3, [r7, #22]
 8008004:	4413      	add	r3, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f7fb fd5b 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800800c:	4603      	mov	r3, r0
 800800e:	e000      	b.n	8008012 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8008010:	687b      	ldr	r3, [r7, #4]
  }
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f8ae 	bl	8008184 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8008028:	4603      	mov	r3, r0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4618      	mov	r0, r3
 800803e:	f000 f8b3 	bl	80081a8 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	4a04      	ldr	r2, [pc, #16]	; (8008068 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	08019f68 	.word	0x08019f68

0800806c <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff ffe8 	bl	800804c <_ZN6tflite10OpResolverC1Ev>
 800807c:	4a03      	ldr	r2, [pc, #12]	; (800808c <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	08019f40 	.word	0x08019f40

08008090 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff ffe5 	bl	800806c <_ZN6tflite15MicroOpResolverC1Ev>
 80080a2:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE+0x3c>)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	08019f18 	.word	0x08019f18

080080d0 <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv>:
  TfLiteStatus AddDepthwiseConv2D() {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08a      	sub	sp, #40	; 0x28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
 80080d8:	f107 0308 	add.w	r3, r7, #8
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fa fba9 	bl	8002834 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 80080e2:	f107 0208 	add.w	r2, r7, #8
 80080e6:	4b05      	ldr	r3, [pc, #20]	; (80080fc <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv+0x2c>)
 80080e8:	2104      	movs	r1, #4
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f86a 	bl	80081c4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80080f0:	4603      	mov	r3, r0
  }
 80080f2:	4618      	mov	r0, r3
 80080f4:	3728      	adds	r7, #40	; 0x28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	08003639 	.word	0x08003639

08008100 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration>:
  TfLiteStatus AddFullyConnected(
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
                      ParseFullyConnected);
 800810a:	4b05      	ldr	r3, [pc, #20]	; (8008120 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration+0x20>)
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	2109      	movs	r1, #9
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f857 	bl	80081c4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8008116:	4603      	mov	r3, r0
  }
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	08003791 	.word	0x08003791

08008124 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6,
                      tflite::ops::micro::Register_RELU6(), ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 8008124:	b580      	push	{r7, lr}
 8008126:	b08a      	sub	sp, #40	; 0x28
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 800812c:	f107 0308 	add.w	r3, r7, #8
 8008130:	4618      	mov	r0, r3
 8008132:	f004 ff59 	bl	800cfe8 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 8008136:	f107 0208 	add.w	r2, r7, #8
 800813a:	4b05      	ldr	r3, [pc, #20]	; (8008150 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv+0x2c>)
 800813c:	2116      	movs	r1, #22
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f840 	bl	80081c4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8008144:	4603      	mov	r3, r0
  }
 8008146:	4618      	mov	r0, r3
 8008148:	3728      	adds	r7, #40	; 0x28
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	080038cd 	.word	0x080038cd

08008154 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxEv>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax() {
 8008154:	b580      	push	{r7, lr}
 8008156:	b08a      	sub	sp, #40	; 0x28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_SOFTMAX, Register_SOFTMAX(),
 800815c:	f107 0308 	add.w	r3, r7, #8
 8008160:	4618      	mov	r0, r3
 8008162:	f006 fb7d 	bl	800e860 <_ZN6tflite16Register_SOFTMAXEv>
                      ParseSoftmax);
 8008166:	f107 0208 	add.w	r2, r7, #8
 800816a:	4b05      	ldr	r3, [pc, #20]	; (8008180 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxEv+0x2c>)
 800816c:	2119      	movs	r1, #25
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f828 	bl	80081c4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8008174:	4603      	mov	r3, r0
  }
 8008176:	4618      	mov	r0, r3
 8008178:	3728      	adds	r7, #40	; 0x28
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	080039cd 	.word	0x080039cd

08008184 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  EndianCheck();
 800818c:	f7fe fe94 	bl	8006eb8 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4618      	mov	r0, r3
 8008196:	f7fb fc7b 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800819a:	4602      	mov	r2, r0
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4413      	add	r3, r2
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      _Vector_base()
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 f894 	bl	80082e0 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 80081c4:	b5b0      	push	{r4, r5, r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	607a      	str	r2, [r7, #4]
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	460b      	mov	r3, r1
 80081d2:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 80081d4:	7afb      	ldrb	r3, [r7, #11]
 80081d6:	2b20      	cmp	r3, #32
 80081d8:	d10d      	bne.n	80081f6 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d006      	beq.n	80081f2 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081ea:	493a      	ldr	r1, [pc, #232]	; (80082d4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fa fef5 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e06a      	b.n	80082cc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (FindOp(op) != nullptr) {
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3314      	adds	r3, #20
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	7afa      	ldrb	r2, [r7, #11]
 8008200:	4611      	mov	r1, r2
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	4798      	blx	r3
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	bf14      	ite	ne
 800820c:	2301      	movne	r3, #1
 800820e:	2300      	moveq	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00e      	beq.n	8008234 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d007      	beq.n	8008230 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008226:	7afa      	ldrb	r2, [r7, #11]
 8008228:	492b      	ldr	r1, [pc, #172]	; (80082d8 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 800822a:	4618      	mov	r0, r3
 800822c:	f7fa fed6 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8008230:	2301      	movs	r3, #1
 8008232:	e04b      	b.n	80082cc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (registrations_len_ >= tOpCount) {
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800823a:	2b03      	cmp	r3, #3
 800823c:	d90e      	bls.n	800825c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800824e:	7afa      	ldrb	r2, [r7, #11]
 8008250:	2304      	movs	r3, #4
 8008252:	4922      	ldr	r1, [pc, #136]	; (80082dc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 8008254:	f7fa fec2 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8008258:	2301      	movs	r3, #1
 800825a:	e037      	b.n	80082cc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    registrations_[registrations_len_] = registration;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	015b      	lsls	r3, r3, #5
 8008266:	4413      	add	r3, r2
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	1d1c      	adds	r4, r3, #4
 800826c:	4615      	mov	r5, r2
 800826e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008272:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008276:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008280:	7afa      	ldrb	r2, [r7, #11]
 8008282:	68f9      	ldr	r1, [r7, #12]
 8008284:	015b      	lsls	r3, r3, #5
 8008286:	440b      	add	r3, r1
 8008288:	3318      	adds	r3, #24
 800828a:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    builtin_codes_[num_buitin_ops_] = op;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	7afa      	ldrb	r2, [r7, #11]
 80082a6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    builtin_parsers_[num_buitin_ops_] = parser;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	3322      	adds	r3, #34	; 0x22
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return kTfLiteOk;
 80082ca:	2300      	movs	r3, #0
  }
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bdb0      	pop	{r4, r5, r7, pc}
 80082d4:	08017870 	.word	0x08017870
 80082d8:	080178b8 	.word	0x080178b8
 80082dc:	08017908 	.word	0x08017908

080082e0 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f839 	bl	8008360 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	605a      	str	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	609a      	str	r2, [r3, #8]
	{ }
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	2b20      	cmp	r3, #32
 800831a:	d101      	bne.n	8008320 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x16>
 800831c:	2300      	movs	r3, #0
 800831e:	e019      	b.n	8008354 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8008320:	2300      	movs	r3, #0
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	429a      	cmp	r2, r3
 800832e:	d210      	bcs.n	8008352 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	015b      	lsls	r3, r3, #5
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	695a      	ldr	r2, [r3, #20]
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	429a      	cmp	r2, r3
 8008344:	d101      	bne.n	800834a <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	e004      	b.n	8008354 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	e7e8      	b.n	8008324 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8008352:	2300      	movs	r3, #0
  }
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f805 	bl	8008378 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4618      	mov	r0, r3
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
	...

08008390 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	4a05      	ldr	r2, [pc, #20]	; (80083b0 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev+0x20>)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fe11 	bl	8006fc8 <_ZN6tflite15MicroOpResolverD1Ev>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	08019f18 	.word	0x08019f18

080083b4 <_ZN6tflite22MicroMutableOpResolverILj4EED0Ev>:
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff ffe7 	bl	8008390 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
 80083c2:	21a4      	movs	r1, #164	; 0xa4
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f00b fb80 	bl	8013aca <_ZdlPvj>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d218      	bcs.n	8008420 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	015b      	lsls	r3, r3, #5
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	4413      	add	r3, r2
 80083f6:	3304      	adds	r3, #4
 80083f8:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	2b20      	cmp	r3, #32
 8008400:	d10a      	bne.n	8008418 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	4618      	mov	r0, r3
 800840a:	f7f7 fee1 	bl	80001d0 <strcmp>
 800840e:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
        return &registration;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	e004      	b.n	8008422 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	e7e0      	b.n	80083e2 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0xe>
    return nullptr;
 8008420:	2300      	movs	r3, #0
  }
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800843c:	2b04      	cmp	r3, #4
 800843e:	d901      	bls.n	8008444 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 8008440:	f00b fe06 	bl	8014050 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	429a      	cmp	r2, r3
 8008452:	d212      	bcs.n	800847a <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4413      	add	r3, r2
 800845a:	3388      	adds	r3, #136	; 0x88
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	429a      	cmp	r2, r3
 8008462:	d106      	bne.n	8008472 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x48>
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3322      	adds	r3, #34	; 0x22
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	e004      	b.n	800847c <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x52>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e7e6      	b.n	8008448 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 800847a:	2300      	movs	r3, #0
  }
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2104      	movs	r1, #4
 8008490:	4618      	mov	r0, r3
 8008492:	f7fb fb8d 	bl	8003bb0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8008496:	4603      	mov	r3, r0
  }
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	2106      	movs	r1, #6
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fb fb8e 	bl	8003bd0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80084b4:	4603      	mov	r3, r0
 80084b6:	b2db      	uxtb	r3, r3
  }
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensor_ctypes.h"
#include "schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	1e5a      	subs	r2, r3, #1
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 80084e2:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 80084e4:	68bb      	ldr	r3, [r7, #8]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 80084f2:	b480      	push	{r7}
 80084f4:	b085      	sub	sp, #20
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	fbb2 f3f3 	udiv	r3, r2, r3
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 800850e:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8008510:	68bb      	ldr	r3, [r7, #8]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	1e5a      	subs	r2, r3, #1
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	fbb2 f2f3 	udiv	r2, r2, r3
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	fb02 f303 	mul.w	r3, r2, r3
 800853c:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800853e:	68fb      	ldr	r3, [r7, #12]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	6039      	str	r1, [r7, #0]
 8008556:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	3b01      	subs	r3, #1
 800855c:	2b0c      	cmp	r3, #12
 800855e:	d845      	bhi.n	80085ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa0>
 8008560:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8008562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008566:	bf00      	nop
 8008568:	0800859d 	.word	0x0800859d
 800856c:	080085ad 	.word	0x080085ad
 8008570:	080085b5 	.word	0x080085b5
 8008574:	080085c5 	.word	0x080085c5
 8008578:	080085ed 	.word	0x080085ed
 800857c:	080085d5 	.word	0x080085d5
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085dd 	.word	0x080085dd
 8008588:	080085bd 	.word	0x080085bd
 800858c:	080085ed 	.word	0x080085ed
 8008590:	080085ed 	.word	0x080085ed
 8008594:	080085e5 	.word	0x080085e5
 8008598:	080085cd 	.word	0x080085cd
    case kTfLiteFloat32:
      *size = sizeof(float);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2204      	movs	r2, #4
 80085a0:	601a      	str	r2, [r3, #0]
      break;
 80085a2:	e025      	b.n	80085f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2202      	movs	r2, #2
 80085a8:	601a      	str	r2, [r3, #0]
      break;
 80085aa:	e021      	b.n	80085f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2204      	movs	r2, #4
 80085b0:	601a      	str	r2, [r3, #0]
      break;
 80085b2:	e01d      	b.n	80085f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2201      	movs	r2, #1
 80085b8:	601a      	str	r2, [r3, #0]
      break;
 80085ba:	e019      	b.n	80085f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2201      	movs	r2, #1
 80085c0:	601a      	str	r2, [r3, #0]
      break;
 80085c2:	e015      	b.n	80085f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2208      	movs	r2, #8
 80085c8:	601a      	str	r2, [r3, #0]
      break;
 80085ca:	e011      	b.n	80085f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2208      	movs	r2, #8
 80085d0:	601a      	str	r2, [r3, #0]
      break;
 80085d2:	e00d      	b.n	80085f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteBool:
      *size = sizeof(bool);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2201      	movs	r2, #1
 80085d8:	601a      	str	r2, [r3, #0]
      break;
 80085da:	e009      	b.n	80085f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2208      	movs	r2, #8
 80085e0:	601a      	str	r2, [r3, #0]
      break;
 80085e2:	e005      	b.n	80085f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2210      	movs	r2, #16
 80085e8:	601a      	str	r2, [r3, #0]
      break;
 80085ea:	e001      	b.n	80085f0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    default:
      return kTfLiteError;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e000      	b.n	80085f2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa6>
  }
  return kTfLiteOk;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop

08008600 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800860e:	2301      	movs	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff ff36 	bl	8008484 <_ZNK6tflite6Tensor5shapeEv>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	bf14      	ite	ne
 800861e:	2301      	movne	r3, #1
 8008620:	2300      	moveq	r3, #0
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d022      	beq.n	800866e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8008628:	2300      	movs	r3, #0
 800862a:	61bb      	str	r3, [r7, #24]
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff ff29 	bl	8008484 <_ZNK6tflite6Tensor5shapeEv>
 8008632:	4603      	mov	r3, r0
 8008634:	4618      	mov	r0, r3
 8008636:	f000 f884 	bl	8008742 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800863a:	4602      	mov	r2, r0
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	4293      	cmp	r3, r2
 8008640:	bf34      	ite	cc
 8008642:	2301      	movcc	r3, #1
 8008644:	2300      	movcs	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d010      	beq.n	800866e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7ff ff19 	bl	8008484 <_ZNK6tflite6Tensor5shapeEv>
 8008652:	4603      	mov	r3, r0
 8008654:	69b9      	ldr	r1, [r7, #24]
 8008656:	4618      	mov	r0, r3
 8008658:	f7fb fb0a 	bl	8003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800865c:	4602      	mov	r2, r0
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	fb02 f303 	mul.w	r3, r2, r3
 8008664:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	3301      	adds	r3, #1
 800866a:	61bb      	str	r3, [r7, #24]
 800866c:	e7de      	b.n	800862c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f7ff ff16 	bl	80084a0 <_ZNK6tflite6Tensor4typeEv>
 8008674:	4603      	mov	r3, r0
 8008676:	4618      	mov	r0, r3
 8008678:	f107 0315 	add.w	r3, r7, #21
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	4619      	mov	r1, r3
 8008680:	f7fa ff60 	bl	8003544 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8008684:	4603      	mov	r3, r0
 8008686:	75fb      	strb	r3, [r7, #23]
 8008688:	7dfb      	ldrb	r3, [r7, #23]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	e013      	b.n	80086ba <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8008692:	7d7b      	ldrb	r3, [r7, #21]
 8008694:	6879      	ldr	r1, [r7, #4]
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff ff58 	bl	800854c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800869c:	4603      	mov	r3, r0
 800869e:	75bb      	strb	r3, [r7, #22]
 80086a0:	7dbb      	ldrb	r3, [r7, #22]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 80086a6:	7dbb      	ldrb	r3, [r7, #22]
 80086a8:	e007      	b.n	80086ba <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	fb02 f203 	mul.w	r2, r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3720      	adds	r7, #32
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b086      	sub	sp, #24
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 80086d2:	f00b fcbd 	bl	8014050 <abort>

  int element_count = 1;
 80086d6:	2301      	movs	r3, #1
 80086d8:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d015      	beq.n	800870e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 80086e2:	2300      	movs	r3, #0
 80086e4:	613b      	str	r3, [r7, #16]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	da0d      	bge.n	800870e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	fb02 f303 	mul.w	r3, r2, r3
 8008704:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	3301      	adds	r3, #1
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	e7eb      	b.n	80086e6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	7a1b      	ldrb	r3, [r3, #8]
 8008712:	f107 0208 	add.w	r2, r7, #8
 8008716:	4611      	mov	r1, r2
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff ff17 	bl	800854c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800871e:	4603      	mov	r3, r0
 8008720:	73fb      	strb	r3, [r7, #15]
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	e006      	b.n	800873a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	fb02 f203 	mul.w	r2, r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fb fa82 	bl	8003c54 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008750:	4603      	mov	r3, r0
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fe1f 	bl	800a3a8 <_ZNK11flatbuffers6VectorIcE4DataEv>
 800876a:	4603      	mov	r3, r0
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8008774:	b480      	push	{r7}
 8008776:	af00      	add	r7, sp, #0
  return names;
 8008778:	4b02      	ldr	r3, [pc, #8]	; (8008784 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800877a:	4618      	mov	r0, r3
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	08019fb0 	.word	0x08019fb0

08008788 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_RFFT2D))
 8008792:	2300      	movs	r3, #0
 8008794:	72bb      	strb	r3, [r7, #10]
 8008796:	2383      	movs	r3, #131	; 0x83
 8008798:	72fb      	strb	r3, [r7, #11]
 800879a:	f107 020b 	add.w	r2, r7, #11
 800879e:	f107 010a 	add.w	r1, r7, #10
 80087a2:	1dfb      	adds	r3, r7, #7
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 fe0b 	bl	800a3c0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
    return "";
 80087b0:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 80087b2:	e008      	b.n	80087c6 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 80087b8:	f7ff ffdc 	bl	8008774 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 80087bc:	4602      	mov	r2, r0
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	681b      	ldr	r3, [r3, #0]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	08017f70 	.word	0x08017f70

080087d4 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2108      	movs	r1, #8
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 fe18 	bl	800a416 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 80087e6:	4603      	mov	r3, r0
  }
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	210a      	movs	r1, #10
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fe1a 	bl	800a436 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8008802:	4603      	mov	r3, r0
  }
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	2110      	movs	r1, #16
 800881a:	4618      	mov	r0, r3
 800881c:	f7fb f9aa 	bl	8003b74 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008820:	4603      	mov	r3, r0
  }
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	2108      	movs	r1, #8
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff fbd0 	bl	8007fde <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800883e:	4603      	mov	r3, r0
  }
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	210c      	movs	r1, #12
 8008854:	4618      	mov	r0, r3
 8008856:	f001 fe0e 	bl	800a476 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800885a:	4603      	mov	r3, r0
  }
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	210e      	movs	r1, #14
 8008872:	4618      	mov	r0, r3
 8008874:	f7fb f94f 	bl	8003b16 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	bf14      	ite	ne
 800887e:	2301      	movne	r3, #1
 8008880:	2300      	moveq	r3, #0
 8008882:	b2db      	uxtb	r3, r3
  }
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	2104      	movs	r1, #4
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff fb9f 	bl	8007fde <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80088a0:	4603      	mov	r3, r0
  }
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b082      	sub	sp, #8
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2106      	movs	r1, #6
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fb f97a 	bl	8003bb0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80088bc:	4603      	mov	r3, r0
  }
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2108      	movs	r1, #8
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fb f96c 	bl	8003bb0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80088d8:	4603      	mov	r3, r0
  }
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	210e      	movs	r1, #14
 80088ee:	4618      	mov	r0, r3
 80088f0:	f001 fd81 	bl	800a3f6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80088f4:	4603      	mov	r3, r0
  }
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2104      	movs	r1, #4
 800890a:	4618      	mov	r0, r3
 800890c:	f001 fdc3 	bl	800a496 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8008910:	4603      	mov	r3, r0
  }
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2106      	movs	r1, #6
 8008926:	4618      	mov	r0, r3
 8008928:	f7fb f942 	bl	8003bb0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800892c:	4603      	mov	r3, r0
  }
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2108      	movs	r1, #8
 8008942:	4618      	mov	r0, r3
 8008944:	f7fb f934 	bl	8003bb0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8008948:	4603      	mov	r3, r0
  }
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	210a      	movs	r1, #10
 800895e:	4618      	mov	r0, r3
 8008960:	f001 fda9 	bl	800a4b6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8008964:	4603      	mov	r3, r0
  }
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2104      	movs	r1, #4
 800897a:	4618      	mov	r0, r3
 800897c:	f001 fd3b 	bl	800a3f6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8008980:	4603      	mov	r3, r0
  }
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2104      	movs	r1, #4
 8008996:	4618      	mov	r0, r3
 8008998:	f001 fd5d 	bl	800a456 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800899c:	4603      	mov	r3, r0
  }
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	2106      	movs	r1, #6
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff fb12 	bl	8007fde <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80089ba:	4603      	mov	r3, r0
  }
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2106      	movs	r1, #6
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fd80 	bl	800a4d6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 80089d6:	4603      	mov	r3, r0
  }
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2108      	movs	r1, #8
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 fd82 	bl	800a4f6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 80089f2:	4603      	mov	r3, r0
  }
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	210c      	movs	r1, #12
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fd84 	bl	800a516 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8008a0e:	4603      	mov	r3, r0
  }
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2110      	movs	r1, #16
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 fd86 	bl	800a536 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8008a2a:	4603      	mov	r3, r0
  }
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	4a04      	ldr	r2, [pc, #16]	; (8008a50 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	0801a240 	.word	0x0801a240

08008a54 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff ffe9 	bl	8008a34 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8008a62:	2104      	movs	r1, #4
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f00b f830 	bl	8013aca <_ZdlPvj>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	4a04      	ldr	r2, [pc, #16]	; (8008a90 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	0801a240 	.word	0x0801a240

08008a94 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff ffe7 	bl	8008a74 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 8008aa6:	4a05      	ldr	r2, [pc, #20]	; (8008abc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	605a      	str	r2, [r3, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	0801a1e8 	.word	0x0801a1e8

08008ac0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6858      	ldr	r0, [r3, #4]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	330c      	adds	r3, #12
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	4798      	blx	r3
 8008ae0:	4603      	mov	r3, r0
  }
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	605a      	str	r2, [r3, #4]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	609a      	str	r2, [r3, #8]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	60da      	str	r2, [r3, #12]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b09a      	sub	sp, #104	; 0x68
 8008b38:	af02      	add	r7, sp, #8
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
 8008b40:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 8008b48:	f00b fa82 	bl	8014050 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d267      	bcs.n	8008c2a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6819      	ldr	r1, [r3, #0]
 8008b5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b60:	4613      	mov	r3, r2
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	4413      	add	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	440b      	add	r3, r1
 8008b6a:	643b      	str	r3, [r7, #64]	; 0x40
    current->output_ptr = &(eval_tensors[i].data.data);
 8008b6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b6e:	4613      	mov	r3, r2
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	461a      	mov	r2, r3
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b80:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 8008b82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b84:	4613      	mov	r3, r2
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	4413      	add	r3, r2
 8008b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b94:	4611      	mov	r1, r2
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff fd93 	bl	80086c2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ba2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 8008baa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bae:	e170      	b.n	8008e92 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35e>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 8008bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb6:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 8008bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bba:	f04f 32ff 	mov.w	r2, #4294967295
 8008bbe:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8008bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	461a      	mov	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	4413      	add	r3, r2
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d113      	bne.n	8008bfe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 8008bd6:	68b8      	ldr	r0, [r7, #8]
 8008bd8:	f7ff fe91 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 fd41 	bl	800a668 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8008be6:	4603      	mov	r3, r0
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7ff fe3b 	bl	8008864 <_ZNK6tflite6Tensor11is_variableEv>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f083 0301 	eor.w	r3, r3, #1
 8008bf4:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	e000      	b.n	8008c00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 8008bfe:	2200      	movs	r2, #0
 8008c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c02:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d007      	beq.n	8008c1a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 8008c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	4413      	add	r3, r2
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c16:	611a      	str	r2, [r3, #16]
 8008c18:	e003      	b.n	8008c22 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 8008c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c20:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 8008c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c24:	3301      	adds	r3, #1
 8008c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c28:	e792      	b.n	8008b50 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c2e:	68b8      	ldr	r0, [r7, #8]
 8008c30:	f7ff fe73 	bl	800891a <_ZNK6tflite8SubGraph6inputsEv>
 8008c34:	4603      	mov	r3, r0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fb f80c 	bl	8003c54 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c40:	4293      	cmp	r3, r2
 8008c42:	bf34      	ite	cc
 8008c44:	2301      	movcc	r3, #1
 8008c46:	2300      	movcs	r3, #0
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d018      	beq.n	8008c80 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x14c>
    const int tensor_index = subgraph->inputs()->Get(i);
 8008c4e:	68b8      	ldr	r0, [r7, #8]
 8008c50:	f7ff fe63 	bl	800891a <_ZNK6tflite8SubGraph6inputsEv>
 8008c54:	4603      	mov	r3, r0
 8008c56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fb f809 	bl	8003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008c5e:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4613      	mov	r3, r2
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	4413      	add	r3, r2
 8008c6c:	00db      	lsls	r3, r3, #3
 8008c6e:	440b      	add	r3, r1
 8008c70:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2200      	movs	r2, #0
 8008c76:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8008c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c7e:	e7d6      	b.n	8008c2e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xfa>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8008c80:	2300      	movs	r3, #0
 8008c82:	657b      	str	r3, [r7, #84]	; 0x54
 8008c84:	68b8      	ldr	r0, [r7, #8]
 8008c86:	f7ff fe56 	bl	8008936 <_ZNK6tflite8SubGraph7outputsEv>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fa ffe1 	bl	8003c54 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008c92:	4602      	mov	r2, r0
 8008c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c96:	4293      	cmp	r3, r2
 8008c98:	bf34      	ite	cc
 8008c9a:	2301      	movcc	r3, #1
 8008c9c:	2300      	movcs	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d021      	beq.n	8008ce8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
    const int tensor_index = subgraph->outputs()->Get(i);
 8008ca4:	68b8      	ldr	r0, [r7, #8]
 8008ca6:	f7ff fe46 	bl	8008936 <_ZNK6tflite8SubGraph7outputsEv>
 8008caa:	4603      	mov	r3, r0
 8008cac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fa ffde 	bl	8003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008cb4:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6819      	ldr	r1, [r3, #0]
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	4413      	add	r3, r2
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	440b      	add	r3, r1
 8008cc6:	61bb      	str	r3, [r7, #24]
    current->last_used = subgraph->operators()->size() - 1;
 8008cc8:	68b8      	ldr	r0, [r7, #8]
 8008cca:	f7ff fe42 	bl	8008952 <_ZNK6tflite8SubGraph9operatorsEv>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f001 fcef 	bl	800a6b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	461a      	mov	r2, r3
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8008ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ce6:	e7cd      	b.n	8008c84 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x150>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8008ce8:	68b8      	ldr	r0, [r7, #8]
 8008cea:	f7ff fe32 	bl	8008952 <_ZNK6tflite8SubGraph9operatorsEv>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f001 fcdf 	bl	800a6b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8008cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	db77      	blt.n	8008df2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2be>
    const auto* op = subgraph->operators()->Get(i);
 8008d02:	68b8      	ldr	r0, [r7, #8]
 8008d04:	f7ff fe25 	bl	8008952 <_ZNK6tflite8SubGraph9operatorsEv>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f001 fcde 	bl	800a6d0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8008d14:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8008d16:	2300      	movs	r3, #0
 8008d18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d1c:	f7ff fdc5 	bl	80088aa <_ZNK6tflite8Operator6inputsEv>
 8008d20:	4603      	mov	r3, r0
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fa ff96 	bl	8003c54 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	bf34      	ite	cc
 8008d30:	2301      	movcc	r3, #1
 8008d32:	2300      	movcs	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d022      	beq.n	8008d80 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x24c>
      const int tensor_index = op->inputs()->Get(n);
 8008d3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d3c:	f7ff fdb5 	bl	80088aa <_ZNK6tflite8Operator6inputsEv>
 8008d40:	4603      	mov	r3, r0
 8008d42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fa ff93 	bl	8003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008d4a:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6819      	ldr	r1, [r3, #0]
 8008d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d52:	4613      	mov	r3, r2
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	4413      	add	r3, r2
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	440b      	add	r3, r1
 8008d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      if (((current->last_used == -1) || (current->last_used < i))) {
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d66:	d004      	beq.n	8008d72 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23e>
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	dd02      	ble.n	8008d78 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x244>
        current->last_used = i;
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d76:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8008d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d7e:	e7cc      	b.n	8008d1a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1e6>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8008d80:	2300      	movs	r3, #0
 8008d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d86:	f7ff fd9e 	bl	80088c6 <_ZNK6tflite8Operator7outputsEv>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fa ff61 	bl	8003c54 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008d92:	4602      	mov	r2, r0
 8008d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d96:	4293      	cmp	r3, r2
 8008d98:	bf34      	ite	cc
 8008d9a:	2301      	movcc	r3, #1
 8008d9c:	2300      	movcs	r3, #0
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d022      	beq.n	8008dea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2b6>
      const int tensor_index = op->outputs()->Get(n);
 8008da4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008da6:	f7ff fd8e 	bl	80088c6 <_ZNK6tflite8Operator7outputsEv>
 8008daa:	4603      	mov	r3, r0
 8008dac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fa ff5e 	bl	8003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008db4:	6378      	str	r0, [r7, #52]	; 0x34
      AllocationInfo* current = &info_[tensor_index];
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6819      	ldr	r1, [r3, #0]
 8008dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	4413      	add	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	440b      	add	r3, r1
 8008dc6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((current->first_created == -1) || (current->first_created > i)) {
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd0:	d004      	beq.n	8008ddc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a8>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	da02      	bge.n	8008de2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ae>
        current->first_created = i;
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008de0:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8008de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008de4:	3301      	adds	r3, #1
 8008de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008de8:	e7cc      	b.n	8008d84 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x250>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8008dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dec:	3b01      	subs	r3, #1
 8008dee:	653b      	str	r3, [r7, #80]	; 0x50
 8008df0:	e784      	b.n	8008cfc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c8>
      }
    }
  }

  // Sanity check for valid tensor lifetime.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8008df2:	2300      	movs	r3, #0
 8008df4:	647b      	str	r3, [r7, #68]	; 0x44
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d247      	bcs.n	8008e90 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35c>
    AllocationInfo* current = &info_[i];
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6819      	ldr	r1, [r3, #0]
 8008e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e06:	4613      	mov	r3, r2
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4413      	add	r3, r2
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	440b      	add	r3, r1
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24
    // Even though tensor appears to be read only it may still need to be
    // allocated.
    const bool appears_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d106      	bne.n	8008e2a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d001      	beq.n	8008e2a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f8>
 8008e2a:	2300      	movs	r3, #0
    const bool appears_read_only =
 8008e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    const bool has_partial_lifetime =
        !appears_read_only &&
 8008e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e34:	f083 0301 	eor.w	r3, r3, #1
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x322>
        ((current->first_created == -1) || (current->last_used == -1));
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	689b      	ldr	r3, [r3, #8]
        !appears_read_only &&
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e46:	d004      	beq.n	8008e52 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x31e>
        ((current->first_created == -1) || (current->last_used == -1));
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e50:	d101      	bne.n	8008e56 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x322>
        !appears_read_only &&
 8008e52:	2301      	movs	r3, #1
 8008e54:	e000      	b.n	8008e58 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x324>
 8008e56:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 8008e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (has_partial_lifetime && current->needs_allocating) {
 8008e5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d011      	beq.n	8008e88 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x354>
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	7d1b      	ldrb	r3, [r3, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00d      	beq.n	8008e88 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x354>
      TF_LITE_REPORT_ERROR(
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	68d8      	ldr	r0, [r3, #12]
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e7e:	4907      	ldr	r1, [pc, #28]	; (8008e9c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x368>)
 8008e80:	f7fa f8ac 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e004      	b.n	8008e92 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35e>
  for (size_t i = 0; i < tensor_count_; ++i) {
 8008e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e8e:	e7b2      	b.n	8008df6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2c2>
    }
  }
  return kTfLiteOk;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3760      	adds	r7, #96	; 0x60
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	080180b4 	.word	0x080180b4

08008ea0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08c      	sub	sp, #48	; 0x30
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 8008eac:	68b8      	ldr	r0, [r7, #8]
 8008eae:	f7ff fdb3 	bl	8008a18 <_ZNK6tflite5Model8metadataEv>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bf14      	ite	ne
 8008eb8:	2301      	movne	r3, #1
 8008eba:	2300      	moveq	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d060      	beq.n	8008f84 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ec6:	68b8      	ldr	r0, [r7, #8]
 8008ec8:	f7ff fda6 	bl	8008a18 <_ZNK6tflite5Model8metadataEv>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f001 fcc0 	bl	800a854 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	bf34      	ite	cc
 8008edc:	2301      	movcc	r3, #1
 8008ede:	2300      	movcs	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d04e      	beq.n	8008f84 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 8008ee6:	68b8      	ldr	r0, [r7, #8]
 8008ee8:	f7ff fd96 	bl	8008a18 <_ZNK6tflite5Model8metadataEv>
 8008eec:	4603      	mov	r3, r0
 8008eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f001 fcbd 	bl	800a870 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 8008ef6:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8008ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008efa:	f7ff fd46 	bl	800898a <_ZNK6tflite8Metadata4nameEv>
 8008efe:	4603      	mov	r3, r0
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7ff fc2a 	bl	800875a <_ZNK11flatbuffers6String5c_strEv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2217      	movs	r2, #23
 8008f0a:	4921      	ldr	r1, [pc, #132]	; (8008f90 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f00c f859 	bl	8014fc4 <strncmp>
 8008f12:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bf0c      	ite	eq
 8008f18:	2301      	moveq	r3, #1
 8008f1a:	2300      	movne	r3, #0
 8008f1c:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d02c      	beq.n	8008f7c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 8008f22:	68b8      	ldr	r0, [r7, #8]
 8008f24:	f7ff fd6a 	bl	80089fc <_ZNK6tflite5Model7buffersEv>
 8008f28:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8008f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f2c:	f7ff fd3b 	bl	80089a6 <_ZNK6tflite8Metadata6bufferEv>
 8008f30:	4603      	mov	r3, r0
 8008f32:	4619      	mov	r1, r3
 8008f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f36:	f001 fccf 	bl	800a8d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8008f3a:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8008f3c:	6a38      	ldr	r0, [r7, #32]
 8008f3e:	f7ff fd16 	bl	800896e <_ZNK6tflite6Buffer4dataEv>
 8008f42:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8008f44:	69f8      	ldr	r0, [r7, #28]
 8008f46:	f001 fcd5 	bl	800a8f4 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8008f4a:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d009      	beq.n	8008f7c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	68d8      	ldr	r0, [r3, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	4908      	ldr	r1, [pc, #32]	; (8008f94 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 8008f74:	f7fa f832 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e004      	b.n	8008f86 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	3301      	adds	r3, #1
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f82:	e7a0      	b.n	8008ec6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3730      	adds	r7, #48	; 0x30
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	0801a1c4 	.word	0x0801a1c4
 8008f94:	08018068 	.word	0x08018068

08008f98 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 8008f98:	b480      	push	{r7}
 8008f9a:	b089      	sub	sp, #36	; 0x24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	61fb      	str	r3, [r7, #28]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d232      	bcs.n	8009020 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	69fa      	ldr	r2, [r7, #28]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6819      	ldr	r1, [r3, #0]
 8008fde:	69fa      	ldr	r2, [r7, #28]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	4413      	add	r3, r2
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	440b      	add	r3, r1
 8008fea:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f04f 32ff 	mov.w	r2, #4294967295
 8009010:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	2201      	movs	r2, #1
 8009016:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	3301      	adds	r3, #1
 800901c:	61fb      	str	r3, [r7, #28]
 800901e:	e7c4      	b.n	8008faa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3724      	adds	r7, #36	; 0x24
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800902e:	b590      	push	{r4, r7, lr}
 8009030:	b08b      	sub	sp, #44	; 0x2c
 8009032:	af02      	add	r7, sp, #8
 8009034:	60f8      	str	r0, [r7, #12]
 8009036:	60b9      	str	r1, [r7, #8]
 8009038:	607a      	str	r2, [r7, #4]
 800903a:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800903c:	2300      	movs	r3, #0
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	69fa      	ldr	r2, [r7, #28]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d247      	bcs.n	80090d8 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 8009048:	69fa      	ldr	r2, [r7, #28]
 800904a:	4613      	mov	r3, r2
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	4413      	add	r3, r2
 8009050:	00db      	lsls	r3, r3, #3
 8009052:	461a      	mov	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4413      	add	r3, r2
 8009058:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	7d1b      	ldrb	r3, [r3, #20]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d036      	beq.n	80090d0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2110      	movs	r1, #16
 8009068:	4618      	mov	r0, r3
 800906a:	f7ff fa58 	bl	800851e <_ZN6tflite11AlignSizeUpEjj>
 800906e:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009078:	d114      	bne.n	80090a4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	681c      	ldr	r4, [r3, #0]
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	6899      	ldr	r1, [r3, #8]
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	460b      	mov	r3, r1
 8009090:	68f9      	ldr	r1, [r7, #12]
 8009092:	68b8      	ldr	r0, [r7, #8]
 8009094:	47a0      	blx	r4
 8009096:	4603      	mov	r3, r0
 8009098:	74bb      	strb	r3, [r7, #18]
 800909a:	7cbb      	ldrb	r3, [r7, #18]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d017      	beq.n	80090d0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 80090a0:	7cbb      	ldrb	r3, [r7, #18]
 80090a2:	e01a      	b.n	80090da <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 80090a4:	6979      	ldr	r1, [r7, #20]
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	6898      	ldr	r0, [r3, #8]
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	6912      	ldr	r2, [r2, #16]
 80090b2:	9201      	str	r2, [sp, #4]
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	4603      	mov	r3, r0
 80090b8:	460a      	mov	r2, r1
 80090ba:	68f9      	ldr	r1, [r7, #12]
 80090bc:	68b8      	ldr	r0, [r7, #8]
 80090be:	f7fc fed9 	bl	8005e74 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 80090c2:	4603      	mov	r3, r0
 80090c4:	74fb      	strb	r3, [r7, #19]
 80090c6:	7cfb      	ldrb	r3, [r7, #19]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 80090cc:	7cfb      	ldrb	r3, [r7, #19]
 80090ce:	e004      	b.n	80090da <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	3301      	adds	r3, #1
 80090d4:	61fb      	str	r3, [r7, #28]
 80090d6:	e7b3      	b.n	8009040 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3724      	adds	r7, #36	; 0x24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd90      	pop	{r4, r7, pc}

080090e2 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 80090e2:	b590      	push	{r4, r7, lr}
 80090e4:	b08b      	sub	sp, #44	; 0x2c
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	60f8      	str	r0, [r7, #12]
 80090ea:	60b9      	str	r1, [r7, #8]
 80090ec:	607a      	str	r2, [r7, #4]
 80090ee:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80090f4:	2300      	movs	r3, #0
 80090f6:	623b      	str	r3, [r7, #32]
 80090f8:	6a3a      	ldr	r2, [r7, #32]
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d22e      	bcs.n	800915e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 8009100:	6a3a      	ldr	r2, [r7, #32]
 8009102:	4613      	mov	r3, r2
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	4413      	add	r3, r2
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	461a      	mov	r2, r3
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	4413      	add	r3, r2
 8009110:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	7d1b      	ldrb	r3, [r3, #20]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d01d      	beq.n	8009156 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 800911a:	f04f 33ff 	mov.w	r3, #4294967295
 800911e:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3314      	adds	r3, #20
 8009126:	681c      	ldr	r4, [r3, #0]
 8009128:	f107 0314 	add.w	r3, r7, #20
 800912c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800912e:	68f9      	ldr	r1, [r7, #12]
 8009130:	68b8      	ldr	r0, [r7, #8]
 8009132:	47a0      	blx	r4
 8009134:	4603      	mov	r3, r0
 8009136:	76fb      	strb	r3, [r7, #27]
 8009138:	7efb      	ldrb	r3, [r7, #27]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 800913e:	7efb      	ldrb	r3, [r7, #27]
 8009140:	e00e      	b.n	8009160 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	4619      	mov	r1, r3
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	440a      	add	r2, r1
 800914e:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	3301      	adds	r3, #1
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	3301      	adds	r3, #1
 800915a:	623b      	str	r3, [r7, #32]
 800915c:	e7cc      	b.n	80090f8 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	372c      	adds	r7, #44	; 0x2c
 8009164:	46bd      	mov	sp, r7
 8009166:	bd90      	pop	{r4, r7, pc}

08009168 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 8009172:	2300      	movs	r3, #0
 8009174:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7ff fb57 	bl	800882a <_ZNK6tflite6Tensor6bufferEv>
 800917c:	4603      	mov	r3, r0
 800917e:	4619      	mov	r1, r3
 8009180:	6838      	ldr	r0, [r7, #0]
 8009182:	f001 fba9 	bl	800a8d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8009186:	6138      	str	r0, [r7, #16]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d015      	beq.n	80091ba <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 800918e:	6938      	ldr	r0, [r7, #16]
 8009190:	f7ff fbed 	bl	800896e <_ZNK6tflite6Buffer4dataEv>
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00e      	beq.n	80091ba <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f001 f9da 	bl	800a556 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bf14      	ite	ne
 80091a8:	2301      	movne	r3, #1
 80091aa:	2300      	moveq	r3, #0
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f001 fb9e 	bl	800a8f4 <_ZNK11flatbuffers6VectorIhE4dataEv>
 80091b8:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 80091ba:	697b      	ldr	r3, [r7, #20]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 80091c4:	b590      	push	{r4, r7, lr}
 80091c6:	b08d      	sub	sp, #52	; 0x34
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	607a      	str	r2, [r7, #4]
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	460b      	mov	r3, r1
 80091d2:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 80091d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 80091da:	f00a ff39 	bl	8014050 <abort>

  *result = {};
 80091de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091e0:	4618      	mov	r0, r3
 80091e2:	2340      	movs	r3, #64	; 0x40
 80091e4:	461a      	mov	r2, r3
 80091e6:	2100      	movs	r1, #0
 80091e8:	f00b f81e 	bl	8014228 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff f957 	bl	80084a0 <_ZNK6tflite6Tensor4typeEv>
 80091f2:	4603      	mov	r3, r0
 80091f4:	4618      	mov	r0, r3
 80091f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091fa:	4619      	mov	r1, r3
 80091fc:	f7fa f9a2 	bl	8003544 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009206:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 800920e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009212:	e128      	b.n	8009466 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff fb25 	bl	8008864 <_ZNK6tflite6Tensor11is_variableEv>
 800921a:	4603      	mov	r3, r0
 800921c:	461a      	mov	r2, r3
 800921e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009220:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff ff9e 	bl	8009168 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800922c:	4602      	mov	r2, r0
 800922e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009230:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8009232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d103      	bne.n	8009242 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 800923a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923c:	2202      	movs	r2, #2
 800923e:	751a      	strb	r2, [r3, #20]
 8009240:	e002      	b.n	8009248 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 8009242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009244:	2201      	movs	r2, #1
 8009246:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8009248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924a:	f103 0118 	add.w	r1, r3, #24
 800924e:	f107 0210 	add.w	r2, r7, #16
 8009252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff f9d3 	bl	8008600 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009260:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 8009268:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800926c:	e0fb      	b.n	8009466 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff f908 	bl	8008484 <_ZNK6tflite6Tensor5shapeEv>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	bf0c      	ite	eq
 800927a:	2301      	moveq	r3, #1
 800927c:	2300      	movne	r3, #0
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8009284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009286:	4a7a      	ldr	r2, [pc, #488]	; (8009470 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 8009288:	609a      	str	r2, [r3, #8]
 800928a:	e013      	b.n	80092b4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff f8f9 	bl	8008484 <_ZNK6tflite6Tensor5shapeEv>
 8009292:	4602      	mov	r2, r0
 8009294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009296:	3308      	adds	r3, #8
 8009298:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f001 fb36 	bl	800a90c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80092a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 80092ae:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80092b2:	e0d8      	b.n	8009466 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7ff fac7 	bl	8008848 <_ZNK6tflite6Tensor12quantizationEv>
 80092ba:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d021      	beq.n	8009306 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 80092c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092c4:	f7ff fa86 	bl	80087d4 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d01b      	beq.n	8009306 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 80092ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092d0:	f7ff fa80 	bl	80087d4 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80092d4:	4603      	mov	r3, r0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f001 f94b 	bl	800a572 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 80092dc:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d011      	beq.n	8009306 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 80092e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092e4:	f7ff fa84 	bl	80087f0 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80092e8:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00b      	beq.n	8009306 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 80092ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092f0:	f7ff fa7e 	bl	80087f0 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80092f4:	4603      	mov	r3, r0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f001 f972 	bl	800a5e0 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 80092fc:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 8009306:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 80ab 	beq.w	8009464 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 800930e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009310:	f7ff fa60 	bl	80087d4 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009314:	4603      	mov	r3, r0
 8009316:	2100      	movs	r1, #0
 8009318:	4618      	mov	r0, r3
 800931a:	f001 f939 	bl	800a590 <_ZNK11flatbuffers6VectorIfE3GetEm>
 800931e:	eef0 7a40 	vmov.f32	s15, s0
 8009322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009324:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8009328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800932a:	f7ff fa61 	bl	80087f0 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800932e:	4603      	mov	r3, r0
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f001 f962 	bl	800a5fc <_ZNK11flatbuffers6VectorIxE3GetEm>
 8009338:	4603      	mov	r3, r0
 800933a:	460c      	mov	r4, r1
    result->params.zero_point =
 800933c:	461a      	mov	r2, r3
 800933e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009340:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8009342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009344:	f7ff fa46 	bl	80087d4 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009348:	4603      	mov	r3, r0
 800934a:	4618      	mov	r0, r3
 800934c:	f001 f911 	bl	800a572 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8009350:	4603      	mov	r3, r0
 8009352:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1aa>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3310      	adds	r3, #16
 8009360:	681b      	ldr	r3, [r3, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8009362:	2204      	movs	r2, #4
 8009364:	210c      	movs	r1, #12
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	4798      	blx	r3
 800936a:	4603      	mov	r3, r0
 800936c:	e008      	b.n	8009380 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1bc>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	330c      	adds	r3, #12
 8009374:	681b      	ldr	r3, [r3, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8009376:	2204      	movs	r2, #4
 8009378:	210c      	movs	r1, #12
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	4798      	blx	r3
 800937e:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 8009380:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d105      	bne.n	8009394 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1d0>
      TF_LITE_REPORT_ERROR(error_reporter,
 8009388:	493a      	ldr	r1, [pc, #232]	; (8009474 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 800938a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800938c:	f7f9 fe26 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8009390:	2301      	movs	r3, #1
 8009392:	e068      	b.n	8009466 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8009394:	7afb      	ldrb	r3, [r7, #11]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00d      	beq.n	80093b6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f2>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3310      	adds	r3, #16
 80093a0:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 80093a2:	6a38      	ldr	r0, [r7, #32]
 80093a4:	f7f7 fe9a 	bl	80010dc <TfLiteIntArrayGetSizeInBytes>
 80093a8:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 80093aa:	2204      	movs	r2, #4
 80093ac:	4619      	mov	r1, r3
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	47a0      	blx	r4
 80093b2:	4602      	mov	r2, r0
 80093b4:	e00c      	b.n	80093d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20c>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	330c      	adds	r3, #12
 80093bc:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 80093be:	6a38      	ldr	r0, [r7, #32]
 80093c0:	f7f7 fe8c 	bl	80010dc <TfLiteIntArrayGetSizeInBytes>
 80093c4:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 80093c6:	2204      	movs	r2, #4
 80093c8:	4619      	mov	r1, r3
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	47a0      	blx	r4
 80093ce:	4602      	mov	r2, r0
    quantization->zero_point =
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	605a      	str	r2, [r3, #4]
    if (quantization->zero_point == nullptr) {
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d105      	bne.n	80093e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x224>
      TF_LITE_REPORT_ERROR(error_reporter,
 80093dc:	4926      	ldr	r1, [pc, #152]	; (8009478 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b4>)
 80093de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80093e0:	f7f9 fdfc 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e03e      	b.n	8009466 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 80093e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093ea:	f7ff f9f3 	bl	80087d4 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80093ee:	4602      	mov	r2, r0
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f001 faa2 	bl	800a93e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80093fa:	4603      	mov	r3, r0
 80093fc:	76fb      	strb	r3, [r7, #27]
 80093fe:	7efb      	ldrb	r3, [r7, #27]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
 8009404:	7efb      	ldrb	r3, [r7, #27]
 8009406:	e02e      	b.n	8009466 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	6a3a      	ldr	r2, [r7, #32]
 800940e:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	3304      	adds	r3, #4
 8009416:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 8009418:	2300      	movs	r3, #0
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800941c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	429a      	cmp	r2, r3
 8009422:	da12      	bge.n	800944a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8009424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009426:	f7ff f9e3 	bl	80087f0 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800942a:	4602      	mov	r2, r0
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f001 f8e3 	bl	800a5fc <_ZNK11flatbuffers6VectorIxE3GetEm>
 8009436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	4413      	add	r3, r2
 800943e:	4602      	mov	r2, r0
 8009440:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8009442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009444:	3301      	adds	r3, #1
 8009446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009448:	e7e8      	b.n	800941c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 800944a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800944c:	f7ff f9de 	bl	800880c <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8009450:	4602      	mov	r2, r0
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8009456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800945e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3734      	adds	r7, #52	; 0x34
 800946a:	46bd      	mov	sp, r7
 800946c:	bd90      	pop	{r4, r7, pc}
 800946e:	bf00      	nop
 8009470:	0801a1dc 	.word	0x0801a1dc
 8009474:	08018118 	.word	0x08018118
 8009478:	08018148 	.word	0x08018148

0800947c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
 8009488:	603b      	str	r3, [r7, #0]
  *result = {};
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	461a      	mov	r2, r3
 800948e:	2300      	movs	r3, #0
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	6053      	str	r3, [r2, #4]
 8009494:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8009496:	68b8      	ldr	r0, [r7, #8]
 8009498:	f7ff f802 	bl	80084a0 <_ZNK6tflite6Tensor4typeEv>
 800949c:	4603      	mov	r3, r0
 800949e:	4618      	mov	r0, r3
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	3308      	adds	r3, #8
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	4619      	mov	r1, r3
 80094a8:	f7fa f84c 	bl	8003544 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80094ac:	4603      	mov	r3, r0
 80094ae:	75fb      	strb	r3, [r7, #23]
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	e027      	b.n	800950a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	68b8      	ldr	r0, [r7, #8]
 80094be:	f7ff fe53 	bl	8009168 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 80094c2:	4602      	mov	r2, r0
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 80094c8:	68b8      	ldr	r0, [r7, #8]
 80094ca:	f7fe ffdb 	bl	8008484 <_ZNK6tflite6Tensor5shapeEv>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	bf0c      	ite	eq
 80094d4:	2301      	moveq	r3, #1
 80094d6:	2300      	movne	r3, #0
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	4a0c      	ldr	r2, [pc, #48]	; (8009514 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 80094e2:	605a      	str	r2, [r3, #4]
 80094e4:	e010      	b.n	8009508 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 80094e6:	68b8      	ldr	r0, [r7, #8]
 80094e8:	f7fe ffcc 	bl	8008484 <_ZNK6tflite6Tensor5shapeEv>
 80094ec:	4602      	mov	r2, r0
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	3304      	adds	r3, #4
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f001 fa09 	bl	800a90c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75bb      	strb	r3, [r7, #22]
 80094fe:	7dbb      	ldrb	r3, [r7, #22]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 8009504:	7dbb      	ldrb	r3, [r7, #22]
 8009506:	e000      	b.n	800950a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	0801a1dc 	.word	0x0801a1dc

08009518 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8009524:	4a0c      	ldr	r2, [pc, #48]	; (8009558 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	605a      	str	r2, [r3, #4]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	609a      	str	r2, [r3, #8]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	731a      	strb	r2, [r3, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	611a      	str	r2, [r3, #16]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	615a      	str	r2, [r3, #20]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4618      	mov	r0, r3
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	0801a200 	.word	0x0801a200

0800955c <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	4a04      	ldr	r2, [pc, #16]	; (8009578 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4618      	mov	r0, r3
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	0801a200 	.word	0x0801a200

0800957c <_ZN6tflite14MicroAllocatorD0Ev>:
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ffe9 	bl	800955c <_ZN6tflite14MicroAllocatorD1Ev>
 800958a:	2118      	movs	r1, #24
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f00a fa9c 	bl	8013aca <_ZdlPvj>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 80095a8:	2110      	movs	r1, #16
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f7fe ff88 	bl	80084c0 <_ZN6tflite14AlignPointerUpEPhj>
 80095b0:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	4413      	add	r3, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	6979      	ldr	r1, [r7, #20]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f003 fddf 	bl	800d188 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 80095ca:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 f805 	bl	80095de <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 80095d4:	4603      	mov	r3, r0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 80095de:	b590      	push	{r4, r7, lr}
 80095e0:	b085      	sub	sp, #20
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 80095ee:	f00a fd2f 	bl	8014050 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 80095f8:	f00a fd2a 	bl	8014050 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	330c      	adds	r3, #12
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2204      	movs	r2, #4
 8009606:	2118      	movs	r1, #24
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
 800960c:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4619      	mov	r1, r3
 8009612:	2018      	movs	r0, #24
 8009614:	f7f9 fd47 	bl	80030a6 <_ZnwjPv>
 8009618:	4604      	mov	r4, r0
 800961a:	2c00      	cmp	r4, #0
 800961c:	d006      	beq.n	800962c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x4e>
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	4620      	mov	r0, r4
 8009624:	f7ff ff78 	bl	8009518 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8009628:	4623      	mov	r3, r4
 800962a:	e000      	b.n	800962e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x50>
 800962c:	4623      	mov	r3, r4
 800962e:	60bb      	str	r3, [r7, #8]
  return allocator;
 8009630:	68bb      	ldr	r3, [r7, #8]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	bd90      	pop	{r4, r7, pc}
	...

0800963c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations,
    TfLiteEvalTensor** eval_tensors) {
 800963c:	b590      	push	{r4, r7, lr}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
 8009648:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x18>
 8009650:	f00a fcfe 	bl	8014050 <abort>

  if (model_is_allocating_) {
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	7b1b      	ldrb	r3, [r3, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d007      	beq.n	800966c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x30>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	4923      	ldr	r1, [pc, #140]	; (80096f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xb4>)
 8009662:	4618      	mov	r0, r3
 8009664:	f7f9 fcba 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 8009668:	2301      	movs	r3, #1
 800966a:	e03c      	b.n	80096e6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  }

  model_is_allocating_ = true;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(InitScratchBufferData());
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 fe68 	bl	800a348 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 8009678:	4603      	mov	r3, r0
 800967a:	75fb      	strb	r3, [r7, #23]
 800967c:	7dfb      	ldrb	r3, [r7, #23]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x4a>
 8009682:	7dfb      	ldrb	r3, [r7, #23]
 8009684:	e02f      	b.n	80096e6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  TF_LITE_ENSURE_STATUS(AllocateTfLiteEvalTensors(model, eval_tensors));
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3320      	adds	r3, #32
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009690:	68b9      	ldr	r1, [r7, #8]
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	4798      	blx	r3
 8009696:	4603      	mov	r3, r0
 8009698:	75bb      	strb	r3, [r7, #22]
 800969a:	7dbb      	ldrb	r3, [r7, #22]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x68>
 80096a0:	7dbb      	ldrb	r3, [r7, #22]
 80096a2:	e020      	b.n	80096e6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  TF_LITE_ENSURE_STATUS(
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3318      	adds	r3, #24
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	68b9      	ldr	r1, [r7, #8]
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	4798      	blx	r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	757b      	strb	r3, [r7, #21]
 80096b8:	7d7b      	ldrb	r3, [r7, #21]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x86>
 80096be:	7d7b      	ldrb	r3, [r7, #21]
 80096c0:	e011      	b.n	80096e6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
      AllocateNodeAndRegistrations(model, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	331c      	adds	r3, #28
 80096c8:	681c      	ldr	r4, [r3, #0]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	47a0      	blx	r4
 80096d6:	4603      	mov	r3, r0
 80096d8:	753b      	strb	r3, [r7, #20]
 80096da:	7d3b      	ldrb	r3, [r7, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xa8>
 80096e0:	7d3b      	ldrb	r3, [r7, #20]
 80096e2:	e000      	b.n	80096e6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
      model, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd90      	pop	{r4, r7, pc}
 80096ee:	bf00      	nop
 80096f0:	08018178 	.word	0x08018178

080096f4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle** scratch_buffer_handles) {
 80096f4:	b590      	push	{r4, r7, lr}
 80096f6:	b089      	sub	sp, #36	; 0x24
 80096f8:	af02      	add	r7, sp, #8
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
 8009700:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	7b1b      	ldrb	r3, [r3, #12]
 8009706:	f083 0301 	eor.w	r3, r3, #1
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d007      	beq.n	8009720 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	4924      	ldr	r1, [pc, #144]	; (80097a8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xb4>)
 8009716:	4618      	mov	r0, r3
 8009718:	f7f9 fc60 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 800971c:	2301      	movs	r3, #1
 800971e:	e03f      	b.n	80097a0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8009720:	68b9      	ldr	r1, [r7, #8]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fc86 	bl	800a034 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8009728:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x40>
 8009730:	f00a fc8e 	bl	8014050 <abort>

  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3334      	adds	r3, #52	; 0x34
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	6912      	ldr	r2, [r2, #16]
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	4798      	blx	r3
 8009746:	4603      	mov	r3, r0
 8009748:	74fb      	strb	r3, [r7, #19]
 800974a:	7cfb      	ldrb	r3, [r7, #19]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x60>
 8009750:	7cfb      	ldrb	r3, [r7, #19]
 8009752:	e025      	b.n	80097a0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
      scratch_buffer_handles, scratch_buffer_request_count_));
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3330      	adds	r3, #48	; 0x30
 800975a:	681c      	ldr	r4, [r3, #0]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	47a0      	blx	r4
 800976c:	4603      	mov	r3, r0
 800976e:	74bb      	strb	r3, [r7, #18]
 8009770:	7cbb      	ldrb	r3, [r7, #18]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x86>
 8009776:	7cbb      	ldrb	r3, [r7, #18]
 8009778:	e012      	b.n	80097a0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
                                               *scratch_buffer_handles));
  TF_LITE_ENSURE_STATUS(AllocateVariables(subgraph, eval_tensors));
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3324      	adds	r3, #36	; 0x24
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	6979      	ldr	r1, [r7, #20]
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	4798      	blx	r3
 800978a:	4603      	mov	r3, r0
 800978c:	747b      	strb	r3, [r7, #17]
 800978e:	7c7b      	ldrb	r3, [r7, #17]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xa4>
 8009794:	7c7b      	ldrb	r3, [r7, #17]
 8009796:	e003      	b.n	80097a0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>

  model_is_allocating_ = false;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	371c      	adds	r7, #28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd90      	pop	{r4, r7, pc}
 80097a8:	080181d0 	.word	0x080181d0

080097ac <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6858      	ldr	r0, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	330c      	adds	r3, #12
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2210      	movs	r2, #16
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	4798      	blx	r3
 80097ca:	4603      	mov	r3, r0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int* buffer_idx) {
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 fdce 	bl	800a382 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80097e6:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 80097e8:	2300      	movs	r3, #0
 80097ea:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80097ec:	2300      	movs	r3, #0
 80097ee:	61bb      	str	r3, [r7, #24]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	69ba      	ldr	r2, [r7, #24]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d20e      	bcs.n	8009818 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	00db      	lsls	r3, r3, #3
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	4413      	add	r3, r2
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009808:	d102      	bne.n	8009810 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x3c>
      ++current_node_request_count;
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	3301      	adds	r3, #1
 800980e:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	3301      	adds	r3, #1
 8009814:	61bb      	str	r3, [r7, #24]
 8009816:	e7eb      	b.n	80097f0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x1c>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b07      	cmp	r3, #7
 800981c:	d908      	bls.n	8009830 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x5c>
    TF_LITE_REPORT_ERROR(
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	2208      	movs	r2, #8
 8009824:	4913      	ldr	r1, [pc, #76]	; (8009874 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0xa0>)
 8009826:	4618      	mov	r0, r3
 8009828:	f7f9 fbd8 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 800982c:	2301      	movs	r3, #1
 800982e:	e01c      	b.n	800986a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x96>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	4413      	add	r3, r2
 800983a:	613b      	str	r3, [r7, #16]
  *current_request = {};
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	461a      	mov	r2, r3
 8009840:	2300      	movs	r3, #0
 8009842:	6013      	str	r3, [r2, #0]
 8009844:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	f04f 32ff 	mov.w	r2, #4294967295
 8009852:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	461a      	mov	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	0801821c 	.word	0x0801821c

08009878 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3308      	adds	r3, #8
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fd77 	bl	800a382 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8009894:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8009896:	2300      	movs	r3, #0
 8009898:	617b      	str	r3, [r7, #20]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d211      	bcs.n	80098c8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	4413      	add	r3, r2
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b2:	d105      	bne.n	80098c0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	4413      	add	r3, r2
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	3301      	adds	r3, #1
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	e7e8      	b.n	800989a <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6858      	ldr	r0, [r3, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3308      	adds	r3, #8
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	6912      	ldr	r2, [r2, #16]
 80098da:	3208      	adds	r2, #8
 80098dc:	00d1      	lsls	r1, r2, #3
 80098de:	2204      	movs	r2, #4
 80098e0:	4798      	blx	r3
 80098e2:	4603      	mov	r3, r0
 80098e4:	73fb      	strb	r3, [r7, #15]
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	e000      	b.n	80098f2 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, NodeAndRegistration** node_and_registrations) {
 80098fc:	b5b0      	push	{r4, r5, r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(node_and_registrations);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x16>
 800990e:	f00a fb9f 	bl	8014050 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8009912:	68b9      	ldr	r1, [r7, #8]
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 fb8d 	bl	800a034 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800991a:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x2a>
 8009922:	f00a fb95 	bl	8014050 <abort>

  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	685d      	ldr	r5, [r3, #4]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	685b      	ldr	r3, [r3, #4]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
          alignof(NodeAndRegistration)));
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	330c      	adds	r3, #12
 8009932:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 8009934:	6978      	ldr	r0, [r7, #20]
 8009936:	f7ff f80c 	bl	8008952 <_ZNK6tflite8SubGraph9operatorsEv>
 800993a:	4603      	mov	r3, r0
 800993c:	4618      	mov	r0, r3
 800993e:	f000 feb9 	bl	800a6b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8009942:	4602      	mov	r2, r0
 8009944:	4613      	mov	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	00db      	lsls	r3, r3, #3
          alignof(NodeAndRegistration)));
 800994c:	2204      	movs	r2, #4
 800994e:	4619      	mov	r1, r3
 8009950:	4628      	mov	r0, r5
 8009952:	47a0      	blx	r4
 8009954:	6138      	str	r0, [r7, #16]
  if (output == nullptr) {
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d107      	bne.n	800996c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
    TF_LITE_REPORT_ERROR(
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	4906      	ldr	r1, [pc, #24]	; (800997c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x80>)
 8009962:	4618      	mov	r0, r3
 8009964:	f7f9 fb3a 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 8009968:	2301      	movs	r3, #1
 800996a:	e003      	b.n	8009974 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x78>
  }
  *node_and_registrations = output;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bdb0      	pop	{r4, r5, r7, pc}
 800997c:	08018254 	.word	0x08018254

08009980 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 8009980:	b5b0      	push	{r4, r5, r7, lr}
 8009982:	b098      	sub	sp, #96	; 0x60
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x18>
 8009994:	f00a fb5c 	bl	8014050 <abort>
  TFLITE_DCHECK(node_and_registrations != nullptr);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
 800999e:	f00a fb57 	bl	8014050 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80099a2:	68b9      	ldr	r1, [r7, #8]
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 fb45 	bl	800a034 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80099aa:	6538      	str	r0, [r7, #80]	; 0x50
  TFLITE_DCHECK(subgraph != nullptr);
 80099ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x36>
 80099b2:	f00a fb4d 	bl	8014050 <abort>

  TfLiteStatus status = kTfLiteOk;
 80099b6:	2300      	movs	r3, #0
 80099b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  auto* opcodes = model->operator_codes();
 80099bc:	68b8      	ldr	r0, [r7, #8]
 80099be:	f7ff f801 	bl	80089c4 <_ZNK6tflite5Model14operator_codesEv>
 80099c2:	64b8      	str	r0, [r7, #72]	; 0x48
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	f107 0320 	add.w	r3, r7, #32
 80099cc:	4611      	mov	r1, r2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff f860 	bl	8008a94 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 80099d4:	2300      	movs	r3, #0
 80099d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80099da:	f7fe ffba 	bl	8008952 <_ZNK6tflite8SubGraph9operatorsEv>
 80099de:	4603      	mov	r3, r0
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fe67 	bl	800a6b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80099e6:	4602      	mov	r2, r0
 80099e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ea:	4293      	cmp	r3, r2
 80099ec:	bf34      	ite	cc
 80099ee:	2301      	movcc	r3, #1
 80099f0:	2300      	movcs	r3, #0
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 812c 	beq.w	8009c52 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d2>
    const auto* op = subgraph->operators()->Get(i);
 80099fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80099fc:	f7fe ffa9 	bl	8008952 <_ZNK6tflite8SubGraph9operatorsEv>
 8009a00:	4603      	mov	r3, r0
 8009a02:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fe63 	bl	800a6d0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8009a0a:	6478      	str	r0, [r7, #68]	; 0x44
    const size_t index = op->opcode_index();
 8009a0c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009a0e:	f7fe ff3d 	bl	800888c <_ZNK6tflite8Operator12opcode_indexEv>
 8009a12:	6438      	str	r0, [r7, #64]	; 0x40
    if (index >= opcodes->size()) {
 8009a14:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009a16:	f000 fe81 	bl	800a71c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	bf2c      	ite	cs
 8009a22:	2301      	movcs	r3, #1
 8009a24:	2300      	movcc	r3, #0
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d008      	beq.n	8009a3e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xbe>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a32:	498d      	ldr	r1, [pc, #564]	; (8009c68 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2e8>)
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7f9 fad1 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 8009a3a:	2401      	movs	r4, #1
 8009a3c:	e10a      	b.n	8009c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    auto* opcode = (*opcodes)[index];
 8009a3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009a42:	f000 ff95 	bl	800a970 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 8009a46:	63f8      	str	r0, [r7, #60]	; 0x3c
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 8009a4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	00db      	lsls	r3, r3, #3
 8009a58:	461a      	mov	r2, r3
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8009a5e:	3324      	adds	r3, #36	; 0x24
    status =
 8009a60:	4602      	mov	r2, r0
 8009a62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009a64:	f002 fb50 	bl	800c108 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (status != kTfLiteOk) {
 8009a6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d011      	beq.n	8009a9a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11a>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	689c      	ldr	r4, [r3, #8]
 8009a7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009a7c:	f003 fae9 	bl	800d052 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 8009a80:	4603      	mov	r3, r0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fe80 	bl	8008788 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4977      	ldr	r1, [pc, #476]	; (8009c6c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ec>)
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7f9 faa4 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
      return status;
 8009a94:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8009a98:	e0dc      	b.n	8009c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    const auto* registration = node_and_registrations[i].registration;
 8009a9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	63bb      	str	r3, [r7, #56]	; 0x38
    if (registration == nullptr) {
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d108      	bne.n	8009ac6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x146>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009aba:	496d      	ldr	r1, [pc, #436]	; (8009c70 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f0>)
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7f9 fa8d 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 8009ac2:	2401      	movs	r4, #1
 8009ac4:	e0c6      	b.n	8009c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 8009aca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    const char* custom_data = nullptr;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	65bb      	str	r3, [r7, #88]	; 0x58
    size_t custom_data_size = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char* builtin_data = nullptr;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	61fb      	str	r3, [r7, #28]

    if (op_type == BuiltinOperator_CUSTOM) {
 8009ada:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ade:	2b20      	cmp	r3, #32
 8009ae0:	d11b      	bne.n	8009b1a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x19a>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 8009ae2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009ae4:	f7fe fefd 	bl	80088e2 <_ZNK6tflite8Operator14custom_optionsEv>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	bf14      	ite	ne
 8009aee:	2301      	movne	r3, #1
 8009af0:	2300      	moveq	r3, #0
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d059      	beq.n	8009bac <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 8009af8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009afa:	f7fe fef2 	bl	80088e2 <_ZNK6tflite8Operator14custom_optionsEv>
 8009afe:	4603      	mov	r3, r0
        custom_data =
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 fef7 	bl	800a8f4 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8009b06:	65b8      	str	r0, [r7, #88]	; 0x58
        custom_data_size = op->custom_options()->size();
 8009b08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b0a:	f7fe feea 	bl	80088e2 <_ZNK6tflite8Operator14custom_optionsEv>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fd20 	bl	800a556 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8009b16:	6578      	str	r0, [r7, #84]	; 0x54
 8009b18:	e048      	b.n	8009bac <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
      }
    } else {
      if (op->custom_options() != nullptr) {
 8009b1a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b1c:	f7fe fee1 	bl	80088e2 <_ZNK6tflite8Operator14custom_optionsEv>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	bf14      	ite	ne
 8009b26:	2301      	movne	r3, #1
 8009b28:	2300      	moveq	r3, #0
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00e      	beq.n	8009b4e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ce>
        TF_LITE_REPORT_ERROR(
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	689c      	ldr	r4, [r3, #8]
 8009b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fe fe25 	bl	8008788 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	461a      	mov	r2, r3
 8009b42:	494c      	ldr	r1, [pc, #304]	; (8009c74 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f4>)
 8009b44:	4620      	mov	r0, r4
 8009b46:	f7f9 fa49 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 8009b4a:	2401      	movs	r4, #1
 8009b4c:	e082      	b.n	8009c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	331c      	adds	r3, #28
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	4798      	blx	r3
 8009b60:	6338      	str	r0, [r7, #48]	; 0x30
      if (parser == nullptr) {
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10e      	bne.n	8009b86 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x206>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	689c      	ldr	r4, [r3, #8]
 8009b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fe fe09 	bl	8008788 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009b76:	4603      	mov	r3, r0
 8009b78:	461a      	mov	r2, r3
 8009b7a:	493f      	ldr	r1, [pc, #252]	; (8009c78 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f8>)
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f7f9 fa2d 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 8009b82:	2401      	movs	r4, #1
 8009b84:	e066      	b.n	8009c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6899      	ldr	r1, [r3, #8]
 8009b8a:	f107 031c 	add.w	r3, r7, #28
 8009b8e:	f107 0220 	add.w	r2, r7, #32
 8009b92:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8009b94:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b96:	47a0      	blx	r4
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
 8009ba6:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8009baa:	e053      	b.n	8009c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	685c      	ldr	r4, [r3, #4]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689d      	ldr	r5, [r3, #8]
 8009bb4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009bb6:	f7fe fe78 	bl	80088aa <_ZNK6tflite8Operator6inputsEv>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	f107 0318 	add.w	r3, r7, #24
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f000 fea2 	bl	800a90c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009bce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x25c>
 8009bd6:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8009bda:	e03b      	b.n	8009c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	685c      	ldr	r4, [r3, #4]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	689d      	ldr	r5, [r3, #8]
 8009be4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009be6:	f7fe fe6e 	bl	80088c6 <_ZNK6tflite8Operator7outputsEv>
 8009bea:	4602      	mov	r2, r0
 8009bec:	f107 0314 	add.w	r3, r7, #20
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 fe8a 	bl	800a90c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009bfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x28c>
 8009c06:	f897 402d 	ldrb.w	r4, [r7, #45]	; 0x2d
 8009c0a:	e023      	b.n	8009c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 8009c0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c0e:	4613      	mov	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	461a      	mov	r2, r3
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    *node = {};
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	4618      	mov	r0, r3
 8009c22:	2324      	movs	r3, #36	; 0x24
 8009c24:	461a      	mov	r2, r3
 8009c26:	2100      	movs	r1, #0
 8009c28:	f00a fafe 	bl	8014228 <memset>
    node->inputs = inputs_array;
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8009c38:	69fa      	ldr	r2, [r7, #28]
 8009c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3c:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 8009c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c42:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 8009c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8009c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c50:	e6c2      	b.n	80099d8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
  }

  return kTfLiteOk;
 8009c52:	2400      	movs	r4, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 8009c54:	f107 0320 	add.w	r3, r7, #32
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f001 f915 	bl	800ae88 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8009c5e:	4623      	mov	r3, r4
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3760      	adds	r7, #96	; 0x60
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bdb0      	pop	{r4, r5, r7, pc}
 8009c68:	0801828c 	.word	0x0801828c
 8009c6c:	080182b8 	.word	0x080182b8
 8009c70:	080182e8 	.word	0x080182e8
 8009c74:	0801830c 	.word	0x0801830c
 8009c78:	08018354 	.word	0x08018354

08009c7c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 8009c7c:	b590      	push	{r4, r7, lr}
 8009c7e:	b089      	sub	sp, #36	; 0x24
 8009c80:	af02      	add	r7, sp, #8
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f9d1 	bl	800a034 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8009c92:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 8009c9a:	f00a f9d9 	bl	8014050 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor =
      AllocatePersistentTfLiteTensorInternal(model, eval_tensors, tensor_index);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3328      	adds	r3, #40	; 0x28
 8009ca4:	681c      	ldr	r4, [r3, #0]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	68b9      	ldr	r1, [r7, #8]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	47a0      	blx	r4
 8009cb0:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/false) !=
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	332c      	adds	r3, #44	; 0x2c
 8009cb8:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9301      	str	r3, [sp, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	68b9      	ldr	r1, [r7, #8]
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	47a0      	blx	r4
 8009ccc:	4603      	mov	r3, r0
                                         /*allocate_temp=*/false) !=
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bf14      	ite	ne
 8009cd2:	2301      	movne	r3, #1
 8009cd4:	2300      	moveq	r3, #0
 8009cd6:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d007      	beq.n	8009cec <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x70>
      kTfLiteOk) {
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	490c      	ldr	r1, [pc, #48]	; (8009d14 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7f9 f97a 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	e00e      	b.n	8009d0a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
  }

  if (eval_tensors != nullptr) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8c>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	005b      	lsls	r3, r3, #1
 8009cf8:	4413      	add	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4413      	add	r3, r2
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 8009d08:	693b      	ldr	r3, [r7, #16]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	371c      	adds	r7, #28
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd90      	pop	{r4, r7, pc}
 8009d12:	bf00      	nop
 8009d14:	08018374 	.word	0x08018374

08009d18 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b089      	sub	sp, #36	; 0x24
 8009d1c:	af02      	add	r7, sp, #8
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8009d26:	68b9      	ldr	r1, [r7, #8]
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 f983 	bl	800a034 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8009d2e:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 8009d36:	f00a f98b 	bl	8014050 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6858      	ldr	r0, [r3, #4]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3310      	adds	r3, #16
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2204      	movs	r2, #4
 8009d4a:	2140      	movs	r1, #64	; 0x40
 8009d4c:	4798      	blx	r3
 8009d4e:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	332c      	adds	r3, #44	; 0x2c
 8009d56:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8009d58:	2301      	movs	r3, #1
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	47a0      	blx	r4
 8009d6a:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d007      	beq.n	8009d8a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x72>
    TF_LITE_REPORT_ERROR(
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	490c      	ldr	r1, [pc, #48]	; (8009db0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f9 f92b 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 8009d86:	2300      	movs	r3, #0
 8009d88:	e00e      	b.n	8009da8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x90>
  }

  if (eval_tensors != nullptr) {
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00a      	beq.n	8009da6 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	4613      	mov	r3, r2
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	4413      	add	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4413      	add	r3, r2
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 8009da6:	693b      	ldr	r3, [r7, #16]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	371c      	adds	r7, #28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd90      	pop	{r4, r7, pc}
 8009db0:	080183c0 	.word	0x080183c0

08009db4 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4610      	mov	r0, r2
 8009dcc:	4798      	blx	r3
}
 8009dce:	bf00      	nop
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, TfLiteEvalTensor** eval_tensors) {
 8009dd8:	b5b0      	push	{r4, r5, r7, lr}
 8009dda:	b08c      	sub	sp, #48	; 0x30
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(eval_tensors != nullptr);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x16>
 8009dea:	f00a f931 	bl	8014050 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8009dee:	68b9      	ldr	r1, [r7, #8]
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 f91f 	bl	800a034 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8009df6:	6238      	str	r0, [r7, #32]
  TFLITE_DCHECK(subgraph != nullptr);
 8009df8:	6a3b      	ldr	r3, [r7, #32]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x2a>
 8009dfe:	f00a f927 	bl	8014050 <abort>

  size_t alloc_count = subgraph->tensors()->size();
 8009e02:	6a38      	ldr	r0, [r7, #32]
 8009e04:	f7fe fd7b 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 fc1e 	bl	800a64c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009e10:	61f8      	str	r0, [r7, #28]
  TfLiteEvalTensor* tensors =
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6858      	ldr	r0, [r3, #4]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	330c      	adds	r3, #12
 8009e1e:	681c      	ldr	r4, [r3, #0]
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8009e20:	69fa      	ldr	r2, [r7, #28]
 8009e22:	4613      	mov	r3, r2
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	4413      	add	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
          sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	47a0      	blx	r4
 8009e30:	61b8      	str	r0, [r7, #24]
  if (tensors == nullptr) {
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10c      	bne.n	8009e52 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6898      	ldr	r0, [r3, #8]
 8009e3c:	69fa      	ldr	r2, [r7, #28]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	4413      	add	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	461a      	mov	r2, r3
 8009e48:	4921      	ldr	r1, [pc, #132]	; (8009ed0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf8>)
 8009e4a:	f7f9 f8c7 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate memory for context->eval_tensors, "
                         "%d bytes required",
                         sizeof(TfLiteEvalTensor) * alloc_count);
    return kTfLiteError;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e03a      	b.n	8009ec8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  }

  for (size_t i = 0; i < alloc_count; ++i) {
 8009e52:	2300      	movs	r3, #0
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24
 8009e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d230      	bcs.n	8009ec0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe8>
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 8009e62:	6a38      	ldr	r0, [r7, #32]
 8009e64:	f7fe fd4b 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 fbfb 	bl	800a668 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8009e72:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8009e74:	68b8      	ldr	r0, [r7, #8]
 8009e76:	f7fe fdc1 	bl	80089fc <_ZNK6tflite5Model7buffersEv>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &tensors[i]);
 8009e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e80:	4613      	mov	r3, r2
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	461a      	mov	r2, r3
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	4413      	add	r3, r2
        error_reporter_, &tensors[i]);
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	460b      	mov	r3, r1
 8009e92:	4602      	mov	r2, r0
 8009e94:	4629      	mov	r1, r5
 8009e96:	4620      	mov	r0, r4
 8009e98:	f7ff faf0 	bl	800947c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75fb      	strb	r3, [r7, #23]
    if (status != kTfLiteOk) {
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d008      	beq.n	8009eb8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe0>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eac:	4909      	ldr	r1, [pc, #36]	; (8009ed4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xfc>)
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7f9 f894 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e007      	b.n	8009ec8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  for (size_t i = 0; i < alloc_count; ++i) {
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	3301      	adds	r3, #1
 8009ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ebe:	e7ca      	b.n	8009e56 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7e>
    }
  }
  *eval_tensors = tensors;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	69ba      	ldr	r2, [r7, #24]
 8009ec4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3728      	adds	r7, #40	; 0x28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bdb0      	pop	{r4, r5, r7, pc}
 8009ed0:	08018404 	.word	0x08018404
 8009ed4:	0801844c 	.word	0x0801844c

08009ed8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 8009ed8:	b5b0      	push	{r4, r5, r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	61fb      	str	r3, [r7, #28]
 8009ee8:	68b8      	ldr	r0, [r7, #8]
 8009eea:	f7fe fd08 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 fbab 	bl	800a64c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	4293      	cmp	r3, r2
 8009efc:	bf34      	ite	cc
 8009efe:	2301      	movcc	r3, #1
 8009f00:	2300      	movcs	r3, #0
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d04f      	beq.n	8009fa8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 8009f08:	68b8      	ldr	r0, [r7, #8]
 8009f0a:	f7fe fcf8 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	69f9      	ldr	r1, [r7, #28]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 fba8 	bl	800a668 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8009f18:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 8009f1a:	69b8      	ldr	r0, [r7, #24]
 8009f1c:	f7fe fca2 	bl	8008864 <_ZNK6tflite6Tensor11is_variableEv>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d03c      	beq.n	8009fa0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 8009f26:	69fa      	ldr	r2, [r7, #28]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	461a      	mov	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4413      	add	r3, r2
 8009f36:	f107 0210 	add.w	r2, r7, #16
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fe fbc0 	bl	80086c2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	e02c      	b.n	8009faa <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6858      	ldr	r0, [r3, #4]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	330c      	adds	r3, #12
 8009f5c:	681d      	ldr	r5, [r3, #0]
 8009f5e:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 8009f60:	69fa      	ldr	r2, [r7, #28]
 8009f62:	4613      	mov	r3, r2
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8009f70:	2210      	movs	r2, #16
 8009f72:	47a8      	blx	r5
 8009f74:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 8009f76:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	461a      	mov	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4413      	add	r3, r2
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d108      	bne.n	8009fa0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	4907      	ldr	r1, [pc, #28]	; (8009fb4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7f9 f820 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e004      	b.n	8009faa <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	61fb      	str	r3, [r7, #28]
 8009fa6:	e79f      	b.n	8009ee8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3720      	adds	r7, #32
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	0801846c 	.word	0x0801846c

08009fb8 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	603b      	str	r3, [r7, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6858      	ldr	r0, [r3, #4]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	330c      	adds	r3, #12
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2204      	movs	r2, #4
 8009fd6:	2140      	movs	r1, #64	; 0x40
 8009fd8:	4798      	blx	r3
 8009fda:	4603      	mov	r3, r0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, const SubGraph* subgraph, TfLiteTensor* tensor,
    int tensor_index, bool allocate_temp) {
 8009fe4:	b5b0      	push	{r4, r5, r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp, *subgraph->tensors()->Get(tensor_index),
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7fe fc81 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	f000 fb30 	bl	800a668 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800a008:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800a00a:	68b8      	ldr	r0, [r7, #8]
 800a00c:	f7fe fcf6 	bl	80089fc <_ZNK6tflite5Model7buffersEv>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	689b      	ldr	r3, [r3, #8]
      model->buffers(), error_reporter_, tensor);
 800a014:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	9201      	str	r2, [sp, #4]
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	4603      	mov	r3, r0
 800a020:	462a      	mov	r2, r5
 800a022:	4620      	mov	r0, r4
 800a024:	f7ff f8ce 	bl	80091c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 800a028:	4603      	mov	r3, r0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a034 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 800a03e:	6838      	ldr	r0, [r7, #0]
 800a040:	f7fe fcce 	bl	80089e0 <_ZNK6tflite5Model9subgraphsEv>
 800a044:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f000 fb9c 	bl	800a784 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b01      	cmp	r3, #1
 800a050:	bf14      	ite	ne
 800a052:	2301      	movne	r3, #1
 800a054:	2300      	moveq	r3, #0
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d007      	beq.n	800a06c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	4907      	ldr	r1, [pc, #28]	; (800a080 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 800a062:	4618      	mov	r0, r3
 800a064:	f7f8 ffba 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 800a068:	2300      	movs	r3, #0
 800a06a:	e004      	b.n	800a076 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x42>
  }
  return (*subgraphs)[0];
 800a06c:	2100      	movs	r1, #0
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 fc24 	bl	800a8bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800a074:	4603      	mov	r3, r0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	0801849c 	.word	0x0801849c

0800a084 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, const SubGraph* subgraph,
    TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles) {
 800a084:	b590      	push	{r4, r7, lr}
 800a086:	b0a3      	sub	sp, #140	; 0x8c
 800a088:	af02      	add	r7, sp, #8
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	67fb      	str	r3, [r7, #124]	; 0x7c
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7fe fc31 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 800a09c:	4603      	mov	r3, r0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 fad4 	bl	800a64c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	67bb      	str	r3, [r7, #120]	; 0x78
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 800a0ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	4413      	add	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	677b      	str	r3, [r7, #116]	; 0x74

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6858      	ldr	r0, [r3, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3310      	adds	r3, #16
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2204      	movs	r2, #4
 800a0ca:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a0cc:	4798      	blx	r3
 800a0ce:	6738      	str	r0, [r7, #112]	; 0x70
  if (allocation_info == nullptr) {
 800a0d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d108      	bne.n	800a0e8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x64>
    TF_LITE_REPORT_ERROR(
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a0dc:	4983      	ldr	r1, [pc, #524]	; (800a2ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x268>)
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7f8 ff7c 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 800a0e4:	2401      	movs	r4, #1
 800a0e6:	e0fb      	b.n	800a2e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7fe fc08 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 faab 	bl	800a64c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800a0f6:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	691a      	ldr	r2, [r3, #16]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	4613      	mov	r3, r2
 800a108:	460a      	mov	r2, r1
 800a10a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a10c:	f7fe fcf8 	bl	8008b00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 800a110:	2300      	movs	r3, #0
 800a112:	63fb      	str	r3, [r7, #60]	; 0x3c
  TF_LITE_ENSURE_STATUS(
 800a114:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a118:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a11c:	68b9      	ldr	r1, [r7, #8]
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe febe 	bl	8008ea0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800a124:	4603      	mov	r3, r0
 800a126:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a12a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d002      	beq.n	800a138 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xb4>
 800a132:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 800a136:	e0d3      	b.n	800a2e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 800a138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a13a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	f7fe fcf7 	bl	8008b34 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800a146:	4603      	mov	r3, r0
 800a148:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800a14c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xd6>
 800a154:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 800a158:	e0c2      	b.n	800a2e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f000 f911 	bl	800a382 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800a160:	66b8      	str	r0, [r7, #104]	; 0x68

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 800a162:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a166:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a16a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe ff13 	bl	8008f98 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a178:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x102>
 800a180:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 800a184:	e0ac      	b.n	800a2e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2110      	movs	r1, #16
 800a18c:	4618      	mov	r0, r3
 800a18e:	f003 f915 	bl	800d3bc <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800a192:	6638      	str	r0, [r7, #96]	; 0x60
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6858      	ldr	r0, [r3, #4]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3310      	adds	r3, #16
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2210      	movs	r2, #16
 800a1a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a1a6:	4798      	blx	r3
 800a1a8:	65f8      	str	r0, [r7, #92]	; 0x5c
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 800a1aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10e      	bne.n	800a1ce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x14a>
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6898      	ldr	r0, [r3, #8]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6899      	ldr	r1, [r3, #8]
 800a1b8:	4b4d      	ldr	r3, [pc, #308]	; (800a2f0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x26c>)
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	f240 4333 	movw	r3, #1075	; 0x433
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	4b4c      	ldr	r3, [pc, #304]	; (800a2f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x270>)
 800a1c4:	4a4c      	ldr	r2, [pc, #304]	; (800a2f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x274>)
 800a1c6:	f7f8 ff22 	bl	800300e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800a1ca:	2401      	movs	r4, #1
 800a1cc:	e088      	b.n	800a2e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800a1ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1d0:	f107 0310 	add.w	r3, r7, #16
 800a1d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fb fd9e 	bl	8005d18 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6898      	ldr	r0, [r3, #8]
 800a1e0:	f107 0110 	add.w	r1, r7, #16
 800a1e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a1e8:	f7fe ff21 	bl	800902e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800a1f2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x17c>
 800a1fa:	f897 405b 	ldrb.w	r4, [r7, #91]	; 0x5b
 800a1fe:	e06a      	b.n	800a2d6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3314      	adds	r3, #20
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4610      	mov	r0, r2
 800a210:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	2110      	movs	r1, #16
 800a218:	4618      	mov	r0, r3
 800a21a:	f003 f8cf 	bl	800d3bc <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800a21e:	6578      	str	r0, [r7, #84]	; 0x54

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 800a220:	f107 0310 	add.w	r3, r7, #16
 800a224:	4618      	mov	r0, r3
 800a226:	f7fc f830 	bl	800628a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800a22a:	4602      	mov	r2, r0
 800a22c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a22e:	4293      	cmp	r3, r2
 800a230:	bf34      	ite	cc
 800a232:	2301      	movcc	r3, #1
 800a234:	2300      	movcs	r3, #0
 800a236:	b2db      	uxtb	r3, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00e      	beq.n	800a25a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1d6>
    TF_LITE_REPORT_ERROR(
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	689c      	ldr	r4, [r3, #8]
 800a240:	f107 0310 	add.w	r3, r7, #16
 800a244:	4618      	mov	r0, r3
 800a246:	f7fc f820 	bl	800628a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800a24a:	4602      	mov	r2, r0
 800a24c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a24e:	492b      	ldr	r1, [pc, #172]	; (800a2fc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x278>)
 800a250:	4620      	mov	r0, r4
 800a252:	f7f8 fec3 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 800a256:	2401      	movs	r4, #1
 800a258:	e03d      	b.n	800a2d6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	689c      	ldr	r4, [r3, #8]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	4618      	mov	r0, r3
 800a264:	f003 f89e 	bl	800d3a4 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800a268:	4602      	mov	r2, r0
 800a26a:	f107 0110 	add.w	r1, r7, #16
 800a26e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a274:	4620      	mov	r0, r4
 800a276:	f7fe ff34 	bl	80090e2 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 800a27a:	4603      	mov	r3, r0
 800a27c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800a280:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x20a>
 800a288:	f897 4053 	ldrb.w	r4, [r7, #83]	; 0x53
 800a28c:	e023      	b.n	800a2d6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
  head_usage = planner.GetMaximumMemorySize();
 800a28e:	f107 0310 	add.w	r3, r7, #16
 800a292:	4618      	mov	r0, r3
 800a294:	f7fb fff9 	bl	800628a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800a298:	67f8      	str	r0, [r7, #124]	; 0x7c
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d902      	bls.n	800a2aa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x226>
    max_head_buffer_usage_ = head_usage;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a2a8:	615a      	str	r2, [r3, #20]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6858      	ldr	r0, [r3, #4]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	6951      	ldr	r1, [r2, #20]
 800a2bc:	2210      	movs	r2, #16
 800a2be:	4798      	blx	r3
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800a2c6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x250>
 800a2ce:	f897 4052 	ldrb.w	r4, [r7, #82]	; 0x52
 800a2d2:	e000      	b.n	800a2d6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 800a2d4:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800a2d6:	f107 0310 	add.w	r3, r7, #16
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fb fd6e 	bl	8005dbc <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800a2e0:	4623      	mov	r3, r4
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3784      	adds	r7, #132	; 0x84
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd90      	pop	{r4, r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	080184c8 	.word	0x080184c8
 800a2f0:	08018544 	.word	0x08018544
 800a2f4:	0801850c 	.word	0x0801850c
 800a2f8:	0801852c 	.word	0x0801852c
 800a2fc:	08018560 	.word	0x08018560

0800a300 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 800a312:	f009 fe9d 	bl	8014050 <abort>

  if (scratch_buffer_request_count_ == 0) {
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 800a31e:	2300      	movs	r3, #0
 800a320:	e00e      	b.n	800a340 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6858      	ldr	r0, [r3, #4]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	330c      	adds	r3, #12
 800a32e:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	0091      	lsls	r1, r2, #2
 800a334:	2204      	movs	r2, #4
 800a336:	4798      	blx	r3
 800a338:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	611a      	str	r2, [r3, #16]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6858      	ldr	r0, [r3, #4]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3308      	adds	r3, #8
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2204      	movs	r2, #4
 800a366:	2140      	movs	r1, #64	; 0x40
 800a368:	4798      	blx	r3
 800a36a:	4603      	mov	r3, r0
 800a36c:	73fb      	strb	r3, [r7, #15]
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d001      	beq.n	800a378 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	e000      	b.n	800a37a <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 800a382:	b580      	push	{r7, lr}
 800a384:	b082      	sub	sp, #8
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	4618      	mov	r0, r3
 800a390:	f003 f808 	bl	800d3a4 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800a394:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
 800a396:	2104      	movs	r1, #4
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe f891 	bl	80084c0 <_ZN6tflite14AlignPointerUpEPhj>
 800a39e:	4603      	mov	r3, r0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	3304      	adds	r3, #4
  }
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	781a      	ldrb	r2, [r3, #0]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d305      	bcc.n	800a3e4 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	781a      	ldrb	r2, [r3, #0]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d201      	bcs.n	800a3e8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e000      	b.n	800a3ea <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	460b      	mov	r3, r1
 800a400:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a402:	887b      	ldrh	r3, [r7, #2]
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fac0 	bl	800a98c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800a40c:	4603      	mov	r3, r0
  }
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	460b      	mov	r3, r1
 800a420:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a422:	887b      	ldrh	r3, [r7, #2]
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fad0 	bl	800a9cc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800a42c:	4603      	mov	r3, r0
  }
 800a42e:	4618      	mov	r0, r3
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a436:	b580      	push	{r7, lr}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a442:	887b      	ldrh	r3, [r7, #2]
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fae0 	bl	800aa0c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800a44c:	4603      	mov	r3, r0
  }
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a456:	b580      	push	{r7, lr}
 800a458:	b082      	sub	sp, #8
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	460b      	mov	r3, r1
 800a460:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a462:	887b      	ldrh	r3, [r7, #2]
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 faf0 	bl	800aa4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800a46c:	4603      	mov	r3, r0
  }
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	460b      	mov	r3, r1
 800a480:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a482:	887b      	ldrh	r3, [r7, #2]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fb00 	bl	800aa8c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800a48c:	4603      	mov	r3, r0
  }
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a496:	b580      	push	{r7, lr}
 800a498:	b082      	sub	sp, #8
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a4a2:	887b      	ldrh	r3, [r7, #2]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fb10 	bl	800aacc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800a4ac:	4603      	mov	r3, r0
  }
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a4c2:	887b      	ldrh	r3, [r7, #2]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fb20 	bl	800ab0c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800a4cc:	4603      	mov	r3, r0
  }
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b082      	sub	sp, #8
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a4e2:	887b      	ldrh	r3, [r7, #2]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fb30 	bl	800ab4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800a4ec:	4603      	mov	r3, r0
  }
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a502:	887b      	ldrh	r3, [r7, #2]
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fb40 	bl	800ab8c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800a50c:	4603      	mov	r3, r0
  }
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a522:	887b      	ldrh	r3, [r7, #2]
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fb50 	bl	800abcc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800a52c:	4603      	mov	r3, r0
  }
 800a52e:	4618      	mov	r0, r3
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a542:	887b      	ldrh	r3, [r7, #2]
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fb60 	bl	800ac0c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800a54c:	4603      	mov	r3, r0
  }
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a556:	b580      	push	{r7, lr}
 800a558:	b082      	sub	sp, #8
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4618      	mov	r0, r3
 800a564:	f7f9 fa94 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a568:	4603      	mov	r3, r0
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7f9 fa86 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a584:	4603      	mov	r3, r0
 800a586:	4618      	mov	r0, r3
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7ff ffe9 	bl	800a572 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d306      	bcc.n	800a5b6 <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 800a5a8:	4b0a      	ldr	r3, [pc, #40]	; (800a5d4 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 800a5aa:	4a0b      	ldr	r2, [pc, #44]	; (800a5d8 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 800a5ac:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a5b0:	480a      	ldr	r0, [pc, #40]	; (800a5dc <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 800a5b2:	f009 fd55 	bl	8014060 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fb6a 	bl	800ac90 <_ZNK11flatbuffers6VectorIfE4DataEv>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fb4f 	bl	800ac64 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 800a5c6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a5ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	080185b0 	.word	0x080185b0
 800a5d8:	0801a734 	.word	0x0801a734
 800a5dc:	080185bc 	.word	0x080185bc

0800a5e0 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7f9 fa4f 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a5fc:	b590      	push	{r4, r7, lr}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7ff ffea 	bl	800a5e0 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800a60c:	4602      	mov	r2, r0
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	4293      	cmp	r3, r2
 800a612:	d306      	bcc.n	800a622 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 800a614:	4b0a      	ldr	r3, [pc, #40]	; (800a640 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 800a616:	4a0b      	ldr	r2, [pc, #44]	; (800a644 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 800a618:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a61c:	480a      	ldr	r0, [pc, #40]	; (800a648 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 800a61e:	f009 fd1f 	bl	8014060 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fb56 	bl	800acd4 <_ZNK11flatbuffers6VectorIxE4DataEv>
 800a628:	4603      	mov	r3, r0
 800a62a:	6839      	ldr	r1, [r7, #0]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fb3b 	bl	800aca8 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 800a632:	4603      	mov	r3, r0
 800a634:	460c      	mov	r4, r1
  }
 800a636:	4618      	mov	r0, r3
 800a638:	4621      	mov	r1, r4
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd90      	pop	{r4, r7, pc}
 800a640:	080185b0 	.word	0x080185b0
 800a644:	0801a7fc 	.word	0x0801a7fc
 800a648:	080185bc 	.word	0x080185bc

0800a64c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4618      	mov	r0, r3
 800a65a:	f7f9 fa19 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a65e:	4603      	mov	r3, r0
 800a660:	4618      	mov	r0, r3
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7ff ffea 	bl	800a64c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800a678:	4602      	mov	r2, r0
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d306      	bcc.n	800a68e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 800a680:	4b09      	ldr	r3, [pc, #36]	; (800a6a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 800a682:	4a0a      	ldr	r2, [pc, #40]	; (800a6ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 800a684:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a688:	4809      	ldr	r0, [pc, #36]	; (800a6b0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 800a68a:	f009 fce9 	bl	8014060 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fb40 	bl	800ad14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 800a694:	4603      	mov	r3, r0
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fb27 	bl	800acec <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 800a69e:	4603      	mov	r3, r0
  }
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	080185b0 	.word	0x080185b0
 800a6ac:	0801a540 	.word	0x0801a540
 800a6b0:	080185bc 	.word	0x080185bc

0800a6b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7f9 f9e5 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7ff ffea 	bl	800a6b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d306      	bcc.n	800a6f6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 800a6e8:	4b09      	ldr	r3, [pc, #36]	; (800a710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 800a6ea:	4a0a      	ldr	r2, [pc, #40]	; (800a714 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 800a6ec:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a6f0:	4809      	ldr	r0, [pc, #36]	; (800a718 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 800a6f2:	f009 fcb5 	bl	8014060 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fb2c 	bl	800ad54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	4618      	mov	r0, r3
 800a702:	f000 fb13 	bl	800ad2c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 800a706:	4603      	mov	r3, r0
  }
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	080185b0 	.word	0x080185b0
 800a714:	0801a638 	.word	0x0801a638
 800a718:	080185bc 	.word	0x080185bc

0800a71c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4618      	mov	r0, r3
 800a72a:	f7f9 f9b1 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a72e:	4603      	mov	r3, r0
 800a730:	4618      	mov	r0, r3
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7ff ffea 	bl	800a71c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800a748:	4602      	mov	r2, r0
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d306      	bcc.n	800a75e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800a750:	4b09      	ldr	r3, [pc, #36]	; (800a778 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800a752:	4a0a      	ldr	r2, [pc, #40]	; (800a77c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800a754:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a758:	4809      	ldr	r0, [pc, #36]	; (800a780 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800a75a:	f009 fc81 	bl	8014060 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 fb18 	bl	800ad94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800a764:	4603      	mov	r3, r0
 800a766:	6839      	ldr	r1, [r7, #0]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 faff 	bl	800ad6c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800a76e:	4603      	mov	r3, r0
  }
 800a770:	4618      	mov	r0, r3
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	080185b0 	.word	0x080185b0
 800a77c:	0801a8d4 	.word	0x0801a8d4
 800a780:	080185bc 	.word	0x080185bc

0800a784 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4618      	mov	r0, r3
 800a792:	f7f9 f97d 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a796:	4603      	mov	r3, r0
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff ffea 	bl	800a784 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d306      	bcc.n	800a7c6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 800a7b8:	4b09      	ldr	r3, [pc, #36]	; (800a7e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800a7ba:	4a0a      	ldr	r2, [pc, #40]	; (800a7e4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800a7bc:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a7c0:	4809      	ldr	r0, [pc, #36]	; (800a7e8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800a7c2:	f009 fc4d 	bl	8014060 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fb04 	bl	800add4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 faeb 	bl	800adac <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 800a7d6:	4603      	mov	r3, r0
  }
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	080185b0 	.word	0x080185b0
 800a7e4:	0801a34c 	.word	0x0801a34c
 800a7e8:	080185bc 	.word	0x080185bc

0800a7ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7f9 f949 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a7fe:	4603      	mov	r3, r0
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7ff ffea 	bl	800a7ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 800a818:	4602      	mov	r2, r0
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d306      	bcc.n	800a82e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 800a820:	4b09      	ldr	r3, [pc, #36]	; (800a848 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 800a822:	4a0a      	ldr	r2, [pc, #40]	; (800a84c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 800a824:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a828:	4809      	ldr	r0, [pc, #36]	; (800a850 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 800a82a:	f009 fc19 	bl	8014060 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 faf0 	bl	800ae14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 800a834:	4603      	mov	r3, r0
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fad7 	bl	800adec <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 800a83e:	4603      	mov	r3, r0
  }
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	080185b0 	.word	0x080185b0
 800a84c:	0801a448 	.word	0x0801a448
 800a850:	080185bc 	.word	0x080185bc

0800a854 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4618      	mov	r0, r3
 800a862:	f7f9 f915 	bl	8003a90 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a866:	4603      	mov	r3, r0
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff ffea 	bl	800a854 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800a880:	4602      	mov	r2, r0
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	4293      	cmp	r3, r2
 800a886:	d306      	bcc.n	800a896 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800a888:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800a88a:	4a0a      	ldr	r2, [pc, #40]	; (800a8b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 800a88c:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a890:	4809      	ldr	r0, [pc, #36]	; (800a8b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 800a892:	f009 fbe5 	bl	8014060 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fadc 	bl	800ae54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 800a89c:	4603      	mov	r3, r0
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fac3 	bl	800ae2c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800a8a6:	4603      	mov	r3, r0
  }
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	080185b0 	.word	0x080185b0
 800a8b4:	0801a250 	.word	0x0801a250
 800a8b8:	080185bc 	.word	0x080185bc

0800a8bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff ff69 	bl	800a7a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff ff8f 	bl	800a808 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f9a5 	bl	800ac4c <_ZNK11flatbuffers6VectorIhE4DataEv>
 800a902:	4603      	mov	r3, r0
 800a904:	4618      	mov	r0, r3
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800a920:	f009 fb96 	bl	8014050 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800a92a:	f009 fb91 	bl	8014050 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	607a      	str	r2, [r7, #4]
 800a94a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800a952:	f009 fb7d 	bl	8014050 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800a95c:	f009 fb78 	bl	8014050 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7ff fedb 	bl	800a738 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 800a982:	4603      	mov	r3, r0
 800a984:	4618      	mov	r0, r3
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a998:	887b      	ldrh	r3, [r7, #2]
 800a99a:	4619      	mov	r1, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7f8 fb9e 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	89fb      	ldrh	r3, [r7, #14]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a9ae:	89fb      	ldrh	r3, [r7, #14]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d006      	beq.n	800a9c2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800a9b4:	68b8      	ldr	r0, [r7, #8]
 800a9b6:	f7f9 f884 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	4413      	add	r3, r2
                        : nullptr;
 800a9c0:	e000      	b.n	800a9c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a9c2:	2300      	movs	r3, #0
  }
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a9d8:	887b      	ldrh	r3, [r7, #2]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7f8 fb7e 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	89fb      	ldrh	r3, [r7, #14]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a9ee:	89fb      	ldrh	r3, [r7, #14]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d006      	beq.n	800aa02 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800a9f4:	68b8      	ldr	r0, [r7, #8]
 800a9f6:	f7f9 f864 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	4413      	add	r3, r2
                        : nullptr;
 800aa00:	e000      	b.n	800aa04 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aa02:	2300      	movs	r3, #0
  }
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	460b      	mov	r3, r1
 800aa16:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800aa18:	887b      	ldrh	r3, [r7, #2]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7f8 fb5e 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800aa22:	4603      	mov	r3, r0
 800aa24:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	89fb      	ldrh	r3, [r7, #14]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aa2e:	89fb      	ldrh	r3, [r7, #14]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d006      	beq.n	800aa42 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800aa34:	68b8      	ldr	r0, [r7, #8]
 800aa36:	f7f9 f844 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	4413      	add	r3, r2
                        : nullptr;
 800aa40:	e000      	b.n	800aa44 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aa42:	2300      	movs	r3, #0
  }
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800aa58:	887b      	ldrh	r3, [r7, #2]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7f8 fb3e 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800aa62:	4603      	mov	r3, r0
 800aa64:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	89fb      	ldrh	r3, [r7, #14]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aa6e:	89fb      	ldrh	r3, [r7, #14]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d006      	beq.n	800aa82 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800aa74:	68b8      	ldr	r0, [r7, #8]
 800aa76:	f7f9 f824 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4413      	add	r3, r2
                        : nullptr;
 800aa80:	e000      	b.n	800aa84 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aa82:	2300      	movs	r3, #0
  }
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800aa98:	887b      	ldrh	r3, [r7, #2]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7f8 fb1e 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	89fb      	ldrh	r3, [r7, #14]
 800aaaa:	4413      	add	r3, r2
 800aaac:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aaae:	89fb      	ldrh	r3, [r7, #14]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d006      	beq.n	800aac2 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 800aab4:	68b8      	ldr	r0, [r7, #8]
 800aab6:	f7f9 f804 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800aaba:	4602      	mov	r2, r0
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	4413      	add	r3, r2
                        : nullptr;
 800aac0:	e000      	b.n	800aac4 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aac2:	2300      	movs	r3, #0
  }
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800aad8:	887b      	ldrh	r3, [r7, #2]
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7f8 fafe 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800aae2:	4603      	mov	r3, r0
 800aae4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	89fb      	ldrh	r3, [r7, #14]
 800aaea:	4413      	add	r3, r2
 800aaec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aaee:	89fb      	ldrh	r3, [r7, #14]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d006      	beq.n	800ab02 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800aaf4:	68b8      	ldr	r0, [r7, #8]
 800aaf6:	f7f8 ffe4 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800aafa:	4602      	mov	r2, r0
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	4413      	add	r3, r2
                        : nullptr;
 800ab00:	e000      	b.n	800ab04 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ab02:	2300      	movs	r3, #0
  }
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ab18:	887b      	ldrh	r3, [r7, #2]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7f8 fade 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800ab22:	4603      	mov	r3, r0
 800ab24:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	89fb      	ldrh	r3, [r7, #14]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ab2e:	89fb      	ldrh	r3, [r7, #14]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d006      	beq.n	800ab42 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800ab34:	68b8      	ldr	r0, [r7, #8]
 800ab36:	f7f8 ffc4 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	4413      	add	r3, r2
                        : nullptr;
 800ab40:	e000      	b.n	800ab44 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ab42:	2300      	movs	r3, #0
  }
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ab58:	887b      	ldrh	r3, [r7, #2]
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7f8 fabe 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800ab62:	4603      	mov	r3, r0
 800ab64:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	89fb      	ldrh	r3, [r7, #14]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ab6e:	89fb      	ldrh	r3, [r7, #14]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d006      	beq.n	800ab82 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800ab74:	68b8      	ldr	r0, [r7, #8]
 800ab76:	f7f8 ffa4 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	4413      	add	r3, r2
                        : nullptr;
 800ab80:	e000      	b.n	800ab84 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ab82:	2300      	movs	r3, #0
  }
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ab98:	887b      	ldrh	r3, [r7, #2]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7f8 fa9e 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800aba2:	4603      	mov	r3, r0
 800aba4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	89fb      	ldrh	r3, [r7, #14]
 800abaa:	4413      	add	r3, r2
 800abac:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800abae:	89fb      	ldrh	r3, [r7, #14]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d006      	beq.n	800abc2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800abb4:	68b8      	ldr	r0, [r7, #8]
 800abb6:	f7f8 ff84 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800abba:	4602      	mov	r2, r0
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	4413      	add	r3, r2
                        : nullptr;
 800abc0:	e000      	b.n	800abc4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800abc2:	2300      	movs	r3, #0
  }
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800abd8:	887b      	ldrh	r3, [r7, #2]
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7f8 fa7e 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800abe2:	4603      	mov	r3, r0
 800abe4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	89fb      	ldrh	r3, [r7, #14]
 800abea:	4413      	add	r3, r2
 800abec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800abee:	89fb      	ldrh	r3, [r7, #14]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d006      	beq.n	800ac02 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800abf4:	68b8      	ldr	r0, [r7, #8]
 800abf6:	f7f8 ff64 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800abfa:	4602      	mov	r2, r0
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	4413      	add	r3, r2
                        : nullptr;
 800ac00:	e000      	b.n	800ac04 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ac02:	2300      	movs	r3, #0
  }
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ac18:	887b      	ldrh	r3, [r7, #2]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7f8 fa5e 	bl	80030de <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800ac22:	4603      	mov	r3, r0
 800ac24:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	89fb      	ldrh	r3, [r7, #14]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ac2e:	89fb      	ldrh	r3, [r7, #14]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d006      	beq.n	800ac42 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800ac34:	68b8      	ldr	r0, [r7, #8]
 800ac36:	f7f8 ff44 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	4413      	add	r3, r2
                        : nullptr;
 800ac40:	e000      	b.n	800ac44 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ac42:	2300      	movs	r3, #0
  }
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3304      	adds	r3, #4
  }
 800ac58:	4618      	mov	r0, r3
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	4413      	add	r3, r2
 800ac76:	edd3 7a00 	vldr	s15, [r3]
 800ac7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ac7e:	f7f9 fcd9 	bl	8004634 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800ac82:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ac86:	eeb0 0a67 	vmov.f32	s0, s15
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3304      	adds	r3, #4
  }
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800aca8:	b590      	push	{r4, r7, lr}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	00db      	lsls	r3, r3, #3
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	4413      	add	r3, r2
 800acba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acbe:	4618      	mov	r0, r3
 800acc0:	4621      	mov	r1, r4
 800acc2:	f000 f8d3 	bl	800ae6c <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800acc6:	4603      	mov	r3, r0
 800acc8:	460c      	mov	r4, r1
  }
 800acca:	4618      	mov	r0, r3
 800accc:	4621      	mov	r1, r4
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd90      	pop	{r4, r7, pc}

0800acd4 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3304      	adds	r3, #4
  }
 800ace0:	4618      	mov	r0, r3
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	4413      	add	r3, r2
 800acfe:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7f8 fede 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ad06:	4602      	mov	r2, r0
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4413      	add	r3, r2
  }
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3304      	adds	r3, #4
  }
 800ad20:	4618      	mov	r0, r3
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7f8 febe 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ad46:	4602      	mov	r2, r0
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4413      	add	r3, r2
  }
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3304      	adds	r3, #4
  }
 800ad60:	4618      	mov	r0, r3
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7f8 fe9e 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ad86:	4602      	mov	r2, r0
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4413      	add	r3, r2
  }
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	3304      	adds	r3, #4
  }
 800ada0:	4618      	mov	r0, r3
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	4413      	add	r3, r2
 800adbe:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7f8 fe7e 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800adc6:	4602      	mov	r2, r0
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4413      	add	r3, r2
  }
 800adcc:	4618      	mov	r0, r3
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3304      	adds	r3, #4
  }
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	4413      	add	r3, r2
 800adfe:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7f8 fe5e 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ae06:	4602      	mov	r2, r0
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4413      	add	r3, r2
  }
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3304      	adds	r3, #4
  }
 800ae20:	4618      	mov	r0, r3
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7f8 fe3e 	bl	8003ac2 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ae46:	4602      	mov	r2, r0
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4413      	add	r3, r2
  }
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3304      	adds	r3, #4
  }
 800ae60:	4618      	mov	r0, r3
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800ae6c:	b490      	push	{r4, r7}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800ae76:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bc90      	pop	{r4, r7}
 800ae84:	4770      	bx	lr
	...

0800ae88 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	4a05      	ldr	r2, [pc, #20]	; (800aea8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fd fdcb 	bl	8008a34 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4618      	mov	r0, r3
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	0801a1e8 	.word	0x0801a1e8

0800aeac <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7ff ffe7 	bl	800ae88 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800aeba:	2108      	movs	r1, #8
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f008 fe04 	bl	8013aca <_ZdlPvj>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4618      	mov	r0, r3
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 800aecc:	b580      	push	{r7, lr}
 800aece:	b0c4      	sub	sp, #272	; 0x110
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	f107 030c 	add.w	r3, r7, #12
 800aed6:	6018      	str	r0, [r3, #0]
 800aed8:	f107 0308 	add.w	r3, r7, #8
 800aedc:	6019      	str	r1, [r3, #0]
 800aede:	1d3b      	adds	r3, r7, #4
 800aee0:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800aee2:	1d3b      	adds	r3, r7, #4
 800aee4:	f107 0208 	add.w	r2, r7, #8
 800aee8:	f107 0010 	add.w	r0, r7, #16
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6812      	ldr	r2, [r2, #0]
 800aef0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aef4:	f000 ffa0 	bl	800be38 <MicroVsnprintf>
  DebugLog(log_buffer);
 800aef8:	f107 0310 	add.w	r3, r7, #16
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7f6 f965 	bl	80011cc <DebugLog>
  DebugLog("\r\n");
 800af02:	4804      	ldr	r0, [pc, #16]	; (800af14 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x48>)
 800af04:	f7f6 f962 	bl	80011cc <DebugLog>
#endif
  return 0;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	080185d8 	.word	0x080185d8

0800af18 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>:
  // comes from.
  virtual uint32_t BeginEvent(const char* tag, EventType event_type,
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
 800af18:	b5b0      	push	{r4, r5, r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af04      	add	r7, sp, #16
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3308      	adds	r3, #8
 800af2a:	681d      	ldr	r5, [r3, #0]
 800af2c:	f04f 0300 	mov.w	r3, #0
 800af30:	f04f 0400 	mov.w	r4, #0
 800af34:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800af38:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800af3c:	e9cd 3400 	strd	r3, r4, [sp]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	47a8      	blx	r5
 800af48:	4603      	mov	r3, r0
  }
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bdb0      	pop	{r4, r5, r7, pc}

0800af52 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>:
// of the object and ends when the object goes out of scope.
// The lifetime of tag should be at least the lifetime of `profiler`.
// `profiler` may be null, in which case nothing is profiled.
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
 800af52:	b590      	push	{r4, r7, lr}
 800af54:	b087      	sub	sp, #28
 800af56:	af02      	add	r7, sp, #8
 800af58:	60f8      	str	r0, [r7, #12]
 800af5a:	60b9      	str	r1, [r7, #8]
 800af5c:	607a      	str	r2, [r7, #4]
 800af5e:	603b      	str	r3, [r7, #0]
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	605a      	str	r2, [r3, #4]
    if (profiler) {
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00c      	beq.n	800af8c <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx+0x3a>
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6818      	ldr	r0, [r3, #0]
 800af76:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800af7a:	e9cd 3400 	strd	r3, r4, [sp]
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	6879      	ldr	r1, [r7, #4]
 800af82:	f7ff ffc9 	bl	800af18 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>
 800af86:	4602      	mov	r2, r0
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	605a      	str	r2, [r3, #4]
    }
  }
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	bd90      	pop	{r4, r7, pc}

0800af96 <_ZN6tflite13ScopedProfileD1Ev>:

  ~ScopedProfile() {
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
    if (profiler_) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <_ZN6tflite13ScopedProfileD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3310      	adds	r3, #16
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	6852      	ldr	r2, [r2, #4]
 800afb8:	4611      	mov	r1, r2
 800afba:	4798      	blx	r3
    }
  }
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4618      	mov	r0, r3
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>:
  uint32_t event_handle_;
};

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
 800afc6:	b590      	push	{r4, r7, lr}
 800afc8:	b087      	sub	sp, #28
 800afca:	af02      	add	r7, sp, #8
 800afcc:	60f8      	str	r0, [r7, #12]
 800afce:	60b9      	str	r1, [r7, #8]
 800afd0:	607a      	str	r2, [r7, #4]
 800afd2:	603b      	str	r3, [r7, #0]
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	f04f 0400 	mov.w	r4, #0
 800afdc:	e9cd 3400 	strd	r3, r4, [sp]
 800afe0:	2302      	movs	r3, #2
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	68b9      	ldr	r1, [r7, #8]
 800afe6:	f7ff ffb4 	bl	800af52 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd90      	pop	{r4, r7, pc}

0800aff4 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b000:	4618      	mov	r0, r3
 800b002:	f7fd fc8a 	bl	800891a <_ZNK6tflite8SubGraph6inputsEv>
 800b006:	4603      	mov	r3, r0
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fd fb9a 	bl	8008742 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800b00e:	4603      	mov	r3, r0
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b024:	4618      	mov	r0, r3
 800b026:	f7fd fc78 	bl	800891a <_ZNK6tflite8SubGraph6inputsEv>
 800b02a:	4603      	mov	r3, r0
  }
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b040:	4618      	mov	r0, r3
 800b042:	f7fd fc78 	bl	8008936 <_ZNK6tflite8SubGraph7outputsEv>
 800b046:	4603      	mov	r3, r0
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fd fb7a 	bl	8008742 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800b04e:	4603      	mov	r3, r0
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b064:	4618      	mov	r0, r3
 800b066:	f7fd fc66 	bl	8008936 <_ZNK6tflite8SubGraph7outputsEv>
 800b06a:	4603      	mov	r3, r0
  }
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	695b      	ldr	r3, [r3, #20]
 800b080:	2b20      	cmp	r3, #32
 800b082:	d102      	bne.n	800b08a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	e006      	b.n	800b098 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	4618      	mov	r0, r3
 800b092:	f7fd fb79 	bl	8008788 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800b096:	4603      	mov	r3, r0
  }
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>:

}  // namespace

namespace internal {

ContextHelper::ContextHelper(ErrorReporter* error_reporter,
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	603b      	str	r3, [r7, #0]
                             MicroAllocator* allocator, const Model* model)
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	605a      	str	r2, [r3, #4]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	683a      	ldr	r2, [r7, #0]
 800b0be:	609a      	str	r2, [r3, #8]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	60da      	str	r2, [r3, #12]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	611a      	str	r2, [r3, #16]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextj>:

void* ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                              size_t bytes) {
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b082      	sub	sp, #8
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 800b0e8:	681a      	ldr	r2, [r3, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	330c      	adds	r3, #12
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4798      	blx	r3
 800b0fc:	4603      	mov	r3, r0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 800b106:	b580      	push	{r7, lr}
 800b108:	b086      	sub	sp, #24
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	60f8      	str	r0, [r7, #12]
 800b10e:	60b9      	str	r1, [r7, #8]
 800b110:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(bytes, buffer_idx);
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	68b9      	ldr	r1, [r7, #8]
 800b120:	4618      	mov	r0, r3
 800b122:	f7fe fb57 	bl	80097d4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>
 800b126:	4603      	mov	r3, r0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	60fb      	str	r3, [r7, #12]
  ScratchBufferHandle* handle = helper->scratch_buffer_handles_ + buffer_idx;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	60bb      	str	r3, [r7, #8]
  return handle->data;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	681b      	ldr	r3, [r3, #0]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 800b15c:	b40e      	push	{r1, r2, r3}
 800b15e:	b580      	push	{r7, lr}
 800b160:	b085      	sub	sp, #20
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 800b16c:	f107 0320 	add.w	r3, r7, #32
 800b170:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6858      	ldr	r0, [r3, #4]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3308      	adds	r3, #8
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	69f9      	ldr	r1, [r7, #28]
 800b184:	4798      	blx	r3
  va_end(args);
#endif
}
 800b186:	bf00      	nop
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b190:	b003      	add	sp, #12
 800b192:	4770      	bx	lr

0800b194 <_ZN6tflite8internal13ContextHelper9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* ContextHelper::GetTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	60fb      	str	r3, [r7, #12]
  return helper->allocator_->AllocateTempTfLiteTensor(
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6818      	ldr	r0, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
      helper->model_, helper->eval_tensors_, tensor_idx);
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	681c      	ldr	r4, [r3, #0]
  return helper->allocator_->AllocateTempTfLiteTensor(
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6899      	ldr	r1, [r3, #8]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	68da      	ldr	r2, [r3, #12]
      helper->model_, helper->eval_tensors_, tensor_idx);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	47a0      	blx	r4
 800b1be:	4603      	mov	r3, r0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd90      	pop	{r4, r7, pc}

0800b1c8 <_ZN6tflite8internal13ContextHelper13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* ContextHelper::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(context->impl_);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	60fb      	str	r3, [r7, #12]
  return &helper->eval_tensors_[tensor_idx];
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68d9      	ldr	r1, [r3, #12]
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	440b      	add	r3, r1
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>:

void ContextHelper::SetTfLiteEvalTensors(TfLiteEvalTensor* eval_tensors) {
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  eval_tensors_ = eval_tensors;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	60da      	str	r2, [r3, #12]
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <_ZN6tflite8internal13ContextHelper23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:

void ContextHelper::SetScratchBufferHandles(
    ScratchBufferHandle* scratch_buffer_handles) {
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  scratch_buffer_handles_ = scratch_buffer_handles;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	683a      	ldr	r2, [r7, #0]
 800b21e:	611a      	str	r2, [r3, #16]
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]
 800b238:	603b      	str	r3, [r7, #0]
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      eval_tensors_(nullptr),
      context_helper_(error_reporter_, &allocator_, model),
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	605a      	str	r2, [r3, #4]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	609a      	str	r2, [r3, #8]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	69fa      	ldr	r2, [r7, #28]
 800b250:	60da      	str	r2, [r3, #12]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3310      	adds	r3, #16
 800b256:	2258      	movs	r2, #88	; 0x58
 800b258:	2100      	movs	r1, #0
 800b25a:	4618      	mov	r0, r3
 800b25c:	f008 ffe4 	bl	8014228 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800b260:	69fa      	ldr	r2, [r7, #28]
 800b262:	69b9      	ldr	r1, [r7, #24]
 800b264:	6838      	ldr	r0, [r7, #0]
 800b266:	f7fe f999 	bl	800959c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800b26a:	4602      	mov	r2, r0
      output_tensor_(nullptr) {
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	669a      	str	r2, [r3, #104]	; 0x68
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	671a      	str	r2, [r3, #112]	; 0x70
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	675a      	str	r2, [r3, #116]	; 0x74
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	679a      	str	r2, [r3, #120]	; 0x78
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	68d9      	ldr	r1, [r3, #12]
      context_helper_(error_reporter_, &allocator_, model),
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
      output_tensor_(nullptr) {
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	f7ff fefd 	bl	800b0a0 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 800b2b6:	6a39      	ldr	r1, [r7, #32]
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f000 f84d 	bl	800b358 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d03a      	beq.n	800b34e <_ZN6tflite16MicroInterpreterD1Ev+0x86>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b2d8:	2300      	movs	r3, #0
 800b2da:	617b      	str	r3, [r7, #20]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fd fb36 	bl	8008952 <_ZNK6tflite8SubGraph9operatorsEv>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff f9e3 	bl	800a6b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	bf34      	ite	cc
 800b2f6:	2301      	movcc	r3, #1
 800b2f8:	2300      	movcs	r3, #0
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d026      	beq.n	800b34e <_ZN6tflite16MicroInterpreterD1Ev+0x86>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6819      	ldr	r1, [r3, #0]
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	4613      	mov	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	00db      	lsls	r3, r3, #3
 800b30e:	440b      	add	r3, r1
 800b310:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6819      	ldr	r1, [r3, #0]
 800b316:	697a      	ldr	r2, [r7, #20]
 800b318:	4613      	mov	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 800b322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b324:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00c      	beq.n	800b346 <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d008      	beq.n	800b346 <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
        registration->free(&context_, node->user_data);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	f102 0010 	add.w	r0, r2, #16
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	6912      	ldr	r2, [r2, #16]
 800b342:	4611      	mov	r1, r2
 800b344:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	3301      	adds	r3, #1
 800b34a:	617b      	str	r3, [r7, #20]
 800b34c:	e7c6      	b.n	800b2dc <_ZN6tflite16MicroInterpreterD1Ev+0x14>
      }
    }
  }
}
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	4618      	mov	r0, r3
 800b368:	f7fd fb3a 	bl	80089e0 <_ZNK6tflite5Model9subgraphsEv>
 800b36c:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f7ff fa08 	bl	800a784 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800b374:	4603      	mov	r3, r0
 800b376:	2b01      	cmp	r3, #1
 800b378:	bf14      	ite	ne
 800b37a:	2301      	movne	r3, #1
 800b37c:	2300      	moveq	r3, #0
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00a      	beq.n	800b39a <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	4915      	ldr	r1, [pc, #84]	; (800b3e0 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x88>)
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7f7 fe26 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return;
 800b398:	e01e      	b.n	800b3d8 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x80>
  }
  subgraph_ = (*subgraphs)[0];
 800b39a:	2100      	movs	r1, #0
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f7ff fa8d 	bl	800a8bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	671a      	str	r2, [r3, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4a0b      	ldr	r2, [pc, #44]	; (800b3e4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x8c>)
 800b3b6:	625a      	str	r2, [r3, #36]	; 0x24
  context_.GetTensor = context_helper_.GetTensor;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a0b      	ldr	r2, [pc, #44]	; (800b3e8 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x90>)
 800b3bc:	661a      	str	r2, [r3, #96]	; 0x60
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a0a      	ldr	r2, [pc, #40]	; (800b3ec <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x94>)
 800b3c2:	665a      	str	r2, [r3, #100]	; 0x64
  context_.recommended_num_threads = 1;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	08018c04 	.word	0x08018c04
 800b3e4:	0800b15d 	.word	0x0800b15d
 800b3e8:	0800b195 	.word	0x0800b195
 800b3ec:	0800b1c9 	.word	0x0800b1c9

0800b3f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800b3f0:	b590      	push	{r4, r7, lr}
 800b3f2:	b091      	sub	sp, #68	; 0x44
 800b3f4:	af02      	add	r7, sp, #8
 800b3f6:	6078      	str	r0, [r7, #4]
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6859      	ldr	r1, [r3, #4]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	689a      	ldr	r2, [r3, #8]
 800b404:	687c      	ldr	r4, [r7, #4]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3374      	adds	r3, #116	; 0x74
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	4623      	mov	r3, r4
 800b40e:	f7fe f915 	bl	800963c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>
 800b412:	4603      	mov	r3, r0
                                      &node_and_registrations_,
                                      &eval_tensors_) != kTfLiteOk) {
 800b414:	2b00      	cmp	r3, #0
 800b416:	bf14      	ite	ne
 800b418:	2301      	movne	r3, #1
 800b41a:	2300      	moveq	r3, #0
 800b41c:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00b      	beq.n	800b43a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	497f      	ldr	r1, [pc, #508]	; (800b624 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x234>)
 800b428:	4618      	mov	r0, r3
 800b42a:	f7f7 fdd7 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return kTfLiteError;
 800b436:	2301      	movs	r3, #1
 800b438:	e0f0      	b.n	800b61c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>

  // Update the pointer now that TfLiteEvalTensor allocation has completed on
  // the context helper.
  // TODO(b/16157777): This call would not be needed if ContextHelper rolled
  // into the interpreter.
  context_helper_.SetTfLiteEvalTensors(eval_tensors_);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b444:	4619      	mov	r1, r3
 800b446:	4610      	mov	r0, r2
 800b448:	f7ff fed4 	bl	800b1f4 <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>
  context_.tensors_size = subgraph_->tensors()->size();
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b450:	4618      	mov	r0, r3
 800b452:	f7fd fa54 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 800b456:	4603      	mov	r3, r0
 800b458:	4618      	mov	r0, r3
 800b45a:	f7ff f8f7 	bl	800a64c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800b45e:	4602      	mov	r2, r0
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	611a      	str	r2, [r3, #16]
      }
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a70      	ldr	r2, [pc, #448]	; (800b628 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x238>)
 800b468:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b476:	2300      	movs	r3, #0
 800b478:	637b      	str	r3, [r7, #52]	; 0x34
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fd fa67 	bl	8008952 <_ZNK6tflite8SubGraph9operatorsEv>
 800b484:	4603      	mov	r3, r0
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff f914 	bl	800a6b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800b48c:	4602      	mov	r2, r0
 800b48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b490:	4293      	cmp	r3, r2
 800b492:	bf34      	ite	cc
 800b494:	2301      	movcc	r3, #1
 800b496:	2300      	movcs	r3, #0
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d035      	beq.n	800b50a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
    auto* node = &(node_and_registrations_[i].node);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6819      	ldr	r1, [r3, #0]
 800b4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	440b      	add	r3, r1
 800b4ae:	617b      	str	r3, [r7, #20]
    auto* registration = node_and_registrations_[i].registration;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6819      	ldr	r1, [r3, #0]
 800b4b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4413      	add	r3, r2
 800b4bc:	00db      	lsls	r3, r3, #3
 800b4be:	440b      	add	r3, r1
 800b4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c2:	613b      	str	r3, [r7, #16]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	2b20      	cmp	r3, #32
 800b4ca:	d106      	bne.n	800b4da <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xea>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      init_data_size = node->custom_initial_data_size;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	69db      	ldr	r3, [r3, #28]
 800b4d6:	633b      	str	r3, [r7, #48]	; 0x30
 800b4d8:	e004      	b.n	800b4e4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	62fb      	str	r3, [r7, #44]	; 0x2c
      init_data_size = 0;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (registration->init) {
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00a      	beq.n	800b502 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x112>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	f102 0010 	add.w	r0, r2, #16
 800b4f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4fa:	4798      	blx	r3
 800b4fc:	4602      	mov	r2, r0
      node->user_data =
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b504:	3301      	adds	r3, #1
 800b506:	637b      	str	r3, [r7, #52]	; 0x34
 800b508:	e7b7      	b.n	800b47a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x8a>
    }
  }

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena =
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a47      	ldr	r2, [pc, #284]	; (800b62c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x23c>)
 800b50e:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b510:	2300      	movs	r3, #0
 800b512:	62bb      	str	r3, [r7, #40]	; 0x28
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fd fa1a 	bl	8008952 <_ZNK6tflite8SubGraph9operatorsEv>
 800b51e:	4603      	mov	r3, r0
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff f8c7 	bl	800a6b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800b526:	4602      	mov	r2, r0
 800b528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52a:	4293      	cmp	r3, r2
 800b52c:	bf34      	ite	cc
 800b52e:	2301      	movcc	r3, #1
 800b530:	2300      	movcs	r3, #0
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b00      	cmp	r3, #0
 800b536:	d03c      	beq.n	800b5b2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    auto* node = &(node_and_registrations_[i].node);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6819      	ldr	r1, [r3, #0]
 800b53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	00db      	lsls	r3, r3, #3
 800b546:	440b      	add	r3, r1
 800b548:	623b      	str	r3, [r7, #32]
    auto* registration = node_and_registrations_[i].registration;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6819      	ldr	r1, [r3, #0]
 800b54e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b550:	4613      	mov	r3, r2
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	4413      	add	r3, r2
 800b556:	00db      	lsls	r3, r3, #3
 800b558:	440b      	add	r3, r1
 800b55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55c:	61fb      	str	r3, [r7, #28]
    if (registration->prepare) {
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d01a      	beq.n	800b59c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	3210      	adds	r2, #16
 800b56e:	6a39      	ldr	r1, [r7, #32]
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	4603      	mov	r3, r0
 800b576:	76fb      	strb	r3, [r7, #27]
      if (prepare_status != kTfLiteOk) {
 800b578:	7efb      	ldrb	r3, [r7, #27]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00e      	beq.n	800b59c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
        TF_LITE_REPORT_ERROR(
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	68dc      	ldr	r4, [r3, #12]
 800b582:	69f8      	ldr	r0, [r7, #28]
 800b584:	f7ff fd76 	bl	800b074 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800b588:	4602      	mov	r2, r0
 800b58a:	7efb      	ldrb	r3, [r7, #27]
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b590:	4927      	ldr	r1, [pc, #156]	; (800b630 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x240>)
 800b592:	4620      	mov	r0, r4
 800b594:	f7f7 fd22 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 800b598:	2301      	movs	r3, #1
 800b59a:	e03f      	b.n	800b61c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>
      }
    }
    allocator_.FinishPrepareNodeAllocations(/*node_id=*/i);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fe f967 	bl	8009878 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5b0:	e7b0      	b.n	800b514 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x124>
  }

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a1c      	ldr	r2, [pc, #112]	; (800b634 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x244>)
 800b5c2:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6859      	ldr	r1, [r3, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3378      	adds	r3, #120	; 0x78
 800b5d4:	f7fe f88e 	bl	80096f4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	73fb      	strb	r3, [r7, #15]
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1f6>
 800b5e2:	7bfb      	ldrb	r3, [r7, #15]
 800b5e4:	e01a      	b.n	800b61c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>
                    allocator_.FinishModelAllocation(model_, eval_tensors_,
                                                     &scratch_buffer_handles_));
  // TODO(b/16157777): Remove this when ContextHelper is rolled into this class.
  context_helper_.SetScratchBufferHandles(scratch_buffer_handles_);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	4610      	mov	r0, r2
 800b5f4:	f7ff fe0c 	bl	800b210 <_ZN6tflite8internal13ContextHelper23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f995 	bl	800b928 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800b5fe:	4603      	mov	r3, r0
 800b600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d002      	beq.n	800b612 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x222>
 800b60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b610:	e004      	b.n	800b61c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>

  tensors_allocated_ = true;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  return kTfLiteOk;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	373c      	adds	r7, #60	; 0x3c
 800b620:	46bd      	mov	sp, r7
 800b622:	bd90      	pop	{r4, r7, pc}
 800b624:	08018c30 	.word	0x08018c30
 800b628:	0800b0db 	.word	0x0800b0db
 800b62c:	0800b107 	.word	0x0800b107
 800b630:	08018c54 	.word	0x08018c54
 800b634:	0800b131 	.word	0x0800b131

0800b638 <_ZN6tflite21ScopedOperatorProfileD1Ev>:
class ScopedOperatorProfile : public ScopedProfile {
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff fca7 	bl	800af96 <_ZN6tflite13ScopedProfileD1Ev>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800b654:	b5b0      	push	{r4, r5, r7, lr}
 800b656:	b08c      	sub	sp, #48	; 0x30
 800b658:	af02      	add	r7, sp, #8
 800b65a:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800b662:	2b00      	cmp	r3, #0
 800b664:	d007      	beq.n	800b676 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	4947      	ldr	r1, [pc, #284]	; (800b788 <_ZN6tflite16MicroInterpreter6InvokeEv+0x134>)
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7f7 fcb5 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800b672:	2401      	movs	r4, #1
 800b674:	e082      	b.n	800b77c <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800b67c:	f083 0301 	eor.w	r3, r3, #1
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2b00      	cmp	r3, #0
 800b684:	d009      	beq.n	800b69a <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff feb2 	bl	800b3f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800b68c:	4603      	mov	r3, r0
 800b68e:	75bb      	strb	r3, [r7, #22]
 800b690:	7dbb      	ldrb	r3, [r7, #22]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800b696:	7dbc      	ldrb	r4, [r7, #22]
 800b698:	e070      	b.n	800b77c <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
  }

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b69a:	2300      	movs	r3, #0
 800b69c:	627b      	str	r3, [r7, #36]	; 0x24
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fd f955 	bl	8008952 <_ZNK6tflite8SubGraph9operatorsEv>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff f802 	bl	800a6b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	bf34      	ite	cc
 800b6b8:	2301      	movcc	r3, #1
 800b6ba:	2300      	movcs	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d05b      	beq.n	800b77a <_ZN6tflite16MicroInterpreter6InvokeEv+0x126>
    auto* node = &(node_and_registrations_[i].node);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6819      	ldr	r1, [r3, #0]
 800b6c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	440b      	add	r3, r1
 800b6d2:	623b      	str	r3, [r7, #32]
    auto* registration = node_and_registrations_[i].registration;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6819      	ldr	r1, [r3, #0]
 800b6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6da:	4613      	mov	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	00db      	lsls	r3, r3, #3
 800b6e2:	440b      	add	r3, r1
 800b6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e6:	61fb      	str	r3, [r7, #28]

    if (registration->invoke) {
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d040      	beq.n	800b772 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11e>
      TfLiteStatus invoke_status;
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by
      // ScopedOperatorProfile.
      tflite::Profiler* profiler =
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6f4:	61bb      	str	r3, [r7, #24]
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
 800b6f6:	69f8      	ldr	r0, [r7, #28]
 800b6f8:	f7ff fcbc 	bl	800b074 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b700:	f107 000c 	add.w	r0, r7, #12
 800b704:	69b9      	ldr	r1, [r7, #24]
 800b706:	f7ff fc5e 	bl	800afc6 <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>
#endif
      invoke_status = registration->invoke(&context_, node);
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	3210      	adds	r2, #16
 800b712:	6a39      	ldr	r1, [r7, #32]
 800b714:	4610      	mov	r0, r2
 800b716:	4798      	blx	r3
 800b718:	4603      	mov	r3, r0
 800b71a:	75fb      	strb	r3, [r7, #23]

      // All TfLiteTensor structs used in the kernel are allocated from temp
      // memory in the allocator. This creates a chain of allocations in the
      // temp section. The call below resets the chain of allocations to
      // prepare for the next call.
      allocator_.ResetTempAllocations();
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3308      	adds	r3, #8
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4610      	mov	r0, r2
 800b72c:	4798      	blx	r3

      if (invoke_status == kTfLiteError) {
 800b72e:	7dfb      	ldrb	r3, [r7, #23]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d10f      	bne.n	800b754 <_ZN6tflite16MicroInterpreter6InvokeEv+0x100>
        TF_LITE_REPORT_ERROR(
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	68dc      	ldr	r4, [r3, #12]
 800b738:	69f8      	ldr	r0, [r7, #28]
 800b73a:	f7ff fc9b 	bl	800b074 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800b73e:	4602      	mov	r2, r0
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	4911      	ldr	r1, [pc, #68]	; (800b78c <_ZN6tflite16MicroInterpreter6InvokeEv+0x138>)
 800b748:	4620      	mov	r0, r4
 800b74a:	f7f7 fc47 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %d) failed to invoke with status %d",
            OpNameFromRegistration(registration), i, invoke_status);
        return kTfLiteError;
 800b74e:	2401      	movs	r4, #1
 800b750:	2500      	movs	r5, #0
 800b752:	e006      	b.n	800b762 <_ZN6tflite16MicroInterpreter6InvokeEv+0x10e>
      } else if (invoke_status != kTfLiteOk) {
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d002      	beq.n	800b760 <_ZN6tflite16MicroInterpreter6InvokeEv+0x10c>
        return invoke_status;
 800b75a:	7dfc      	ldrb	r4, [r7, #23]
 800b75c:	2500      	movs	r5, #0
 800b75e:	e000      	b.n	800b762 <_ZN6tflite16MicroInterpreter6InvokeEv+0x10e>
 800b760:	2501      	movs	r5, #1
 800b762:	f107 030c 	add.w	r3, r7, #12
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff ff66 	bl	800b638 <_ZN6tflite21ScopedOperatorProfileD1Ev>
 800b76c:	2d01      	cmp	r5, #1
 800b76e:	d105      	bne.n	800b77c <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
          profiler, OpNameFromRegistration(registration), i);
 800b770:	bf00      	nop
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	3301      	adds	r3, #1
 800b776:	627b      	str	r3, [r7, #36]	; 0x24
 800b778:	e791      	b.n	800b69e <_ZN6tflite16MicroInterpreter6InvokeEv+0x4a>
      }
    }
  }
  return kTfLiteOk;
 800b77a:	2400      	movs	r4, #0
 800b77c:	4623      	mov	r3, r4
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3728      	adds	r7, #40	; 0x28
 800b782:	46bd      	mov	sp, r7
 800b784:	bdb0      	pop	{r4, r5, r7, pc}
 800b786:	bf00      	nop
 800b788:	08018c8c 	.word	0x08018c8c
 800b78c:	08018cbc 	.word	0x08018cbc

0800b790 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800b790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
  const size_t length = inputs_size();
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7ff fc2a 	bl	800aff4 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800b7a0:	6178      	str	r0, [r7, #20]
  if (index >= length) {
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d308      	bcc.n	800b7bc <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	68d8      	ldr	r0, [r3, #12]
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	4928      	ldr	r1, [pc, #160]	; (800b854 <_ZN6tflite16MicroInterpreter5inputEj+0xc4>)
 800b7b4:	f7f7 fc12 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	e046      	b.n	800b84a <_ZN6tflite16MicroInterpreter5inputEj+0xba>
  }
  if (index != 0) {
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d01f      	beq.n	800b802 <_ZN6tflite16MicroInterpreter5inputEj+0x72>
    TF_LITE_REPORT_ERROR(
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	4924      	ldr	r1, [pc, #144]	; (800b858 <_ZN6tflite16MicroInterpreter5inputEj+0xc8>)
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7f7 fc07 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Input tensors not at index 0 are allocated from the "
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                                     inputs().Get(index));
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681c      	ldr	r4, [r3, #0]
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	685e      	ldr	r6, [r3, #4]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7e2:	607b      	str	r3, [r7, #4]
                                                     inputs().Get(index));
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7ff fc17 	bl	800b018 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	68b9      	ldr	r1, [r7, #8]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7f8 fa3e 	bl	8003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	47a0      	blx	r4
 800b7fe:	4603      	mov	r3, r0
 800b800:	e023      	b.n	800b84a <_ZN6tflite16MicroInterpreter5inputEj+0xba>
  }
  if (input_tensor_ == nullptr) {
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d11b      	bne.n	800b844 <_ZN6tflite16MicroInterpreter5inputEj+0xb4>
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, inputs().Get(index));
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681c      	ldr	r4, [r3, #0]
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	685e      	ldr	r6, [r3, #4]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b820:	607b      	str	r3, [r7, #4]
        model_, eval_tensors_, inputs().Get(index));
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f7ff fbf8 	bl	800b018 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800b828:	4603      	mov	r3, r0
 800b82a:	68b9      	ldr	r1, [r7, #8]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7f8 fa1f 	bl	8003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800b832:	4603      	mov	r3, r0
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	4631      	mov	r1, r6
 800b838:	4628      	mov	r0, r5
 800b83a:	47a0      	blx	r4
 800b83c:	4602      	mov	r2, r0
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
  return input_tensor_;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	371c      	adds	r7, #28
 800b84e:	46bd      	mov	sp, r7
 800b850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b852:	bf00      	nop
 800b854:	08018cf0 	.word	0x08018cf0
 800b858:	08018d1c 	.word	0x08018d1c

0800b85c <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800b85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b85e:	b087      	sub	sp, #28
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
  const size_t length = outputs_size();
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f7ff fbe4 	bl	800b034 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800b86c:	6178      	str	r0, [r7, #20]
  if (index >= length) {
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	429a      	cmp	r2, r3
 800b874:	d308      	bcc.n	800b888 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68d8      	ldr	r0, [r3, #12]
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	4928      	ldr	r1, [pc, #160]	; (800b920 <_ZN6tflite16MicroInterpreter6outputEj+0xc4>)
 800b880:	f7f7 fbac 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800b884:	2300      	movs	r3, #0
 800b886:	e046      	b.n	800b916 <_ZN6tflite16MicroInterpreter6outputEj+0xba>
  }
  if (index != 0) {
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d01f      	beq.n	800b8ce <_ZN6tflite16MicroInterpreter6outputEj+0x72>
    TF_LITE_REPORT_ERROR(
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	4924      	ldr	r1, [pc, #144]	; (800b924 <_ZN6tflite16MicroInterpreter6outputEj+0xc8>)
 800b894:	4618      	mov	r0, r3
 800b896:	f7f7 fba1 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Output tensors not at index 0 are allocated from the "
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                                     outputs().Get(index));
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681c      	ldr	r4, [r3, #0]
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	685e      	ldr	r6, [r3, #4]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8ae:	607b      	str	r3, [r7, #4]
                                                     outputs().Get(index));
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f7ff fbd1 	bl	800b058 <_ZNK6tflite16MicroInterpreter7outputsEv>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	68b9      	ldr	r1, [r7, #8]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7f8 f9d8 	bl	8003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	4631      	mov	r1, r6
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	47a0      	blx	r4
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	e023      	b.n	800b916 <_ZN6tflite16MicroInterpreter6outputEj+0xba>
  }
  if (output_tensor_ == nullptr) {
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d11b      	bne.n	800b910 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>
    // TODO(b/162311891): Drop these allocations when the interpreter supports
    // handling buffers from TfLiteEvalTensor.
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, outputs().Get(index));
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681c      	ldr	r4, [r3, #0]
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	685e      	ldr	r6, [r3, #4]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8ec:	607b      	str	r3, [r7, #4]
        model_, eval_tensors_, outputs().Get(index));
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f7ff fbb2 	bl	800b058 <_ZNK6tflite16MicroInterpreter7outputsEv>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	68b9      	ldr	r1, [r7, #8]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f8 f9b9 	bl	8003c70 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800b8fe:	4603      	mov	r3, r0
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	4631      	mov	r1, r6
 800b904:	4628      	mov	r0, r5
 800b906:	47a0      	blx	r4
 800b908:	4602      	mov	r2, r0
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
  return output_tensor_;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
}
 800b916:	4618      	mov	r0, r3
 800b918:	371c      	adds	r7, #28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b91e:	bf00      	nop
 800b920:	08018d94 	.word	0x08018d94
 800b924:	08018dc0 	.word	0x08018dc0

0800b928 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
  }
  return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                   index);
}

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800b928:	b590      	push	{r4, r7, lr}
 800b92a:	b089      	sub	sp, #36	; 0x24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 800b930:	2300      	movs	r3, #0
 800b932:	61fb      	str	r3, [r7, #28]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fc ffe0 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 800b93e:	4603      	mov	r3, r0
 800b940:	4618      	mov	r0, r3
 800b942:	f7fe fe83 	bl	800a64c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800b946:	4602      	mov	r2, r0
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	4293      	cmp	r3, r2
 800b94c:	bf34      	ite	cc
 800b94e:	2301      	movcc	r3, #1
 800b950:	2300      	movcs	r3, #0
 800b952:	b2db      	uxtb	r3, r3
 800b954:	2b00      	cmp	r3, #0
 800b956:	d053      	beq.n	800ba00 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd8>
    auto* tensor = subgraph_->tensors()->Get(i);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fc ffce 	bl	80088fe <_ZNK6tflite8SubGraph7tensorsEv>
 800b962:	4603      	mov	r3, r0
 800b964:	69f9      	ldr	r1, [r7, #28]
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe fe7e 	bl	800a668 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800b96c:	6178      	str	r0, [r7, #20]
    if (tensor->is_variable()) {
 800b96e:	6978      	ldr	r0, [r7, #20]
 800b970:	f7fc ff78 	bl	8008864 <_ZNK6tflite6Tensor11is_variableEv>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d03e      	beq.n	800b9f8 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd0>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800b97e:	69fa      	ldr	r2, [r7, #28]
 800b980:	4613      	mov	r3, r2
 800b982:	005b      	lsls	r3, r3, #1
 800b984:	4413      	add	r3, r2
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	440b      	add	r3, r1
 800b98a:	f107 020c 	add.w	r2, r7, #12
 800b98e:	4611      	mov	r1, r2
 800b990:	4618      	mov	r0, r3
 800b992:	f7fc fe96 	bl	80086c2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800b996:	4603      	mov	r3, r0
 800b998:	74fb      	strb	r3, [r7, #19]
 800b99a:	7cfb      	ldrb	r3, [r7, #19]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x7c>
 800b9a0:	7cfb      	ldrb	r3, [r7, #19]
 800b9a2:	e02e      	b.n	800ba02 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xda>
          TfLiteEvalTensorByteLength(&eval_tensors_[i], &buffer_size));

      int value = 0;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	61bb      	str	r3, [r7, #24]
      if (tensor->type() == tflite::TensorType_INT8) {
 800b9a8:	6978      	ldr	r0, [r7, #20]
 800b9aa:	f7fc fd79 	bl	80084a0 <_ZNK6tflite6Tensor4typeEv>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b09      	cmp	r3, #9
 800b9b2:	bf0c      	ite	eq
 800b9b4:	2301      	moveq	r3, #1
 800b9b6:	2300      	movne	r3, #0
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00e      	beq.n	800b9dc <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xb4>
        value = tensor->quantization()->zero_point()->Get(0);
 800b9be:	6978      	ldr	r0, [r7, #20]
 800b9c0:	f7fc ff42 	bl	8008848 <_ZNK6tflite6Tensor12quantizationEv>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fc ff12 	bl	80087f0 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fe fe13 	bl	800a5fc <_ZNK11flatbuffers6VectorIxE3GetEm>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	460c      	mov	r4, r1
 800b9da:	61bb      	str	r3, [r7, #24]
      }
      memset(eval_tensors_[i].data.raw, value, buffer_size);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	4413      	add	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	440b      	add	r3, r1
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	69b9      	ldr	r1, [r7, #24]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f008 fc18 	bl	8014228 <memset>
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	61fb      	str	r3, [r7, #28]
 800b9fe:	e799      	b.n	800b934 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xc>
    }
  }

  return kTfLiteOk;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3724      	adds	r7, #36	; 0x24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd90      	pop	{r4, r7, pc}

0800ba0a <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800ba0a:	b480      	push	{r7}
 800ba0c:	b087      	sub	sp, #28
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
 800ba12:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d20e      	bcs.n	800ba44 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	1c5a      	adds	r2, r3, #1
 800ba30:	617a      	str	r2, [r7, #20]
 800ba32:	693a      	ldr	r2, [r7, #16]
 800ba34:	7812      	ldrb	r2, [r2, #0]
 800ba36:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	1e5a      	subs	r2, r3, #1
 800ba3c:	613a      	str	r2, [r7, #16]
 800ba3e:	7bfa      	ldrb	r2, [r7, #15]
 800ba40:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800ba42:	e7ec      	b.n	800ba1e <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800ba44:	687b      	ldr	r3, [r7, #4]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	371c      	adds	r7, #28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800ba52:	b480      	push	{r7}
 800ba54:	b087      	sub	sp, #28
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	607a      	str	r2, [r7, #4]
  char* current = main;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800ba70:	e7f7      	b.n	800ba62 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	4413      	add	r3, r2
 800ba7a:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00e      	beq.n	800baa2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d20a      	bcs.n	800baa2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	781a      	ldrb	r2, [r3, #0]
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	701a      	strb	r2, [r3, #0]
    ++current;
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	3301      	adds	r3, #1
 800ba98:	617b      	str	r3, [r7, #20]
    ++to_append;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800baa0:	e7ec      	b.n	800ba7c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	2200      	movs	r2, #0
 800baa6:	701a      	strb	r2, [r3, #0]
  return current;
 800baa8:	697b      	ldr	r3, [r7, #20]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	371c      	adds	r7, #28
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b088      	sub	sp, #32
 800baba:	af00      	add	r7, sp, #0
 800babc:	60f8      	str	r0, [r7, #12]
 800babe:	60b9      	str	r1, [r7, #8]
 800bac0:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	fbb3 f1f2 	udiv	r1, r3, r2
 800bace:	fb02 f201 	mul.w	r2, r2, r1
 800bad2:	1a9b      	subs	r3, r3, r2
 800bad4:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	2b09      	cmp	r3, #9
 800bada:	dc04      	bgt.n	800bae6 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	3330      	adds	r3, #48	; 0x30
 800bae2:	77fb      	strb	r3, [r7, #31]
 800bae4:	e003      	b.n	800baee <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	3357      	adds	r3, #87	; 0x57
 800baec:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	60ba      	str	r2, [r7, #8]
 800baf4:	7ffa      	ldrb	r2, [r7, #31]
 800baf6:	701a      	strb	r2, [r3, #0]
    i /= base;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb00:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d000      	beq.n	800bb0a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800bb08:	e7dd      	b.n	800bac6 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800bb10:	68b9      	ldr	r1, [r7, #8]
 800bb12:	69b8      	ldr	r0, [r7, #24]
 800bb14:	f7ff ff79 	bl	800ba0a <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800bb18:	68bb      	ldr	r3, [r7, #8]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3720      	adds	r7, #32
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b084      	sub	sp, #16
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	da07      	bge.n	800bb46 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	1c5a      	adds	r2, r3, #1
 800bb3a:	603a      	str	r2, [r7, #0]
 800bb3c:	222d      	movs	r2, #45	; 0x2d
 800bb3e:	701a      	strb	r2, [r3, #0]
    u = -u;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	425b      	negs	r3, r3
 800bb44:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800bb46:	220a      	movs	r2, #10
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f7ff ffb3 	bl	800bab6 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800bb50:	4603      	mov	r3, r0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b090      	sub	sp, #64	; 0x40
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	60f8      	str	r0, [r7, #12]
 800bb62:	60b9      	str	r1, [r7, #8]
 800bb64:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800bb66:	f107 0310 	add.w	r3, r7, #16
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7ff ffd8 	bl	800bb22 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800bb72:	f107 0310 	add.w	r3, r7, #16
 800bb76:	461a      	mov	r2, r3
 800bb78:	68b9      	ldr	r1, [r7, #8]
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff ff69 	bl	800ba52 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800bb80:	4603      	mov	r3, r0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3740      	adds	r7, #64	; 0x40
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b090      	sub	sp, #64	; 0x40
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	607a      	str	r2, [r7, #4]
 800bb96:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800bb98:	f107 0310 	add.w	r3, r7, #16
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	4619      	mov	r1, r3
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7ff ff88 	bl	800bab6 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800bba6:	f107 0310 	add.w	r3, r7, #16
 800bbaa:	461a      	mov	r2, r3
 800bbac:	68b9      	ldr	r1, [r7, #8]
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f7ff ff4f 	bl	800ba52 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800bbb4:	4603      	mov	r3, r0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3740      	adds	r7, #64	; 0x40
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800bbc0:	b590      	push	{r4, r7, lr}
 800bbc2:	b09b      	sub	sp, #108	; 0x6c
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	ed87 0a01 	vstr	s0, [r7, #4]
 800bbca:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	332f      	adds	r3, #47	; 0x2f
 800bbd4:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800bbd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbda:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800bbdc:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800bbe0:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800bbe2:	2317      	movs	r3, #23
 800bbe4:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800bbe6:	237f      	movs	r3, #127	; 0x7f
 800bbe8:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800bbea:	4b6a      	ldr	r3, [pc, #424]	; (800bd94 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800bbec:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	0ddb      	lsrs	r3, r3, #23
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800bbfa:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bc02:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	da05      	bge.n	800bc16 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 800bc0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc0c:	222d      	movs	r2, #45	; 0x2d
 800bc0e:	701a      	strb	r2, [r3, #0]
    current += 1;
 800bc10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc12:	3301      	adds	r3, #1
 800bc14:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800bc16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc18:	2200      	movs	r2, #0
 800bc1a:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1e:	2b80      	cmp	r3, #128	; 0x80
 800bc20:	d118      	bne.n	800bc54 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800bc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 800bc28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	4a5a      	ldr	r2, [pc, #360]	; (800bd98 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800bc30:	4619      	mov	r1, r3
 800bc32:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bc34:	f7ff ff0d 	bl	800ba52 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800bc38:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800bc3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc3c:	e0a5      	b.n	800bd8a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800bc3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc42:	1ad3      	subs	r3, r2, r3
 800bc44:	4a55      	ldr	r2, [pc, #340]	; (800bd9c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800bc46:	4619      	mov	r1, r3
 800bc48:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bc4a:	f7ff ff02 	bl	800ba52 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800bc4e:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800bc50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc52:	e09a      	b.n	800bd8a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800bc54:	230d      	movs	r3, #13
 800bc56:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800bc58:	4b51      	ldr	r3, [pc, #324]	; (800bda0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800bc5a:	f107 040c 	add.w	r4, r7, #12
 800bc5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc60:	c407      	stmia	r4!, {r0, r1, r2}
 800bc62:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800bc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc66:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800bc68:	2300      	movs	r3, #0
 800bc6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc6e:	2b0c      	cmp	r3, #12
 800bc70:	dc0f      	bgt.n	800bc92 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800bc72:	f107 020c 	add.w	r2, r7, #12
 800bc76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc78:	4413      	add	r3, r2
 800bc7a:	f993 3000 	ldrsb.w	r3, [r3]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc82:	40d3      	lsrs	r3, r2
 800bc84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc86:	4413      	add	r3, r2
 800bc88:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800bc8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc90:	e7ec      	b.n	800bc6c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800bc92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc94:	2231      	movs	r2, #49	; 0x31
 800bc96:	701a      	strb	r2, [r3, #0]
  current += 1;
 800bc98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800bc9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bca0:	222e      	movs	r2, #46	; 0x2e
 800bca2:	701a      	strb	r2, [r3, #0]
  current += 1;
 800bca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bca6:	3301      	adds	r3, #1
 800bca8:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800bcaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcac:	2200      	movs	r2, #0
 800bcae:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800bcb0:	2307      	movs	r3, #7
 800bcb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800bcb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bcb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	2b07      	cmp	r3, #7
 800bcbc:	dc01      	bgt.n	800bcc2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800bcbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcc0:	e063      	b.n	800bd8a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcc8:	2b06      	cmp	r3, #6
 800bcca:	dc08      	bgt.n	800bcde <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 800bccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcd0:	4413      	add	r3, r2
 800bcd2:	2230      	movs	r2, #48	; 0x30
 800bcd4:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800bcd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcd8:	3301      	adds	r3, #1
 800bcda:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcdc:	e7f3      	b.n	800bcc6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800bcde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bce0:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800bce2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bce6:	1ad1      	subs	r1, r2, r3
 800bce8:	230a      	movs	r3, #10
 800bcea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bcee:	f7ff ff4c 	bl	800bb8a <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800bcf2:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800bcf4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	f1c3 0307 	rsb	r3, r3, #7
 800bd02:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800bd04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd06:	2230      	movs	r2, #48	; 0x30
 800bd08:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 800bd0a:	6a3b      	ldr	r3, [r7, #32]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d018      	beq.n	800bd42 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800bd10:	2300      	movs	r3, #0
 800bd12:	657b      	str	r3, [r7, #84]	; 0x54
 800bd14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	da0f      	bge.n	800bd3c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 800bd1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800bd22:	6a3b      	ldr	r3, [r7, #32]
 800bd24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd26:	4413      	add	r3, r2
 800bd28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd2a:	7812      	ldrb	r2, [r2, #0]
 800bd2c:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800bd2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd30:	2230      	movs	r2, #48	; 0x30
 800bd32:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800bd34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd36:	3301      	adds	r3, #1
 800bd38:	657b      	str	r3, [r7, #84]	; 0x54
 800bd3a:	e7eb      	b.n	800bd14 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 800bd3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd3e:	3307      	adds	r3, #7
 800bd40:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800bd42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd44:	3b01      	subs	r3, #1
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	2b30      	cmp	r3, #48	; 0x30
 800bd4a:	d108      	bne.n	800bd5e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 800bd4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d203      	bcs.n	800bd5e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800bd56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800bd5c:	e7f1      	b.n	800bd42 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800bd5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd60:	2200      	movs	r2, #0
 800bd62:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800bd64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	4a0e      	ldr	r2, [pc, #56]	; (800bda4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bd70:	f7ff fe6f 	bl	800ba52 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800bd74:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800bd76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bd82:	f7ff feea 	bl	800bb5a <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800bd86:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800bd88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	376c      	adds	r7, #108	; 0x6c
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd90      	pop	{r4, r7, pc}
 800bd92:	bf00      	nop
 800bd94:	007fffff 	.word	0x007fffff
 800bd98:	08018ebc 	.word	0x08018ebc
 800bd9c:	08018ec0 	.word	0x08018ec0
 800bda0:	08018ec8 	.word	0x08018ec8
 800bda4:	08018ec4 	.word	0x08018ec4

0800bda8 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800bdb2:	6879      	ldr	r1, [r7, #4]
 800bdb4:	6838      	ldr	r0, [r7, #0]
 800bdb6:	f7ff feb4 	bl	800bb22 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	1ad3      	subs	r3, r2, r3
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b082      	sub	sp, #8
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800bdd4:	220a      	movs	r2, #10
 800bdd6:	6879      	ldr	r1, [r7, #4]
 800bdd8:	6838      	ldr	r0, [r7, #0]
 800bdda:	f7ff fe6c 	bl	800bab6 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800bdde:	4603      	mov	r3, r0
 800bde0:	461a      	mov	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	1ad3      	subs	r3, r2, r3
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800bdf8:	2210      	movs	r2, #16
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	6838      	ldr	r0, [r7, #0]
 800bdfe:	f7ff fe5a 	bl	800bab6 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800be02:	4603      	mov	r3, r0
 800be04:	461a      	mov	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	1ad3      	subs	r3, r2, r3
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	ed97 0a00 	vldr	s0, [r7]
 800be24:	f7ff fecc 	bl	800bbc0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800be28:	4603      	mov	r3, r0
 800be2a:	461a      	mov	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	1ad3      	subs	r3, r2, r3
}
 800be30:	4618      	mov	r0, r3
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800be38:	b5b0      	push	{r4, r5, r7, lr}
 800be3a:	b08a      	sub	sp, #40	; 0x28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800be46:	2300      	movs	r3, #0
 800be48:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	3b01      	subs	r3, #1
 800be52:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 8109 	beq.w	800c070 <MicroVsnprintf+0x238>
 800be5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	429a      	cmp	r2, r3
 800be64:	f280 8104 	bge.w	800c070 <MicroVsnprintf+0x238>
    if (*current == '%') {
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	2b25      	cmp	r3, #37	; 0x25
 800be6e:	f040 80f3 	bne.w	800c058 <MicroVsnprintf+0x220>
      current++;
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	3301      	adds	r3, #1
 800be76:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800be78:	6a3b      	ldr	r3, [r7, #32]
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	2b66      	cmp	r3, #102	; 0x66
 800be7e:	f000 8083 	beq.w	800bf88 <MicroVsnprintf+0x150>
 800be82:	2b66      	cmp	r3, #102	; 0x66
 800be84:	dc05      	bgt.n	800be92 <MicroVsnprintf+0x5a>
 800be86:	2b25      	cmp	r3, #37	; 0x25
 800be88:	f000 80b4 	beq.w	800bff4 <MicroVsnprintf+0x1bc>
 800be8c:	2b64      	cmp	r3, #100	; 0x64
 800be8e:	d008      	beq.n	800bea2 <MicroVsnprintf+0x6a>
 800be90:	e0ed      	b.n	800c06e <MicroVsnprintf+0x236>
 800be92:	2b75      	cmp	r3, #117	; 0x75
 800be94:	d026      	beq.n	800bee4 <MicroVsnprintf+0xac>
 800be96:	2b78      	cmp	r3, #120	; 0x78
 800be98:	d045      	beq.n	800bf26 <MicroVsnprintf+0xee>
 800be9a:	2b73      	cmp	r3, #115	; 0x73
 800be9c:	f000 80b6 	beq.w	800c00c <MicroVsnprintf+0x1d4>
 800bea0:	e0e5      	b.n	800c06e <MicroVsnprintf+0x236>
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800bea2:	69ba      	ldr	r2, [r7, #24]
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	2b0a      	cmp	r3, #10
 800beaa:	dc09      	bgt.n	800bec0 <MicroVsnprintf+0x88>
            output[output_index++] = '\0';
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	1c5a      	adds	r2, r3, #1
 800beb0:	627a      	str	r2, [r7, #36]	; 0x24
 800beb2:	461a      	mov	r2, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4413      	add	r3, r2
 800beb8:	2200      	movs	r2, #0
 800beba:	701a      	strb	r2, [r3, #0]
            return output_index;
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	e0e0      	b.n	800c082 <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	18d0      	adds	r0, r2, r3
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	1d1a      	adds	r2, r3, #4
 800beca:	603a      	str	r2, [r7, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4619      	mov	r1, r3
 800bed0:	f7ff ff6a 	bl	800bda8 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800bed4:	4602      	mov	r2, r0
          output_index +=
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	4413      	add	r3, r2
 800beda:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800bedc:	6a3b      	ldr	r3, [r7, #32]
 800bede:	3301      	adds	r3, #1
 800bee0:	623b      	str	r3, [r7, #32]
          break;
 800bee2:	e0c4      	b.n	800c06e <MicroVsnprintf+0x236>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800bee4:	69ba      	ldr	r2, [r7, #24]
 800bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	2b0a      	cmp	r3, #10
 800beec:	dc09      	bgt.n	800bf02 <MicroVsnprintf+0xca>
            output[output_index++] = '\0';
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	627a      	str	r2, [r7, #36]	; 0x24
 800bef4:	461a      	mov	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	4413      	add	r3, r2
 800befa:	2200      	movs	r2, #0
 800befc:	701a      	strb	r2, [r3, #0]
            return output_index;
 800befe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf00:	e0bf      	b.n	800c082 <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	18d0      	adds	r0, r2, r3
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	1d1a      	adds	r2, r3, #4
 800bf0c:	603a      	str	r2, [r7, #0]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4619      	mov	r1, r3
 800bf12:	f7ff ff5a 	bl	800bdca <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800bf16:	4602      	mov	r2, r0
          output_index +=
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	4413      	add	r3, r2
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	3301      	adds	r3, #1
 800bf22:	623b      	str	r3, [r7, #32]
          break;
 800bf24:	e0a3      	b.n	800c06e <MicroVsnprintf+0x236>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800bf26:	69ba      	ldr	r2, [r7, #24]
 800bf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	2b09      	cmp	r3, #9
 800bf2e:	dc09      	bgt.n	800bf44 <MicroVsnprintf+0x10c>
            output[output_index++] = '\0';
 800bf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	627a      	str	r2, [r7, #36]	; 0x24
 800bf36:	461a      	mov	r2, r3
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	701a      	strb	r2, [r3, #0]
            return output_index;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf42:	e09e      	b.n	800c082 <MicroVsnprintf+0x24a>
          }
          output[output_index++] = '0';
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	1c5a      	adds	r2, r3, #1
 800bf48:	627a      	str	r2, [r7, #36]	; 0x24
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	2230      	movs	r2, #48	; 0x30
 800bf52:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	627a      	str	r2, [r7, #36]	; 0x24
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4413      	add	r3, r2
 800bf60:	2278      	movs	r2, #120	; 0x78
 800bf62:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	18d0      	adds	r0, r2, r3
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	1d1a      	adds	r2, r3, #4
 800bf6e:	603a      	str	r2, [r7, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4619      	mov	r1, r3
 800bf74:	f7ff ff3b 	bl	800bdee <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800bf78:	4602      	mov	r2, r0
          output_index +=
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7c:	4413      	add	r3, r2
 800bf7e:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	3301      	adds	r3, #1
 800bf84:	623b      	str	r3, [r7, #32]
          break;
 800bf86:	e072      	b.n	800c06e <MicroVsnprintf+0x236>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800bf88:	69ba      	ldr	r2, [r7, #24]
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	ee07 3a90 	vmov	s15, r3
 800bf92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf96:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800bf9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa2:	d509      	bpl.n	800bfb8 <MicroVsnprintf+0x180>
            output[output_index++] = '\0';
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	627a      	str	r2, [r7, #36]	; 0x24
 800bfaa:	461a      	mov	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	4413      	add	r3, r2
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	701a      	strb	r2, [r3, #0]
            return output_index;
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	e064      	b.n	800c082 <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	18d5      	adds	r5, r2, r3
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	3307      	adds	r3, #7
 800bfc2:	f023 0307 	bic.w	r3, r3, #7
 800bfc6:	f103 0208 	add.w	r2, r3, #8
 800bfca:	603a      	str	r2, [r7, #0]
 800bfcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	f7f4 fdf8 	bl	8000bc8 <__aeabi_d2f>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	ee00 3a10 	vmov	s0, r3
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f7ff ff17 	bl	800be12 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800bfe4:	4602      	mov	r2, r0
          output_index +=
 800bfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe8:	4413      	add	r3, r2
 800bfea:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	3301      	adds	r3, #1
 800bff0:	623b      	str	r3, [r7, #32]
          break;
 800bff2:	e03c      	b.n	800c06e <MicroVsnprintf+0x236>
        case '%':
          output[output_index++] = *current++;
 800bff4:	6a3b      	ldr	r3, [r7, #32]
 800bff6:	1c5a      	adds	r2, r3, #1
 800bff8:	623a      	str	r2, [r7, #32]
 800bffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bffc:	1c51      	adds	r1, r2, #1
 800bffe:	6279      	str	r1, [r7, #36]	; 0x24
 800c000:	4611      	mov	r1, r2
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	440a      	add	r2, r1
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	7013      	strb	r3, [r2, #0]
          break;
 800c00a:	e030      	b.n	800c06e <MicroVsnprintf+0x236>
        case 's':
          char* string = va_arg(args, char*);
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	1d1a      	adds	r2, r3, #4
 800c010:	603a      	str	r2, [r7, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800c01a:	69fa      	ldr	r2, [r7, #28]
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	4413      	add	r3, r2
 800c020:	69ba      	ldr	r2, [r7, #24]
 800c022:	429a      	cmp	r2, r3
 800c024:	dd14      	ble.n	800c050 <MicroVsnprintf+0x218>
                 string[string_idx] != '\0') {
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	4413      	add	r3, r2
 800c02c:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00e      	beq.n	800c050 <MicroVsnprintf+0x218>
            output[output_index++] = string[string_idx++];
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	61fa      	str	r2, [r7, #28]
 800c038:	461a      	mov	r2, r3
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	441a      	add	r2, r3
 800c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c040:	1c59      	adds	r1, r3, #1
 800c042:	6279      	str	r1, [r7, #36]	; 0x24
 800c044:	4619      	mov	r1, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	440b      	add	r3, r1
 800c04a:	7812      	ldrb	r2, [r2, #0]
 800c04c:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800c04e:	e7e4      	b.n	800c01a <MicroVsnprintf+0x1e2>
          }
          current++;
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	3301      	adds	r3, #1
 800c054:	623b      	str	r3, [r7, #32]
 800c056:	e6fd      	b.n	800be54 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 800c058:	6a3b      	ldr	r3, [r7, #32]
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	623a      	str	r2, [r7, #32]
 800c05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c060:	1c51      	adds	r1, r2, #1
 800c062:	6279      	str	r1, [r7, #36]	; 0x24
 800c064:	4611      	mov	r1, r2
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	440a      	add	r2, r1
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800c06e:	e6f1      	b.n	800be54 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	627a      	str	r2, [r7, #36]	; 0x24
 800c076:	461a      	mov	r2, r3
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	4413      	add	r3, r2
 800c07c:	2200      	movs	r2, #0
 800c07e:	701a      	strb	r2, [r3, #0]
  return output_index;
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c082:	4618      	mov	r0, r3
 800c084:	3728      	adds	r7, #40	; 0x28
 800c086:	46bd      	mov	sp, r7
 800c088:	bdb0      	pop	{r4, r5, r7, pc}

0800c08a <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "common.h"
#include "op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 800c08a:	b480      	push	{r7}
 800c08c:	b085      	sub	sp, #20
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
  int result = 1;
 800c092:	2301      	movs	r3, #1
 800c094:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800c096:	2300      	movs	r3, #0
 800c098:	60bb      	str	r3, [r7, #8]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	da0c      	bge.n	800c0be <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4413      	add	r3, r2
 800c0ac:	685a      	ldr	r2, [r3, #4]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	fb02 f303 	mul.w	r3, r2, r3
 800c0b4:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	60bb      	str	r3, [r7, #8]
 800c0bc:	e7ed      	b.n	800c09a <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 800c0be:	68fb      	ldr	r3, [r7, #12]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2106      	movs	r1, #6
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fe f9bc 	bl	800a456 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800c0de:	4603      	mov	r3, r0
  }
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	2108      	movs	r1, #8
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7f7 fd3c 	bl	8003b74 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800c0fc:	4603      	mov	r3, r0
  }
 800c0fe:	4618      	mov	r0, r3
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
	...

0800c108 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800c108:	b580      	push	{r7, lr}
 800c10a:	b088      	sub	sp, #32
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
 800c114:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800c116:	2300      	movs	r3, #0
 800c118:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	2200      	movs	r2, #0
 800c11e:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 ff96 	bl	800d052 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800c126:	4603      	mov	r3, r0
 800c128:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f7ff ffdc 	bl	800c0e8 <_ZNK6tflite12OperatorCode7versionEv>
 800c130:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 800c132:	7fbb      	ldrb	r3, [r7, #30]
 800c134:	2b83      	cmp	r3, #131	; 0x83
 800c136:	d908      	bls.n	800c14a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 800c138:	7fbb      	ldrb	r3, [r7, #30]
 800c13a:	461a      	mov	r2, r3
 800c13c:	492a      	ldr	r1, [pc, #168]	; (800c1e8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7f6 ff4c 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 800c144:	2301      	movs	r3, #1
 800c146:	77fb      	strb	r3, [r7, #31]
 800c148:	e048      	b.n	800c1dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800c14a:	7fbb      	ldrb	r3, [r7, #30]
 800c14c:	2b20      	cmp	r3, #32
 800c14e:	d01a      	beq.n	800c186 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	7fb9      	ldrb	r1, [r7, #30]
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	68b8      	ldr	r0, [r7, #8]
 800c15c:	4798      	blx	r3
 800c15e:	4602      	mov	r2, r0
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d137      	bne.n	800c1dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 800c16c:	7fbb      	ldrb	r3, [r7, #30]
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fc fb0a 	bl	8008788 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800c174:	4602      	mov	r2, r0
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	491c      	ldr	r1, [pc, #112]	; (800c1ec <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7f6 ff2e 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800c180:	2301      	movs	r3, #1
 800c182:	77fb      	strb	r3, [r7, #31]
 800c184:	e02a      	b.n	800c1dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f7ff ffa0 	bl	800c0cc <_ZNK6tflite12OperatorCode11custom_codeEv>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	bf0c      	ite	eq
 800c192:	2301      	moveq	r3, #1
 800c194:	2300      	movne	r3, #0
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d006      	beq.n	800c1aa <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 800c19c:	4914      	ldr	r1, [pc, #80]	; (800c1f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7f6 ff1c 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	77fb      	strb	r3, [r7, #31]
 800c1a8:	e018      	b.n	800c1dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f7ff ff8e 	bl	800c0cc <_ZNK6tflite12OperatorCode11custom_codeEv>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fc fad1 	bl	800875a <_ZNK11flatbuffers6String5c_strEv>
 800c1b8:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	3304      	adds	r3, #4
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	69ba      	ldr	r2, [r7, #24]
 800c1c4:	6979      	ldr	r1, [r7, #20]
 800c1c6:	68b8      	ldr	r0, [r7, #8]
 800c1c8:	4798      	blx	r3
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800c1dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3720      	adds	r7, #32
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	08019500 	.word	0x08019500
 800c1ec:	08019554 	.word	0x08019554
 800c1f0:	0801958c 	.word	0x0801958c

0800c1f4 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800c1f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c1f8:	b088      	sub	sp, #32
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	ed87 0b02 	vstr	d0, [r7, #8]
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800c204:	f04f 0200 	mov.w	r2, #0
 800c208:	f04f 0300 	mov.w	r3, #0
 800c20c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c210:	f7f4 fc6a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d006      	beq.n	800c228 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2200      	movs	r2, #0
 800c224:	601a      	str	r2, [r3, #0]
 800c226:	e06a      	b.n	800c2fe <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800c228:	6838      	ldr	r0, [r7, #0]
 800c22a:	ed97 0b02 	vldr	d0, [r7, #8]
 800c22e:	f007 fd0f 	bl	8013c50 <frexp>
 800c232:	ed87 0b06 	vstr	d0, [r7, #24]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800c236:	f04f 0200 	mov.w	r2, #0
 800c23a:	4b33      	ldr	r3, [pc, #204]	; (800c308 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 800c23c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c240:	f7f4 f9ea 	bl	8000618 <__aeabi_dmul>
 800c244:	4603      	mov	r3, r0
 800c246:	460c      	mov	r4, r1
 800c248:	ec44 3b17 	vmov	d7, r3, r4
 800c24c:	eeb0 0a47 	vmov.f32	s0, s14
 800c250:	eef0 0a67 	vmov.f32	s1, s15
 800c254:	f000 f951 	bl	800c4fa <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800c258:	ec54 3b10 	vmov	r3, r4, d0
 800c25c:	4618      	mov	r0, r3
 800c25e:	4621      	mov	r1, r4
 800c260:	f7f4 fd6a 	bl	8000d38 <__aeabi_d2lz>
 800c264:	4603      	mov	r3, r0
 800c266:	460c      	mov	r4, r1
 800c268:	e9c7 3404 	strd	r3, r4, [r7, #16]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800c26c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c270:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c274:	f04f 0200 	mov.w	r2, #0
 800c278:	4299      	cmp	r1, r3
 800c27a:	eb72 0304 	sbcs.w	r3, r2, r4
 800c27e:	da01      	bge.n	800c284 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>
 800c280:	f007 fee6 	bl	8014050 <abort>
  if (q_fixed == (1ll << 31)) {
 800c284:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c288:	2c00      	cmp	r4, #0
 800c28a:	bf08      	it	eq
 800c28c:	f1b3 4f00 	cmpeq.w	r3, #2147483648	; 0x80000000
 800c290:	d114      	bne.n	800c2bc <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 800c292:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 800c296:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800c29a:	4611      	mov	r1, r2
 800c29c:	f04f 0200 	mov.w	r2, #0
 800c2a0:	eb1b 0301 	adds.w	r3, fp, r1
 800c2a4:	eb4c 0402 	adc.w	r4, ip, r2
 800c2a8:	1064      	asrs	r4, r4, #1
 800c2aa:	ea4f 0333 	mov.w	r3, r3, rrx
 800c2ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ++*shift;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	1c5a      	adds	r2, r3, #1
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800c2bc:	f7f4 ffb2 	bl	8001224 <_ZNSt14numeric_limitsIlE3maxEv>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800c2c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c2cc:	4299      	cmp	r1, r3
 800c2ce:	eb72 0304 	sbcs.w	r3, r2, r4
 800c2d2:	da01      	bge.n	800c2d8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 800c2d4:	f007 febc 	bl	8014050 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f113 0f1f 	cmn.w	r3, #31
 800c2e0:	da08      	bge.n	800c2f4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800c2e8:	f04f 0300 	mov.w	r3, #0
 800c2ec:	f04f 0400 	mov.w	r4, #0
 800c2f0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800c2f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	601a      	str	r2, [r3, #0]
}
 800c2fe:	3720      	adds	r7, #32
 800c300:	46bd      	mov	sp, r7
 800c302:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800c306:	bf00      	nop
 800c308:	41e00000 	.word	0x41e00000

0800c30c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	ed87 0b02 	vstr	d0, [r7, #8]
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800c31a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c31e:	f04f 0200 	mov.w	r2, #0
 800c322:	4b0e      	ldr	r3, [pc, #56]	; (800c35c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x50>)
 800c324:	f7f4 fc08 	bl	8000b38 <__aeabi_dcmpgt>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800c32e:	f007 fe8f 	bl	8014050 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800c332:	ed97 7b02 	vldr	d7, [r7, #8]
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	eeb0 0a47 	vmov.f32	s0, s14
 800c33e:	eef0 0a67 	vmov.f32	s1, s15
 800c342:	f7ff ff57 	bl	800c1f4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	da01      	bge.n	800c352 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x46>
 800c34e:	f007 fe7f 	bl	8014050 <abort>
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	3ff00000 	.word	0x3ff00000

0800c360 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800c360:	b590      	push	{r4, r7, lr}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c376:	461a      	mov	r2, r3
 800c378:	4623      	mov	r3, r4
 800c37a:	f7f4 fbbf 	bl	8000afc <__aeabi_dcmplt>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <_ZSt3minIdERKT_S2_S2_+0x28>
	return __b;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	e000      	b.n	800c38a <_ZSt3minIdERKT_S2_S2_+0x2a>
      return __a;
 800c388:	687b      	ldr	r3, [r7, #4]
    }
 800c38a:	4618      	mov	r0, r3
 800c38c:	370c      	adds	r7, #12
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd90      	pop	{r4, r7, pc}
 800c392:	0000      	movs	r0, r0
 800c394:	0000      	movs	r0, r0
	...

0800c398 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800c398:	b5b0      	push	{r4, r5, r7, lr}
 800c39a:	b08e      	sub	sp, #56	; 0x38
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	ed87 0b06 	vstr	d0, [r7, #24]
 800c3a2:	ed87 1b04 	vstr	d1, [r7, #16]
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800c3ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c3b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c3b4:	f7f4 f930 	bl	8000618 <__aeabi_dmul>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	4625      	mov	r5, r4
 800c3be:	461c      	mov	r4, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f1c3 031f 	rsb	r3, r3, #31
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7f4 f8b9 	bl	8000544 <__aeabi_i2d>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	4629      	mov	r1, r5
 800c3da:	f7f4 f91d 	bl	8000618 <__aeabi_dmul>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	460c      	mov	r4, r1
 800c3e2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800c3e6:	a40e      	add	r4, pc, #56	; (adr r4, 800c420 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800c3e8:	e9d4 3400 	ldrd	r3, r4, [r4]
 800c3ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800c3f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c3f4:	f107 0320 	add.w	r3, r7, #32
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7ff ffb0 	bl	800c360 <_ZSt3minIdERKT_S2_S2_>
 800c400:	4603      	mov	r3, r0
 800c402:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c406:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800c40a:	6879      	ldr	r1, [r7, #4]
 800c40c:	68b8      	ldr	r0, [r7, #8]
 800c40e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800c412:	f7ff ff7b 	bl	800c30c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800c416:	bf00      	nop
 800c418:	3738      	adds	r7, #56	; 0x38
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bdb0      	pop	{r4, r5, r7, pc}
 800c41e:	bf00      	nop
 800c420:	ffc00000 	.word	0xffc00000
 800c424:	41dfffff 	.word	0x41dfffff

0800c428 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	b087      	sub	sp, #28
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800c436:	2201      	movs	r2, #1
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	fa02 f303 	lsl.w	r3, r2, r3
 800c43e:	3b01      	subs	r3, #1
 800c440:	4618      	mov	r0, r3
 800c442:	f7f4 f87f 	bl	8000544 <__aeabi_i2d>
 800c446:	4682      	mov	sl, r0
 800c448:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	1ad1      	subs	r1, r2, r3
 800c450:	f04f 0201 	mov.w	r2, #1
 800c454:	f04f 0300 	mov.w	r3, #0
 800c458:	f1a1 0620 	sub.w	r6, r1, #32
 800c45c:	f1c1 0020 	rsb	r0, r1, #32
 800c460:	fa03 f901 	lsl.w	r9, r3, r1
 800c464:	fa02 f606 	lsl.w	r6, r2, r6
 800c468:	ea49 0906 	orr.w	r9, r9, r6
 800c46c:	fa22 f000 	lsr.w	r0, r2, r0
 800c470:	ea49 0900 	orr.w	r9, r9, r0
 800c474:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800c478:	4640      	mov	r0, r8
 800c47a:	4649      	mov	r1, r9
 800c47c:	f7f4 f89e 	bl	80005bc <__aeabi_l2d>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	4650      	mov	r0, sl
 800c486:	4659      	mov	r1, fp
 800c488:	f7f4 f8c6 	bl	8000618 <__aeabi_dmul>
 800c48c:	4602      	mov	r2, r0
 800c48e:	460b      	mov	r3, r1
 800c490:	4690      	mov	r8, r2
 800c492:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800c494:	f04f 0201 	mov.w	r2, #1
 800c498:	f04f 0300 	mov.w	r3, #0
 800c49c:	68b9      	ldr	r1, [r7, #8]
 800c49e:	f1a1 0620 	sub.w	r6, r1, #32
 800c4a2:	f1c1 0020 	rsb	r0, r1, #32
 800c4a6:	fa03 f501 	lsl.w	r5, r3, r1
 800c4aa:	fa02 f606 	lsl.w	r6, r2, r6
 800c4ae:	4335      	orrs	r5, r6
 800c4b0:	fa22 f000 	lsr.w	r0, r2, r0
 800c4b4:	4305      	orrs	r5, r0
 800c4b6:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	4629      	mov	r1, r5
 800c4be:	f7f4 f87d 	bl	80005bc <__aeabi_l2d>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	460c      	mov	r4, r1
  const double max_input_rescaled =
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	4623      	mov	r3, r4
 800c4ca:	4640      	mov	r0, r8
 800c4cc:	4649      	mov	r1, r9
 800c4ce:	f7f4 f9cd 	bl	800086c <__aeabi_ddiv>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	460c      	mov	r4, r1
 800c4d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800c4da:	ed97 0b04 	vldr	d0, [r7, #16]
 800c4de:	f007 fb33 	bl	8013b48 <floor>
 800c4e2:	ec54 3b10 	vmov	r3, r4, d0
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	f7f4 fb45 	bl	8000b78 <__aeabi_d2iz>
 800c4ee:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	371c      	adds	r7, #28
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4fa <_ZN6tflite11TfLiteRoundIdEET_S1_>:
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	ed87 0b00 	vstr	d0, [r7]
 800c504:	ed97 0b00 	vldr	d0, [r7]
 800c508:	f007 fbd8 	bl	8013cbc <round>
 800c50c:	eeb0 7a40 	vmov.f32	s14, s0
 800c510:	eef0 7a60 	vmov.f32	s15, s1
 800c514:	eeb0 0a47 	vmov.f32	s0, s14
 800c518:	eef0 0a67 	vmov.f32	s1, s15
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <_ZN20PreviousResultsQueueC1EPN6tflite13ErrorReporterE>:
// accurate overall prediction. This doesn't use any dynamic memory allocation
// so it's a better fit for microcontroller applications, but this does mean
// there are hard limits on the number of results it can store.
class PreviousResultsQueue {
 public:
  PreviousResultsQueue(tflite::ErrorReporter* error_reporter)
 800c522:	b5b0      	push	{r4, r5, r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter), front_index_(0), size_(0) {}
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	3304      	adds	r3, #4
 800c536:	2431      	movs	r4, #49	; 0x31
 800c538:	461d      	mov	r5, r3
 800c53a:	2c00      	cmp	r4, #0
 800c53c:	db05      	blt.n	800c54a <_ZN20PreviousResultsQueueC1EPN6tflite13ErrorReporterE+0x28>
 800c53e:	4628      	mov	r0, r5
 800c540:	f000 f810 	bl	800c564 <_ZN20PreviousResultsQueue6ResultC1Ev>
 800c544:	350c      	adds	r5, #12
 800c546:	3c01      	subs	r4, #1
 800c548:	e7f7      	b.n	800c53a <_ZN20PreviousResultsQueueC1EPN6tflite13ErrorReporterE+0x18>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bdb0      	pop	{r4, r5, r7, pc}

0800c564 <_ZN20PreviousResultsQueue6ResultC1Ev>:

  // Data structure that holds an inference result, and the time when it
  // was recorded.
  struct Result {
    Result() : time_(0), scores() {}
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	601a      	str	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	1d1a      	adds	r2, r3, #4
 800c576:	2305      	movs	r3, #5
 800c578:	2b00      	cmp	r3, #0
 800c57a:	db04      	blt.n	800c586 <_ZN20PreviousResultsQueue6ResultC1Ev+0x22>
 800c57c:	2100      	movs	r1, #0
 800c57e:	7011      	strb	r1, [r2, #0]
 800c580:	3201      	adds	r2, #1
 800c582:	3b01      	subs	r3, #1
 800c584:	e7f8      	b.n	800c578 <_ZN20PreviousResultsQueue6ResultC1Ev+0x14>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4618      	mov	r0, r3
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <_ZN20PreviousResultsQueue6ResultC1ElPa>:
    Result(int32_t time, int8_t* input_scores) : time_(time) {
 800c594:	b480      	push	{r7}
 800c596:	b087      	sub	sp, #28
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < kCategoryCount; ++i) {
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	617b      	str	r3, [r7, #20]
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	2b05      	cmp	r3, #5
 800c5ae:	dc0e      	bgt.n	800c5ce <_ZN20PreviousResultsQueue6ResultC1ElPa+0x3a>
        scores[i] = input_scores[i];
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	f993 1000 	ldrsb.w	r1, [r3]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	4413      	add	r3, r2
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	460a      	mov	r2, r1
 800c5c4:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < kCategoryCount; ++i) {
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	617b      	str	r3, [r7, #20]
 800c5cc:	e7ed      	b.n	800c5aa <_ZN20PreviousResultsQueue6ResultC1ElPa+0x16>
      }
    }
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	371c      	adds	r7, #28
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <_ZN20PreviousResultsQueue4sizeEv>:
    int32_t time_;
    int8_t scores[kCategoryCount];
  };

  int size() { return size_; }
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <_ZN20PreviousResultsQueue5emptyEv>:
  bool empty() { return size_ == 0; }
 800c5f6:	b480      	push	{r7}
 800c5f8:	b083      	sub	sp, #12
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c604:	2b00      	cmp	r3, #0
 800c606:	bf0c      	ite	eq
 800c608:	2301      	moveq	r3, #1
 800c60a:	2300      	movne	r3, #0
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	4618      	mov	r0, r3
 800c610:	370c      	adds	r7, #12
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <_ZN20PreviousResultsQueue5frontEv>:
  Result& front() { return results_[front_index_]; }
 800c61a:	b480      	push	{r7}
 800c61c:	b083      	sub	sp, #12
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 800c628:	4613      	mov	r3, r2
 800c62a:	005b      	lsls	r3, r3, #1
 800c62c:	4413      	add	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	4413      	add	r3, r2
 800c634:	3304      	adds	r3, #4
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <_ZN20PreviousResultsQueue4backEv>:
  Result& back() {
 800c642:	b480      	push	{r7}
 800c644:	b085      	sub	sp, #20
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
    int back_index = front_index_ + (size_ - 1);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c656:	3b01      	subs	r3, #1
 800c658:	4413      	add	r3, r2
 800c65a:	60fb      	str	r3, [r7, #12]
    if (back_index >= kMaxResults) {
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2b31      	cmp	r3, #49	; 0x31
 800c660:	dd02      	ble.n	800c668 <_ZN20PreviousResultsQueue4backEv+0x26>
      back_index -= kMaxResults;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3b32      	subs	r3, #50	; 0x32
 800c666:	60fb      	str	r3, [r7, #12]
    }
    return results_[back_index];
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	4613      	mov	r3, r2
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	4413      	add	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	4413      	add	r3, r2
 800c676:	3304      	adds	r3, #4
  }
 800c678:	4618      	mov	r0, r3
 800c67a:	3714      	adds	r7, #20
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <_ZN20PreviousResultsQueue9push_backERKNS_6ResultE>:

  void push_back(const Result& entry) {
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
    if (size() >= kMaxResults) {
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7ff ffa4 	bl	800c5dc <_ZN20PreviousResultsQueue4sizeEv>
 800c694:	4603      	mov	r3, r0
 800c696:	2b31      	cmp	r3, #49	; 0x31
 800c698:	bfcc      	ite	gt
 800c69a:	2301      	movgt	r3, #1
 800c69c:	2300      	movle	r3, #0
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d006      	beq.n	800c6b2 <_ZN20PreviousResultsQueue9push_backERKNS_6ResultE+0x2e>
      TF_LITE_REPORT_ERROR(
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	490c      	ldr	r1, [pc, #48]	; (800c6dc <_ZN20PreviousResultsQueue9push_backERKNS_6ResultE+0x58>)
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7f6 fc96 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Couldn't push_back latest result, too many already!");
      return;
 800c6b0:	e011      	b.n	800c6d6 <_ZN20PreviousResultsQueue9push_backERKNS_6ResultE+0x52>
    }
    size_ += 1;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c6b8:	1c5a      	adds	r2, r3, #1
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
    back() = entry;
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7ff ffbe 	bl	800c642 <_ZN20PreviousResultsQueue4backEv>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	6810      	ldr	r0, [r2, #0]
 800c6cc:	6851      	ldr	r1, [r2, #4]
 800c6ce:	6018      	str	r0, [r3, #0]
 800c6d0:	6059      	str	r1, [r3, #4]
 800c6d2:	8912      	ldrh	r2, [r2, #8]
 800c6d4:	811a      	strh	r2, [r3, #8]
  }
 800c6d6:	3708      	adds	r7, #8
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	080195c4 	.word	0x080195c4

0800c6e0 <_ZN20PreviousResultsQueue9pop_frontEv>:

  Result pop_front() {
 800c6e0:	b590      	push	{r4, r7, lr}
 800c6e2:	b087      	sub	sp, #28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
    if (size() <= 0) {
 800c6ea:	6838      	ldr	r0, [r7, #0]
 800c6ec:	f7ff ff76 	bl	800c5dc <_ZN20PreviousResultsQueue4sizeEv>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	bfd4      	ite	le
 800c6f6:	2301      	movle	r3, #1
 800c6f8:	2300      	movgt	r3, #0
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d009      	beq.n	800c714 <_ZN20PreviousResultsQueue9pop_frontEv+0x34>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4919      	ldr	r1, [pc, #100]	; (800c76c <_ZN20PreviousResultsQueue9pop_frontEv+0x8c>)
 800c706:	4618      	mov	r0, r3
 800c708:	f7f6 fc68 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Couldn't pop_front result, none present!");
      return Result();
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff ff29 	bl	800c564 <_ZN20PreviousResultsQueue6ResultC1Ev>
 800c712:	e027      	b.n	800c764 <_ZN20PreviousResultsQueue9pop_frontEv+0x84>
    }
    Result result = front();
 800c714:	6838      	ldr	r0, [r7, #0]
 800c716:	f7ff ff80 	bl	800c61a <_ZN20PreviousResultsQueue5frontEv>
 800c71a:	4602      	mov	r2, r0
 800c71c:	f107 030c 	add.w	r3, r7, #12
 800c720:	ca07      	ldmia	r2, {r0, r1, r2}
 800c722:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    front_index_ += 1;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800c72c:	1c5a      	adds	r2, r3, #1
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
    if (front_index_ >= kMaxResults) {
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800c73a:	2b31      	cmp	r3, #49	; 0x31
 800c73c:	dd03      	ble.n	800c746 <_ZN20PreviousResultsQueue9pop_frontEv+0x66>
      front_index_ = 0;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2200      	movs	r2, #0
 800c742:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
    }
    size_ -= 1;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c74c:	1e5a      	subs	r2, r3, #1
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
    return result;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	461c      	mov	r4, r3
 800c758:	f107 030c 	add.w	r3, r7, #12
 800c75c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  }
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	371c      	adds	r7, #28
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd90      	pop	{r4, r7, pc}
 800c76c:	080195f8 	.word	0x080195f8

0800c770 <_ZN20PreviousResultsQueue10from_frontEi>:

  // Most of the functions are duplicates of dequeue containers, but this
  // is a helper that makes it easy to iterate through the contents of the
  // queue.
  Result& from_front(int offset) {
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
    if ((offset < 0) || (offset >= size_)) {
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	db05      	blt.n	800c78c <_ZN20PreviousResultsQueue10from_frontEi+0x1c>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	db0a      	blt.n	800c7a2 <_ZN20PreviousResultsQueue10from_frontEi+0x32>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4910      	ldr	r1, [pc, #64]	; (800c7d4 <_ZN20PreviousResultsQueue10from_frontEi+0x64>)
 800c792:	4618      	mov	r0, r3
 800c794:	f7f6 fc22 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Attempt to read beyond the end of the queue!");
      offset = size_ - 1;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	603b      	str	r3, [r7, #0]
    }
    int index = front_index_ + offset;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800c7a8:	683a      	ldr	r2, [r7, #0]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	60fb      	str	r3, [r7, #12]
    if (index >= kMaxResults) {
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2b31      	cmp	r3, #49	; 0x31
 800c7b2:	dd02      	ble.n	800c7ba <_ZN20PreviousResultsQueue10from_frontEi+0x4a>
      index -= kMaxResults;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	3b32      	subs	r3, #50	; 0x32
 800c7b8:	60fb      	str	r3, [r7, #12]
    }
    return results_[index];
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	4413      	add	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	3304      	adds	r3, #4
  }
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	08019624 	.word	0x08019624

0800c7d8 <_ZN17RecognizeCommandsC1EPN6tflite13ErrorReporterElhll>:
#include "main.h"
#include <string>

#include <limits>
extern UART_HandleTypeDef huart2;
RecognizeCommands::RecognizeCommands(tflite::ErrorReporter* error_reporter,
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
 800c7e4:	70fb      	strb	r3, [r7, #3]
    : error_reporter_(error_reporter),
      average_window_duration_ms_(average_window_duration_ms),
      detection_threshold_(detection_threshold),
      suppression_ms_(suppression_ms),
      minimum_count_(minimum_count),
      previous_results_(error_reporter) {
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	601a      	str	r2, [r3, #0]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	605a      	str	r2, [r3, #4]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	78fa      	ldrb	r2, [r7, #3]
 800c7f6:	721a      	strb	r2, [r3, #8]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	69ba      	ldr	r2, [r7, #24]
 800c7fc:	60da      	str	r2, [r3, #12]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	69fa      	ldr	r2, [r7, #28]
 800c802:	611a      	str	r2, [r3, #16]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	3314      	adds	r3, #20
 800c808:	68b9      	ldr	r1, [r7, #8]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7ff fe89 	bl	800c522 <_ZN20PreviousResultsQueueC1EPN6tflite13ErrorReporterE>
  previous_top_label_ = "silence";
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4a07      	ldr	r2, [pc, #28]	; (800c830 <_ZN17RecognizeCommandsC1EPN6tflite13ErrorReporterElhll+0x58>)
 800c814:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
  previous_top_label_time_ = std::numeric_limits<int32_t>::min();
 800c818:	f7f4 fcfb 	bl	8001212 <_ZNSt14numeric_limitsIlE3minEv>
 800c81c:	4602      	mov	r2, r0
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
}
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	4618      	mov	r0, r3
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	08019654 	.word	0x08019654

0800c834 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb>:

TfLiteStatus RecognizeCommands::ProcessLatestResults(
    const TfLiteTensor* latest_results, const int32_t current_time_ms,
    const char** found_command, uint8_t* score, bool* is_new_command) {
 800c834:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c838:	b0b4      	sub	sp, #208	; 0xd0
 800c83a:	af02      	add	r7, sp, #8
 800c83c:	60f8      	str	r0, [r7, #12]
 800c83e:	60b9      	str	r1, [r7, #8]
 800c840:	607a      	str	r2, [r7, #4]
 800c842:	603b      	str	r3, [r7, #0]
  if ((latest_results->dims->size != 2) ||
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d109      	bne.n	800c862 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x2e>
      (latest_results->dims->data[0] != 1) ||
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	685b      	ldr	r3, [r3, #4]
  if ((latest_results->dims->size != 2) ||
 800c854:	2b01      	cmp	r3, #1
 800c856:	d104      	bne.n	800c862 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x2e>
      (latest_results->dims->data[1] != kCategoryCount)) {
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	689b      	ldr	r3, [r3, #8]
      (latest_results->dims->data[0] != 1) ||
 800c85e:	2b06      	cmp	r3, #6
 800c860:	d00f      	beq.n	800c882 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x4e>
    TF_LITE_REPORT_ERROR(
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6818      	ldr	r0, [r3, #0]
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	689a      	ldr	r2, [r3, #8]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	4613      	mov	r3, r2
 800c876:	2206      	movs	r2, #6
 800c878:	49c1      	ldr	r1, [pc, #772]	; (800cb80 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x34c>)
 800c87a:	f7f6 fbaf 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "The results for recognition should contain %d elements, but there are "
        "%d in an %d-dimensional shape",
        kCategoryCount, latest_results->dims->data[1],
        latest_results->dims->size);
    return kTfLiteError;
 800c87e:	2301      	movs	r3, #1
 800c880:	e1e6      	b.n	800cc50 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x41c>
  }

  if (latest_results->type != kTfLiteInt8) {
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	2b09      	cmp	r3, #9
 800c888:	d009      	beq.n	800c89e <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x6a>
    TF_LITE_REPORT_ERROR(
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6818      	ldr	r0, [r3, #0]
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	49bb      	ldr	r1, [pc, #748]	; (800cb84 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x350>)
 800c896:	f7f6 fba1 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "The results for recognition should be int8_t elements, but are %d",
        latest_results->type);
    return kTfLiteError;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e1d8      	b.n	800cc50 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x41c>
  }

  if ((!previous_results_.empty()) &&
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	3314      	adds	r3, #20
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7ff fea7 	bl	800c5f6 <_ZN20PreviousResultsQueue5emptyEv>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	f083 0301 	eor.w	r3, r3, #1
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00b      	beq.n	800c8cc <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x98>
      (current_time_ms < previous_results_.front().time_)) {
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	3314      	adds	r3, #20
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7ff feae 	bl	800c61a <_ZN20PreviousResultsQueue5frontEv>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	681b      	ldr	r3, [r3, #0]
  if ((!previous_results_.empty()) &&
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	da01      	bge.n	800c8cc <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x98>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e000      	b.n	800c8ce <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x9a>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00f      	beq.n	800c8f2 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0xbe>
    TF_LITE_REPORT_ERROR(
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681c      	ldr	r4, [r3, #0]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	3314      	adds	r3, #20
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff fe9d 	bl	800c61a <_ZN20PreviousResultsQueue5frontEv>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	49a8      	ldr	r1, [pc, #672]	; (800cb88 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x354>)
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f7f6 fb77 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Results must be fed in increasing time order, but received a "
        "timestamp of %d that was earlier than the previous one of %d",
        current_time_ms, previous_results_.front().time_);
    return kTfLiteError;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e1ae      	b.n	800cc50 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x41c>
  }

  // Add the latest results to the head of the queue.
  previous_results_.push_back({current_time_ms, latest_results->data.int8});
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f103 0414 	add.w	r4, r3, #20
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c900:	6879      	ldr	r1, [r7, #4]
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff fe46 	bl	800c594 <_ZN20PreviousResultsQueue6ResultC1ElPa>
 800c908:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c90c:	4619      	mov	r1, r3
 800c90e:	4620      	mov	r0, r4
 800c910:	f7ff feb8 	bl	800c684 <_ZN20PreviousResultsQueue9push_backERKNS_6ResultE>

  // Prune any earlier results that are too old for the averaging window.
  const int64_t time_limit = current_time_ms - average_window_duration_ms_;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	1ad3      	subs	r3, r2, r3
 800c91c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c920:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
  while ((!previous_results_.empty()) &&
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	3314      	adds	r3, #20
 800c928:	4618      	mov	r0, r3
 800c92a:	f7ff fe64 	bl	800c5f6 <_ZN20PreviousResultsQueue5emptyEv>
 800c92e:	4603      	mov	r3, r0
 800c930:	f083 0301 	eor.w	r3, r3, #1
 800c934:	b2db      	uxtb	r3, r3
 800c936:	2b00      	cmp	r3, #0
 800c938:	d011      	beq.n	800c95e <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x12a>
         previous_results_.front().time_ < time_limit) {
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	3314      	adds	r3, #20
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff fe6b 	bl	800c61a <_ZN20PreviousResultsQueue5frontEv>
 800c944:	4603      	mov	r3, r0
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4619      	mov	r1, r3
 800c94a:	ea4f 72e1 	mov.w	r2, r1, asr #31
  while ((!previous_results_.empty()) &&
 800c94e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800c952:	4299      	cmp	r1, r3
 800c954:	eb72 0304 	sbcs.w	r3, r2, r4
 800c958:	da01      	bge.n	800c95e <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x12a>
 800c95a:	2301      	movs	r3, #1
 800c95c:	e000      	b.n	800c960 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x12c>
 800c95e:	2300      	movs	r3, #0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d009      	beq.n	800c978 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x144>
    previous_results_.pop_front();
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f103 0214 	add.w	r2, r3, #20
 800c96a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800c96e:	4611      	mov	r1, r2
 800c970:	4618      	mov	r0, r3
 800c972:	f7ff feb5 	bl	800c6e0 <_ZN20PreviousResultsQueue9pop_frontEv>
  while ((!previous_results_.empty()) &&
 800c976:	e7d5      	b.n	800c924 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0xf0>
  }

  // If there are too few results, assume the result will be unreliable and
  // bail.
  const int64_t how_many_results = previous_results_.size();
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	3314      	adds	r3, #20
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7ff fe2d 	bl	800c5dc <_ZN20PreviousResultsQueue4sizeEv>
 800c982:	4603      	mov	r3, r0
 800c984:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c988:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
  const int64_t earliest_time = previous_results_.front().time_;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	3314      	adds	r3, #20
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff fe42 	bl	800c61a <_ZN20PreviousResultsQueue5frontEv>
 800c996:	4603      	mov	r3, r0
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c99e:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
  const int64_t samples_duration = current_time_ms - earliest_time;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800c9aa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c9ae:	1ac9      	subs	r1, r1, r3
 800c9b0:	eb62 0204 	sbc.w	r2, r2, r4
 800c9b4:	468b      	mov	fp, r1
 800c9b6:	4694      	mov	ip, r2
 800c9b8:	e9c7 bc22 	strd	fp, ip, [r7, #136]	; 0x88
  if ((how_many_results < minimum_count_) ||
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800c9c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c9c8:	4299      	cmp	r1, r3
 800c9ca:	eb72 0304 	sbcs.w	r3, r2, r4
 800c9ce:	db0d      	blt.n	800c9ec <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x1b8>
      (samples_duration < (average_window_duration_ms_ / 4))) {
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	da00      	bge.n	800c9da <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x1a6>
 800c9d8:	3303      	adds	r3, #3
 800c9da:	109b      	asrs	r3, r3, #2
 800c9dc:	ea4f 74e3 	mov.w	r4, r3, asr #31
  if ((how_many_results < minimum_count_) ||
 800c9e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c9e4:	4299      	cmp	r1, r3
 800c9e6:	eb72 0304 	sbcs.w	r3, r2, r4
 800c9ea:	da0e      	bge.n	800ca0a <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x1d6>
    *found_command = previous_top_label_;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f8d3 2278 	ldr.w	r2, [r3, #632]	; 0x278
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	601a      	str	r2, [r3, #0]
    *score = 0;
 800c9f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	701a      	strb	r2, [r3, #0]
    *is_new_command = false;
 800c9fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca02:	2200      	movs	r2, #0
 800ca04:	701a      	strb	r2, [r3, #0]
    return kTfLiteOk;
 800ca06:	2300      	movs	r3, #0
 800ca08:	e122      	b.n	800cc50 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x41c>
  }

  // Calculate the average score across all the results in the window.
  int32_t average_scores[kCategoryCount];
  for (int offset = 0; offset < previous_results_.size(); ++offset) {
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	3314      	adds	r3, #20
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7ff fde1 	bl	800c5dc <_ZN20PreviousResultsQueue4sizeEv>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ca20:	4293      	cmp	r3, r2
 800ca22:	bfb4      	ite	lt
 800ca24:	2301      	movlt	r3, #1
 800ca26:	2300      	movge	r3, #0
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d053      	beq.n	800cad6 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x2a2>
    PreviousResultsQueue::Result previous_result =
        previous_results_.from_front(offset);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3314      	adds	r3, #20
 800ca32:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7ff fe9a 	bl	800c770 <_ZN20PreviousResultsQueue10from_frontEi>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	f107 0310 	add.w	r3, r7, #16
 800ca42:	ca07      	ldmia	r2, {r0, r1, r2}
 800ca44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const int8_t* scores = previous_result.scores;
 800ca48:	f107 0310 	add.w	r3, r7, #16
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    for (int i = 0; i < kCategoryCount; ++i) {
 800ca52:	2300      	movs	r3, #0
 800ca54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca5c:	2b05      	cmp	r3, #5
 800ca5e:	dc34      	bgt.n	800caca <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x296>
      if (offset == 0) {
 800ca60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d111      	bne.n	800ca8c <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x258>
        average_scores[i] = scores[i] + 128;
 800ca68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ca70:	4413      	add	r3, r2
 800ca72:	f993 3000 	ldrsb.w	r3, [r3]
 800ca76:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800ca7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800ca84:	440b      	add	r3, r1
 800ca86:	f843 2c78 	str.w	r2, [r3, #-120]
 800ca8a:	e018      	b.n	800cabe <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x28a>
      } else {
        average_scores[i] += scores[i] + 128;
 800ca8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800ca96:	4413      	add	r3, r2
 800ca98:	f853 2c78 	ldr.w	r2, [r3, #-120]
 800ca9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800caa0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800caa4:	440b      	add	r3, r1
 800caa6:	f993 3000 	ldrsb.w	r3, [r3]
 800caaa:	3380      	adds	r3, #128	; 0x80
 800caac:	441a      	add	r2, r3
 800caae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800cab8:	440b      	add	r3, r1
 800caba:	f843 2c78 	str.w	r2, [r3, #-120]
    for (int i = 0; i < kCategoryCount; ++i) {
 800cabe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cac2:	3301      	adds	r3, #1
 800cac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cac8:	e7c6      	b.n	800ca58 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x224>
  for (int offset = 0; offset < previous_results_.size(); ++offset) {
 800caca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cace:	3301      	adds	r3, #1
 800cad0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cad4:	e79c      	b.n	800ca10 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x1dc>
      }
    }
  }
  for (int i = 0; i < kCategoryCount; ++i) {
 800cad6:	2300      	movs	r3, #0
 800cad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cadc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cae0:	2b05      	cmp	r3, #5
 800cae2:	dc1f      	bgt.n	800cb24 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x2f0>
    average_scores[i] /= how_many_results;
 800cae4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800caee:	4413      	add	r3, r2
 800caf0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800caf4:	4618      	mov	r0, r3
 800caf6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800cafa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800cafe:	f7f4 f8b3 	bl	8000c68 <__aeabi_ldivmod>
 800cb02:	4603      	mov	r3, r0
 800cb04:	460c      	mov	r4, r1
 800cb06:	461a      	mov	r2, r3
 800cb08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800cb12:	440b      	add	r3, r1
 800cb14:	f843 2c78 	str.w	r2, [r3, #-120]
  for (int i = 0; i < kCategoryCount; ++i) {
 800cb18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cb22:	e7db      	b.n	800cadc <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x2a8>
  }

  // Find the current highest scoring category.
  int current_top_index = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  int32_t current_top_score = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  char buf2[50];


  for (int i = 0; i < kCategoryCount; ++i) {
 800cb30:	2300      	movs	r3, #0
 800cb32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cb3a:	2b05      	cmp	r3, #5
 800cb3c:	dc26      	bgt.n	800cb8c <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x358>
    if (average_scores[i] > current_top_score) {
 800cb3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800cb48:	4413      	add	r3, r2
 800cb4a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800cb4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cb52:	429a      	cmp	r2, r3
 800cb54:	da0d      	bge.n	800cb72 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x33e>
      current_top_score = average_scores[i];
 800cb56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800cb60:	4413      	add	r3, r2
 800cb62:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800cb66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      current_top_index = i;
 800cb6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cb6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  for (int i = 0; i < kCategoryCount; ++i) {
 800cb72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cb76:	3301      	adds	r3, #1
 800cb78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb7c:	e7db      	b.n	800cb36 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x302>
 800cb7e:	bf00      	nop
 800cb80:	0801965c 	.word	0x0801965c
 800cb84:	080196c0 	.word	0x080196c0
 800cb88:	08019704 	.word	0x08019704
      //sprintf(buf2, "score %d: %d ", i, average_scores[i]);
     // HAL_UART_Transmit(&huart2, (uint8_t *)buf2, sizeof(buf2), 100);
    }
  }
  const char* current_top_label = kCategoryLabels[current_top_index];
 800cb8c:	4a33      	ldr	r2, [pc, #204]	; (800cc5c <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x428>)
 800cb8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  // If we've recently had another label trigger, assume one that occurs too
  // soon afterwards is a bad result.
  int64_t time_since_last_top;
  if ((previous_top_label_ == kCategoryLabels[0]) ||
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f8d3 2278 	ldr.w	r2, [r3, #632]	; 0x278
 800cba0:	4b2e      	ldr	r3, [pc, #184]	; (800cc5c <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x428>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d007      	beq.n	800cbb8 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x384>
      (previous_top_label_time_ == std::numeric_limits<int32_t>::min())) {
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f8d3 427c 	ldr.w	r4, [r3, #636]	; 0x27c
 800cbae:	f7f4 fb30 	bl	8001212 <_ZNSt14numeric_limitsIlE3minEv>
 800cbb2:	4603      	mov	r3, r0
  if ((previous_top_label_ == kCategoryLabels[0]) ||
 800cbb4:	429c      	cmp	r4, r3
 800cbb6:	d101      	bne.n	800cbbc <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x388>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e000      	b.n	800cbbe <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x38a>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d007      	beq.n	800cbd2 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x39e>
    time_since_last_top = std::numeric_limits<int32_t>::max();
 800cbc2:	f7f4 fb2f 	bl	8001224 <_ZNSt14numeric_limitsIlE3maxEv>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800cbcc:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 800cbd0:	e008      	b.n	800cbe4 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x3b0>
  } else {
    time_since_last_top = current_time_ms - previous_top_label_time_;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800cbe0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
  }
  if ((current_top_score > detection_threshold_) &&
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	7a1b      	ldrb	r3, [r3, #8]
 800cbe8:	461a      	mov	r2, r3
 800cbea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	dd1f      	ble.n	800cc32 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x3fe>
      ((current_top_label != previous_top_label_) ||
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
  if ((current_top_score > detection_threshold_) &&
 800cbf8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d10a      	bne.n	800cc16 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x3e2>
       (time_since_last_top > suppression_ms_))) {
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	4619      	mov	r1, r3
 800cc06:	ea4f 72e1 	mov.w	r2, r1, asr #31
      ((current_top_label != previous_top_label_) ||
 800cc0a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800cc0e:	4299      	cmp	r1, r3
 800cc10:	eb72 0304 	sbcs.w	r3, r2, r4
 800cc14:	da0d      	bge.n	800cc32 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x3fe>
    previous_top_label_ = current_top_label;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cc1c:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
    previous_top_label_time_ = current_time_ms;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    *is_new_command = true;
 800cc28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	e003      	b.n	800cc3a <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensorlPPKcPhPb+0x406>
  } else {
    *is_new_command = false;
 800cc32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc36:	2200      	movs	r2, #0
 800cc38:	701a      	strb	r2, [r3, #0]
  }
  *found_command = current_top_label;
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cc40:	601a      	str	r2, [r3, #0]
  *score = current_top_score;
 800cc42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc4c:	701a      	strb	r2, [r3, #0]

  return kTfLiteOk;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	37c8      	adds	r7, #200	; 0xc8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800cc5a:	bf00      	nop
 800cc5c:	20000000 	.word	0x20000000

0800cc60 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	370c      	adds	r7, #12
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
	...

0800cc7c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800cc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc7e:	b08f      	sub	sp, #60	; 0x3c
 800cc80:	af04      	add	r7, sp, #16
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7f9 fd08 	bl	80066a2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800cc92:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, input != nullptr);
 800cc94:	6a3b      	ldr	r3, [r7, #32]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10a      	bne.n	800ccb0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x34>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	695c      	ldr	r4, [r3, #20]
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	4b62      	ldr	r3, [pc, #392]	; (800ce2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	2323      	movs	r3, #35	; 0x23
 800cca6:	4a62      	ldr	r2, [pc, #392]	; (800ce30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800cca8:	4962      	ldr	r1, [pc, #392]	; (800ce34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800ccaa:	47a0      	blx	r4
 800ccac:	2301      	movs	r3, #1
 800ccae:	e0b9      	b.n	800ce24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7f9 fd03 	bl	80066c2 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800ccbc:	61f8      	str	r0, [r7, #28]
  TF_LITE_ENSURE(context, output != nullptr);
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5e>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	695c      	ldr	r4, [r3, #20]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	4b5b      	ldr	r3, [pc, #364]	; (800ce38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	2325      	movs	r3, #37	; 0x25
 800ccd0:	4a57      	ldr	r2, [pc, #348]	; (800ce30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800ccd2:	4958      	ldr	r1, [pc, #352]	; (800ce34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800ccd4:	47a0      	blx	r4
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e0a4      	b.n	800ce24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 800ccda:	6a38      	ldr	r0, [r7, #32]
 800ccdc:	f7f9 fc54 	bl	8006588 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800cce0:	4603      	mov	r3, r0
 800cce2:	460c      	mov	r4, r1
 800cce4:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	61bb      	str	r3, [r7, #24]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800ccec:	6838      	ldr	r0, [r7, #0]
 800ccee:	f7f4 fffb 	bl	8001ce8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800ccf2:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d109      	bne.n	800cd0c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d105      	bne.n	800cd0c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d101      	bne.n	800cd0c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e000      	b.n	800cd0e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x92>
 800cd0c:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9c>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	2200      	movs	r2, #0
 800cd16:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	60fb      	str	r3, [r7, #12]
  int stretch_dim = -1;
 800cd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd20:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < output_shape->size; ++i) {
 800cd22:	2300      	movs	r3, #0
 800cd24:	627b      	str	r3, [r7, #36]	; 0x24
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	da2b      	bge.n	800cd88 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10c>
    int value = output_shape->data[i];
 800cd30:	69ba      	ldr	r2, [r7, #24]
 800cd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4413      	add	r3, r2
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	617b      	str	r3, [r7, #20]
    if (value == -1) {
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd42:	d118      	bne.n	800cd76 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfa>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4a:	d011      	beq.n	800cd70 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf4>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	695c      	ldr	r4, [r3, #20]
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	f04f 32ff 	mov.w	r2, #4294967295
 800cd58:	9203      	str	r2, [sp, #12]
 800cd5a:	9302      	str	r3, [sp, #8]
 800cd5c:	4b37      	ldr	r3, [pc, #220]	; (800ce3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 800cd5e:	9301      	str	r3, [sp, #4]
 800cd60:	4b37      	ldr	r3, [pc, #220]	; (800ce40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	233a      	movs	r3, #58	; 0x3a
 800cd66:	4a32      	ldr	r2, [pc, #200]	; (800ce30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800cd68:	4936      	ldr	r1, [pc, #216]	; (800ce44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800cd6a:	47a0      	blx	r4
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e059      	b.n	800ce24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
      stretch_dim = i;
 800cd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd72:	60bb      	str	r3, [r7, #8]
 800cd74:	e004      	b.n	800cd80 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x104>
    } else {
      num_output_elements *= value;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	697a      	ldr	r2, [r7, #20]
 800cd7a:	fb02 f303 	mul.w	r3, r2, r3
 800cd7e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < output_shape->size; ++i) {
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	3301      	adds	r3, #1
 800cd84:	627b      	str	r3, [r7, #36]	; 0x24
 800cd86:	e7ce      	b.n	800cd26 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xaa>
    }
  }
  if (stretch_dim != -1) {
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd8e:	d011      	beq.n	800cdb4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800cd90:	6939      	ldr	r1, [r7, #16]
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	fb91 f2f2 	sdiv	r2, r1, r2
 800cd9a:	69b9      	ldr	r1, [r7, #24]
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	440b      	add	r3, r1
 800cda0:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	69ba      	ldr	r2, [r7, #24]
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	fb02 f303 	mul.w	r3, r2, r3
 800cdb2:	60fb      	str	r3, [r7, #12]
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	781a      	ldrb	r2, [r3, #0]
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d01b      	beq.n	800cdf8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	695c      	ldr	r4, [r3, #20]
 800cdc4:	687d      	ldr	r5, [r7, #4]
 800cdc6:	6a3b      	ldr	r3, [r7, #32]
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7f4 f994 	bl	80010f8 <TfLiteTypeGetName>
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7f4 f98e 	bl	80010f8 <TfLiteTypeGetName>
 800cddc:	4603      	mov	r3, r0
 800cdde:	9303      	str	r3, [sp, #12]
 800cde0:	9602      	str	r6, [sp, #8]
 800cde2:	4b19      	ldr	r3, [pc, #100]	; (800ce48 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	4b19      	ldr	r3, [pc, #100]	; (800ce4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 800cde8:	9300      	str	r3, [sp, #0]
 800cdea:	2345      	movs	r3, #69	; 0x45
 800cdec:	4a10      	ldr	r2, [pc, #64]	; (800ce30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800cdee:	4918      	ldr	r1, [pc, #96]	; (800ce50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	47a0      	blx	r4
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e015      	b.n	800ce24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 800cdf8:	693a      	ldr	r2, [r7, #16]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d010      	beq.n	800ce22 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a6>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	695c      	ldr	r4, [r3, #20]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	9203      	str	r2, [sp, #12]
 800ce0c:	9302      	str	r3, [sp, #8]
 800ce0e:	4b11      	ldr	r3, [pc, #68]	; (800ce54 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	4b11      	ldr	r3, [pc, #68]	; (800ce58 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1dc>)
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	2346      	movs	r3, #70	; 0x46
 800ce18:	4a05      	ldr	r2, [pc, #20]	; (800ce30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800ce1a:	490a      	ldr	r1, [pc, #40]	; (800ce44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800ce1c:	47a0      	blx	r4
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e000      	b.n	800ce24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  return kTfLiteOk;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	372c      	adds	r7, #44	; 0x2c
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce2c:	080197c4 	.word	0x080197c4
 800ce30:	08019794 	.word	0x08019794
 800ce34:	080197ac 	.word	0x080197ac
 800ce38:	080197d8 	.word	0x080197d8
 800ce3c:	08019808 	.word	0x08019808
 800ce40:	0801980c 	.word	0x0801980c
 800ce44:	080197ec 	.word	0x080197ec
 800ce48:	08019834 	.word	0x08019834
 800ce4c:	08019844 	.word	0x08019844
 800ce50:	08019818 	.word	0x08019818
 800ce54:	08019850 	.word	0x08019850
 800ce58:	08019864 	.word	0x08019864

0800ce5c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800ce5c:	b5b0      	push	{r4, r5, r7, lr}
 800ce5e:	b086      	sub	sp, #24
 800ce60:	af04      	add	r7, sp, #16
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800ce66:	6838      	ldr	r0, [r7, #0]
 800ce68:	f7f4 ff3e 	bl	8001ce8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d007      	beq.n	800ce82 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800ce72:	6838      	ldr	r0, [r7, #0]
 800ce74:	f7f4 ff38 	bl	8001ce8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d001      	beq.n	800ce82 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e000      	b.n	800ce84 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 800ce82:	2300      	movs	r3, #0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00a      	beq.n	800ce9e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	695c      	ldr	r4, [r3, #20]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	4b29      	ldr	r3, [pc, #164]	; (800cf34 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	234b      	movs	r3, #75	; 0x4b
 800ce94:	4a28      	ldr	r2, [pc, #160]	; (800cf38 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800ce96:	4929      	ldr	r1, [pc, #164]	; (800cf3c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800ce98:	47a0      	blx	r4
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e045      	b.n	800cf2a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800ce9e:	6838      	ldr	r0, [r7, #0]
 800cea0:	f7ff fede 	bl	800cc60 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	bf14      	ite	ne
 800ceaa:	2301      	movne	r3, #1
 800ceac:	2300      	moveq	r3, #0
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d014      	beq.n	800cede <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x82>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	695c      	ldr	r4, [r3, #20]
 800ceb8:	687d      	ldr	r5, [r7, #4]
 800ceba:	6838      	ldr	r0, [r7, #0]
 800cebc:	f7ff fed0 	bl	800cc60 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800cec0:	4602      	mov	r2, r0
 800cec2:	2301      	movs	r3, #1
 800cec4:	9303      	str	r3, [sp, #12]
 800cec6:	9202      	str	r2, [sp, #8]
 800cec8:	4b1d      	ldr	r3, [pc, #116]	; (800cf40 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800ceca:	9301      	str	r3, [sp, #4]
 800cecc:	4b1d      	ldr	r3, [pc, #116]	; (800cf44 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800cece:	9300      	str	r3, [sp, #0]
 800ced0:	234c      	movs	r3, #76	; 0x4c
 800ced2:	4a19      	ldr	r2, [pc, #100]	; (800cf38 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800ced4:	491c      	ldr	r1, [pc, #112]	; (800cf48 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800ced6:	4628      	mov	r0, r5
 800ced8:	47a0      	blx	r4
 800ceda:	2301      	movs	r3, #1
 800cedc:	e025      	b.n	800cf2a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7ff feca 	bl	800cc7c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	bf14      	ite	ne
 800ceee:	2301      	movne	r3, #1
 800cef0:	2300      	moveq	r3, #0
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d017      	beq.n	800cf28 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	695c      	ldr	r4, [r3, #20]
 800cefc:	687d      	ldr	r5, [r7, #4]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6839      	ldr	r1, [r7, #0]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7ff feba 	bl	800cc7c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	9303      	str	r3, [sp, #12]
 800cf10:	9202      	str	r2, [sp, #8]
 800cf12:	4b0e      	ldr	r3, [pc, #56]	; (800cf4c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 800cf14:	9301      	str	r3, [sp, #4]
 800cf16:	4b0e      	ldr	r3, [pc, #56]	; (800cf50 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	234d      	movs	r3, #77	; 0x4d
 800cf1c:	4a06      	ldr	r2, [pc, #24]	; (800cf38 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800cf1e:	490a      	ldr	r1, [pc, #40]	; (800cf48 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800cf20:	4628      	mov	r0, r5
 800cf22:	47a0      	blx	r4
 800cf24:	2301      	movs	r3, #1
 800cf26:	e000      	b.n	800cf2a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
  return kTfLiteOk;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3708      	adds	r7, #8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bdb0      	pop	{r4, r5, r7, pc}
 800cf32:	bf00      	nop
 800cf34:	08019878 	.word	0x08019878
 800cf38:	08019794 	.word	0x08019794
 800cf3c:	080197ac 	.word	0x080197ac
 800cf40:	080198a8 	.word	0x080198a8
 800cf44:	080198ac 	.word	0x080198ac
 800cf48:	080197ec 	.word	0x080197ec
 800cf4c:	080198c0 	.word	0x080198c0
 800cf50:	080198cc 	.word	0x080198cc

0800cf54 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800cf5e:	2200      	movs	r2, #0
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7f4 ff93 	bl	8001e8e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800cf68:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f7f4 ff9d 	bl	8001eae <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800cf74:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	7a1b      	ldrb	r3, [r3, #8]
 800cf7a:	f107 020c 	add.w	r2, r7, #12
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fb fae3 	bl	800854c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800cf86:	4603      	mov	r3, r0
 800cf88:	74fb      	strb	r3, [r7, #19]
 800cf8a:	7cfb      	ldrb	r3, [r7, #19]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 800cf90:	7cfb      	ldrb	r3, [r7, #19]
 800cf92:	e024      	b.n	800cfde <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7ff f876 	bl	800c08a <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	fb02 f303 	mul.w	r3, r2, r3
 800cfa6:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d013      	beq.n	800cfdc <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	61fb      	str	r3, [r7, #28]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	69fa      	ldr	r2, [r7, #28]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d20d      	bcs.n	800cfdc <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	441a      	add	r2, r3
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	6819      	ldr	r1, [r3, #0]
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	440b      	add	r3, r1
 800cfd0:	7812      	ldrb	r2, [r2, #0]
 800cfd2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	61fb      	str	r3, [r7, #28]
 800cfda:	e7ed      	b.n	800cfb8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3720      	adds	r7, #32
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
	...

0800cfe8 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 800cfe8:	b4b0      	push	{r4, r5, r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4a07      	ldr	r2, [pc, #28]	; (800d010 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 800cff4:	461c      	mov	r4, r3
 800cff6:	4615      	mov	r5, r2
 800cff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cffc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	bcb0      	pop	{r4, r5, r7}
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	080198ec 	.word	0x080198ec

0800d014 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	2104      	movs	r1, #4
 800d022:	4618      	mov	r0, r3
 800d024:	f7f6 fdd4 	bl	8003bd0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800d028:	4603      	mov	r3, r0
  }
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 800d032:	b580      	push	{r7, lr}
 800d034:	b082      	sub	sp, #8
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	210a      	movs	r1, #10
 800d040:	4618      	mov	r0, r3
 800d042:	f7f6 fd97 	bl	8003b74 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800d046:	4603      	mov	r3, r0
 800d048:	b2db      	uxtb	r3, r3
  }
 800d04a:	4618      	mov	r0, r3
 800d04c:	3708      	adds	r7, #8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 800d052:	b580      	push	{r7, lr}
 800d054:	b084      	sub	sp, #16
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d101      	bne.n	800d064 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 800d060:	f006 fff6 	bl	8014050 <abort>

  return std::max(
      op_code->builtin_code(),
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7ff ffe4 	bl	800d032 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 800d06a:	4603      	mov	r3, r0
 800d06c:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7ff ffd0 	bl	800d014 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 800d074:	4603      	mov	r3, r0
 800d076:	b2db      	uxtb	r3, r3
 800d078:	73fb      	strb	r3, [r7, #15]
 800d07a:	f107 020f 	add.w	r2, r7, #15
 800d07e:	f107 030e 	add.w	r3, r7, #14
 800d082:	4611      	mov	r1, r2
 800d084:	4618      	mov	r0, r3
 800d086:	f000 f806 	bl	800d096 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 800d08a:	4603      	mov	r3, r0
 800d08c:	781b      	ldrb	r3, [r3, #0]
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3710      	adds	r7, #16
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 800d096:	b480      	push	{r7}
 800d098:	b083      	sub	sp, #12
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	781a      	ldrb	r2, [r3, #0]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d201      	bcs.n	800d0b0 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	e000      	b.n	800d0b2 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 800d0b0:	687b      	ldr	r3, [r7, #4]
    }
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr
	...

0800d0c0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "compatibility - Copy.h"
#include "memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
 800d0cc:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 800d0ce:	4a0e      	ldr	r2, [pc, #56]	; (800d108 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	605a      	str	r2, [r3, #4]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	609a      	str	r2, [r3, #8]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	60da      	str	r2, [r3, #12]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	611a      	str	r2, [r3, #16]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	615a      	str	r2, [r3, #20]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	689a      	ldr	r2, [r3, #8]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	619a      	str	r2, [r3, #24]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	08021254 	.word	0x08021254

0800d10c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
 800d118:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	4413      	add	r3, r2
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	68b9      	ldr	r1, [r7, #8]
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f7ff ffcb 	bl	800d0c0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	4618      	mov	r0, r3
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
 800d13e:	4a11      	ldr	r2, [pc, #68]	; (800d184 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	601a      	str	r2, [r3, #0]
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	605a      	str	r2, [r3, #4]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	689a      	ldr	r2, [r3, #8]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	609a      	str	r2, [r3, #8]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	68da      	ldr	r2, [r3, #12]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	60da      	str	r2, [r3, #12]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	691a      	ldr	r2, [r3, #16]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	611a      	str	r2, [r3, #16]
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	695a      	ldr	r2, [r3, #20]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	615a      	str	r2, [r3, #20]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	699a      	ldr	r2, [r3, #24]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	619a      	str	r2, [r3, #24]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4618      	mov	r0, r3
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	08021254 	.word	0x08021254

0800d188 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800d188:	b590      	push	{r4, r7, lr}
 800d18a:	b08d      	sub	sp, #52	; 0x34
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d101      	bne.n	800d19e <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800d19a:	f006 ff59 	bl	8014050 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d101      	bne.n	800d1a8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 800d1a4:	f006 ff54 	bl	8014050 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800d1a8:	f107 0010 	add.w	r0, r7, #16
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	68f9      	ldr	r1, [r7, #12]
 800d1b2:	f7ff ffab 	bl	800d10c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
 800d1b6:	f107 0310 	add.w	r3, r7, #16
 800d1ba:	2204      	movs	r2, #4
 800d1bc:	211c      	movs	r1, #28
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 f87e 	bl	800d2c0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 800d1c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800d1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	201c      	movs	r0, #28
 800d1cc:	f7f5 ff6b 	bl	80030a6 <_ZnwjPv>
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	2c00      	cmp	r4, #0
 800d1d4:	d005      	beq.n	800d1e2 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x5a>
 800d1d6:	f107 0310 	add.w	r3, r7, #16
 800d1da:	4619      	mov	r1, r3
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f7ff ffa9 	bl	800d134 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800d1e2:	f107 0310 	add.w	r3, r7, #16
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f000 f806 	bl	800d1f8 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800d1ec:	4623      	mov	r3, r4
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3734      	adds	r7, #52	; 0x34
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd90      	pop	{r4, r7, pc}
	...

0800d1f8 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	4a04      	ldr	r2, [pc, #16]	; (800d214 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4618      	mov	r0, r3
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	08021254 	.word	0x08021254

0800d218 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7ff ffe9 	bl	800d1f8 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800d226:	211c      	movs	r1, #28
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f006 fc4e 	bl	8013aca <_ZdlPvj>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 800d238:	b580      	push	{r7, lr}
 800d23a:	b088      	sub	sp, #32
 800d23c:	af02      	add	r7, sp, #8
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	691a      	ldr	r2, [r3, #16]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	699b      	ldr	r3, [r3, #24]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d007      	beq.n	800d260 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	4918      	ldr	r1, [pc, #96]	; (800d2b8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 800d256:	4618      	mov	r0, r3
 800d258:	f7f5 fec0 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e027      	b.n	800d2b0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x78>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	6879      	ldr	r1, [r7, #4]
 800d266:	4618      	mov	r0, r3
 800d268:	f7fb f92a 	bl	80084c0 <_ZN6tflite14AlignPointerUpEPhj>
 800d26c:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	461a      	mov	r2, r3
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800d27a:	693a      	ldr	r2, [r7, #16]
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d20c      	bcs.n	800d29c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x64>
    TF_LITE_REPORT_ERROR(
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6858      	ldr	r0, [r3, #4]
 800d286:	68ba      	ldr	r2, [r7, #8]
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	490a      	ldr	r1, [pc, #40]	; (800d2bc <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 800d294:	f7f5 fea2 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 800d298:	2301      	movs	r3, #1
 800d29a:	e009      	b.n	800d2b0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x78>
  }
  head_ = aligned_result + size;
 800d29c:	697a      	ldr	r2, [r7, #20]
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	441a      	add	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	691a      	ldr	r2, [r3, #16]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800d2ae:	2300      	movs	r3, #0
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3718      	adds	r7, #24
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	08019920 	.word	0x08019920
 800d2bc:	08019978 	.word	0x08019978

0800d2c0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b088      	sub	sp, #32
 800d2c4:	af02      	add	r7, sp, #8
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	695a      	ldr	r2, [r3, #20]
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	425b      	negs	r3, r3
 800d2d4:	4413      	add	r3, r2
 800d2d6:	6879      	ldr	r1, [r7, #4]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7fb f90a 	bl	80084f2 <_ZN6tflite16AlignPointerDownEPhj>
 800d2de:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	697a      	ldr	r2, [r7, #20]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d213      	bcs.n	800d312 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x52>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6858      	ldr	r0, [r3, #4]
 800d2fa:	68ba      	ldr	r2, [r7, #8]
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	1ad2      	subs	r2, r2, r3
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	4613      	mov	r3, r2
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	4906      	ldr	r1, [pc, #24]	; (800d324 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x64>)
 800d30a:	f7f5 fe67 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 800d30e:	2300      	movs	r3, #0
 800d310:	e003      	b.n	800d31a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x5a>
  }
  tail_ = aligned_result;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	697a      	ldr	r2, [r7, #20]
 800d316:	615a      	str	r2, [r3, #20]
  return aligned_result;
 800d318:	697b      	ldr	r3, [r7, #20]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3718      	adds	r7, #24
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	080199bc 	.word	0x080199bc

0800d328 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 800d328:	b580      	push	{r7, lr}
 800d32a:	b088      	sub	sp, #32
 800d32c:	af02      	add	r7, sp, #8
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	699b      	ldr	r3, [r3, #24]
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fb f8c0 	bl	80084c0 <_ZN6tflite14AlignPointerUpEPhj>
 800d340:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	695b      	ldr	r3, [r3, #20]
 800d346:	461a      	mov	r2, r3
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800d34e:	693a      	ldr	r2, [r7, #16]
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	429a      	cmp	r2, r3
 800d354:	d20c      	bcs.n	800d370 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x48>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6858      	ldr	r0, [r3, #4]
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	4907      	ldr	r1, [pc, #28]	; (800d384 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 800d368:	f7f5 fe38 	bl	8002fdc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 800d36c:	2300      	movs	r3, #0
 800d36e:	e005      	b.n	800d37c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x54>
  }
  temp_ = aligned_result + size;
 800d370:	697a      	ldr	r2, [r7, #20]
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	441a      	add	r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	619a      	str	r2, [r3, #24]
  return aligned_result;
 800d37a:	697b      	ldr	r3, [r7, #20]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3718      	adds	r7, #24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	08019a08 	.word	0x08019a08

0800d388 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	691a      	ldr	r2, [r3, #16]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	619a      	str	r2, [r3, #24]
 800d398:	bf00      	nop
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	699b      	ldr	r3, [r3, #24]
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7fb f877 	bl	80084c0 <_ZN6tflite14AlignPointerUpEPhj>
 800d3d2:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	695b      	ldr	r3, [r3, #20]
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fb f889 	bl	80084f2 <_ZN6tflite16AlignPointerDownEPhj>
 800d3e0:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	1ad3      	subs	r3, r2, r3
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3710      	adds	r7, #16
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	ed87 0a01 	vstr	s0, [r7, #4]
 800d3fa:	ed97 0a01 	vldr	s0, [r7, #4]
 800d3fe:	f006 fccd 	bl	8013d9c <expf>
 800d402:	eef0 7a40 	vmov.f32	s15, s0
 800d406:	eeb0 0a67 	vmov.f32	s0, s15
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800d410:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800d414:	b08b      	sub	sp, #44	; 0x2c
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800d422:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b64 = b;
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800d42c:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t sum = a64 + b64;
 800d430:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d434:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d438:	eb13 0b01 	adds.w	fp, r3, r1
 800d43c:	eb44 0c02 	adc.w	ip, r4, r2
 800d440:	e9c7 bc04 	strd	fp, ip, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800d444:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f174 0300 	sbcs.w	r3, r4, #0
 800d44e:	db04      	blt.n	800d45a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4a>
 800d450:	f04f 0301 	mov.w	r3, #1
 800d454:	f04f 0400 	mov.w	r4, #0
 800d458:	e003      	b.n	800d462 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x52>
 800d45a:	f04f 33ff 	mov.w	r3, #4294967295
 800d45e:	f04f 34ff 	mov.w	r4, #4294967295
 800d462:	e9c7 3402 	strd	r3, r4, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800d466:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d46a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d46e:	eb13 0b01 	adds.w	fp, r3, r1
 800d472:	eb44 0c02 	adc.w	ip, r4, r2
 800d476:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800d47a:	4611      	mov	r1, r2
 800d47c:	f04f 0200 	mov.w	r2, #0
 800d480:	eb1b 0301 	adds.w	r3, fp, r1
 800d484:	eb4c 0402 	adc.w	r4, ip, r2
 800d488:	1064      	asrs	r4, r4, #1
 800d48a:	ea4f 0333 	mov.w	r3, r3, rrx
}
 800d48e:	4618      	mov	r0, r3
 800d490:	372c      	adds	r7, #44	; 0x2c
 800d492:	46bd      	mov	sp, r7
 800d494:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800d498:	4770      	bx	lr

0800d49a <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800d49a:	b480      	push	{r7}
 800d49c:	b083      	sub	sp, #12
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	da01      	bge.n	800d4b8 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	e000      	b.n	800d4ba <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 800d4b8:	687b      	ldr	r3, [r7, #4]
    }
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800d4c6:	b590      	push	{r4, r7, lr}
 800d4c8:	b087      	sub	sp, #28
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	60f8      	str	r0, [r7, #12]
 800d4ce:	60b9      	str	r1, [r7, #8]
 800d4d0:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f7f3 ff64 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d4d8:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800d4da:	2300      	movs	r3, #0
 800d4dc:	617b      	str	r3, [r7, #20]
 800d4de:	697a      	ldr	r2, [r7, #20]
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	da15      	bge.n	800d512 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d00d      	beq.n	800d50a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d4ee:	6979      	ldr	r1, [r7, #20]
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f7f3 ff61 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	6979      	ldr	r1, [r7, #20]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f7f3 ff5c 	bl	80013b8 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d500:	4603      	mov	r3, r0
 800d502:	429c      	cmp	r4, r3
 800d504:	d001      	beq.n	800d50a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 800d506:	f006 fda3 	bl	8014050 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	3301      	adds	r3, #1
 800d50e:	617b      	str	r3, [r7, #20]
 800d510:	e7e5      	b.n	800d4de <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800d512:	68b9      	ldr	r1, [r7, #8]
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f7f7 fc60 	bl	8004dda <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800d51a:	4603      	mov	r3, r0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	371c      	adds	r7, #28
 800d520:	46bd      	mov	sp, r7
 800d522:	bd90      	pop	{r4, r7, pc}

0800d524 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	fa02 f303 	lsl.w	r3, r2, r3
                                           quantized_multiplier);
 800d538:	68b9      	ldr	r1, [r7, #8]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7f3 feaa 	bl	8001294 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800d540:	4603      	mov	r3, r0
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
	...

0800d54c <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
 800d54c:	b580      	push	{r7, lr}
 800d54e:	ed2d 8b02 	vpush	{d8}
 800d552:	b094      	sub	sp, #80	; 0x50
 800d554:	af00      	add	r7, sp, #0
 800d556:	6178      	str	r0, [r7, #20]
 800d558:	ed87 0a04 	vstr	s0, [r7, #16]
 800d55c:	edc7 0a03 	vstr	s1, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	607a      	str	r2, [r7, #4]
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
 800d564:	ed97 7a03 	vldr	s14, [r7, #12]
 800d568:	edd7 7a04 	vldr	s15, [r7, #16]
 800d56c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	3b01      	subs	r3, #1
 800d574:	ee07 3a90 	vmov	s15, r3
 800d578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d57c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d580:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 800d584:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d588:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d58c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d590:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 800d594:	2300      	movs	r3, #0
 800d596:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	f280 80c0 	bge.w	800d724 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 800d5a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5a6:	ee07 3a90 	vmov	s15, r3
 800d5aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d5ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d5b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5b6:	edd7 7a04 	vldr	s15, [r7, #16]
 800d5ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	eeb0 0a67 	vmov.f32	s0, s15
 800d5c4:	4798      	blx	r3
 800d5c6:	eeb0 7a40 	vmov.f32	s14, s0
 800d5ca:	eddf 7a74 	vldr	s15, [pc, #464]	; 800d79c <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800d5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5d2:	eeb0 0a67 	vmov.f32	s0, s15
 800d5d6:	f7f9 fc1d 	bl	8006e14 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800d5da:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800d5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	ee07 3a90 	vmov	s15, r3
 800d5e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d5ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d5ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5f2:	edd7 7a04 	vldr	s15, [r7, #16]
 800d5f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	eeb0 0a67 	vmov.f32	s0, s15
 800d600:	4798      	blx	r3
 800d602:	eeb0 7a40 	vmov.f32	s14, s0
 800d606:	eddf 7a65 	vldr	s15, [pc, #404]	; 800d79c <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800d60a:	ee27 8a27 	vmul.f32	s16, s14, s15
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 800d60e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d610:	ee07 3a90 	vmov	s15, r3
 800d614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d618:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d61c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d620:	edd7 7a04 	vldr	s15, [r7, #16]
 800d624:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	eeb0 0a67 	vmov.f32	s0, s15
 800d62e:	4798      	blx	r3
 800d630:	eeb0 7a40 	vmov.f32	s14, s0
 800d634:	eddf 7a59 	vldr	s15, [pc, #356]	; 800d79c <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800d638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d63c:	eeb0 0a67 	vmov.f32	s0, s15
 800d640:	f7f9 fbe8 	bl	8006e14 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800d644:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800d648:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d64c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d650:	eec7 6a87 	vdiv.f32	s13, s15, s14
                    2.0f);
 800d654:	eeb0 0a66 	vmov.f32	s0, s13
 800d658:	f7f9 fbdc 	bl	8006e14 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800d65c:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 800d660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d662:	ee07 3a90 	vmov	s15, r3
 800d666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d66a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d66e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d672:	edd7 7a04 	vldr	s15, [r7, #16]
 800d676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d67a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d67e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	eeb0 0a67 	vmov.f32	s0, s15
 800d688:	4798      	blx	r3
 800d68a:	eeb0 7a40 	vmov.f32	s14, s0
 800d68e:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d79c <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800d692:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d696:	eeb0 0a67 	vmov.f32	s0, s15
 800d69a:	f7f9 fbbb 	bl	8006e14 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800d69e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 800d6a2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d6a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d6aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6ae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 800d6b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d6b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d6ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d6be:	eeb0 0a66 	vmov.f32	s0, s13
 800d6c2:	f7f9 fba7 	bl	8006e14 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800d6c6:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min(std::max(sample_val - bias, -32768.0f), 32767.0f);
 800d6ca:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800d6ce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d6d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6d6:	edc7 7a06 	vstr	s15, [r7, #24]
 800d6da:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800d6de:	61fb      	str	r3, [r7, #28]
 800d6e0:	f107 021c 	add.w	r2, r7, #28
 800d6e4:	f107 0318 	add.w	r3, r7, #24
 800d6e8:	4611      	mov	r1, r2
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7f5 f8cc 	bl	8002888 <_ZSt3maxIfERKT_S2_S2_>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	4b2b      	ldr	r3, [pc, #172]	; (800d7a0 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800d6f4:	623b      	str	r3, [r7, #32]
 800d6f6:	f107 0320 	add.w	r3, r7, #32
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	f7f5 f96f 	bl	80029e0 <_ZSt3minIfERKT_S2_S2_>
 800d702:	4603      	mov	r3, r0
 800d704:	edd3 7a00 	vldr	s15, [r3]
 800d708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	4413      	add	r3, r2
 800d710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d714:	ee17 2a90 	vmov	r2, s15
 800d718:	b212      	sxth	r2, r2
 800d71a:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 800d71c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d71e:	3301      	adds	r3, #1
 800d720:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d722:	e739      	b.n	800d598 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
  }
  table[num - 1] = std::min(
      std::max(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	ed97 0a03 	vldr	s0, [r7, #12]
 800d72a:	4798      	blx	r3
 800d72c:	eeb0 7a40 	vmov.f32	s14, s0
 800d730:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800d79c <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800d734:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d738:	eeb0 0a67 	vmov.f32	s0, s15
 800d73c:	f7f9 fb6a 	bl	8006e14 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800d740:	eef0 7a40 	vmov.f32	s15, s0
 800d744:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800d748:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800d74c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d74e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d756:	4611      	mov	r1, r2
 800d758:	4618      	mov	r0, r3
 800d75a:	f7f5 f895 	bl	8002888 <_ZSt3maxIfERKT_S2_S2_>
 800d75e:	4602      	mov	r2, r0
 800d760:	4b0f      	ldr	r3, [pc, #60]	; (800d7a0 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800d762:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d768:	4619      	mov	r1, r3
 800d76a:	4610      	mov	r0, r2
 800d76c:	f7f5 f938 	bl	80029e0 <_ZSt3minIfERKT_S2_S2_>
 800d770:	4603      	mov	r3, r0
  table[num - 1] = std::min(
 800d772:	edd3 7a00 	vldr	s15, [r3]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d77c:	3b01      	subs	r3, #1
 800d77e:	005b      	lsls	r3, r3, #1
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	4413      	add	r3, r2
 800d784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d788:	ee17 2a90 	vmov	r2, s15
 800d78c:	b212      	sxth	r2, r2
 800d78e:	801a      	strh	r2, [r3, #0]
}
 800d790:	bf00      	nop
 800d792:	3750      	adds	r7, #80	; 0x50
 800d794:	46bd      	mov	sp, r7
 800d796:	ecbd 8b02 	vpop	{d8}
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	47000000 	.word	0x47000000
 800d7a0:	46fffe00 	.word	0x46fffe00

0800d7a4 <_ZN6tflite26generic_int16_table_lookupEsPKs>:

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	6039      	str	r1, [r7, #0]
 800d7ae:	80fb      	strh	r3, [r7, #6]
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 800d7b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7b4:	11db      	asrs	r3, r3, #7
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d7bc:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 800d7be:	8afb      	ldrh	r3, [r7, #22]
 800d7c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7c4:	d306      	bcc.n	800d7d4 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x30>
 800d7c6:	4b1b      	ldr	r3, [pc, #108]	; (800d834 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 800d7c8:	4a1b      	ldr	r2, [pc, #108]	; (800d838 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 800d7ca:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800d7ce:	481b      	ldr	r0, [pc, #108]	; (800d83c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 800d7d0:	f006 fc46 	bl	8014060 <__assert_func>
  int16_t offset = value & 0x7f;
 800d7d4:	88fb      	ldrh	r3, [r7, #6]
 800d7d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7da:	82bb      	strh	r3, [r7, #20]

  // base and slope are Q0.15
  int16_t base = lut[index];
 800d7dc:	8afb      	ldrh	r3, [r7, #22]
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	683a      	ldr	r2, [r7, #0]
 800d7e2:	4413      	add	r3, r2
 800d7e4:	881b      	ldrh	r3, [r3, #0]
 800d7e6:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 800d7e8:	8afb      	ldrh	r3, [r7, #22]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	683a      	ldr	r2, [r7, #0]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	8afb      	ldrh	r3, [r7, #22]
 800d7fa:	005b      	lsls	r3, r3, #1
 800d7fc:	6839      	ldr	r1, [r7, #0]
 800d7fe:	440b      	add	r3, r1
 800d800:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d804:	b29b      	uxth	r3, r3
 800d806:	1ad3      	subs	r3, r2, r3
 800d808:	b29b      	uxth	r3, r3
 800d80a:	823b      	strh	r3, [r7, #16]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 800d80c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d810:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800d814:	fb02 f303 	mul.w	r3, r2, r3
 800d818:	3340      	adds	r3, #64	; 0x40
 800d81a:	11db      	asrs	r3, r3, #7
 800d81c:	60fb      	str	r3, [r7, #12]

  // Q0.15 + Q0.15
  return base + delta;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	b29a      	uxth	r2, r3
 800d822:	8a7b      	ldrh	r3, [r7, #18]
 800d824:	4413      	add	r3, r2
 800d826:	b29b      	uxth	r3, r3
 800d828:	b21b      	sxth	r3, r3
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3718      	adds	r7, #24
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	08019a54 	.word	0x08019a54
 800d838:	080212ec 	.word	0x080212ec
 800d83c:	08019a80 	.word	0x08019a80

0800d840 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 800d840:	b580      	push	{r7, lr}
 800d842:	b088      	sub	sp, #32
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	4618      	mov	r0, r3
 800d850:	f001 f81c 	bl	800e88c <_ZN6tflite17CountLeadingZerosImEEiT_>
 800d854:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	1ad2      	subs	r2, r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	fa02 f303 	lsl.w	r3, r2, r3
 800d868:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 800d86c:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 800d86e:	69b8      	ldr	r0, [r7, #24]
 800d870:	f001 f81e 	bl	800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800d874:	4603      	mov	r3, r0
 800d876:	4618      	mov	r0, r3
 800d878:	f001 f82c 	bl	800e8d4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800d87c:	4603      	mov	r3, r0
 800d87e:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 800d880:	f107 0314 	add.w	r3, r7, #20
 800d884:	4618      	mov	r0, r3
 800d886:	f001 f885 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d88a:	4603      	mov	r3, r0
 800d88c:	681b      	ldr	r3, [r3, #0]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3720      	adds	r7, #32
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800d896:	b590      	push	{r4, r7, lr}
 800d898:	ed2d 8b02 	vpush	{d8}
 800d89c:	b08f      	sub	sp, #60	; 0x3c
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	60f8      	str	r0, [r7, #12]
 800d8a2:	60b9      	str	r1, [r7, #8]
 800d8a4:	607a      	str	r2, [r7, #4]
 800d8a6:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800d8a8:	68b8      	ldr	r0, [r7, #8]
 800d8aa:	f7f3 fd79 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800d8b4:	683a      	ldr	r2, [r7, #0]
 800d8b6:	6a39      	ldr	r1, [r7, #32]
 800d8b8:	68b8      	ldr	r0, [r7, #8]
 800d8ba:	f7ff fe04 	bl	800d4c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800d8be:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	683a      	ldr	r2, [r7, #0]
 800d8c4:	6a39      	ldr	r1, [r7, #32]
 800d8c6:	68b8      	ldr	r0, [r7, #8]
 800d8c8:	f7f3 fe35 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800d8cc:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d8d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	f280 8087 	bge.w	800d9ea <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 800d8dc:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800d8e0:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	633b      	str	r3, [r7, #48]	; 0x30
 800d8e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	da15      	bge.n	800d91a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 800d8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8f0:	69ba      	ldr	r2, [r7, #24]
 800d8f2:	fb02 f203 	mul.w	r2, r2, r3
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f8:	4413      	add	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	441a      	add	r2, r3
 800d900:	f107 0310 	add.w	r3, r7, #16
 800d904:	4611      	mov	r1, r2
 800d906:	4618      	mov	r0, r3
 800d908:	f7f4 ffbe 	bl	8002888 <_ZSt3maxIfERKT_S2_S2_>
 800d90c:	4603      	mov	r3, r0
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800d912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d914:	3301      	adds	r3, #1
 800d916:	633b      	str	r3, [r7, #48]	; 0x30
 800d918:	e7e5      	b.n	800d8e6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 800d91a:	f04f 0300 	mov.w	r3, #0
 800d91e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800d920:	2300      	movs	r3, #0
 800d922:	62bb      	str	r3, [r7, #40]	; 0x28
 800d924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	429a      	cmp	r2, r3
 800d92a:	da36      	bge.n	800d99a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800d92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d92e:	69ba      	ldr	r2, [r7, #24]
 800d930:	fb02 f203 	mul.w	r2, r2, r3
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	4413      	add	r3, r2
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	4413      	add	r3, r2
 800d93e:	ed93 7a00 	vldr	s14, [r3]
 800d942:	edd7 7a04 	vldr	s15, [r7, #16]
 800d946:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d950:	4618      	mov	r0, r3
 800d952:	4621      	mov	r1, r4
 800d954:	f7f3 f938 	bl	8000bc8 <__aeabi_d2f>
 800d958:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800d95c:	ee68 7a27 	vmul.f32	s15, s16, s15
                                   static_cast<float>(params.beta));
 800d960:	eeb0 0a67 	vmov.f32	s0, s15
 800d964:	f7ff fd44 	bl	800d3f0 <_ZSt3expf>
 800d968:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 800d96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96e:	69ba      	ldr	r2, [r7, #24]
 800d970:	fb02 f203 	mul.w	r2, r2, r3
 800d974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d976:	4413      	add	r3, r2
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d97c:	4413      	add	r3, r2
 800d97e:	697a      	ldr	r2, [r7, #20]
 800d980:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 800d982:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d986:	edd7 7a05 	vldr	s15, [r7, #20]
 800d98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d98e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800d992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d994:	3301      	adds	r3, #1
 800d996:	62bb      	str	r3, [r7, #40]	; 0x28
 800d998:	e7c4      	b.n	800d924 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 800d99a:	2300      	movs	r3, #0
 800d99c:	627b      	str	r3, [r7, #36]	; 0x24
 800d99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	da1d      	bge.n	800d9e2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 800d9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a8:	69ba      	ldr	r2, [r7, #24]
 800d9aa:	fb02 f203 	mul.w	r2, r2, r3
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	4413      	add	r3, r2
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9b6:	4413      	add	r3, r2
 800d9b8:	edd3 6a00 	vldr	s13, [r3]
 800d9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9be:	69ba      	ldr	r2, [r7, #24]
 800d9c0:	fb02 f203 	mul.w	r2, r2, r3
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	4413      	add	r3, r2
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9cc:	4413      	add	r3, r2
 800d9ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d9d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9d6:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9dc:	3301      	adds	r3, #1
 800d9de:	627b      	str	r3, [r7, #36]	; 0x24
 800d9e0:	e7dd      	b.n	800d99e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 800d9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800d9e8:	e773      	b.n	800d8d2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 800d9ea:	bf00      	nop
 800d9ec:	373c      	adds	r7, #60	; 0x3c
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	ecbd 8b02 	vpop	{d8}
 800d9f4:	bd90      	pop	{r4, r7, pc}
	...

0800d9f8 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08a      	sub	sp, #40	; 0x28
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 800da06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	fb02 f203 	mul.w	r2, r2, r3
 800da0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da10:	4413      	add	r3, r2
 800da12:	005b      	lsls	r3, r3, #1
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	4413      	add	r3, r2
 800da18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da1c:	461a      	mov	r2, r3
 800da1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da22:	1ad3      	subs	r3, r2, r3
 800da24:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	6899      	ldr	r1, [r3, #8]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	461a      	mov	r2, r3
 800da30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da32:	f7f3 fdaf 	bl	8001594 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800da36:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800da3e:	337f      	adds	r3, #127	; 0x7f
 800da40:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
               static_cast<int32_t>(32767));
 800da42:	4b12      	ldr	r3, [pc, #72]	; (800da8c <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 800da44:	617b      	str	r3, [r7, #20]
 800da46:	f107 0214 	add.w	r2, r7, #20
 800da4a:	f107 0310 	add.w	r3, r7, #16
 800da4e:	4611      	mov	r1, r2
 800da50:	4618      	mov	r0, r3
 800da52:	f7f3 fc0b 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 800da56:	4602      	mov	r2, r0
 800da58:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800da5c:	61bb      	str	r3, [r7, #24]
 800da5e:	f107 0318 	add.w	r3, r7, #24
 800da62:	4619      	mov	r1, r3
 800da64:	4610      	mov	r0, r2
 800da66:	f7f4 fefb 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 800da6a:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 800da6c:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 800da6e:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800da78:	4611      	mov	r1, r2
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7ff fe92 	bl	800d7a4 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 800da80:	4603      	mov	r3, r0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3728      	adds	r7, #40	; 0x28
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	ffff8000 	.word	0xffff8000

0800da90 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 800da90:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800da94:	b09e      	sub	sp, #120	; 0x78
 800da96:	af02      	add	r7, sp, #8
 800da98:	60f8      	str	r0, [r7, #12]
 800da9a:	60b9      	str	r1, [r7, #8]
 800da9c:	607a      	str	r2, [r7, #4]
 800da9e:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800daa0:	68b8      	ldr	r0, [r7, #8]
 800daa2:	f7f3 fc7d 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800daa6:	4603      	mov	r3, r0
 800daa8:	3b01      	subs	r3, #1
 800daaa:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dab0:	68b8      	ldr	r0, [r7, #8]
 800dab2:	f7ff fd08 	bl	800d4c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800dab6:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800dab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800daba:	683a      	ldr	r2, [r7, #0]
 800dabc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dabe:	68b8      	ldr	r0, [r7, #8]
 800dac0:	f7f3 fd39 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800dac4:	6538      	str	r0, [r7, #80]	; 0x50

  for (int i = 0; i < outer_size; ++i) {
 800dac6:	2300      	movs	r3, #0
 800dac8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800daca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dacc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dace:	429a      	cmp	r2, r3
 800dad0:	f280 8114 	bge.w	800dcfc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26c>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 800dad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dad8:	83fb      	strh	r3, [r7, #30]
    for (int c = 0; c < depth; ++c) {
 800dada:	2300      	movs	r3, #0
 800dadc:	66bb      	str	r3, [r7, #104]	; 0x68
 800dade:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dae2:	429a      	cmp	r2, r3
 800dae4:	da16      	bge.n	800db14 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800dae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dae8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800daea:	fb02 f203 	mul.w	r2, r2, r3
 800daee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daf0:	4413      	add	r3, r2
 800daf2:	005b      	lsls	r3, r3, #1
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	441a      	add	r2, r3
 800daf8:	f107 031e 	add.w	r3, r7, #30
 800dafc:	4611      	mov	r1, r2
 800dafe:	4618      	mov	r0, r3
 800db00:	f7ff fccb 	bl	800d49a <_ZSt3maxIsERKT_S2_S2_>
 800db04:	4603      	mov	r3, r0
 800db06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db0a:	83fb      	strh	r3, [r7, #30]
    for (int c = 0; c < depth; ++c) {
 800db0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db0e:	3301      	adds	r3, #1
 800db10:	66bb      	str	r3, [r7, #104]	; 0x68
 800db12:	e7e4      	b.n	800dade <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 800db14:	2300      	movs	r3, #0
 800db16:	667b      	str	r3, [r7, #100]	; 0x64
    int16_t* exp_results_Q015 = output_data + i * depth;
 800db18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db1c:	fb02 f303 	mul.w	r3, r2, r3
 800db20:	005b      	lsls	r3, r3, #1
 800db22:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800db26:	4413      	add	r3, r2
 800db28:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (int c = 0; c < depth; ++c) {
 800db2a:	2300      	movs	r3, #0
 800db2c:	663b      	str	r3, [r7, #96]	; 0x60
 800db2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db32:	429a      	cmp	r2, r3
 800db34:	da1f      	bge.n	800db76 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800db36:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
      exp_results_Q015[c] =
 800db3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db3c:	005b      	lsls	r3, r3, #1
 800db3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db40:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800db42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	460b      	mov	r3, r1
 800db4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db4e:	6879      	ldr	r1, [r7, #4]
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f7ff ff51 	bl	800d9f8 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 800db56:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 800db58:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 800db5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db5c:	005b      	lsls	r3, r3, #1
 800db5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db60:	4413      	add	r3, r2
 800db62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db66:	461a      	mov	r2, r3
 800db68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db6a:	4413      	add	r3, r2
 800db6c:	667b      	str	r3, [r7, #100]	; 0x64
    for (int c = 0; c < depth; ++c) {
 800db6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db70:	3301      	adds	r3, #1
 800db72:	663b      	str	r3, [r7, #96]	; 0x60
 800db74:	e7db      	b.n	800db2e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 800db76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 fe87 	bl	800e88c <_ZN6tflite17CountLeadingZerosImEEiT_>
 800db7e:	4603      	mov	r3, r0
 800db80:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 800db84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db86:	461a      	mov	r2, r3
 800db88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800db8c:	f897 104b 	ldrb.w	r1, [r7, #75]	; 0x4b
 800db90:	3901      	subs	r1, #1
 800db92:	f1a1 0620 	sub.w	r6, r1, #32
 800db96:	f1c1 0020 	rsb	r0, r1, #32
 800db9a:	fa03 f501 	lsl.w	r5, r3, r1
 800db9e:	fa02 f606 	lsl.w	r6, r2, r6
 800dba2:	4335      	orrs	r5, r6
 800dba4:	fa22 f000 	lsr.w	r0, r2, r0
 800dba8:	4305      	orrs	r5, r0
 800dbaa:	fa02 f401 	lsl.w	r4, r2, r1
 800dbae:	f514 5000 	adds.w	r0, r4, #8192	; 0x2000
 800dbb2:	f145 0100 	adc.w	r1, r5, #0
         (1 << 13)) >>
 800dbb6:	f04f 0200 	mov.w	r2, #0
 800dbba:	f04f 0300 	mov.w	r3, #0
 800dbbe:	0b82      	lsrs	r2, r0, #14
 800dbc0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800dbc4:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	647b      	str	r3, [r7, #68]	; 0x44
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 800dbca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbcc:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 800dbd0:	61bb      	str	r3, [r7, #24]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
                 static_cast<int32_t>(32767)));
 800dbd2:	4b4d      	ldr	r3, [pc, #308]	; (800dd08 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x278>)
 800dbd4:	623b      	str	r3, [r7, #32]
 800dbd6:	f107 0220 	add.w	r2, r7, #32
 800dbda:	f107 0318 	add.w	r3, r7, #24
 800dbde:	4611      	mov	r1, r2
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7f3 fb43 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800dbec:	627b      	str	r3, [r7, #36]	; 0x24
 800dbee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	f7f4 fe33 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 800dbfa:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 800dbfc:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 800dbfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc06:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7ff fdc9 	bl	800d7a4 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 800dc18:	2300      	movs	r3, #0
 800dc1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc20:	429a      	cmp	r2, r3
 800dc22:	da67      	bge.n	800dcf4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x264>
      uint8_t right_shift = 31 - headroom_plus_one;
 800dc24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800dc28:	f1c3 031f 	rsb	r3, r3, #31
 800dc2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      int64_t round = 1 << (right_shift - 1);
 800dc30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc34:	3b01      	subs	r3, #1
 800dc36:	2201      	movs	r2, #1
 800dc38:	fa02 f303 	lsl.w	r3, r2, r3
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dc42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800dc46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc48:	005b      	lsls	r3, r3, #1
 800dc4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc52:	b218      	sxth	r0, r3
 800dc54:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800dc58:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800dc5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800dc60:	fb02 fc01 	mul.w	ip, r2, r1
 800dc64:	fb00 f603 	mul.w	r6, r0, r3
 800dc68:	4466      	add	r6, ip
 800dc6a:	fba0 2302 	umull	r2, r3, r0, r2
 800dc6e:	18f1      	adds	r1, r6, r3
 800dc70:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800dc72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800dc76:	eb12 0b00 	adds.w	fp, r2, r0
 800dc7a:	eb43 0c01 	adc.w	ip, r3, r1
                        round) >>
 800dc7e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800dc82:	f1c1 0620 	rsb	r6, r1, #32
 800dc86:	f1b1 0020 	subs.w	r0, r1, #32
 800dc8a:	fa2b f801 	lsr.w	r8, fp, r1
 800dc8e:	fa0c f606 	lsl.w	r6, ip, r6
 800dc92:	ea48 0806 	orr.w	r8, r8, r6
 800dc96:	d403      	bmi.n	800dca0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x210>
 800dc98:	fa4c f000 	asr.w	r0, ip, r0
 800dc9c:	ea48 0800 	orr.w	r8, r8, r0
 800dca0:	fa4c f901 	asr.w	r9, ip, r1
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800dca4:	4643      	mov	r3, r8
 800dca6:	617b      	str	r3, [r7, #20]
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
                   static_cast<int32_t>(32767)));
 800dca8:	2300      	movs	r3, #0
 800dcaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800dcb0:	f107 0314 	add.w	r3, r7, #20
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7f3 fad8 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800dcc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dcc8:	4619      	mov	r1, r3
 800dcca:	4610      	mov	r0, r2
 800dccc:	f7f4 fdc8 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 800dcd0:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 800dcd2:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 800dcd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dcd8:	fb02 f203 	mul.w	r2, r2, r3
 800dcdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcde:	4413      	add	r3, r2
 800dce0:	005b      	lsls	r3, r3, #1
 800dce2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dce6:	4413      	add	r3, r2
 800dce8:	b20a      	sxth	r2, r1
 800dcea:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 800dcec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcee:	3301      	adds	r3, #1
 800dcf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dcf2:	e793      	b.n	800dc1c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x18c>
  for (int i = 0; i < outer_size; ++i) {
 800dcf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcfa:	e6e6      	b.n	800daca <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 800dcfc:	bf00      	nop
 800dcfe:	3770      	adds	r7, #112	; 0x70
 800dd00:	46bd      	mov	sp, r7
 800dd02:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800dd06:	bf00      	nop
 800dd08:	ffff8000 	.word	0xffff8000
 800dd0c:	00000000 	.word	0x00000000

0800dd10 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 800dd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd14:	b091      	sub	sp, #68	; 0x44
 800dd16:	af06      	add	r7, sp, #24
 800dd18:	60f8      	str	r0, [r7, #12]
 800dd1a:	60b9      	str	r1, [r7, #8]
 800dd1c:	607a      	str	r2, [r7, #4]
 800dd1e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8 ||
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	2b03      	cmp	r3, #3
 800dd26:	d008      	beq.n	800dd3a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a>
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	2b09      	cmp	r3, #9
 800dd2e:	d004      	beq.n	800dd3a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a>
      input->type == kTfLiteInt16) {
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8 ||
 800dd34:	2b07      	cmp	r3, #7
 800dd36:	f040 81f1 	bne.w	800e11c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x40c>
    if (input->type == kTfLiteUInt8) {
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	2b03      	cmp	r3, #3
 800dd40:	d134      	bne.n	800ddac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9c>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	d019      	beq.n	800dd7e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x6e>
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	695c      	ldr	r4, [r3, #20]
 800dd4e:	68fd      	ldr	r5, [r7, #12]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7f3 f9cf 	bl	80010f8 <TfLiteTypeGetName>
 800dd5a:	4606      	mov	r6, r0
 800dd5c:	2003      	movs	r0, #3
 800dd5e:	f7f3 f9cb 	bl	80010f8 <TfLiteTypeGetName>
 800dd62:	4603      	mov	r3, r0
 800dd64:	9303      	str	r3, [sp, #12]
 800dd66:	9602      	str	r6, [sp, #8]
 800dd68:	4ba1      	ldr	r3, [pc, #644]	; (800dff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 800dd6a:	9301      	str	r3, [sp, #4]
 800dd6c:	4ba1      	ldr	r3, [pc, #644]	; (800dff4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	2329      	movs	r3, #41	; 0x29
 800dd72:	4aa1      	ldr	r2, [pc, #644]	; (800dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800dd74:	49a1      	ldr	r1, [pc, #644]	; (800dffc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800dd76:	4628      	mov	r0, r5
 800dd78:	47a0      	blx	r4
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e215      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f000 8164 	beq.w	800e050 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	695c      	ldr	r4, [r3, #20]
 800dd8c:	68f8      	ldr	r0, [r7, #12]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	2200      	movs	r2, #0
 800dd94:	9203      	str	r2, [sp, #12]
 800dd96:	9302      	str	r3, [sp, #8]
 800dd98:	4b99      	ldr	r3, [pc, #612]	; (800e000 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 800dd9a:	9301      	str	r3, [sp, #4]
 800dd9c:	4b99      	ldr	r3, [pc, #612]	; (800e004 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800dd9e:	9300      	str	r3, [sp, #0]
 800dda0:	232a      	movs	r3, #42	; 0x2a
 800dda2:	4a95      	ldr	r2, [pc, #596]	; (800dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800dda4:	4998      	ldr	r1, [pc, #608]	; (800e008 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800dda6:	47a0      	blx	r4
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e1fe      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
    } else if (input->type == kTfLiteInt16) {
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	2b07      	cmp	r3, #7
 800ddb2:	d157      	bne.n	800de64 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x154>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d011      	beq.n	800dde0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd0>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	695c      	ldr	r4, [r3, #20]
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	9203      	str	r2, [sp, #12]
 800ddca:	9302      	str	r3, [sp, #8]
 800ddcc:	4b8c      	ldr	r3, [pc, #560]	; (800e000 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 800ddce:	9301      	str	r3, [sp, #4]
 800ddd0:	4b8c      	ldr	r3, [pc, #560]	; (800e004 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	232c      	movs	r3, #44	; 0x2c
 800ddd6:	4a88      	ldr	r2, [pc, #544]	; (800dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800ddd8:	498b      	ldr	r1, [pc, #556]	; (800e008 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800ddda:	47a0      	blx	r4
 800dddc:	2301      	movs	r3, #1
 800ddde:	e1e4      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	edd3 7a03 	vldr	s15, [r3, #12]
 800dde6:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800e00c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 800ddea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf2:	dd07      	ble.n	800de04 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	edd3 7a03 	vldr	s15, [r3, #12]
 800ddfa:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800e00c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 800ddfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de02:	e006      	b.n	800de12 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x102>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	edd3 7a03 	vldr	s15, [r3, #12]
 800de0a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800e00c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 800de0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de12:	edc7 7a08 	vstr	s15, [r7, #32]
 800de16:	edd7 7a08 	vldr	s15, [r7, #32]
 800de1a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800e010 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800de1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de26:	f340 8113 	ble.w	800e050 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	695d      	ldr	r5, [r3, #20]
 800de2e:	68fe      	ldr	r6, [r7, #12]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	4618      	mov	r0, r3
 800de36:	f7f2 fb97 	bl	8000568 <__aeabi_f2d>
 800de3a:	460a      	mov	r2, r1
 800de3c:	4601      	mov	r1, r0
 800de3e:	f04f 0300 	mov.w	r3, #0
 800de42:	f04f 547c 	mov.w	r4, #1056964608	; 0x3f000000
 800de46:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800de4a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800de4e:	4b71      	ldr	r3, [pc, #452]	; (800e014 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
 800de50:	9301      	str	r3, [sp, #4]
 800de52:	4b71      	ldr	r3, [pc, #452]	; (800e018 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	232e      	movs	r3, #46	; 0x2e
 800de58:	4a67      	ldr	r2, [pc, #412]	; (800dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800de5a:	4970      	ldr	r1, [pc, #448]	; (800e01c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 800de5c:	4630      	mov	r0, r6
 800de5e:	47a8      	blx	r5
 800de60:	2301      	movs	r3, #1
 800de62:	e1a2      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	2b09      	cmp	r3, #9
 800de6a:	d019      	beq.n	800dea0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x190>
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	695c      	ldr	r4, [r3, #20]
 800de70:	68fd      	ldr	r5, [r7, #12]
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	4618      	mov	r0, r3
 800de78:	f7f3 f93e 	bl	80010f8 <TfLiteTypeGetName>
 800de7c:	4606      	mov	r6, r0
 800de7e:	2009      	movs	r0, #9
 800de80:	f7f3 f93a 	bl	80010f8 <TfLiteTypeGetName>
 800de84:	4603      	mov	r3, r0
 800de86:	9303      	str	r3, [sp, #12]
 800de88:	9602      	str	r6, [sp, #8]
 800de8a:	4b65      	ldr	r3, [pc, #404]	; (800e020 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	4b65      	ldr	r3, [pc, #404]	; (800e024 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	2330      	movs	r3, #48	; 0x30
 800de94:	4a58      	ldr	r2, [pc, #352]	; (800dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800de96:	4959      	ldr	r1, [pc, #356]	; (800dffc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800de98:	4628      	mov	r0, r5
 800de9a:	47a0      	blx	r4
 800de9c:	2301      	movs	r3, #1
 800de9e:	e184      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
      if (output->type == kTfLiteInt16) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	2b07      	cmp	r3, #7
 800dea6:	d157      	bne.n	800df58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x248>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800deb0:	d011      	beq.n	800ded6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	695c      	ldr	r4, [r3, #20]
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	4a5a      	ldr	r2, [pc, #360]	; (800e028 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
 800debe:	9203      	str	r2, [sp, #12]
 800dec0:	9302      	str	r3, [sp, #8]
 800dec2:	4b5a      	ldr	r3, [pc, #360]	; (800e02c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 800dec4:	9301      	str	r3, [sp, #4]
 800dec6:	4b4f      	ldr	r3, [pc, #316]	; (800e004 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	2332      	movs	r3, #50	; 0x32
 800decc:	4a4a      	ldr	r2, [pc, #296]	; (800dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800dece:	494e      	ldr	r1, [pc, #312]	; (800e008 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800ded0:	47a0      	blx	r4
 800ded2:	2301      	movs	r3, #1
 800ded4:	e169      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	edd3 7a03 	vldr	s15, [r3, #12]
 800dedc:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800e030 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 800dee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee8:	dd07      	ble.n	800defa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ea>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	edd3 7a03 	vldr	s15, [r3, #12]
 800def0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800e030 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 800def4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800def8:	e006      	b.n	800df08 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1f8>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	edd3 7a03 	vldr	s15, [r3, #12]
 800df00:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800e030 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 800df04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800df0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800df10:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e034 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
 800df14:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df1c:	f340 8098 	ble.w	800e050 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	695d      	ldr	r5, [r3, #20]
 800df24:	68fe      	ldr	r6, [r7, #12]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68db      	ldr	r3, [r3, #12]
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7f2 fb1c 	bl	8000568 <__aeabi_f2d>
 800df30:	460a      	mov	r2, r1
 800df32:	4601      	mov	r1, r0
 800df34:	f04f 0300 	mov.w	r3, #0
 800df38:	4c3f      	ldr	r4, [pc, #252]	; (800e038 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
 800df3a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800df3e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800df42:	4b3e      	ldr	r3, [pc, #248]	; (800e03c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
 800df44:	9301      	str	r3, [sp, #4]
 800df46:	4b34      	ldr	r3, [pc, #208]	; (800e018 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	2334      	movs	r3, #52	; 0x34
 800df4c:	4a2a      	ldr	r2, [pc, #168]	; (800dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800df4e:	4933      	ldr	r1, [pc, #204]	; (800e01c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 800df50:	4630      	mov	r0, r6
 800df52:	47a8      	blx	r5
 800df54:	2301      	movs	r3, #1
 800df56:	e128      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2b09      	cmp	r3, #9
 800df5e:	d019      	beq.n	800df94 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x284>
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	695c      	ldr	r4, [r3, #20]
 800df64:	68fd      	ldr	r5, [r7, #12]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7f3 f8c4 	bl	80010f8 <TfLiteTypeGetName>
 800df70:	4606      	mov	r6, r0
 800df72:	2009      	movs	r0, #9
 800df74:	f7f3 f8c0 	bl	80010f8 <TfLiteTypeGetName>
 800df78:	4603      	mov	r3, r0
 800df7a:	9303      	str	r3, [sp, #12]
 800df7c:	9602      	str	r6, [sp, #8]
 800df7e:	4b28      	ldr	r3, [pc, #160]	; (800e020 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 800df80:	9301      	str	r3, [sp, #4]
 800df82:	4b1c      	ldr	r3, [pc, #112]	; (800dff4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	2336      	movs	r3, #54	; 0x36
 800df88:	4a1b      	ldr	r2, [pc, #108]	; (800dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800df8a:	491c      	ldr	r1, [pc, #112]	; (800dffc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800df8c:	4628      	mov	r0, r5
 800df8e:	47a0      	blx	r4
 800df90:	2301      	movs	r3, #1
 800df92:	e10a      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800df9c:	d012      	beq.n	800dfc4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	695c      	ldr	r4, [r3, #20]
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	691b      	ldr	r3, [r3, #16]
 800dfa8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800dfac:	9203      	str	r2, [sp, #12]
 800dfae:	9302      	str	r3, [sp, #8]
 800dfb0:	4b23      	ldr	r3, [pc, #140]	; (800e040 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
 800dfb2:	9301      	str	r3, [sp, #4]
 800dfb4:	4b13      	ldr	r3, [pc, #76]	; (800e004 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800dfb6:	9300      	str	r3, [sp, #0]
 800dfb8:	2337      	movs	r3, #55	; 0x37
 800dfba:	4a0f      	ldr	r2, [pc, #60]	; (800dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800dfbc:	4912      	ldr	r1, [pc, #72]	; (800e008 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800dfbe:	47a0      	blx	r4
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e0f2      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	edd3 7a03 	vldr	s15, [r3, #12]
 800dfca:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800e044 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x334>
 800dfce:	eef4 7a47 	vcmp.f32	s15, s14
 800dfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfd6:	d03b      	beq.n	800e050 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	695c      	ldr	r4, [r3, #20]
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	4b1a      	ldr	r3, [pc, #104]	; (800e048 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x338>)
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	2338      	movs	r3, #56	; 0x38
 800dfe4:	4a04      	ldr	r2, [pc, #16]	; (800dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800dfe6:	4919      	ldr	r1, [pc, #100]	; (800e04c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x33c>)
 800dfe8:	47a0      	blx	r4
 800dfea:	2301      	movs	r3, #1
 800dfec:	e0dd      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
 800dfee:	bf00      	nop
 800dff0:	08019ad0 	.word	0x08019ad0
 800dff4:	08019ae0 	.word	0x08019ae0
 800dff8:	08019a9c 	.word	0x08019a9c
 800dffc:	08019ab4 	.word	0x08019ab4
 800e000:	08019b0c 	.word	0x08019b0c
 800e004:	08019b10 	.word	0x08019b10
 800e008:	08019af0 	.word	0x08019af0
 800e00c:	38000000 	.word	0x38000000
 800e010:	3303126f 	.word	0x3303126f
 800e014:	08019b4c 	.word	0x08019b4c
 800e018:	08019b58 	.word	0x08019b58
 800e01c:	08019b2c 	.word	0x08019b2c
 800e020:	08019b70 	.word	0x08019b70
 800e024:	08019b7c 	.word	0x08019b7c
 800e028:	ffff8000 	.word	0xffff8000
 800e02c:	08019b88 	.word	0x08019b88
 800e030:	37800000 	.word	0x37800000
 800e034:	3283126f 	.word	0x3283126f
 800e038:	3ef00000 	.word	0x3ef00000
 800e03c:	08019b90 	.word	0x08019b90
 800e040:	08019b9c 	.word	0x08019b9c
 800e044:	3b800000 	.word	0x3b800000
 800e048:	08019bbc 	.word	0x08019bbc
 800e04c:	08019ba4 	.word	0x08019ba4
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	2b07      	cmp	r3, #7
 800e056:	d12c      	bne.n	800e0b2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a2>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7f2 fa83 	bl	8000568 <__aeabi_f2d>
 800e062:	4604      	mov	r4, r0
 800e064:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7f2 fa7c 	bl	8000568 <__aeabi_f2d>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 800e074:	4620      	mov	r0, r4
 800e076:	4629      	mov	r1, r5
 800e078:	f7f2 face 	bl	8000618 <__aeabi_dmul>
 800e07c:	4603      	mov	r3, r0
 800e07e:	460c      	mov	r4, r1
 800e080:	4618      	mov	r0, r3
 800e082:	4621      	mov	r1, r4
      double input_scale_beta_rescale =
 800e084:	a351      	add	r3, pc, #324	; (adr r3, 800e1cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4bc>)
 800e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08a:	f7f2 fbef 	bl	800086c <__aeabi_ddiv>
 800e08e:	4603      	mov	r3, r0
 800e090:	460c      	mov	r4, r1
 800e092:	e9c7 3406 	strd	r3, r4, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 800e096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e098:	3308      	adds	r3, #8
 800e09a:	f107 0214 	add.w	r2, r7, #20
 800e09e:	4611      	mov	r1, r2
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	ed97 0b06 	vldr	d0, [r7, #24]
 800e0a6:	f7fe f8a5 	bl	800c1f4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 800e0aa:	697a      	ldr	r2, [r7, #20]
 800e0ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ae:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 800e0b0:	e07a      	b.n	800e1a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x498>
          static_cast<double>(params->beta),
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7f2 fa56 	bl	8000568 <__aeabi_f2d>
 800e0bc:	4680      	mov	r8, r0
 800e0be:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7f2 fa4f 	bl	8000568 <__aeabi_f2d>
 800e0ca:	4682      	mov	sl, r0
 800e0cc:	468b      	mov	fp, r1
 800e0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0d0:	3308      	adds	r3, #8
 800e0d2:	f107 0210 	add.w	r2, r7, #16
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	2005      	movs	r0, #5
 800e0da:	ec4b ab11 	vmov	d1, sl, fp
 800e0de:	ec49 8b10 	vmov	d0, r8, r9
 800e0e2:	f7fe f959 	bl	800c398 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 800e0e6:	693a      	ldr	r2, [r7, #16]
 800e0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ea:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 800e0ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ee:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 800e0f0:	221f      	movs	r2, #31
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	2005      	movs	r0, #5
 800e0f6:	f7fe f997 	bl	800c428 <_ZN6tflite20CalculateInputRadiusEiii>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7f2 fa21 	bl	8000544 <__aeabi_i2d>
 800e102:	4602      	mov	r2, r0
 800e104:	460b      	mov	r3, r1
 800e106:	4614      	mov	r4, r2
 800e108:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 800e10c:	4620      	mov	r0, r4
 800e10e:	4629      	mov	r1, r5
 800e110:	f7f2 fd32 	bl	8000b78 <__aeabi_d2iz>
 800e114:	4602      	mov	r2, r0
 800e116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e118:	619a      	str	r2, [r3, #24]
    }
 800e11a:	e045      	b.n	800e1a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x498>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	2b01      	cmp	r3, #1
 800e122:	d019      	beq.n	800e158 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x448>
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	695c      	ldr	r4, [r3, #20]
 800e128:	68fd      	ldr	r5, [r7, #12]
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	4618      	mov	r0, r3
 800e130:	f7f2 ffe2 	bl	80010f8 <TfLiteTypeGetName>
 800e134:	4606      	mov	r6, r0
 800e136:	2001      	movs	r0, #1
 800e138:	f7f2 ffde 	bl	80010f8 <TfLiteTypeGetName>
 800e13c:	4603      	mov	r3, r0
 800e13e:	9303      	str	r3, [sp, #12]
 800e140:	9602      	str	r6, [sp, #8]
 800e142:	4b1d      	ldr	r3, [pc, #116]	; (800e1b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4a8>)
 800e144:	9301      	str	r3, [sp, #4]
 800e146:	4b1d      	ldr	r3, [pc, #116]	; (800e1bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4ac>)
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	2355      	movs	r3, #85	; 0x55
 800e14c:	4a1c      	ldr	r2, [pc, #112]	; (800e1c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b0>)
 800e14e:	491d      	ldr	r1, [pc, #116]	; (800e1c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b4>)
 800e150:	4628      	mov	r0, r5
 800e152:	47a0      	blx	r4
 800e154:	2301      	movs	r3, #1
 800e156:	e028      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d019      	beq.n	800e194 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x484>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	695c      	ldr	r4, [r3, #20]
 800e164:	68fd      	ldr	r5, [r7, #12]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7f2 ffc4 	bl	80010f8 <TfLiteTypeGetName>
 800e170:	4606      	mov	r6, r0
 800e172:	2001      	movs	r0, #1
 800e174:	f7f2 ffc0 	bl	80010f8 <TfLiteTypeGetName>
 800e178:	4603      	mov	r3, r0
 800e17a:	9303      	str	r3, [sp, #12]
 800e17c:	9602      	str	r6, [sp, #8]
 800e17e:	4b0e      	ldr	r3, [pc, #56]	; (800e1b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4a8>)
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	4b11      	ldr	r3, [pc, #68]	; (800e1c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b8>)
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	2356      	movs	r3, #86	; 0x56
 800e188:	4a0d      	ldr	r2, [pc, #52]	; (800e1c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b0>)
 800e18a:	490e      	ldr	r1, [pc, #56]	; (800e1c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b4>)
 800e18c:	4628      	mov	r0, r5
 800e18e:	47a0      	blx	r4
 800e190:	2301      	movs	r3, #1
 800e192:	e00a      	b.n	800e1aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
    op_data->beta = static_cast<double>(params->beta);
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4618      	mov	r0, r3
 800e19a:	f7f2 f9e5 	bl	8000568 <__aeabi_f2d>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	460c      	mov	r4, r1
 800e1a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1a4:	e9c2 3400 	strd	r3, r4, [r2]
  }
  return kTfLiteOk;
 800e1a8:	2300      	movs	r3, #0
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	372c      	adds	r7, #44	; 0x2c
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b4:	f3af 8000 	nop.w
 800e1b8:	08019be0 	.word	0x08019be0
 800e1bc:	08019b7c 	.word	0x08019b7c
 800e1c0:	08019a9c 	.word	0x08019a9c
 800e1c4:	08019ab4 	.word	0x08019ab4
 800e1c8:	08019ae0 	.word	0x08019ae0
 800e1cc:	00140014 	.word	0x00140014
 800e1d0:	3f240014 	.word	0x3f240014

0800e1d4 <_ZN6tflite12_GLOBAL__N_112SoftmaxFloatEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                  const SoftmaxParams& op_data) {
 800e1d4:	b590      	push	{r4, r7, lr}
 800e1d6:	b093      	sub	sp, #76	; 0x4c
 800e1d8:	af02      	add	r7, sp, #8
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 800e1e0:	f107 0310 	add.w	r3, r7, #16
 800e1e4:	68f9      	ldr	r1, [r7, #12]
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7f8 f947 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f7f4 fe0b 	bl	8002e08 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800e1f2:	4604      	mov	r4, r0
                                 tflite::micro::GetTensorData<float>(input),
                                 tflite::micro::GetTensorShape(output),
 800e1f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e1f8:	68b9      	ldr	r1, [r7, #8]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7f8 f93d 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 800e200:	68b8      	ldr	r0, [r7, #8]
 800e202:	f7f4 fe10 	bl	8002e26 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800e206:	4602      	mov	r2, r0
 800e208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e20c:	f107 0110 	add.w	r1, r7, #16
 800e210:	9200      	str	r2, [sp, #0]
 800e212:	4622      	mov	r2, r4
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f7ff fb3e 	bl	800d896 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                                 tflite::micro::GetTensorShape(output),
 800e21a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e21e:	4618      	mov	r0, r3
 800e220:	f7f3 f8a8 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 800e224:	f107 0310 	add.w	r3, r7, #16
 800e228:	4618      	mov	r0, r3
 800e22a:	f7f3 f8a3 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
                                 tflite::micro::GetTensorData<float>(output));
}
 800e22e:	bf00      	nop
 800e230:	3744      	adds	r7, #68	; 0x44
 800e232:	46bd      	mov	sp, r7
 800e234:	bd90      	pop	{r4, r7, pc}

0800e236 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 800e236:	b590      	push	{r4, r7, lr}
 800e238:	b0b7      	sub	sp, #220	; 0xdc
 800e23a:	af02      	add	r7, sp, #8
 800e23c:	60f8      	str	r0, [r7, #12]
 800e23e:	60b9      	str	r1, [r7, #8]
 800e240:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	7a1b      	ldrb	r3, [r3, #8]
 800e246:	2b03      	cmp	r3, #3
 800e248:	d127      	bne.n	800e29a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 800e24a:	f107 0310 	add.w	r3, r7, #16
 800e24e:	68f9      	ldr	r1, [r7, #12]
 800e250:	4618      	mov	r0, r3
 800e252:	f7f8 f912 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	f7f4 fe25 	bl	8002ea6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800e25c:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 800e25e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e262:	68b9      	ldr	r1, [r7, #8]
 800e264:	4618      	mov	r0, r3
 800e266:	f7f8 f908 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 800e26a:	68b8      	ldr	r0, [r7, #8]
 800e26c:	f7f4 fe2a 	bl	8002ec4 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800e270:	4602      	mov	r2, r0
 800e272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e276:	f107 0110 	add.w	r1, r7, #16
 800e27a:	9200      	str	r2, [sp, #0]
 800e27c:	4622      	mov	r2, r4
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 fbb4 	bl	800e9ec <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 800e284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e288:	4618      	mov	r0, r3
 800e28a:	f7f3 f873 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 800e28e:	f107 0310 	add.w	r3, r7, #16
 800e292:	4618      	mov	r0, r3
 800e294:	f7f3 f86e 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 800e298:	e07e      	b.n	800e398 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x162>
  } else if (input->type == kTfLiteInt8) {
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	7a1b      	ldrb	r3, [r3, #8]
 800e29e:	2b09      	cmp	r3, #9
 800e2a0:	d153      	bne.n	800e34a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x114>
    if (output->type == kTfLiteInt16) {
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	7a1b      	ldrb	r3, [r3, #8]
 800e2a6:	2b07      	cmp	r3, #7
 800e2a8:	d127      	bne.n	800e2fa <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xc4>
          op_data, tflite::micro::GetTensorShape(input),
 800e2aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e2ae:	68f9      	ldr	r1, [r7, #12]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7f8 f8e2 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f7f4 fdc6 	bl	8002e48 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800e2bc:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 800e2be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e2c2:	68b9      	ldr	r1, [r7, #8]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7f8 f8d8 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800e2ca:	68b8      	ldr	r0, [r7, #8]
 800e2cc:	f7f7 fc70 	bl	8005bb0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e2d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800e2da:	9200      	str	r2, [sp, #0]
 800e2dc:	4622      	mov	r2, r4
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 fc9f 	bl	800ec22 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800e2e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7f3 f843 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800e2ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7f3 f83e 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800e2f8:	e04e      	b.n	800e398 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x162>
          op_data, tflite::micro::GetTensorShape(input),
 800e2fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e2fe:	68f9      	ldr	r1, [r7, #12]
 800e300:	4618      	mov	r0, r3
 800e302:	f7f8 f8ba 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f7f4 fd9e 	bl	8002e48 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800e30c:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 800e30e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e312:	68b9      	ldr	r1, [r7, #8]
 800e314:	4618      	mov	r0, r3
 800e316:	f7f8 f8b0 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800e31a:	68b8      	ldr	r0, [r7, #8]
 800e31c:	f7f4 fdb2 	bl	8002e84 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800e320:	4602      	mov	r2, r0
 800e322:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e326:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800e32a:	9200      	str	r2, [sp, #0]
 800e32c:	4622      	mov	r2, r4
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 fd95 	bl	800ee5e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800e334:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e338:	4618      	mov	r0, r3
 800e33a:	f7f3 f81b 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800e33e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e342:	4618      	mov	r0, r3
 800e344:	f7f3 f816 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800e348:	e026      	b.n	800e398 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x162>
        op_data, tflite::micro::GetTensorShape(input),
 800e34a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e34e:	68f9      	ldr	r1, [r7, #12]
 800e350:	4618      	mov	r0, r3
 800e352:	f7f8 f892 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	f000 fe9f 	bl	800f09a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800e35c:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 800e35e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800e362:	68b9      	ldr	r1, [r7, #8]
 800e364:	4618      	mov	r0, r3
 800e366:	f7f8 f888 	bl	800647a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800e36a:	68b8      	ldr	r0, [r7, #8]
 800e36c:	f7f7 fc20 	bl	8005bb0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800e370:	4602      	mov	r2, r0
 800e372:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800e376:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800e37a:	9200      	str	r2, [sp, #0]
 800e37c:	4622      	mov	r2, r4
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7ff fb86 	bl	800da90 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 800e384:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800e388:	4618      	mov	r0, r3
 800e38a:	f7f2 fff3 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 800e38e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e392:	4618      	mov	r0, r3
 800e394:	f7f2 ffee 	bl	8001374 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800e398:	bf00      	nop
 800e39a:	37d4      	adds	r7, #212	; 0xd4
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd90      	pop	{r4, r7, pc}

0800e3a0 <_ZN6tflite12_GLOBAL__N_111SoftmaxInitEP13TfLiteContextPKcj>:

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d101      	bne.n	800e3b8 <_ZN6tflite12_GLOBAL__N_111SoftmaxInitEP13TfLiteContextPKcj+0x18>
 800e3b4:	f005 fe4c 	bl	8014050 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3bc:	2138      	movs	r1, #56	; 0x38
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	4798      	blx	r3
 800e3c2:	4603      	mov	r3, r0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	ed87 0a00 	vstr	s0, [r7]
 800e3d8:	ed97 0a00 	vldr	s0, [r7]
 800e3dc:	f7ff f808 	bl	800d3f0 <_ZSt3expf>
 800e3e0:	eef0 7a40 	vmov.f32	s15, s0
 800e3e4:	eeb0 0a67 	vmov.f32	s0, s15
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b082      	sub	sp, #8
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	ed87 0a01 	vstr	s0, [r7, #4]
 800e3f8:	ed97 0a01 	vldr	s0, [r7, #4]
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	f7ff ffe5 	bl	800e3cc <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 800e402:	eef0 7a40 	vmov.f32	s15, s0
 800e406:	eeb0 0a67 	vmov.f32	s0, s15
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	4b03      	ldr	r3, [pc, #12]	; (800e428 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 800e41a:	4618      	mov	r0, r3
 800e41c:	370c      	adds	r7, #12
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop
 800e428:	0800e3ef 	.word	0x0800e3ef

0800e42c <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	ed87 0a00 	vstr	s0, [r7]
 800e438:	edd7 7a00 	vldr	s15, [r7]
 800e43c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e440:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e448:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e44c:	eef0 7a66 	vmov.f32	s15, s13
 800e450:	eeb0 0a67 	vmov.f32	s0, s15
 800e454:	370c      	adds	r7, #12
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr

0800e45e <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 800e45e:	b580      	push	{r7, lr}
 800e460:	b082      	sub	sp, #8
 800e462:	af00      	add	r7, sp, #0
 800e464:	ed87 0a01 	vstr	s0, [r7, #4]
 800e468:	ed97 0a01 	vldr	s0, [r7, #4]
 800e46c:	2000      	movs	r0, #0
 800e46e:	f7ff ffdd 	bl	800e42c <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 800e472:	eef0 7a40 	vmov.f32	s15, s0
 800e476:	eeb0 0a67 	vmov.f32	s0, s15
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	4b03      	ldr	r3, [pc, #12]	; (800e498 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 800e48a:	4618      	mov	r0, r3
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop
 800e498:	0800e45f 	.word	0x0800e45f

0800e49c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800e49c:	b5b0      	push	{r4, r5, r7, lr}
 800e49e:	b08e      	sub	sp, #56	; 0x38
 800e4a0:	af04      	add	r7, sp, #16
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800e4a6:	6838      	ldr	r0, [r7, #0]
 800e4a8:	f7f3 fc1e 	bl	8001ce8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	bf14      	ite	ne
 800e4b2:	2301      	movne	r3, #1
 800e4b4:	2300      	moveq	r3, #0
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d014      	beq.n	800e4e6 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	695c      	ldr	r4, [r3, #20]
 800e4c0:	687d      	ldr	r5, [r7, #4]
 800e4c2:	6838      	ldr	r0, [r7, #0]
 800e4c4:	f7f3 fc10 	bl	8001ce8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	9303      	str	r3, [sp, #12]
 800e4ce:	9202      	str	r2, [sp, #8]
 800e4d0:	4b80      	ldr	r3, [pc, #512]	; (800e6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800e4d2:	9301      	str	r3, [sp, #4]
 800e4d4:	4b80      	ldr	r3, [pc, #512]	; (800e6d8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800e4d6:	9300      	str	r3, [sp, #0]
 800e4d8:	238a      	movs	r3, #138	; 0x8a
 800e4da:	4a80      	ldr	r2, [pc, #512]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e4dc:	4980      	ldr	r1, [pc, #512]	; (800e6e0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800e4de:	4628      	mov	r0, r5
 800e4e0:	47a0      	blx	r4
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e14e      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800e4e6:	6838      	ldr	r0, [r7, #0]
 800e4e8:	f7fe fbba 	bl	800cc60 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	bf14      	ite	ne
 800e4f2:	2301      	movne	r3, #1
 800e4f4:	2300      	moveq	r3, #0
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d014      	beq.n	800e526 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	695c      	ldr	r4, [r3, #20]
 800e500:	687d      	ldr	r5, [r7, #4]
 800e502:	6838      	ldr	r0, [r7, #0]
 800e504:	f7fe fbac 	bl	800cc60 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e508:	4602      	mov	r2, r0
 800e50a:	2301      	movs	r3, #1
 800e50c:	9303      	str	r3, [sp, #12]
 800e50e:	9202      	str	r2, [sp, #8]
 800e510:	4b70      	ldr	r3, [pc, #448]	; (800e6d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800e512:	9301      	str	r3, [sp, #4]
 800e514:	4b73      	ldr	r3, [pc, #460]	; (800e6e4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	238b      	movs	r3, #139	; 0x8b
 800e51a:	4a70      	ldr	r2, [pc, #448]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e51c:	4970      	ldr	r1, [pc, #448]	; (800e6e0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800e51e:	4628      	mov	r0, r5
 800e520:	47a0      	blx	r4
 800e522:	2301      	movs	r3, #1
 800e524:	e12e      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  const TfLiteTensor* input = GetInput(context, node, 0);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	6839      	ldr	r1, [r7, #0]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7f8 f8b8 	bl	80066a2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800e532:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	2b00      	cmp	r3, #0
 800e538:	d10a      	bne.n	800e550 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	695c      	ldr	r4, [r3, #20]
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	4b69      	ldr	r3, [pc, #420]	; (800e6e8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	238d      	movs	r3, #141	; 0x8d
 800e546:	4a65      	ldr	r2, [pc, #404]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e548:	4968      	ldr	r1, [pc, #416]	; (800e6ec <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800e54a:	47a0      	blx	r4
 800e54c:	2301      	movs	r3, #1
 800e54e:	e119      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800e550:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e552:	f7f7 ffd8 	bl	8006506 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	bfd4      	ite	le
 800e55c:	2301      	movle	r3, #1
 800e55e:	2300      	movgt	r3, #0
 800e560:	b2db      	uxtb	r3, r3
 800e562:	2b00      	cmp	r3, #0
 800e564:	d00a      	beq.n	800e57c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	695c      	ldr	r4, [r3, #20]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	4b60      	ldr	r3, [pc, #384]	; (800e6f0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	238e      	movs	r3, #142	; 0x8e
 800e572:	4a5a      	ldr	r2, [pc, #360]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e574:	495d      	ldr	r1, [pc, #372]	; (800e6ec <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800e576:	47a0      	blx	r4
 800e578:	2301      	movs	r3, #1
 800e57a:	e103      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TfLiteTensor* output = GetOutput(context, node, 0);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	6839      	ldr	r1, [r7, #0]
 800e582:	4618      	mov	r0, r3
 800e584:	f7f8 f89d 	bl	80066c2 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800e588:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 800e58a:	6a3b      	ldr	r3, [r7, #32]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d10a      	bne.n	800e5a6 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10a>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	695c      	ldr	r4, [r3, #20]
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	4b57      	ldr	r3, [pc, #348]	; (800e6f4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	2390      	movs	r3, #144	; 0x90
 800e59c:	4a4f      	ldr	r2, [pc, #316]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e59e:	4953      	ldr	r1, [pc, #332]	; (800e6ec <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800e5a0:	47a0      	blx	r4
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	e0ee      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d10a      	bne.n	800e5c4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x128>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	695c      	ldr	r4, [r3, #20]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	4b50      	ldr	r3, [pc, #320]	; (800e6f8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	2392      	movs	r3, #146	; 0x92
 800e5ba:	4a48      	ldr	r2, [pc, #288]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e5bc:	494b      	ldr	r1, [pc, #300]	; (800e6ec <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800e5be:	47a0      	blx	r4
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	e0df      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	2b07      	cmp	r3, #7
 800e5d0:	d131      	bne.n	800e636 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19a>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d6:	687a      	ldr	r2, [r7, #4]
        context, sizeof(int16_t) * kInt16LUTArraySize);
 800e5d8:	f240 4102 	movw	r1, #1026	; 0x402
 800e5dc:	4610      	mov	r0, r2
 800e5de:	4798      	blx	r3
 800e5e0:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10a      	bne.n	800e5fe <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x162>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	695c      	ldr	r4, [r3, #20]
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	4b43      	ldr	r3, [pc, #268]	; (800e6fc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	2398      	movs	r3, #152	; 0x98
 800e5f4:	4a39      	ldr	r2, [pc, #228]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e5f6:	493d      	ldr	r1, [pc, #244]	; (800e6ec <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800e5f8:	47a0      	blx	r4
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e0c2      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	69ba      	ldr	r2, [r7, #24]
 800e602:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e608:	687a      	ldr	r2, [r7, #4]
        context, sizeof(int16_t) * kInt16LUTArraySize);
 800e60a:	f240 4102 	movw	r1, #1026	; 0x402
 800e60e:	4610      	mov	r0, r2
 800e610:	4798      	blx	r3
 800e612:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10a      	bne.n	800e630 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x194>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	695c      	ldr	r4, [r3, #20]
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	4b37      	ldr	r3, [pc, #220]	; (800e700 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	239c      	movs	r3, #156	; 0x9c
 800e626:	4a2d      	ldr	r2, [pc, #180]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e628:	4930      	ldr	r1, [pc, #192]	; (800e6ec <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800e62a:	47a0      	blx	r4
 800e62c:	2301      	movs	r3, #1
 800e62e:	e0a9      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
    op_data->one_over_one_plus_x_lut =
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	697a      	ldr	r2, [r7, #20]
 800e634:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 800e636:	6a3b      	ldr	r3, [r7, #32]
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	2b07      	cmp	r3, #7
 800e63c:	d116      	bne.n	800e66c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1d0>
    TF_LITE_ENSURE(context, input->type == kTfLiteInt8 ||
 800e63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	2b09      	cmp	r3, #9
 800e644:	d02c      	beq.n	800e6a0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 800e646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	2b03      	cmp	r3, #3
 800e64c:	d028      	beq.n	800e6a0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 800e64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	2b07      	cmp	r3, #7
 800e654:	d024      	beq.n	800e6a0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	695c      	ldr	r4, [r3, #20]
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	4b29      	ldr	r3, [pc, #164]	; (800e704 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	23a4      	movs	r3, #164	; 0xa4
 800e662:	4a1e      	ldr	r2, [pc, #120]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e664:	4921      	ldr	r1, [pc, #132]	; (800e6ec <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800e666:	47a0      	blx	r4
 800e668:	2301      	movs	r3, #1
 800e66a:	e08b      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800e66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66e:	781a      	ldrb	r2, [r3, #0]
 800e670:	6a3b      	ldr	r3, [r7, #32]
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	429a      	cmp	r2, r3
 800e676:	d013      	beq.n	800e6a0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	695c      	ldr	r4, [r3, #20]
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	461a      	mov	r2, r3
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	9303      	str	r3, [sp, #12]
 800e68a:	9202      	str	r2, [sp, #8]
 800e68c:	4b1e      	ldr	r3, [pc, #120]	; (800e708 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 800e68e:	9301      	str	r3, [sp, #4]
 800e690:	4b1e      	ldr	r3, [pc, #120]	; (800e70c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800e692:	9300      	str	r3, [sp, #0]
 800e694:	23a6      	movs	r3, #166	; 0xa6
 800e696:	4a11      	ldr	r2, [pc, #68]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e698:	4911      	ldr	r1, [pc, #68]	; (800e6e0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800e69a:	47a0      	blx	r4
 800e69c:	2301      	movs	r3, #1
 800e69e:	e071      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  if (input->type == kTfLiteInt16) {
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	2b07      	cmp	r3, #7
 800e6a6:	d161      	bne.n	800e76c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
 800e6aa:	691b      	ldr	r3, [r3, #16]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d035      	beq.n	800e71c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	695c      	ldr	r4, [r3, #20]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	691b      	ldr	r3, [r3, #16]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	9203      	str	r2, [sp, #12]
 800e6be:	9302      	str	r3, [sp, #8]
 800e6c0:	4b13      	ldr	r3, [pc, #76]	; (800e710 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 800e6c2:	9301      	str	r3, [sp, #4]
 800e6c4:	4b13      	ldr	r3, [pc, #76]	; (800e714 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	23ab      	movs	r3, #171	; 0xab
 800e6ca:	4a04      	ldr	r2, [pc, #16]	; (800e6dc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e6cc:	4904      	ldr	r1, [pc, #16]	; (800e6e0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800e6ce:	47a0      	blx	r4
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e057      	b.n	800e784 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
 800e6d4:	08019bf0 	.word	0x08019bf0
 800e6d8:	08019bf4 	.word	0x08019bf4
 800e6dc:	08019a9c 	.word	0x08019a9c
 800e6e0:	08019af0 	.word	0x08019af0
 800e6e4:	08019c04 	.word	0x08019c04
 800e6e8:	08019c18 	.word	0x08019c18
 800e6ec:	08019ba4 	.word	0x08019ba4
 800e6f0:	08019c2c 	.word	0x08019c2c
 800e6f4:	08019c48 	.word	0x08019c48
 800e6f8:	08019c5c 	.word	0x08019c5c
 800e6fc:	08019c78 	.word	0x08019c78
 800e700:	08019c90 	.word	0x08019c90
 800e704:	08019cb4 	.word	0x08019cb4
 800e708:	08019ae0 	.word	0x08019ae0
 800e70c:	08019b7c 	.word	0x08019b7c
 800e710:	08019b0c 	.word	0x08019b0c
 800e714:	08019b10 	.word	0x08019b10
 800e718:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 800e71c:	f107 0308 	add.w	r3, r7, #8
 800e720:	4618      	mov	r0, r3
 800e722:	f7ff fe75 	bl	800e410 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e72a:	f240 2201 	movw	r2, #513	; 0x201
 800e72e:	4619      	mov	r1, r3
 800e730:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 800e718 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>
 800e734:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800e738:	f7fe ff08 	bl	800d54c <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 800e73c:	f107 030c 	add.w	r3, r7, #12
 800e740:	4618      	mov	r0, r3
 800e742:	f7ff fe9d 	bl	800e480 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e74a:	f240 2201 	movw	r2, #513	; 0x201
 800e74e:	4619      	mov	r1, r3
 800e750:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e754:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 800e718 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>
 800e758:	f7fe fef8 	bl	800d54c <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 800e75c:	6a3b      	ldr	r3, [r7, #32]
 800e75e:	691a      	ldr	r2, [r3, #16]
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	68da      	ldr	r2, [r3, #12]
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	695b      	ldr	r3, [r3, #20]
 800e770:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	6a3a      	ldr	r2, [r7, #32]
 800e77c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e77e:	f7ff fac7 	bl	800dd10 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 800e782:	4603      	mov	r3, r0
}
 800e784:	4618      	mov	r0, r3
 800e786:	3728      	adds	r7, #40	; 0x28
 800e788:	46bd      	mov	sp, r7
 800e78a:	bdb0      	pop	{r4, r5, r7, pc}

0800e78c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 800e78c:	b5b0      	push	{r4, r5, r7, lr}
 800e78e:	b092      	sub	sp, #72	; 0x48
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7f3 fb76 	bl	8001e8e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800e7a2:	6478      	str	r0, [r7, #68]	; 0x44
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	6839      	ldr	r1, [r7, #0]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7f3 fb7f 	bl	8001eae <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800e7b0:	6438      	str	r0, [r7, #64]	; 0x40

  TFLITE_DCHECK(node->user_data != nullptr);
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	691b      	ldr	r3, [r3, #16]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d101      	bne.n	800e7be <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x32>
 800e7ba:	f005 fc49 	bl	8014050 <abort>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	f107 0408 	add.w	r4, r7, #8
 800e7c6:	461d      	mov	r5, r3
 800e7c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e7d8:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 800e7dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7de:	7a1b      	ldrb	r3, [r3, #8]
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	2b08      	cmp	r3, #8
 800e7e4:	d826      	bhi.n	800e834 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
 800e7e6:	a201      	add	r2, pc, #4	; (adr r2, 800e7ec <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x60>)
 800e7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ec:	0800e811 	.word	0x0800e811
 800e7f0:	0800e835 	.word	0x0800e835
 800e7f4:	0800e823 	.word	0x0800e823
 800e7f8:	0800e835 	.word	0x0800e835
 800e7fc:	0800e835 	.word	0x0800e835
 800e800:	0800e835 	.word	0x0800e835
 800e804:	0800e823 	.word	0x0800e823
 800e808:	0800e835 	.word	0x0800e835
 800e80c:	0800e823 	.word	0x0800e823
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 800e810:	f107 0308 	add.w	r3, r7, #8
 800e814:	461a      	mov	r2, r3
 800e816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e818:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e81a:	f7ff fcdb 	bl	800e1d4 <_ZN6tflite12_GLOBAL__N_112SoftmaxFloatEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800e81e:	2300      	movs	r3, #0
 800e820:	e017      	b.n	800e852 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc6>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, op_data);
 800e822:	f107 0308 	add.w	r3, r7, #8
 800e826:	461a      	mov	r2, r3
 800e828:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e82a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e82c:	f7ff fd03 	bl	800e236 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800e830:	2300      	movs	r3, #0
 800e832:	e00e      	b.n	800e852 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc6>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	695c      	ldr	r4, [r3, #20]
 800e838:	687d      	ldr	r5, [r7, #4]
 800e83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e83c:	7a1b      	ldrb	r3, [r3, #8]
 800e83e:	4618      	mov	r0, r3
 800e840:	f7f2 fc5a 	bl	80010f8 <TfLiteTypeGetName>
 800e844:	4602      	mov	r2, r0
 800e846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e848:	7a1b      	ldrb	r3, [r3, #8]
 800e84a:	4904      	ldr	r1, [pc, #16]	; (800e85c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd0>)
 800e84c:	4628      	mov	r0, r5
 800e84e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800e850:	2301      	movs	r3, #1
  }
}
 800e852:	4618      	mov	r0, r3
 800e854:	3748      	adds	r7, #72	; 0x48
 800e856:	46bd      	mov	sp, r7
 800e858:	bdb0      	pop	{r4, r5, r7, pc}
 800e85a:	bf00      	nop
 800e85c:	08019d10 	.word	0x08019d10

0800e860 <_ZN6tflite16Register_SOFTMAXEv>:
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 800e860:	b4b0      	push	{r4, r5, r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4a07      	ldr	r2, [pc, #28]	; (800e888 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 800e86c:	461c      	mov	r4, r3
 800e86e:	4615      	mov	r5, r2
 800e870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e874:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	bcb0      	pop	{r4, r5, r7}
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	08019d2c 	.word	0x08019d2c

0800e88c <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d003      	beq.n	800e8a2 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800e8a0:	e000      	b.n	800e8a4 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800e8a2:	2320      	movs	r3, #32
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	370c      	adds	r7, #12
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 800e8b8:	f107 030c 	add.w	r3, r7, #12
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f000 f869 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6013      	str	r3, [r2, #0]
    return retval;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
  }
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
	...

0800e8d4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b08a      	sub	sp, #40	; 0x28
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800e8dc:	f000 fbec 	bl	800f0b8 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 fbf2 	bl	800f0ce <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800e8ee:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800e8f2:	f000 fc1e 	bl	800f132 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800e8f6:	4603      	mov	r3, r0
  const F2 constant_48_over_17 =
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f000 fc06 	bl	800f10a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800e8fe:	4603      	mov	r3, r0
 800e900:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800e902:	4823      	ldr	r0, [pc, #140]	; (800e990 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800e904:	f000 fc15 	bl	800f132 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800e908:	4603      	mov	r3, r0
  const F2 constant_neg_32_over_17 =
 800e90a:	4618      	mov	r0, r3
 800e90c:	f000 fbfd 	bl	800f10a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800e910:	4603      	mov	r3, r0
 800e912:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800e914:	69b9      	ldr	r1, [r7, #24]
 800e916:	6a38      	ldr	r0, [r7, #32]
 800e918:	f000 fc18 	bl	800f14c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e91c:	4603      	mov	r3, r0
 800e91e:	4619      	mov	r1, r3
 800e920:	69f8      	ldr	r0, [r7, #28]
 800e922:	f000 fc35 	bl	800f190 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e926:	4603      	mov	r3, r0
 800e928:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800e92a:	2300      	movs	r3, #0
 800e92c:	627b      	str	r3, [r7, #36]	; 0x24
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	2b02      	cmp	r3, #2
 800e932:	dc21      	bgt.n	800e978 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 800e934:	6979      	ldr	r1, [r7, #20]
 800e936:	6a38      	ldr	r0, [r7, #32]
 800e938:	f000 fc08 	bl	800f14c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e93c:	4603      	mov	r3, r0
 800e93e:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800e940:	f000 fc44 	bl	800f1cc <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800e944:	4603      	mov	r3, r0
    F2 one_minus_half_denominator_times_x =
 800e946:	6939      	ldr	r1, [r7, #16]
 800e948:	4618      	mov	r0, r3
 800e94a:	f000 fc48 	bl	800f1de <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e94e:	4603      	mov	r3, r0
 800e950:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800e952:	68f9      	ldr	r1, [r7, #12]
 800e954:	6978      	ldr	r0, [r7, #20]
 800e956:	f000 fc60 	bl	800f21a <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e95a:	4603      	mov	r3, r0
 800e95c:	4618      	mov	r0, r3
 800e95e:	f000 fc7e 	bl	800f25e <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800e962:	4603      	mov	r3, r0
 800e964:	4619      	mov	r1, r3
 800e966:	6978      	ldr	r0, [r7, #20]
 800e968:	f000 fc12 	bl	800f190 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e96c:	4603      	mov	r3, r0
 800e96e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800e970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e972:	3301      	adds	r3, #1
 800e974:	627b      	str	r3, [r7, #36]	; 0x24
 800e976:	e7da      	b.n	800e92e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800e978:	6978      	ldr	r0, [r7, #20]
 800e97a:	f000 fc8a 	bl	800f292 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800e97e:	4603      	mov	r3, r0
 800e980:	4618      	mov	r0, r3
 800e982:	f000 fc9c 	bl	800f2be <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800e986:	4603      	mov	r3, r0
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3728      	adds	r7, #40	; 0x28
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	c3c3c3c4 	.word	0xc3c3c3c4

0800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	370c      	adds	r7, #12
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800e9aa:	b590      	push	{r4, r7, lr}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800e9b2:	f107 030c 	add.w	r3, r7, #12
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7ff ffec 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e9bc:	4604      	mov	r4, r0
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7f4 fa91 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	6023      	str	r3, [r4, #0]
    return retval;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
  }
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd90      	pop	{r4, r7, pc}

0800e9d2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800e9d2:	b580      	push	{r7, lr}
 800e9d4:	b082      	sub	sp, #8
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800e9da:	2100      	movs	r1, #0
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7f3 ff8d 	bl	80028fc <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 800e9e2:	4603      	mov	r3, r0
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3708      	adds	r7, #8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800e9ec:	b590      	push	{r4, r7, lr}
 800e9ee:	b09f      	sub	sp, #124	; 0x7c
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	607a      	str	r2, [r7, #4]
 800e9f8:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	689b      	ldr	r3, [r3, #8]
 800e9fe:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	699b      	ldr	r3, [r3, #24]
 800ea0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ea0c:	68b8      	ldr	r0, [r7, #8]
 800ea0e:	f7f2 fcc7 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ea12:	4603      	mov	r3, r0
 800ea14:	3b01      	subs	r3, #1
 800ea16:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 800ea18:	683a      	ldr	r2, [r7, #0]
 800ea1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea1c:	68b8      	ldr	r0, [r7, #8]
 800ea1e:	f7fe fd52 	bl	800d4c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800ea22:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 800ea24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea26:	683a      	ldr	r2, [r7, #0]
 800ea28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea2a:	68b8      	ldr	r0, [r7, #8]
 800ea2c:	f7f2 fd83 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ea30:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800ea32:	2300      	movs	r3, #0
 800ea34:	677b      	str	r3, [r7, #116]	; 0x74
 800ea36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ea38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	f280 80ed 	bge.w	800ec1a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800ea40:	2300      	movs	r3, #0
 800ea42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800ea46:	2300      	movs	r3, #0
 800ea48:	673b      	str	r3, [r7, #112]	; 0x70
 800ea4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ea4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	da16      	bge.n	800ea80 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800ea52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea56:	fb02 f203 	mul.w	r2, r2, r3
 800ea5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea5c:	4413      	add	r3, r2
 800ea5e:	461a      	mov	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	441a      	add	r2, r3
 800ea64:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800ea68:	4611      	mov	r1, r2
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f000 fc5b 	bl	800f326 <_ZSt3maxIhERKT_S2_S2_>
 800ea70:	4603      	mov	r3, r0
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800ea78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	673b      	str	r3, [r7, #112]	; 0x70
 800ea7e:	e7e4      	b.n	800ea4a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800ea80:	f000 fc65 	bl	800f34e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800ea84:	4603      	mov	r3, r0
 800ea86:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800ea88:	2300      	movs	r3, #0
 800ea8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ea8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ea8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea90:	429a      	cmp	r2, r3
 800ea92:	da2f      	bge.n	800eaf4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800ea94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea98:	fb02 f203 	mul.w	r2, r2, r3
 800ea9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea9e:	4413      	add	r3, r2
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800eaae:	1ad3      	subs	r3, r2, r3
 800eab0:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800eab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eab6:	429a      	cmp	r2, r3
 800eab8:	db18      	blt.n	800eaec <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32_t input_diff_rescaled =
 800eaba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eabc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eabe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800eac0:	f7fe fd30 	bl	800d524 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800eac4:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 800eac6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eac8:	f000 fc49 	bl	800f35e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800eacc:	4603      	mov	r3, r0
 800eace:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800ead0:	69f8      	ldr	r0, [r7, #28]
 800ead2:	f000 fc73 	bl	800f3bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800ead6:	4603      	mov	r3, r0
 800ead8:	4618      	mov	r0, r3
 800eada:	f000 fdb7 	bl	800f64c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800eade:	4603      	mov	r3, r0
 800eae0:	4619      	mov	r1, r3
 800eae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eae4:	f000 fc4c 	bl	800f380 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800eae8:	4603      	mov	r3, r0
 800eaea:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800eaec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaee:	3301      	adds	r3, #1
 800eaf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eaf2:	e7cb      	b.n	800ea8c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800eaf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f000 fdc1 	bl	800f680 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800eafe:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800eb06:	210c      	movs	r1, #12
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fe fe99 	bl	800d840 <_ZN6tflite13GetReciprocalEliPi>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7ff fecd 	bl	800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800eb16:	4603      	mov	r3, r0
 800eb18:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eb20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb22:	429a      	cmp	r2, r3
 800eb24:	da75      	bge.n	800ec12 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800eb26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb2a:	fb02 f203 	mul.w	r2, r2, r3
 800eb2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb30:	4413      	add	r3, r2
 800eb32:	461a      	mov	r2, r3
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4413      	add	r3, r2
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800eb44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	db50      	blt.n	800ebee <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32_t input_diff_rescaled =
 800eb4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb4e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eb50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eb52:	f7fe fce7 	bl	800d524 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800eb56:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 800eb58:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eb5a:	f000 fc00 	bl	800f35e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800eb62:	69b8      	ldr	r0, [r7, #24]
 800eb64:	f000 fc2a 	bl	800f3bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800eb6c:	6979      	ldr	r1, [r7, #20]
 800eb6e:	6a38      	ldr	r0, [r7, #32]
 800eb70:	f000 fd91 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800eb74:	4603      	mov	r3, r0
 800eb76:	633b      	str	r3, [r7, #48]	; 0x30
 800eb78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7ff ff09 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800eb82:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800eb84:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800eb86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800eb88:	3217      	adds	r2, #23
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f000 fda5 	bl	800f6dc <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>
 800eb92:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800eb94:	f7f7 fc93 	bl	80064be <_ZNSt14numeric_limitsIhE3minEv>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	461a      	mov	r2, r3
            unsat_output +
 800eb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb9e:	4413      	add	r3, r2
        const int32_t shifted_output =
 800eba0:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800eba2:	f7f7 fc94 	bl	80064ce <_ZNSt14numeric_limitsIhE3maxEv>
 800eba6:	4603      	mov	r3, r0
 800eba8:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800ebaa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ebae:	f107 0310 	add.w	r3, r7, #16
 800ebb2:	4611      	mov	r1, r2
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7f3 fe53 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 800ebba:	4604      	mov	r4, r0
 800ebbc:	f7f7 fc7f 	bl	80064be <_ZNSt14numeric_limitsIhE3minEv>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ebc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ebc8:	4619      	mov	r1, r3
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f7f2 fb4e 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 800ebd0:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800ebd2:	6819      	ldr	r1, [r3, #0]
 800ebd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ebd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ebd8:	fb02 f203 	mul.w	r2, r2, r3
 800ebdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebde:	4413      	add	r3, r2
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ebe6:	4413      	add	r3, r2
 800ebe8:	b2ca      	uxtb	r2, r1
 800ebea:	701a      	strb	r2, [r3, #0]
 800ebec:	e00d      	b.n	800ec0a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800ebee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ebf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ebf2:	fb02 f203 	mul.w	r2, r2, r3
 800ebf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebf8:	4413      	add	r3, r2
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ec00:	189c      	adds	r4, r3, r2
 800ec02:	f7f7 fc5c 	bl	80064be <_ZNSt14numeric_limitsIhE3minEv>
 800ec06:	4603      	mov	r3, r0
 800ec08:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800ec0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec10:	e785      	b.n	800eb1e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 800ec12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec14:	3301      	adds	r3, #1
 800ec16:	677b      	str	r3, [r7, #116]	; 0x74
 800ec18:	e70d      	b.n	800ea36 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800ec1a:	bf00      	nop
 800ec1c:	377c      	adds	r7, #124	; 0x7c
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd90      	pop	{r4, r7, pc}

0800ec22 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800ec22:	b590      	push	{r4, r7, lr}
 800ec24:	b09f      	sub	sp, #124	; 0x7c
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	60f8      	str	r0, [r7, #12]
 800ec2a:	60b9      	str	r1, [r7, #8]
 800ec2c:	607a      	str	r2, [r7, #4]
 800ec2e:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	699b      	ldr	r3, [r3, #24]
 800ec40:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ec42:	68b8      	ldr	r0, [r7, #8]
 800ec44:	f7f2 fbac 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	3b01      	subs	r3, #1
 800ec4c:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 800ec4e:	683a      	ldr	r2, [r7, #0]
 800ec50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec52:	68b8      	ldr	r0, [r7, #8]
 800ec54:	f7fe fc37 	bl	800d4c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800ec58:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 800ec5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec5c:	683a      	ldr	r2, [r7, #0]
 800ec5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec60:	68b8      	ldr	r0, [r7, #8]
 800ec62:	f7f2 fc68 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ec66:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800ec68:	2300      	movs	r3, #0
 800ec6a:	677b      	str	r3, [r7, #116]	; 0x74
 800ec6c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ec6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec70:	429a      	cmp	r2, r3
 800ec72:	f280 80f0 	bge.w	800ee56 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800ec76:	2380      	movs	r3, #128	; 0x80
 800ec78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	673b      	str	r3, [r7, #112]	; 0x70
 800ec80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ec82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec84:	429a      	cmp	r2, r3
 800ec86:	da17      	bge.n	800ecb8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800ec88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec8c:	fb02 f203 	mul.w	r2, r2, r3
 800ec90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec92:	4413      	add	r3, r2
 800ec94:	461a      	mov	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	441a      	add	r2, r3
 800ec9a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800ec9e:	4611      	mov	r1, r2
 800eca0:	4618      	mov	r0, r3
 800eca2:	f000 fd83 	bl	800f7ac <_ZSt3maxIaERKT_S2_S2_>
 800eca6:	4603      	mov	r3, r0
 800eca8:	f993 3000 	ldrsb.w	r3, [r3]
 800ecac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800ecb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	673b      	str	r3, [r7, #112]	; 0x70
 800ecb6:	e7e3      	b.n	800ec80 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800ecb8:	f000 fb49 	bl	800f34e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ecc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ecc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	da30      	bge.n	800ed2e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800eccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ecd0:	fb02 f203 	mul.w	r2, r2, r3
 800ecd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecd6:	4413      	add	r3, r2
 800ecd8:	461a      	mov	r2, r3
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4413      	add	r3, r2
 800ecde:	f993 3000 	ldrsb.w	r3, [r3]
 800ece2:	461a      	mov	r2, r3
 800ece4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800ece8:	1ad3      	subs	r3, r2, r3
 800ecea:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800ecec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	db18      	blt.n	800ed26 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32_t input_diff_rescaled =
 800ecf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ecf6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ecf8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ecfa:	f7fe fc13 	bl	800d524 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800ecfe:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 800ed00:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ed02:	f000 fb2c 	bl	800f35e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800ed06:	4603      	mov	r3, r0
 800ed08:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800ed0a:	69f8      	ldr	r0, [r7, #28]
 800ed0c:	f000 fb56 	bl	800f3bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800ed10:	4603      	mov	r3, r0
 800ed12:	4618      	mov	r0, r3
 800ed14:	f000 fc9a 	bl	800f64c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed1e:	f000 fb2f 	bl	800f380 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ed22:	4603      	mov	r3, r0
 800ed24:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800ed26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed28:	3301      	adds	r3, #1
 800ed2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ed2c:	e7ca      	b.n	800ecc4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800ed2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed32:	4618      	mov	r0, r3
 800ed34:	f000 fca4 	bl	800f680 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800ed38:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ed40:	210c      	movs	r1, #12
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7fe fd7c 	bl	800d840 <_ZN6tflite13GetReciprocalEliPi>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff fdb0 	bl	800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ed50:	4603      	mov	r3, r0
 800ed52:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800ed54:	2300      	movs	r3, #0
 800ed56:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	da76      	bge.n	800ee4e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800ed60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed64:	fb02 f203 	mul.w	r2, r2, r3
 800ed68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed6a:	4413      	add	r3, r2
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	4413      	add	r3, r2
 800ed72:	f993 3000 	ldrsb.w	r3, [r3]
 800ed76:	461a      	mov	r2, r3
 800ed78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800ed7c:	1ad3      	subs	r3, r2, r3
 800ed7e:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800ed80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed84:	429a      	cmp	r2, r3
 800ed86:	db50      	blt.n	800ee2a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32_t input_diff_rescaled =
 800ed88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed8a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ed8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed8e:	f7fe fbc9 	bl	800d524 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800ed92:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 800ed94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ed96:	f000 fae2 	bl	800f35e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800ed9e:	69b8      	ldr	r0, [r7, #24]
 800eda0:	f000 fb0c 	bl	800f3bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800eda4:	4603      	mov	r3, r0
 800eda6:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800eda8:	6979      	ldr	r1, [r7, #20]
 800edaa:	6a38      	ldr	r0, [r7, #32]
 800edac:	f000 fc73 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800edb0:	4603      	mov	r3, r0
 800edb2:	633b      	str	r3, [r7, #48]	; 0x30
 800edb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff fdeb 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800edbe:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800edc0:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800edc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800edc4:	320f      	adds	r2, #15
 800edc6:	4611      	mov	r1, r2
 800edc8:	4618      	mov	r0, r3
 800edca:	f000 fc87 	bl	800f6dc <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>
 800edce:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800edd0:	f7f7 fb86 	bl	80064e0 <_ZNSt14numeric_limitsIsE3minEv>
 800edd4:	4603      	mov	r3, r0
 800edd6:	461a      	mov	r2, r3
            unsat_output +
 800edd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edda:	4413      	add	r3, r2
        const int32_t shifted_output =
 800eddc:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800edde:	f7f7 fb89 	bl	80064f4 <_ZNSt14numeric_limitsIsE3maxEv>
 800ede2:	4603      	mov	r3, r0
 800ede4:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800ede6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800edea:	f107 0310 	add.w	r3, r7, #16
 800edee:	4611      	mov	r1, r2
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7f3 fd35 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 800edf6:	4604      	mov	r4, r0
 800edf8:	f7f7 fb72 	bl	80064e0 <_ZNSt14numeric_limitsIsE3minEv>
 800edfc:	4603      	mov	r3, r0
 800edfe:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee04:	4619      	mov	r1, r3
 800ee06:	4620      	mov	r0, r4
 800ee08:	f7f2 fa30 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 800ee0c:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800ee0e:	6819      	ldr	r1, [r3, #0]
 800ee10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee14:	fb02 f203 	mul.w	r2, r2, r3
 800ee18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee1a:	4413      	add	r3, r2
 800ee1c:	005b      	lsls	r3, r3, #1
 800ee1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ee22:	4413      	add	r3, r2
 800ee24:	b20a      	sxth	r2, r1
 800ee26:	801a      	strh	r2, [r3, #0]
 800ee28:	e00d      	b.n	800ee46 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800ee2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee2e:	fb02 f203 	mul.w	r2, r2, r3
 800ee32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee34:	4413      	add	r3, r2
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ee3c:	18d4      	adds	r4, r2, r3
 800ee3e:	f7f7 fb4f 	bl	80064e0 <_ZNSt14numeric_limitsIsE3minEv>
 800ee42:	4603      	mov	r3, r0
 800ee44:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800ee46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee48:	3301      	adds	r3, #1
 800ee4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ee4c:	e784      	b.n	800ed58 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800ee4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee50:	3301      	adds	r3, #1
 800ee52:	677b      	str	r3, [r7, #116]	; 0x74
 800ee54:	e70a      	b.n	800ec6c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800ee56:	bf00      	nop
 800ee58:	377c      	adds	r7, #124	; 0x7c
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd90      	pop	{r4, r7, pc}

0800ee5e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800ee5e:	b590      	push	{r4, r7, lr}
 800ee60:	b09f      	sub	sp, #124	; 0x7c
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	60f8      	str	r0, [r7, #12]
 800ee66:	60b9      	str	r1, [r7, #8]
 800ee68:	607a      	str	r2, [r7, #4]
 800ee6a:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	699b      	ldr	r3, [r3, #24]
 800ee7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ee7e:	68b8      	ldr	r0, [r7, #8]
 800ee80:	f7f2 fa8e 	bl	80013a0 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ee84:	4603      	mov	r3, r0
 800ee86:	3b01      	subs	r3, #1
 800ee88:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 800ee8a:	683a      	ldr	r2, [r7, #0]
 800ee8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee8e:	68b8      	ldr	r0, [r7, #8]
 800ee90:	f7fe fb19 	bl	800d4c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800ee94:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 800ee96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee98:	683a      	ldr	r2, [r7, #0]
 800ee9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee9c:	68b8      	ldr	r0, [r7, #8]
 800ee9e:	f7f2 fb4a 	bl	8001536 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800eea2:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800eea4:	2300      	movs	r3, #0
 800eea6:	677b      	str	r3, [r7, #116]	; 0x74
 800eea8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eeaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeac:	429a      	cmp	r2, r3
 800eeae:	f280 80f0 	bge.w	800f092 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800eeb2:	2380      	movs	r3, #128	; 0x80
 800eeb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800eeb8:	2300      	movs	r3, #0
 800eeba:	673b      	str	r3, [r7, #112]	; 0x70
 800eebc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eec0:	429a      	cmp	r2, r3
 800eec2:	da17      	bge.n	800eef4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800eec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eec6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eec8:	fb02 f203 	mul.w	r2, r2, r3
 800eecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eece:	4413      	add	r3, r2
 800eed0:	461a      	mov	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	441a      	add	r2, r3
 800eed6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800eeda:	4611      	mov	r1, r2
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 fc65 	bl	800f7ac <_ZSt3maxIaERKT_S2_S2_>
 800eee2:	4603      	mov	r3, r0
 800eee4:	f993 3000 	ldrsb.w	r3, [r3]
 800eee8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800eeec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eeee:	3301      	adds	r3, #1
 800eef0:	673b      	str	r3, [r7, #112]	; 0x70
 800eef2:	e7e3      	b.n	800eebc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800eef4:	f000 fa2b 	bl	800f34e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800eef8:	4603      	mov	r3, r0
 800eefa:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800eefc:	2300      	movs	r3, #0
 800eefe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ef00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ef02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef04:	429a      	cmp	r2, r3
 800ef06:	da30      	bge.n	800ef6a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800ef08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef0c:	fb02 f203 	mul.w	r2, r2, r3
 800ef10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef12:	4413      	add	r3, r2
 800ef14:	461a      	mov	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4413      	add	r3, r2
 800ef1a:	f993 3000 	ldrsb.w	r3, [r3]
 800ef1e:	461a      	mov	r2, r3
 800ef20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800ef24:	1ad3      	subs	r3, r2, r3
 800ef26:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800ef28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	db18      	blt.n	800ef62 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32_t input_diff_rescaled =
 800ef30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef32:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ef34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ef36:	f7fe faf5 	bl	800d524 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800ef3a:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 800ef3c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ef3e:	f000 fa0e 	bl	800f35e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800ef42:	4603      	mov	r3, r0
 800ef44:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800ef46:	69f8      	ldr	r0, [r7, #28]
 800ef48:	f000 fa38 	bl	800f3bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f000 fb7c 	bl	800f64c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800ef54:	4603      	mov	r3, r0
 800ef56:	4619      	mov	r1, r3
 800ef58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef5a:	f000 fa11 	bl	800f380 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800ef62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef64:	3301      	adds	r3, #1
 800ef66:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ef68:	e7ca      	b.n	800ef00 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800ef6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f000 fb86 	bl	800f680 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800ef74:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ef7c:	210c      	movs	r1, #12
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fe fc5e 	bl	800d840 <_ZN6tflite13GetReciprocalEliPi>
 800ef84:	4603      	mov	r3, r0
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7ff fc92 	bl	800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800ef90:	2300      	movs	r3, #0
 800ef92:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ef96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	da76      	bge.n	800f08a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800ef9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800efa0:	fb02 f203 	mul.w	r2, r2, r3
 800efa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efa6:	4413      	add	r3, r2
 800efa8:	461a      	mov	r2, r3
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4413      	add	r3, r2
 800efae:	f993 3000 	ldrsb.w	r3, [r3]
 800efb2:	461a      	mov	r2, r3
 800efb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800efb8:	1ad3      	subs	r3, r2, r3
 800efba:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800efbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efc0:	429a      	cmp	r2, r3
 800efc2:	db50      	blt.n	800f066 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32_t input_diff_rescaled =
 800efc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800efc6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800efc8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800efca:	f7fe faab 	bl	800d524 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800efce:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 800efd0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800efd2:	f000 f9c4 	bl	800f35e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800efd6:	4603      	mov	r3, r0
 800efd8:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800efda:	69b8      	ldr	r0, [r7, #24]
 800efdc:	f000 f9ee 	bl	800f3bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800efe0:	4603      	mov	r3, r0
 800efe2:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800efe4:	6979      	ldr	r1, [r7, #20]
 800efe6:	6a38      	ldr	r0, [r7, #32]
 800efe8:	f000 fb55 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800efec:	4603      	mov	r3, r0
 800efee:	633b      	str	r3, [r7, #48]	; 0x30
 800eff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7ff fccd 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800effa:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800effc:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800effe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800f000:	3217      	adds	r2, #23
 800f002:	4611      	mov	r1, r2
 800f004:	4618      	mov	r0, r3
 800f006:	f000 fb69 	bl	800f6dc <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>
 800f00a:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800f00c:	f7f2 f8f0 	bl	80011f0 <_ZNSt14numeric_limitsIaE3minEv>
 800f010:	4603      	mov	r3, r0
 800f012:	461a      	mov	r2, r3
            unsat_output +
 800f014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f016:	4413      	add	r3, r2
        const int32_t shifted_output =
 800f018:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800f01a:	f7f2 f8f2 	bl	8001202 <_ZNSt14numeric_limitsIaE3maxEv>
 800f01e:	4603      	mov	r3, r0
 800f020:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800f022:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f026:	f107 0310 	add.w	r3, r7, #16
 800f02a:	4611      	mov	r1, r2
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7f3 fc17 	bl	8002860 <_ZSt3minIlERKT_S2_S2_>
 800f032:	4604      	mov	r4, r0
 800f034:	f7f2 f8dc 	bl	80011f0 <_ZNSt14numeric_limitsIaE3minEv>
 800f038:	4603      	mov	r3, r0
 800f03a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f03c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f040:	4619      	mov	r1, r3
 800f042:	4620      	mov	r0, r4
 800f044:	f7f2 f912 	bl	800126c <_ZSt3maxIlERKT_S2_S2_>
 800f048:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800f04a:	6819      	ldr	r1, [r3, #0]
 800f04c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f04e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f050:	fb02 f203 	mul.w	r2, r2, r3
 800f054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f056:	4413      	add	r3, r2
 800f058:	461a      	mov	r2, r3
 800f05a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f05e:	4413      	add	r3, r2
 800f060:	b24a      	sxtb	r2, r1
 800f062:	701a      	strb	r2, [r3, #0]
 800f064:	e00d      	b.n	800f082 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800f066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f068:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f06a:	fb02 f203 	mul.w	r2, r2, r3
 800f06e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f070:	4413      	add	r3, r2
 800f072:	461a      	mov	r2, r3
 800f074:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f078:	189c      	adds	r4, r3, r2
 800f07a:	f7f2 f8b9 	bl	80011f0 <_ZNSt14numeric_limitsIaE3minEv>
 800f07e:	4603      	mov	r3, r0
 800f080:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800f082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f084:	3301      	adds	r3, #1
 800f086:	66bb      	str	r3, [r7, #104]	; 0x68
 800f088:	e784      	b.n	800ef94 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800f08a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f08c:	3301      	adds	r3, #1
 800f08e:	677b      	str	r3, [r7, #116]	; 0x74
 800f090:	e70a      	b.n	800eea8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800f092:	bf00      	nop
 800f094:	377c      	adds	r7, #124	; 0x7c
 800f096:	46bd      	mov	sp, r7
 800f098:	bd90      	pop	{r4, r7, pc}

0800f09a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b082      	sub	sp, #8
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d101      	bne.n	800f0ac <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 800f0a8:	f004 ffd2 	bl	8014050 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800f0bc:	f000 fb8c 	bl	800f7d8 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800f0c0:	4603      	mov	r3, r0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7ff fc71 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f0c8:	4603      	mov	r3, r0
  }
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800f0ce:	b590      	push	{r4, r7, lr}
 800f0d0:	b083      	sub	sp, #12
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
 800f0d6:	6039      	str	r1, [r7, #0]
 800f0d8:	1d3b      	adds	r3, r7, #4
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff fc5a 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	681c      	ldr	r4, [r3, #0]
 800f0e4:	463b      	mov	r3, r7
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7ff fc54 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f7fe f98c 	bl	800d410 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff fbd8 	bl	800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f100:	4603      	mov	r3, r0
 800f102:	4618      	mov	r0, r3
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	bd90      	pop	{r4, r7, pc}

0800f10a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f10a:	b590      	push	{r4, r7, lr}
 800f10c:	b085      	sub	sp, #20
 800f10e:	af00      	add	r7, sp, #0
 800f110:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f112:	f107 030c 	add.w	r3, r7, #12
 800f116:	4618      	mov	r0, r3
 800f118:	f000 fb65 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f11c:	4604      	mov	r4, r0
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f7f3 fee1 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f124:	4603      	mov	r3, r0
 800f126:	6023      	str	r3, [r4, #0]
    return retval;
 800f128:	68fb      	ldr	r3, [r7, #12]
  }
 800f12a:	4618      	mov	r0, r3
 800f12c:	3714      	adds	r7, #20
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd90      	pop	{r4, r7, pc}

0800f132 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800f132:	b580      	push	{r7, lr}
 800f134:	b082      	sub	sp, #8
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800f13a:	2100      	movs	r1, #0
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f7f3 fbdd 	bl	80028fc <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 800f142:	4603      	mov	r3, r0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3708      	adds	r7, #8
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f156:	1d3b      	adds	r3, r7, #4
 800f158:	4618      	mov	r0, r3
 800f15a:	f7ff fc1b 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f15e:	4603      	mov	r3, r0
 800f160:	681d      	ldr	r5, [r3, #0]
 800f162:	463b      	mov	r3, r7
 800f164:	4618      	mov	r0, r3
 800f166:	f000 fb3e 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f16a:	4603      	mov	r3, r0
 800f16c:	681e      	ldr	r6, [r3, #0]
 800f16e:	f107 030c 	add.w	r3, r7, #12
 800f172:	4618      	mov	r0, r3
 800f174:	f000 fb37 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f178:	4604      	mov	r4, r0
 800f17a:	4631      	mov	r1, r6
 800f17c:	4628      	mov	r0, r5
 800f17e:	f7f2 f889 	bl	8001294 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f182:	4603      	mov	r3, r0
 800f184:	6023      	str	r3, [r4, #0]
  return c;
 800f186:	68fb      	ldr	r3, [r7, #12]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3714      	adds	r7, #20
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f190 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800f190:	b590      	push	{r4, r7, lr}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
 800f19a:	1d3b      	adds	r3, r7, #4
 800f19c:	4618      	mov	r0, r3
 800f19e:	f000 fb22 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	681c      	ldr	r4, [r3, #0]
 800f1a6:	463b      	mov	r3, r7
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f000 fb1c 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f7f3 fed2 	bl	8002f5e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f000 fb1d 	bl	800f7fc <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd90      	pop	{r4, r7, pc}

0800f1cc <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	af00      	add	r7, sp, #0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 800f1d0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800f1d4:	f7ff ff99 	bl	800f10a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800f1d8:	4603      	mov	r3, r0
  }
 800f1da:	4618      	mov	r0, r3
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800f1de:	b590      	push	{r4, r7, lr}
 800f1e0:	b083      	sub	sp, #12
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
 800f1e6:	6039      	str	r1, [r7, #0]
 800f1e8:	1d3b      	adds	r3, r7, #4
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 fafb 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	681c      	ldr	r4, [r3, #0]
 800f1f4:	463b      	mov	r3, r7
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f000 faf5 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4619      	mov	r1, r3
 800f202:	4620      	mov	r0, r4
 800f204:	f000 f881 	bl	800f30a <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800f208:	4603      	mov	r3, r0
 800f20a:	4618      	mov	r0, r3
 800f20c:	f000 faf6 	bl	800f7fc <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800f210:	4603      	mov	r3, r0
 800f212:	4618      	mov	r0, r3
 800f214:	370c      	adds	r7, #12
 800f216:	46bd      	mov	sp, r7
 800f218:	bd90      	pop	{r4, r7, pc}

0800f21a <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f21a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f21c:	b085      	sub	sp, #20
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
 800f222:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f224:	1d3b      	adds	r3, r7, #4
 800f226:	4618      	mov	r0, r3
 800f228:	f000 fadd 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f22c:	4603      	mov	r3, r0
 800f22e:	681d      	ldr	r5, [r3, #0]
 800f230:	463b      	mov	r3, r7
 800f232:	4618      	mov	r0, r3
 800f234:	f000 fad7 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f238:	4603      	mov	r3, r0
 800f23a:	681e      	ldr	r6, [r3, #0]
 800f23c:	f107 030c 	add.w	r3, r7, #12
 800f240:	4618      	mov	r0, r3
 800f242:	f000 faec 	bl	800f81e <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800f246:	4604      	mov	r4, r0
 800f248:	4631      	mov	r1, r6
 800f24a:	4628      	mov	r0, r5
 800f24c:	f7f2 f822 	bl	8001294 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f250:	4603      	mov	r3, r0
 800f252:	6023      	str	r3, [r4, #0]
  return c;
 800f254:	68fb      	ldr	r3, [r7, #12]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3714      	adds	r7, #20
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f25e <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f25e:	b5b0      	push	{r4, r5, r7, lr}
 800f260:	b084      	sub	sp, #16
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f266:	1d3b      	adds	r3, r7, #4
 800f268:	4618      	mov	r0, r3
 800f26a:	f000 fad8 	bl	800f81e <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800f26e:	4603      	mov	r3, r0
 800f270:	681d      	ldr	r5, [r3, #0]
 800f272:	f107 030c 	add.w	r3, r7, #12
 800f276:	4618      	mov	r0, r3
 800f278:	f000 fab5 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f27c:	4604      	mov	r4, r0
 800f27e:	4628      	mov	r0, r5
 800f280:	f000 fad8 	bl	800f834 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800f284:	4603      	mov	r3, r0
 800f286:	6023      	str	r3, [r4, #0]
  return result;
 800f288:	68fb      	ldr	r3, [r7, #12]
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bdb0      	pop	{r4, r5, r7, pc}

0800f292 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800f292:	b590      	push	{r4, r7, lr}
 800f294:	b085      	sub	sp, #20
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800f29a:	1d3b      	adds	r3, r7, #4
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 faa2 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	f107 030c 	add.w	r3, r7, #12
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f000 facf 	bl	800f84c <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	6013      	str	r3, [r2, #0]
  return c;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3714      	adds	r7, #20
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd90      	pop	{r4, r7, pc}

0800f2be <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f2be:	b5b0      	push	{r4, r5, r7, lr}
 800f2c0:	b084      	sub	sp, #16
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f2c6:	1d3b      	adds	r3, r7, #4
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f000 fabf 	bl	800f84c <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	681d      	ldr	r5, [r3, #0]
 800f2d2:	f107 030c 	add.w	r3, r7, #12
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff fb5c 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f2dc:	4604      	mov	r4, r0
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f000 fabf 	bl	800f862 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	6023      	str	r3, [r4, #0]
  return result;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bdb0      	pop	{r4, r5, r7, pc}

0800f2f2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b082      	sub	sp, #8
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 fabd 	bl	800f87a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800f300:	4603      	mov	r3, r0
}
 800f302:	4618      	mov	r0, r3
 800f304:	3708      	adds	r7, #8
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}

0800f30a <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800f30a:	b480      	push	{r7}
 800f30c:	b083      	sub	sp, #12
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
 800f312:	6039      	str	r1, [r7, #0]
  return a - b;
 800f314:	687a      	ldr	r2, [r7, #4]
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	1ad3      	subs	r3, r2, r3
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	370c      	adds	r7, #12
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr

0800f326 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f326:	b480      	push	{r7}
 800f328:	b083      	sub	sp, #12
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	781a      	ldrb	r2, [r3, #0]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d201      	bcs.n	800f340 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	e000      	b.n	800f342 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 800f340:	687b      	ldr	r3, [r7, #4]
    }
 800f342:	4618      	mov	r0, r3
 800f344:	370c      	adds	r7, #12
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr

0800f34e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 800f34e:	b580      	push	{r7, lr}
 800f350:	af00      	add	r7, sp, #0
 800f352:	2000      	movs	r0, #0
 800f354:	f000 fa9e 	bl	800f894 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 800f358:	4603      	mov	r3, r0
 800f35a:	4618      	mov	r0, r3
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800f35e:	b580      	push	{r7, lr}
 800f360:	b084      	sub	sp, #16
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800f366:	f107 030c 	add.w	r3, r7, #12
 800f36a:	4618      	mov	r0, r3
 800f36c:	f000 faa6 	bl	800f8bc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800f370:	4602      	mov	r2, r0
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6013      	str	r3, [r2, #0]
    return retval;
 800f376:	68fb      	ldr	r3, [r7, #12]
  }
 800f378:	4618      	mov	r0, r3
 800f37a:	3710      	adds	r7, #16
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800f380:	b590      	push	{r4, r7, lr}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
 800f38a:	1d3b      	adds	r3, r7, #4
 800f38c:	4618      	mov	r0, r3
 800f38e:	f000 f977 	bl	800f680 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f392:	4603      	mov	r3, r0
 800f394:	681c      	ldr	r4, [r3, #0]
 800f396:	463b      	mov	r3, r7
 800f398:	4618      	mov	r0, r3
 800f39a:	f000 f971 	bl	800f680 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f7f3 fdda 	bl	8002f5e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f000 fa90 	bl	800f8d2 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	370c      	adds	r7, #12
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd90      	pop	{r4, r7, pc}

0800f3bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 800f3bc:	b590      	push	{r4, r7, lr}
 800f3be:	b091      	sub	sp, #68	; 0x44
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 800f3c4:	f000 fa96 	bl	800f8f4 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 800f3cc:	2001      	movs	r0, #1
 800f3ce:	f000 fa9a 	bl	800f906 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3d8:	f000 faa9 	bl	800f92e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 800f3e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 fac1 	bl	800f96a <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f000 fa9e 	bl	800f92e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 800f3f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3f8:	f000 fad5 	bl	800f9a6 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	4618      	mov	r0, r3
 800f400:	f000 faec 	bl	800f9dc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 800f404:	4603      	mov	r3, r0
 800f406:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 800f408:	6879      	ldr	r1, [r7, #4]
 800f40a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f40c:	f000 fa8f 	bl	800f92e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f410:	4603      	mov	r3, r0
 800f412:	63bb      	str	r3, [r7, #56]	; 0x38
 800f414:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f418:	4618      	mov	r0, r3
 800f41a:	f000 fa4f 	bl	800f8bc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800f41e:	4603      	mov	r3, r0
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);  // exp(-1/4)
 800f424:	4883      	ldr	r0, [pc, #524]	; (800f634 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 800f426:	f7ff fad4 	bl	800e9d2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f42a:	4603      	mov	r3, r0
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7ff fabc 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f432:	4603      	mov	r3, r0
 800f434:	627b      	str	r3, [r7, #36]	; 0x24
 800f436:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800f43a:	f7f3 fd54 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f43e:	4603      	mov	r3, r0
 800f440:	4619      	mov	r1, r3
 800f442:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f444:	f7f3 fd5a 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f448:	4603      	mov	r3, r0
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7f3 fda9 	bl	8002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f450:	4604      	mov	r4, r0
 800f452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f456:	f000 f91e 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f45a:	4603      	mov	r3, r0
 800f45c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f45e:	4619      	mov	r1, r3
 800f460:	4620      	mov	r0, r4
 800f462:	f000 fb1d 	bl	800faa0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f466:	4603      	mov	r3, r0
 800f468:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);  // exp(-1/2)
 800f46a:	4873      	ldr	r0, [pc, #460]	; (800f638 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 800f46c:	f7ff fab1 	bl	800e9d2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f470:	4603      	mov	r3, r0
 800f472:	4618      	mov	r0, r3
 800f474:	f7ff fa99 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f478:	4603      	mov	r3, r0
 800f47a:	623b      	str	r3, [r7, #32]
 800f47c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800f480:	f7f3 fd31 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f484:	4603      	mov	r3, r0
 800f486:	4619      	mov	r1, r3
 800f488:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f48a:	f7f3 fd37 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f48e:	4603      	mov	r3, r0
 800f490:	4618      	mov	r0, r3
 800f492:	f7f3 fd86 	bl	8002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f496:	4604      	mov	r4, r0
 800f498:	6a39      	ldr	r1, [r7, #32]
 800f49a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f49c:	f000 f8fb 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f000 fafa 	bl	800faa0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);   // exp(-1)
 800f4b0:	4862      	ldr	r0, [pc, #392]	; (800f63c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 800f4b2:	f7ff fa8e 	bl	800e9d2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7ff fa76 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	61fb      	str	r3, [r7, #28]
 800f4c2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800f4c6:	f7f3 fd0e 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f4d0:	f7f3 fd14 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7f3 fd63 	bl	8002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f4dc:	4604      	mov	r4, r0
 800f4de:	69f9      	ldr	r1, [r7, #28]
 800f4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4e2:	f000 f8d8 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f000 fad7 	bl	800faa0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);   // exp(-2)
 800f4f6:	4852      	ldr	r0, [pc, #328]	; (800f640 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 800f4f8:	f7ff fa6b 	bl	800e9d2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7ff fa53 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f504:	4603      	mov	r3, r0
 800f506:	61bb      	str	r3, [r7, #24]
 800f508:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800f50c:	f7f3 fceb 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f510:	4603      	mov	r3, r0
 800f512:	4619      	mov	r1, r3
 800f514:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f516:	f7f3 fcf1 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f51a:	4603      	mov	r3, r0
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7f3 fd40 	bl	8002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f522:	4604      	mov	r4, r0
 800f524:	69b9      	ldr	r1, [r7, #24]
 800f526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f528:	f000 f8b5 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f52c:	4603      	mov	r3, r0
 800f52e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f530:	4619      	mov	r1, r3
 800f532:	4620      	mov	r0, r4
 800f534:	f000 fab4 	bl	800faa0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f538:	4603      	mov	r3, r0
 800f53a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);    // exp(-4)
 800f53c:	4841      	ldr	r0, [pc, #260]	; (800f644 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 800f53e:	f7ff fa48 	bl	800e9d2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f542:	4603      	mov	r3, r0
 800f544:	4618      	mov	r0, r3
 800f546:	f7ff fa30 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f54a:	4603      	mov	r3, r0
 800f54c:	617b      	str	r3, [r7, #20]
 800f54e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f552:	f7f3 fcc8 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f556:	4603      	mov	r3, r0
 800f558:	4619      	mov	r1, r3
 800f55a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f55c:	f7f3 fcce 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f560:	4603      	mov	r3, r0
 800f562:	4618      	mov	r0, r3
 800f564:	f7f3 fd1d 	bl	8002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f568:	4604      	mov	r4, r0
 800f56a:	6979      	ldr	r1, [r7, #20]
 800f56c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f56e:	f000 f892 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f572:	4603      	mov	r3, r0
 800f574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f576:	4619      	mov	r1, r3
 800f578:	4620      	mov	r0, r4
 800f57a:	f000 fa91 	bl	800faa0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f57e:	4603      	mov	r3, r0
 800f580:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);      // exp(-8)
 800f582:	4831      	ldr	r0, [pc, #196]	; (800f648 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 800f584:	f7ff fa25 	bl	800e9d2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f588:	4603      	mov	r3, r0
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7ff fa0d 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f590:	4603      	mov	r3, r0
 800f592:	613b      	str	r3, [r7, #16]
 800f594:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800f598:	f7f3 fca5 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f59c:	4603      	mov	r3, r0
 800f59e:	4619      	mov	r1, r3
 800f5a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f5a2:	f7f3 fcab 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7f3 fcfa 	bl	8002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	6939      	ldr	r1, [r7, #16]
 800f5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5b4:	f000 f86f 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5bc:	4619      	mov	r1, r3
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f000 fa6e 	bl	800faa0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);         // exp(-16)
 800f5c8:	20f2      	movs	r0, #242	; 0xf2
 800f5ca:	f7ff fa02 	bl	800e9d2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff f9ea 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	60fb      	str	r3, [r7, #12]
 800f5da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800f5de:	f7f3 fc82 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f5e8:	f7f3 fc88 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7f3 fcd7 	bl	8002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	68f9      	ldr	r1, [r7, #12]
 800f5f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5fa:	f000 f84c 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f5fe:	4603      	mov	r3, r0
 800f600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f602:	4619      	mov	r1, r3
 800f604:	4620      	mov	r0, r4
 800f606:	f000 fa4b 	bl	800faa0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f60a:	4603      	mov	r3, r0
 800f60c:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 fa67 	bl	800fae2 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 800f614:	4604      	mov	r4, r0
 800f616:	f7ff fd4f 	bl	800f0b8 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800f61a:	4603      	mov	r3, r0
 800f61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f61e:	4619      	mov	r1, r3
 800f620:	4620      	mov	r0, r4
 800f622:	f000 fa3d 	bl	800faa0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f626:	4603      	mov	r3, r0
 800f628:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800f62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3744      	adds	r7, #68	; 0x44
 800f630:	46bd      	mov	sp, r7
 800f632:	bd90      	pop	{r4, r7, pc}
 800f634:	63afbe7b 	.word	0x63afbe7b
 800f638:	4da2cbf2 	.word	0x4da2cbf2
 800f63c:	2f16ac6c 	.word	0x2f16ac6c
 800f640:	1152aaa4 	.word	0x1152aaa4
 800f644:	02582ab7 	.word	0x02582ab7
 800f648:	000afe11 	.word	0x000afe11

0800f64c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f64c:	b5b0      	push	{r4, r5, r7, lr}
 800f64e:	b084      	sub	sp, #16
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f654:	1d3b      	adds	r3, r7, #4
 800f656:	4618      	mov	r0, r3
 800f658:	f7ff f99c 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f65c:	4603      	mov	r3, r0
 800f65e:	681d      	ldr	r5, [r3, #0]
 800f660:	f107 030c 	add.w	r3, r7, #12
 800f664:	4618      	mov	r0, r3
 800f666:	f000 f80b 	bl	800f680 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f66a:	4604      	mov	r4, r0
 800f66c:	4628      	mov	r0, r5
 800f66e:	f000 fa4a 	bl	800fb06 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 800f672:	4603      	mov	r3, r0
 800f674:	6023      	str	r3, [r4, #0]
  return result;
 800f676:	68fb      	ldr	r3, [r7, #12]
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bdb0      	pop	{r4, r5, r7, pc}

0800f680 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4618      	mov	r0, r3
 800f68c:	370c      	adds	r7, #12
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr

0800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f696:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f698:	b085      	sub	sp, #20
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
 800f69e:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f6a0:	1d3b      	adds	r3, r7, #4
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7ff f976 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	681d      	ldr	r5, [r3, #0]
 800f6ac:	463b      	mov	r3, r7
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7ff f970 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	681e      	ldr	r6, [r3, #0]
 800f6b8:	f107 030c 	add.w	r3, r7, #12
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7ff f969 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	4631      	mov	r1, r6
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f7f1 fde4 	bl	8001294 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	6023      	str	r3, [r4, #0]
  return c;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3714      	adds	r7, #20
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f6dc <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>:
inline IntegerType RoundingDivideByPOT(IntegerType x, ExponentType exponent) {
 800f6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6de:	b089      	sub	sp, #36	; 0x24
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
  assert(exponent <= 31);
 800f6e6:	683a      	ldr	r2, [r7, #0]
 800f6e8:	2a1f      	cmp	r2, #31
 800f6ea:	d906      	bls.n	800f6fa <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0x1e>
 800f6ec:	4b2c      	ldr	r3, [pc, #176]	; (800f7a0 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0xc4>)
 800f6ee:	4a2d      	ldr	r2, [pc, #180]	; (800f7a4 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0xc8>)
 800f6f0:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800f6f4:	482c      	ldr	r0, [pc, #176]	; (800f7a8 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0xcc>)
 800f6f6:	f004 fcb3 	bl	8014060 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800f6fa:	f04f 0101 	mov.w	r1, #1
 800f6fe:	f04f 0200 	mov.w	r2, #0
 800f702:	6838      	ldr	r0, [r7, #0]
 800f704:	f1a0 0620 	sub.w	r6, r0, #32
 800f708:	f1c0 0520 	rsb	r5, r0, #32
 800f70c:	fa02 f400 	lsl.w	r4, r2, r0
 800f710:	fa01 f606 	lsl.w	r6, r1, r6
 800f714:	4334      	orrs	r4, r6
 800f716:	fa21 f505 	lsr.w	r5, r1, r5
 800f71a:	432c      	orrs	r4, r5
 800f71c:	fa01 f300 	lsl.w	r3, r1, r0
 800f720:	3b01      	subs	r3, #1
 800f722:	4618      	mov	r0, r3
 800f724:	f7f3 fbdf 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f728:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800f72a:	2000      	movs	r0, #0
 800f72c:	f7f3 fbdb 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f730:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800f732:	2001      	movs	r0, #1
 800f734:	f7f3 fbd7 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f738:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800f73a:	69f9      	ldr	r1, [r7, #28]
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f7f3 fbdd 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f742:	6138      	str	r0, [r7, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800f744:	2101      	movs	r1, #1
 800f746:	69f8      	ldr	r0, [r7, #28]
 800f748:	f7f3 fbe6 	bl	8002f18 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800f74c:	4604      	mov	r4, r0
 800f74e:	69b9      	ldr	r1, [r7, #24]
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7f3 fbf0 	bl	8002f36 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800f756:	4603      	mov	r3, r0
 800f758:	6979      	ldr	r1, [r7, #20]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7f3 fbce 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f760:	4603      	mov	r3, r0
  const IntegerType threshold =
 800f762:	4619      	mov	r1, r3
 800f764:	4620      	mov	r0, r4
 800f766:	f7f3 fbfa 	bl	8002f5e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800f76a:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	4619      	mov	r1, r3
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f7f3 fbd1 	bl	8002f18 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800f776:	4604      	mov	r4, r0
 800f778:	68f9      	ldr	r1, [r7, #12]
 800f77a:	6938      	ldr	r0, [r7, #16]
 800f77c:	f7f3 fbfd 	bl	8002f7a <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800f780:	4603      	mov	r3, r0
 800f782:	6979      	ldr	r1, [r7, #20]
 800f784:	4618      	mov	r0, r3
 800f786:	f7f3 fbb9 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f78a:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 800f78c:	4619      	mov	r1, r3
 800f78e:	4620      	mov	r0, r4
 800f790:	f7f3 fbe5 	bl	8002f5e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800f794:	4603      	mov	r3, r0
}
 800f796:	4618      	mov	r0, r3
 800f798:	3724      	adds	r7, #36	; 0x24
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	08019d78 	.word	0x08019d78
 800f7a4:	0802126c 	.word	0x0802126c
 800f7a8:	08019d5c 	.word	0x08019d5c

0800f7ac <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f993 2000 	ldrsb.w	r2, [r3]
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	f993 3000 	ldrsb.w	r3, [r3]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	da01      	bge.n	800f7ca <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	e000      	b.n	800f7cc <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 800f7ca:	687b      	ldr	r3, [r7, #4]
    }
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800f7dc:	f7f1 fd22 	bl	8001224 <_ZNSt14numeric_limitsIlE3maxEv>
 800f7e0:	4603      	mov	r3, r0
  }
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800f7e6:	b480      	push	{r7}
 800f7e8:	b083      	sub	sp, #12
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800f804:	f107 030c 	add.w	r3, r7, #12
 800f808:	4618      	mov	r0, r3
 800f80a:	f7ff ffec 	bl	800f7e6 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f80e:	4602      	mov	r2, r0
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6013      	str	r3, [r2, #0]
    return retval;
 800f814:	68fb      	ldr	r3, [r7, #12]
  }
 800f816:	4618      	mov	r0, r3
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}

0800f81e <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800f81e:	b480      	push	{r7}
 800f820:	b083      	sub	sp, #12
 800f822:	af00      	add	r7, sp, #0
 800f824:	6078      	str	r0, [r7, #4]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4618      	mov	r0, r3
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f000 f96f 	bl	800fb20 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800f842:	4603      	mov	r3, r0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3708      	adds	r7, #8
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	4618      	mov	r0, r3
 800f858:	370c      	adds	r7, #12
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr

0800f862 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f862:	b580      	push	{r7, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 f99a 	bl	800fba4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800f870:	4603      	mov	r3, r0
}
 800f872:	4618      	mov	r0, r3
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}

0800f87a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800f87a:	b580      	push	{r7, lr}
 800f87c:	b082      	sub	sp, #8
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800f882:	2101      	movs	r1, #1
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7f3 f839 	bl	80028fc <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 800f88a:	4603      	mov	r3, r0
  }
 800f88c:	4618      	mov	r0, r3
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f894:	b590      	push	{r4, r7, lr}
 800f896:	b085      	sub	sp, #20
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f89c:	f107 030c 	add.w	r3, r7, #12
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7ff feed 	bl	800f680 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7f3 fb1c 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	6023      	str	r3, [r4, #0]
    return retval;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
  }
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3714      	adds	r7, #20
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd90      	pop	{r4, r7, pc}

0800f8bc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	370c      	adds	r7, #12
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr

0800f8d2 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b084      	sub	sp, #16
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800f8da:	f107 030c 	add.w	r3, r7, #12
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7ff fece 	bl	800f680 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800f8e4:	4602      	mov	r2, r0
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6013      	str	r3, [r2, #0]
    return retval;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
  }
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3710      	adds	r7, #16
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800f8f8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800f8fc:	f000 f803 	bl	800f906 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800f900:	4603      	mov	r3, r0
  }
 800f902:	4618      	mov	r0, r3
 800f904:	bd80      	pop	{r7, pc}

0800f906 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f906:	b590      	push	{r4, r7, lr}
 800f908:	b085      	sub	sp, #20
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f90e:	f107 030c 	add.w	r3, r7, #12
 800f912:	4618      	mov	r0, r3
 800f914:	f7ff ffd2 	bl	800f8bc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800f918:	4604      	mov	r4, r0
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7f3 fae3 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f920:	4603      	mov	r3, r0
 800f922:	6023      	str	r3, [r4, #0]
    return retval;
 800f924:	68fb      	ldr	r3, [r7, #12]
  }
 800f926:	4618      	mov	r0, r3
 800f928:	3714      	adds	r7, #20
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd90      	pop	{r4, r7, pc}

0800f92e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800f92e:	b590      	push	{r4, r7, lr}
 800f930:	b083      	sub	sp, #12
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
 800f936:	6039      	str	r1, [r7, #0]
 800f938:	1d3b      	adds	r3, r7, #4
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7ff ffbe 	bl	800f8bc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800f940:	4603      	mov	r3, r0
 800f942:	681c      	ldr	r4, [r3, #0]
 800f944:	463b      	mov	r3, r7
 800f946:	4618      	mov	r0, r3
 800f948:	f7ff ffb8 	bl	800f8bc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800f94c:	4603      	mov	r3, r0
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	4619      	mov	r1, r3
 800f952:	4620      	mov	r0, r4
 800f954:	f7ff fcd9 	bl	800f30a <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800f958:	4603      	mov	r3, r0
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7ff fcff 	bl	800f35e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f960:	4603      	mov	r3, r0
 800f962:	4618      	mov	r0, r3
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	bd90      	pop	{r4, r7, pc}

0800f96a <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 800f96a:	b590      	push	{r4, r7, lr}
 800f96c:	b083      	sub	sp, #12
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
 800f972:	6039      	str	r1, [r7, #0]
 800f974:	1d3b      	adds	r3, r7, #4
 800f976:	4618      	mov	r0, r3
 800f978:	f7ff ffa0 	bl	800f8bc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800f97c:	4603      	mov	r3, r0
 800f97e:	681c      	ldr	r4, [r3, #0]
 800f980:	463b      	mov	r3, r7
 800f982:	4618      	mov	r0, r3
 800f984:	f7ff ff9a 	bl	800f8bc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800f988:	4603      	mov	r3, r0
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	4619      	mov	r1, r3
 800f98e:	4620      	mov	r0, r4
 800f990:	f7f3 fab4 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f994:	4603      	mov	r3, r0
 800f996:	4618      	mov	r0, r3
 800f998:	f7ff fce1 	bl	800f35e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f99c:	4603      	mov	r3, r0
 800f99e:	4618      	mov	r0, r3
 800f9a0:	370c      	adds	r7, #12
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd90      	pop	{r4, r7, pc}

0800f9a6 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f9a6:	b5b0      	push	{r4, r5, r7, lr}
 800f9a8:	b084      	sub	sp, #16
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f9ae:	1d3b      	adds	r3, r7, #4
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7ff ff83 	bl	800f8bc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	681d      	ldr	r5, [r3, #0]
 800f9ba:	f107 030c 	add.w	r3, r7, #12
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fe ffe8 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	f000 f98e 	bl	800fce8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	6023      	str	r3, [r4, #0]
  return result;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3710      	adds	r7, #16
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f9dc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b08a      	sub	sp, #40	; 0x28
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800f9e4:	482c      	ldr	r0, [pc, #176]	; (800fa98 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800f9e6:	f7fe fff4 	bl	800e9d2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f9ea:	4603      	mov	r3, r0
  const F constant_term =
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fe ffdc 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800f9f6:	4829      	ldr	r0, [pc, #164]	; (800fa9c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800f9f8:	f7fe ffeb 	bl	800e9d2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f9fc:	4603      	mov	r3, r0
  const F constant_1_over_3 =
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fe ffd3 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800fa04:	4603      	mov	r3, r0
 800fa06:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 800fa08:	f000 f97a 	bl	800fd00 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	4619      	mov	r1, r3
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 f97e 	bl	800fd12 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fa16:	4603      	mov	r3, r0
 800fa18:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 800fa1a:	69f9      	ldr	r1, [r7, #28]
 800fa1c:	69f8      	ldr	r0, [r7, #28]
 800fa1e:	f7ff fe3a 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fa22:	4603      	mov	r3, r0
 800fa24:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 800fa26:	69f9      	ldr	r1, [r7, #28]
 800fa28:	69b8      	ldr	r0, [r7, #24]
 800fa2a:	f7ff fe34 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 800fa32:	69b9      	ldr	r1, [r7, #24]
 800fa34:	69b8      	ldr	r0, [r7, #24]
 800fa36:	f7ff fe2e 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 800fa3e:	6938      	ldr	r0, [r7, #16]
 800fa40:	f000 f985 	bl	800fd4e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800fa44:	4603      	mov	r3, r0
 800fa46:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 800fa48:	6979      	ldr	r1, [r7, #20]
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f000 f961 	bl	800fd12 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fa50:	4603      	mov	r3, r0
 800fa52:	6a39      	ldr	r1, [r7, #32]
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff fe1e 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	69b9      	ldr	r1, [r7, #24]
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f000 f957 	bl	800fd12 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fa64:	4603      	mov	r3, r0
  F x4_over_24_plus_x3_over_6_plus_x2_over_2 =
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 f987 	bl	800fd7a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 800fa70:	68b9      	ldr	r1, [r7, #8]
 800fa72:	69f8      	ldr	r0, [r7, #28]
 800fa74:	f000 f94d 	bl	800fd12 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa7e:	f7ff fe0a 	bl	800f696 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fa82:	4603      	mov	r3, r0
      constant_term * (x + x4_over_24_plus_x3_over_6_plus_x2_over_2));
 800fa84:	4619      	mov	r1, r3
 800fa86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa88:	f000 f98d 	bl	800fda6 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fa8c:	4603      	mov	r3, r0
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3728      	adds	r7, #40	; 0x28
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	70f5a894 	.word	0x70f5a894
 800fa9c:	2aaaaaab 	.word	0x2aaaaaab

0800faa0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 800faa0:	b590      	push	{r4, r7, lr}
 800faa2:	b085      	sub	sp, #20
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800faac:	f107 0308 	add.w	r3, r7, #8
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fe ff6f 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fab6:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fab8:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800faba:	1d3b      	adds	r3, r7, #4
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fe ff69 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fac2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	461a      	mov	r2, r3
 800fac8:	4621      	mov	r1, r4
 800faca:	68f8      	ldr	r0, [r7, #12]
 800facc:	f000 f8ef 	bl	800fcae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fad0:	4603      	mov	r3, r0
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe feec 	bl	800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fad8:	4603      	mov	r3, r0
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3714      	adds	r7, #20
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd90      	pop	{r4, r7, pc}

0800fae2 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b082      	sub	sp, #8
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
 800faea:	1d3b      	adds	r3, r7, #4
 800faec:	4618      	mov	r0, r3
 800faee:	f7ff fee5 	bl	800f8bc <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800faf2:	4603      	mov	r3, r0
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f000 f973 	bl	800fde2 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 800fafc:	4603      	mov	r3, r0
 800fafe:	4618      	mov	r0, r3
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800fb06:	b580      	push	{r7, lr}
 800fb08:	b082      	sub	sp, #8
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f979 	bl	800fe06 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 800fb14:	4603      	mov	r3, r0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
	...

0800fb20 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b08a      	sub	sp, #40	; 0x28
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800fb28:	f7f1 fb73 	bl	8001212 <_ZNSt14numeric_limitsIlE3minEv>
 800fb2c:	4603      	mov	r3, r0
    const IntegerType min =
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7f3 f9d9 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fb34:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800fb36:	f7f1 fb75 	bl	8001224 <_ZNSt14numeric_limitsIlE3maxEv>
 800fb3a:	4603      	mov	r3, r0
    const IntegerType max =
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7f3 f9d2 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fb42:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800fb44:	2320      	movs	r3, #32
 800fb46:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800fb48:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fb4c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800fb4e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800fb52:	f7f3 f9c8 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fb56:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 800fb58:	4619      	mov	r1, r3
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f7f3 fa0d 	bl	8002f7a <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800fb60:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800fb62:	480f      	ldr	r0, [pc, #60]	; (800fba0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800fb64:	f7f3 f9bf 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fb68:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f7f3 f9e2 	bl	8002f36 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800fb72:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800fb74:	2102      	movs	r1, #2
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 f856 	bl	800fc28 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>
 800fb7c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	6a39      	ldr	r1, [r7, #32]
 800fb82:	6978      	ldr	r0, [r7, #20]
 800fb84:	f000 f893 	bl	800fcae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fb88:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800fb8a:	68fa      	ldr	r2, [r7, #12]
 800fb8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb8e:	6938      	ldr	r0, [r7, #16]
 800fb90:	f000 f88d 	bl	800fcae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fb94:	60f8      	str	r0, [r7, #12]
    return result;
 800fb96:	68fb      	ldr	r3, [r7, #12]
  }
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3728      	adds	r7, #40	; 0x28
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	e0000001 	.word	0xe0000001

0800fba4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b08a      	sub	sp, #40	; 0x28
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800fbac:	f7f1 fb31 	bl	8001212 <_ZNSt14numeric_limitsIlE3minEv>
 800fbb0:	4603      	mov	r3, r0
    const IntegerType min =
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7f3 f997 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fbb8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800fbba:	f7f1 fb33 	bl	8001224 <_ZNSt14numeric_limitsIlE3maxEv>
 800fbbe:	4603      	mov	r3, r0
    const IntegerType max =
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f3 f990 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fbc6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800fbc8:	2320      	movs	r3, #32
 800fbca:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800fbcc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fbd0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800fbd2:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800fbd6:	f7f3 f986 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fbda:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 800fbdc:	4619      	mov	r1, r3
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7f3 f9cb 	bl	8002f7a <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800fbe4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800fbe6:	480f      	ldr	r0, [pc, #60]	; (800fc24 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800fbe8:	f7f3 f97d 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fbec:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 800fbee:	4619      	mov	r1, r3
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7f3 f9a0 	bl	8002f36 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800fbf6:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800fbf8:	2101      	movs	r1, #1
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f814 	bl	800fc28 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>
 800fc00:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	6a39      	ldr	r1, [r7, #32]
 800fc06:	6978      	ldr	r0, [r7, #20]
 800fc08:	f000 f851 	bl	800fcae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fc0c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800fc0e:	68fa      	ldr	r2, [r7, #12]
 800fc10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc12:	6938      	ldr	r0, [r7, #16]
 800fc14:	f000 f84b 	bl	800fcae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fc18:	60f8      	str	r0, [r7, #12]
    return result;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
  }
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3728      	adds	r7, #40	; 0x28
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	c0000001 	.word	0xc0000001

0800fc28 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>:
tIntegerType ShiftLeft(tIntegerType a, OffsetType offset) {
 800fc28:	b490      	push	{r4, r7}
 800fc2a:	b088      	sub	sp, #32
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800fc38:	e9c7 3406 	strd	r3, r4, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	fa02 f303 	lsl.w	r3, r2, r3
 800fc44:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800fc48:	69fa      	ldr	r2, [r7, #28]
 800fc4a:	fb03 f102 	mul.w	r1, r3, r2
 800fc4e:	69ba      	ldr	r2, [r7, #24]
 800fc50:	fb04 f202 	mul.w	r2, r4, r2
 800fc54:	440a      	add	r2, r1
 800fc56:	69b9      	ldr	r1, [r7, #24]
 800fc58:	fba1 3403 	umull	r3, r4, r1, r3
 800fc5c:	4422      	add	r2, r4
 800fc5e:	4614      	mov	r4, r2
 800fc60:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800fc64:	e9c7 3404 	strd	r3, r4, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800fc68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc6c:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800fc6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fc72:	60bb      	str	r3, [r7, #8]
             ? min
 800fc74:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800fc78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc7c:	f174 33ff 	sbcs.w	r3, r4, #4294967295
 800fc80:	db0e      	blt.n	800fca0 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x78>
             : wide_shifted > max ? max
 800fc82:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800fc86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc8a:	f04f 0200 	mov.w	r2, #0
 800fc8e:	4299      	cmp	r1, r3
 800fc90:	eb72 0304 	sbcs.w	r3, r2, r4
 800fc94:	db01      	blt.n	800fc9a <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x72>
 800fc96:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800fc98:	e004      	b.n	800fca4 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x7c>
             : wide_shifted > max ? max
 800fc9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800fc9e:	e001      	b.n	800fca4 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x7c>
             ? min
 800fca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3720      	adds	r7, #32
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bc90      	pop	{r4, r7}
 800fcac:	4770      	bx	lr

0800fcae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800fcae:	b590      	push	{r4, r7, lr}
 800fcb0:	b085      	sub	sp, #20
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	60f8      	str	r0, [r7, #12]
 800fcb6:	60b9      	str	r1, [r7, #8]
 800fcb8:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800fcba:	68b9      	ldr	r1, [r7, #8]
 800fcbc:	68f8      	ldr	r0, [r7, #12]
 800fcbe:	f7f3 f91d 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	68f8      	ldr	r0, [r7, #12]
 800fcc6:	f7f3 f97d 	bl	8002fc4 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800fcca:	4603      	mov	r3, r0
 800fccc:	6879      	ldr	r1, [r7, #4]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7f3 f914 	bl	8002efc <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f000 f8a1 	bl	800fe20 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800fcde:	4603      	mov	r3, r0
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3714      	adds	r7, #20
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd90      	pop	{r4, r7, pc}

0800fce8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f000 f8a3 	bl	800fe3c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 800fcf6:	4603      	mov	r3, r0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 800fd00:	b580      	push	{r7, lr}
 800fd02:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800fd04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800fd08:	f7fe fe4f 	bl	800e9aa <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800fd0c:	4603      	mov	r3, r0
  }
 800fd0e:	4618      	mov	r0, r3
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800fd12:	b590      	push	{r4, r7, lr}
 800fd14:	b083      	sub	sp, #12
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
 800fd1a:	6039      	str	r1, [r7, #0]
 800fd1c:	1d3b      	adds	r3, r7, #4
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fe fe38 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fd24:	4603      	mov	r3, r0
 800fd26:	681c      	ldr	r4, [r3, #0]
 800fd28:	463b      	mov	r3, r7
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fe fe32 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fd30:	4603      	mov	r3, r0
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	4619      	mov	r1, r3
 800fd36:	4620      	mov	r0, r4
 800fd38:	f7f3 f911 	bl	8002f5e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7fe fdb6 	bl	800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fd44:	4603      	mov	r3, r0
 800fd46:	4618      	mov	r0, r3
 800fd48:	370c      	adds	r7, #12
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd90      	pop	{r4, r7, pc}

0800fd4e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b082      	sub	sp, #8
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800fd56:	1d3b      	adds	r3, r7, #4
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7fe fe1b 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fd5e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f000 f8ac 	bl	800fec0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 800fd68:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fe fda0 	bl	800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fd70:	4603      	mov	r3, r0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3708      	adds	r7, #8
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b082      	sub	sp, #8
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800fd82:	1d3b      	adds	r3, r7, #4
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fe fe05 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fd8a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7ff faaf 	bl	800f2f2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800fd94:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7fe fd8a 	bl	800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fd9c:	4603      	mov	r3, r0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}

0800fda6 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800fda6:	b590      	push	{r4, r7, lr}
 800fda8:	b083      	sub	sp, #12
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
 800fdae:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800fdb0:	1d3b      	adds	r3, r7, #4
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fe fdee 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fdb8:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fdba:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800fdbc:	463b      	mov	r3, r7
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fe fde8 	bl	800e994 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fdc4:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4619      	mov	r1, r3
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 f884 	bl	800fed8 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 800fdd0:	4603      	mov	r3, r0
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fe fd6c 	bl	800e8b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fdd8:	4603      	mov	r3, r0
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	370c      	adds	r7, #12
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd90      	pop	{r4, r7, pc}

0800fde2 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b082      	sub	sp, #8
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	bf0c      	ite	eq
 800fdf0:	2301      	moveq	r3, #1
 800fdf2:	2300      	movne	r3, #0
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7f3 f8d3 	bl	8002fa2 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800fdfc:	4603      	mov	r3, r0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b082      	sub	sp, #8
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800fe0e:	210c      	movs	r1, #12
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f7f2 fd73 	bl	80028fc <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 800fe16:	4603      	mov	r3, r0
  }
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800fe20:	b480      	push	{r7}
 800fe22:	b083      	sub	sp, #12
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	4053      	eors	r3, r2
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	370c      	adds	r7, #12
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr

0800fe3c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b08a      	sub	sp, #40	; 0x28
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800fe44:	f7f1 f9e5 	bl	8001212 <_ZNSt14numeric_limitsIlE3minEv>
 800fe48:	4603      	mov	r3, r0
    const IntegerType min =
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7f3 f84b 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fe50:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800fe52:	f7f1 f9e7 	bl	8001224 <_ZNSt14numeric_limitsIlE3maxEv>
 800fe56:	4603      	mov	r3, r0
    const IntegerType max =
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7f3 f844 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fe5e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800fe60:	2320      	movs	r3, #32
 800fe62:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800fe64:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 800fe68:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800fe6a:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 800fe6e:	f7f3 f83a 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fe72:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 800fe74:	4619      	mov	r1, r3
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7f3 f87f 	bl	8002f7a <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800fe7c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800fe7e:	480f      	ldr	r0, [pc, #60]	; (800febc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 800fe80:	f7f3 f831 	bl	8002ee6 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fe84:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 800fe86:	4619      	mov	r1, r3
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7f3 f854 	bl	8002f36 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800fe8e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800fe90:	2105      	movs	r1, #5
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7ff fec8 	bl	800fc28 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>
 800fe98:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	6a39      	ldr	r1, [r7, #32]
 800fe9e:	6978      	ldr	r0, [r7, #20]
 800fea0:	f7ff ff05 	bl	800fcae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fea4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800fea6:	68fa      	ldr	r2, [r7, #12]
 800fea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800feaa:	6938      	ldr	r0, [r7, #16]
 800feac:	f7ff feff 	bl	800fcae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800feb0:	60f8      	str	r0, [r7, #12]
    return result;
 800feb2:	68fb      	ldr	r3, [r7, #12]
  }
 800feb4:	4618      	mov	r0, r3
 800feb6:	3728      	adds	r7, #40	; 0x28
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}
 800febc:	fc000001 	.word	0xfc000001

0800fec0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 f813 	bl	800fef4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 800fece:	4603      	mov	r3, r0
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
                                                                             b);
 800fee2:	6839      	ldr	r1, [r7, #0]
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 f812 	bl	800ff0e <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 800feea:	4603      	mov	r3, r0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800fefc:	2102      	movs	r1, #2
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7f2 fcfc 	bl	80028fc <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 800ff04:	4603      	mov	r3, r0
  }
 800ff06:	4618      	mov	r0, r3
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b082      	sub	sp, #8
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	6039      	str	r1, [r7, #0]
 800ff18:	6839      	ldr	r1, [r7, #0]
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7f3 f81f 	bl	8002f5e <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800ff20:	4603      	mov	r3, r0
 800ff22:	4618      	mov	r0, r3
 800ff24:	3708      	adds	r7, #8
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
	...

0800ff2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ff32:	4b0f      	ldr	r3, [pc, #60]	; (800ff70 <HAL_MspInit+0x44>)
 800ff34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff36:	4a0e      	ldr	r2, [pc, #56]	; (800ff70 <HAL_MspInit+0x44>)
 800ff38:	f043 0301 	orr.w	r3, r3, #1
 800ff3c:	6613      	str	r3, [r2, #96]	; 0x60
 800ff3e:	4b0c      	ldr	r3, [pc, #48]	; (800ff70 <HAL_MspInit+0x44>)
 800ff40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff42:	f003 0301 	and.w	r3, r3, #1
 800ff46:	607b      	str	r3, [r7, #4]
 800ff48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ff4a:	4b09      	ldr	r3, [pc, #36]	; (800ff70 <HAL_MspInit+0x44>)
 800ff4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff4e:	4a08      	ldr	r2, [pc, #32]	; (800ff70 <HAL_MspInit+0x44>)
 800ff50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff54:	6593      	str	r3, [r2, #88]	; 0x58
 800ff56:	4b06      	ldr	r3, [pc, #24]	; (800ff70 <HAL_MspInit+0x44>)
 800ff58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff5e:	603b      	str	r3, [r7, #0]
 800ff60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ff62:	bf00      	nop
 800ff64:	370c      	adds	r7, #12
 800ff66:	46bd      	mov	sp, r7
 800ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop
 800ff70:	40021000 	.word	0x40021000

0800ff74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b08a      	sub	sp, #40	; 0x28
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff7c:	f107 0314 	add.w	r3, r7, #20
 800ff80:	2200      	movs	r2, #0
 800ff82:	601a      	str	r2, [r3, #0]
 800ff84:	605a      	str	r2, [r3, #4]
 800ff86:	609a      	str	r2, [r3, #8]
 800ff88:	60da      	str	r2, [r3, #12]
 800ff8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4a15      	ldr	r2, [pc, #84]	; (800ffe8 <HAL_ADC_MspInit+0x74>)
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d124      	bne.n	800ffe0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800ff96:	4b15      	ldr	r3, [pc, #84]	; (800ffec <HAL_ADC_MspInit+0x78>)
 800ff98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff9a:	4a14      	ldr	r2, [pc, #80]	; (800ffec <HAL_ADC_MspInit+0x78>)
 800ff9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ffa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ffa2:	4b12      	ldr	r3, [pc, #72]	; (800ffec <HAL_ADC_MspInit+0x78>)
 800ffa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ffaa:	613b      	str	r3, [r7, #16]
 800ffac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ffae:	4b0f      	ldr	r3, [pc, #60]	; (800ffec <HAL_ADC_MspInit+0x78>)
 800ffb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffb2:	4a0e      	ldr	r2, [pc, #56]	; (800ffec <HAL_ADC_MspInit+0x78>)
 800ffb4:	f043 0301 	orr.w	r3, r3, #1
 800ffb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ffba:	4b0c      	ldr	r3, [pc, #48]	; (800ffec <HAL_ADC_MspInit+0x78>)
 800ffbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffbe:	f003 0301 	and.w	r3, r3, #1
 800ffc2:	60fb      	str	r3, [r7, #12]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800ffc6:	2380      	movs	r3, #128	; 0x80
 800ffc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800ffca:	230b      	movs	r3, #11
 800ffcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ffd2:	f107 0314 	add.w	r3, r7, #20
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ffdc:	f001 fb4c 	bl	8011678 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800ffe0:	bf00      	nop
 800ffe2:	3728      	adds	r7, #40	; 0x28
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	50040000 	.word	0x50040000
 800ffec:	40021000 	.word	0x40021000

0800fff0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b085      	sub	sp, #20
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4a0a      	ldr	r2, [pc, #40]	; (8010028 <HAL_CRC_MspInit+0x38>)
 800fffe:	4293      	cmp	r3, r2
 8010000:	d10b      	bne.n	801001a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8010002:	4b0a      	ldr	r3, [pc, #40]	; (801002c <HAL_CRC_MspInit+0x3c>)
 8010004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010006:	4a09      	ldr	r2, [pc, #36]	; (801002c <HAL_CRC_MspInit+0x3c>)
 8010008:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801000c:	6493      	str	r3, [r2, #72]	; 0x48
 801000e:	4b07      	ldr	r3, [pc, #28]	; (801002c <HAL_CRC_MspInit+0x3c>)
 8010010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010016:	60fb      	str	r3, [r7, #12]
 8010018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 801001a:	bf00      	nop
 801001c:	3714      	adds	r7, #20
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	40023000 	.word	0x40023000
 801002c:	40021000 	.word	0x40021000

08010030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010030:	b480      	push	{r7}
 8010032:	b085      	sub	sp, #20
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4a13      	ldr	r2, [pc, #76]	; (801008c <HAL_TIM_Base_MspInit+0x5c>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d10c      	bne.n	801005c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8010042:	4b13      	ldr	r3, [pc, #76]	; (8010090 <HAL_TIM_Base_MspInit+0x60>)
 8010044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010046:	4a12      	ldr	r2, [pc, #72]	; (8010090 <HAL_TIM_Base_MspInit+0x60>)
 8010048:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801004c:	6613      	str	r3, [r2, #96]	; 0x60
 801004e:	4b10      	ldr	r3, [pc, #64]	; (8010090 <HAL_TIM_Base_MspInit+0x60>)
 8010050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010056:	60fb      	str	r3, [r7, #12]
 8010058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 801005a:	e010      	b.n	801007e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a0c      	ldr	r2, [pc, #48]	; (8010094 <HAL_TIM_Base_MspInit+0x64>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d10b      	bne.n	801007e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8010066:	4b0a      	ldr	r3, [pc, #40]	; (8010090 <HAL_TIM_Base_MspInit+0x60>)
 8010068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801006a:	4a09      	ldr	r2, [pc, #36]	; (8010090 <HAL_TIM_Base_MspInit+0x60>)
 801006c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010070:	6613      	str	r3, [r2, #96]	; 0x60
 8010072:	4b07      	ldr	r3, [pc, #28]	; (8010090 <HAL_TIM_Base_MspInit+0x60>)
 8010074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801007a:	60bb      	str	r3, [r7, #8]
 801007c:	68bb      	ldr	r3, [r7, #8]
}
 801007e:	bf00      	nop
 8010080:	3714      	adds	r7, #20
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr
 801008a:	bf00      	nop
 801008c:	40012c00 	.word	0x40012c00
 8010090:	40021000 	.word	0x40021000
 8010094:	40014400 	.word	0x40014400

08010098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b08c      	sub	sp, #48	; 0x30
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100a0:	f107 031c 	add.w	r3, r7, #28
 80100a4:	2200      	movs	r2, #0
 80100a6:	601a      	str	r2, [r3, #0]
 80100a8:	605a      	str	r2, [r3, #4]
 80100aa:	609a      	str	r2, [r3, #8]
 80100ac:	60da      	str	r2, [r3, #12]
 80100ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a38      	ldr	r2, [pc, #224]	; (8010198 <HAL_UART_MspInit+0x100>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d12a      	bne.n	8010110 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80100ba:	4b38      	ldr	r3, [pc, #224]	; (801019c <HAL_UART_MspInit+0x104>)
 80100bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80100be:	4a37      	ldr	r2, [pc, #220]	; (801019c <HAL_UART_MspInit+0x104>)
 80100c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80100c4:	6613      	str	r3, [r2, #96]	; 0x60
 80100c6:	4b35      	ldr	r3, [pc, #212]	; (801019c <HAL_UART_MspInit+0x104>)
 80100c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80100ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100ce:	61bb      	str	r3, [r7, #24]
 80100d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80100d2:	4b32      	ldr	r3, [pc, #200]	; (801019c <HAL_UART_MspInit+0x104>)
 80100d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100d6:	4a31      	ldr	r2, [pc, #196]	; (801019c <HAL_UART_MspInit+0x104>)
 80100d8:	f043 0301 	orr.w	r3, r3, #1
 80100dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80100de:	4b2f      	ldr	r3, [pc, #188]	; (801019c <HAL_UART_MspInit+0x104>)
 80100e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	617b      	str	r3, [r7, #20]
 80100e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80100ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80100ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100f0:	2302      	movs	r3, #2
 80100f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100f4:	2300      	movs	r3, #0
 80100f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80100f8:	2303      	movs	r3, #3
 80100fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80100fc:	2307      	movs	r3, #7
 80100fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010100:	f107 031c 	add.w	r3, r7, #28
 8010104:	4619      	mov	r1, r3
 8010106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801010a:	f001 fab5 	bl	8011678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 801010e:	e03f      	b.n	8010190 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	4a22      	ldr	r2, [pc, #136]	; (80101a0 <HAL_UART_MspInit+0x108>)
 8010116:	4293      	cmp	r3, r2
 8010118:	d13a      	bne.n	8010190 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 801011a:	4b20      	ldr	r3, [pc, #128]	; (801019c <HAL_UART_MspInit+0x104>)
 801011c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801011e:	4a1f      	ldr	r2, [pc, #124]	; (801019c <HAL_UART_MspInit+0x104>)
 8010120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010124:	6593      	str	r3, [r2, #88]	; 0x58
 8010126:	4b1d      	ldr	r3, [pc, #116]	; (801019c <HAL_UART_MspInit+0x104>)
 8010128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801012a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801012e:	613b      	str	r3, [r7, #16]
 8010130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010132:	4b1a      	ldr	r3, [pc, #104]	; (801019c <HAL_UART_MspInit+0x104>)
 8010134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010136:	4a19      	ldr	r2, [pc, #100]	; (801019c <HAL_UART_MspInit+0x104>)
 8010138:	f043 0301 	orr.w	r3, r3, #1
 801013c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801013e:	4b17      	ldr	r3, [pc, #92]	; (801019c <HAL_UART_MspInit+0x104>)
 8010140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010142:	f003 0301 	and.w	r3, r3, #1
 8010146:	60fb      	str	r3, [r7, #12]
 8010148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801014a:	2304      	movs	r3, #4
 801014c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801014e:	2302      	movs	r3, #2
 8010150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010152:	2300      	movs	r3, #0
 8010154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010156:	2303      	movs	r3, #3
 8010158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801015a:	2307      	movs	r3, #7
 801015c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801015e:	f107 031c 	add.w	r3, r7, #28
 8010162:	4619      	mov	r1, r3
 8010164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010168:	f001 fa86 	bl	8011678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 801016c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010172:	2302      	movs	r3, #2
 8010174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010176:	2300      	movs	r3, #0
 8010178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801017a:	2303      	movs	r3, #3
 801017c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 801017e:	2303      	movs	r3, #3
 8010180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010182:	f107 031c 	add.w	r3, r7, #28
 8010186:	4619      	mov	r1, r3
 8010188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801018c:	f001 fa74 	bl	8011678 <HAL_GPIO_Init>
}
 8010190:	bf00      	nop
 8010192:	3730      	adds	r7, #48	; 0x30
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	40013800 	.word	0x40013800
 801019c:	40021000 	.word	0x40021000
 80101a0:	40004400 	.word	0x40004400

080101a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80101a4:	b480      	push	{r7}
 80101a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80101a8:	bf00      	nop
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr

080101b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80101b2:	b480      	push	{r7}
 80101b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80101b6:	e7fe      	b.n	80101b6 <HardFault_Handler+0x4>

080101b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80101b8:	b480      	push	{r7}
 80101ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80101bc:	e7fe      	b.n	80101bc <MemManage_Handler+0x4>

080101be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80101be:	b480      	push	{r7}
 80101c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80101c2:	e7fe      	b.n	80101c2 <BusFault_Handler+0x4>

080101c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80101c4:	b480      	push	{r7}
 80101c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80101c8:	e7fe      	b.n	80101c8 <UsageFault_Handler+0x4>

080101ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80101ca:	b480      	push	{r7}
 80101cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80101ce:	bf00      	nop
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80101d8:	b480      	push	{r7}
 80101da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80101dc:	bf00      	nop
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr

080101e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80101e6:	b480      	push	{r7}
 80101e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80101ea:	bf00      	nop
 80101ec:	46bd      	mov	sp, r7
 80101ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f2:	4770      	bx	lr

080101f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80101f8:	f000 f97c 	bl	80104f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80101fc:	bf00      	nop
 80101fe:	bd80      	pop	{r7, pc}

08010200 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010200:	b480      	push	{r7}
 8010202:	af00      	add	r7, sp, #0
	return 1;
 8010204:	2301      	movs	r3, #1
}
 8010206:	4618      	mov	r0, r3
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <_kill>:

int _kill(int pid, int sig)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801021a:	f003 ff45 	bl	80140a8 <__errno>
 801021e:	4602      	mov	r2, r0
 8010220:	2316      	movs	r3, #22
 8010222:	6013      	str	r3, [r2, #0]
	return -1;
 8010224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010228:	4618      	mov	r0, r3
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <_exit>:

void _exit (int status)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8010238:	f04f 31ff 	mov.w	r1, #4294967295
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7ff ffe7 	bl	8010210 <_kill>
	while (1) {}		/* Make sure we hang here */
 8010242:	e7fe      	b.n	8010242 <_exit+0x12>

08010244 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b086      	sub	sp, #24
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010250:	2300      	movs	r3, #0
 8010252:	617b      	str	r3, [r7, #20]
 8010254:	e00a      	b.n	801026c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010256:	f3af 8000 	nop.w
 801025a:	4601      	mov	r1, r0
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	1c5a      	adds	r2, r3, #1
 8010260:	60ba      	str	r2, [r7, #8]
 8010262:	b2ca      	uxtb	r2, r1
 8010264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	3301      	adds	r3, #1
 801026a:	617b      	str	r3, [r7, #20]
 801026c:	697a      	ldr	r2, [r7, #20]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	429a      	cmp	r2, r3
 8010272:	dbf0      	blt.n	8010256 <_read+0x12>
	}

return len;
 8010274:	687b      	ldr	r3, [r7, #4]
}
 8010276:	4618      	mov	r0, r3
 8010278:	3718      	adds	r7, #24
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}

0801027e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b086      	sub	sp, #24
 8010282:	af00      	add	r7, sp, #0
 8010284:	60f8      	str	r0, [r7, #12]
 8010286:	60b9      	str	r1, [r7, #8]
 8010288:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801028a:	2300      	movs	r3, #0
 801028c:	617b      	str	r3, [r7, #20]
 801028e:	e009      	b.n	80102a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	1c5a      	adds	r2, r3, #1
 8010294:	60ba      	str	r2, [r7, #8]
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	4618      	mov	r0, r3
 801029a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	3301      	adds	r3, #1
 80102a2:	617b      	str	r3, [r7, #20]
 80102a4:	697a      	ldr	r2, [r7, #20]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	dbf1      	blt.n	8010290 <_write+0x12>
	}
	return len;
 80102ac:	687b      	ldr	r3, [r7, #4]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3718      	adds	r7, #24
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <_close>:

int _close(int file)
{
 80102b6:	b480      	push	{r7}
 80102b8:	b083      	sub	sp, #12
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
	return -1;
 80102be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	370c      	adds	r7, #12
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr

080102ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80102ce:	b480      	push	{r7}
 80102d0:	b083      	sub	sp, #12
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
 80102d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80102de:	605a      	str	r2, [r3, #4]
	return 0;
 80102e0:	2300      	movs	r3, #0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	370c      	adds	r7, #12
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr

080102ee <_isatty>:

int _isatty(int file)
{
 80102ee:	b480      	push	{r7}
 80102f0:	b083      	sub	sp, #12
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
	return 1;
 80102f6:	2301      	movs	r3, #1
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	370c      	adds	r7, #12
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr

08010304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010304:	b480      	push	{r7}
 8010306:	b085      	sub	sp, #20
 8010308:	af00      	add	r7, sp, #0
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	60b9      	str	r1, [r7, #8]
 801030e:	607a      	str	r2, [r7, #4]
	return 0;
 8010310:	2300      	movs	r3, #0
}
 8010312:	4618      	mov	r0, r3
 8010314:	3714      	adds	r7, #20
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr
	...

08010320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b086      	sub	sp, #24
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010328:	4a14      	ldr	r2, [pc, #80]	; (801037c <_sbrk+0x5c>)
 801032a:	4b15      	ldr	r3, [pc, #84]	; (8010380 <_sbrk+0x60>)
 801032c:	1ad3      	subs	r3, r2, r3
 801032e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010334:	4b13      	ldr	r3, [pc, #76]	; (8010384 <_sbrk+0x64>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d102      	bne.n	8010342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801033c:	4b11      	ldr	r3, [pc, #68]	; (8010384 <_sbrk+0x64>)
 801033e:	4a12      	ldr	r2, [pc, #72]	; (8010388 <_sbrk+0x68>)
 8010340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010342:	4b10      	ldr	r3, [pc, #64]	; (8010384 <_sbrk+0x64>)
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4413      	add	r3, r2
 801034a:	693a      	ldr	r2, [r7, #16]
 801034c:	429a      	cmp	r2, r3
 801034e:	d207      	bcs.n	8010360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010350:	f003 feaa 	bl	80140a8 <__errno>
 8010354:	4602      	mov	r2, r0
 8010356:	230c      	movs	r3, #12
 8010358:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 801035a:	f04f 33ff 	mov.w	r3, #4294967295
 801035e:	e009      	b.n	8010374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010360:	4b08      	ldr	r3, [pc, #32]	; (8010384 <_sbrk+0x64>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010366:	4b07      	ldr	r3, [pc, #28]	; (8010384 <_sbrk+0x64>)
 8010368:	681a      	ldr	r2, [r3, #0]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	4413      	add	r3, r2
 801036e:	4a05      	ldr	r2, [pc, #20]	; (8010384 <_sbrk+0x64>)
 8010370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010372:	68fb      	ldr	r3, [r7, #12]
}
 8010374:	4618      	mov	r0, r3
 8010376:	3718      	adds	r7, #24
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	20010000 	.word	0x20010000
 8010380:	00000800 	.word	0x00000800
 8010384:	200006f8 	.word	0x200006f8
 8010388:	200007a0 	.word	0x200007a0

0801038c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 801038c:	b480      	push	{r7}
 801038e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010390:	4b17      	ldr	r3, [pc, #92]	; (80103f0 <SystemInit+0x64>)
 8010392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010396:	4a16      	ldr	r2, [pc, #88]	; (80103f0 <SystemInit+0x64>)
 8010398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801039c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80103a0:	4b14      	ldr	r3, [pc, #80]	; (80103f4 <SystemInit+0x68>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4a13      	ldr	r2, [pc, #76]	; (80103f4 <SystemInit+0x68>)
 80103a6:	f043 0301 	orr.w	r3, r3, #1
 80103aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80103ac:	4b11      	ldr	r3, [pc, #68]	; (80103f4 <SystemInit+0x68>)
 80103ae:	2200      	movs	r2, #0
 80103b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80103b2:	4b10      	ldr	r3, [pc, #64]	; (80103f4 <SystemInit+0x68>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a0f      	ldr	r2, [pc, #60]	; (80103f4 <SystemInit+0x68>)
 80103b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80103bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80103c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80103c2:	4b0c      	ldr	r3, [pc, #48]	; (80103f4 <SystemInit+0x68>)
 80103c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80103c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80103ca:	4b0a      	ldr	r3, [pc, #40]	; (80103f4 <SystemInit+0x68>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4a09      	ldr	r2, [pc, #36]	; (80103f4 <SystemInit+0x68>)
 80103d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80103d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80103d6:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <SystemInit+0x68>)
 80103d8:	2200      	movs	r2, #0
 80103da:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80103dc:	4b04      	ldr	r3, [pc, #16]	; (80103f0 <SystemInit+0x64>)
 80103de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80103e2:	609a      	str	r2, [r3, #8]
#endif
}
 80103e4:	bf00      	nop
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop
 80103f0:	e000ed00 	.word	0xe000ed00
 80103f4:	40021000 	.word	0x40021000

080103f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80103f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010430 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80103fc:	f7ff ffc6 	bl	801038c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8010400:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8010402:	e003      	b.n	801040c <LoopCopyDataInit>

08010404 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8010404:	4b0b      	ldr	r3, [pc, #44]	; (8010434 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8010406:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8010408:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801040a:	3104      	adds	r1, #4

0801040c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801040c:	480a      	ldr	r0, [pc, #40]	; (8010438 <LoopForever+0xa>)
	ldr	r3, =_edata
 801040e:	4b0b      	ldr	r3, [pc, #44]	; (801043c <LoopForever+0xe>)
	adds	r2, r0, r1
 8010410:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8010412:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8010414:	d3f6      	bcc.n	8010404 <CopyDataInit>
	ldr	r2, =_sbss
 8010416:	4a0a      	ldr	r2, [pc, #40]	; (8010440 <LoopForever+0x12>)
	b	LoopFillZerobss
 8010418:	e002      	b.n	8010420 <LoopFillZerobss>

0801041a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801041a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 801041c:	f842 3b04 	str.w	r3, [r2], #4

08010420 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8010420:	4b08      	ldr	r3, [pc, #32]	; (8010444 <LoopForever+0x16>)
	cmp	r2, r3
 8010422:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8010424:	d3f9      	bcc.n	801041a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8010426:	f003 fea7 	bl	8014178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801042a:	f7f6 ff21 	bl	8007270 <main>

0801042e <LoopForever>:

LoopForever:
    b LoopForever
 801042e:	e7fe      	b.n	801042e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8010430:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8010434:	08023548 	.word	0x08023548
	ldr	r0, =_sdata
 8010438:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801043c:	200001fc 	.word	0x200001fc
	ldr	r2, =_sbss
 8010440:	200001fc 	.word	0x200001fc
	ldr	r3, = _ebss
 8010444:	200007a0 	.word	0x200007a0

08010448 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8010448:	e7fe      	b.n	8010448 <ADC1_IRQHandler>

0801044a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b082      	sub	sp, #8
 801044e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8010450:	2300      	movs	r3, #0
 8010452:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010454:	2003      	movs	r0, #3
 8010456:	f000 fff1 	bl	801143c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801045a:	2000      	movs	r0, #0
 801045c:	f000 f80e 	bl	801047c <HAL_InitTick>
 8010460:	4603      	mov	r3, r0
 8010462:	2b00      	cmp	r3, #0
 8010464:	d002      	beq.n	801046c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8010466:	2301      	movs	r3, #1
 8010468:	71fb      	strb	r3, [r7, #7]
 801046a:	e001      	b.n	8010470 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801046c:	f7ff fd5e 	bl	800ff2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8010470:	79fb      	ldrb	r3, [r7, #7]
}
 8010472:	4618      	mov	r0, r3
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
	...

0801047c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b084      	sub	sp, #16
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8010484:	2300      	movs	r3, #0
 8010486:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8010488:	4b17      	ldr	r3, [pc, #92]	; (80104e8 <HAL_InitTick+0x6c>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d023      	beq.n	80104d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8010490:	4b16      	ldr	r3, [pc, #88]	; (80104ec <HAL_InitTick+0x70>)
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	4b14      	ldr	r3, [pc, #80]	; (80104e8 <HAL_InitTick+0x6c>)
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	4619      	mov	r1, r3
 801049a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801049e:	fbb3 f3f1 	udiv	r3, r3, r1
 80104a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80104a6:	4618      	mov	r0, r3
 80104a8:	f000 ffef 	bl	801148a <HAL_SYSTICK_Config>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d10f      	bne.n	80104d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2b0f      	cmp	r3, #15
 80104b6:	d809      	bhi.n	80104cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80104b8:	2200      	movs	r2, #0
 80104ba:	6879      	ldr	r1, [r7, #4]
 80104bc:	f04f 30ff 	mov.w	r0, #4294967295
 80104c0:	f000 ffc7 	bl	8011452 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80104c4:	4a0a      	ldr	r2, [pc, #40]	; (80104f0 <HAL_InitTick+0x74>)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6013      	str	r3, [r2, #0]
 80104ca:	e007      	b.n	80104dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80104cc:	2301      	movs	r3, #1
 80104ce:	73fb      	strb	r3, [r7, #15]
 80104d0:	e004      	b.n	80104dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80104d2:	2301      	movs	r3, #1
 80104d4:	73fb      	strb	r3, [r7, #15]
 80104d6:	e001      	b.n	80104dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80104d8:	2301      	movs	r3, #1
 80104da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80104dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	20000020 	.word	0x20000020
 80104ec:	20000018 	.word	0x20000018
 80104f0:	2000001c 	.word	0x2000001c

080104f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80104f4:	b480      	push	{r7}
 80104f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80104f8:	4b06      	ldr	r3, [pc, #24]	; (8010514 <HAL_IncTick+0x20>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	461a      	mov	r2, r3
 80104fe:	4b06      	ldr	r3, [pc, #24]	; (8010518 <HAL_IncTick+0x24>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	4413      	add	r3, r2
 8010504:	4a04      	ldr	r2, [pc, #16]	; (8010518 <HAL_IncTick+0x24>)
 8010506:	6013      	str	r3, [r2, #0]
}
 8010508:	bf00      	nop
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr
 8010512:	bf00      	nop
 8010514:	20000020 	.word	0x20000020
 8010518:	20000798 	.word	0x20000798

0801051c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801051c:	b480      	push	{r7}
 801051e:	af00      	add	r7, sp, #0
  return uwTick;
 8010520:	4b03      	ldr	r3, [pc, #12]	; (8010530 <HAL_GetTick+0x14>)
 8010522:	681b      	ldr	r3, [r3, #0]
}
 8010524:	4618      	mov	r0, r3
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop
 8010530:	20000798 	.word	0x20000798

08010534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b084      	sub	sp, #16
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801053c:	f7ff ffee 	bl	801051c <HAL_GetTick>
 8010540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f1b3 3fff 	cmp.w	r3, #4294967295
 801054c:	d005      	beq.n	801055a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 801054e:	4b09      	ldr	r3, [pc, #36]	; (8010574 <HAL_Delay+0x40>)
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	4413      	add	r3, r2
 8010558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801055a:	bf00      	nop
 801055c:	f7ff ffde 	bl	801051c <HAL_GetTick>
 8010560:	4602      	mov	r2, r0
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	1ad3      	subs	r3, r2, r3
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	429a      	cmp	r2, r3
 801056a:	d8f7      	bhi.n	801055c <HAL_Delay+0x28>
  {
  }
}
 801056c:	bf00      	nop
 801056e:	3710      	adds	r7, #16
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	20000020 	.word	0x20000020

08010578 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	689b      	ldr	r3, [r3, #8]
 8010586:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	431a      	orrs	r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	609a      	str	r2, [r3, #8]
}
 8010592:	bf00      	nop
 8010594:	370c      	adds	r7, #12
 8010596:	46bd      	mov	sp, r7
 8010598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059c:	4770      	bx	lr

0801059e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801059e:	b480      	push	{r7}
 80105a0:	b083      	sub	sp, #12
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
 80105a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	689b      	ldr	r3, [r3, #8]
 80105ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	431a      	orrs	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	609a      	str	r2, [r3, #8]
}
 80105b8:	bf00      	nop
 80105ba:	370c      	adds	r7, #12
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr

080105c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b087      	sub	sp, #28
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	607a      	str	r2, [r7, #4]
 80105ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	3360      	adds	r3, #96	; 0x60
 80105f2:	461a      	mov	r2, r3
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	4413      	add	r3, r2
 80105fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	4b08      	ldr	r3, [pc, #32]	; (8010624 <LL_ADC_SetOffset+0x44>)
 8010602:	4013      	ands	r3, r2
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 801060a:	683a      	ldr	r2, [r7, #0]
 801060c:	430a      	orrs	r2, r1
 801060e:	4313      	orrs	r3, r2
 8010610:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8010618:	bf00      	nop
 801061a:	371c      	adds	r7, #28
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr
 8010624:	03fff000 	.word	0x03fff000

08010628 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8010628:	b480      	push	{r7}
 801062a:	b085      	sub	sp, #20
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	3360      	adds	r3, #96	; 0x60
 8010636:	461a      	mov	r2, r3
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	4413      	add	r3, r2
 801063e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8010648:	4618      	mov	r0, r3
 801064a:	3714      	adds	r7, #20
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8010654:	b480      	push	{r7}
 8010656:	b087      	sub	sp, #28
 8010658:	af00      	add	r7, sp, #0
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	3360      	adds	r3, #96	; 0x60
 8010664:	461a      	mov	r2, r3
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	4413      	add	r3, r2
 801066c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	431a      	orrs	r2, r3
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 801067e:	bf00      	nop
 8010680:	371c      	adds	r7, #28
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr

0801068a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801068a:	b480      	push	{r7}
 801068c:	b087      	sub	sp, #28
 801068e:	af00      	add	r7, sp, #0
 8010690:	60f8      	str	r0, [r7, #12]
 8010692:	60b9      	str	r1, [r7, #8]
 8010694:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	3330      	adds	r3, #48	; 0x30
 801069a:	461a      	mov	r2, r3
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	0a1b      	lsrs	r3, r3, #8
 80106a0:	009b      	lsls	r3, r3, #2
 80106a2:	f003 030c 	and.w	r3, r3, #12
 80106a6:	4413      	add	r3, r2
 80106a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	f003 031f 	and.w	r3, r3, #31
 80106b4:	211f      	movs	r1, #31
 80106b6:	fa01 f303 	lsl.w	r3, r1, r3
 80106ba:	43db      	mvns	r3, r3
 80106bc:	401a      	ands	r2, r3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	0e9b      	lsrs	r3, r3, #26
 80106c2:	f003 011f 	and.w	r1, r3, #31
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	f003 031f 	and.w	r3, r3, #31
 80106cc:	fa01 f303 	lsl.w	r3, r1, r3
 80106d0:	431a      	orrs	r2, r3
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80106d6:	bf00      	nop
 80106d8:	371c      	adds	r7, #28
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr

080106e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80106e2:	b480      	push	{r7}
 80106e4:	b087      	sub	sp, #28
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	60f8      	str	r0, [r7, #12]
 80106ea:	60b9      	str	r1, [r7, #8]
 80106ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	3314      	adds	r3, #20
 80106f2:	461a      	mov	r2, r3
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	0e5b      	lsrs	r3, r3, #25
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	f003 0304 	and.w	r3, r3, #4
 80106fe:	4413      	add	r3, r2
 8010700:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	681a      	ldr	r2, [r3, #0]
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	0d1b      	lsrs	r3, r3, #20
 801070a:	f003 031f 	and.w	r3, r3, #31
 801070e:	2107      	movs	r1, #7
 8010710:	fa01 f303 	lsl.w	r3, r1, r3
 8010714:	43db      	mvns	r3, r3
 8010716:	401a      	ands	r2, r3
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	0d1b      	lsrs	r3, r3, #20
 801071c:	f003 031f 	and.w	r3, r3, #31
 8010720:	6879      	ldr	r1, [r7, #4]
 8010722:	fa01 f303 	lsl.w	r3, r1, r3
 8010726:	431a      	orrs	r2, r3
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801072c:	bf00      	nop
 801072e:	371c      	adds	r7, #28
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010750:	43db      	mvns	r3, r3
 8010752:	401a      	ands	r2, r3
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f003 0318 	and.w	r3, r3, #24
 801075a:	4908      	ldr	r1, [pc, #32]	; (801077c <LL_ADC_SetChannelSingleDiff+0x44>)
 801075c:	40d9      	lsrs	r1, r3
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	400b      	ands	r3, r1
 8010762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010766:	431a      	orrs	r2, r3
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 801076e:	bf00      	nop
 8010770:	3714      	adds	r7, #20
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	0007ffff 	.word	0x0007ffff

08010780 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8010790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	6093      	str	r3, [r2, #8]
}
 8010798:	bf00      	nop
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr

080107a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	689b      	ldr	r3, [r3, #8]
 80107b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107b8:	d101      	bne.n	80107be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80107ba:	2301      	movs	r3, #1
 80107bc:	e000      	b.n	80107c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80107be:	2300      	movs	r3, #0
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	370c      	adds	r7, #12
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	689b      	ldr	r3, [r3, #8]
 80107d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80107dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80107e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80107e8:	bf00      	nop
 80107ea:	370c      	adds	r7, #12
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr

080107f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b083      	sub	sp, #12
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	689b      	ldr	r3, [r3, #8]
 8010800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010808:	d101      	bne.n	801080e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801080a:	2301      	movs	r3, #1
 801080c:	e000      	b.n	8010810 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801080e:	2300      	movs	r3, #0
}
 8010810:	4618      	mov	r0, r3
 8010812:	370c      	adds	r7, #12
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	689b      	ldr	r3, [r3, #8]
 8010828:	f003 0301 	and.w	r3, r3, #1
 801082c:	2b01      	cmp	r3, #1
 801082e:	d101      	bne.n	8010834 <LL_ADC_IsEnabled+0x18>
 8010830:	2301      	movs	r3, #1
 8010832:	e000      	b.n	8010836 <LL_ADC_IsEnabled+0x1a>
 8010834:	2300      	movs	r3, #0
}
 8010836:	4618      	mov	r0, r3
 8010838:	370c      	adds	r7, #12
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr

08010842 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8010842:	b480      	push	{r7}
 8010844:	b083      	sub	sp, #12
 8010846:	af00      	add	r7, sp, #0
 8010848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	689b      	ldr	r3, [r3, #8]
 801084e:	f003 0304 	and.w	r3, r3, #4
 8010852:	2b04      	cmp	r3, #4
 8010854:	d101      	bne.n	801085a <LL_ADC_REG_IsConversionOngoing+0x18>
 8010856:	2301      	movs	r3, #1
 8010858:	e000      	b.n	801085c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801085a:	2300      	movs	r3, #0
}
 801085c:	4618      	mov	r0, r3
 801085e:	370c      	adds	r7, #12
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr

08010868 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	689b      	ldr	r3, [r3, #8]
 8010874:	f003 0308 	and.w	r3, r3, #8
 8010878:	2b08      	cmp	r3, #8
 801087a:	d101      	bne.n	8010880 <LL_ADC_INJ_IsConversionOngoing+0x18>
 801087c:	2301      	movs	r3, #1
 801087e:	e000      	b.n	8010882 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8010880:	2300      	movs	r3, #0
}
 8010882:	4618      	mov	r0, r3
 8010884:	370c      	adds	r7, #12
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr
	...

08010890 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b088      	sub	sp, #32
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010898:	2300      	movs	r3, #0
 801089a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 801089c:	2300      	movs	r3, #0
 801089e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d101      	bne.n	80108aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80108a6:	2301      	movs	r3, #1
 80108a8:	e12a      	b.n	8010b00 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	691b      	ldr	r3, [r3, #16]
 80108ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d109      	bne.n	80108cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f7ff fb5b 	bl	800ff74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7ff ff67 	bl	80107a4 <LL_ADC_IsDeepPowerDownEnabled>
 80108d6:	4603      	mov	r3, r0
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d004      	beq.n	80108e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ff ff4d 	bl	8010780 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7ff ff82 	bl	80107f4 <LL_ADC_IsInternalRegulatorEnabled>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d113      	bne.n	801091e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7ff ff66 	bl	80107cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8010900:	4b81      	ldr	r3, [pc, #516]	; (8010b08 <HAL_ADC_Init+0x278>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	099b      	lsrs	r3, r3, #6
 8010906:	4a81      	ldr	r2, [pc, #516]	; (8010b0c <HAL_ADC_Init+0x27c>)
 8010908:	fba2 2303 	umull	r2, r3, r2, r3
 801090c:	099b      	lsrs	r3, r3, #6
 801090e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8010910:	e002      	b.n	8010918 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	3b01      	subs	r3, #1
 8010916:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d1f9      	bne.n	8010912 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	4618      	mov	r0, r3
 8010924:	f7ff ff66 	bl	80107f4 <LL_ADC_IsInternalRegulatorEnabled>
 8010928:	4603      	mov	r3, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	d10d      	bne.n	801094a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010932:	f043 0210 	orr.w	r2, r3, #16
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801093e:	f043 0201 	orr.w	r2, r3, #1
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8010946:	2301      	movs	r3, #1
 8010948:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4618      	mov	r0, r3
 8010950:	f7ff ff77 	bl	8010842 <LL_ADC_REG_IsConversionOngoing>
 8010954:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801095a:	f003 0310 	and.w	r3, r3, #16
 801095e:	2b00      	cmp	r3, #0
 8010960:	f040 80c5 	bne.w	8010aee <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	2b00      	cmp	r3, #0
 8010968:	f040 80c1 	bne.w	8010aee <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010970:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8010974:	f043 0202 	orr.w	r2, r3, #2
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	4618      	mov	r0, r3
 8010982:	f7ff ff4b 	bl	801081c <LL_ADC_IsEnabled>
 8010986:	4603      	mov	r3, r0
 8010988:	2b00      	cmp	r3, #0
 801098a:	d10b      	bne.n	80109a4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801098c:	4860      	ldr	r0, [pc, #384]	; (8010b10 <HAL_ADC_Init+0x280>)
 801098e:	f7ff ff45 	bl	801081c <LL_ADC_IsEnabled>
 8010992:	4603      	mov	r3, r0
 8010994:	2b00      	cmp	r3, #0
 8010996:	d105      	bne.n	80109a4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	4619      	mov	r1, r3
 801099e:	485d      	ldr	r0, [pc, #372]	; (8010b14 <HAL_ADC_Init+0x284>)
 80109a0:	f7ff fdea 	bl	8010578 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	7e5b      	ldrb	r3, [r3, #25]
 80109a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80109ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80109b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80109ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80109c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80109c4:	4313      	orrs	r3, r2
 80109c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d106      	bne.n	80109e0 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109d6:	3b01      	subs	r3, #1
 80109d8:	045b      	lsls	r3, r3, #17
 80109da:	69ba      	ldr	r2, [r7, #24]
 80109dc:	4313      	orrs	r3, r2
 80109de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d009      	beq.n	80109fc <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80109f6:	69ba      	ldr	r2, [r7, #24]
 80109f8:	4313      	orrs	r3, r2
 80109fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	68da      	ldr	r2, [r3, #12]
 8010a02:	4b45      	ldr	r3, [pc, #276]	; (8010b18 <HAL_ADC_Init+0x288>)
 8010a04:	4013      	ands	r3, r2
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	6812      	ldr	r2, [r2, #0]
 8010a0a:	69b9      	ldr	r1, [r7, #24]
 8010a0c:	430b      	orrs	r3, r1
 8010a0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7ff ff14 	bl	8010842 <LL_ADC_REG_IsConversionOngoing>
 8010a1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7ff ff21 	bl	8010868 <LL_ADC_INJ_IsConversionOngoing>
 8010a26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d13d      	bne.n	8010aaa <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d13a      	bne.n	8010aaa <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8010a38:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a40:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8010a42:	4313      	orrs	r3, r2
 8010a44:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	68db      	ldr	r3, [r3, #12]
 8010a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a50:	f023 0302 	bic.w	r3, r3, #2
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	6812      	ldr	r2, [r2, #0]
 8010a58:	69b9      	ldr	r1, [r7, #24]
 8010a5a:	430b      	orrs	r3, r1
 8010a5c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d118      	bne.n	8010a9a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	691b      	ldr	r3, [r3, #16]
 8010a6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010a72:	f023 0304 	bic.w	r3, r3, #4
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010a7e:	4311      	orrs	r1, r2
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8010a84:	4311      	orrs	r1, r2
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010a8a:	430a      	orrs	r2, r1
 8010a8c:	431a      	orrs	r2, r3
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f042 0201 	orr.w	r2, r2, #1
 8010a96:	611a      	str	r2, [r3, #16]
 8010a98:	e007      	b.n	8010aaa <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	691a      	ldr	r2, [r3, #16]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f022 0201 	bic.w	r2, r2, #1
 8010aa8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	691b      	ldr	r3, [r3, #16]
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d10c      	bne.n	8010acc <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ab8:	f023 010f 	bic.w	r1, r3, #15
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	69db      	ldr	r3, [r3, #28]
 8010ac0:	1e5a      	subs	r2, r3, #1
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	430a      	orrs	r2, r1
 8010ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8010aca:	e007      	b.n	8010adc <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f022 020f 	bic.w	r2, r2, #15
 8010ada:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ae0:	f023 0303 	bic.w	r3, r3, #3
 8010ae4:	f043 0201 	orr.w	r2, r3, #1
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	655a      	str	r2, [r3, #84]	; 0x54
 8010aec:	e007      	b.n	8010afe <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010af2:	f043 0210 	orr.w	r2, r3, #16
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8010afa:	2301      	movs	r3, #1
 8010afc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8010afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3720      	adds	r7, #32
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	20000018 	.word	0x20000018
 8010b0c:	053e2d63 	.word	0x053e2d63
 8010b10:	50040000 	.word	0x50040000
 8010b14:	50040300 	.word	0x50040300
 8010b18:	fff0c007 	.word	0xfff0c007

08010b1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b0b6      	sub	sp, #216	; 0xd8
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010b26:	2300      	movs	r3, #0
 8010b28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d101      	bne.n	8010b3e <HAL_ADC_ConfigChannel+0x22>
 8010b3a:	2302      	movs	r3, #2
 8010b3c:	e3b8      	b.n	80112b0 <HAL_ADC_ConfigChannel+0x794>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2201      	movs	r2, #1
 8010b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7ff fe79 	bl	8010842 <LL_ADC_REG_IsConversionOngoing>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	f040 839d 	bne.w	8011292 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	685b      	ldr	r3, [r3, #4]
 8010b5c:	2b05      	cmp	r3, #5
 8010b5e:	d824      	bhi.n	8010baa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	3b02      	subs	r3, #2
 8010b66:	2b03      	cmp	r3, #3
 8010b68:	d81b      	bhi.n	8010ba2 <HAL_ADC_ConfigChannel+0x86>
 8010b6a:	a201      	add	r2, pc, #4	; (adr r2, 8010b70 <HAL_ADC_ConfigChannel+0x54>)
 8010b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b70:	08010b81 	.word	0x08010b81
 8010b74:	08010b89 	.word	0x08010b89
 8010b78:	08010b91 	.word	0x08010b91
 8010b7c:	08010b99 	.word	0x08010b99
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	220c      	movs	r2, #12
 8010b84:	605a      	str	r2, [r3, #4]
          break;
 8010b86:	e011      	b.n	8010bac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	2212      	movs	r2, #18
 8010b8c:	605a      	str	r2, [r3, #4]
          break;
 8010b8e:	e00d      	b.n	8010bac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	2218      	movs	r2, #24
 8010b94:	605a      	str	r2, [r3, #4]
          break;
 8010b96:	e009      	b.n	8010bac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b9e:	605a      	str	r2, [r3, #4]
          break;
 8010ba0:	e004      	b.n	8010bac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	2206      	movs	r2, #6
 8010ba6:	605a      	str	r2, [r3, #4]
          break;
 8010ba8:	e000      	b.n	8010bac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8010baa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6818      	ldr	r0, [r3, #0]
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	6859      	ldr	r1, [r3, #4]
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	461a      	mov	r2, r3
 8010bba:	f7ff fd66 	bl	801068a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7ff fe3d 	bl	8010842 <LL_ADC_REG_IsConversionOngoing>
 8010bc8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7ff fe49 	bl	8010868 <LL_ADC_INJ_IsConversionOngoing>
 8010bd6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8010bda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	f040 81a6 	bne.w	8010f30 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8010be4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	f040 81a1 	bne.w	8010f30 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6818      	ldr	r0, [r3, #0]
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	6819      	ldr	r1, [r3, #0]
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	689b      	ldr	r3, [r3, #8]
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	f7ff fd71 	bl	80106e2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	695a      	ldr	r2, [r3, #20]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	08db      	lsrs	r3, r3, #3
 8010c0c:	f003 0303 	and.w	r3, r3, #3
 8010c10:	005b      	lsls	r3, r3, #1
 8010c12:	fa02 f303 	lsl.w	r3, r2, r3
 8010c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	691b      	ldr	r3, [r3, #16]
 8010c1e:	2b04      	cmp	r3, #4
 8010c20:	d00a      	beq.n	8010c38 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6818      	ldr	r0, [r3, #0]
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	6919      	ldr	r1, [r3, #16]
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010c32:	f7ff fcd5 	bl	80105e0 <LL_ADC_SetOffset>
 8010c36:	e17b      	b.n	8010f30 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7ff fcf2 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010c44:	4603      	mov	r3, r0
 8010c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d10a      	bne.n	8010c64 <HAL_ADC_ConfigChannel+0x148>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2100      	movs	r1, #0
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7ff fce7 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	0e9b      	lsrs	r3, r3, #26
 8010c5e:	f003 021f 	and.w	r2, r3, #31
 8010c62:	e01e      	b.n	8010ca2 <HAL_ADC_ConfigChannel+0x186>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2100      	movs	r1, #0
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7ff fcdc 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010c70:	4603      	mov	r3, r0
 8010c72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010c76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010c7a:	fa93 f3a3 	rbit	r3, r3
 8010c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8010c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8010c8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d101      	bne.n	8010c96 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8010c92:	2320      	movs	r3, #32
 8010c94:	e004      	b.n	8010ca0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8010c96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010c9a:	fab3 f383 	clz	r3, r3
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d105      	bne.n	8010cba <HAL_ADC_ConfigChannel+0x19e>
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	0e9b      	lsrs	r3, r3, #26
 8010cb4:	f003 031f 	and.w	r3, r3, #31
 8010cb8:	e018      	b.n	8010cec <HAL_ADC_ConfigChannel+0x1d0>
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010cc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010cc6:	fa93 f3a3 	rbit	r3, r3
 8010cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8010cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8010cd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d101      	bne.n	8010ce2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8010cde:	2320      	movs	r3, #32
 8010ce0:	e004      	b.n	8010cec <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8010ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010ce6:	fab3 f383 	clz	r3, r3
 8010cea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d106      	bne.n	8010cfe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	2100      	movs	r1, #0
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7ff fcab 	bl	8010654 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2101      	movs	r1, #1
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7ff fc8f 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d10a      	bne.n	8010d2a <HAL_ADC_ConfigChannel+0x20e>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	2101      	movs	r1, #1
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7ff fc84 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010d20:	4603      	mov	r3, r0
 8010d22:	0e9b      	lsrs	r3, r3, #26
 8010d24:	f003 021f 	and.w	r2, r3, #31
 8010d28:	e01e      	b.n	8010d68 <HAL_ADC_ConfigChannel+0x24c>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	2101      	movs	r1, #1
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7ff fc79 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010d36:	4603      	mov	r3, r0
 8010d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010d3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010d40:	fa93 f3a3 	rbit	r3, r3
 8010d44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8010d48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8010d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d101      	bne.n	8010d5c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8010d58:	2320      	movs	r3, #32
 8010d5a:	e004      	b.n	8010d66 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8010d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d60:	fab3 f383 	clz	r3, r3
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d105      	bne.n	8010d80 <HAL_ADC_ConfigChannel+0x264>
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	0e9b      	lsrs	r3, r3, #26
 8010d7a:	f003 031f 	and.w	r3, r3, #31
 8010d7e:	e018      	b.n	8010db2 <HAL_ADC_ConfigChannel+0x296>
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d8c:	fa93 f3a3 	rbit	r3, r3
 8010d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8010d94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8010d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d101      	bne.n	8010da8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8010da4:	2320      	movs	r3, #32
 8010da6:	e004      	b.n	8010db2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8010da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010dac:	fab3 f383 	clz	r3, r3
 8010db0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d106      	bne.n	8010dc4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	2101      	movs	r1, #1
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7ff fc48 	bl	8010654 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2102      	movs	r1, #2
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7ff fc2c 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d10a      	bne.n	8010df0 <HAL_ADC_ConfigChannel+0x2d4>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2102      	movs	r1, #2
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7ff fc21 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010de6:	4603      	mov	r3, r0
 8010de8:	0e9b      	lsrs	r3, r3, #26
 8010dea:	f003 021f 	and.w	r2, r3, #31
 8010dee:	e01e      	b.n	8010e2e <HAL_ADC_ConfigChannel+0x312>
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2102      	movs	r1, #2
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7ff fc16 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e06:	fa93 f3a3 	rbit	r3, r3
 8010e0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8010e0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8010e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d101      	bne.n	8010e22 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8010e1e:	2320      	movs	r3, #32
 8010e20:	e004      	b.n	8010e2c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8010e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e26:	fab3 f383 	clz	r3, r3
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d105      	bne.n	8010e46 <HAL_ADC_ConfigChannel+0x32a>
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	0e9b      	lsrs	r3, r3, #26
 8010e40:	f003 031f 	and.w	r3, r3, #31
 8010e44:	e016      	b.n	8010e74 <HAL_ADC_ConfigChannel+0x358>
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010e4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010e52:	fa93 f3a3 	rbit	r3, r3
 8010e56:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8010e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8010e5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d101      	bne.n	8010e6a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8010e66:	2320      	movs	r3, #32
 8010e68:	e004      	b.n	8010e74 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8010e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e6e:	fab3 f383 	clz	r3, r3
 8010e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d106      	bne.n	8010e86 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	2102      	movs	r1, #2
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7ff fbe7 	bl	8010654 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2103      	movs	r1, #3
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7ff fbcb 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010e92:	4603      	mov	r3, r0
 8010e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d10a      	bne.n	8010eb2 <HAL_ADC_ConfigChannel+0x396>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2103      	movs	r1, #3
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7ff fbc0 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	0e9b      	lsrs	r3, r3, #26
 8010eac:	f003 021f 	and.w	r2, r3, #31
 8010eb0:	e017      	b.n	8010ee2 <HAL_ADC_ConfigChannel+0x3c6>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2103      	movs	r1, #3
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7ff fbb5 	bl	8010628 <LL_ADC_GetOffsetChannel>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ec4:	fa93 f3a3 	rbit	r3, r3
 8010ec8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8010eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ecc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8010ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d101      	bne.n	8010ed8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8010ed4:	2320      	movs	r3, #32
 8010ed6:	e003      	b.n	8010ee0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8010ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010eda:	fab3 f383 	clz	r3, r3
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d105      	bne.n	8010efa <HAL_ADC_ConfigChannel+0x3de>
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	0e9b      	lsrs	r3, r3, #26
 8010ef4:	f003 031f 	and.w	r3, r3, #31
 8010ef8:	e011      	b.n	8010f1e <HAL_ADC_ConfigChannel+0x402>
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f02:	fa93 f3a3 	rbit	r3, r3
 8010f06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8010f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8010f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d101      	bne.n	8010f16 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8010f12:	2320      	movs	r3, #32
 8010f14:	e003      	b.n	8010f1e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8010f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f18:	fab3 f383 	clz	r3, r3
 8010f1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d106      	bne.n	8010f30 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2200      	movs	r2, #0
 8010f28:	2103      	movs	r1, #3
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7ff fb92 	bl	8010654 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7ff fc71 	bl	801081c <LL_ADC_IsEnabled>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	f040 813f 	bne.w	80111c0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6818      	ldr	r0, [r3, #0]
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	6819      	ldr	r1, [r3, #0]
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	68db      	ldr	r3, [r3, #12]
 8010f4e:	461a      	mov	r2, r3
 8010f50:	f7ff fbf2 	bl	8010738 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	4a8e      	ldr	r2, [pc, #568]	; (8011194 <HAL_ADC_ConfigChannel+0x678>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	f040 8130 	bne.w	80111c0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d10b      	bne.n	8010f88 <HAL_ADC_ConfigChannel+0x46c>
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	0e9b      	lsrs	r3, r3, #26
 8010f76:	3301      	adds	r3, #1
 8010f78:	f003 031f 	and.w	r3, r3, #31
 8010f7c:	2b09      	cmp	r3, #9
 8010f7e:	bf94      	ite	ls
 8010f80:	2301      	movls	r3, #1
 8010f82:	2300      	movhi	r3, #0
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	e019      	b.n	8010fbc <HAL_ADC_ConfigChannel+0x4a0>
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f90:	fa93 f3a3 	rbit	r3, r3
 8010f94:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8010f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f98:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8010f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d101      	bne.n	8010fa4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8010fa0:	2320      	movs	r3, #32
 8010fa2:	e003      	b.n	8010fac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8010fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010fa6:	fab3 f383 	clz	r3, r3
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	3301      	adds	r3, #1
 8010fae:	f003 031f 	and.w	r3, r3, #31
 8010fb2:	2b09      	cmp	r3, #9
 8010fb4:	bf94      	ite	ls
 8010fb6:	2301      	movls	r3, #1
 8010fb8:	2300      	movhi	r3, #0
 8010fba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d079      	beq.n	80110b4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d107      	bne.n	8010fdc <HAL_ADC_ConfigChannel+0x4c0>
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	0e9b      	lsrs	r3, r3, #26
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	069b      	lsls	r3, r3, #26
 8010fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8010fda:	e015      	b.n	8011008 <HAL_ADC_ConfigChannel+0x4ec>
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fe4:	fa93 f3a3 	rbit	r3, r3
 8010fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8010fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8010fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d101      	bne.n	8010ff8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8010ff4:	2320      	movs	r3, #32
 8010ff6:	e003      	b.n	8011000 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8010ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ffa:	fab3 f383 	clz	r3, r3
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	3301      	adds	r3, #1
 8011002:	069b      	lsls	r3, r3, #26
 8011004:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011010:	2b00      	cmp	r3, #0
 8011012:	d109      	bne.n	8011028 <HAL_ADC_ConfigChannel+0x50c>
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	0e9b      	lsrs	r3, r3, #26
 801101a:	3301      	adds	r3, #1
 801101c:	f003 031f 	and.w	r3, r3, #31
 8011020:	2101      	movs	r1, #1
 8011022:	fa01 f303 	lsl.w	r3, r1, r3
 8011026:	e017      	b.n	8011058 <HAL_ADC_ConfigChannel+0x53c>
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801102e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011030:	fa93 f3a3 	rbit	r3, r3
 8011034:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8011036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011038:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801103a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801103c:	2b00      	cmp	r3, #0
 801103e:	d101      	bne.n	8011044 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8011040:	2320      	movs	r3, #32
 8011042:	e003      	b.n	801104c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8011044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011046:	fab3 f383 	clz	r3, r3
 801104a:	b2db      	uxtb	r3, r3
 801104c:	3301      	adds	r3, #1
 801104e:	f003 031f 	and.w	r3, r3, #31
 8011052:	2101      	movs	r1, #1
 8011054:	fa01 f303 	lsl.w	r3, r1, r3
 8011058:	ea42 0103 	orr.w	r1, r2, r3
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011064:	2b00      	cmp	r3, #0
 8011066:	d10a      	bne.n	801107e <HAL_ADC_ConfigChannel+0x562>
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	0e9b      	lsrs	r3, r3, #26
 801106e:	3301      	adds	r3, #1
 8011070:	f003 021f 	and.w	r2, r3, #31
 8011074:	4613      	mov	r3, r2
 8011076:	005b      	lsls	r3, r3, #1
 8011078:	4413      	add	r3, r2
 801107a:	051b      	lsls	r3, r3, #20
 801107c:	e018      	b.n	80110b0 <HAL_ADC_ConfigChannel+0x594>
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011086:	fa93 f3a3 	rbit	r3, r3
 801108a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801108c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801108e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8011090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011092:	2b00      	cmp	r3, #0
 8011094:	d101      	bne.n	801109a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8011096:	2320      	movs	r3, #32
 8011098:	e003      	b.n	80110a2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 801109a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801109c:	fab3 f383 	clz	r3, r3
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	3301      	adds	r3, #1
 80110a4:	f003 021f 	and.w	r2, r3, #31
 80110a8:	4613      	mov	r3, r2
 80110aa:	005b      	lsls	r3, r3, #1
 80110ac:	4413      	add	r3, r2
 80110ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80110b0:	430b      	orrs	r3, r1
 80110b2:	e080      	b.n	80111b6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d107      	bne.n	80110d0 <HAL_ADC_ConfigChannel+0x5b4>
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	0e9b      	lsrs	r3, r3, #26
 80110c6:	3301      	adds	r3, #1
 80110c8:	069b      	lsls	r3, r3, #26
 80110ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80110ce:	e015      	b.n	80110fc <HAL_ADC_ConfigChannel+0x5e0>
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80110d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d8:	fa93 f3a3 	rbit	r3, r3
 80110dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80110de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80110e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d101      	bne.n	80110ec <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80110e8:	2320      	movs	r3, #32
 80110ea:	e003      	b.n	80110f4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80110ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ee:	fab3 f383 	clz	r3, r3
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	3301      	adds	r3, #1
 80110f6:	069b      	lsls	r3, r3, #26
 80110f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011104:	2b00      	cmp	r3, #0
 8011106:	d109      	bne.n	801111c <HAL_ADC_ConfigChannel+0x600>
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	0e9b      	lsrs	r3, r3, #26
 801110e:	3301      	adds	r3, #1
 8011110:	f003 031f 	and.w	r3, r3, #31
 8011114:	2101      	movs	r1, #1
 8011116:	fa01 f303 	lsl.w	r3, r1, r3
 801111a:	e017      	b.n	801114c <HAL_ADC_ConfigChannel+0x630>
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011122:	6a3b      	ldr	r3, [r7, #32]
 8011124:	fa93 f3a3 	rbit	r3, r3
 8011128:	61fb      	str	r3, [r7, #28]
  return result;
 801112a:	69fb      	ldr	r3, [r7, #28]
 801112c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011130:	2b00      	cmp	r3, #0
 8011132:	d101      	bne.n	8011138 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8011134:	2320      	movs	r3, #32
 8011136:	e003      	b.n	8011140 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8011138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113a:	fab3 f383 	clz	r3, r3
 801113e:	b2db      	uxtb	r3, r3
 8011140:	3301      	adds	r3, #1
 8011142:	f003 031f 	and.w	r3, r3, #31
 8011146:	2101      	movs	r1, #1
 8011148:	fa01 f303 	lsl.w	r3, r1, r3
 801114c:	ea42 0103 	orr.w	r1, r2, r3
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011158:	2b00      	cmp	r3, #0
 801115a:	d10d      	bne.n	8011178 <HAL_ADC_ConfigChannel+0x65c>
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	0e9b      	lsrs	r3, r3, #26
 8011162:	3301      	adds	r3, #1
 8011164:	f003 021f 	and.w	r2, r3, #31
 8011168:	4613      	mov	r3, r2
 801116a:	005b      	lsls	r3, r3, #1
 801116c:	4413      	add	r3, r2
 801116e:	3b1e      	subs	r3, #30
 8011170:	051b      	lsls	r3, r3, #20
 8011172:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011176:	e01d      	b.n	80111b4 <HAL_ADC_ConfigChannel+0x698>
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	fa93 f3a3 	rbit	r3, r3
 8011184:	613b      	str	r3, [r7, #16]
  return result;
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d103      	bne.n	8011198 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8011190:	2320      	movs	r3, #32
 8011192:	e005      	b.n	80111a0 <HAL_ADC_ConfigChannel+0x684>
 8011194:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8011198:	69bb      	ldr	r3, [r7, #24]
 801119a:	fab3 f383 	clz	r3, r3
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	3301      	adds	r3, #1
 80111a2:	f003 021f 	and.w	r2, r3, #31
 80111a6:	4613      	mov	r3, r2
 80111a8:	005b      	lsls	r3, r3, #1
 80111aa:	4413      	add	r3, r2
 80111ac:	3b1e      	subs	r3, #30
 80111ae:	051b      	lsls	r3, r3, #20
 80111b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80111b4:	430b      	orrs	r3, r1
 80111b6:	683a      	ldr	r2, [r7, #0]
 80111b8:	6892      	ldr	r2, [r2, #8]
 80111ba:	4619      	mov	r1, r3
 80111bc:	f7ff fa91 	bl	80106e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	681a      	ldr	r2, [r3, #0]
 80111c4:	4b3c      	ldr	r3, [pc, #240]	; (80112b8 <HAL_ADC_ConfigChannel+0x79c>)
 80111c6:	4013      	ands	r3, r2
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d06b      	beq.n	80112a4 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80111cc:	483b      	ldr	r0, [pc, #236]	; (80112bc <HAL_ADC_ConfigChannel+0x7a0>)
 80111ce:	f7ff f9f9 	bl	80105c4 <LL_ADC_GetCommonPathInternalCh>
 80111d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4a39      	ldr	r2, [pc, #228]	; (80112c0 <HAL_ADC_ConfigChannel+0x7a4>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d126      	bne.n	801122e <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80111e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80111e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d120      	bne.n	801122e <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	4a34      	ldr	r2, [pc, #208]	; (80112c4 <HAL_ADC_ConfigChannel+0x7a8>)
 80111f2:	4293      	cmp	r3, r2
 80111f4:	d156      	bne.n	80112a4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80111f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80111fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80111fe:	4619      	mov	r1, r3
 8011200:	482e      	ldr	r0, [pc, #184]	; (80112bc <HAL_ADC_ConfigChannel+0x7a0>)
 8011202:	f7ff f9cc 	bl	801059e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8011206:	4b30      	ldr	r3, [pc, #192]	; (80112c8 <HAL_ADC_ConfigChannel+0x7ac>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	099b      	lsrs	r3, r3, #6
 801120c:	4a2f      	ldr	r2, [pc, #188]	; (80112cc <HAL_ADC_ConfigChannel+0x7b0>)
 801120e:	fba2 2303 	umull	r2, r3, r2, r3
 8011212:	099a      	lsrs	r2, r3, #6
 8011214:	4613      	mov	r3, r2
 8011216:	005b      	lsls	r3, r3, #1
 8011218:	4413      	add	r3, r2
 801121a:	009b      	lsls	r3, r3, #2
 801121c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801121e:	e002      	b.n	8011226 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	3b01      	subs	r3, #1
 8011224:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1f9      	bne.n	8011220 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801122c:	e03a      	b.n	80112a4 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	4a27      	ldr	r2, [pc, #156]	; (80112d0 <HAL_ADC_ConfigChannel+0x7b4>)
 8011234:	4293      	cmp	r3, r2
 8011236:	d113      	bne.n	8011260 <HAL_ADC_ConfigChannel+0x744>
 8011238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801123c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011240:	2b00      	cmp	r3, #0
 8011242:	d10d      	bne.n	8011260 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4a1e      	ldr	r2, [pc, #120]	; (80112c4 <HAL_ADC_ConfigChannel+0x7a8>)
 801124a:	4293      	cmp	r3, r2
 801124c:	d12a      	bne.n	80112a4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801124e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011256:	4619      	mov	r1, r3
 8011258:	4818      	ldr	r0, [pc, #96]	; (80112bc <HAL_ADC_ConfigChannel+0x7a0>)
 801125a:	f7ff f9a0 	bl	801059e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801125e:	e021      	b.n	80112a4 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4a1b      	ldr	r2, [pc, #108]	; (80112d4 <HAL_ADC_ConfigChannel+0x7b8>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d11c      	bne.n	80112a4 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801126a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011272:	2b00      	cmp	r3, #0
 8011274:	d116      	bne.n	80112a4 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4a12      	ldr	r2, [pc, #72]	; (80112c4 <HAL_ADC_ConfigChannel+0x7a8>)
 801127c:	4293      	cmp	r3, r2
 801127e:	d111      	bne.n	80112a4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011288:	4619      	mov	r1, r3
 801128a:	480c      	ldr	r0, [pc, #48]	; (80112bc <HAL_ADC_ConfigChannel+0x7a0>)
 801128c:	f7ff f987 	bl	801059e <LL_ADC_SetCommonPathInternalCh>
 8011290:	e008      	b.n	80112a4 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011296:	f043 0220 	orr.w	r2, r3, #32
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 801129e:	2301      	movs	r3, #1
 80112a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2200      	movs	r2, #0
 80112a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80112ac:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	37d8      	adds	r7, #216	; 0xd8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	80080000 	.word	0x80080000
 80112bc:	50040300 	.word	0x50040300
 80112c0:	c7520000 	.word	0xc7520000
 80112c4:	50040000 	.word	0x50040000
 80112c8:	20000018 	.word	0x20000018
 80112cc:	053e2d63 	.word	0x053e2d63
 80112d0:	cb840000 	.word	0xcb840000
 80112d4:	80000001 	.word	0x80000001

080112d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80112d8:	b480      	push	{r7}
 80112da:	b085      	sub	sp, #20
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f003 0307 	and.w	r3, r3, #7
 80112e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80112e8:	4b0c      	ldr	r3, [pc, #48]	; (801131c <__NVIC_SetPriorityGrouping+0x44>)
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80112ee:	68ba      	ldr	r2, [r7, #8]
 80112f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80112f4:	4013      	ands	r3, r2
 80112f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801130a:	4a04      	ldr	r2, [pc, #16]	; (801131c <__NVIC_SetPriorityGrouping+0x44>)
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	60d3      	str	r3, [r2, #12]
}
 8011310:	bf00      	nop
 8011312:	3714      	adds	r7, #20
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr
 801131c:	e000ed00 	.word	0xe000ed00

08011320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011320:	b480      	push	{r7}
 8011322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011324:	4b04      	ldr	r3, [pc, #16]	; (8011338 <__NVIC_GetPriorityGrouping+0x18>)
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	0a1b      	lsrs	r3, r3, #8
 801132a:	f003 0307 	and.w	r3, r3, #7
}
 801132e:	4618      	mov	r0, r3
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr
 8011338:	e000ed00 	.word	0xe000ed00

0801133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	4603      	mov	r3, r0
 8011344:	6039      	str	r1, [r7, #0]
 8011346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801134c:	2b00      	cmp	r3, #0
 801134e:	db0a      	blt.n	8011366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	b2da      	uxtb	r2, r3
 8011354:	490c      	ldr	r1, [pc, #48]	; (8011388 <__NVIC_SetPriority+0x4c>)
 8011356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801135a:	0112      	lsls	r2, r2, #4
 801135c:	b2d2      	uxtb	r2, r2
 801135e:	440b      	add	r3, r1
 8011360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011364:	e00a      	b.n	801137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	b2da      	uxtb	r2, r3
 801136a:	4908      	ldr	r1, [pc, #32]	; (801138c <__NVIC_SetPriority+0x50>)
 801136c:	79fb      	ldrb	r3, [r7, #7]
 801136e:	f003 030f 	and.w	r3, r3, #15
 8011372:	3b04      	subs	r3, #4
 8011374:	0112      	lsls	r2, r2, #4
 8011376:	b2d2      	uxtb	r2, r2
 8011378:	440b      	add	r3, r1
 801137a:	761a      	strb	r2, [r3, #24]
}
 801137c:	bf00      	nop
 801137e:	370c      	adds	r7, #12
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr
 8011388:	e000e100 	.word	0xe000e100
 801138c:	e000ed00 	.word	0xe000ed00

08011390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011390:	b480      	push	{r7}
 8011392:	b089      	sub	sp, #36	; 0x24
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	60b9      	str	r1, [r7, #8]
 801139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	f003 0307 	and.w	r3, r3, #7
 80113a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80113a4:	69fb      	ldr	r3, [r7, #28]
 80113a6:	f1c3 0307 	rsb	r3, r3, #7
 80113aa:	2b04      	cmp	r3, #4
 80113ac:	bf28      	it	cs
 80113ae:	2304      	movcs	r3, #4
 80113b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	3304      	adds	r3, #4
 80113b6:	2b06      	cmp	r3, #6
 80113b8:	d902      	bls.n	80113c0 <NVIC_EncodePriority+0x30>
 80113ba:	69fb      	ldr	r3, [r7, #28]
 80113bc:	3b03      	subs	r3, #3
 80113be:	e000      	b.n	80113c2 <NVIC_EncodePriority+0x32>
 80113c0:	2300      	movs	r3, #0
 80113c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80113c4:	f04f 32ff 	mov.w	r2, #4294967295
 80113c8:	69bb      	ldr	r3, [r7, #24]
 80113ca:	fa02 f303 	lsl.w	r3, r2, r3
 80113ce:	43da      	mvns	r2, r3
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	401a      	ands	r2, r3
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80113d8:	f04f 31ff 	mov.w	r1, #4294967295
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	fa01 f303 	lsl.w	r3, r1, r3
 80113e2:	43d9      	mvns	r1, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80113e8:	4313      	orrs	r3, r2
         );
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3724      	adds	r7, #36	; 0x24
 80113ee:	46bd      	mov	sp, r7
 80113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f4:	4770      	bx	lr
	...

080113f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	3b01      	subs	r3, #1
 8011404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011408:	d301      	bcc.n	801140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801140a:	2301      	movs	r3, #1
 801140c:	e00f      	b.n	801142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801140e:	4a0a      	ldr	r2, [pc, #40]	; (8011438 <SysTick_Config+0x40>)
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	3b01      	subs	r3, #1
 8011414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011416:	210f      	movs	r1, #15
 8011418:	f04f 30ff 	mov.w	r0, #4294967295
 801141c:	f7ff ff8e 	bl	801133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011420:	4b05      	ldr	r3, [pc, #20]	; (8011438 <SysTick_Config+0x40>)
 8011422:	2200      	movs	r2, #0
 8011424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011426:	4b04      	ldr	r3, [pc, #16]	; (8011438 <SysTick_Config+0x40>)
 8011428:	2207      	movs	r2, #7
 801142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801142c:	2300      	movs	r3, #0
}
 801142e:	4618      	mov	r0, r3
 8011430:	3708      	adds	r7, #8
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	e000e010 	.word	0xe000e010

0801143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f7ff ff47 	bl	80112d8 <__NVIC_SetPriorityGrouping>
}
 801144a:	bf00      	nop
 801144c:	3708      	adds	r7, #8
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}

08011452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011452:	b580      	push	{r7, lr}
 8011454:	b086      	sub	sp, #24
 8011456:	af00      	add	r7, sp, #0
 8011458:	4603      	mov	r3, r0
 801145a:	60b9      	str	r1, [r7, #8]
 801145c:	607a      	str	r2, [r7, #4]
 801145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8011460:	2300      	movs	r3, #0
 8011462:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011464:	f7ff ff5c 	bl	8011320 <__NVIC_GetPriorityGrouping>
 8011468:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	68b9      	ldr	r1, [r7, #8]
 801146e:	6978      	ldr	r0, [r7, #20]
 8011470:	f7ff ff8e 	bl	8011390 <NVIC_EncodePriority>
 8011474:	4602      	mov	r2, r0
 8011476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801147a:	4611      	mov	r1, r2
 801147c:	4618      	mov	r0, r3
 801147e:	f7ff ff5d 	bl	801133c <__NVIC_SetPriority>
}
 8011482:	bf00      	nop
 8011484:	3718      	adds	r7, #24
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b082      	sub	sp, #8
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f7ff ffb0 	bl	80113f8 <SysTick_Config>
 8011498:	4603      	mov	r3, r0
}
 801149a:	4618      	mov	r0, r3
 801149c:	3708      	adds	r7, #8
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
	...

080114a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d101      	bne.n	80114b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80114b2:	2301      	movs	r3, #1
 80114b4:	e054      	b.n	8011560 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	7f5b      	ldrb	r3, [r3, #29]
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d105      	bne.n	80114cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f7fe fd92 	bl	800fff0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2202      	movs	r2, #2
 80114d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	791b      	ldrb	r3, [r3, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d10c      	bne.n	80114f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	4a22      	ldr	r2, [pc, #136]	; (8011568 <HAL_CRC_Init+0xc4>)
 80114e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	689a      	ldr	r2, [r3, #8]
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f022 0218 	bic.w	r2, r2, #24
 80114f0:	609a      	str	r2, [r3, #8]
 80114f2:	e00c      	b.n	801150e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6899      	ldr	r1, [r3, #8]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	461a      	mov	r2, r3
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 f834 	bl	801156c <HAL_CRCEx_Polynomial_Set>
 8011504:	4603      	mov	r3, r0
 8011506:	2b00      	cmp	r3, #0
 8011508:	d001      	beq.n	801150e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 801150a:	2301      	movs	r3, #1
 801150c:	e028      	b.n	8011560 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	795b      	ldrb	r3, [r3, #5]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d105      	bne.n	8011522 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f04f 32ff 	mov.w	r2, #4294967295
 801151e:	611a      	str	r2, [r3, #16]
 8011520:	e004      	b.n	801152c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	687a      	ldr	r2, [r7, #4]
 8011528:	6912      	ldr	r2, [r2, #16]
 801152a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	689b      	ldr	r3, [r3, #8]
 8011532:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	695a      	ldr	r2, [r3, #20]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	430a      	orrs	r2, r1
 8011540:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	689b      	ldr	r3, [r3, #8]
 8011548:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	699a      	ldr	r2, [r3, #24]
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	430a      	orrs	r2, r1
 8011556:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2201      	movs	r2, #1
 801155c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 801155e:	2300      	movs	r3, #0
}
 8011560:	4618      	mov	r0, r3
 8011562:	3708      	adds	r7, #8
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	04c11db7 	.word	0x04c11db7

0801156c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 801156c:	b480      	push	{r7}
 801156e:	b087      	sub	sp, #28
 8011570:	af00      	add	r7, sp, #0
 8011572:	60f8      	str	r0, [r7, #12]
 8011574:	60b9      	str	r1, [r7, #8]
 8011576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011578:	2300      	movs	r3, #0
 801157a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 801157c:	231f      	movs	r3, #31
 801157e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8011580:	bf00      	nop
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	1e5a      	subs	r2, r3, #1
 8011586:	613a      	str	r2, [r7, #16]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d009      	beq.n	80115a0 <HAL_CRCEx_Polynomial_Set+0x34>
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	f003 031f 	and.w	r3, r3, #31
 8011592:	68ba      	ldr	r2, [r7, #8]
 8011594:	fa22 f303 	lsr.w	r3, r2, r3
 8011598:	f003 0301 	and.w	r3, r3, #1
 801159c:	2b00      	cmp	r3, #0
 801159e:	d0f0      	beq.n	8011582 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2b18      	cmp	r3, #24
 80115a4:	d846      	bhi.n	8011634 <HAL_CRCEx_Polynomial_Set+0xc8>
 80115a6:	a201      	add	r2, pc, #4	; (adr r2, 80115ac <HAL_CRCEx_Polynomial_Set+0x40>)
 80115a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ac:	0801163b 	.word	0x0801163b
 80115b0:	08011635 	.word	0x08011635
 80115b4:	08011635 	.word	0x08011635
 80115b8:	08011635 	.word	0x08011635
 80115bc:	08011635 	.word	0x08011635
 80115c0:	08011635 	.word	0x08011635
 80115c4:	08011635 	.word	0x08011635
 80115c8:	08011635 	.word	0x08011635
 80115cc:	08011629 	.word	0x08011629
 80115d0:	08011635 	.word	0x08011635
 80115d4:	08011635 	.word	0x08011635
 80115d8:	08011635 	.word	0x08011635
 80115dc:	08011635 	.word	0x08011635
 80115e0:	08011635 	.word	0x08011635
 80115e4:	08011635 	.word	0x08011635
 80115e8:	08011635 	.word	0x08011635
 80115ec:	0801161d 	.word	0x0801161d
 80115f0:	08011635 	.word	0x08011635
 80115f4:	08011635 	.word	0x08011635
 80115f8:	08011635 	.word	0x08011635
 80115fc:	08011635 	.word	0x08011635
 8011600:	08011635 	.word	0x08011635
 8011604:	08011635 	.word	0x08011635
 8011608:	08011635 	.word	0x08011635
 801160c:	08011611 	.word	0x08011611
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	2b06      	cmp	r3, #6
 8011614:	d913      	bls.n	801163e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8011616:	2301      	movs	r3, #1
 8011618:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801161a:	e010      	b.n	801163e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	2b07      	cmp	r3, #7
 8011620:	d90f      	bls.n	8011642 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8011622:	2301      	movs	r3, #1
 8011624:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8011626:	e00c      	b.n	8011642 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	2b0f      	cmp	r3, #15
 801162c:	d90b      	bls.n	8011646 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 801162e:	2301      	movs	r3, #1
 8011630:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8011632:	e008      	b.n	8011646 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8011634:	2301      	movs	r3, #1
 8011636:	75fb      	strb	r3, [r7, #23]
      break;
 8011638:	e006      	b.n	8011648 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801163a:	bf00      	nop
 801163c:	e004      	b.n	8011648 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801163e:	bf00      	nop
 8011640:	e002      	b.n	8011648 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8011642:	bf00      	nop
 8011644:	e000      	b.n	8011648 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8011646:	bf00      	nop
  }
  if (status == HAL_OK)
 8011648:	7dfb      	ldrb	r3, [r7, #23]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d10d      	bne.n	801166a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	68ba      	ldr	r2, [r7, #8]
 8011654:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	689b      	ldr	r3, [r3, #8]
 801165c:	f023 0118 	bic.w	r1, r3, #24
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	687a      	ldr	r2, [r7, #4]
 8011666:	430a      	orrs	r2, r1
 8011668:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 801166a:	7dfb      	ldrb	r3, [r7, #23]
}
 801166c:	4618      	mov	r0, r3
 801166e:	371c      	adds	r7, #28
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr

08011678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011678:	b480      	push	{r7}
 801167a:	b087      	sub	sp, #28
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
 8011680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8011682:	2300      	movs	r3, #0
 8011684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8011686:	e148      	b.n	801191a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	2101      	movs	r1, #1
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	fa01 f303 	lsl.w	r3, r1, r3
 8011694:	4013      	ands	r3, r2
 8011696:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2b00      	cmp	r3, #0
 801169c:	f000 813a 	beq.w	8011914 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	2b01      	cmp	r3, #1
 80116a6:	d00b      	beq.n	80116c0 <HAL_GPIO_Init+0x48>
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	2b02      	cmp	r3, #2
 80116ae:	d007      	beq.n	80116c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80116b4:	2b11      	cmp	r3, #17
 80116b6:	d003      	beq.n	80116c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	2b12      	cmp	r3, #18
 80116be:	d130      	bne.n	8011722 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	689b      	ldr	r3, [r3, #8]
 80116c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	005b      	lsls	r3, r3, #1
 80116ca:	2203      	movs	r2, #3
 80116cc:	fa02 f303 	lsl.w	r3, r2, r3
 80116d0:	43db      	mvns	r3, r3
 80116d2:	693a      	ldr	r2, [r7, #16]
 80116d4:	4013      	ands	r3, r2
 80116d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	68da      	ldr	r2, [r3, #12]
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	005b      	lsls	r3, r3, #1
 80116e0:	fa02 f303 	lsl.w	r3, r2, r3
 80116e4:	693a      	ldr	r2, [r7, #16]
 80116e6:	4313      	orrs	r3, r2
 80116e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	693a      	ldr	r2, [r7, #16]
 80116ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80116f6:	2201      	movs	r2, #1
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	fa02 f303 	lsl.w	r3, r2, r3
 80116fe:	43db      	mvns	r3, r3
 8011700:	693a      	ldr	r2, [r7, #16]
 8011702:	4013      	ands	r3, r2
 8011704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	091b      	lsrs	r3, r3, #4
 801170c:	f003 0201 	and.w	r2, r3, #1
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	fa02 f303 	lsl.w	r3, r2, r3
 8011716:	693a      	ldr	r2, [r7, #16]
 8011718:	4313      	orrs	r3, r2
 801171a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	693a      	ldr	r2, [r7, #16]
 8011720:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	005b      	lsls	r3, r3, #1
 801172c:	2203      	movs	r2, #3
 801172e:	fa02 f303 	lsl.w	r3, r2, r3
 8011732:	43db      	mvns	r3, r3
 8011734:	693a      	ldr	r2, [r7, #16]
 8011736:	4013      	ands	r3, r2
 8011738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	689a      	ldr	r2, [r3, #8]
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	005b      	lsls	r3, r3, #1
 8011742:	fa02 f303 	lsl.w	r3, r2, r3
 8011746:	693a      	ldr	r2, [r7, #16]
 8011748:	4313      	orrs	r3, r2
 801174a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	693a      	ldr	r2, [r7, #16]
 8011750:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	2b02      	cmp	r3, #2
 8011758:	d003      	beq.n	8011762 <HAL_GPIO_Init+0xea>
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	2b12      	cmp	r3, #18
 8011760:	d123      	bne.n	80117aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	08da      	lsrs	r2, r3, #3
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	3208      	adds	r2, #8
 801176a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801176e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	f003 0307 	and.w	r3, r3, #7
 8011776:	009b      	lsls	r3, r3, #2
 8011778:	220f      	movs	r2, #15
 801177a:	fa02 f303 	lsl.w	r3, r2, r3
 801177e:	43db      	mvns	r3, r3
 8011780:	693a      	ldr	r2, [r7, #16]
 8011782:	4013      	ands	r3, r2
 8011784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	691a      	ldr	r2, [r3, #16]
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	f003 0307 	and.w	r3, r3, #7
 8011790:	009b      	lsls	r3, r3, #2
 8011792:	fa02 f303 	lsl.w	r3, r2, r3
 8011796:	693a      	ldr	r2, [r7, #16]
 8011798:	4313      	orrs	r3, r2
 801179a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	08da      	lsrs	r2, r3, #3
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3208      	adds	r2, #8
 80117a4:	6939      	ldr	r1, [r7, #16]
 80117a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	005b      	lsls	r3, r3, #1
 80117b4:	2203      	movs	r2, #3
 80117b6:	fa02 f303 	lsl.w	r3, r2, r3
 80117ba:	43db      	mvns	r3, r3
 80117bc:	693a      	ldr	r2, [r7, #16]
 80117be:	4013      	ands	r3, r2
 80117c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	f003 0203 	and.w	r2, r3, #3
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	005b      	lsls	r3, r3, #1
 80117ce:	fa02 f303 	lsl.w	r3, r2, r3
 80117d2:	693a      	ldr	r2, [r7, #16]
 80117d4:	4313      	orrs	r3, r2
 80117d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	693a      	ldr	r2, [r7, #16]
 80117dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f000 8094 	beq.w	8011914 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80117ec:	4b52      	ldr	r3, [pc, #328]	; (8011938 <HAL_GPIO_Init+0x2c0>)
 80117ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80117f0:	4a51      	ldr	r2, [pc, #324]	; (8011938 <HAL_GPIO_Init+0x2c0>)
 80117f2:	f043 0301 	orr.w	r3, r3, #1
 80117f6:	6613      	str	r3, [r2, #96]	; 0x60
 80117f8:	4b4f      	ldr	r3, [pc, #316]	; (8011938 <HAL_GPIO_Init+0x2c0>)
 80117fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80117fc:	f003 0301 	and.w	r3, r3, #1
 8011800:	60bb      	str	r3, [r7, #8]
 8011802:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8011804:	4a4d      	ldr	r2, [pc, #308]	; (801193c <HAL_GPIO_Init+0x2c4>)
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	089b      	lsrs	r3, r3, #2
 801180a:	3302      	adds	r3, #2
 801180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011810:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	f003 0303 	and.w	r3, r3, #3
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	220f      	movs	r2, #15
 801181c:	fa02 f303 	lsl.w	r3, r2, r3
 8011820:	43db      	mvns	r3, r3
 8011822:	693a      	ldr	r2, [r7, #16]
 8011824:	4013      	ands	r3, r2
 8011826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801182e:	d00d      	beq.n	801184c <HAL_GPIO_Init+0x1d4>
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	4a43      	ldr	r2, [pc, #268]	; (8011940 <HAL_GPIO_Init+0x2c8>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d007      	beq.n	8011848 <HAL_GPIO_Init+0x1d0>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	4a42      	ldr	r2, [pc, #264]	; (8011944 <HAL_GPIO_Init+0x2cc>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d101      	bne.n	8011844 <HAL_GPIO_Init+0x1cc>
 8011840:	2302      	movs	r3, #2
 8011842:	e004      	b.n	801184e <HAL_GPIO_Init+0x1d6>
 8011844:	2307      	movs	r3, #7
 8011846:	e002      	b.n	801184e <HAL_GPIO_Init+0x1d6>
 8011848:	2301      	movs	r3, #1
 801184a:	e000      	b.n	801184e <HAL_GPIO_Init+0x1d6>
 801184c:	2300      	movs	r3, #0
 801184e:	697a      	ldr	r2, [r7, #20]
 8011850:	f002 0203 	and.w	r2, r2, #3
 8011854:	0092      	lsls	r2, r2, #2
 8011856:	4093      	lsls	r3, r2
 8011858:	693a      	ldr	r2, [r7, #16]
 801185a:	4313      	orrs	r3, r2
 801185c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801185e:	4937      	ldr	r1, [pc, #220]	; (801193c <HAL_GPIO_Init+0x2c4>)
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	089b      	lsrs	r3, r3, #2
 8011864:	3302      	adds	r3, #2
 8011866:	693a      	ldr	r2, [r7, #16]
 8011868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801186c:	4b36      	ldr	r3, [pc, #216]	; (8011948 <HAL_GPIO_Init+0x2d0>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	43db      	mvns	r3, r3
 8011876:	693a      	ldr	r2, [r7, #16]
 8011878:	4013      	ands	r3, r2
 801187a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011884:	2b00      	cmp	r3, #0
 8011886:	d003      	beq.n	8011890 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8011888:	693a      	ldr	r2, [r7, #16]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	4313      	orrs	r3, r2
 801188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8011890:	4a2d      	ldr	r2, [pc, #180]	; (8011948 <HAL_GPIO_Init+0x2d0>)
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8011896:	4b2c      	ldr	r3, [pc, #176]	; (8011948 <HAL_GPIO_Init+0x2d0>)
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	43db      	mvns	r3, r3
 80118a0:	693a      	ldr	r2, [r7, #16]
 80118a2:	4013      	ands	r3, r2
 80118a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d003      	beq.n	80118ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80118b2:	693a      	ldr	r2, [r7, #16]
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	4313      	orrs	r3, r2
 80118b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80118ba:	4a23      	ldr	r2, [pc, #140]	; (8011948 <HAL_GPIO_Init+0x2d0>)
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80118c0:	4b21      	ldr	r3, [pc, #132]	; (8011948 <HAL_GPIO_Init+0x2d0>)
 80118c2:	689b      	ldr	r3, [r3, #8]
 80118c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	43db      	mvns	r3, r3
 80118ca:	693a      	ldr	r2, [r7, #16]
 80118cc:	4013      	ands	r3, r2
 80118ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d003      	beq.n	80118e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80118dc:	693a      	ldr	r2, [r7, #16]
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	4313      	orrs	r3, r2
 80118e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80118e4:	4a18      	ldr	r2, [pc, #96]	; (8011948 <HAL_GPIO_Init+0x2d0>)
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80118ea:	4b17      	ldr	r3, [pc, #92]	; (8011948 <HAL_GPIO_Init+0x2d0>)
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	43db      	mvns	r3, r3
 80118f4:	693a      	ldr	r2, [r7, #16]
 80118f6:	4013      	ands	r3, r2
 80118f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011902:	2b00      	cmp	r3, #0
 8011904:	d003      	beq.n	801190e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8011906:	693a      	ldr	r2, [r7, #16]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	4313      	orrs	r3, r2
 801190c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801190e:	4a0e      	ldr	r2, [pc, #56]	; (8011948 <HAL_GPIO_Init+0x2d0>)
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	3301      	adds	r3, #1
 8011918:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	681a      	ldr	r2, [r3, #0]
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	fa22 f303 	lsr.w	r3, r2, r3
 8011924:	2b00      	cmp	r3, #0
 8011926:	f47f aeaf 	bne.w	8011688 <HAL_GPIO_Init+0x10>
  }
}
 801192a:	bf00      	nop
 801192c:	371c      	adds	r7, #28
 801192e:	46bd      	mov	sp, r7
 8011930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011934:	4770      	bx	lr
 8011936:	bf00      	nop
 8011938:	40021000 	.word	0x40021000
 801193c:	40010000 	.word	0x40010000
 8011940:	48000400 	.word	0x48000400
 8011944:	48000800 	.word	0x48000800
 8011948:	40010400 	.word	0x40010400

0801194c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801194c:	b480      	push	{r7}
 801194e:	b085      	sub	sp, #20
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	460b      	mov	r3, r1
 8011956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	691a      	ldr	r2, [r3, #16]
 801195c:	887b      	ldrh	r3, [r7, #2]
 801195e:	4013      	ands	r3, r2
 8011960:	2b00      	cmp	r3, #0
 8011962:	d002      	beq.n	801196a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011964:	2301      	movs	r3, #1
 8011966:	73fb      	strb	r3, [r7, #15]
 8011968:	e001      	b.n	801196e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801196a:	2300      	movs	r3, #0
 801196c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011970:	4618      	mov	r0, r3
 8011972:	3714      	adds	r7, #20
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801197c:	b480      	push	{r7}
 801197e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011980:	4b05      	ldr	r3, [pc, #20]	; (8011998 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	4a04      	ldr	r2, [pc, #16]	; (8011998 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8011986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801198a:	6013      	str	r3, [r2, #0]
}
 801198c:	bf00      	nop
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr
 8011996:	bf00      	nop
 8011998:	40007000 	.word	0x40007000

0801199c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801199c:	b480      	push	{r7}
 801199e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80119a0:	4b04      	ldr	r3, [pc, #16]	; (80119b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80119a8:	4618      	mov	r0, r3
 80119aa:	46bd      	mov	sp, r7
 80119ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b0:	4770      	bx	lr
 80119b2:	bf00      	nop
 80119b4:	40007000 	.word	0x40007000

080119b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80119b8:	b480      	push	{r7}
 80119ba:	b085      	sub	sp, #20
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119c6:	d130      	bne.n	8011a2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80119c8:	4b23      	ldr	r3, [pc, #140]	; (8011a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80119d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119d4:	d038      	beq.n	8011a48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80119d6:	4b20      	ldr	r3, [pc, #128]	; (8011a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80119de:	4a1e      	ldr	r2, [pc, #120]	; (8011a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80119e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80119e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80119e6:	4b1d      	ldr	r3, [pc, #116]	; (8011a5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	2232      	movs	r2, #50	; 0x32
 80119ec:	fb02 f303 	mul.w	r3, r2, r3
 80119f0:	4a1b      	ldr	r2, [pc, #108]	; (8011a60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80119f2:	fba2 2303 	umull	r2, r3, r2, r3
 80119f6:	0c9b      	lsrs	r3, r3, #18
 80119f8:	3301      	adds	r3, #1
 80119fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80119fc:	e002      	b.n	8011a04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	3b01      	subs	r3, #1
 8011a02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8011a04:	4b14      	ldr	r3, [pc, #80]	; (8011a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011a06:	695b      	ldr	r3, [r3, #20]
 8011a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a10:	d102      	bne.n	8011a18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d1f2      	bne.n	80119fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8011a18:	4b0f      	ldr	r3, [pc, #60]	; (8011a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011a1a:	695b      	ldr	r3, [r3, #20]
 8011a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a24:	d110      	bne.n	8011a48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8011a26:	2303      	movs	r3, #3
 8011a28:	e00f      	b.n	8011a4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8011a2a:	4b0b      	ldr	r3, [pc, #44]	; (8011a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a36:	d007      	beq.n	8011a48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8011a38:	4b07      	ldr	r3, [pc, #28]	; (8011a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8011a40:	4a05      	ldr	r2, [pc, #20]	; (8011a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011a46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8011a48:	2300      	movs	r3, #0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3714      	adds	r7, #20
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop
 8011a58:	40007000 	.word	0x40007000
 8011a5c:	20000018 	.word	0x20000018
 8011a60:	431bde83 	.word	0x431bde83

08011a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b088      	sub	sp, #32
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d102      	bne.n	8011a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011a72:	2301      	movs	r3, #1
 8011a74:	f000 bc11 	b.w	801229a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011a78:	4ba0      	ldr	r3, [pc, #640]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011a7a:	689b      	ldr	r3, [r3, #8]
 8011a7c:	f003 030c 	and.w	r3, r3, #12
 8011a80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011a82:	4b9e      	ldr	r3, [pc, #632]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011a84:	68db      	ldr	r3, [r3, #12]
 8011a86:	f003 0303 	and.w	r3, r3, #3
 8011a8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	f003 0310 	and.w	r3, r3, #16
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	f000 80e4 	beq.w	8011c62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8011a9a:	69bb      	ldr	r3, [r7, #24]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d007      	beq.n	8011ab0 <HAL_RCC_OscConfig+0x4c>
 8011aa0:	69bb      	ldr	r3, [r7, #24]
 8011aa2:	2b0c      	cmp	r3, #12
 8011aa4:	f040 808b 	bne.w	8011bbe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	f040 8087 	bne.w	8011bbe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8011ab0:	4b92      	ldr	r3, [pc, #584]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	f003 0302 	and.w	r3, r3, #2
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d005      	beq.n	8011ac8 <HAL_RCC_OscConfig+0x64>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	699b      	ldr	r3, [r3, #24]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d101      	bne.n	8011ac8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	e3e8      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6a1a      	ldr	r2, [r3, #32]
 8011acc:	4b8b      	ldr	r3, [pc, #556]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	f003 0308 	and.w	r3, r3, #8
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d004      	beq.n	8011ae2 <HAL_RCC_OscConfig+0x7e>
 8011ad8:	4b88      	ldr	r3, [pc, #544]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ae0:	e005      	b.n	8011aee <HAL_RCC_OscConfig+0x8a>
 8011ae2:	4b86      	ldr	r3, [pc, #536]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011ae8:	091b      	lsrs	r3, r3, #4
 8011aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d223      	bcs.n	8011b3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6a1b      	ldr	r3, [r3, #32]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f000 fd78 	bl	80125ec <RCC_SetFlashLatencyFromMSIRange>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d001      	beq.n	8011b06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8011b02:	2301      	movs	r3, #1
 8011b04:	e3c9      	b.n	801229a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011b06:	4b7d      	ldr	r3, [pc, #500]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	4a7c      	ldr	r2, [pc, #496]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b0c:	f043 0308 	orr.w	r3, r3, #8
 8011b10:	6013      	str	r3, [r2, #0]
 8011b12:	4b7a      	ldr	r3, [pc, #488]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6a1b      	ldr	r3, [r3, #32]
 8011b1e:	4977      	ldr	r1, [pc, #476]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b20:	4313      	orrs	r3, r2
 8011b22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011b24:	4b75      	ldr	r3, [pc, #468]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	69db      	ldr	r3, [r3, #28]
 8011b30:	021b      	lsls	r3, r3, #8
 8011b32:	4972      	ldr	r1, [pc, #456]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b34:	4313      	orrs	r3, r2
 8011b36:	604b      	str	r3, [r1, #4]
 8011b38:	e025      	b.n	8011b86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011b3a:	4b70      	ldr	r3, [pc, #448]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4a6f      	ldr	r2, [pc, #444]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b40:	f043 0308 	orr.w	r3, r3, #8
 8011b44:	6013      	str	r3, [r2, #0]
 8011b46:	4b6d      	ldr	r3, [pc, #436]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6a1b      	ldr	r3, [r3, #32]
 8011b52:	496a      	ldr	r1, [pc, #424]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b54:	4313      	orrs	r3, r2
 8011b56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011b58:	4b68      	ldr	r3, [pc, #416]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	69db      	ldr	r3, [r3, #28]
 8011b64:	021b      	lsls	r3, r3, #8
 8011b66:	4965      	ldr	r1, [pc, #404]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d109      	bne.n	8011b86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	6a1b      	ldr	r3, [r3, #32]
 8011b76:	4618      	mov	r0, r3
 8011b78:	f000 fd38 	bl	80125ec <RCC_SetFlashLatencyFromMSIRange>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d001      	beq.n	8011b86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8011b82:	2301      	movs	r3, #1
 8011b84:	e389      	b.n	801229a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8011b86:	f000 fc6f 	bl	8012468 <HAL_RCC_GetSysClockFreq>
 8011b8a:	4601      	mov	r1, r0
 8011b8c:	4b5b      	ldr	r3, [pc, #364]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	091b      	lsrs	r3, r3, #4
 8011b92:	f003 030f 	and.w	r3, r3, #15
 8011b96:	4a5a      	ldr	r2, [pc, #360]	; (8011d00 <HAL_RCC_OscConfig+0x29c>)
 8011b98:	5cd3      	ldrb	r3, [r2, r3]
 8011b9a:	f003 031f 	and.w	r3, r3, #31
 8011b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8011ba2:	4a58      	ldr	r2, [pc, #352]	; (8011d04 <HAL_RCC_OscConfig+0x2a0>)
 8011ba4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8011ba6:	4b58      	ldr	r3, [pc, #352]	; (8011d08 <HAL_RCC_OscConfig+0x2a4>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fe fc66 	bl	801047c <HAL_InitTick>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8011bb4:	7bfb      	ldrb	r3, [r7, #15]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d052      	beq.n	8011c60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8011bba:	7bfb      	ldrb	r3, [r7, #15]
 8011bbc:	e36d      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	699b      	ldr	r3, [r3, #24]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d032      	beq.n	8011c2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8011bc6:	4b4d      	ldr	r3, [pc, #308]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4a4c      	ldr	r2, [pc, #304]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011bcc:	f043 0301 	orr.w	r3, r3, #1
 8011bd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011bd2:	f7fe fca3 	bl	801051c <HAL_GetTick>
 8011bd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011bd8:	e008      	b.n	8011bec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011bda:	f7fe fc9f 	bl	801051c <HAL_GetTick>
 8011bde:	4602      	mov	r2, r0
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	1ad3      	subs	r3, r2, r3
 8011be4:	2b02      	cmp	r3, #2
 8011be6:	d901      	bls.n	8011bec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8011be8:	2303      	movs	r3, #3
 8011bea:	e356      	b.n	801229a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011bec:	4b43      	ldr	r3, [pc, #268]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	f003 0302 	and.w	r3, r3, #2
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d0f0      	beq.n	8011bda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011bf8:	4b40      	ldr	r3, [pc, #256]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4a3f      	ldr	r2, [pc, #252]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011bfe:	f043 0308 	orr.w	r3, r3, #8
 8011c02:	6013      	str	r3, [r2, #0]
 8011c04:	4b3d      	ldr	r3, [pc, #244]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6a1b      	ldr	r3, [r3, #32]
 8011c10:	493a      	ldr	r1, [pc, #232]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011c12:	4313      	orrs	r3, r2
 8011c14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011c16:	4b39      	ldr	r3, [pc, #228]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	69db      	ldr	r3, [r3, #28]
 8011c22:	021b      	lsls	r3, r3, #8
 8011c24:	4935      	ldr	r1, [pc, #212]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011c26:	4313      	orrs	r3, r2
 8011c28:	604b      	str	r3, [r1, #4]
 8011c2a:	e01a      	b.n	8011c62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8011c2c:	4b33      	ldr	r3, [pc, #204]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4a32      	ldr	r2, [pc, #200]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011c32:	f023 0301 	bic.w	r3, r3, #1
 8011c36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011c38:	f7fe fc70 	bl	801051c <HAL_GetTick>
 8011c3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8011c3e:	e008      	b.n	8011c52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011c40:	f7fe fc6c 	bl	801051c <HAL_GetTick>
 8011c44:	4602      	mov	r2, r0
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	1ad3      	subs	r3, r2, r3
 8011c4a:	2b02      	cmp	r3, #2
 8011c4c:	d901      	bls.n	8011c52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8011c4e:	2303      	movs	r3, #3
 8011c50:	e323      	b.n	801229a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8011c52:	4b2a      	ldr	r3, [pc, #168]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	f003 0302 	and.w	r3, r3, #2
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d1f0      	bne.n	8011c40 <HAL_RCC_OscConfig+0x1dc>
 8011c5e:	e000      	b.n	8011c62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8011c60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f003 0301 	and.w	r3, r3, #1
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d073      	beq.n	8011d56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	2b08      	cmp	r3, #8
 8011c72:	d005      	beq.n	8011c80 <HAL_RCC_OscConfig+0x21c>
 8011c74:	69bb      	ldr	r3, [r7, #24]
 8011c76:	2b0c      	cmp	r3, #12
 8011c78:	d10e      	bne.n	8011c98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	2b03      	cmp	r3, #3
 8011c7e:	d10b      	bne.n	8011c98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011c80:	4b1e      	ldr	r3, [pc, #120]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d063      	beq.n	8011d54 <HAL_RCC_OscConfig+0x2f0>
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d15f      	bne.n	8011d54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8011c94:	2301      	movs	r3, #1
 8011c96:	e300      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ca0:	d106      	bne.n	8011cb0 <HAL_RCC_OscConfig+0x24c>
 8011ca2:	4b16      	ldr	r3, [pc, #88]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	4a15      	ldr	r2, [pc, #84]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cac:	6013      	str	r3, [r2, #0]
 8011cae:	e01d      	b.n	8011cec <HAL_RCC_OscConfig+0x288>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011cb8:	d10c      	bne.n	8011cd4 <HAL_RCC_OscConfig+0x270>
 8011cba:	4b10      	ldr	r3, [pc, #64]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	4a0f      	ldr	r2, [pc, #60]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011cc4:	6013      	str	r3, [r2, #0]
 8011cc6:	4b0d      	ldr	r3, [pc, #52]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	4a0c      	ldr	r2, [pc, #48]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cd0:	6013      	str	r3, [r2, #0]
 8011cd2:	e00b      	b.n	8011cec <HAL_RCC_OscConfig+0x288>
 8011cd4:	4b09      	ldr	r3, [pc, #36]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	4a08      	ldr	r2, [pc, #32]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011cde:	6013      	str	r3, [r2, #0]
 8011ce0:	4b06      	ldr	r3, [pc, #24]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	4a05      	ldr	r2, [pc, #20]	; (8011cfc <HAL_RCC_OscConfig+0x298>)
 8011ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d01b      	beq.n	8011d2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011cf4:	f7fe fc12 	bl	801051c <HAL_GetTick>
 8011cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011cfa:	e010      	b.n	8011d1e <HAL_RCC_OscConfig+0x2ba>
 8011cfc:	40021000 	.word	0x40021000
 8011d00:	08021330 	.word	0x08021330
 8011d04:	20000018 	.word	0x20000018
 8011d08:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011d0c:	f7fe fc06 	bl	801051c <HAL_GetTick>
 8011d10:	4602      	mov	r2, r0
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	1ad3      	subs	r3, r2, r3
 8011d16:	2b64      	cmp	r3, #100	; 0x64
 8011d18:	d901      	bls.n	8011d1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8011d1a:	2303      	movs	r3, #3
 8011d1c:	e2bd      	b.n	801229a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011d1e:	4baf      	ldr	r3, [pc, #700]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d0f0      	beq.n	8011d0c <HAL_RCC_OscConfig+0x2a8>
 8011d2a:	e014      	b.n	8011d56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d2c:	f7fe fbf6 	bl	801051c <HAL_GetTick>
 8011d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011d32:	e008      	b.n	8011d46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011d34:	f7fe fbf2 	bl	801051c <HAL_GetTick>
 8011d38:	4602      	mov	r2, r0
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	1ad3      	subs	r3, r2, r3
 8011d3e:	2b64      	cmp	r3, #100	; 0x64
 8011d40:	d901      	bls.n	8011d46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8011d42:	2303      	movs	r3, #3
 8011d44:	e2a9      	b.n	801229a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011d46:	4ba5      	ldr	r3, [pc, #660]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d1f0      	bne.n	8011d34 <HAL_RCC_OscConfig+0x2d0>
 8011d52:	e000      	b.n	8011d56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	f003 0302 	and.w	r3, r3, #2
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d060      	beq.n	8011e24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	2b04      	cmp	r3, #4
 8011d66:	d005      	beq.n	8011d74 <HAL_RCC_OscConfig+0x310>
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	2b0c      	cmp	r3, #12
 8011d6c:	d119      	bne.n	8011da2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	2b02      	cmp	r3, #2
 8011d72:	d116      	bne.n	8011da2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011d74:	4b99      	ldr	r3, [pc, #612]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d005      	beq.n	8011d8c <HAL_RCC_OscConfig+0x328>
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d101      	bne.n	8011d8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8011d88:	2301      	movs	r3, #1
 8011d8a:	e286      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d8c:	4b93      	ldr	r3, [pc, #588]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	691b      	ldr	r3, [r3, #16]
 8011d98:	061b      	lsls	r3, r3, #24
 8011d9a:	4990      	ldr	r1, [pc, #576]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011da0:	e040      	b.n	8011e24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d023      	beq.n	8011df2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011daa:	4b8c      	ldr	r3, [pc, #560]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4a8b      	ldr	r2, [pc, #556]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011db6:	f7fe fbb1 	bl	801051c <HAL_GetTick>
 8011dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011dbc:	e008      	b.n	8011dd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011dbe:	f7fe fbad 	bl	801051c <HAL_GetTick>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	1ad3      	subs	r3, r2, r3
 8011dc8:	2b02      	cmp	r3, #2
 8011dca:	d901      	bls.n	8011dd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8011dcc:	2303      	movs	r3, #3
 8011dce:	e264      	b.n	801229a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011dd0:	4b82      	ldr	r3, [pc, #520]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d0f0      	beq.n	8011dbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011ddc:	4b7f      	ldr	r3, [pc, #508]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	691b      	ldr	r3, [r3, #16]
 8011de8:	061b      	lsls	r3, r3, #24
 8011dea:	497c      	ldr	r1, [pc, #496]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011dec:	4313      	orrs	r3, r2
 8011dee:	604b      	str	r3, [r1, #4]
 8011df0:	e018      	b.n	8011e24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011df2:	4b7a      	ldr	r3, [pc, #488]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	4a79      	ldr	r2, [pc, #484]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011dfe:	f7fe fb8d 	bl	801051c <HAL_GetTick>
 8011e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8011e04:	e008      	b.n	8011e18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011e06:	f7fe fb89 	bl	801051c <HAL_GetTick>
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	1ad3      	subs	r3, r2, r3
 8011e10:	2b02      	cmp	r3, #2
 8011e12:	d901      	bls.n	8011e18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8011e14:	2303      	movs	r3, #3
 8011e16:	e240      	b.n	801229a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8011e18:	4b70      	ldr	r3, [pc, #448]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d1f0      	bne.n	8011e06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f003 0308 	and.w	r3, r3, #8
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d03c      	beq.n	8011eaa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	695b      	ldr	r3, [r3, #20]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d01c      	beq.n	8011e72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011e38:	4b68      	ldr	r3, [pc, #416]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011e3e:	4a67      	ldr	r2, [pc, #412]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011e40:	f043 0301 	orr.w	r3, r3, #1
 8011e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011e48:	f7fe fb68 	bl	801051c <HAL_GetTick>
 8011e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011e4e:	e008      	b.n	8011e62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011e50:	f7fe fb64 	bl	801051c <HAL_GetTick>
 8011e54:	4602      	mov	r2, r0
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	2b02      	cmp	r3, #2
 8011e5c:	d901      	bls.n	8011e62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8011e5e:	2303      	movs	r3, #3
 8011e60:	e21b      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011e62:	4b5e      	ldr	r3, [pc, #376]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011e68:	f003 0302 	and.w	r3, r3, #2
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d0ef      	beq.n	8011e50 <HAL_RCC_OscConfig+0x3ec>
 8011e70:	e01b      	b.n	8011eaa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011e72:	4b5a      	ldr	r3, [pc, #360]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011e78:	4a58      	ldr	r2, [pc, #352]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011e7a:	f023 0301 	bic.w	r3, r3, #1
 8011e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011e82:	f7fe fb4b 	bl	801051c <HAL_GetTick>
 8011e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8011e88:	e008      	b.n	8011e9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011e8a:	f7fe fb47 	bl	801051c <HAL_GetTick>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	1ad3      	subs	r3, r2, r3
 8011e94:	2b02      	cmp	r3, #2
 8011e96:	d901      	bls.n	8011e9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8011e98:	2303      	movs	r3, #3
 8011e9a:	e1fe      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8011e9c:	4b4f      	ldr	r3, [pc, #316]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011ea2:	f003 0302 	and.w	r3, r3, #2
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d1ef      	bne.n	8011e8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f003 0304 	and.w	r3, r3, #4
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	f000 80a6 	beq.w	8012004 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8011ebc:	4b47      	ldr	r3, [pc, #284]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d10d      	bne.n	8011ee4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011ec8:	4b44      	ldr	r3, [pc, #272]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ecc:	4a43      	ldr	r2, [pc, #268]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8011ed4:	4b41      	ldr	r3, [pc, #260]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011edc:	60bb      	str	r3, [r7, #8]
 8011ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011ee4:	4b3e      	ldr	r3, [pc, #248]	; (8011fe0 <HAL_RCC_OscConfig+0x57c>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d118      	bne.n	8011f22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011ef0:	4b3b      	ldr	r3, [pc, #236]	; (8011fe0 <HAL_RCC_OscConfig+0x57c>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	4a3a      	ldr	r2, [pc, #232]	; (8011fe0 <HAL_RCC_OscConfig+0x57c>)
 8011ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011efa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011efc:	f7fe fb0e 	bl	801051c <HAL_GetTick>
 8011f00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011f02:	e008      	b.n	8011f16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011f04:	f7fe fb0a 	bl	801051c <HAL_GetTick>
 8011f08:	4602      	mov	r2, r0
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	1ad3      	subs	r3, r2, r3
 8011f0e:	2b02      	cmp	r3, #2
 8011f10:	d901      	bls.n	8011f16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8011f12:	2303      	movs	r3, #3
 8011f14:	e1c1      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011f16:	4b32      	ldr	r3, [pc, #200]	; (8011fe0 <HAL_RCC_OscConfig+0x57c>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d0f0      	beq.n	8011f04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	689b      	ldr	r3, [r3, #8]
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d108      	bne.n	8011f3c <HAL_RCC_OscConfig+0x4d8>
 8011f2a:	4b2c      	ldr	r3, [pc, #176]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f30:	4a2a      	ldr	r2, [pc, #168]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011f32:	f043 0301 	orr.w	r3, r3, #1
 8011f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011f3a:	e024      	b.n	8011f86 <HAL_RCC_OscConfig+0x522>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	689b      	ldr	r3, [r3, #8]
 8011f40:	2b05      	cmp	r3, #5
 8011f42:	d110      	bne.n	8011f66 <HAL_RCC_OscConfig+0x502>
 8011f44:	4b25      	ldr	r3, [pc, #148]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f4a:	4a24      	ldr	r2, [pc, #144]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011f4c:	f043 0304 	orr.w	r3, r3, #4
 8011f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011f54:	4b21      	ldr	r3, [pc, #132]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f5a:	4a20      	ldr	r2, [pc, #128]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011f5c:	f043 0301 	orr.w	r3, r3, #1
 8011f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011f64:	e00f      	b.n	8011f86 <HAL_RCC_OscConfig+0x522>
 8011f66:	4b1d      	ldr	r3, [pc, #116]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f6c:	4a1b      	ldr	r2, [pc, #108]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011f6e:	f023 0301 	bic.w	r3, r3, #1
 8011f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011f76:	4b19      	ldr	r3, [pc, #100]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f7c:	4a17      	ldr	r2, [pc, #92]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011f7e:	f023 0304 	bic.w	r3, r3, #4
 8011f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	689b      	ldr	r3, [r3, #8]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d016      	beq.n	8011fbc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011f8e:	f7fe fac5 	bl	801051c <HAL_GetTick>
 8011f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011f94:	e00a      	b.n	8011fac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011f96:	f7fe fac1 	bl	801051c <HAL_GetTick>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	1ad3      	subs	r3, r2, r3
 8011fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	d901      	bls.n	8011fac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8011fa8:	2303      	movs	r3, #3
 8011faa:	e176      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011fac:	4b0b      	ldr	r3, [pc, #44]	; (8011fdc <HAL_RCC_OscConfig+0x578>)
 8011fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fb2:	f003 0302 	and.w	r3, r3, #2
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d0ed      	beq.n	8011f96 <HAL_RCC_OscConfig+0x532>
 8011fba:	e01a      	b.n	8011ff2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011fbc:	f7fe faae 	bl	801051c <HAL_GetTick>
 8011fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011fc2:	e00f      	b.n	8011fe4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011fc4:	f7fe faaa 	bl	801051c <HAL_GetTick>
 8011fc8:	4602      	mov	r2, r0
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	1ad3      	subs	r3, r2, r3
 8011fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	d906      	bls.n	8011fe4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8011fd6:	2303      	movs	r3, #3
 8011fd8:	e15f      	b.n	801229a <HAL_RCC_OscConfig+0x836>
 8011fda:	bf00      	nop
 8011fdc:	40021000 	.word	0x40021000
 8011fe0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011fe4:	4baa      	ldr	r3, [pc, #680]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8011fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fea:	f003 0302 	and.w	r3, r3, #2
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d1e8      	bne.n	8011fc4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011ff2:	7ffb      	ldrb	r3, [r7, #31]
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d105      	bne.n	8012004 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011ff8:	4ba5      	ldr	r3, [pc, #660]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8011ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ffc:	4aa4      	ldr	r2, [pc, #656]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8011ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012002:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f003 0320 	and.w	r3, r3, #32
 801200c:	2b00      	cmp	r3, #0
 801200e:	d03c      	beq.n	801208a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012014:	2b00      	cmp	r3, #0
 8012016:	d01c      	beq.n	8012052 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8012018:	4b9d      	ldr	r3, [pc, #628]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 801201a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801201e:	4a9c      	ldr	r2, [pc, #624]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012020:	f043 0301 	orr.w	r3, r3, #1
 8012024:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012028:	f7fe fa78 	bl	801051c <HAL_GetTick>
 801202c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801202e:	e008      	b.n	8012042 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012030:	f7fe fa74 	bl	801051c <HAL_GetTick>
 8012034:	4602      	mov	r2, r0
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	1ad3      	subs	r3, r2, r3
 801203a:	2b02      	cmp	r3, #2
 801203c:	d901      	bls.n	8012042 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 801203e:	2303      	movs	r3, #3
 8012040:	e12b      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8012042:	4b93      	ldr	r3, [pc, #588]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012044:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012048:	f003 0302 	and.w	r3, r3, #2
 801204c:	2b00      	cmp	r3, #0
 801204e:	d0ef      	beq.n	8012030 <HAL_RCC_OscConfig+0x5cc>
 8012050:	e01b      	b.n	801208a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012052:	4b8f      	ldr	r3, [pc, #572]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012058:	4a8d      	ldr	r2, [pc, #564]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 801205a:	f023 0301 	bic.w	r3, r3, #1
 801205e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012062:	f7fe fa5b 	bl	801051c <HAL_GetTick>
 8012066:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8012068:	e008      	b.n	801207c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801206a:	f7fe fa57 	bl	801051c <HAL_GetTick>
 801206e:	4602      	mov	r2, r0
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	2b02      	cmp	r3, #2
 8012076:	d901      	bls.n	801207c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8012078:	2303      	movs	r3, #3
 801207a:	e10e      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801207c:	4b84      	ldr	r3, [pc, #528]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 801207e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012082:	f003 0302 	and.w	r3, r3, #2
 8012086:	2b00      	cmp	r3, #0
 8012088:	d1ef      	bne.n	801206a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801208e:	2b00      	cmp	r3, #0
 8012090:	f000 8102 	beq.w	8012298 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012098:	2b02      	cmp	r3, #2
 801209a:	f040 80c5 	bne.w	8012228 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 801209e:	4b7c      	ldr	r3, [pc, #496]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 80120a0:	68db      	ldr	r3, [r3, #12]
 80120a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	f003 0203 	and.w	r2, r3, #3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d12c      	bne.n	801210c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120bc:	3b01      	subs	r3, #1
 80120be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d123      	bne.n	801210c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d11b      	bne.n	801210c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d113      	bne.n	801210c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120ee:	085b      	lsrs	r3, r3, #1
 80120f0:	3b01      	subs	r3, #1
 80120f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d109      	bne.n	801210c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012102:	085b      	lsrs	r3, r3, #1
 8012104:	3b01      	subs	r3, #1
 8012106:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8012108:	429a      	cmp	r2, r3
 801210a:	d067      	beq.n	80121dc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	2b0c      	cmp	r3, #12
 8012110:	d062      	beq.n	80121d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8012112:	4b5f      	ldr	r3, [pc, #380]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801211a:	2b00      	cmp	r3, #0
 801211c:	d001      	beq.n	8012122 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 801211e:	2301      	movs	r3, #1
 8012120:	e0bb      	b.n	801229a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8012122:	4b5b      	ldr	r3, [pc, #364]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	4a5a      	ldr	r2, [pc, #360]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801212c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801212e:	f7fe f9f5 	bl	801051c <HAL_GetTick>
 8012132:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012134:	e008      	b.n	8012148 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012136:	f7fe f9f1 	bl	801051c <HAL_GetTick>
 801213a:	4602      	mov	r2, r0
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	1ad3      	subs	r3, r2, r3
 8012140:	2b02      	cmp	r3, #2
 8012142:	d901      	bls.n	8012148 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8012144:	2303      	movs	r3, #3
 8012146:	e0a8      	b.n	801229a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012148:	4b51      	ldr	r3, [pc, #324]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012150:	2b00      	cmp	r3, #0
 8012152:	d1f0      	bne.n	8012136 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012154:	4b4e      	ldr	r3, [pc, #312]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012156:	68da      	ldr	r2, [r3, #12]
 8012158:	4b4e      	ldr	r3, [pc, #312]	; (8012294 <HAL_RCC_OscConfig+0x830>)
 801215a:	4013      	ands	r3, r2
 801215c:	687a      	ldr	r2, [r7, #4]
 801215e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012164:	3a01      	subs	r2, #1
 8012166:	0112      	lsls	r2, r2, #4
 8012168:	4311      	orrs	r1, r2
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801216e:	0212      	lsls	r2, r2, #8
 8012170:	4311      	orrs	r1, r2
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8012176:	0852      	lsrs	r2, r2, #1
 8012178:	3a01      	subs	r2, #1
 801217a:	0552      	lsls	r2, r2, #21
 801217c:	4311      	orrs	r1, r2
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012182:	0852      	lsrs	r2, r2, #1
 8012184:	3a01      	subs	r2, #1
 8012186:	0652      	lsls	r2, r2, #25
 8012188:	4311      	orrs	r1, r2
 801218a:	687a      	ldr	r2, [r7, #4]
 801218c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801218e:	06d2      	lsls	r2, r2, #27
 8012190:	430a      	orrs	r2, r1
 8012192:	493f      	ldr	r1, [pc, #252]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012194:	4313      	orrs	r3, r2
 8012196:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8012198:	4b3d      	ldr	r3, [pc, #244]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	4a3c      	ldr	r2, [pc, #240]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 801219e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80121a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80121a4:	4b3a      	ldr	r3, [pc, #232]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	4a39      	ldr	r2, [pc, #228]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 80121aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80121ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80121b0:	f7fe f9b4 	bl	801051c <HAL_GetTick>
 80121b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80121b6:	e008      	b.n	80121ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80121b8:	f7fe f9b0 	bl	801051c <HAL_GetTick>
 80121bc:	4602      	mov	r2, r0
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	2b02      	cmp	r3, #2
 80121c4:	d901      	bls.n	80121ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80121c6:	2303      	movs	r3, #3
 80121c8:	e067      	b.n	801229a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80121ca:	4b31      	ldr	r3, [pc, #196]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d0f0      	beq.n	80121b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80121d6:	e05f      	b.n	8012298 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80121d8:	2301      	movs	r3, #1
 80121da:	e05e      	b.n	801229a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80121dc:	4b2c      	ldr	r3, [pc, #176]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d157      	bne.n	8012298 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80121e8:	4b29      	ldr	r3, [pc, #164]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	4a28      	ldr	r2, [pc, #160]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 80121ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80121f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80121f4:	4b26      	ldr	r3, [pc, #152]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 80121f6:	68db      	ldr	r3, [r3, #12]
 80121f8:	4a25      	ldr	r2, [pc, #148]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 80121fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80121fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012200:	f7fe f98c 	bl	801051c <HAL_GetTick>
 8012204:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012206:	e008      	b.n	801221a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012208:	f7fe f988 	bl	801051c <HAL_GetTick>
 801220c:	4602      	mov	r2, r0
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	1ad3      	subs	r3, r2, r3
 8012212:	2b02      	cmp	r3, #2
 8012214:	d901      	bls.n	801221a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8012216:	2303      	movs	r3, #3
 8012218:	e03f      	b.n	801229a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801221a:	4b1d      	ldr	r3, [pc, #116]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012222:	2b00      	cmp	r3, #0
 8012224:	d0f0      	beq.n	8012208 <HAL_RCC_OscConfig+0x7a4>
 8012226:	e037      	b.n	8012298 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8012228:	69bb      	ldr	r3, [r7, #24]
 801222a:	2b0c      	cmp	r3, #12
 801222c:	d02d      	beq.n	801228a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801222e:	4b18      	ldr	r3, [pc, #96]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	4a17      	ldr	r2, [pc, #92]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012238:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801223a:	4b15      	ldr	r3, [pc, #84]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012242:	2b00      	cmp	r3, #0
 8012244:	d105      	bne.n	8012252 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8012246:	4b12      	ldr	r3, [pc, #72]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012248:	68db      	ldr	r3, [r3, #12]
 801224a:	4a11      	ldr	r2, [pc, #68]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 801224c:	f023 0303 	bic.w	r3, r3, #3
 8012250:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8012252:	4b0f      	ldr	r3, [pc, #60]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	4a0e      	ldr	r2, [pc, #56]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 8012258:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801225c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012260:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012262:	f7fe f95b 	bl	801051c <HAL_GetTick>
 8012266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012268:	e008      	b.n	801227c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801226a:	f7fe f957 	bl	801051c <HAL_GetTick>
 801226e:	4602      	mov	r2, r0
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	1ad3      	subs	r3, r2, r3
 8012274:	2b02      	cmp	r3, #2
 8012276:	d901      	bls.n	801227c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8012278:	2303      	movs	r3, #3
 801227a:	e00e      	b.n	801229a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801227c:	4b04      	ldr	r3, [pc, #16]	; (8012290 <HAL_RCC_OscConfig+0x82c>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012284:	2b00      	cmp	r3, #0
 8012286:	d1f0      	bne.n	801226a <HAL_RCC_OscConfig+0x806>
 8012288:	e006      	b.n	8012298 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801228a:	2301      	movs	r3, #1
 801228c:	e005      	b.n	801229a <HAL_RCC_OscConfig+0x836>
 801228e:	bf00      	nop
 8012290:	40021000 	.word	0x40021000
 8012294:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8012298:	2300      	movs	r3, #0
}
 801229a:	4618      	mov	r0, r3
 801229c:	3720      	adds	r7, #32
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop

080122a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d101      	bne.n	80122b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80122b4:	2301      	movs	r3, #1
 80122b6:	e0c8      	b.n	801244a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80122b8:	4b66      	ldr	r3, [pc, #408]	; (8012454 <HAL_RCC_ClockConfig+0x1b0>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f003 0307 	and.w	r3, r3, #7
 80122c0:	683a      	ldr	r2, [r7, #0]
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d910      	bls.n	80122e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80122c6:	4b63      	ldr	r3, [pc, #396]	; (8012454 <HAL_RCC_ClockConfig+0x1b0>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f023 0207 	bic.w	r2, r3, #7
 80122ce:	4961      	ldr	r1, [pc, #388]	; (8012454 <HAL_RCC_ClockConfig+0x1b0>)
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	4313      	orrs	r3, r2
 80122d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80122d6:	4b5f      	ldr	r3, [pc, #380]	; (8012454 <HAL_RCC_ClockConfig+0x1b0>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	f003 0307 	and.w	r3, r3, #7
 80122de:	683a      	ldr	r2, [r7, #0]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d001      	beq.n	80122e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80122e4:	2301      	movs	r3, #1
 80122e6:	e0b0      	b.n	801244a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f003 0301 	and.w	r3, r3, #1
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d04c      	beq.n	801238e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	2b03      	cmp	r3, #3
 80122fa:	d107      	bne.n	801230c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80122fc:	4b56      	ldr	r3, [pc, #344]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012304:	2b00      	cmp	r3, #0
 8012306:	d121      	bne.n	801234c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8012308:	2301      	movs	r3, #1
 801230a:	e09e      	b.n	801244a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	685b      	ldr	r3, [r3, #4]
 8012310:	2b02      	cmp	r3, #2
 8012312:	d107      	bne.n	8012324 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012314:	4b50      	ldr	r3, [pc, #320]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801231c:	2b00      	cmp	r3, #0
 801231e:	d115      	bne.n	801234c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8012320:	2301      	movs	r3, #1
 8012322:	e092      	b.n	801244a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d107      	bne.n	801233c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801232c:	4b4a      	ldr	r3, [pc, #296]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	f003 0302 	and.w	r3, r3, #2
 8012334:	2b00      	cmp	r3, #0
 8012336:	d109      	bne.n	801234c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8012338:	2301      	movs	r3, #1
 801233a:	e086      	b.n	801244a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801233c:	4b46      	ldr	r3, [pc, #280]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012344:	2b00      	cmp	r3, #0
 8012346:	d101      	bne.n	801234c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8012348:	2301      	movs	r3, #1
 801234a:	e07e      	b.n	801244a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801234c:	4b42      	ldr	r3, [pc, #264]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 801234e:	689b      	ldr	r3, [r3, #8]
 8012350:	f023 0203 	bic.w	r2, r3, #3
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	493f      	ldr	r1, [pc, #252]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 801235a:	4313      	orrs	r3, r2
 801235c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801235e:	f7fe f8dd 	bl	801051c <HAL_GetTick>
 8012362:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012364:	e00a      	b.n	801237c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012366:	f7fe f8d9 	bl	801051c <HAL_GetTick>
 801236a:	4602      	mov	r2, r0
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	1ad3      	subs	r3, r2, r3
 8012370:	f241 3288 	movw	r2, #5000	; 0x1388
 8012374:	4293      	cmp	r3, r2
 8012376:	d901      	bls.n	801237c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8012378:	2303      	movs	r3, #3
 801237a:	e066      	b.n	801244a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801237c:	4b36      	ldr	r3, [pc, #216]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 801237e:	689b      	ldr	r3, [r3, #8]
 8012380:	f003 020c 	and.w	r2, r3, #12
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	429a      	cmp	r2, r3
 801238c:	d1eb      	bne.n	8012366 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f003 0302 	and.w	r3, r3, #2
 8012396:	2b00      	cmp	r3, #0
 8012398:	d008      	beq.n	80123ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801239a:	4b2f      	ldr	r3, [pc, #188]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 801239c:	689b      	ldr	r3, [r3, #8]
 801239e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	689b      	ldr	r3, [r3, #8]
 80123a6:	492c      	ldr	r1, [pc, #176]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 80123a8:	4313      	orrs	r3, r2
 80123aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80123ac:	4b29      	ldr	r3, [pc, #164]	; (8012454 <HAL_RCC_ClockConfig+0x1b0>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	f003 0307 	and.w	r3, r3, #7
 80123b4:	683a      	ldr	r2, [r7, #0]
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d210      	bcs.n	80123dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80123ba:	4b26      	ldr	r3, [pc, #152]	; (8012454 <HAL_RCC_ClockConfig+0x1b0>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	f023 0207 	bic.w	r2, r3, #7
 80123c2:	4924      	ldr	r1, [pc, #144]	; (8012454 <HAL_RCC_ClockConfig+0x1b0>)
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	4313      	orrs	r3, r2
 80123c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80123ca:	4b22      	ldr	r3, [pc, #136]	; (8012454 <HAL_RCC_ClockConfig+0x1b0>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	f003 0307 	and.w	r3, r3, #7
 80123d2:	683a      	ldr	r2, [r7, #0]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d001      	beq.n	80123dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80123d8:	2301      	movs	r3, #1
 80123da:	e036      	b.n	801244a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	f003 0304 	and.w	r3, r3, #4
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d008      	beq.n	80123fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80123e8:	4b1b      	ldr	r3, [pc, #108]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 80123ea:	689b      	ldr	r3, [r3, #8]
 80123ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	4918      	ldr	r1, [pc, #96]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 80123f6:	4313      	orrs	r3, r2
 80123f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	f003 0308 	and.w	r3, r3, #8
 8012402:	2b00      	cmp	r3, #0
 8012404:	d009      	beq.n	801241a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012406:	4b14      	ldr	r3, [pc, #80]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 8012408:	689b      	ldr	r3, [r3, #8]
 801240a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	691b      	ldr	r3, [r3, #16]
 8012412:	00db      	lsls	r3, r3, #3
 8012414:	4910      	ldr	r1, [pc, #64]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 8012416:	4313      	orrs	r3, r2
 8012418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801241a:	f000 f825 	bl	8012468 <HAL_RCC_GetSysClockFreq>
 801241e:	4601      	mov	r1, r0
 8012420:	4b0d      	ldr	r3, [pc, #52]	; (8012458 <HAL_RCC_ClockConfig+0x1b4>)
 8012422:	689b      	ldr	r3, [r3, #8]
 8012424:	091b      	lsrs	r3, r3, #4
 8012426:	f003 030f 	and.w	r3, r3, #15
 801242a:	4a0c      	ldr	r2, [pc, #48]	; (801245c <HAL_RCC_ClockConfig+0x1b8>)
 801242c:	5cd3      	ldrb	r3, [r2, r3]
 801242e:	f003 031f 	and.w	r3, r3, #31
 8012432:	fa21 f303 	lsr.w	r3, r1, r3
 8012436:	4a0a      	ldr	r2, [pc, #40]	; (8012460 <HAL_RCC_ClockConfig+0x1bc>)
 8012438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801243a:	4b0a      	ldr	r3, [pc, #40]	; (8012464 <HAL_RCC_ClockConfig+0x1c0>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	4618      	mov	r0, r3
 8012440:	f7fe f81c 	bl	801047c <HAL_InitTick>
 8012444:	4603      	mov	r3, r0
 8012446:	72fb      	strb	r3, [r7, #11]

  return status;
 8012448:	7afb      	ldrb	r3, [r7, #11]
}
 801244a:	4618      	mov	r0, r3
 801244c:	3710      	adds	r7, #16
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	40022000 	.word	0x40022000
 8012458:	40021000 	.word	0x40021000
 801245c:	08021330 	.word	0x08021330
 8012460:	20000018 	.word	0x20000018
 8012464:	2000001c 	.word	0x2000001c

08012468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012468:	b480      	push	{r7}
 801246a:	b089      	sub	sp, #36	; 0x24
 801246c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801246e:	2300      	movs	r3, #0
 8012470:	61fb      	str	r3, [r7, #28]
 8012472:	2300      	movs	r3, #0
 8012474:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012476:	4b3d      	ldr	r3, [pc, #244]	; (801256c <HAL_RCC_GetSysClockFreq+0x104>)
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	f003 030c 	and.w	r3, r3, #12
 801247e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012480:	4b3a      	ldr	r3, [pc, #232]	; (801256c <HAL_RCC_GetSysClockFreq+0x104>)
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	f003 0303 	and.w	r3, r3, #3
 8012488:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d005      	beq.n	801249c <HAL_RCC_GetSysClockFreq+0x34>
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	2b0c      	cmp	r3, #12
 8012494:	d121      	bne.n	80124da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2b01      	cmp	r3, #1
 801249a:	d11e      	bne.n	80124da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801249c:	4b33      	ldr	r3, [pc, #204]	; (801256c <HAL_RCC_GetSysClockFreq+0x104>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	f003 0308 	and.w	r3, r3, #8
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d107      	bne.n	80124b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80124a8:	4b30      	ldr	r3, [pc, #192]	; (801256c <HAL_RCC_GetSysClockFreq+0x104>)
 80124aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80124ae:	0a1b      	lsrs	r3, r3, #8
 80124b0:	f003 030f 	and.w	r3, r3, #15
 80124b4:	61fb      	str	r3, [r7, #28]
 80124b6:	e005      	b.n	80124c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80124b8:	4b2c      	ldr	r3, [pc, #176]	; (801256c <HAL_RCC_GetSysClockFreq+0x104>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	091b      	lsrs	r3, r3, #4
 80124be:	f003 030f 	and.w	r3, r3, #15
 80124c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80124c4:	4a2a      	ldr	r2, [pc, #168]	; (8012570 <HAL_RCC_GetSysClockFreq+0x108>)
 80124c6:	69fb      	ldr	r3, [r7, #28]
 80124c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d10d      	bne.n	80124f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80124d4:	69fb      	ldr	r3, [r7, #28]
 80124d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80124d8:	e00a      	b.n	80124f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	2b04      	cmp	r3, #4
 80124de:	d102      	bne.n	80124e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80124e0:	4b24      	ldr	r3, [pc, #144]	; (8012574 <HAL_RCC_GetSysClockFreq+0x10c>)
 80124e2:	61bb      	str	r3, [r7, #24]
 80124e4:	e004      	b.n	80124f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	2b08      	cmp	r3, #8
 80124ea:	d101      	bne.n	80124f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80124ec:	4b22      	ldr	r3, [pc, #136]	; (8012578 <HAL_RCC_GetSysClockFreq+0x110>)
 80124ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	2b0c      	cmp	r3, #12
 80124f4:	d133      	bne.n	801255e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80124f6:	4b1d      	ldr	r3, [pc, #116]	; (801256c <HAL_RCC_GetSysClockFreq+0x104>)
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	f003 0303 	and.w	r3, r3, #3
 80124fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	2b02      	cmp	r3, #2
 8012504:	d002      	beq.n	801250c <HAL_RCC_GetSysClockFreq+0xa4>
 8012506:	2b03      	cmp	r3, #3
 8012508:	d003      	beq.n	8012512 <HAL_RCC_GetSysClockFreq+0xaa>
 801250a:	e005      	b.n	8012518 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801250c:	4b19      	ldr	r3, [pc, #100]	; (8012574 <HAL_RCC_GetSysClockFreq+0x10c>)
 801250e:	617b      	str	r3, [r7, #20]
      break;
 8012510:	e005      	b.n	801251e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8012512:	4b19      	ldr	r3, [pc, #100]	; (8012578 <HAL_RCC_GetSysClockFreq+0x110>)
 8012514:	617b      	str	r3, [r7, #20]
      break;
 8012516:	e002      	b.n	801251e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	617b      	str	r3, [r7, #20]
      break;
 801251c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801251e:	4b13      	ldr	r3, [pc, #76]	; (801256c <HAL_RCC_GetSysClockFreq+0x104>)
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	091b      	lsrs	r3, r3, #4
 8012524:	f003 0307 	and.w	r3, r3, #7
 8012528:	3301      	adds	r3, #1
 801252a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801252c:	4b0f      	ldr	r3, [pc, #60]	; (801256c <HAL_RCC_GetSysClockFreq+0x104>)
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	0a1b      	lsrs	r3, r3, #8
 8012532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012536:	697a      	ldr	r2, [r7, #20]
 8012538:	fb02 f203 	mul.w	r2, r2, r3
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012542:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8012544:	4b09      	ldr	r3, [pc, #36]	; (801256c <HAL_RCC_GetSysClockFreq+0x104>)
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	0e5b      	lsrs	r3, r3, #25
 801254a:	f003 0303 	and.w	r3, r3, #3
 801254e:	3301      	adds	r3, #1
 8012550:	005b      	lsls	r3, r3, #1
 8012552:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8012554:	697a      	ldr	r2, [r7, #20]
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	fbb2 f3f3 	udiv	r3, r2, r3
 801255c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801255e:	69bb      	ldr	r3, [r7, #24]
}
 8012560:	4618      	mov	r0, r3
 8012562:	3724      	adds	r7, #36	; 0x24
 8012564:	46bd      	mov	sp, r7
 8012566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256a:	4770      	bx	lr
 801256c:	40021000 	.word	0x40021000
 8012570:	08021348 	.word	0x08021348
 8012574:	00f42400 	.word	0x00f42400
 8012578:	007a1200 	.word	0x007a1200

0801257c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801257c:	b480      	push	{r7}
 801257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012580:	4b03      	ldr	r3, [pc, #12]	; (8012590 <HAL_RCC_GetHCLKFreq+0x14>)
 8012582:	681b      	ldr	r3, [r3, #0]
}
 8012584:	4618      	mov	r0, r3
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	20000018 	.word	0x20000018

08012594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8012598:	f7ff fff0 	bl	801257c <HAL_RCC_GetHCLKFreq>
 801259c:	4601      	mov	r1, r0
 801259e:	4b06      	ldr	r3, [pc, #24]	; (80125b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80125a0:	689b      	ldr	r3, [r3, #8]
 80125a2:	0a1b      	lsrs	r3, r3, #8
 80125a4:	f003 0307 	and.w	r3, r3, #7
 80125a8:	4a04      	ldr	r2, [pc, #16]	; (80125bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80125aa:	5cd3      	ldrb	r3, [r2, r3]
 80125ac:	f003 031f 	and.w	r3, r3, #31
 80125b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	bd80      	pop	{r7, pc}
 80125b8:	40021000 	.word	0x40021000
 80125bc:	08021340 	.word	0x08021340

080125c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80125c4:	f7ff ffda 	bl	801257c <HAL_RCC_GetHCLKFreq>
 80125c8:	4601      	mov	r1, r0
 80125ca:	4b06      	ldr	r3, [pc, #24]	; (80125e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80125cc:	689b      	ldr	r3, [r3, #8]
 80125ce:	0adb      	lsrs	r3, r3, #11
 80125d0:	f003 0307 	and.w	r3, r3, #7
 80125d4:	4a04      	ldr	r2, [pc, #16]	; (80125e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80125d6:	5cd3      	ldrb	r3, [r2, r3]
 80125d8:	f003 031f 	and.w	r3, r3, #31
 80125dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	40021000 	.word	0x40021000
 80125e8:	08021340 	.word	0x08021340

080125ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b086      	sub	sp, #24
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80125f4:	2300      	movs	r3, #0
 80125f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80125f8:	4b2a      	ldr	r3, [pc, #168]	; (80126a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80125fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012600:	2b00      	cmp	r3, #0
 8012602:	d003      	beq.n	801260c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8012604:	f7ff f9ca 	bl	801199c <HAL_PWREx_GetVoltageRange>
 8012608:	6178      	str	r0, [r7, #20]
 801260a:	e014      	b.n	8012636 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801260c:	4b25      	ldr	r3, [pc, #148]	; (80126a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012610:	4a24      	ldr	r2, [pc, #144]	; (80126a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012616:	6593      	str	r3, [r2, #88]	; 0x58
 8012618:	4b22      	ldr	r3, [pc, #136]	; (80126a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012620:	60fb      	str	r3, [r7, #12]
 8012622:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8012624:	f7ff f9ba 	bl	801199c <HAL_PWREx_GetVoltageRange>
 8012628:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801262a:	4b1e      	ldr	r3, [pc, #120]	; (80126a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801262e:	4a1d      	ldr	r2, [pc, #116]	; (80126a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012634:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801263c:	d10b      	bne.n	8012656 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2b80      	cmp	r3, #128	; 0x80
 8012642:	d919      	bls.n	8012678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2ba0      	cmp	r3, #160	; 0xa0
 8012648:	d902      	bls.n	8012650 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801264a:	2302      	movs	r3, #2
 801264c:	613b      	str	r3, [r7, #16]
 801264e:	e013      	b.n	8012678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8012650:	2301      	movs	r3, #1
 8012652:	613b      	str	r3, [r7, #16]
 8012654:	e010      	b.n	8012678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2b80      	cmp	r3, #128	; 0x80
 801265a:	d902      	bls.n	8012662 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801265c:	2303      	movs	r3, #3
 801265e:	613b      	str	r3, [r7, #16]
 8012660:	e00a      	b.n	8012678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b80      	cmp	r3, #128	; 0x80
 8012666:	d102      	bne.n	801266e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8012668:	2302      	movs	r3, #2
 801266a:	613b      	str	r3, [r7, #16]
 801266c:	e004      	b.n	8012678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2b70      	cmp	r3, #112	; 0x70
 8012672:	d101      	bne.n	8012678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8012674:	2301      	movs	r3, #1
 8012676:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8012678:	4b0b      	ldr	r3, [pc, #44]	; (80126a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f023 0207 	bic.w	r2, r3, #7
 8012680:	4909      	ldr	r1, [pc, #36]	; (80126a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	4313      	orrs	r3, r2
 8012686:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8012688:	4b07      	ldr	r3, [pc, #28]	; (80126a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	f003 0307 	and.w	r3, r3, #7
 8012690:	693a      	ldr	r2, [r7, #16]
 8012692:	429a      	cmp	r2, r3
 8012694:	d001      	beq.n	801269a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8012696:	2301      	movs	r3, #1
 8012698:	e000      	b.n	801269c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801269a:	2300      	movs	r3, #0
}
 801269c:	4618      	mov	r0, r3
 801269e:	3718      	adds	r7, #24
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	40021000 	.word	0x40021000
 80126a8:	40022000 	.word	0x40022000

080126ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b086      	sub	sp, #24
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80126b4:	2300      	movs	r3, #0
 80126b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80126b8:	2300      	movs	r3, #0
 80126ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d02f      	beq.n	8012728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80126d0:	d005      	beq.n	80126de <HAL_RCCEx_PeriphCLKConfig+0x32>
 80126d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80126d6:	d015      	beq.n	8012704 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d007      	beq.n	80126ec <HAL_RCCEx_PeriphCLKConfig+0x40>
 80126dc:	e00f      	b.n	80126fe <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80126de:	4bac      	ldr	r3, [pc, #688]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	4aab      	ldr	r2, [pc, #684]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80126e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80126e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80126ea:	e00c      	b.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	3304      	adds	r3, #4
 80126f0:	2100      	movs	r1, #0
 80126f2:	4618      	mov	r0, r3
 80126f4:	f000 f9dc 	bl	8012ab0 <RCCEx_PLLSAI1_Config>
 80126f8:	4603      	mov	r3, r0
 80126fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80126fc:	e003      	b.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80126fe:	2301      	movs	r3, #1
 8012700:	74fb      	strb	r3, [r7, #19]
      break;
 8012702:	e000      	b.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8012704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012706:	7cfb      	ldrb	r3, [r7, #19]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d10b      	bne.n	8012724 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801270c:	4ba0      	ldr	r3, [pc, #640]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801271a:	499d      	ldr	r1, [pc, #628]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801271c:	4313      	orrs	r3, r2
 801271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8012722:	e001      	b.n	8012728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012724:	7cfb      	ldrb	r3, [r7, #19]
 8012726:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012730:	2b00      	cmp	r3, #0
 8012732:	f000 8099 	beq.w	8012868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012736:	2300      	movs	r3, #0
 8012738:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801273a:	4b95      	ldr	r3, [pc, #596]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012742:	2b00      	cmp	r3, #0
 8012744:	d101      	bne.n	801274a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8012746:	2301      	movs	r3, #1
 8012748:	e000      	b.n	801274c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 801274a:	2300      	movs	r3, #0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d00d      	beq.n	801276c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012750:	4b8f      	ldr	r3, [pc, #572]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012754:	4a8e      	ldr	r2, [pc, #568]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801275a:	6593      	str	r3, [r2, #88]	; 0x58
 801275c:	4b8c      	ldr	r3, [pc, #560]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012764:	60bb      	str	r3, [r7, #8]
 8012766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012768:	2301      	movs	r3, #1
 801276a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801276c:	4b89      	ldr	r3, [pc, #548]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4a88      	ldr	r2, [pc, #544]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012776:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012778:	f7fd fed0 	bl	801051c <HAL_GetTick>
 801277c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801277e:	e009      	b.n	8012794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012780:	f7fd fecc 	bl	801051c <HAL_GetTick>
 8012784:	4602      	mov	r2, r0
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	1ad3      	subs	r3, r2, r3
 801278a:	2b02      	cmp	r3, #2
 801278c:	d902      	bls.n	8012794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 801278e:	2303      	movs	r3, #3
 8012790:	74fb      	strb	r3, [r7, #19]
        break;
 8012792:	e005      	b.n	80127a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8012794:	4b7f      	ldr	r3, [pc, #508]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801279c:	2b00      	cmp	r3, #0
 801279e:	d0ef      	beq.n	8012780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80127a0:	7cfb      	ldrb	r3, [r7, #19]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d155      	bne.n	8012852 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80127a6:	4b7a      	ldr	r3, [pc, #488]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80127a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80127b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d01e      	beq.n	80127f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127bc:	697a      	ldr	r2, [r7, #20]
 80127be:	429a      	cmp	r2, r3
 80127c0:	d019      	beq.n	80127f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80127c2:	4b73      	ldr	r3, [pc, #460]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80127c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80127cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80127ce:	4b70      	ldr	r3, [pc, #448]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80127d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127d4:	4a6e      	ldr	r2, [pc, #440]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80127d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80127da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80127de:	4b6c      	ldr	r3, [pc, #432]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80127e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127e4:	4a6a      	ldr	r2, [pc, #424]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80127e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80127ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80127ee:	4a68      	ldr	r2, [pc, #416]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	f003 0301 	and.w	r3, r3, #1
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d016      	beq.n	801282e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012800:	f7fd fe8c 	bl	801051c <HAL_GetTick>
 8012804:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012806:	e00b      	b.n	8012820 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012808:	f7fd fe88 	bl	801051c <HAL_GetTick>
 801280c:	4602      	mov	r2, r0
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	1ad3      	subs	r3, r2, r3
 8012812:	f241 3288 	movw	r2, #5000	; 0x1388
 8012816:	4293      	cmp	r3, r2
 8012818:	d902      	bls.n	8012820 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 801281a:	2303      	movs	r3, #3
 801281c:	74fb      	strb	r3, [r7, #19]
            break;
 801281e:	e006      	b.n	801282e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012820:	4b5b      	ldr	r3, [pc, #364]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012826:	f003 0302 	and.w	r3, r3, #2
 801282a:	2b00      	cmp	r3, #0
 801282c:	d0ec      	beq.n	8012808 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 801282e:	7cfb      	ldrb	r3, [r7, #19]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d10b      	bne.n	801284c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012834:	4b56      	ldr	r3, [pc, #344]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801283a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012842:	4953      	ldr	r1, [pc, #332]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012844:	4313      	orrs	r3, r2
 8012846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801284a:	e004      	b.n	8012856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801284c:	7cfb      	ldrb	r3, [r7, #19]
 801284e:	74bb      	strb	r3, [r7, #18]
 8012850:	e001      	b.n	8012856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012852:	7cfb      	ldrb	r3, [r7, #19]
 8012854:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012856:	7c7b      	ldrb	r3, [r7, #17]
 8012858:	2b01      	cmp	r3, #1
 801285a:	d105      	bne.n	8012868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801285c:	4b4c      	ldr	r3, [pc, #304]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012860:	4a4b      	ldr	r2, [pc, #300]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012866:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	f003 0301 	and.w	r3, r3, #1
 8012870:	2b00      	cmp	r3, #0
 8012872:	d00a      	beq.n	801288a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012874:	4b46      	ldr	r3, [pc, #280]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801287a:	f023 0203 	bic.w	r2, r3, #3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6a1b      	ldr	r3, [r3, #32]
 8012882:	4943      	ldr	r1, [pc, #268]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012884:	4313      	orrs	r3, r2
 8012886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	f003 0302 	and.w	r3, r3, #2
 8012892:	2b00      	cmp	r3, #0
 8012894:	d00a      	beq.n	80128ac <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012896:	4b3e      	ldr	r3, [pc, #248]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801289c:	f023 020c 	bic.w	r2, r3, #12
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a4:	493a      	ldr	r1, [pc, #232]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80128a6:	4313      	orrs	r3, r2
 80128a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f003 0320 	and.w	r3, r3, #32
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d00a      	beq.n	80128ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80128b8:	4b35      	ldr	r3, [pc, #212]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80128ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80128be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128c6:	4932      	ldr	r1, [pc, #200]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80128c8:	4313      	orrs	r3, r2
 80128ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d00a      	beq.n	80128f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80128da:	4b2d      	ldr	r3, [pc, #180]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80128dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80128e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128e8:	4929      	ldr	r1, [pc, #164]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80128ea:	4313      	orrs	r3, r2
 80128ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d00a      	beq.n	8012912 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80128fc:	4b24      	ldr	r3, [pc, #144]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80128fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012902:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801290a:	4921      	ldr	r1, [pc, #132]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801290c:	4313      	orrs	r3, r2
 801290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801291a:	2b00      	cmp	r3, #0
 801291c:	d00a      	beq.n	8012934 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801291e:	4b1c      	ldr	r3, [pc, #112]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012924:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801292c:	4918      	ldr	r1, [pc, #96]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801292e:	4313      	orrs	r3, r2
 8012930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801293c:	2b00      	cmp	r3, #0
 801293e:	d00a      	beq.n	8012956 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012940:	4b13      	ldr	r3, [pc, #76]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012946:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801294e:	4910      	ldr	r1, [pc, #64]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012950:	4313      	orrs	r3, r2
 8012952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801295e:	2b00      	cmp	r3, #0
 8012960:	d02c      	beq.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012962:	4b0b      	ldr	r3, [pc, #44]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012968:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012970:	4907      	ldr	r1, [pc, #28]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012972:	4313      	orrs	r3, r2
 8012974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801297c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012980:	d10a      	bne.n	8012998 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8012982:	4b03      	ldr	r3, [pc, #12]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012984:	68db      	ldr	r3, [r3, #12]
 8012986:	4a02      	ldr	r2, [pc, #8]	; (8012990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8012988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801298c:	60d3      	str	r3, [r2, #12]
 801298e:	e015      	b.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8012990:	40021000 	.word	0x40021000
 8012994:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801299c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80129a0:	d10c      	bne.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	3304      	adds	r3, #4
 80129a6:	2101      	movs	r1, #1
 80129a8:	4618      	mov	r0, r3
 80129aa:	f000 f881 	bl	8012ab0 <RCCEx_PLLSAI1_Config>
 80129ae:	4603      	mov	r3, r0
 80129b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80129b2:	7cfb      	ldrb	r3, [r7, #19]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d001      	beq.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80129b8:	7cfb      	ldrb	r3, [r7, #19]
 80129ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d028      	beq.n	8012a1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80129c8:	4b30      	ldr	r3, [pc, #192]	; (8012a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80129ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80129ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129d6:	492d      	ldr	r1, [pc, #180]	; (8012a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80129d8:	4313      	orrs	r3, r2
 80129da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80129e6:	d106      	bne.n	80129f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80129e8:	4b28      	ldr	r3, [pc, #160]	; (8012a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80129ea:	68db      	ldr	r3, [r3, #12]
 80129ec:	4a27      	ldr	r2, [pc, #156]	; (8012a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80129ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80129f2:	60d3      	str	r3, [r2, #12]
 80129f4:	e011      	b.n	8012a1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80129fe:	d10c      	bne.n	8012a1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	3304      	adds	r3, #4
 8012a04:	2101      	movs	r1, #1
 8012a06:	4618      	mov	r0, r3
 8012a08:	f000 f852 	bl	8012ab0 <RCCEx_PLLSAI1_Config>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8012a10:	7cfb      	ldrb	r3, [r7, #19]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d001      	beq.n	8012a1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8012a16:	7cfb      	ldrb	r3, [r7, #19]
 8012a18:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d01c      	beq.n	8012a60 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012a26:	4b19      	ldr	r3, [pc, #100]	; (8012a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8012a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a34:	4915      	ldr	r1, [pc, #84]	; (8012a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8012a36:	4313      	orrs	r3, r2
 8012a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012a44:	d10c      	bne.n	8012a60 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	3304      	adds	r3, #4
 8012a4a:	2102      	movs	r1, #2
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f000 f82f 	bl	8012ab0 <RCCEx_PLLSAI1_Config>
 8012a52:	4603      	mov	r3, r0
 8012a54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8012a56:	7cfb      	ldrb	r3, [r7, #19]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d001      	beq.n	8012a60 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8012a5c:	7cfb      	ldrb	r3, [r7, #19]
 8012a5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d00a      	beq.n	8012a82 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012a6c:	4b07      	ldr	r3, [pc, #28]	; (8012a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8012a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a7a:	4904      	ldr	r1, [pc, #16]	; (8012a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8012a7c:	4313      	orrs	r3, r2
 8012a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8012a82:	7cbb      	ldrb	r3, [r7, #18]
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	3718      	adds	r7, #24
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}
 8012a8c:	40021000 	.word	0x40021000

08012a90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8012a90:	b480      	push	{r7}
 8012a92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8012a94:	4b05      	ldr	r3, [pc, #20]	; (8012aac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	4a04      	ldr	r2, [pc, #16]	; (8012aac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8012a9a:	f043 0304 	orr.w	r3, r3, #4
 8012a9e:	6013      	str	r3, [r2, #0]
}
 8012aa0:	bf00      	nop
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop
 8012aac:	40021000 	.word	0x40021000

08012ab0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b084      	sub	sp, #16
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012aba:	2300      	movs	r3, #0
 8012abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8012abe:	4b73      	ldr	r3, [pc, #460]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012ac0:	68db      	ldr	r3, [r3, #12]
 8012ac2:	f003 0303 	and.w	r3, r3, #3
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d018      	beq.n	8012afc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8012aca:	4b70      	ldr	r3, [pc, #448]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012acc:	68db      	ldr	r3, [r3, #12]
 8012ace:	f003 0203 	and.w	r2, r3, #3
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d10d      	bne.n	8012af6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
       ||
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d009      	beq.n	8012af6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8012ae2:	4b6a      	ldr	r3, [pc, #424]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	091b      	lsrs	r3, r3, #4
 8012ae8:	f003 0307 	and.w	r3, r3, #7
 8012aec:	1c5a      	adds	r2, r3, #1
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	685b      	ldr	r3, [r3, #4]
       ||
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d044      	beq.n	8012b80 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8012af6:	2301      	movs	r3, #1
 8012af8:	73fb      	strb	r3, [r7, #15]
 8012afa:	e041      	b.n	8012b80 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	2b02      	cmp	r3, #2
 8012b02:	d00c      	beq.n	8012b1e <RCCEx_PLLSAI1_Config+0x6e>
 8012b04:	2b03      	cmp	r3, #3
 8012b06:	d013      	beq.n	8012b30 <RCCEx_PLLSAI1_Config+0x80>
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d120      	bne.n	8012b4e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012b0c:	4b5f      	ldr	r3, [pc, #380]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	f003 0302 	and.w	r3, r3, #2
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d11d      	bne.n	8012b54 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8012b18:	2301      	movs	r3, #1
 8012b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012b1c:	e01a      	b.n	8012b54 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012b1e:	4b5b      	ldr	r3, [pc, #364]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d116      	bne.n	8012b58 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012b2e:	e013      	b.n	8012b58 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012b30:	4b56      	ldr	r3, [pc, #344]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d10f      	bne.n	8012b5c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012b3c:	4b53      	ldr	r3, [pc, #332]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d109      	bne.n	8012b5c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8012b48:	2301      	movs	r3, #1
 8012b4a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012b4c:	e006      	b.n	8012b5c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8012b4e:	2301      	movs	r3, #1
 8012b50:	73fb      	strb	r3, [r7, #15]
      break;
 8012b52:	e004      	b.n	8012b5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8012b54:	bf00      	nop
 8012b56:	e002      	b.n	8012b5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8012b58:	bf00      	nop
 8012b5a:	e000      	b.n	8012b5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8012b5c:	bf00      	nop
    }

    if(status == HAL_OK)
 8012b5e:	7bfb      	ldrb	r3, [r7, #15]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d10d      	bne.n	8012b80 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012b64:	4b49      	ldr	r3, [pc, #292]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012b66:	68db      	ldr	r3, [r3, #12]
 8012b68:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	6819      	ldr	r1, [r3, #0]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	685b      	ldr	r3, [r3, #4]
 8012b74:	3b01      	subs	r3, #1
 8012b76:	011b      	lsls	r3, r3, #4
 8012b78:	430b      	orrs	r3, r1
 8012b7a:	4944      	ldr	r1, [pc, #272]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8012b80:	7bfb      	ldrb	r3, [r7, #15]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d17c      	bne.n	8012c80 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8012b86:	4b41      	ldr	r3, [pc, #260]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4a40      	ldr	r2, [pc, #256]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012b8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012b92:	f7fd fcc3 	bl	801051c <HAL_GetTick>
 8012b96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012b98:	e009      	b.n	8012bae <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012b9a:	f7fd fcbf 	bl	801051c <HAL_GetTick>
 8012b9e:	4602      	mov	r2, r0
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	1ad3      	subs	r3, r2, r3
 8012ba4:	2b02      	cmp	r3, #2
 8012ba6:	d902      	bls.n	8012bae <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8012ba8:	2303      	movs	r3, #3
 8012baa:	73fb      	strb	r3, [r7, #15]
        break;
 8012bac:	e005      	b.n	8012bba <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012bae:	4b37      	ldr	r3, [pc, #220]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d1ef      	bne.n	8012b9a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8012bba:	7bfb      	ldrb	r3, [r7, #15]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d15f      	bne.n	8012c80 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d110      	bne.n	8012be8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012bc6:	4b31      	ldr	r3, [pc, #196]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012bc8:	691b      	ldr	r3, [r3, #16]
 8012bca:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8012bce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012bd2:	687a      	ldr	r2, [r7, #4]
 8012bd4:	6892      	ldr	r2, [r2, #8]
 8012bd6:	0211      	lsls	r1, r2, #8
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	68d2      	ldr	r2, [r2, #12]
 8012bdc:	06d2      	lsls	r2, r2, #27
 8012bde:	430a      	orrs	r2, r1
 8012be0:	492a      	ldr	r1, [pc, #168]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012be2:	4313      	orrs	r3, r2
 8012be4:	610b      	str	r3, [r1, #16]
 8012be6:	e027      	b.n	8012c38 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d112      	bne.n	8012c14 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012bee:	4b27      	ldr	r3, [pc, #156]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012bf0:	691b      	ldr	r3, [r3, #16]
 8012bf2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8012bf6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	6892      	ldr	r2, [r2, #8]
 8012bfe:	0211      	lsls	r1, r2, #8
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	6912      	ldr	r2, [r2, #16]
 8012c04:	0852      	lsrs	r2, r2, #1
 8012c06:	3a01      	subs	r2, #1
 8012c08:	0552      	lsls	r2, r2, #21
 8012c0a:	430a      	orrs	r2, r1
 8012c0c:	491f      	ldr	r1, [pc, #124]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012c0e:	4313      	orrs	r3, r2
 8012c10:	610b      	str	r3, [r1, #16]
 8012c12:	e011      	b.n	8012c38 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012c14:	4b1d      	ldr	r3, [pc, #116]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012c16:	691b      	ldr	r3, [r3, #16]
 8012c18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012c1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012c20:	687a      	ldr	r2, [r7, #4]
 8012c22:	6892      	ldr	r2, [r2, #8]
 8012c24:	0211      	lsls	r1, r2, #8
 8012c26:	687a      	ldr	r2, [r7, #4]
 8012c28:	6952      	ldr	r2, [r2, #20]
 8012c2a:	0852      	lsrs	r2, r2, #1
 8012c2c:	3a01      	subs	r2, #1
 8012c2e:	0652      	lsls	r2, r2, #25
 8012c30:	430a      	orrs	r2, r1
 8012c32:	4916      	ldr	r1, [pc, #88]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012c34:	4313      	orrs	r3, r2
 8012c36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8012c38:	4b14      	ldr	r3, [pc, #80]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	4a13      	ldr	r2, [pc, #76]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012c3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012c42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c44:	f7fd fc6a 	bl	801051c <HAL_GetTick>
 8012c48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012c4a:	e009      	b.n	8012c60 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012c4c:	f7fd fc66 	bl	801051c <HAL_GetTick>
 8012c50:	4602      	mov	r2, r0
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	1ad3      	subs	r3, r2, r3
 8012c56:	2b02      	cmp	r3, #2
 8012c58:	d902      	bls.n	8012c60 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8012c5a:	2303      	movs	r3, #3
 8012c5c:	73fb      	strb	r3, [r7, #15]
          break;
 8012c5e:	e005      	b.n	8012c6c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012c60:	4b0a      	ldr	r3, [pc, #40]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d0ef      	beq.n	8012c4c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8012c6c:	7bfb      	ldrb	r3, [r7, #15]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d106      	bne.n	8012c80 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8012c72:	4b06      	ldr	r3, [pc, #24]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012c74:	691a      	ldr	r2, [r3, #16]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	699b      	ldr	r3, [r3, #24]
 8012c7a:	4904      	ldr	r1, [pc, #16]	; (8012c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8012c7c:	4313      	orrs	r3, r2
 8012c7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8012c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3710      	adds	r7, #16
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	40021000 	.word	0x40021000

08012c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d101      	bne.n	8012ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	e049      	b.n	8012d36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ca8:	b2db      	uxtb	r3, r3
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d106      	bne.n	8012cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012cb6:	6878      	ldr	r0, [r7, #4]
 8012cb8:	f7fd f9ba 	bl	8010030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2202      	movs	r2, #2
 8012cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681a      	ldr	r2, [r3, #0]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	3304      	adds	r3, #4
 8012ccc:	4619      	mov	r1, r3
 8012cce:	4610      	mov	r0, r2
 8012cd0:	f000 f93c 	bl	8012f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2201      	movs	r2, #1
 8012ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2201      	movs	r2, #1
 8012ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2201      	movs	r2, #1
 8012cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2201      	movs	r2, #1
 8012d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2201      	movs	r2, #1
 8012d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2201      	movs	r2, #1
 8012d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2201      	movs	r2, #1
 8012d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2201      	movs	r2, #1
 8012d28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2201      	movs	r2, #1
 8012d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3708      	adds	r7, #8
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}
	...

08012d40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012d40:	b480      	push	{r7}
 8012d42:	b085      	sub	sp, #20
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d4e:	b2db      	uxtb	r3, r3
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	d001      	beq.n	8012d58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012d54:	2301      	movs	r3, #1
 8012d56:	e033      	b.n	8012dc0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2202      	movs	r2, #2
 8012d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	4a19      	ldr	r2, [pc, #100]	; (8012dcc <HAL_TIM_Base_Start+0x8c>)
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d009      	beq.n	8012d7e <HAL_TIM_Base_Start+0x3e>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d72:	d004      	beq.n	8012d7e <HAL_TIM_Base_Start+0x3e>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	4a15      	ldr	r2, [pc, #84]	; (8012dd0 <HAL_TIM_Base_Start+0x90>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d115      	bne.n	8012daa <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	689a      	ldr	r2, [r3, #8]
 8012d84:	4b13      	ldr	r3, [pc, #76]	; (8012dd4 <HAL_TIM_Base_Start+0x94>)
 8012d86:	4013      	ands	r3, r2
 8012d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2b06      	cmp	r3, #6
 8012d8e:	d015      	beq.n	8012dbc <HAL_TIM_Base_Start+0x7c>
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d96:	d011      	beq.n	8012dbc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f042 0201 	orr.w	r2, r2, #1
 8012da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012da8:	e008      	b.n	8012dbc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	681a      	ldr	r2, [r3, #0]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	f042 0201 	orr.w	r2, r2, #1
 8012db8:	601a      	str	r2, [r3, #0]
 8012dba:	e000      	b.n	8012dbe <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012dbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012dbe:	2300      	movs	r3, #0
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3714      	adds	r7, #20
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr
 8012dcc:	40012c00 	.word	0x40012c00
 8012dd0:	40014000 	.word	0x40014000
 8012dd4:	00010007 	.word	0x00010007

08012dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b084      	sub	sp, #16
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012de8:	2b01      	cmp	r3, #1
 8012dea:	d101      	bne.n	8012df0 <HAL_TIM_ConfigClockSource+0x18>
 8012dec:	2302      	movs	r3, #2
 8012dee:	e0a8      	b.n	8012f42 <HAL_TIM_ConfigClockSource+0x16a>
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2201      	movs	r2, #1
 8012df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2202      	movs	r2, #2
 8012dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	689b      	ldr	r3, [r3, #8]
 8012e06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012e0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012e12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012e1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	68fa      	ldr	r2, [r7, #12]
 8012e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	2b40      	cmp	r3, #64	; 0x40
 8012e2a:	d067      	beq.n	8012efc <HAL_TIM_ConfigClockSource+0x124>
 8012e2c:	2b40      	cmp	r3, #64	; 0x40
 8012e2e:	d80b      	bhi.n	8012e48 <HAL_TIM_ConfigClockSource+0x70>
 8012e30:	2b10      	cmp	r3, #16
 8012e32:	d073      	beq.n	8012f1c <HAL_TIM_ConfigClockSource+0x144>
 8012e34:	2b10      	cmp	r3, #16
 8012e36:	d802      	bhi.n	8012e3e <HAL_TIM_ConfigClockSource+0x66>
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d06f      	beq.n	8012f1c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8012e3c:	e078      	b.n	8012f30 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8012e3e:	2b20      	cmp	r3, #32
 8012e40:	d06c      	beq.n	8012f1c <HAL_TIM_ConfigClockSource+0x144>
 8012e42:	2b30      	cmp	r3, #48	; 0x30
 8012e44:	d06a      	beq.n	8012f1c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8012e46:	e073      	b.n	8012f30 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8012e48:	2b70      	cmp	r3, #112	; 0x70
 8012e4a:	d00d      	beq.n	8012e68 <HAL_TIM_ConfigClockSource+0x90>
 8012e4c:	2b70      	cmp	r3, #112	; 0x70
 8012e4e:	d804      	bhi.n	8012e5a <HAL_TIM_ConfigClockSource+0x82>
 8012e50:	2b50      	cmp	r3, #80	; 0x50
 8012e52:	d033      	beq.n	8012ebc <HAL_TIM_ConfigClockSource+0xe4>
 8012e54:	2b60      	cmp	r3, #96	; 0x60
 8012e56:	d041      	beq.n	8012edc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8012e58:	e06a      	b.n	8012f30 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8012e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e5e:	d066      	beq.n	8012f2e <HAL_TIM_ConfigClockSource+0x156>
 8012e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012e64:	d017      	beq.n	8012e96 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8012e66:	e063      	b.n	8012f30 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	6818      	ldr	r0, [r3, #0]
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	6899      	ldr	r1, [r3, #8]
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	685a      	ldr	r2, [r3, #4]
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	68db      	ldr	r3, [r3, #12]
 8012e78:	f000 f946 	bl	8013108 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	689b      	ldr	r3, [r3, #8]
 8012e82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012e8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	68fa      	ldr	r2, [r7, #12]
 8012e92:	609a      	str	r2, [r3, #8]
      break;
 8012e94:	e04c      	b.n	8012f30 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6818      	ldr	r0, [r3, #0]
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	6899      	ldr	r1, [r3, #8]
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	685a      	ldr	r2, [r3, #4]
 8012ea2:	683b      	ldr	r3, [r7, #0]
 8012ea4:	68db      	ldr	r3, [r3, #12]
 8012ea6:	f000 f92f 	bl	8013108 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	689a      	ldr	r2, [r3, #8]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012eb8:	609a      	str	r2, [r3, #8]
      break;
 8012eba:	e039      	b.n	8012f30 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	6818      	ldr	r0, [r3, #0]
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	6859      	ldr	r1, [r3, #4]
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	68db      	ldr	r3, [r3, #12]
 8012ec8:	461a      	mov	r2, r3
 8012eca:	f000 f8a3 	bl	8013014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2150      	movs	r1, #80	; 0x50
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f000 f8fc 	bl	80130d2 <TIM_ITRx_SetConfig>
      break;
 8012eda:	e029      	b.n	8012f30 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6818      	ldr	r0, [r3, #0]
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	6859      	ldr	r1, [r3, #4]
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	461a      	mov	r2, r3
 8012eea:	f000 f8c2 	bl	8013072 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	2160      	movs	r1, #96	; 0x60
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f000 f8ec 	bl	80130d2 <TIM_ITRx_SetConfig>
      break;
 8012efa:	e019      	b.n	8012f30 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6818      	ldr	r0, [r3, #0]
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	6859      	ldr	r1, [r3, #4]
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	461a      	mov	r2, r3
 8012f0a:	f000 f883 	bl	8013014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	2140      	movs	r1, #64	; 0x40
 8012f14:	4618      	mov	r0, r3
 8012f16:	f000 f8dc 	bl	80130d2 <TIM_ITRx_SetConfig>
      break;
 8012f1a:	e009      	b.n	8012f30 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	4619      	mov	r1, r3
 8012f26:	4610      	mov	r0, r2
 8012f28:	f000 f8d3 	bl	80130d2 <TIM_ITRx_SetConfig>
        break;
 8012f2c:	e000      	b.n	8012f30 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8012f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2201      	movs	r2, #1
 8012f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012f40:	2300      	movs	r3, #0
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3710      	adds	r7, #16
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
	...

08012f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b085      	sub	sp, #20
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	4a2a      	ldr	r2, [pc, #168]	; (8013008 <TIM_Base_SetConfig+0xbc>)
 8012f60:	4293      	cmp	r3, r2
 8012f62:	d003      	beq.n	8012f6c <TIM_Base_SetConfig+0x20>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f6a:	d108      	bne.n	8012f7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	68fa      	ldr	r2, [r7, #12]
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4a21      	ldr	r2, [pc, #132]	; (8013008 <TIM_Base_SetConfig+0xbc>)
 8012f82:	4293      	cmp	r3, r2
 8012f84:	d00b      	beq.n	8012f9e <TIM_Base_SetConfig+0x52>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f8c:	d007      	beq.n	8012f9e <TIM_Base_SetConfig+0x52>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	4a1e      	ldr	r2, [pc, #120]	; (801300c <TIM_Base_SetConfig+0xc0>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d003      	beq.n	8012f9e <TIM_Base_SetConfig+0x52>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	4a1d      	ldr	r2, [pc, #116]	; (8013010 <TIM_Base_SetConfig+0xc4>)
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d108      	bne.n	8012fb0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	68fa      	ldr	r2, [r7, #12]
 8012fac:	4313      	orrs	r3, r2
 8012fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	695b      	ldr	r3, [r3, #20]
 8012fba:	4313      	orrs	r3, r2
 8012fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	68fa      	ldr	r2, [r7, #12]
 8012fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	689a      	ldr	r2, [r3, #8]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	681a      	ldr	r2, [r3, #0]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	4a0c      	ldr	r2, [pc, #48]	; (8013008 <TIM_Base_SetConfig+0xbc>)
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d007      	beq.n	8012fec <TIM_Base_SetConfig+0xa0>
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	4a0b      	ldr	r2, [pc, #44]	; (801300c <TIM_Base_SetConfig+0xc0>)
 8012fe0:	4293      	cmp	r3, r2
 8012fe2:	d003      	beq.n	8012fec <TIM_Base_SetConfig+0xa0>
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	4a0a      	ldr	r2, [pc, #40]	; (8013010 <TIM_Base_SetConfig+0xc4>)
 8012fe8:	4293      	cmp	r3, r2
 8012fea:	d103      	bne.n	8012ff4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	691a      	ldr	r2, [r3, #16]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	615a      	str	r2, [r3, #20]
}
 8012ffa:	bf00      	nop
 8012ffc:	3714      	adds	r7, #20
 8012ffe:	46bd      	mov	sp, r7
 8013000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013004:	4770      	bx	lr
 8013006:	bf00      	nop
 8013008:	40012c00 	.word	0x40012c00
 801300c:	40014000 	.word	0x40014000
 8013010:	40014400 	.word	0x40014400

08013014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013014:	b480      	push	{r7}
 8013016:	b087      	sub	sp, #28
 8013018:	af00      	add	r7, sp, #0
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	6a1b      	ldr	r3, [r3, #32]
 8013024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	6a1b      	ldr	r3, [r3, #32]
 801302a:	f023 0201 	bic.w	r2, r3, #1
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	699b      	ldr	r3, [r3, #24]
 8013036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013038:	693b      	ldr	r3, [r7, #16]
 801303a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801303e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	011b      	lsls	r3, r3, #4
 8013044:	693a      	ldr	r2, [r7, #16]
 8013046:	4313      	orrs	r3, r2
 8013048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	f023 030a 	bic.w	r3, r3, #10
 8013050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013052:	697a      	ldr	r2, [r7, #20]
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	4313      	orrs	r3, r2
 8013058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	693a      	ldr	r2, [r7, #16]
 801305e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	697a      	ldr	r2, [r7, #20]
 8013064:	621a      	str	r2, [r3, #32]
}
 8013066:	bf00      	nop
 8013068:	371c      	adds	r7, #28
 801306a:	46bd      	mov	sp, r7
 801306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013070:	4770      	bx	lr

08013072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013072:	b480      	push	{r7}
 8013074:	b087      	sub	sp, #28
 8013076:	af00      	add	r7, sp, #0
 8013078:	60f8      	str	r0, [r7, #12]
 801307a:	60b9      	str	r1, [r7, #8]
 801307c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	6a1b      	ldr	r3, [r3, #32]
 8013082:	f023 0210 	bic.w	r2, r3, #16
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	699b      	ldr	r3, [r3, #24]
 801308e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	6a1b      	ldr	r3, [r3, #32]
 8013094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801309c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	031b      	lsls	r3, r3, #12
 80130a2:	697a      	ldr	r2, [r7, #20]
 80130a4:	4313      	orrs	r3, r2
 80130a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80130ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	011b      	lsls	r3, r3, #4
 80130b4:	693a      	ldr	r2, [r7, #16]
 80130b6:	4313      	orrs	r3, r2
 80130b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	697a      	ldr	r2, [r7, #20]
 80130be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	693a      	ldr	r2, [r7, #16]
 80130c4:	621a      	str	r2, [r3, #32]
}
 80130c6:	bf00      	nop
 80130c8:	371c      	adds	r7, #28
 80130ca:	46bd      	mov	sp, r7
 80130cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d0:	4770      	bx	lr

080130d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80130d2:	b480      	push	{r7}
 80130d4:	b085      	sub	sp, #20
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
 80130da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	689b      	ldr	r3, [r3, #8]
 80130e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80130ea:	683a      	ldr	r2, [r7, #0]
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	4313      	orrs	r3, r2
 80130f0:	f043 0307 	orr.w	r3, r3, #7
 80130f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	68fa      	ldr	r2, [r7, #12]
 80130fa:	609a      	str	r2, [r3, #8]
}
 80130fc:	bf00      	nop
 80130fe:	3714      	adds	r7, #20
 8013100:	46bd      	mov	sp, r7
 8013102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013106:	4770      	bx	lr

08013108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013108:	b480      	push	{r7}
 801310a:	b087      	sub	sp, #28
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
 8013114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	689b      	ldr	r3, [r3, #8]
 801311a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	021a      	lsls	r2, r3, #8
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	431a      	orrs	r2, r3
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	4313      	orrs	r3, r2
 8013130:	697a      	ldr	r2, [r7, #20]
 8013132:	4313      	orrs	r3, r2
 8013134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	697a      	ldr	r2, [r7, #20]
 801313a:	609a      	str	r2, [r3, #8]
}
 801313c:	bf00      	nop
 801313e:	371c      	adds	r7, #28
 8013140:	46bd      	mov	sp, r7
 8013142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013146:	4770      	bx	lr

08013148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013148:	b480      	push	{r7}
 801314a:	b085      	sub	sp, #20
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
 8013150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013158:	2b01      	cmp	r3, #1
 801315a:	d101      	bne.n	8013160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801315c:	2302      	movs	r3, #2
 801315e:	e04f      	b.n	8013200 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2201      	movs	r2, #1
 8013164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2202      	movs	r2, #2
 801316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4a21      	ldr	r2, [pc, #132]	; (801320c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8013186:	4293      	cmp	r3, r2
 8013188:	d108      	bne.n	801319c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013190:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	68fa      	ldr	r2, [r7, #12]
 8013198:	4313      	orrs	r3, r2
 801319a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80131a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	68fa      	ldr	r2, [r7, #12]
 80131aa:	4313      	orrs	r3, r2
 80131ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	68fa      	ldr	r2, [r7, #12]
 80131b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	4a14      	ldr	r2, [pc, #80]	; (801320c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80131bc:	4293      	cmp	r3, r2
 80131be:	d009      	beq.n	80131d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80131c8:	d004      	beq.n	80131d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4a10      	ldr	r2, [pc, #64]	; (8013210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d10c      	bne.n	80131ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80131da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	689b      	ldr	r3, [r3, #8]
 80131e0:	68ba      	ldr	r2, [r7, #8]
 80131e2:	4313      	orrs	r3, r2
 80131e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	68ba      	ldr	r2, [r7, #8]
 80131ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2201      	movs	r2, #1
 80131f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2200      	movs	r2, #0
 80131fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80131fe:	2300      	movs	r3, #0
}
 8013200:	4618      	mov	r0, r3
 8013202:	3714      	adds	r7, #20
 8013204:	46bd      	mov	sp, r7
 8013206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320a:	4770      	bx	lr
 801320c:	40012c00 	.word	0x40012c00
 8013210:	40014000 	.word	0x40014000

08013214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d101      	bne.n	8013226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013222:	2301      	movs	r3, #1
 8013224:	e040      	b.n	80132a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801322a:	2b00      	cmp	r3, #0
 801322c:	d106      	bne.n	801323c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2200      	movs	r2, #0
 8013232:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7fc ff2e 	bl	8010098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2224      	movs	r2, #36	; 0x24
 8013240:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	681a      	ldr	r2, [r3, #0]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	f022 0201 	bic.w	r2, r2, #1
 8013250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f000 f8c0 	bl	80133d8 <UART_SetConfig>
 8013258:	4603      	mov	r3, r0
 801325a:	2b01      	cmp	r3, #1
 801325c:	d101      	bne.n	8013262 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801325e:	2301      	movs	r3, #1
 8013260:	e022      	b.n	80132a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013266:	2b00      	cmp	r3, #0
 8013268:	d002      	beq.n	8013270 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801326a:	6878      	ldr	r0, [r7, #4]
 801326c:	f000 fac4 	bl	80137f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	685a      	ldr	r2, [r3, #4]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801327e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	689a      	ldr	r2, [r3, #8]
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801328e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	681a      	ldr	r2, [r3, #0]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	f042 0201 	orr.w	r2, r2, #1
 801329e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f000 fb4b 	bl	801393c <UART_CheckIdleState>
 80132a6:	4603      	mov	r3, r0
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3708      	adds	r7, #8
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b08a      	sub	sp, #40	; 0x28
 80132b4:	af02      	add	r7, sp, #8
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	603b      	str	r3, [r7, #0]
 80132bc:	4613      	mov	r3, r2
 80132be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132c4:	2b20      	cmp	r3, #32
 80132c6:	f040 8081 	bne.w	80133cc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d002      	beq.n	80132d6 <HAL_UART_Transmit+0x26>
 80132d0:	88fb      	ldrh	r3, [r7, #6]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d101      	bne.n	80132da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80132d6:	2301      	movs	r3, #1
 80132d8:	e079      	b.n	80133ce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80132e0:	2b01      	cmp	r3, #1
 80132e2:	d101      	bne.n	80132e8 <HAL_UART_Transmit+0x38>
 80132e4:	2302      	movs	r3, #2
 80132e6:	e072      	b.n	80133ce <HAL_UART_Transmit+0x11e>
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2201      	movs	r2, #1
 80132ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	2200      	movs	r2, #0
 80132f4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2221      	movs	r2, #33	; 0x21
 80132fa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80132fc:	f7fd f90e 	bl	801051c <HAL_GetTick>
 8013300:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	88fa      	ldrh	r2, [r7, #6]
 8013306:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	88fa      	ldrh	r2, [r7, #6]
 801330e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	689b      	ldr	r3, [r3, #8]
 8013316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801331a:	d108      	bne.n	801332e <HAL_UART_Transmit+0x7e>
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	691b      	ldr	r3, [r3, #16]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d104      	bne.n	801332e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8013324:	2300      	movs	r3, #0
 8013326:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	61bb      	str	r3, [r7, #24]
 801332c:	e003      	b.n	8013336 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013332:	2300      	movs	r3, #0
 8013334:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	2200      	movs	r2, #0
 801333a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 801333e:	e02d      	b.n	801339c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	9300      	str	r3, [sp, #0]
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	2200      	movs	r2, #0
 8013348:	2180      	movs	r1, #128	; 0x80
 801334a:	68f8      	ldr	r0, [r7, #12]
 801334c:	f000 fb3b 	bl	80139c6 <UART_WaitOnFlagUntilTimeout>
 8013350:	4603      	mov	r3, r0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d001      	beq.n	801335a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8013356:	2303      	movs	r3, #3
 8013358:	e039      	b.n	80133ce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 801335a:	69fb      	ldr	r3, [r7, #28]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d10b      	bne.n	8013378 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	881a      	ldrh	r2, [r3, #0]
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801336c:	b292      	uxth	r2, r2
 801336e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	3302      	adds	r3, #2
 8013374:	61bb      	str	r3, [r7, #24]
 8013376:	e008      	b.n	801338a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013378:	69fb      	ldr	r3, [r7, #28]
 801337a:	781a      	ldrb	r2, [r3, #0]
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	b292      	uxth	r2, r2
 8013382:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013384:	69fb      	ldr	r3, [r7, #28]
 8013386:	3301      	adds	r3, #1
 8013388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013390:	b29b      	uxth	r3, r3
 8013392:	3b01      	subs	r3, #1
 8013394:	b29a      	uxth	r2, r3
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80133a2:	b29b      	uxth	r3, r3
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d1cb      	bne.n	8013340 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	9300      	str	r3, [sp, #0]
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	2200      	movs	r2, #0
 80133b0:	2140      	movs	r1, #64	; 0x40
 80133b2:	68f8      	ldr	r0, [r7, #12]
 80133b4:	f000 fb07 	bl	80139c6 <UART_WaitOnFlagUntilTimeout>
 80133b8:	4603      	mov	r3, r0
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d001      	beq.n	80133c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80133be:	2303      	movs	r3, #3
 80133c0:	e005      	b.n	80133ce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2220      	movs	r2, #32
 80133c6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80133c8:	2300      	movs	r3, #0
 80133ca:	e000      	b.n	80133ce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80133cc:	2302      	movs	r3, #2
  }
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3720      	adds	r7, #32
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
	...

080133d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80133d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80133dc:	b088      	sub	sp, #32
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80133e2:	2300      	movs	r3, #0
 80133e4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	689a      	ldr	r2, [r3, #8]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	691b      	ldr	r3, [r3, #16]
 80133ee:	431a      	orrs	r2, r3
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	695b      	ldr	r3, [r3, #20]
 80133f4:	431a      	orrs	r2, r3
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	69db      	ldr	r3, [r3, #28]
 80133fa:	4313      	orrs	r3, r2
 80133fc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	681a      	ldr	r2, [r3, #0]
 8013404:	4bb0      	ldr	r3, [pc, #704]	; (80136c8 <UART_SetConfig+0x2f0>)
 8013406:	4013      	ands	r3, r2
 8013408:	687a      	ldr	r2, [r7, #4]
 801340a:	6812      	ldr	r2, [r2, #0]
 801340c:	69f9      	ldr	r1, [r7, #28]
 801340e:	430b      	orrs	r3, r1
 8013410:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	68da      	ldr	r2, [r3, #12]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	430a      	orrs	r2, r1
 8013426:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	699b      	ldr	r3, [r3, #24]
 801342c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	4aa6      	ldr	r2, [pc, #664]	; (80136cc <UART_SetConfig+0x2f4>)
 8013434:	4293      	cmp	r3, r2
 8013436:	d004      	beq.n	8013442 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6a1b      	ldr	r3, [r3, #32]
 801343c:	69fa      	ldr	r2, [r7, #28]
 801343e:	4313      	orrs	r3, r2
 8013440:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	689b      	ldr	r3, [r3, #8]
 8013448:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	69fa      	ldr	r2, [r7, #28]
 8013452:	430a      	orrs	r2, r1
 8013454:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	4a9d      	ldr	r2, [pc, #628]	; (80136d0 <UART_SetConfig+0x2f8>)
 801345c:	4293      	cmp	r3, r2
 801345e:	d121      	bne.n	80134a4 <UART_SetConfig+0xcc>
 8013460:	4b9c      	ldr	r3, [pc, #624]	; (80136d4 <UART_SetConfig+0x2fc>)
 8013462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013466:	f003 0303 	and.w	r3, r3, #3
 801346a:	2b03      	cmp	r3, #3
 801346c:	d816      	bhi.n	801349c <UART_SetConfig+0xc4>
 801346e:	a201      	add	r2, pc, #4	; (adr r2, 8013474 <UART_SetConfig+0x9c>)
 8013470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013474:	08013485 	.word	0x08013485
 8013478:	08013491 	.word	0x08013491
 801347c:	0801348b 	.word	0x0801348b
 8013480:	08013497 	.word	0x08013497
 8013484:	2301      	movs	r3, #1
 8013486:	76fb      	strb	r3, [r7, #27]
 8013488:	e072      	b.n	8013570 <UART_SetConfig+0x198>
 801348a:	2302      	movs	r3, #2
 801348c:	76fb      	strb	r3, [r7, #27]
 801348e:	e06f      	b.n	8013570 <UART_SetConfig+0x198>
 8013490:	2304      	movs	r3, #4
 8013492:	76fb      	strb	r3, [r7, #27]
 8013494:	e06c      	b.n	8013570 <UART_SetConfig+0x198>
 8013496:	2308      	movs	r3, #8
 8013498:	76fb      	strb	r3, [r7, #27]
 801349a:	e069      	b.n	8013570 <UART_SetConfig+0x198>
 801349c:	2310      	movs	r3, #16
 801349e:	76fb      	strb	r3, [r7, #27]
 80134a0:	bf00      	nop
 80134a2:	e065      	b.n	8013570 <UART_SetConfig+0x198>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	4a8b      	ldr	r2, [pc, #556]	; (80136d8 <UART_SetConfig+0x300>)
 80134aa:	4293      	cmp	r3, r2
 80134ac:	d134      	bne.n	8013518 <UART_SetConfig+0x140>
 80134ae:	4b89      	ldr	r3, [pc, #548]	; (80136d4 <UART_SetConfig+0x2fc>)
 80134b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80134b4:	f003 030c 	and.w	r3, r3, #12
 80134b8:	2b0c      	cmp	r3, #12
 80134ba:	d829      	bhi.n	8013510 <UART_SetConfig+0x138>
 80134bc:	a201      	add	r2, pc, #4	; (adr r2, 80134c4 <UART_SetConfig+0xec>)
 80134be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134c2:	bf00      	nop
 80134c4:	080134f9 	.word	0x080134f9
 80134c8:	08013511 	.word	0x08013511
 80134cc:	08013511 	.word	0x08013511
 80134d0:	08013511 	.word	0x08013511
 80134d4:	08013505 	.word	0x08013505
 80134d8:	08013511 	.word	0x08013511
 80134dc:	08013511 	.word	0x08013511
 80134e0:	08013511 	.word	0x08013511
 80134e4:	080134ff 	.word	0x080134ff
 80134e8:	08013511 	.word	0x08013511
 80134ec:	08013511 	.word	0x08013511
 80134f0:	08013511 	.word	0x08013511
 80134f4:	0801350b 	.word	0x0801350b
 80134f8:	2300      	movs	r3, #0
 80134fa:	76fb      	strb	r3, [r7, #27]
 80134fc:	e038      	b.n	8013570 <UART_SetConfig+0x198>
 80134fe:	2302      	movs	r3, #2
 8013500:	76fb      	strb	r3, [r7, #27]
 8013502:	e035      	b.n	8013570 <UART_SetConfig+0x198>
 8013504:	2304      	movs	r3, #4
 8013506:	76fb      	strb	r3, [r7, #27]
 8013508:	e032      	b.n	8013570 <UART_SetConfig+0x198>
 801350a:	2308      	movs	r3, #8
 801350c:	76fb      	strb	r3, [r7, #27]
 801350e:	e02f      	b.n	8013570 <UART_SetConfig+0x198>
 8013510:	2310      	movs	r3, #16
 8013512:	76fb      	strb	r3, [r7, #27]
 8013514:	bf00      	nop
 8013516:	e02b      	b.n	8013570 <UART_SetConfig+0x198>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	4a6b      	ldr	r2, [pc, #428]	; (80136cc <UART_SetConfig+0x2f4>)
 801351e:	4293      	cmp	r3, r2
 8013520:	d124      	bne.n	801356c <UART_SetConfig+0x194>
 8013522:	4b6c      	ldr	r3, [pc, #432]	; (80136d4 <UART_SetConfig+0x2fc>)
 8013524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801352c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013530:	d012      	beq.n	8013558 <UART_SetConfig+0x180>
 8013532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013536:	d802      	bhi.n	801353e <UART_SetConfig+0x166>
 8013538:	2b00      	cmp	r3, #0
 801353a:	d007      	beq.n	801354c <UART_SetConfig+0x174>
 801353c:	e012      	b.n	8013564 <UART_SetConfig+0x18c>
 801353e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013542:	d006      	beq.n	8013552 <UART_SetConfig+0x17a>
 8013544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013548:	d009      	beq.n	801355e <UART_SetConfig+0x186>
 801354a:	e00b      	b.n	8013564 <UART_SetConfig+0x18c>
 801354c:	2300      	movs	r3, #0
 801354e:	76fb      	strb	r3, [r7, #27]
 8013550:	e00e      	b.n	8013570 <UART_SetConfig+0x198>
 8013552:	2302      	movs	r3, #2
 8013554:	76fb      	strb	r3, [r7, #27]
 8013556:	e00b      	b.n	8013570 <UART_SetConfig+0x198>
 8013558:	2304      	movs	r3, #4
 801355a:	76fb      	strb	r3, [r7, #27]
 801355c:	e008      	b.n	8013570 <UART_SetConfig+0x198>
 801355e:	2308      	movs	r3, #8
 8013560:	76fb      	strb	r3, [r7, #27]
 8013562:	e005      	b.n	8013570 <UART_SetConfig+0x198>
 8013564:	2310      	movs	r3, #16
 8013566:	76fb      	strb	r3, [r7, #27]
 8013568:	bf00      	nop
 801356a:	e001      	b.n	8013570 <UART_SetConfig+0x198>
 801356c:	2310      	movs	r3, #16
 801356e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	4a55      	ldr	r2, [pc, #340]	; (80136cc <UART_SetConfig+0x2f4>)
 8013576:	4293      	cmp	r3, r2
 8013578:	d174      	bne.n	8013664 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801357a:	7efb      	ldrb	r3, [r7, #27]
 801357c:	2b08      	cmp	r3, #8
 801357e:	d824      	bhi.n	80135ca <UART_SetConfig+0x1f2>
 8013580:	a201      	add	r2, pc, #4	; (adr r2, 8013588 <UART_SetConfig+0x1b0>)
 8013582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013586:	bf00      	nop
 8013588:	080135ad 	.word	0x080135ad
 801358c:	080135cb 	.word	0x080135cb
 8013590:	080135b5 	.word	0x080135b5
 8013594:	080135cb 	.word	0x080135cb
 8013598:	080135bb 	.word	0x080135bb
 801359c:	080135cb 	.word	0x080135cb
 80135a0:	080135cb 	.word	0x080135cb
 80135a4:	080135cb 	.word	0x080135cb
 80135a8:	080135c3 	.word	0x080135c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80135ac:	f7fe fff2 	bl	8012594 <HAL_RCC_GetPCLK1Freq>
 80135b0:	6178      	str	r0, [r7, #20]
        break;
 80135b2:	e00f      	b.n	80135d4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80135b4:	4b49      	ldr	r3, [pc, #292]	; (80136dc <UART_SetConfig+0x304>)
 80135b6:	617b      	str	r3, [r7, #20]
        break;
 80135b8:	e00c      	b.n	80135d4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80135ba:	f7fe ff55 	bl	8012468 <HAL_RCC_GetSysClockFreq>
 80135be:	6178      	str	r0, [r7, #20]
        break;
 80135c0:	e008      	b.n	80135d4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80135c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80135c6:	617b      	str	r3, [r7, #20]
        break;
 80135c8:	e004      	b.n	80135d4 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80135ca:	2300      	movs	r3, #0
 80135cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80135ce:	2301      	movs	r3, #1
 80135d0:	76bb      	strb	r3, [r7, #26]
        break;
 80135d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	f000 8100 	beq.w	80137dc <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	685a      	ldr	r2, [r3, #4]
 80135e0:	4613      	mov	r3, r2
 80135e2:	005b      	lsls	r3, r3, #1
 80135e4:	4413      	add	r3, r2
 80135e6:	697a      	ldr	r2, [r7, #20]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d305      	bcc.n	80135f8 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	685b      	ldr	r3, [r3, #4]
 80135f0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80135f2:	697a      	ldr	r2, [r7, #20]
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d902      	bls.n	80135fe <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80135f8:	2301      	movs	r3, #1
 80135fa:	76bb      	strb	r3, [r7, #26]
 80135fc:	e0ee      	b.n	80137dc <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	4619      	mov	r1, r3
 8013602:	f04f 0200 	mov.w	r2, #0
 8013606:	f04f 0300 	mov.w	r3, #0
 801360a:	f04f 0400 	mov.w	r4, #0
 801360e:	0214      	lsls	r4, r2, #8
 8013610:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8013614:	020b      	lsls	r3, r1, #8
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	6852      	ldr	r2, [r2, #4]
 801361a:	0852      	lsrs	r2, r2, #1
 801361c:	4611      	mov	r1, r2
 801361e:	f04f 0200 	mov.w	r2, #0
 8013622:	eb13 0b01 	adds.w	fp, r3, r1
 8013626:	eb44 0c02 	adc.w	ip, r4, r2
 801362a:	4658      	mov	r0, fp
 801362c:	4661      	mov	r1, ip
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	f04f 0400 	mov.w	r4, #0
 8013636:	461a      	mov	r2, r3
 8013638:	4623      	mov	r3, r4
 801363a:	f7ed fb65 	bl	8000d08 <__aeabi_uldivmod>
 801363e:	4603      	mov	r3, r0
 8013640:	460c      	mov	r4, r1
 8013642:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801364a:	d308      	bcc.n	801365e <UART_SetConfig+0x286>
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013652:	d204      	bcs.n	801365e <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	693a      	ldr	r2, [r7, #16]
 801365a:	60da      	str	r2, [r3, #12]
 801365c:	e0be      	b.n	80137dc <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 801365e:	2301      	movs	r3, #1
 8013660:	76bb      	strb	r3, [r7, #26]
 8013662:	e0bb      	b.n	80137dc <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	69db      	ldr	r3, [r3, #28]
 8013668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801366c:	d169      	bne.n	8013742 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 801366e:	7efb      	ldrb	r3, [r7, #27]
 8013670:	2b08      	cmp	r3, #8
 8013672:	d835      	bhi.n	80136e0 <UART_SetConfig+0x308>
 8013674:	a201      	add	r2, pc, #4	; (adr r2, 801367c <UART_SetConfig+0x2a4>)
 8013676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801367a:	bf00      	nop
 801367c:	080136a1 	.word	0x080136a1
 8013680:	080136a9 	.word	0x080136a9
 8013684:	080136b1 	.word	0x080136b1
 8013688:	080136e1 	.word	0x080136e1
 801368c:	080136b7 	.word	0x080136b7
 8013690:	080136e1 	.word	0x080136e1
 8013694:	080136e1 	.word	0x080136e1
 8013698:	080136e1 	.word	0x080136e1
 801369c:	080136bf 	.word	0x080136bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80136a0:	f7fe ff78 	bl	8012594 <HAL_RCC_GetPCLK1Freq>
 80136a4:	6178      	str	r0, [r7, #20]
        break;
 80136a6:	e020      	b.n	80136ea <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80136a8:	f7fe ff8a 	bl	80125c0 <HAL_RCC_GetPCLK2Freq>
 80136ac:	6178      	str	r0, [r7, #20]
        break;
 80136ae:	e01c      	b.n	80136ea <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80136b0:	4b0a      	ldr	r3, [pc, #40]	; (80136dc <UART_SetConfig+0x304>)
 80136b2:	617b      	str	r3, [r7, #20]
        break;
 80136b4:	e019      	b.n	80136ea <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80136b6:	f7fe fed7 	bl	8012468 <HAL_RCC_GetSysClockFreq>
 80136ba:	6178      	str	r0, [r7, #20]
        break;
 80136bc:	e015      	b.n	80136ea <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80136be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136c2:	617b      	str	r3, [r7, #20]
        break;
 80136c4:	e011      	b.n	80136ea <UART_SetConfig+0x312>
 80136c6:	bf00      	nop
 80136c8:	efff69f3 	.word	0xefff69f3
 80136cc:	40008000 	.word	0x40008000
 80136d0:	40013800 	.word	0x40013800
 80136d4:	40021000 	.word	0x40021000
 80136d8:	40004400 	.word	0x40004400
 80136dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80136e0:	2300      	movs	r3, #0
 80136e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80136e4:	2301      	movs	r3, #1
 80136e6:	76bb      	strb	r3, [r7, #26]
        break;
 80136e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d075      	beq.n	80137dc <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	005a      	lsls	r2, r3, #1
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	685b      	ldr	r3, [r3, #4]
 80136f8:	085b      	lsrs	r3, r3, #1
 80136fa:	441a      	add	r2, r3
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	fbb2 f3f3 	udiv	r3, r2, r3
 8013704:	b29b      	uxth	r3, r3
 8013706:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	2b0f      	cmp	r3, #15
 801370c:	d916      	bls.n	801373c <UART_SetConfig+0x364>
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013714:	d212      	bcs.n	801373c <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	b29b      	uxth	r3, r3
 801371a:	f023 030f 	bic.w	r3, r3, #15
 801371e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	085b      	lsrs	r3, r3, #1
 8013724:	b29b      	uxth	r3, r3
 8013726:	f003 0307 	and.w	r3, r3, #7
 801372a:	b29a      	uxth	r2, r3
 801372c:	89fb      	ldrh	r3, [r7, #14]
 801372e:	4313      	orrs	r3, r2
 8013730:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	89fa      	ldrh	r2, [r7, #14]
 8013738:	60da      	str	r2, [r3, #12]
 801373a:	e04f      	b.n	80137dc <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 801373c:	2301      	movs	r3, #1
 801373e:	76bb      	strb	r3, [r7, #26]
 8013740:	e04c      	b.n	80137dc <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013742:	7efb      	ldrb	r3, [r7, #27]
 8013744:	2b08      	cmp	r3, #8
 8013746:	d828      	bhi.n	801379a <UART_SetConfig+0x3c2>
 8013748:	a201      	add	r2, pc, #4	; (adr r2, 8013750 <UART_SetConfig+0x378>)
 801374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801374e:	bf00      	nop
 8013750:	08013775 	.word	0x08013775
 8013754:	0801377d 	.word	0x0801377d
 8013758:	08013785 	.word	0x08013785
 801375c:	0801379b 	.word	0x0801379b
 8013760:	0801378b 	.word	0x0801378b
 8013764:	0801379b 	.word	0x0801379b
 8013768:	0801379b 	.word	0x0801379b
 801376c:	0801379b 	.word	0x0801379b
 8013770:	08013793 	.word	0x08013793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013774:	f7fe ff0e 	bl	8012594 <HAL_RCC_GetPCLK1Freq>
 8013778:	6178      	str	r0, [r7, #20]
        break;
 801377a:	e013      	b.n	80137a4 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801377c:	f7fe ff20 	bl	80125c0 <HAL_RCC_GetPCLK2Freq>
 8013780:	6178      	str	r0, [r7, #20]
        break;
 8013782:	e00f      	b.n	80137a4 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013784:	4b1b      	ldr	r3, [pc, #108]	; (80137f4 <UART_SetConfig+0x41c>)
 8013786:	617b      	str	r3, [r7, #20]
        break;
 8013788:	e00c      	b.n	80137a4 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801378a:	f7fe fe6d 	bl	8012468 <HAL_RCC_GetSysClockFreq>
 801378e:	6178      	str	r0, [r7, #20]
        break;
 8013790:	e008      	b.n	80137a4 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013796:	617b      	str	r3, [r7, #20]
        break;
 8013798:	e004      	b.n	80137a4 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 801379a:	2300      	movs	r3, #0
 801379c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801379e:	2301      	movs	r3, #1
 80137a0:	76bb      	strb	r3, [r7, #26]
        break;
 80137a2:	bf00      	nop
    }

    if (pclk != 0U)
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d018      	beq.n	80137dc <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	685b      	ldr	r3, [r3, #4]
 80137ae:	085a      	lsrs	r2, r3, #1
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	441a      	add	r2, r3
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	685b      	ldr	r3, [r3, #4]
 80137b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80137bc:	b29b      	uxth	r3, r3
 80137be:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	2b0f      	cmp	r3, #15
 80137c4:	d908      	bls.n	80137d8 <UART_SetConfig+0x400>
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137cc:	d204      	bcs.n	80137d8 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	693a      	ldr	r2, [r7, #16]
 80137d4:	60da      	str	r2, [r3, #12]
 80137d6:	e001      	b.n	80137dc <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80137d8:	2301      	movs	r3, #1
 80137da:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2200      	movs	r2, #0
 80137e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2200      	movs	r2, #0
 80137e6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80137e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3720      	adds	r7, #32
 80137ee:	46bd      	mov	sp, r7
 80137f0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80137f4:	00f42400 	.word	0x00f42400

080137f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013804:	f003 0301 	and.w	r3, r3, #1
 8013808:	2b00      	cmp	r3, #0
 801380a:	d00a      	beq.n	8013822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	430a      	orrs	r2, r1
 8013820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013826:	f003 0302 	and.w	r3, r3, #2
 801382a:	2b00      	cmp	r3, #0
 801382c:	d00a      	beq.n	8013844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	430a      	orrs	r2, r1
 8013842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013848:	f003 0304 	and.w	r3, r3, #4
 801384c:	2b00      	cmp	r3, #0
 801384e:	d00a      	beq.n	8013866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	430a      	orrs	r2, r1
 8013864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801386a:	f003 0308 	and.w	r3, r3, #8
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00a      	beq.n	8013888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	430a      	orrs	r2, r1
 8013886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801388c:	f003 0310 	and.w	r3, r3, #16
 8013890:	2b00      	cmp	r3, #0
 8013892:	d00a      	beq.n	80138aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	689b      	ldr	r3, [r3, #8]
 801389a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	430a      	orrs	r2, r1
 80138a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ae:	f003 0320 	and.w	r3, r3, #32
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d00a      	beq.n	80138cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	689b      	ldr	r3, [r3, #8]
 80138bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	430a      	orrs	r2, r1
 80138ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d01a      	beq.n	801390e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	430a      	orrs	r2, r1
 80138ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80138f6:	d10a      	bne.n	801390e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	430a      	orrs	r2, r1
 801390c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013916:	2b00      	cmp	r3, #0
 8013918:	d00a      	beq.n	8013930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	685b      	ldr	r3, [r3, #4]
 8013920:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	430a      	orrs	r2, r1
 801392e:	605a      	str	r2, [r3, #4]
  }
}
 8013930:	bf00      	nop
 8013932:	370c      	adds	r7, #12
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr

0801393c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b086      	sub	sp, #24
 8013940:	af02      	add	r7, sp, #8
 8013942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2200      	movs	r2, #0
 8013948:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801394a:	f7fc fde7 	bl	801051c <HAL_GetTick>
 801394e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	f003 0308 	and.w	r3, r3, #8
 801395a:	2b08      	cmp	r3, #8
 801395c:	d10e      	bne.n	801397c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801395e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	2200      	movs	r2, #0
 8013968:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801396c:	6878      	ldr	r0, [r7, #4]
 801396e:	f000 f82a 	bl	80139c6 <UART_WaitOnFlagUntilTimeout>
 8013972:	4603      	mov	r3, r0
 8013974:	2b00      	cmp	r3, #0
 8013976:	d001      	beq.n	801397c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013978:	2303      	movs	r3, #3
 801397a:	e020      	b.n	80139be <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f003 0304 	and.w	r3, r3, #4
 8013986:	2b04      	cmp	r3, #4
 8013988:	d10e      	bne.n	80139a8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801398a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801398e:	9300      	str	r3, [sp, #0]
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	2200      	movs	r2, #0
 8013994:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013998:	6878      	ldr	r0, [r7, #4]
 801399a:	f000 f814 	bl	80139c6 <UART_WaitOnFlagUntilTimeout>
 801399e:	4603      	mov	r3, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d001      	beq.n	80139a8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80139a4:	2303      	movs	r3, #3
 80139a6:	e00a      	b.n	80139be <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2220      	movs	r2, #32
 80139ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2220      	movs	r2, #32
 80139b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2200      	movs	r2, #0
 80139b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80139bc:	2300      	movs	r3, #0
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3710      	adds	r7, #16
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}

080139c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80139c6:	b580      	push	{r7, lr}
 80139c8:	b084      	sub	sp, #16
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	60f8      	str	r0, [r7, #12]
 80139ce:	60b9      	str	r1, [r7, #8]
 80139d0:	603b      	str	r3, [r7, #0]
 80139d2:	4613      	mov	r3, r2
 80139d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80139d6:	e05d      	b.n	8013a94 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80139d8:	69bb      	ldr	r3, [r7, #24]
 80139da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139de:	d059      	beq.n	8013a94 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80139e0:	f7fc fd9c 	bl	801051c <HAL_GetTick>
 80139e4:	4602      	mov	r2, r0
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	1ad3      	subs	r3, r2, r3
 80139ea:	69ba      	ldr	r2, [r7, #24]
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d302      	bcc.n	80139f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80139f0:	69bb      	ldr	r3, [r7, #24]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d11b      	bne.n	8013a2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	681a      	ldr	r2, [r3, #0]
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013a04:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	689a      	ldr	r2, [r3, #8]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	f022 0201 	bic.w	r2, r2, #1
 8013a14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	2220      	movs	r2, #32
 8013a1a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	2220      	movs	r2, #32
 8013a20:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2200      	movs	r2, #0
 8013a26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8013a2a:	2303      	movs	r3, #3
 8013a2c:	e042      	b.n	8013ab4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	f003 0304 	and.w	r3, r3, #4
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d02b      	beq.n	8013a94 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	69db      	ldr	r3, [r3, #28]
 8013a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013a4a:	d123      	bne.n	8013a94 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013a54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	681a      	ldr	r2, [r3, #0]
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013a64:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	689a      	ldr	r2, [r3, #8]
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	f022 0201 	bic.w	r2, r2, #1
 8013a74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2220      	movs	r2, #32
 8013a7a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	2220      	movs	r2, #32
 8013a80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2220      	movs	r2, #32
 8013a86:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8013a90:	2303      	movs	r3, #3
 8013a92:	e00f      	b.n	8013ab4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	69da      	ldr	r2, [r3, #28]
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	4013      	ands	r3, r2
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	bf0c      	ite	eq
 8013aa4:	2301      	moveq	r3, #1
 8013aa6:	2300      	movne	r3, #0
 8013aa8:	b2db      	uxtb	r3, r3
 8013aaa:	461a      	mov	r2, r3
 8013aac:	79fb      	ldrb	r3, [r7, #7]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d092      	beq.n	80139d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013ab2:	2300      	movs	r3, #0
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3710      	adds	r7, #16
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}

08013abc <_ZdaPv>:
 8013abc:	f000 b830 	b.w	8013b20 <_ZdlPv>

08013ac0 <__cxa_pure_virtual>:
 8013ac0:	b508      	push	{r3, lr}
 8013ac2:	f000 f83b 	bl	8013b3c <_ZSt9terminatev>

08013ac6 <_Znaj>:
 8013ac6:	f000 b802 	b.w	8013ace <_Znwj>

08013aca <_ZdlPvj>:
 8013aca:	f000 b829 	b.w	8013b20 <_ZdlPv>

08013ace <_Znwj>:
 8013ace:	b510      	push	{r4, lr}
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	bf14      	ite	ne
 8013ad4:	4604      	movne	r4, r0
 8013ad6:	2401      	moveq	r4, #1
 8013ad8:	4620      	mov	r0, r4
 8013ada:	f000 fb71 	bl	80141c0 <malloc>
 8013ade:	b930      	cbnz	r0, 8013aee <_Znwj+0x20>
 8013ae0:	f000 f816 	bl	8013b10 <_ZSt15get_new_handlerv>
 8013ae4:	b908      	cbnz	r0, 8013aea <_Znwj+0x1c>
 8013ae6:	f000 fab3 	bl	8014050 <abort>
 8013aea:	4780      	blx	r0
 8013aec:	e7f4      	b.n	8013ad8 <_Znwj+0xa>
 8013aee:	bd10      	pop	{r4, pc}

08013af0 <__cxa_guard_acquire>:
 8013af0:	6803      	ldr	r3, [r0, #0]
 8013af2:	07db      	lsls	r3, r3, #31
 8013af4:	d406      	bmi.n	8013b04 <__cxa_guard_acquire+0x14>
 8013af6:	7843      	ldrb	r3, [r0, #1]
 8013af8:	b103      	cbz	r3, 8013afc <__cxa_guard_acquire+0xc>
 8013afa:	deff      	udf	#255	; 0xff
 8013afc:	2301      	movs	r3, #1
 8013afe:	7043      	strb	r3, [r0, #1]
 8013b00:	4618      	mov	r0, r3
 8013b02:	4770      	bx	lr
 8013b04:	2000      	movs	r0, #0
 8013b06:	4770      	bx	lr

08013b08 <__cxa_guard_release>:
 8013b08:	2301      	movs	r3, #1
 8013b0a:	6003      	str	r3, [r0, #0]
 8013b0c:	4770      	bx	lr
	...

08013b10 <_ZSt15get_new_handlerv>:
 8013b10:	4b02      	ldr	r3, [pc, #8]	; (8013b1c <_ZSt15get_new_handlerv+0xc>)
 8013b12:	6818      	ldr	r0, [r3, #0]
 8013b14:	f3bf 8f5b 	dmb	ish
 8013b18:	4770      	bx	lr
 8013b1a:	bf00      	nop
 8013b1c:	200006fc 	.word	0x200006fc

08013b20 <_ZdlPv>:
 8013b20:	f000 bb56 	b.w	80141d0 <free>

08013b24 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013b24:	b508      	push	{r3, lr}
 8013b26:	4780      	blx	r0
 8013b28:	f000 fa92 	bl	8014050 <abort>

08013b2c <_ZSt13get_terminatev>:
 8013b2c:	4b02      	ldr	r3, [pc, #8]	; (8013b38 <_ZSt13get_terminatev+0xc>)
 8013b2e:	6818      	ldr	r0, [r3, #0]
 8013b30:	f3bf 8f5b 	dmb	ish
 8013b34:	4770      	bx	lr
 8013b36:	bf00      	nop
 8013b38:	20000024 	.word	0x20000024

08013b3c <_ZSt9terminatev>:
 8013b3c:	b508      	push	{r3, lr}
 8013b3e:	f7ff fff5 	bl	8013b2c <_ZSt13get_terminatev>
 8013b42:	f7ff ffef 	bl	8013b24 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08013b48 <floor>:
 8013b48:	ec51 0b10 	vmov	r0, r1, d0
 8013b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013b54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013b58:	2e13      	cmp	r6, #19
 8013b5a:	460c      	mov	r4, r1
 8013b5c:	ee10 5a10 	vmov	r5, s0
 8013b60:	4680      	mov	r8, r0
 8013b62:	dc34      	bgt.n	8013bce <floor+0x86>
 8013b64:	2e00      	cmp	r6, #0
 8013b66:	da16      	bge.n	8013b96 <floor+0x4e>
 8013b68:	a335      	add	r3, pc, #212	; (adr r3, 8013c40 <floor+0xf8>)
 8013b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b6e:	f7ec fb9d 	bl	80002ac <__adddf3>
 8013b72:	2200      	movs	r2, #0
 8013b74:	2300      	movs	r3, #0
 8013b76:	f7ec ffdf 	bl	8000b38 <__aeabi_dcmpgt>
 8013b7a:	b148      	cbz	r0, 8013b90 <floor+0x48>
 8013b7c:	2c00      	cmp	r4, #0
 8013b7e:	da59      	bge.n	8013c34 <floor+0xec>
 8013b80:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013b84:	4a30      	ldr	r2, [pc, #192]	; (8013c48 <floor+0x100>)
 8013b86:	432b      	orrs	r3, r5
 8013b88:	2500      	movs	r5, #0
 8013b8a:	42ab      	cmp	r3, r5
 8013b8c:	bf18      	it	ne
 8013b8e:	4614      	movne	r4, r2
 8013b90:	4621      	mov	r1, r4
 8013b92:	4628      	mov	r0, r5
 8013b94:	e025      	b.n	8013be2 <floor+0x9a>
 8013b96:	4f2d      	ldr	r7, [pc, #180]	; (8013c4c <floor+0x104>)
 8013b98:	4137      	asrs	r7, r6
 8013b9a:	ea01 0307 	and.w	r3, r1, r7
 8013b9e:	4303      	orrs	r3, r0
 8013ba0:	d01f      	beq.n	8013be2 <floor+0x9a>
 8013ba2:	a327      	add	r3, pc, #156	; (adr r3, 8013c40 <floor+0xf8>)
 8013ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba8:	f7ec fb80 	bl	80002ac <__adddf3>
 8013bac:	2200      	movs	r2, #0
 8013bae:	2300      	movs	r3, #0
 8013bb0:	f7ec ffc2 	bl	8000b38 <__aeabi_dcmpgt>
 8013bb4:	2800      	cmp	r0, #0
 8013bb6:	d0eb      	beq.n	8013b90 <floor+0x48>
 8013bb8:	2c00      	cmp	r4, #0
 8013bba:	bfbe      	ittt	lt
 8013bbc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013bc0:	fa43 f606 	asrlt.w	r6, r3, r6
 8013bc4:	19a4      	addlt	r4, r4, r6
 8013bc6:	ea24 0407 	bic.w	r4, r4, r7
 8013bca:	2500      	movs	r5, #0
 8013bcc:	e7e0      	b.n	8013b90 <floor+0x48>
 8013bce:	2e33      	cmp	r6, #51	; 0x33
 8013bd0:	dd0b      	ble.n	8013bea <floor+0xa2>
 8013bd2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013bd6:	d104      	bne.n	8013be2 <floor+0x9a>
 8013bd8:	ee10 2a10 	vmov	r2, s0
 8013bdc:	460b      	mov	r3, r1
 8013bde:	f7ec fb65 	bl	80002ac <__adddf3>
 8013be2:	ec41 0b10 	vmov	d0, r0, r1
 8013be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013bee:	f04f 33ff 	mov.w	r3, #4294967295
 8013bf2:	fa23 f707 	lsr.w	r7, r3, r7
 8013bf6:	4207      	tst	r7, r0
 8013bf8:	d0f3      	beq.n	8013be2 <floor+0x9a>
 8013bfa:	a311      	add	r3, pc, #68	; (adr r3, 8013c40 <floor+0xf8>)
 8013bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c00:	f7ec fb54 	bl	80002ac <__adddf3>
 8013c04:	2200      	movs	r2, #0
 8013c06:	2300      	movs	r3, #0
 8013c08:	f7ec ff96 	bl	8000b38 <__aeabi_dcmpgt>
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	d0bf      	beq.n	8013b90 <floor+0x48>
 8013c10:	2c00      	cmp	r4, #0
 8013c12:	da02      	bge.n	8013c1a <floor+0xd2>
 8013c14:	2e14      	cmp	r6, #20
 8013c16:	d103      	bne.n	8013c20 <floor+0xd8>
 8013c18:	3401      	adds	r4, #1
 8013c1a:	ea25 0507 	bic.w	r5, r5, r7
 8013c1e:	e7b7      	b.n	8013b90 <floor+0x48>
 8013c20:	2301      	movs	r3, #1
 8013c22:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013c26:	fa03 f606 	lsl.w	r6, r3, r6
 8013c2a:	4435      	add	r5, r6
 8013c2c:	4545      	cmp	r5, r8
 8013c2e:	bf38      	it	cc
 8013c30:	18e4      	addcc	r4, r4, r3
 8013c32:	e7f2      	b.n	8013c1a <floor+0xd2>
 8013c34:	2500      	movs	r5, #0
 8013c36:	462c      	mov	r4, r5
 8013c38:	e7aa      	b.n	8013b90 <floor+0x48>
 8013c3a:	bf00      	nop
 8013c3c:	f3af 8000 	nop.w
 8013c40:	8800759c 	.word	0x8800759c
 8013c44:	7e37e43c 	.word	0x7e37e43c
 8013c48:	bff00000 	.word	0xbff00000
 8013c4c:	000fffff 	.word	0x000fffff

08013c50 <frexp>:
 8013c50:	b570      	push	{r4, r5, r6, lr}
 8013c52:	2100      	movs	r1, #0
 8013c54:	ec55 4b10 	vmov	r4, r5, d0
 8013c58:	6001      	str	r1, [r0, #0]
 8013c5a:	4916      	ldr	r1, [pc, #88]	; (8013cb4 <frexp+0x64>)
 8013c5c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013c60:	428b      	cmp	r3, r1
 8013c62:	4606      	mov	r6, r0
 8013c64:	462a      	mov	r2, r5
 8013c66:	dc22      	bgt.n	8013cae <frexp+0x5e>
 8013c68:	ee10 1a10 	vmov	r1, s0
 8013c6c:	4319      	orrs	r1, r3
 8013c6e:	d01e      	beq.n	8013cae <frexp+0x5e>
 8013c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013c74:	da0d      	bge.n	8013c92 <frexp+0x42>
 8013c76:	2200      	movs	r2, #0
 8013c78:	4b0f      	ldr	r3, [pc, #60]	; (8013cb8 <frexp+0x68>)
 8013c7a:	ee10 0a10 	vmov	r0, s0
 8013c7e:	4629      	mov	r1, r5
 8013c80:	f7ec fcca 	bl	8000618 <__aeabi_dmul>
 8013c84:	460a      	mov	r2, r1
 8013c86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013c8a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8013c8e:	4604      	mov	r4, r0
 8013c90:	6031      	str	r1, [r6, #0]
 8013c92:	6831      	ldr	r1, [r6, #0]
 8013c94:	151b      	asrs	r3, r3, #20
 8013c96:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8013c9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013c9e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8013ca2:	440b      	add	r3, r1
 8013ca4:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013ca8:	6033      	str	r3, [r6, #0]
 8013caa:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8013cae:	ec45 4b10 	vmov	d0, r4, r5
 8013cb2:	bd70      	pop	{r4, r5, r6, pc}
 8013cb4:	7fefffff 	.word	0x7fefffff
 8013cb8:	43500000 	.word	0x43500000

08013cbc <round>:
 8013cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cbe:	ec57 6b10 	vmov	r6, r7, d0
 8013cc2:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8013cc6:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8013cca:	2c13      	cmp	r4, #19
 8013ccc:	463b      	mov	r3, r7
 8013cce:	463d      	mov	r5, r7
 8013cd0:	dc17      	bgt.n	8013d02 <round+0x46>
 8013cd2:	2c00      	cmp	r4, #0
 8013cd4:	da09      	bge.n	8013cea <round+0x2e>
 8013cd6:	3401      	adds	r4, #1
 8013cd8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8013cdc:	d103      	bne.n	8013ce6 <round+0x2a>
 8013cde:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013ce2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013ce6:	2100      	movs	r1, #0
 8013ce8:	e02c      	b.n	8013d44 <round+0x88>
 8013cea:	4a18      	ldr	r2, [pc, #96]	; (8013d4c <round+0x90>)
 8013cec:	4122      	asrs	r2, r4
 8013cee:	4217      	tst	r7, r2
 8013cf0:	d100      	bne.n	8013cf4 <round+0x38>
 8013cf2:	b19e      	cbz	r6, 8013d1c <round+0x60>
 8013cf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013cf8:	4123      	asrs	r3, r4
 8013cfa:	442b      	add	r3, r5
 8013cfc:	ea23 0302 	bic.w	r3, r3, r2
 8013d00:	e7f1      	b.n	8013ce6 <round+0x2a>
 8013d02:	2c33      	cmp	r4, #51	; 0x33
 8013d04:	dd0d      	ble.n	8013d22 <round+0x66>
 8013d06:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8013d0a:	d107      	bne.n	8013d1c <round+0x60>
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	4639      	mov	r1, r7
 8013d10:	ee10 2a10 	vmov	r2, s0
 8013d14:	f7ec faca 	bl	80002ac <__adddf3>
 8013d18:	4606      	mov	r6, r0
 8013d1a:	460f      	mov	r7, r1
 8013d1c:	ec47 6b10 	vmov	d0, r6, r7
 8013d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d22:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8013d26:	f04f 30ff 	mov.w	r0, #4294967295
 8013d2a:	40d0      	lsrs	r0, r2
 8013d2c:	4206      	tst	r6, r0
 8013d2e:	d0f5      	beq.n	8013d1c <round+0x60>
 8013d30:	2201      	movs	r2, #1
 8013d32:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8013d36:	fa02 f404 	lsl.w	r4, r2, r4
 8013d3a:	1931      	adds	r1, r6, r4
 8013d3c:	bf28      	it	cs
 8013d3e:	189b      	addcs	r3, r3, r2
 8013d40:	ea21 0100 	bic.w	r1, r1, r0
 8013d44:	461f      	mov	r7, r3
 8013d46:	460e      	mov	r6, r1
 8013d48:	e7e8      	b.n	8013d1c <round+0x60>
 8013d4a:	bf00      	nop
 8013d4c:	000fffff 	.word	0x000fffff

08013d50 <roundf>:
 8013d50:	ee10 0a10 	vmov	r0, s0
 8013d54:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013d58:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8013d5c:	2a16      	cmp	r2, #22
 8013d5e:	dc15      	bgt.n	8013d8c <roundf+0x3c>
 8013d60:	2a00      	cmp	r2, #0
 8013d62:	da08      	bge.n	8013d76 <roundf+0x26>
 8013d64:	3201      	adds	r2, #1
 8013d66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8013d6a:	d101      	bne.n	8013d70 <roundf+0x20>
 8013d6c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8013d70:	ee00 3a10 	vmov	s0, r3
 8013d74:	4770      	bx	lr
 8013d76:	4908      	ldr	r1, [pc, #32]	; (8013d98 <roundf+0x48>)
 8013d78:	4111      	asrs	r1, r2
 8013d7a:	4208      	tst	r0, r1
 8013d7c:	d0fa      	beq.n	8013d74 <roundf+0x24>
 8013d7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013d82:	4113      	asrs	r3, r2
 8013d84:	4403      	add	r3, r0
 8013d86:	ea23 0301 	bic.w	r3, r3, r1
 8013d8a:	e7f1      	b.n	8013d70 <roundf+0x20>
 8013d8c:	2a80      	cmp	r2, #128	; 0x80
 8013d8e:	d1f1      	bne.n	8013d74 <roundf+0x24>
 8013d90:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop
 8013d98:	007fffff 	.word	0x007fffff

08013d9c <expf>:
 8013d9c:	b530      	push	{r4, r5, lr}
 8013d9e:	ed2d 8b02 	vpush	{d8}
 8013da2:	4d35      	ldr	r5, [pc, #212]	; (8013e78 <expf+0xdc>)
 8013da4:	b08b      	sub	sp, #44	; 0x2c
 8013da6:	eeb0 8a40 	vmov.f32	s16, s0
 8013daa:	f000 f871 	bl	8013e90 <__ieee754_expf>
 8013dae:	f995 3000 	ldrsb.w	r3, [r5]
 8013db2:	3301      	adds	r3, #1
 8013db4:	ee10 4a10 	vmov	r4, s0
 8013db8:	d030      	beq.n	8013e1c <expf+0x80>
 8013dba:	eeb0 0a48 	vmov.f32	s0, s16
 8013dbe:	f000 f93d 	bl	801403c <finitef>
 8013dc2:	b358      	cbz	r0, 8013e1c <expf+0x80>
 8013dc4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8013e7c <expf+0xe0>
 8013dc8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dd0:	dd35      	ble.n	8013e3e <expf+0xa2>
 8013dd2:	2303      	movs	r3, #3
 8013dd4:	9300      	str	r3, [sp, #0]
 8013dd6:	4b2a      	ldr	r3, [pc, #168]	; (8013e80 <expf+0xe4>)
 8013dd8:	9301      	str	r3, [sp, #4]
 8013dda:	ee18 0a10 	vmov	r0, s16
 8013dde:	2300      	movs	r3, #0
 8013de0:	9308      	str	r3, [sp, #32]
 8013de2:	f7ec fbc1 	bl	8000568 <__aeabi_f2d>
 8013de6:	f995 3000 	ldrsb.w	r3, [r5]
 8013dea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013df2:	b9cb      	cbnz	r3, 8013e28 <expf+0x8c>
 8013df4:	4b23      	ldr	r3, [pc, #140]	; (8013e84 <expf+0xe8>)
 8013df6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013dfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013dfe:	4668      	mov	r0, sp
 8013e00:	f000 f91a 	bl	8014038 <matherr>
 8013e04:	b1b0      	cbz	r0, 8013e34 <expf+0x98>
 8013e06:	9b08      	ldr	r3, [sp, #32]
 8013e08:	b11b      	cbz	r3, 8013e12 <expf+0x76>
 8013e0a:	f000 f94d 	bl	80140a8 <__errno>
 8013e0e:	9b08      	ldr	r3, [sp, #32]
 8013e10:	6003      	str	r3, [r0, #0]
 8013e12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e16:	f7ec fed7 	bl	8000bc8 <__aeabi_d2f>
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	ee00 4a10 	vmov	s0, r4
 8013e20:	b00b      	add	sp, #44	; 0x2c
 8013e22:	ecbd 8b02 	vpop	{d8}
 8013e26:	bd30      	pop	{r4, r5, pc}
 8013e28:	4917      	ldr	r1, [pc, #92]	; (8013e88 <expf+0xec>)
 8013e2a:	2000      	movs	r0, #0
 8013e2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013e30:	2b02      	cmp	r3, #2
 8013e32:	d1e4      	bne.n	8013dfe <expf+0x62>
 8013e34:	f000 f938 	bl	80140a8 <__errno>
 8013e38:	2322      	movs	r3, #34	; 0x22
 8013e3a:	6003      	str	r3, [r0, #0]
 8013e3c:	e7e3      	b.n	8013e06 <expf+0x6a>
 8013e3e:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013e8c <expf+0xf0>
 8013e42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e4a:	d5e7      	bpl.n	8013e1c <expf+0x80>
 8013e4c:	2304      	movs	r3, #4
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	4b0b      	ldr	r3, [pc, #44]	; (8013e80 <expf+0xe4>)
 8013e52:	9301      	str	r3, [sp, #4]
 8013e54:	ee18 0a10 	vmov	r0, s16
 8013e58:	2300      	movs	r3, #0
 8013e5a:	9308      	str	r3, [sp, #32]
 8013e5c:	f7ec fb84 	bl	8000568 <__aeabi_f2d>
 8013e60:	2300      	movs	r3, #0
 8013e62:	2200      	movs	r2, #0
 8013e64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013e68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e70:	f995 3000 	ldrsb.w	r3, [r5]
 8013e74:	e7dc      	b.n	8013e30 <expf+0x94>
 8013e76:	bf00      	nop
 8013e78:	20000028 	.word	0x20000028
 8013e7c:	42b17180 	.word	0x42b17180
 8013e80:	08023218 	.word	0x08023218
 8013e84:	47efffff 	.word	0x47efffff
 8013e88:	7ff00000 	.word	0x7ff00000
 8013e8c:	c2cff1b5 	.word	0xc2cff1b5

08013e90 <__ieee754_expf>:
 8013e90:	ee10 2a10 	vmov	r2, s0
 8013e94:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013e98:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013e9c:	d902      	bls.n	8013ea4 <__ieee754_expf+0x14>
 8013e9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013ea2:	4770      	bx	lr
 8013ea4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8013ea8:	d106      	bne.n	8013eb8 <__ieee754_expf+0x28>
 8013eaa:	eddf 7a51 	vldr	s15, [pc, #324]	; 8013ff0 <__ieee754_expf+0x160>
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	bf18      	it	ne
 8013eb2:	eeb0 0a67 	vmovne.f32	s0, s15
 8013eb6:	4770      	bx	lr
 8013eb8:	484e      	ldr	r0, [pc, #312]	; (8013ff4 <__ieee754_expf+0x164>)
 8013eba:	4282      	cmp	r2, r0
 8013ebc:	dd04      	ble.n	8013ec8 <__ieee754_expf+0x38>
 8013ebe:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8013ff8 <__ieee754_expf+0x168>
 8013ec2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013ec6:	4770      	bx	lr
 8013ec8:	2a00      	cmp	r2, #0
 8013eca:	da03      	bge.n	8013ed4 <__ieee754_expf+0x44>
 8013ecc:	4a4b      	ldr	r2, [pc, #300]	; (8013ffc <__ieee754_expf+0x16c>)
 8013ece:	4291      	cmp	r1, r2
 8013ed0:	f200 808a 	bhi.w	8013fe8 <__ieee754_expf+0x158>
 8013ed4:	4a4a      	ldr	r2, [pc, #296]	; (8014000 <__ieee754_expf+0x170>)
 8013ed6:	4291      	cmp	r1, r2
 8013ed8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013edc:	d954      	bls.n	8013f88 <__ieee754_expf+0xf8>
 8013ede:	4a49      	ldr	r2, [pc, #292]	; (8014004 <__ieee754_expf+0x174>)
 8013ee0:	4291      	cmp	r1, r2
 8013ee2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013ee6:	d836      	bhi.n	8013f56 <__ieee754_expf+0xc6>
 8013ee8:	4947      	ldr	r1, [pc, #284]	; (8014008 <__ieee754_expf+0x178>)
 8013eea:	4411      	add	r1, r2
 8013eec:	ed91 7a00 	vldr	s14, [r1]
 8013ef0:	4946      	ldr	r1, [pc, #280]	; (801400c <__ieee754_expf+0x17c>)
 8013ef2:	440a      	add	r2, r1
 8013ef4:	edd2 7a00 	vldr	s15, [r2]
 8013ef8:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013efc:	f1c3 0201 	rsb	r2, r3, #1
 8013f00:	1ad2      	subs	r2, r2, r3
 8013f02:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013f06:	ee60 6a00 	vmul.f32	s13, s0, s0
 8013f0a:	eddf 5a41 	vldr	s11, [pc, #260]	; 8014010 <__ieee754_expf+0x180>
 8013f0e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8014014 <__ieee754_expf+0x184>
 8013f12:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8013f16:	eddf 5a40 	vldr	s11, [pc, #256]	; 8014018 <__ieee754_expf+0x188>
 8013f1a:	eee5 5a26 	vfma.f32	s11, s10, s13
 8013f1e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 801401c <__ieee754_expf+0x18c>
 8013f22:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8013f26:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8014020 <__ieee754_expf+0x190>
 8013f2a:	eee5 5a26 	vfma.f32	s11, s10, s13
 8013f2e:	eeb0 5a40 	vmov.f32	s10, s0
 8013f32:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8013f36:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013f3a:	eef0 6a45 	vmov.f32	s13, s10
 8013f3e:	ee20 5a05 	vmul.f32	s10, s0, s10
 8013f42:	bb92      	cbnz	r2, 8013faa <__ieee754_expf+0x11a>
 8013f44:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8013f48:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013f4c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013f50:	ee36 0a40 	vsub.f32	s0, s12, s0
 8013f54:	4770      	bx	lr
 8013f56:	4b33      	ldr	r3, [pc, #204]	; (8014024 <__ieee754_expf+0x194>)
 8013f58:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014028 <__ieee754_expf+0x198>
 8013f5c:	4413      	add	r3, r2
 8013f5e:	edd3 7a00 	vldr	s15, [r3]
 8013f62:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013f66:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801402c <__ieee754_expf+0x19c>
 8013f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f6e:	ee17 2a90 	vmov	r2, s15
 8013f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f76:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8013f7e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014030 <__ieee754_expf+0x1a0>
 8013f82:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013f86:	e7bc      	b.n	8013f02 <__ieee754_expf+0x72>
 8013f88:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8013f8c:	d20b      	bcs.n	8013fa6 <__ieee754_expf+0x116>
 8013f8e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8013ff8 <__ieee754_expf+0x168>
 8013f92:	ee70 6a26 	vadd.f32	s13, s0, s13
 8013f96:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f9e:	dd02      	ble.n	8013fa6 <__ieee754_expf+0x116>
 8013fa0:	ee30 0a06 	vadd.f32	s0, s0, s12
 8013fa4:	4770      	bx	lr
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	e7ad      	b.n	8013f06 <__ieee754_expf+0x76>
 8013faa:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8013fae:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8013fb2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8013fb6:	bfb8      	it	lt
 8013fb8:	3264      	addlt	r2, #100	; 0x64
 8013fba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013fbe:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013fc2:	ee76 7a40 	vsub.f32	s15, s12, s0
 8013fc6:	ee17 3a90 	vmov	r3, s15
 8013fca:	bfab      	itete	ge
 8013fcc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8013fd0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8013fd4:	ee00 3a10 	vmovge	s0, r3
 8013fd8:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8014034 <__ieee754_expf+0x1a4>
 8013fdc:	bfbc      	itt	lt
 8013fde:	ee00 3a10 	vmovlt	s0, r3
 8013fe2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8013fe6:	4770      	bx	lr
 8013fe8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013ff0 <__ieee754_expf+0x160>
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop
 8013ff0:	00000000 	.word	0x00000000
 8013ff4:	42b17217 	.word	0x42b17217
 8013ff8:	7149f2ca 	.word	0x7149f2ca
 8013ffc:	42cff1b5 	.word	0x42cff1b5
 8014000:	3eb17218 	.word	0x3eb17218
 8014004:	3f851591 	.word	0x3f851591
 8014008:	08023228 	.word	0x08023228
 801400c:	08023230 	.word	0x08023230
 8014010:	3331bb4c 	.word	0x3331bb4c
 8014014:	b5ddea0e 	.word	0xb5ddea0e
 8014018:	388ab355 	.word	0x388ab355
 801401c:	bb360b61 	.word	0xbb360b61
 8014020:	3e2aaaab 	.word	0x3e2aaaab
 8014024:	08023220 	.word	0x08023220
 8014028:	3fb8aa3b 	.word	0x3fb8aa3b
 801402c:	3f317180 	.word	0x3f317180
 8014030:	3717f7d1 	.word	0x3717f7d1
 8014034:	0d800000 	.word	0x0d800000

08014038 <matherr>:
 8014038:	2000      	movs	r0, #0
 801403a:	4770      	bx	lr

0801403c <finitef>:
 801403c:	ee10 3a10 	vmov	r3, s0
 8014040:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8014044:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014048:	bfac      	ite	ge
 801404a:	2000      	movge	r0, #0
 801404c:	2001      	movlt	r0, #1
 801404e:	4770      	bx	lr

08014050 <abort>:
 8014050:	b508      	push	{r3, lr}
 8014052:	2006      	movs	r0, #6
 8014054:	f000 ff7a 	bl	8014f4c <raise>
 8014058:	2001      	movs	r0, #1
 801405a:	f7fc f8e9 	bl	8010230 <_exit>
	...

08014060 <__assert_func>:
 8014060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014062:	461c      	mov	r4, r3
 8014064:	4b09      	ldr	r3, [pc, #36]	; (801408c <__assert_func+0x2c>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	4605      	mov	r5, r0
 801406a:	68d8      	ldr	r0, [r3, #12]
 801406c:	b152      	cbz	r2, 8014084 <__assert_func+0x24>
 801406e:	4b08      	ldr	r3, [pc, #32]	; (8014090 <__assert_func+0x30>)
 8014070:	9100      	str	r1, [sp, #0]
 8014072:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014076:	4907      	ldr	r1, [pc, #28]	; (8014094 <__assert_func+0x34>)
 8014078:	462b      	mov	r3, r5
 801407a:	4622      	mov	r2, r4
 801407c:	f000 f81a 	bl	80140b4 <fiprintf>
 8014080:	f7ff ffe6 	bl	8014050 <abort>
 8014084:	4b04      	ldr	r3, [pc, #16]	; (8014098 <__assert_func+0x38>)
 8014086:	461a      	mov	r2, r3
 8014088:	e7f2      	b.n	8014070 <__assert_func+0x10>
 801408a:	bf00      	nop
 801408c:	2000002c 	.word	0x2000002c
 8014090:	08023238 	.word	0x08023238
 8014094:	08023245 	.word	0x08023245
 8014098:	08023273 	.word	0x08023273

0801409c <atexit>:
 801409c:	2300      	movs	r3, #0
 801409e:	4601      	mov	r1, r0
 80140a0:	461a      	mov	r2, r3
 80140a2:	4618      	mov	r0, r3
 80140a4:	f001 b860 	b.w	8015168 <__register_exitproc>

080140a8 <__errno>:
 80140a8:	4b01      	ldr	r3, [pc, #4]	; (80140b0 <__errno+0x8>)
 80140aa:	6818      	ldr	r0, [r3, #0]
 80140ac:	4770      	bx	lr
 80140ae:	bf00      	nop
 80140b0:	2000002c 	.word	0x2000002c

080140b4 <fiprintf>:
 80140b4:	b40e      	push	{r1, r2, r3}
 80140b6:	b503      	push	{r0, r1, lr}
 80140b8:	4601      	mov	r1, r0
 80140ba:	ab03      	add	r3, sp, #12
 80140bc:	4805      	ldr	r0, [pc, #20]	; (80140d4 <fiprintf+0x20>)
 80140be:	f853 2b04 	ldr.w	r2, [r3], #4
 80140c2:	6800      	ldr	r0, [r0, #0]
 80140c4:	9301      	str	r3, [sp, #4]
 80140c6:	f000 f997 	bl	80143f8 <_vfiprintf_r>
 80140ca:	b002      	add	sp, #8
 80140cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80140d0:	b003      	add	sp, #12
 80140d2:	4770      	bx	lr
 80140d4:	2000002c 	.word	0x2000002c

080140d8 <_fputs_r>:
 80140d8:	b570      	push	{r4, r5, r6, lr}
 80140da:	460e      	mov	r6, r1
 80140dc:	4614      	mov	r4, r2
 80140de:	4605      	mov	r5, r0
 80140e0:	b118      	cbz	r0, 80140ea <_fputs_r+0x12>
 80140e2:	6983      	ldr	r3, [r0, #24]
 80140e4:	b90b      	cbnz	r3, 80140ea <_fputs_r+0x12>
 80140e6:	f001 ffd7 	bl	8016098 <__sinit>
 80140ea:	4b1c      	ldr	r3, [pc, #112]	; (801415c <_fputs_r+0x84>)
 80140ec:	429c      	cmp	r4, r3
 80140ee:	d10b      	bne.n	8014108 <_fputs_r+0x30>
 80140f0:	686c      	ldr	r4, [r5, #4]
 80140f2:	89a3      	ldrh	r3, [r4, #12]
 80140f4:	071b      	lsls	r3, r3, #28
 80140f6:	d511      	bpl.n	801411c <_fputs_r+0x44>
 80140f8:	6923      	ldr	r3, [r4, #16]
 80140fa:	b17b      	cbz	r3, 801411c <_fputs_r+0x44>
 80140fc:	3e01      	subs	r6, #1
 80140fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014102:	b9a1      	cbnz	r1, 801412e <_fputs_r+0x56>
 8014104:	4608      	mov	r0, r1
 8014106:	e011      	b.n	801412c <_fputs_r+0x54>
 8014108:	4b15      	ldr	r3, [pc, #84]	; (8014160 <_fputs_r+0x88>)
 801410a:	429c      	cmp	r4, r3
 801410c:	d101      	bne.n	8014112 <_fputs_r+0x3a>
 801410e:	68ac      	ldr	r4, [r5, #8]
 8014110:	e7ef      	b.n	80140f2 <_fputs_r+0x1a>
 8014112:	4b14      	ldr	r3, [pc, #80]	; (8014164 <_fputs_r+0x8c>)
 8014114:	429c      	cmp	r4, r3
 8014116:	bf08      	it	eq
 8014118:	68ec      	ldreq	r4, [r5, #12]
 801411a:	e7ea      	b.n	80140f2 <_fputs_r+0x1a>
 801411c:	4621      	mov	r1, r4
 801411e:	4628      	mov	r0, r5
 8014120:	f000 ffb4 	bl	801508c <__swsetup_r>
 8014124:	2800      	cmp	r0, #0
 8014126:	d0e9      	beq.n	80140fc <_fputs_r+0x24>
 8014128:	f04f 30ff 	mov.w	r0, #4294967295
 801412c:	bd70      	pop	{r4, r5, r6, pc}
 801412e:	68a3      	ldr	r3, [r4, #8]
 8014130:	3b01      	subs	r3, #1
 8014132:	2b00      	cmp	r3, #0
 8014134:	60a3      	str	r3, [r4, #8]
 8014136:	da04      	bge.n	8014142 <_fputs_r+0x6a>
 8014138:	69a2      	ldr	r2, [r4, #24]
 801413a:	4293      	cmp	r3, r2
 801413c:	db06      	blt.n	801414c <_fputs_r+0x74>
 801413e:	290a      	cmp	r1, #10
 8014140:	d004      	beq.n	801414c <_fputs_r+0x74>
 8014142:	6823      	ldr	r3, [r4, #0]
 8014144:	1c5a      	adds	r2, r3, #1
 8014146:	6022      	str	r2, [r4, #0]
 8014148:	7019      	strb	r1, [r3, #0]
 801414a:	e7d8      	b.n	80140fe <_fputs_r+0x26>
 801414c:	4622      	mov	r2, r4
 801414e:	4628      	mov	r0, r5
 8014150:	f000 ff4a 	bl	8014fe8 <__swbuf_r>
 8014154:	3001      	adds	r0, #1
 8014156:	d1d2      	bne.n	80140fe <_fputs_r+0x26>
 8014158:	e7e6      	b.n	8014128 <_fputs_r+0x50>
 801415a:	bf00      	nop
 801415c:	080232ec 	.word	0x080232ec
 8014160:	0802330c 	.word	0x0802330c
 8014164:	080232cc 	.word	0x080232cc

08014168 <fputs>:
 8014168:	4b02      	ldr	r3, [pc, #8]	; (8014174 <fputs+0xc>)
 801416a:	460a      	mov	r2, r1
 801416c:	4601      	mov	r1, r0
 801416e:	6818      	ldr	r0, [r3, #0]
 8014170:	f7ff bfb2 	b.w	80140d8 <_fputs_r>
 8014174:	2000002c 	.word	0x2000002c

08014178 <__libc_init_array>:
 8014178:	b570      	push	{r4, r5, r6, lr}
 801417a:	4e0d      	ldr	r6, [pc, #52]	; (80141b0 <__libc_init_array+0x38>)
 801417c:	4c0d      	ldr	r4, [pc, #52]	; (80141b4 <__libc_init_array+0x3c>)
 801417e:	1ba4      	subs	r4, r4, r6
 8014180:	10a4      	asrs	r4, r4, #2
 8014182:	2500      	movs	r5, #0
 8014184:	42a5      	cmp	r5, r4
 8014186:	d109      	bne.n	801419c <__libc_init_array+0x24>
 8014188:	4e0b      	ldr	r6, [pc, #44]	; (80141b8 <__libc_init_array+0x40>)
 801418a:	4c0c      	ldr	r4, [pc, #48]	; (80141bc <__libc_init_array+0x44>)
 801418c:	f002 fdaa 	bl	8016ce4 <_init>
 8014190:	1ba4      	subs	r4, r4, r6
 8014192:	10a4      	asrs	r4, r4, #2
 8014194:	2500      	movs	r5, #0
 8014196:	42a5      	cmp	r5, r4
 8014198:	d105      	bne.n	80141a6 <__libc_init_array+0x2e>
 801419a:	bd70      	pop	{r4, r5, r6, pc}
 801419c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80141a0:	4798      	blx	r3
 80141a2:	3501      	adds	r5, #1
 80141a4:	e7ee      	b.n	8014184 <__libc_init_array+0xc>
 80141a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80141aa:	4798      	blx	r3
 80141ac:	3501      	adds	r5, #1
 80141ae:	e7f2      	b.n	8014196 <__libc_init_array+0x1e>
 80141b0:	08023540 	.word	0x08023540
 80141b4:	08023540 	.word	0x08023540
 80141b8:	08023540 	.word	0x08023540
 80141bc:	08023544 	.word	0x08023544

080141c0 <malloc>:
 80141c0:	4b02      	ldr	r3, [pc, #8]	; (80141cc <malloc+0xc>)
 80141c2:	4601      	mov	r1, r0
 80141c4:	6818      	ldr	r0, [r3, #0]
 80141c6:	f000 b893 	b.w	80142f0 <_malloc_r>
 80141ca:	bf00      	nop
 80141cc:	2000002c 	.word	0x2000002c

080141d0 <free>:
 80141d0:	4b02      	ldr	r3, [pc, #8]	; (80141dc <free+0xc>)
 80141d2:	4601      	mov	r1, r0
 80141d4:	6818      	ldr	r0, [r3, #0]
 80141d6:	f000 b83d 	b.w	8014254 <_free_r>
 80141da:	bf00      	nop
 80141dc:	2000002c 	.word	0x2000002c

080141e0 <memcpy>:
 80141e0:	b510      	push	{r4, lr}
 80141e2:	1e43      	subs	r3, r0, #1
 80141e4:	440a      	add	r2, r1
 80141e6:	4291      	cmp	r1, r2
 80141e8:	d100      	bne.n	80141ec <memcpy+0xc>
 80141ea:	bd10      	pop	{r4, pc}
 80141ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141f4:	e7f7      	b.n	80141e6 <memcpy+0x6>

080141f6 <memmove>:
 80141f6:	4288      	cmp	r0, r1
 80141f8:	b510      	push	{r4, lr}
 80141fa:	eb01 0302 	add.w	r3, r1, r2
 80141fe:	d807      	bhi.n	8014210 <memmove+0x1a>
 8014200:	1e42      	subs	r2, r0, #1
 8014202:	4299      	cmp	r1, r3
 8014204:	d00a      	beq.n	801421c <memmove+0x26>
 8014206:	f811 4b01 	ldrb.w	r4, [r1], #1
 801420a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801420e:	e7f8      	b.n	8014202 <memmove+0xc>
 8014210:	4283      	cmp	r3, r0
 8014212:	d9f5      	bls.n	8014200 <memmove+0xa>
 8014214:	1881      	adds	r1, r0, r2
 8014216:	1ad2      	subs	r2, r2, r3
 8014218:	42d3      	cmn	r3, r2
 801421a:	d100      	bne.n	801421e <memmove+0x28>
 801421c:	bd10      	pop	{r4, pc}
 801421e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014222:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014226:	e7f7      	b.n	8014218 <memmove+0x22>

08014228 <memset>:
 8014228:	4402      	add	r2, r0
 801422a:	4603      	mov	r3, r0
 801422c:	4293      	cmp	r3, r2
 801422e:	d100      	bne.n	8014232 <memset+0xa>
 8014230:	4770      	bx	lr
 8014232:	f803 1b01 	strb.w	r1, [r3], #1
 8014236:	e7f9      	b.n	801422c <memset+0x4>

08014238 <_calloc_r>:
 8014238:	b538      	push	{r3, r4, r5, lr}
 801423a:	fb02 f401 	mul.w	r4, r2, r1
 801423e:	4621      	mov	r1, r4
 8014240:	f000 f856 	bl	80142f0 <_malloc_r>
 8014244:	4605      	mov	r5, r0
 8014246:	b118      	cbz	r0, 8014250 <_calloc_r+0x18>
 8014248:	4622      	mov	r2, r4
 801424a:	2100      	movs	r1, #0
 801424c:	f7ff ffec 	bl	8014228 <memset>
 8014250:	4628      	mov	r0, r5
 8014252:	bd38      	pop	{r3, r4, r5, pc}

08014254 <_free_r>:
 8014254:	b538      	push	{r3, r4, r5, lr}
 8014256:	4605      	mov	r5, r0
 8014258:	2900      	cmp	r1, #0
 801425a:	d045      	beq.n	80142e8 <_free_r+0x94>
 801425c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014260:	1f0c      	subs	r4, r1, #4
 8014262:	2b00      	cmp	r3, #0
 8014264:	bfb8      	it	lt
 8014266:	18e4      	addlt	r4, r4, r3
 8014268:	f002 f812 	bl	8016290 <__malloc_lock>
 801426c:	4a1f      	ldr	r2, [pc, #124]	; (80142ec <_free_r+0x98>)
 801426e:	6813      	ldr	r3, [r2, #0]
 8014270:	4610      	mov	r0, r2
 8014272:	b933      	cbnz	r3, 8014282 <_free_r+0x2e>
 8014274:	6063      	str	r3, [r4, #4]
 8014276:	6014      	str	r4, [r2, #0]
 8014278:	4628      	mov	r0, r5
 801427a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801427e:	f002 b808 	b.w	8016292 <__malloc_unlock>
 8014282:	42a3      	cmp	r3, r4
 8014284:	d90c      	bls.n	80142a0 <_free_r+0x4c>
 8014286:	6821      	ldr	r1, [r4, #0]
 8014288:	1862      	adds	r2, r4, r1
 801428a:	4293      	cmp	r3, r2
 801428c:	bf04      	itt	eq
 801428e:	681a      	ldreq	r2, [r3, #0]
 8014290:	685b      	ldreq	r3, [r3, #4]
 8014292:	6063      	str	r3, [r4, #4]
 8014294:	bf04      	itt	eq
 8014296:	1852      	addeq	r2, r2, r1
 8014298:	6022      	streq	r2, [r4, #0]
 801429a:	6004      	str	r4, [r0, #0]
 801429c:	e7ec      	b.n	8014278 <_free_r+0x24>
 801429e:	4613      	mov	r3, r2
 80142a0:	685a      	ldr	r2, [r3, #4]
 80142a2:	b10a      	cbz	r2, 80142a8 <_free_r+0x54>
 80142a4:	42a2      	cmp	r2, r4
 80142a6:	d9fa      	bls.n	801429e <_free_r+0x4a>
 80142a8:	6819      	ldr	r1, [r3, #0]
 80142aa:	1858      	adds	r0, r3, r1
 80142ac:	42a0      	cmp	r0, r4
 80142ae:	d10b      	bne.n	80142c8 <_free_r+0x74>
 80142b0:	6820      	ldr	r0, [r4, #0]
 80142b2:	4401      	add	r1, r0
 80142b4:	1858      	adds	r0, r3, r1
 80142b6:	4282      	cmp	r2, r0
 80142b8:	6019      	str	r1, [r3, #0]
 80142ba:	d1dd      	bne.n	8014278 <_free_r+0x24>
 80142bc:	6810      	ldr	r0, [r2, #0]
 80142be:	6852      	ldr	r2, [r2, #4]
 80142c0:	605a      	str	r2, [r3, #4]
 80142c2:	4401      	add	r1, r0
 80142c4:	6019      	str	r1, [r3, #0]
 80142c6:	e7d7      	b.n	8014278 <_free_r+0x24>
 80142c8:	d902      	bls.n	80142d0 <_free_r+0x7c>
 80142ca:	230c      	movs	r3, #12
 80142cc:	602b      	str	r3, [r5, #0]
 80142ce:	e7d3      	b.n	8014278 <_free_r+0x24>
 80142d0:	6820      	ldr	r0, [r4, #0]
 80142d2:	1821      	adds	r1, r4, r0
 80142d4:	428a      	cmp	r2, r1
 80142d6:	bf04      	itt	eq
 80142d8:	6811      	ldreq	r1, [r2, #0]
 80142da:	6852      	ldreq	r2, [r2, #4]
 80142dc:	6062      	str	r2, [r4, #4]
 80142de:	bf04      	itt	eq
 80142e0:	1809      	addeq	r1, r1, r0
 80142e2:	6021      	streq	r1, [r4, #0]
 80142e4:	605c      	str	r4, [r3, #4]
 80142e6:	e7c7      	b.n	8014278 <_free_r+0x24>
 80142e8:	bd38      	pop	{r3, r4, r5, pc}
 80142ea:	bf00      	nop
 80142ec:	20000700 	.word	0x20000700

080142f0 <_malloc_r>:
 80142f0:	b570      	push	{r4, r5, r6, lr}
 80142f2:	1ccd      	adds	r5, r1, #3
 80142f4:	f025 0503 	bic.w	r5, r5, #3
 80142f8:	3508      	adds	r5, #8
 80142fa:	2d0c      	cmp	r5, #12
 80142fc:	bf38      	it	cc
 80142fe:	250c      	movcc	r5, #12
 8014300:	2d00      	cmp	r5, #0
 8014302:	4606      	mov	r6, r0
 8014304:	db01      	blt.n	801430a <_malloc_r+0x1a>
 8014306:	42a9      	cmp	r1, r5
 8014308:	d903      	bls.n	8014312 <_malloc_r+0x22>
 801430a:	230c      	movs	r3, #12
 801430c:	6033      	str	r3, [r6, #0]
 801430e:	2000      	movs	r0, #0
 8014310:	bd70      	pop	{r4, r5, r6, pc}
 8014312:	f001 ffbd 	bl	8016290 <__malloc_lock>
 8014316:	4a21      	ldr	r2, [pc, #132]	; (801439c <_malloc_r+0xac>)
 8014318:	6814      	ldr	r4, [r2, #0]
 801431a:	4621      	mov	r1, r4
 801431c:	b991      	cbnz	r1, 8014344 <_malloc_r+0x54>
 801431e:	4c20      	ldr	r4, [pc, #128]	; (80143a0 <_malloc_r+0xb0>)
 8014320:	6823      	ldr	r3, [r4, #0]
 8014322:	b91b      	cbnz	r3, 801432c <_malloc_r+0x3c>
 8014324:	4630      	mov	r0, r6
 8014326:	f000 fdd9 	bl	8014edc <_sbrk_r>
 801432a:	6020      	str	r0, [r4, #0]
 801432c:	4629      	mov	r1, r5
 801432e:	4630      	mov	r0, r6
 8014330:	f000 fdd4 	bl	8014edc <_sbrk_r>
 8014334:	1c43      	adds	r3, r0, #1
 8014336:	d124      	bne.n	8014382 <_malloc_r+0x92>
 8014338:	230c      	movs	r3, #12
 801433a:	6033      	str	r3, [r6, #0]
 801433c:	4630      	mov	r0, r6
 801433e:	f001 ffa8 	bl	8016292 <__malloc_unlock>
 8014342:	e7e4      	b.n	801430e <_malloc_r+0x1e>
 8014344:	680b      	ldr	r3, [r1, #0]
 8014346:	1b5b      	subs	r3, r3, r5
 8014348:	d418      	bmi.n	801437c <_malloc_r+0x8c>
 801434a:	2b0b      	cmp	r3, #11
 801434c:	d90f      	bls.n	801436e <_malloc_r+0x7e>
 801434e:	600b      	str	r3, [r1, #0]
 8014350:	50cd      	str	r5, [r1, r3]
 8014352:	18cc      	adds	r4, r1, r3
 8014354:	4630      	mov	r0, r6
 8014356:	f001 ff9c 	bl	8016292 <__malloc_unlock>
 801435a:	f104 000b 	add.w	r0, r4, #11
 801435e:	1d23      	adds	r3, r4, #4
 8014360:	f020 0007 	bic.w	r0, r0, #7
 8014364:	1ac3      	subs	r3, r0, r3
 8014366:	d0d3      	beq.n	8014310 <_malloc_r+0x20>
 8014368:	425a      	negs	r2, r3
 801436a:	50e2      	str	r2, [r4, r3]
 801436c:	e7d0      	b.n	8014310 <_malloc_r+0x20>
 801436e:	428c      	cmp	r4, r1
 8014370:	684b      	ldr	r3, [r1, #4]
 8014372:	bf16      	itet	ne
 8014374:	6063      	strne	r3, [r4, #4]
 8014376:	6013      	streq	r3, [r2, #0]
 8014378:	460c      	movne	r4, r1
 801437a:	e7eb      	b.n	8014354 <_malloc_r+0x64>
 801437c:	460c      	mov	r4, r1
 801437e:	6849      	ldr	r1, [r1, #4]
 8014380:	e7cc      	b.n	801431c <_malloc_r+0x2c>
 8014382:	1cc4      	adds	r4, r0, #3
 8014384:	f024 0403 	bic.w	r4, r4, #3
 8014388:	42a0      	cmp	r0, r4
 801438a:	d005      	beq.n	8014398 <_malloc_r+0xa8>
 801438c:	1a21      	subs	r1, r4, r0
 801438e:	4630      	mov	r0, r6
 8014390:	f000 fda4 	bl	8014edc <_sbrk_r>
 8014394:	3001      	adds	r0, #1
 8014396:	d0cf      	beq.n	8014338 <_malloc_r+0x48>
 8014398:	6025      	str	r5, [r4, #0]
 801439a:	e7db      	b.n	8014354 <_malloc_r+0x64>
 801439c:	20000700 	.word	0x20000700
 80143a0:	20000704 	.word	0x20000704

080143a4 <__sfputc_r>:
 80143a4:	6893      	ldr	r3, [r2, #8]
 80143a6:	3b01      	subs	r3, #1
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	b410      	push	{r4}
 80143ac:	6093      	str	r3, [r2, #8]
 80143ae:	da08      	bge.n	80143c2 <__sfputc_r+0x1e>
 80143b0:	6994      	ldr	r4, [r2, #24]
 80143b2:	42a3      	cmp	r3, r4
 80143b4:	db01      	blt.n	80143ba <__sfputc_r+0x16>
 80143b6:	290a      	cmp	r1, #10
 80143b8:	d103      	bne.n	80143c2 <__sfputc_r+0x1e>
 80143ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143be:	f000 be13 	b.w	8014fe8 <__swbuf_r>
 80143c2:	6813      	ldr	r3, [r2, #0]
 80143c4:	1c58      	adds	r0, r3, #1
 80143c6:	6010      	str	r0, [r2, #0]
 80143c8:	7019      	strb	r1, [r3, #0]
 80143ca:	4608      	mov	r0, r1
 80143cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143d0:	4770      	bx	lr

080143d2 <__sfputs_r>:
 80143d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143d4:	4606      	mov	r6, r0
 80143d6:	460f      	mov	r7, r1
 80143d8:	4614      	mov	r4, r2
 80143da:	18d5      	adds	r5, r2, r3
 80143dc:	42ac      	cmp	r4, r5
 80143de:	d101      	bne.n	80143e4 <__sfputs_r+0x12>
 80143e0:	2000      	movs	r0, #0
 80143e2:	e007      	b.n	80143f4 <__sfputs_r+0x22>
 80143e4:	463a      	mov	r2, r7
 80143e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ea:	4630      	mov	r0, r6
 80143ec:	f7ff ffda 	bl	80143a4 <__sfputc_r>
 80143f0:	1c43      	adds	r3, r0, #1
 80143f2:	d1f3      	bne.n	80143dc <__sfputs_r+0xa>
 80143f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080143f8 <_vfiprintf_r>:
 80143f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143fc:	460c      	mov	r4, r1
 80143fe:	b09d      	sub	sp, #116	; 0x74
 8014400:	4617      	mov	r7, r2
 8014402:	461d      	mov	r5, r3
 8014404:	4606      	mov	r6, r0
 8014406:	b118      	cbz	r0, 8014410 <_vfiprintf_r+0x18>
 8014408:	6983      	ldr	r3, [r0, #24]
 801440a:	b90b      	cbnz	r3, 8014410 <_vfiprintf_r+0x18>
 801440c:	f001 fe44 	bl	8016098 <__sinit>
 8014410:	4b7c      	ldr	r3, [pc, #496]	; (8014604 <_vfiprintf_r+0x20c>)
 8014412:	429c      	cmp	r4, r3
 8014414:	d158      	bne.n	80144c8 <_vfiprintf_r+0xd0>
 8014416:	6874      	ldr	r4, [r6, #4]
 8014418:	89a3      	ldrh	r3, [r4, #12]
 801441a:	0718      	lsls	r0, r3, #28
 801441c:	d55e      	bpl.n	80144dc <_vfiprintf_r+0xe4>
 801441e:	6923      	ldr	r3, [r4, #16]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d05b      	beq.n	80144dc <_vfiprintf_r+0xe4>
 8014424:	2300      	movs	r3, #0
 8014426:	9309      	str	r3, [sp, #36]	; 0x24
 8014428:	2320      	movs	r3, #32
 801442a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801442e:	2330      	movs	r3, #48	; 0x30
 8014430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014434:	9503      	str	r5, [sp, #12]
 8014436:	f04f 0b01 	mov.w	fp, #1
 801443a:	46b8      	mov	r8, r7
 801443c:	4645      	mov	r5, r8
 801443e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014442:	b10b      	cbz	r3, 8014448 <_vfiprintf_r+0x50>
 8014444:	2b25      	cmp	r3, #37	; 0x25
 8014446:	d154      	bne.n	80144f2 <_vfiprintf_r+0xfa>
 8014448:	ebb8 0a07 	subs.w	sl, r8, r7
 801444c:	d00b      	beq.n	8014466 <_vfiprintf_r+0x6e>
 801444e:	4653      	mov	r3, sl
 8014450:	463a      	mov	r2, r7
 8014452:	4621      	mov	r1, r4
 8014454:	4630      	mov	r0, r6
 8014456:	f7ff ffbc 	bl	80143d2 <__sfputs_r>
 801445a:	3001      	adds	r0, #1
 801445c:	f000 80c2 	beq.w	80145e4 <_vfiprintf_r+0x1ec>
 8014460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014462:	4453      	add	r3, sl
 8014464:	9309      	str	r3, [sp, #36]	; 0x24
 8014466:	f898 3000 	ldrb.w	r3, [r8]
 801446a:	2b00      	cmp	r3, #0
 801446c:	f000 80ba 	beq.w	80145e4 <_vfiprintf_r+0x1ec>
 8014470:	2300      	movs	r3, #0
 8014472:	f04f 32ff 	mov.w	r2, #4294967295
 8014476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801447a:	9304      	str	r3, [sp, #16]
 801447c:	9307      	str	r3, [sp, #28]
 801447e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014482:	931a      	str	r3, [sp, #104]	; 0x68
 8014484:	46a8      	mov	r8, r5
 8014486:	2205      	movs	r2, #5
 8014488:	f818 1b01 	ldrb.w	r1, [r8], #1
 801448c:	485e      	ldr	r0, [pc, #376]	; (8014608 <_vfiprintf_r+0x210>)
 801448e:	f7eb feb7 	bl	8000200 <memchr>
 8014492:	9b04      	ldr	r3, [sp, #16]
 8014494:	bb78      	cbnz	r0, 80144f6 <_vfiprintf_r+0xfe>
 8014496:	06d9      	lsls	r1, r3, #27
 8014498:	bf44      	itt	mi
 801449a:	2220      	movmi	r2, #32
 801449c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80144a0:	071a      	lsls	r2, r3, #28
 80144a2:	bf44      	itt	mi
 80144a4:	222b      	movmi	r2, #43	; 0x2b
 80144a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80144aa:	782a      	ldrb	r2, [r5, #0]
 80144ac:	2a2a      	cmp	r2, #42	; 0x2a
 80144ae:	d02a      	beq.n	8014506 <_vfiprintf_r+0x10e>
 80144b0:	9a07      	ldr	r2, [sp, #28]
 80144b2:	46a8      	mov	r8, r5
 80144b4:	2000      	movs	r0, #0
 80144b6:	250a      	movs	r5, #10
 80144b8:	4641      	mov	r1, r8
 80144ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144be:	3b30      	subs	r3, #48	; 0x30
 80144c0:	2b09      	cmp	r3, #9
 80144c2:	d969      	bls.n	8014598 <_vfiprintf_r+0x1a0>
 80144c4:	b360      	cbz	r0, 8014520 <_vfiprintf_r+0x128>
 80144c6:	e024      	b.n	8014512 <_vfiprintf_r+0x11a>
 80144c8:	4b50      	ldr	r3, [pc, #320]	; (801460c <_vfiprintf_r+0x214>)
 80144ca:	429c      	cmp	r4, r3
 80144cc:	d101      	bne.n	80144d2 <_vfiprintf_r+0xda>
 80144ce:	68b4      	ldr	r4, [r6, #8]
 80144d0:	e7a2      	b.n	8014418 <_vfiprintf_r+0x20>
 80144d2:	4b4f      	ldr	r3, [pc, #316]	; (8014610 <_vfiprintf_r+0x218>)
 80144d4:	429c      	cmp	r4, r3
 80144d6:	bf08      	it	eq
 80144d8:	68f4      	ldreq	r4, [r6, #12]
 80144da:	e79d      	b.n	8014418 <_vfiprintf_r+0x20>
 80144dc:	4621      	mov	r1, r4
 80144de:	4630      	mov	r0, r6
 80144e0:	f000 fdd4 	bl	801508c <__swsetup_r>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	d09d      	beq.n	8014424 <_vfiprintf_r+0x2c>
 80144e8:	f04f 30ff 	mov.w	r0, #4294967295
 80144ec:	b01d      	add	sp, #116	; 0x74
 80144ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f2:	46a8      	mov	r8, r5
 80144f4:	e7a2      	b.n	801443c <_vfiprintf_r+0x44>
 80144f6:	4a44      	ldr	r2, [pc, #272]	; (8014608 <_vfiprintf_r+0x210>)
 80144f8:	1a80      	subs	r0, r0, r2
 80144fa:	fa0b f000 	lsl.w	r0, fp, r0
 80144fe:	4318      	orrs	r0, r3
 8014500:	9004      	str	r0, [sp, #16]
 8014502:	4645      	mov	r5, r8
 8014504:	e7be      	b.n	8014484 <_vfiprintf_r+0x8c>
 8014506:	9a03      	ldr	r2, [sp, #12]
 8014508:	1d11      	adds	r1, r2, #4
 801450a:	6812      	ldr	r2, [r2, #0]
 801450c:	9103      	str	r1, [sp, #12]
 801450e:	2a00      	cmp	r2, #0
 8014510:	db01      	blt.n	8014516 <_vfiprintf_r+0x11e>
 8014512:	9207      	str	r2, [sp, #28]
 8014514:	e004      	b.n	8014520 <_vfiprintf_r+0x128>
 8014516:	4252      	negs	r2, r2
 8014518:	f043 0302 	orr.w	r3, r3, #2
 801451c:	9207      	str	r2, [sp, #28]
 801451e:	9304      	str	r3, [sp, #16]
 8014520:	f898 3000 	ldrb.w	r3, [r8]
 8014524:	2b2e      	cmp	r3, #46	; 0x2e
 8014526:	d10e      	bne.n	8014546 <_vfiprintf_r+0x14e>
 8014528:	f898 3001 	ldrb.w	r3, [r8, #1]
 801452c:	2b2a      	cmp	r3, #42	; 0x2a
 801452e:	d138      	bne.n	80145a2 <_vfiprintf_r+0x1aa>
 8014530:	9b03      	ldr	r3, [sp, #12]
 8014532:	1d1a      	adds	r2, r3, #4
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	9203      	str	r2, [sp, #12]
 8014538:	2b00      	cmp	r3, #0
 801453a:	bfb8      	it	lt
 801453c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014540:	f108 0802 	add.w	r8, r8, #2
 8014544:	9305      	str	r3, [sp, #20]
 8014546:	4d33      	ldr	r5, [pc, #204]	; (8014614 <_vfiprintf_r+0x21c>)
 8014548:	f898 1000 	ldrb.w	r1, [r8]
 801454c:	2203      	movs	r2, #3
 801454e:	4628      	mov	r0, r5
 8014550:	f7eb fe56 	bl	8000200 <memchr>
 8014554:	b140      	cbz	r0, 8014568 <_vfiprintf_r+0x170>
 8014556:	2340      	movs	r3, #64	; 0x40
 8014558:	1b40      	subs	r0, r0, r5
 801455a:	fa03 f000 	lsl.w	r0, r3, r0
 801455e:	9b04      	ldr	r3, [sp, #16]
 8014560:	4303      	orrs	r3, r0
 8014562:	f108 0801 	add.w	r8, r8, #1
 8014566:	9304      	str	r3, [sp, #16]
 8014568:	f898 1000 	ldrb.w	r1, [r8]
 801456c:	482a      	ldr	r0, [pc, #168]	; (8014618 <_vfiprintf_r+0x220>)
 801456e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014572:	2206      	movs	r2, #6
 8014574:	f108 0701 	add.w	r7, r8, #1
 8014578:	f7eb fe42 	bl	8000200 <memchr>
 801457c:	2800      	cmp	r0, #0
 801457e:	d037      	beq.n	80145f0 <_vfiprintf_r+0x1f8>
 8014580:	4b26      	ldr	r3, [pc, #152]	; (801461c <_vfiprintf_r+0x224>)
 8014582:	bb1b      	cbnz	r3, 80145cc <_vfiprintf_r+0x1d4>
 8014584:	9b03      	ldr	r3, [sp, #12]
 8014586:	3307      	adds	r3, #7
 8014588:	f023 0307 	bic.w	r3, r3, #7
 801458c:	3308      	adds	r3, #8
 801458e:	9303      	str	r3, [sp, #12]
 8014590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014592:	444b      	add	r3, r9
 8014594:	9309      	str	r3, [sp, #36]	; 0x24
 8014596:	e750      	b.n	801443a <_vfiprintf_r+0x42>
 8014598:	fb05 3202 	mla	r2, r5, r2, r3
 801459c:	2001      	movs	r0, #1
 801459e:	4688      	mov	r8, r1
 80145a0:	e78a      	b.n	80144b8 <_vfiprintf_r+0xc0>
 80145a2:	2300      	movs	r3, #0
 80145a4:	f108 0801 	add.w	r8, r8, #1
 80145a8:	9305      	str	r3, [sp, #20]
 80145aa:	4619      	mov	r1, r3
 80145ac:	250a      	movs	r5, #10
 80145ae:	4640      	mov	r0, r8
 80145b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145b4:	3a30      	subs	r2, #48	; 0x30
 80145b6:	2a09      	cmp	r2, #9
 80145b8:	d903      	bls.n	80145c2 <_vfiprintf_r+0x1ca>
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d0c3      	beq.n	8014546 <_vfiprintf_r+0x14e>
 80145be:	9105      	str	r1, [sp, #20]
 80145c0:	e7c1      	b.n	8014546 <_vfiprintf_r+0x14e>
 80145c2:	fb05 2101 	mla	r1, r5, r1, r2
 80145c6:	2301      	movs	r3, #1
 80145c8:	4680      	mov	r8, r0
 80145ca:	e7f0      	b.n	80145ae <_vfiprintf_r+0x1b6>
 80145cc:	ab03      	add	r3, sp, #12
 80145ce:	9300      	str	r3, [sp, #0]
 80145d0:	4622      	mov	r2, r4
 80145d2:	4b13      	ldr	r3, [pc, #76]	; (8014620 <_vfiprintf_r+0x228>)
 80145d4:	a904      	add	r1, sp, #16
 80145d6:	4630      	mov	r0, r6
 80145d8:	f000 f8b8 	bl	801474c <_printf_float>
 80145dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80145e0:	4681      	mov	r9, r0
 80145e2:	d1d5      	bne.n	8014590 <_vfiprintf_r+0x198>
 80145e4:	89a3      	ldrh	r3, [r4, #12]
 80145e6:	065b      	lsls	r3, r3, #25
 80145e8:	f53f af7e 	bmi.w	80144e8 <_vfiprintf_r+0xf0>
 80145ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145ee:	e77d      	b.n	80144ec <_vfiprintf_r+0xf4>
 80145f0:	ab03      	add	r3, sp, #12
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	4622      	mov	r2, r4
 80145f6:	4b0a      	ldr	r3, [pc, #40]	; (8014620 <_vfiprintf_r+0x228>)
 80145f8:	a904      	add	r1, sp, #16
 80145fa:	4630      	mov	r0, r6
 80145fc:	f000 fb5c 	bl	8014cb8 <_printf_i>
 8014600:	e7ec      	b.n	80145dc <_vfiprintf_r+0x1e4>
 8014602:	bf00      	nop
 8014604:	080232ec 	.word	0x080232ec
 8014608:	08023278 	.word	0x08023278
 801460c:	0802330c 	.word	0x0802330c
 8014610:	080232cc 	.word	0x080232cc
 8014614:	0802327e 	.word	0x0802327e
 8014618:	08023282 	.word	0x08023282
 801461c:	0801474d 	.word	0x0801474d
 8014620:	080143d3 	.word	0x080143d3

08014624 <__cvt>:
 8014624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014628:	ec55 4b10 	vmov	r4, r5, d0
 801462c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801462e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014632:	2d00      	cmp	r5, #0
 8014634:	460e      	mov	r6, r1
 8014636:	4691      	mov	r9, r2
 8014638:	4619      	mov	r1, r3
 801463a:	bfb8      	it	lt
 801463c:	4622      	movlt	r2, r4
 801463e:	462b      	mov	r3, r5
 8014640:	f027 0720 	bic.w	r7, r7, #32
 8014644:	bfbb      	ittet	lt
 8014646:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801464a:	461d      	movlt	r5, r3
 801464c:	2300      	movge	r3, #0
 801464e:	232d      	movlt	r3, #45	; 0x2d
 8014650:	bfb8      	it	lt
 8014652:	4614      	movlt	r4, r2
 8014654:	2f46      	cmp	r7, #70	; 0x46
 8014656:	700b      	strb	r3, [r1, #0]
 8014658:	d004      	beq.n	8014664 <__cvt+0x40>
 801465a:	2f45      	cmp	r7, #69	; 0x45
 801465c:	d100      	bne.n	8014660 <__cvt+0x3c>
 801465e:	3601      	adds	r6, #1
 8014660:	2102      	movs	r1, #2
 8014662:	e000      	b.n	8014666 <__cvt+0x42>
 8014664:	2103      	movs	r1, #3
 8014666:	ab03      	add	r3, sp, #12
 8014668:	9301      	str	r3, [sp, #4]
 801466a:	ab02      	add	r3, sp, #8
 801466c:	9300      	str	r3, [sp, #0]
 801466e:	4632      	mov	r2, r6
 8014670:	4653      	mov	r3, sl
 8014672:	ec45 4b10 	vmov	d0, r4, r5
 8014676:	f000 fe67 	bl	8015348 <_dtoa_r>
 801467a:	2f47      	cmp	r7, #71	; 0x47
 801467c:	4680      	mov	r8, r0
 801467e:	d102      	bne.n	8014686 <__cvt+0x62>
 8014680:	f019 0f01 	tst.w	r9, #1
 8014684:	d026      	beq.n	80146d4 <__cvt+0xb0>
 8014686:	2f46      	cmp	r7, #70	; 0x46
 8014688:	eb08 0906 	add.w	r9, r8, r6
 801468c:	d111      	bne.n	80146b2 <__cvt+0x8e>
 801468e:	f898 3000 	ldrb.w	r3, [r8]
 8014692:	2b30      	cmp	r3, #48	; 0x30
 8014694:	d10a      	bne.n	80146ac <__cvt+0x88>
 8014696:	2200      	movs	r2, #0
 8014698:	2300      	movs	r3, #0
 801469a:	4620      	mov	r0, r4
 801469c:	4629      	mov	r1, r5
 801469e:	f7ec fa23 	bl	8000ae8 <__aeabi_dcmpeq>
 80146a2:	b918      	cbnz	r0, 80146ac <__cvt+0x88>
 80146a4:	f1c6 0601 	rsb	r6, r6, #1
 80146a8:	f8ca 6000 	str.w	r6, [sl]
 80146ac:	f8da 3000 	ldr.w	r3, [sl]
 80146b0:	4499      	add	r9, r3
 80146b2:	2200      	movs	r2, #0
 80146b4:	2300      	movs	r3, #0
 80146b6:	4620      	mov	r0, r4
 80146b8:	4629      	mov	r1, r5
 80146ba:	f7ec fa15 	bl	8000ae8 <__aeabi_dcmpeq>
 80146be:	b938      	cbnz	r0, 80146d0 <__cvt+0xac>
 80146c0:	2230      	movs	r2, #48	; 0x30
 80146c2:	9b03      	ldr	r3, [sp, #12]
 80146c4:	454b      	cmp	r3, r9
 80146c6:	d205      	bcs.n	80146d4 <__cvt+0xb0>
 80146c8:	1c59      	adds	r1, r3, #1
 80146ca:	9103      	str	r1, [sp, #12]
 80146cc:	701a      	strb	r2, [r3, #0]
 80146ce:	e7f8      	b.n	80146c2 <__cvt+0x9e>
 80146d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80146d4:	9b03      	ldr	r3, [sp, #12]
 80146d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80146d8:	eba3 0308 	sub.w	r3, r3, r8
 80146dc:	4640      	mov	r0, r8
 80146de:	6013      	str	r3, [r2, #0]
 80146e0:	b004      	add	sp, #16
 80146e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080146e6 <__exponent>:
 80146e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146e8:	2900      	cmp	r1, #0
 80146ea:	4604      	mov	r4, r0
 80146ec:	bfba      	itte	lt
 80146ee:	4249      	neglt	r1, r1
 80146f0:	232d      	movlt	r3, #45	; 0x2d
 80146f2:	232b      	movge	r3, #43	; 0x2b
 80146f4:	2909      	cmp	r1, #9
 80146f6:	f804 2b02 	strb.w	r2, [r4], #2
 80146fa:	7043      	strb	r3, [r0, #1]
 80146fc:	dd20      	ble.n	8014740 <__exponent+0x5a>
 80146fe:	f10d 0307 	add.w	r3, sp, #7
 8014702:	461f      	mov	r7, r3
 8014704:	260a      	movs	r6, #10
 8014706:	fb91 f5f6 	sdiv	r5, r1, r6
 801470a:	fb06 1115 	mls	r1, r6, r5, r1
 801470e:	3130      	adds	r1, #48	; 0x30
 8014710:	2d09      	cmp	r5, #9
 8014712:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014716:	f103 32ff 	add.w	r2, r3, #4294967295
 801471a:	4629      	mov	r1, r5
 801471c:	dc09      	bgt.n	8014732 <__exponent+0x4c>
 801471e:	3130      	adds	r1, #48	; 0x30
 8014720:	3b02      	subs	r3, #2
 8014722:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014726:	42bb      	cmp	r3, r7
 8014728:	4622      	mov	r2, r4
 801472a:	d304      	bcc.n	8014736 <__exponent+0x50>
 801472c:	1a10      	subs	r0, r2, r0
 801472e:	b003      	add	sp, #12
 8014730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014732:	4613      	mov	r3, r2
 8014734:	e7e7      	b.n	8014706 <__exponent+0x20>
 8014736:	f813 2b01 	ldrb.w	r2, [r3], #1
 801473a:	f804 2b01 	strb.w	r2, [r4], #1
 801473e:	e7f2      	b.n	8014726 <__exponent+0x40>
 8014740:	2330      	movs	r3, #48	; 0x30
 8014742:	4419      	add	r1, r3
 8014744:	7083      	strb	r3, [r0, #2]
 8014746:	1d02      	adds	r2, r0, #4
 8014748:	70c1      	strb	r1, [r0, #3]
 801474a:	e7ef      	b.n	801472c <__exponent+0x46>

0801474c <_printf_float>:
 801474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014750:	b08d      	sub	sp, #52	; 0x34
 8014752:	460c      	mov	r4, r1
 8014754:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014758:	4616      	mov	r6, r2
 801475a:	461f      	mov	r7, r3
 801475c:	4605      	mov	r5, r0
 801475e:	f001 fd25 	bl	80161ac <_localeconv_r>
 8014762:	6803      	ldr	r3, [r0, #0]
 8014764:	9304      	str	r3, [sp, #16]
 8014766:	4618      	mov	r0, r3
 8014768:	f7eb fd3c 	bl	80001e4 <strlen>
 801476c:	2300      	movs	r3, #0
 801476e:	930a      	str	r3, [sp, #40]	; 0x28
 8014770:	f8d8 3000 	ldr.w	r3, [r8]
 8014774:	9005      	str	r0, [sp, #20]
 8014776:	3307      	adds	r3, #7
 8014778:	f023 0307 	bic.w	r3, r3, #7
 801477c:	f103 0208 	add.w	r2, r3, #8
 8014780:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014784:	f8d4 b000 	ldr.w	fp, [r4]
 8014788:	f8c8 2000 	str.w	r2, [r8]
 801478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014790:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014794:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014798:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801479c:	9307      	str	r3, [sp, #28]
 801479e:	f8cd 8018 	str.w	r8, [sp, #24]
 80147a2:	f04f 32ff 	mov.w	r2, #4294967295
 80147a6:	4ba7      	ldr	r3, [pc, #668]	; (8014a44 <_printf_float+0x2f8>)
 80147a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80147ac:	f7ec f9ce 	bl	8000b4c <__aeabi_dcmpun>
 80147b0:	bb70      	cbnz	r0, 8014810 <_printf_float+0xc4>
 80147b2:	f04f 32ff 	mov.w	r2, #4294967295
 80147b6:	4ba3      	ldr	r3, [pc, #652]	; (8014a44 <_printf_float+0x2f8>)
 80147b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80147bc:	f7ec f9a8 	bl	8000b10 <__aeabi_dcmple>
 80147c0:	bb30      	cbnz	r0, 8014810 <_printf_float+0xc4>
 80147c2:	2200      	movs	r2, #0
 80147c4:	2300      	movs	r3, #0
 80147c6:	4640      	mov	r0, r8
 80147c8:	4649      	mov	r1, r9
 80147ca:	f7ec f997 	bl	8000afc <__aeabi_dcmplt>
 80147ce:	b110      	cbz	r0, 80147d6 <_printf_float+0x8a>
 80147d0:	232d      	movs	r3, #45	; 0x2d
 80147d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147d6:	4a9c      	ldr	r2, [pc, #624]	; (8014a48 <_printf_float+0x2fc>)
 80147d8:	4b9c      	ldr	r3, [pc, #624]	; (8014a4c <_printf_float+0x300>)
 80147da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80147de:	bf8c      	ite	hi
 80147e0:	4690      	movhi	r8, r2
 80147e2:	4698      	movls	r8, r3
 80147e4:	2303      	movs	r3, #3
 80147e6:	f02b 0204 	bic.w	r2, fp, #4
 80147ea:	6123      	str	r3, [r4, #16]
 80147ec:	6022      	str	r2, [r4, #0]
 80147ee:	f04f 0900 	mov.w	r9, #0
 80147f2:	9700      	str	r7, [sp, #0]
 80147f4:	4633      	mov	r3, r6
 80147f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80147f8:	4621      	mov	r1, r4
 80147fa:	4628      	mov	r0, r5
 80147fc:	f000 f9e6 	bl	8014bcc <_printf_common>
 8014800:	3001      	adds	r0, #1
 8014802:	f040 808d 	bne.w	8014920 <_printf_float+0x1d4>
 8014806:	f04f 30ff 	mov.w	r0, #4294967295
 801480a:	b00d      	add	sp, #52	; 0x34
 801480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014810:	4642      	mov	r2, r8
 8014812:	464b      	mov	r3, r9
 8014814:	4640      	mov	r0, r8
 8014816:	4649      	mov	r1, r9
 8014818:	f7ec f998 	bl	8000b4c <__aeabi_dcmpun>
 801481c:	b110      	cbz	r0, 8014824 <_printf_float+0xd8>
 801481e:	4a8c      	ldr	r2, [pc, #560]	; (8014a50 <_printf_float+0x304>)
 8014820:	4b8c      	ldr	r3, [pc, #560]	; (8014a54 <_printf_float+0x308>)
 8014822:	e7da      	b.n	80147da <_printf_float+0x8e>
 8014824:	6861      	ldr	r1, [r4, #4]
 8014826:	1c4b      	adds	r3, r1, #1
 8014828:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801482c:	a80a      	add	r0, sp, #40	; 0x28
 801482e:	d13e      	bne.n	80148ae <_printf_float+0x162>
 8014830:	2306      	movs	r3, #6
 8014832:	6063      	str	r3, [r4, #4]
 8014834:	2300      	movs	r3, #0
 8014836:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801483a:	ab09      	add	r3, sp, #36	; 0x24
 801483c:	9300      	str	r3, [sp, #0]
 801483e:	ec49 8b10 	vmov	d0, r8, r9
 8014842:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014846:	6022      	str	r2, [r4, #0]
 8014848:	f8cd a004 	str.w	sl, [sp, #4]
 801484c:	6861      	ldr	r1, [r4, #4]
 801484e:	4628      	mov	r0, r5
 8014850:	f7ff fee8 	bl	8014624 <__cvt>
 8014854:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014858:	2b47      	cmp	r3, #71	; 0x47
 801485a:	4680      	mov	r8, r0
 801485c:	d109      	bne.n	8014872 <_printf_float+0x126>
 801485e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014860:	1cd8      	adds	r0, r3, #3
 8014862:	db02      	blt.n	801486a <_printf_float+0x11e>
 8014864:	6862      	ldr	r2, [r4, #4]
 8014866:	4293      	cmp	r3, r2
 8014868:	dd47      	ble.n	80148fa <_printf_float+0x1ae>
 801486a:	f1aa 0a02 	sub.w	sl, sl, #2
 801486e:	fa5f fa8a 	uxtb.w	sl, sl
 8014872:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014876:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014878:	d824      	bhi.n	80148c4 <_printf_float+0x178>
 801487a:	3901      	subs	r1, #1
 801487c:	4652      	mov	r2, sl
 801487e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014882:	9109      	str	r1, [sp, #36]	; 0x24
 8014884:	f7ff ff2f 	bl	80146e6 <__exponent>
 8014888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801488a:	1813      	adds	r3, r2, r0
 801488c:	2a01      	cmp	r2, #1
 801488e:	4681      	mov	r9, r0
 8014890:	6123      	str	r3, [r4, #16]
 8014892:	dc02      	bgt.n	801489a <_printf_float+0x14e>
 8014894:	6822      	ldr	r2, [r4, #0]
 8014896:	07d1      	lsls	r1, r2, #31
 8014898:	d501      	bpl.n	801489e <_printf_float+0x152>
 801489a:	3301      	adds	r3, #1
 801489c:	6123      	str	r3, [r4, #16]
 801489e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d0a5      	beq.n	80147f2 <_printf_float+0xa6>
 80148a6:	232d      	movs	r3, #45	; 0x2d
 80148a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148ac:	e7a1      	b.n	80147f2 <_printf_float+0xa6>
 80148ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80148b2:	f000 8177 	beq.w	8014ba4 <_printf_float+0x458>
 80148b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80148ba:	d1bb      	bne.n	8014834 <_printf_float+0xe8>
 80148bc:	2900      	cmp	r1, #0
 80148be:	d1b9      	bne.n	8014834 <_printf_float+0xe8>
 80148c0:	2301      	movs	r3, #1
 80148c2:	e7b6      	b.n	8014832 <_printf_float+0xe6>
 80148c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80148c8:	d119      	bne.n	80148fe <_printf_float+0x1b2>
 80148ca:	2900      	cmp	r1, #0
 80148cc:	6863      	ldr	r3, [r4, #4]
 80148ce:	dd0c      	ble.n	80148ea <_printf_float+0x19e>
 80148d0:	6121      	str	r1, [r4, #16]
 80148d2:	b913      	cbnz	r3, 80148da <_printf_float+0x18e>
 80148d4:	6822      	ldr	r2, [r4, #0]
 80148d6:	07d2      	lsls	r2, r2, #31
 80148d8:	d502      	bpl.n	80148e0 <_printf_float+0x194>
 80148da:	3301      	adds	r3, #1
 80148dc:	440b      	add	r3, r1
 80148de:	6123      	str	r3, [r4, #16]
 80148e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80148e4:	f04f 0900 	mov.w	r9, #0
 80148e8:	e7d9      	b.n	801489e <_printf_float+0x152>
 80148ea:	b913      	cbnz	r3, 80148f2 <_printf_float+0x1a6>
 80148ec:	6822      	ldr	r2, [r4, #0]
 80148ee:	07d0      	lsls	r0, r2, #31
 80148f0:	d501      	bpl.n	80148f6 <_printf_float+0x1aa>
 80148f2:	3302      	adds	r3, #2
 80148f4:	e7f3      	b.n	80148de <_printf_float+0x192>
 80148f6:	2301      	movs	r3, #1
 80148f8:	e7f1      	b.n	80148de <_printf_float+0x192>
 80148fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80148fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014902:	4293      	cmp	r3, r2
 8014904:	db05      	blt.n	8014912 <_printf_float+0x1c6>
 8014906:	6822      	ldr	r2, [r4, #0]
 8014908:	6123      	str	r3, [r4, #16]
 801490a:	07d1      	lsls	r1, r2, #31
 801490c:	d5e8      	bpl.n	80148e0 <_printf_float+0x194>
 801490e:	3301      	adds	r3, #1
 8014910:	e7e5      	b.n	80148de <_printf_float+0x192>
 8014912:	2b00      	cmp	r3, #0
 8014914:	bfd4      	ite	le
 8014916:	f1c3 0302 	rsble	r3, r3, #2
 801491a:	2301      	movgt	r3, #1
 801491c:	4413      	add	r3, r2
 801491e:	e7de      	b.n	80148de <_printf_float+0x192>
 8014920:	6823      	ldr	r3, [r4, #0]
 8014922:	055a      	lsls	r2, r3, #21
 8014924:	d407      	bmi.n	8014936 <_printf_float+0x1ea>
 8014926:	6923      	ldr	r3, [r4, #16]
 8014928:	4642      	mov	r2, r8
 801492a:	4631      	mov	r1, r6
 801492c:	4628      	mov	r0, r5
 801492e:	47b8      	blx	r7
 8014930:	3001      	adds	r0, #1
 8014932:	d12b      	bne.n	801498c <_printf_float+0x240>
 8014934:	e767      	b.n	8014806 <_printf_float+0xba>
 8014936:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801493a:	f240 80dc 	bls.w	8014af6 <_printf_float+0x3aa>
 801493e:	2200      	movs	r2, #0
 8014940:	2300      	movs	r3, #0
 8014942:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014946:	f7ec f8cf 	bl	8000ae8 <__aeabi_dcmpeq>
 801494a:	2800      	cmp	r0, #0
 801494c:	d033      	beq.n	80149b6 <_printf_float+0x26a>
 801494e:	2301      	movs	r3, #1
 8014950:	4a41      	ldr	r2, [pc, #260]	; (8014a58 <_printf_float+0x30c>)
 8014952:	4631      	mov	r1, r6
 8014954:	4628      	mov	r0, r5
 8014956:	47b8      	blx	r7
 8014958:	3001      	adds	r0, #1
 801495a:	f43f af54 	beq.w	8014806 <_printf_float+0xba>
 801495e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014962:	429a      	cmp	r2, r3
 8014964:	db02      	blt.n	801496c <_printf_float+0x220>
 8014966:	6823      	ldr	r3, [r4, #0]
 8014968:	07d8      	lsls	r0, r3, #31
 801496a:	d50f      	bpl.n	801498c <_printf_float+0x240>
 801496c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014970:	4631      	mov	r1, r6
 8014972:	4628      	mov	r0, r5
 8014974:	47b8      	blx	r7
 8014976:	3001      	adds	r0, #1
 8014978:	f43f af45 	beq.w	8014806 <_printf_float+0xba>
 801497c:	f04f 0800 	mov.w	r8, #0
 8014980:	f104 091a 	add.w	r9, r4, #26
 8014984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014986:	3b01      	subs	r3, #1
 8014988:	4543      	cmp	r3, r8
 801498a:	dc09      	bgt.n	80149a0 <_printf_float+0x254>
 801498c:	6823      	ldr	r3, [r4, #0]
 801498e:	079b      	lsls	r3, r3, #30
 8014990:	f100 8103 	bmi.w	8014b9a <_printf_float+0x44e>
 8014994:	68e0      	ldr	r0, [r4, #12]
 8014996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014998:	4298      	cmp	r0, r3
 801499a:	bfb8      	it	lt
 801499c:	4618      	movlt	r0, r3
 801499e:	e734      	b.n	801480a <_printf_float+0xbe>
 80149a0:	2301      	movs	r3, #1
 80149a2:	464a      	mov	r2, r9
 80149a4:	4631      	mov	r1, r6
 80149a6:	4628      	mov	r0, r5
 80149a8:	47b8      	blx	r7
 80149aa:	3001      	adds	r0, #1
 80149ac:	f43f af2b 	beq.w	8014806 <_printf_float+0xba>
 80149b0:	f108 0801 	add.w	r8, r8, #1
 80149b4:	e7e6      	b.n	8014984 <_printf_float+0x238>
 80149b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	dc2b      	bgt.n	8014a14 <_printf_float+0x2c8>
 80149bc:	2301      	movs	r3, #1
 80149be:	4a26      	ldr	r2, [pc, #152]	; (8014a58 <_printf_float+0x30c>)
 80149c0:	4631      	mov	r1, r6
 80149c2:	4628      	mov	r0, r5
 80149c4:	47b8      	blx	r7
 80149c6:	3001      	adds	r0, #1
 80149c8:	f43f af1d 	beq.w	8014806 <_printf_float+0xba>
 80149cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149ce:	b923      	cbnz	r3, 80149da <_printf_float+0x28e>
 80149d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149d2:	b913      	cbnz	r3, 80149da <_printf_float+0x28e>
 80149d4:	6823      	ldr	r3, [r4, #0]
 80149d6:	07d9      	lsls	r1, r3, #31
 80149d8:	d5d8      	bpl.n	801498c <_printf_float+0x240>
 80149da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149de:	4631      	mov	r1, r6
 80149e0:	4628      	mov	r0, r5
 80149e2:	47b8      	blx	r7
 80149e4:	3001      	adds	r0, #1
 80149e6:	f43f af0e 	beq.w	8014806 <_printf_float+0xba>
 80149ea:	f04f 0900 	mov.w	r9, #0
 80149ee:	f104 0a1a 	add.w	sl, r4, #26
 80149f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149f4:	425b      	negs	r3, r3
 80149f6:	454b      	cmp	r3, r9
 80149f8:	dc01      	bgt.n	80149fe <_printf_float+0x2b2>
 80149fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149fc:	e794      	b.n	8014928 <_printf_float+0x1dc>
 80149fe:	2301      	movs	r3, #1
 8014a00:	4652      	mov	r2, sl
 8014a02:	4631      	mov	r1, r6
 8014a04:	4628      	mov	r0, r5
 8014a06:	47b8      	blx	r7
 8014a08:	3001      	adds	r0, #1
 8014a0a:	f43f aefc 	beq.w	8014806 <_printf_float+0xba>
 8014a0e:	f109 0901 	add.w	r9, r9, #1
 8014a12:	e7ee      	b.n	80149f2 <_printf_float+0x2a6>
 8014a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	bfa8      	it	ge
 8014a1c:	461a      	movge	r2, r3
 8014a1e:	2a00      	cmp	r2, #0
 8014a20:	4691      	mov	r9, r2
 8014a22:	dd07      	ble.n	8014a34 <_printf_float+0x2e8>
 8014a24:	4613      	mov	r3, r2
 8014a26:	4631      	mov	r1, r6
 8014a28:	4642      	mov	r2, r8
 8014a2a:	4628      	mov	r0, r5
 8014a2c:	47b8      	blx	r7
 8014a2e:	3001      	adds	r0, #1
 8014a30:	f43f aee9 	beq.w	8014806 <_printf_float+0xba>
 8014a34:	f104 031a 	add.w	r3, r4, #26
 8014a38:	f04f 0b00 	mov.w	fp, #0
 8014a3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a40:	9306      	str	r3, [sp, #24]
 8014a42:	e015      	b.n	8014a70 <_printf_float+0x324>
 8014a44:	7fefffff 	.word	0x7fefffff
 8014a48:	0802328d 	.word	0x0802328d
 8014a4c:	08023289 	.word	0x08023289
 8014a50:	08023295 	.word	0x08023295
 8014a54:	08023291 	.word	0x08023291
 8014a58:	08023299 	.word	0x08023299
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	9a06      	ldr	r2, [sp, #24]
 8014a60:	4631      	mov	r1, r6
 8014a62:	4628      	mov	r0, r5
 8014a64:	47b8      	blx	r7
 8014a66:	3001      	adds	r0, #1
 8014a68:	f43f aecd 	beq.w	8014806 <_printf_float+0xba>
 8014a6c:	f10b 0b01 	add.w	fp, fp, #1
 8014a70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014a74:	ebaa 0309 	sub.w	r3, sl, r9
 8014a78:	455b      	cmp	r3, fp
 8014a7a:	dcef      	bgt.n	8014a5c <_printf_float+0x310>
 8014a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a80:	429a      	cmp	r2, r3
 8014a82:	44d0      	add	r8, sl
 8014a84:	db15      	blt.n	8014ab2 <_printf_float+0x366>
 8014a86:	6823      	ldr	r3, [r4, #0]
 8014a88:	07da      	lsls	r2, r3, #31
 8014a8a:	d412      	bmi.n	8014ab2 <_printf_float+0x366>
 8014a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a90:	eba3 020a 	sub.w	r2, r3, sl
 8014a94:	eba3 0a01 	sub.w	sl, r3, r1
 8014a98:	4592      	cmp	sl, r2
 8014a9a:	bfa8      	it	ge
 8014a9c:	4692      	movge	sl, r2
 8014a9e:	f1ba 0f00 	cmp.w	sl, #0
 8014aa2:	dc0e      	bgt.n	8014ac2 <_printf_float+0x376>
 8014aa4:	f04f 0800 	mov.w	r8, #0
 8014aa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014aac:	f104 091a 	add.w	r9, r4, #26
 8014ab0:	e019      	b.n	8014ae6 <_printf_float+0x39a>
 8014ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ab6:	4631      	mov	r1, r6
 8014ab8:	4628      	mov	r0, r5
 8014aba:	47b8      	blx	r7
 8014abc:	3001      	adds	r0, #1
 8014abe:	d1e5      	bne.n	8014a8c <_printf_float+0x340>
 8014ac0:	e6a1      	b.n	8014806 <_printf_float+0xba>
 8014ac2:	4653      	mov	r3, sl
 8014ac4:	4642      	mov	r2, r8
 8014ac6:	4631      	mov	r1, r6
 8014ac8:	4628      	mov	r0, r5
 8014aca:	47b8      	blx	r7
 8014acc:	3001      	adds	r0, #1
 8014ace:	d1e9      	bne.n	8014aa4 <_printf_float+0x358>
 8014ad0:	e699      	b.n	8014806 <_printf_float+0xba>
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	464a      	mov	r2, r9
 8014ad6:	4631      	mov	r1, r6
 8014ad8:	4628      	mov	r0, r5
 8014ada:	47b8      	blx	r7
 8014adc:	3001      	adds	r0, #1
 8014ade:	f43f ae92 	beq.w	8014806 <_printf_float+0xba>
 8014ae2:	f108 0801 	add.w	r8, r8, #1
 8014ae6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014aea:	1a9b      	subs	r3, r3, r2
 8014aec:	eba3 030a 	sub.w	r3, r3, sl
 8014af0:	4543      	cmp	r3, r8
 8014af2:	dcee      	bgt.n	8014ad2 <_printf_float+0x386>
 8014af4:	e74a      	b.n	801498c <_printf_float+0x240>
 8014af6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014af8:	2a01      	cmp	r2, #1
 8014afa:	dc01      	bgt.n	8014b00 <_printf_float+0x3b4>
 8014afc:	07db      	lsls	r3, r3, #31
 8014afe:	d53a      	bpl.n	8014b76 <_printf_float+0x42a>
 8014b00:	2301      	movs	r3, #1
 8014b02:	4642      	mov	r2, r8
 8014b04:	4631      	mov	r1, r6
 8014b06:	4628      	mov	r0, r5
 8014b08:	47b8      	blx	r7
 8014b0a:	3001      	adds	r0, #1
 8014b0c:	f43f ae7b 	beq.w	8014806 <_printf_float+0xba>
 8014b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b14:	4631      	mov	r1, r6
 8014b16:	4628      	mov	r0, r5
 8014b18:	47b8      	blx	r7
 8014b1a:	3001      	adds	r0, #1
 8014b1c:	f108 0801 	add.w	r8, r8, #1
 8014b20:	f43f ae71 	beq.w	8014806 <_printf_float+0xba>
 8014b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b26:	2200      	movs	r2, #0
 8014b28:	f103 3aff 	add.w	sl, r3, #4294967295
 8014b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014b30:	2300      	movs	r3, #0
 8014b32:	f7eb ffd9 	bl	8000ae8 <__aeabi_dcmpeq>
 8014b36:	b9c8      	cbnz	r0, 8014b6c <_printf_float+0x420>
 8014b38:	4653      	mov	r3, sl
 8014b3a:	4642      	mov	r2, r8
 8014b3c:	4631      	mov	r1, r6
 8014b3e:	4628      	mov	r0, r5
 8014b40:	47b8      	blx	r7
 8014b42:	3001      	adds	r0, #1
 8014b44:	d10e      	bne.n	8014b64 <_printf_float+0x418>
 8014b46:	e65e      	b.n	8014806 <_printf_float+0xba>
 8014b48:	2301      	movs	r3, #1
 8014b4a:	4652      	mov	r2, sl
 8014b4c:	4631      	mov	r1, r6
 8014b4e:	4628      	mov	r0, r5
 8014b50:	47b8      	blx	r7
 8014b52:	3001      	adds	r0, #1
 8014b54:	f43f ae57 	beq.w	8014806 <_printf_float+0xba>
 8014b58:	f108 0801 	add.w	r8, r8, #1
 8014b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b5e:	3b01      	subs	r3, #1
 8014b60:	4543      	cmp	r3, r8
 8014b62:	dcf1      	bgt.n	8014b48 <_printf_float+0x3fc>
 8014b64:	464b      	mov	r3, r9
 8014b66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014b6a:	e6de      	b.n	801492a <_printf_float+0x1de>
 8014b6c:	f04f 0800 	mov.w	r8, #0
 8014b70:	f104 0a1a 	add.w	sl, r4, #26
 8014b74:	e7f2      	b.n	8014b5c <_printf_float+0x410>
 8014b76:	2301      	movs	r3, #1
 8014b78:	e7df      	b.n	8014b3a <_printf_float+0x3ee>
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	464a      	mov	r2, r9
 8014b7e:	4631      	mov	r1, r6
 8014b80:	4628      	mov	r0, r5
 8014b82:	47b8      	blx	r7
 8014b84:	3001      	adds	r0, #1
 8014b86:	f43f ae3e 	beq.w	8014806 <_printf_float+0xba>
 8014b8a:	f108 0801 	add.w	r8, r8, #1
 8014b8e:	68e3      	ldr	r3, [r4, #12]
 8014b90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b92:	1a9b      	subs	r3, r3, r2
 8014b94:	4543      	cmp	r3, r8
 8014b96:	dcf0      	bgt.n	8014b7a <_printf_float+0x42e>
 8014b98:	e6fc      	b.n	8014994 <_printf_float+0x248>
 8014b9a:	f04f 0800 	mov.w	r8, #0
 8014b9e:	f104 0919 	add.w	r9, r4, #25
 8014ba2:	e7f4      	b.n	8014b8e <_printf_float+0x442>
 8014ba4:	2900      	cmp	r1, #0
 8014ba6:	f43f ae8b 	beq.w	80148c0 <_printf_float+0x174>
 8014baa:	2300      	movs	r3, #0
 8014bac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014bb0:	ab09      	add	r3, sp, #36	; 0x24
 8014bb2:	9300      	str	r3, [sp, #0]
 8014bb4:	ec49 8b10 	vmov	d0, r8, r9
 8014bb8:	6022      	str	r2, [r4, #0]
 8014bba:	f8cd a004 	str.w	sl, [sp, #4]
 8014bbe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014bc2:	4628      	mov	r0, r5
 8014bc4:	f7ff fd2e 	bl	8014624 <__cvt>
 8014bc8:	4680      	mov	r8, r0
 8014bca:	e648      	b.n	801485e <_printf_float+0x112>

08014bcc <_printf_common>:
 8014bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bd0:	4691      	mov	r9, r2
 8014bd2:	461f      	mov	r7, r3
 8014bd4:	688a      	ldr	r2, [r1, #8]
 8014bd6:	690b      	ldr	r3, [r1, #16]
 8014bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014bdc:	4293      	cmp	r3, r2
 8014bde:	bfb8      	it	lt
 8014be0:	4613      	movlt	r3, r2
 8014be2:	f8c9 3000 	str.w	r3, [r9]
 8014be6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014bea:	4606      	mov	r6, r0
 8014bec:	460c      	mov	r4, r1
 8014bee:	b112      	cbz	r2, 8014bf6 <_printf_common+0x2a>
 8014bf0:	3301      	adds	r3, #1
 8014bf2:	f8c9 3000 	str.w	r3, [r9]
 8014bf6:	6823      	ldr	r3, [r4, #0]
 8014bf8:	0699      	lsls	r1, r3, #26
 8014bfa:	bf42      	ittt	mi
 8014bfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014c00:	3302      	addmi	r3, #2
 8014c02:	f8c9 3000 	strmi.w	r3, [r9]
 8014c06:	6825      	ldr	r5, [r4, #0]
 8014c08:	f015 0506 	ands.w	r5, r5, #6
 8014c0c:	d107      	bne.n	8014c1e <_printf_common+0x52>
 8014c0e:	f104 0a19 	add.w	sl, r4, #25
 8014c12:	68e3      	ldr	r3, [r4, #12]
 8014c14:	f8d9 2000 	ldr.w	r2, [r9]
 8014c18:	1a9b      	subs	r3, r3, r2
 8014c1a:	42ab      	cmp	r3, r5
 8014c1c:	dc28      	bgt.n	8014c70 <_printf_common+0xa4>
 8014c1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014c22:	6822      	ldr	r2, [r4, #0]
 8014c24:	3300      	adds	r3, #0
 8014c26:	bf18      	it	ne
 8014c28:	2301      	movne	r3, #1
 8014c2a:	0692      	lsls	r2, r2, #26
 8014c2c:	d42d      	bmi.n	8014c8a <_printf_common+0xbe>
 8014c2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c32:	4639      	mov	r1, r7
 8014c34:	4630      	mov	r0, r6
 8014c36:	47c0      	blx	r8
 8014c38:	3001      	adds	r0, #1
 8014c3a:	d020      	beq.n	8014c7e <_printf_common+0xb2>
 8014c3c:	6823      	ldr	r3, [r4, #0]
 8014c3e:	68e5      	ldr	r5, [r4, #12]
 8014c40:	f8d9 2000 	ldr.w	r2, [r9]
 8014c44:	f003 0306 	and.w	r3, r3, #6
 8014c48:	2b04      	cmp	r3, #4
 8014c4a:	bf08      	it	eq
 8014c4c:	1aad      	subeq	r5, r5, r2
 8014c4e:	68a3      	ldr	r3, [r4, #8]
 8014c50:	6922      	ldr	r2, [r4, #16]
 8014c52:	bf0c      	ite	eq
 8014c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c58:	2500      	movne	r5, #0
 8014c5a:	4293      	cmp	r3, r2
 8014c5c:	bfc4      	itt	gt
 8014c5e:	1a9b      	subgt	r3, r3, r2
 8014c60:	18ed      	addgt	r5, r5, r3
 8014c62:	f04f 0900 	mov.w	r9, #0
 8014c66:	341a      	adds	r4, #26
 8014c68:	454d      	cmp	r5, r9
 8014c6a:	d11a      	bne.n	8014ca2 <_printf_common+0xd6>
 8014c6c:	2000      	movs	r0, #0
 8014c6e:	e008      	b.n	8014c82 <_printf_common+0xb6>
 8014c70:	2301      	movs	r3, #1
 8014c72:	4652      	mov	r2, sl
 8014c74:	4639      	mov	r1, r7
 8014c76:	4630      	mov	r0, r6
 8014c78:	47c0      	blx	r8
 8014c7a:	3001      	adds	r0, #1
 8014c7c:	d103      	bne.n	8014c86 <_printf_common+0xba>
 8014c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c86:	3501      	adds	r5, #1
 8014c88:	e7c3      	b.n	8014c12 <_printf_common+0x46>
 8014c8a:	18e1      	adds	r1, r4, r3
 8014c8c:	1c5a      	adds	r2, r3, #1
 8014c8e:	2030      	movs	r0, #48	; 0x30
 8014c90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c94:	4422      	add	r2, r4
 8014c96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c9e:	3302      	adds	r3, #2
 8014ca0:	e7c5      	b.n	8014c2e <_printf_common+0x62>
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	4622      	mov	r2, r4
 8014ca6:	4639      	mov	r1, r7
 8014ca8:	4630      	mov	r0, r6
 8014caa:	47c0      	blx	r8
 8014cac:	3001      	adds	r0, #1
 8014cae:	d0e6      	beq.n	8014c7e <_printf_common+0xb2>
 8014cb0:	f109 0901 	add.w	r9, r9, #1
 8014cb4:	e7d8      	b.n	8014c68 <_printf_common+0x9c>
	...

08014cb8 <_printf_i>:
 8014cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014cc0:	460c      	mov	r4, r1
 8014cc2:	7e09      	ldrb	r1, [r1, #24]
 8014cc4:	b085      	sub	sp, #20
 8014cc6:	296e      	cmp	r1, #110	; 0x6e
 8014cc8:	4617      	mov	r7, r2
 8014cca:	4606      	mov	r6, r0
 8014ccc:	4698      	mov	r8, r3
 8014cce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014cd0:	f000 80b3 	beq.w	8014e3a <_printf_i+0x182>
 8014cd4:	d822      	bhi.n	8014d1c <_printf_i+0x64>
 8014cd6:	2963      	cmp	r1, #99	; 0x63
 8014cd8:	d036      	beq.n	8014d48 <_printf_i+0x90>
 8014cda:	d80a      	bhi.n	8014cf2 <_printf_i+0x3a>
 8014cdc:	2900      	cmp	r1, #0
 8014cde:	f000 80b9 	beq.w	8014e54 <_printf_i+0x19c>
 8014ce2:	2958      	cmp	r1, #88	; 0x58
 8014ce4:	f000 8083 	beq.w	8014dee <_printf_i+0x136>
 8014ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014cec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014cf0:	e032      	b.n	8014d58 <_printf_i+0xa0>
 8014cf2:	2964      	cmp	r1, #100	; 0x64
 8014cf4:	d001      	beq.n	8014cfa <_printf_i+0x42>
 8014cf6:	2969      	cmp	r1, #105	; 0x69
 8014cf8:	d1f6      	bne.n	8014ce8 <_printf_i+0x30>
 8014cfa:	6820      	ldr	r0, [r4, #0]
 8014cfc:	6813      	ldr	r3, [r2, #0]
 8014cfe:	0605      	lsls	r5, r0, #24
 8014d00:	f103 0104 	add.w	r1, r3, #4
 8014d04:	d52a      	bpl.n	8014d5c <_printf_i+0xa4>
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	6011      	str	r1, [r2, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	da03      	bge.n	8014d16 <_printf_i+0x5e>
 8014d0e:	222d      	movs	r2, #45	; 0x2d
 8014d10:	425b      	negs	r3, r3
 8014d12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014d16:	486f      	ldr	r0, [pc, #444]	; (8014ed4 <_printf_i+0x21c>)
 8014d18:	220a      	movs	r2, #10
 8014d1a:	e039      	b.n	8014d90 <_printf_i+0xd8>
 8014d1c:	2973      	cmp	r1, #115	; 0x73
 8014d1e:	f000 809d 	beq.w	8014e5c <_printf_i+0x1a4>
 8014d22:	d808      	bhi.n	8014d36 <_printf_i+0x7e>
 8014d24:	296f      	cmp	r1, #111	; 0x6f
 8014d26:	d020      	beq.n	8014d6a <_printf_i+0xb2>
 8014d28:	2970      	cmp	r1, #112	; 0x70
 8014d2a:	d1dd      	bne.n	8014ce8 <_printf_i+0x30>
 8014d2c:	6823      	ldr	r3, [r4, #0]
 8014d2e:	f043 0320 	orr.w	r3, r3, #32
 8014d32:	6023      	str	r3, [r4, #0]
 8014d34:	e003      	b.n	8014d3e <_printf_i+0x86>
 8014d36:	2975      	cmp	r1, #117	; 0x75
 8014d38:	d017      	beq.n	8014d6a <_printf_i+0xb2>
 8014d3a:	2978      	cmp	r1, #120	; 0x78
 8014d3c:	d1d4      	bne.n	8014ce8 <_printf_i+0x30>
 8014d3e:	2378      	movs	r3, #120	; 0x78
 8014d40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014d44:	4864      	ldr	r0, [pc, #400]	; (8014ed8 <_printf_i+0x220>)
 8014d46:	e055      	b.n	8014df4 <_printf_i+0x13c>
 8014d48:	6813      	ldr	r3, [r2, #0]
 8014d4a:	1d19      	adds	r1, r3, #4
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	6011      	str	r1, [r2, #0]
 8014d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d58:	2301      	movs	r3, #1
 8014d5a:	e08c      	b.n	8014e76 <_printf_i+0x1be>
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	6011      	str	r1, [r2, #0]
 8014d60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d64:	bf18      	it	ne
 8014d66:	b21b      	sxthne	r3, r3
 8014d68:	e7cf      	b.n	8014d0a <_printf_i+0x52>
 8014d6a:	6813      	ldr	r3, [r2, #0]
 8014d6c:	6825      	ldr	r5, [r4, #0]
 8014d6e:	1d18      	adds	r0, r3, #4
 8014d70:	6010      	str	r0, [r2, #0]
 8014d72:	0628      	lsls	r0, r5, #24
 8014d74:	d501      	bpl.n	8014d7a <_printf_i+0xc2>
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	e002      	b.n	8014d80 <_printf_i+0xc8>
 8014d7a:	0668      	lsls	r0, r5, #25
 8014d7c:	d5fb      	bpl.n	8014d76 <_printf_i+0xbe>
 8014d7e:	881b      	ldrh	r3, [r3, #0]
 8014d80:	4854      	ldr	r0, [pc, #336]	; (8014ed4 <_printf_i+0x21c>)
 8014d82:	296f      	cmp	r1, #111	; 0x6f
 8014d84:	bf14      	ite	ne
 8014d86:	220a      	movne	r2, #10
 8014d88:	2208      	moveq	r2, #8
 8014d8a:	2100      	movs	r1, #0
 8014d8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d90:	6865      	ldr	r5, [r4, #4]
 8014d92:	60a5      	str	r5, [r4, #8]
 8014d94:	2d00      	cmp	r5, #0
 8014d96:	f2c0 8095 	blt.w	8014ec4 <_printf_i+0x20c>
 8014d9a:	6821      	ldr	r1, [r4, #0]
 8014d9c:	f021 0104 	bic.w	r1, r1, #4
 8014da0:	6021      	str	r1, [r4, #0]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d13d      	bne.n	8014e22 <_printf_i+0x16a>
 8014da6:	2d00      	cmp	r5, #0
 8014da8:	f040 808e 	bne.w	8014ec8 <_printf_i+0x210>
 8014dac:	4665      	mov	r5, ip
 8014dae:	2a08      	cmp	r2, #8
 8014db0:	d10b      	bne.n	8014dca <_printf_i+0x112>
 8014db2:	6823      	ldr	r3, [r4, #0]
 8014db4:	07db      	lsls	r3, r3, #31
 8014db6:	d508      	bpl.n	8014dca <_printf_i+0x112>
 8014db8:	6923      	ldr	r3, [r4, #16]
 8014dba:	6862      	ldr	r2, [r4, #4]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	bfde      	ittt	le
 8014dc0:	2330      	movle	r3, #48	; 0x30
 8014dc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014dc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014dca:	ebac 0305 	sub.w	r3, ip, r5
 8014dce:	6123      	str	r3, [r4, #16]
 8014dd0:	f8cd 8000 	str.w	r8, [sp]
 8014dd4:	463b      	mov	r3, r7
 8014dd6:	aa03      	add	r2, sp, #12
 8014dd8:	4621      	mov	r1, r4
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f7ff fef6 	bl	8014bcc <_printf_common>
 8014de0:	3001      	adds	r0, #1
 8014de2:	d14d      	bne.n	8014e80 <_printf_i+0x1c8>
 8014de4:	f04f 30ff 	mov.w	r0, #4294967295
 8014de8:	b005      	add	sp, #20
 8014dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014dee:	4839      	ldr	r0, [pc, #228]	; (8014ed4 <_printf_i+0x21c>)
 8014df0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014df4:	6813      	ldr	r3, [r2, #0]
 8014df6:	6821      	ldr	r1, [r4, #0]
 8014df8:	1d1d      	adds	r5, r3, #4
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	6015      	str	r5, [r2, #0]
 8014dfe:	060a      	lsls	r2, r1, #24
 8014e00:	d50b      	bpl.n	8014e1a <_printf_i+0x162>
 8014e02:	07ca      	lsls	r2, r1, #31
 8014e04:	bf44      	itt	mi
 8014e06:	f041 0120 	orrmi.w	r1, r1, #32
 8014e0a:	6021      	strmi	r1, [r4, #0]
 8014e0c:	b91b      	cbnz	r3, 8014e16 <_printf_i+0x15e>
 8014e0e:	6822      	ldr	r2, [r4, #0]
 8014e10:	f022 0220 	bic.w	r2, r2, #32
 8014e14:	6022      	str	r2, [r4, #0]
 8014e16:	2210      	movs	r2, #16
 8014e18:	e7b7      	b.n	8014d8a <_printf_i+0xd2>
 8014e1a:	064d      	lsls	r5, r1, #25
 8014e1c:	bf48      	it	mi
 8014e1e:	b29b      	uxthmi	r3, r3
 8014e20:	e7ef      	b.n	8014e02 <_printf_i+0x14a>
 8014e22:	4665      	mov	r5, ip
 8014e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8014e28:	fb02 3311 	mls	r3, r2, r1, r3
 8014e2c:	5cc3      	ldrb	r3, [r0, r3]
 8014e2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014e32:	460b      	mov	r3, r1
 8014e34:	2900      	cmp	r1, #0
 8014e36:	d1f5      	bne.n	8014e24 <_printf_i+0x16c>
 8014e38:	e7b9      	b.n	8014dae <_printf_i+0xf6>
 8014e3a:	6813      	ldr	r3, [r2, #0]
 8014e3c:	6825      	ldr	r5, [r4, #0]
 8014e3e:	6961      	ldr	r1, [r4, #20]
 8014e40:	1d18      	adds	r0, r3, #4
 8014e42:	6010      	str	r0, [r2, #0]
 8014e44:	0628      	lsls	r0, r5, #24
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	d501      	bpl.n	8014e4e <_printf_i+0x196>
 8014e4a:	6019      	str	r1, [r3, #0]
 8014e4c:	e002      	b.n	8014e54 <_printf_i+0x19c>
 8014e4e:	066a      	lsls	r2, r5, #25
 8014e50:	d5fb      	bpl.n	8014e4a <_printf_i+0x192>
 8014e52:	8019      	strh	r1, [r3, #0]
 8014e54:	2300      	movs	r3, #0
 8014e56:	6123      	str	r3, [r4, #16]
 8014e58:	4665      	mov	r5, ip
 8014e5a:	e7b9      	b.n	8014dd0 <_printf_i+0x118>
 8014e5c:	6813      	ldr	r3, [r2, #0]
 8014e5e:	1d19      	adds	r1, r3, #4
 8014e60:	6011      	str	r1, [r2, #0]
 8014e62:	681d      	ldr	r5, [r3, #0]
 8014e64:	6862      	ldr	r2, [r4, #4]
 8014e66:	2100      	movs	r1, #0
 8014e68:	4628      	mov	r0, r5
 8014e6a:	f7eb f9c9 	bl	8000200 <memchr>
 8014e6e:	b108      	cbz	r0, 8014e74 <_printf_i+0x1bc>
 8014e70:	1b40      	subs	r0, r0, r5
 8014e72:	6060      	str	r0, [r4, #4]
 8014e74:	6863      	ldr	r3, [r4, #4]
 8014e76:	6123      	str	r3, [r4, #16]
 8014e78:	2300      	movs	r3, #0
 8014e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e7e:	e7a7      	b.n	8014dd0 <_printf_i+0x118>
 8014e80:	6923      	ldr	r3, [r4, #16]
 8014e82:	462a      	mov	r2, r5
 8014e84:	4639      	mov	r1, r7
 8014e86:	4630      	mov	r0, r6
 8014e88:	47c0      	blx	r8
 8014e8a:	3001      	adds	r0, #1
 8014e8c:	d0aa      	beq.n	8014de4 <_printf_i+0x12c>
 8014e8e:	6823      	ldr	r3, [r4, #0]
 8014e90:	079b      	lsls	r3, r3, #30
 8014e92:	d413      	bmi.n	8014ebc <_printf_i+0x204>
 8014e94:	68e0      	ldr	r0, [r4, #12]
 8014e96:	9b03      	ldr	r3, [sp, #12]
 8014e98:	4298      	cmp	r0, r3
 8014e9a:	bfb8      	it	lt
 8014e9c:	4618      	movlt	r0, r3
 8014e9e:	e7a3      	b.n	8014de8 <_printf_i+0x130>
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	464a      	mov	r2, r9
 8014ea4:	4639      	mov	r1, r7
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	47c0      	blx	r8
 8014eaa:	3001      	adds	r0, #1
 8014eac:	d09a      	beq.n	8014de4 <_printf_i+0x12c>
 8014eae:	3501      	adds	r5, #1
 8014eb0:	68e3      	ldr	r3, [r4, #12]
 8014eb2:	9a03      	ldr	r2, [sp, #12]
 8014eb4:	1a9b      	subs	r3, r3, r2
 8014eb6:	42ab      	cmp	r3, r5
 8014eb8:	dcf2      	bgt.n	8014ea0 <_printf_i+0x1e8>
 8014eba:	e7eb      	b.n	8014e94 <_printf_i+0x1dc>
 8014ebc:	2500      	movs	r5, #0
 8014ebe:	f104 0919 	add.w	r9, r4, #25
 8014ec2:	e7f5      	b.n	8014eb0 <_printf_i+0x1f8>
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d1ac      	bne.n	8014e22 <_printf_i+0x16a>
 8014ec8:	7803      	ldrb	r3, [r0, #0]
 8014eca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014ece:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ed2:	e76c      	b.n	8014dae <_printf_i+0xf6>
 8014ed4:	0802329b 	.word	0x0802329b
 8014ed8:	080232ac 	.word	0x080232ac

08014edc <_sbrk_r>:
 8014edc:	b538      	push	{r3, r4, r5, lr}
 8014ede:	4c06      	ldr	r4, [pc, #24]	; (8014ef8 <_sbrk_r+0x1c>)
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	4605      	mov	r5, r0
 8014ee4:	4608      	mov	r0, r1
 8014ee6:	6023      	str	r3, [r4, #0]
 8014ee8:	f7fb fa1a 	bl	8010320 <_sbrk>
 8014eec:	1c43      	adds	r3, r0, #1
 8014eee:	d102      	bne.n	8014ef6 <_sbrk_r+0x1a>
 8014ef0:	6823      	ldr	r3, [r4, #0]
 8014ef2:	b103      	cbz	r3, 8014ef6 <_sbrk_r+0x1a>
 8014ef4:	602b      	str	r3, [r5, #0]
 8014ef6:	bd38      	pop	{r3, r4, r5, pc}
 8014ef8:	2000079c 	.word	0x2000079c

08014efc <_raise_r>:
 8014efc:	291f      	cmp	r1, #31
 8014efe:	b538      	push	{r3, r4, r5, lr}
 8014f00:	4604      	mov	r4, r0
 8014f02:	460d      	mov	r5, r1
 8014f04:	d904      	bls.n	8014f10 <_raise_r+0x14>
 8014f06:	2316      	movs	r3, #22
 8014f08:	6003      	str	r3, [r0, #0]
 8014f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8014f0e:	bd38      	pop	{r3, r4, r5, pc}
 8014f10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014f12:	b112      	cbz	r2, 8014f1a <_raise_r+0x1e>
 8014f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f18:	b94b      	cbnz	r3, 8014f2e <_raise_r+0x32>
 8014f1a:	4620      	mov	r0, r4
 8014f1c:	f000 f830 	bl	8014f80 <_getpid_r>
 8014f20:	462a      	mov	r2, r5
 8014f22:	4601      	mov	r1, r0
 8014f24:	4620      	mov	r0, r4
 8014f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f2a:	f000 b817 	b.w	8014f5c <_kill_r>
 8014f2e:	2b01      	cmp	r3, #1
 8014f30:	d00a      	beq.n	8014f48 <_raise_r+0x4c>
 8014f32:	1c59      	adds	r1, r3, #1
 8014f34:	d103      	bne.n	8014f3e <_raise_r+0x42>
 8014f36:	2316      	movs	r3, #22
 8014f38:	6003      	str	r3, [r0, #0]
 8014f3a:	2001      	movs	r0, #1
 8014f3c:	e7e7      	b.n	8014f0e <_raise_r+0x12>
 8014f3e:	2400      	movs	r4, #0
 8014f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014f44:	4628      	mov	r0, r5
 8014f46:	4798      	blx	r3
 8014f48:	2000      	movs	r0, #0
 8014f4a:	e7e0      	b.n	8014f0e <_raise_r+0x12>

08014f4c <raise>:
 8014f4c:	4b02      	ldr	r3, [pc, #8]	; (8014f58 <raise+0xc>)
 8014f4e:	4601      	mov	r1, r0
 8014f50:	6818      	ldr	r0, [r3, #0]
 8014f52:	f7ff bfd3 	b.w	8014efc <_raise_r>
 8014f56:	bf00      	nop
 8014f58:	2000002c 	.word	0x2000002c

08014f5c <_kill_r>:
 8014f5c:	b538      	push	{r3, r4, r5, lr}
 8014f5e:	4c07      	ldr	r4, [pc, #28]	; (8014f7c <_kill_r+0x20>)
 8014f60:	2300      	movs	r3, #0
 8014f62:	4605      	mov	r5, r0
 8014f64:	4608      	mov	r0, r1
 8014f66:	4611      	mov	r1, r2
 8014f68:	6023      	str	r3, [r4, #0]
 8014f6a:	f7fb f951 	bl	8010210 <_kill>
 8014f6e:	1c43      	adds	r3, r0, #1
 8014f70:	d102      	bne.n	8014f78 <_kill_r+0x1c>
 8014f72:	6823      	ldr	r3, [r4, #0]
 8014f74:	b103      	cbz	r3, 8014f78 <_kill_r+0x1c>
 8014f76:	602b      	str	r3, [r5, #0]
 8014f78:	bd38      	pop	{r3, r4, r5, pc}
 8014f7a:	bf00      	nop
 8014f7c:	2000079c 	.word	0x2000079c

08014f80 <_getpid_r>:
 8014f80:	f7fb b93e 	b.w	8010200 <_getpid>

08014f84 <siprintf>:
 8014f84:	b40e      	push	{r1, r2, r3}
 8014f86:	b500      	push	{lr}
 8014f88:	b09c      	sub	sp, #112	; 0x70
 8014f8a:	ab1d      	add	r3, sp, #116	; 0x74
 8014f8c:	9002      	str	r0, [sp, #8]
 8014f8e:	9006      	str	r0, [sp, #24]
 8014f90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014f94:	4809      	ldr	r0, [pc, #36]	; (8014fbc <siprintf+0x38>)
 8014f96:	9107      	str	r1, [sp, #28]
 8014f98:	9104      	str	r1, [sp, #16]
 8014f9a:	4909      	ldr	r1, [pc, #36]	; (8014fc0 <siprintf+0x3c>)
 8014f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fa0:	9105      	str	r1, [sp, #20]
 8014fa2:	6800      	ldr	r0, [r0, #0]
 8014fa4:	9301      	str	r3, [sp, #4]
 8014fa6:	a902      	add	r1, sp, #8
 8014fa8:	f001 fcd0 	bl	801694c <_svfiprintf_r>
 8014fac:	9b02      	ldr	r3, [sp, #8]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	701a      	strb	r2, [r3, #0]
 8014fb2:	b01c      	add	sp, #112	; 0x70
 8014fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fb8:	b003      	add	sp, #12
 8014fba:	4770      	bx	lr
 8014fbc:	2000002c 	.word	0x2000002c
 8014fc0:	ffff0208 	.word	0xffff0208

08014fc4 <strncmp>:
 8014fc4:	b510      	push	{r4, lr}
 8014fc6:	b16a      	cbz	r2, 8014fe4 <strncmp+0x20>
 8014fc8:	3901      	subs	r1, #1
 8014fca:	1884      	adds	r4, r0, r2
 8014fcc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014fd0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014fd4:	4293      	cmp	r3, r2
 8014fd6:	d103      	bne.n	8014fe0 <strncmp+0x1c>
 8014fd8:	42a0      	cmp	r0, r4
 8014fda:	d001      	beq.n	8014fe0 <strncmp+0x1c>
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d1f5      	bne.n	8014fcc <strncmp+0x8>
 8014fe0:	1a98      	subs	r0, r3, r2
 8014fe2:	bd10      	pop	{r4, pc}
 8014fe4:	4610      	mov	r0, r2
 8014fe6:	e7fc      	b.n	8014fe2 <strncmp+0x1e>

08014fe8 <__swbuf_r>:
 8014fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fea:	460e      	mov	r6, r1
 8014fec:	4614      	mov	r4, r2
 8014fee:	4605      	mov	r5, r0
 8014ff0:	b118      	cbz	r0, 8014ffa <__swbuf_r+0x12>
 8014ff2:	6983      	ldr	r3, [r0, #24]
 8014ff4:	b90b      	cbnz	r3, 8014ffa <__swbuf_r+0x12>
 8014ff6:	f001 f84f 	bl	8016098 <__sinit>
 8014ffa:	4b21      	ldr	r3, [pc, #132]	; (8015080 <__swbuf_r+0x98>)
 8014ffc:	429c      	cmp	r4, r3
 8014ffe:	d12a      	bne.n	8015056 <__swbuf_r+0x6e>
 8015000:	686c      	ldr	r4, [r5, #4]
 8015002:	69a3      	ldr	r3, [r4, #24]
 8015004:	60a3      	str	r3, [r4, #8]
 8015006:	89a3      	ldrh	r3, [r4, #12]
 8015008:	071a      	lsls	r2, r3, #28
 801500a:	d52e      	bpl.n	801506a <__swbuf_r+0x82>
 801500c:	6923      	ldr	r3, [r4, #16]
 801500e:	b363      	cbz	r3, 801506a <__swbuf_r+0x82>
 8015010:	6923      	ldr	r3, [r4, #16]
 8015012:	6820      	ldr	r0, [r4, #0]
 8015014:	1ac0      	subs	r0, r0, r3
 8015016:	6963      	ldr	r3, [r4, #20]
 8015018:	b2f6      	uxtb	r6, r6
 801501a:	4283      	cmp	r3, r0
 801501c:	4637      	mov	r7, r6
 801501e:	dc04      	bgt.n	801502a <__swbuf_r+0x42>
 8015020:	4621      	mov	r1, r4
 8015022:	4628      	mov	r0, r5
 8015024:	f000 ffce 	bl	8015fc4 <_fflush_r>
 8015028:	bb28      	cbnz	r0, 8015076 <__swbuf_r+0x8e>
 801502a:	68a3      	ldr	r3, [r4, #8]
 801502c:	3b01      	subs	r3, #1
 801502e:	60a3      	str	r3, [r4, #8]
 8015030:	6823      	ldr	r3, [r4, #0]
 8015032:	1c5a      	adds	r2, r3, #1
 8015034:	6022      	str	r2, [r4, #0]
 8015036:	701e      	strb	r6, [r3, #0]
 8015038:	6963      	ldr	r3, [r4, #20]
 801503a:	3001      	adds	r0, #1
 801503c:	4283      	cmp	r3, r0
 801503e:	d004      	beq.n	801504a <__swbuf_r+0x62>
 8015040:	89a3      	ldrh	r3, [r4, #12]
 8015042:	07db      	lsls	r3, r3, #31
 8015044:	d519      	bpl.n	801507a <__swbuf_r+0x92>
 8015046:	2e0a      	cmp	r6, #10
 8015048:	d117      	bne.n	801507a <__swbuf_r+0x92>
 801504a:	4621      	mov	r1, r4
 801504c:	4628      	mov	r0, r5
 801504e:	f000 ffb9 	bl	8015fc4 <_fflush_r>
 8015052:	b190      	cbz	r0, 801507a <__swbuf_r+0x92>
 8015054:	e00f      	b.n	8015076 <__swbuf_r+0x8e>
 8015056:	4b0b      	ldr	r3, [pc, #44]	; (8015084 <__swbuf_r+0x9c>)
 8015058:	429c      	cmp	r4, r3
 801505a:	d101      	bne.n	8015060 <__swbuf_r+0x78>
 801505c:	68ac      	ldr	r4, [r5, #8]
 801505e:	e7d0      	b.n	8015002 <__swbuf_r+0x1a>
 8015060:	4b09      	ldr	r3, [pc, #36]	; (8015088 <__swbuf_r+0xa0>)
 8015062:	429c      	cmp	r4, r3
 8015064:	bf08      	it	eq
 8015066:	68ec      	ldreq	r4, [r5, #12]
 8015068:	e7cb      	b.n	8015002 <__swbuf_r+0x1a>
 801506a:	4621      	mov	r1, r4
 801506c:	4628      	mov	r0, r5
 801506e:	f000 f80d 	bl	801508c <__swsetup_r>
 8015072:	2800      	cmp	r0, #0
 8015074:	d0cc      	beq.n	8015010 <__swbuf_r+0x28>
 8015076:	f04f 37ff 	mov.w	r7, #4294967295
 801507a:	4638      	mov	r0, r7
 801507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801507e:	bf00      	nop
 8015080:	080232ec 	.word	0x080232ec
 8015084:	0802330c 	.word	0x0802330c
 8015088:	080232cc 	.word	0x080232cc

0801508c <__swsetup_r>:
 801508c:	4b32      	ldr	r3, [pc, #200]	; (8015158 <__swsetup_r+0xcc>)
 801508e:	b570      	push	{r4, r5, r6, lr}
 8015090:	681d      	ldr	r5, [r3, #0]
 8015092:	4606      	mov	r6, r0
 8015094:	460c      	mov	r4, r1
 8015096:	b125      	cbz	r5, 80150a2 <__swsetup_r+0x16>
 8015098:	69ab      	ldr	r3, [r5, #24]
 801509a:	b913      	cbnz	r3, 80150a2 <__swsetup_r+0x16>
 801509c:	4628      	mov	r0, r5
 801509e:	f000 fffb 	bl	8016098 <__sinit>
 80150a2:	4b2e      	ldr	r3, [pc, #184]	; (801515c <__swsetup_r+0xd0>)
 80150a4:	429c      	cmp	r4, r3
 80150a6:	d10f      	bne.n	80150c8 <__swsetup_r+0x3c>
 80150a8:	686c      	ldr	r4, [r5, #4]
 80150aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150ae:	b29a      	uxth	r2, r3
 80150b0:	0715      	lsls	r5, r2, #28
 80150b2:	d42c      	bmi.n	801510e <__swsetup_r+0x82>
 80150b4:	06d0      	lsls	r0, r2, #27
 80150b6:	d411      	bmi.n	80150dc <__swsetup_r+0x50>
 80150b8:	2209      	movs	r2, #9
 80150ba:	6032      	str	r2, [r6, #0]
 80150bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150c0:	81a3      	strh	r3, [r4, #12]
 80150c2:	f04f 30ff 	mov.w	r0, #4294967295
 80150c6:	e03e      	b.n	8015146 <__swsetup_r+0xba>
 80150c8:	4b25      	ldr	r3, [pc, #148]	; (8015160 <__swsetup_r+0xd4>)
 80150ca:	429c      	cmp	r4, r3
 80150cc:	d101      	bne.n	80150d2 <__swsetup_r+0x46>
 80150ce:	68ac      	ldr	r4, [r5, #8]
 80150d0:	e7eb      	b.n	80150aa <__swsetup_r+0x1e>
 80150d2:	4b24      	ldr	r3, [pc, #144]	; (8015164 <__swsetup_r+0xd8>)
 80150d4:	429c      	cmp	r4, r3
 80150d6:	bf08      	it	eq
 80150d8:	68ec      	ldreq	r4, [r5, #12]
 80150da:	e7e6      	b.n	80150aa <__swsetup_r+0x1e>
 80150dc:	0751      	lsls	r1, r2, #29
 80150de:	d512      	bpl.n	8015106 <__swsetup_r+0x7a>
 80150e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80150e2:	b141      	cbz	r1, 80150f6 <__swsetup_r+0x6a>
 80150e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80150e8:	4299      	cmp	r1, r3
 80150ea:	d002      	beq.n	80150f2 <__swsetup_r+0x66>
 80150ec:	4630      	mov	r0, r6
 80150ee:	f7ff f8b1 	bl	8014254 <_free_r>
 80150f2:	2300      	movs	r3, #0
 80150f4:	6363      	str	r3, [r4, #52]	; 0x34
 80150f6:	89a3      	ldrh	r3, [r4, #12]
 80150f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80150fc:	81a3      	strh	r3, [r4, #12]
 80150fe:	2300      	movs	r3, #0
 8015100:	6063      	str	r3, [r4, #4]
 8015102:	6923      	ldr	r3, [r4, #16]
 8015104:	6023      	str	r3, [r4, #0]
 8015106:	89a3      	ldrh	r3, [r4, #12]
 8015108:	f043 0308 	orr.w	r3, r3, #8
 801510c:	81a3      	strh	r3, [r4, #12]
 801510e:	6923      	ldr	r3, [r4, #16]
 8015110:	b94b      	cbnz	r3, 8015126 <__swsetup_r+0x9a>
 8015112:	89a3      	ldrh	r3, [r4, #12]
 8015114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801511c:	d003      	beq.n	8015126 <__swsetup_r+0x9a>
 801511e:	4621      	mov	r1, r4
 8015120:	4630      	mov	r0, r6
 8015122:	f001 f875 	bl	8016210 <__smakebuf_r>
 8015126:	89a2      	ldrh	r2, [r4, #12]
 8015128:	f012 0301 	ands.w	r3, r2, #1
 801512c:	d00c      	beq.n	8015148 <__swsetup_r+0xbc>
 801512e:	2300      	movs	r3, #0
 8015130:	60a3      	str	r3, [r4, #8]
 8015132:	6963      	ldr	r3, [r4, #20]
 8015134:	425b      	negs	r3, r3
 8015136:	61a3      	str	r3, [r4, #24]
 8015138:	6923      	ldr	r3, [r4, #16]
 801513a:	b953      	cbnz	r3, 8015152 <__swsetup_r+0xc6>
 801513c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015140:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015144:	d1ba      	bne.n	80150bc <__swsetup_r+0x30>
 8015146:	bd70      	pop	{r4, r5, r6, pc}
 8015148:	0792      	lsls	r2, r2, #30
 801514a:	bf58      	it	pl
 801514c:	6963      	ldrpl	r3, [r4, #20]
 801514e:	60a3      	str	r3, [r4, #8]
 8015150:	e7f2      	b.n	8015138 <__swsetup_r+0xac>
 8015152:	2000      	movs	r0, #0
 8015154:	e7f7      	b.n	8015146 <__swsetup_r+0xba>
 8015156:	bf00      	nop
 8015158:	2000002c 	.word	0x2000002c
 801515c:	080232ec 	.word	0x080232ec
 8015160:	0802330c 	.word	0x0802330c
 8015164:	080232cc 	.word	0x080232cc

08015168 <__register_exitproc>:
 8015168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801516c:	4d2c      	ldr	r5, [pc, #176]	; (8015220 <__register_exitproc+0xb8>)
 801516e:	682c      	ldr	r4, [r5, #0]
 8015170:	4607      	mov	r7, r0
 8015172:	460e      	mov	r6, r1
 8015174:	4691      	mov	r9, r2
 8015176:	4698      	mov	r8, r3
 8015178:	b934      	cbnz	r4, 8015188 <__register_exitproc+0x20>
 801517a:	4b2a      	ldr	r3, [pc, #168]	; (8015224 <__register_exitproc+0xbc>)
 801517c:	4c2a      	ldr	r4, [pc, #168]	; (8015228 <__register_exitproc+0xc0>)
 801517e:	602c      	str	r4, [r5, #0]
 8015180:	b113      	cbz	r3, 8015188 <__register_exitproc+0x20>
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8015188:	6863      	ldr	r3, [r4, #4]
 801518a:	2b1f      	cmp	r3, #31
 801518c:	dd3d      	ble.n	801520a <__register_exitproc+0xa2>
 801518e:	4b27      	ldr	r3, [pc, #156]	; (801522c <__register_exitproc+0xc4>)
 8015190:	b91b      	cbnz	r3, 801519a <__register_exitproc+0x32>
 8015192:	f04f 30ff 	mov.w	r0, #4294967295
 8015196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801519a:	208c      	movs	r0, #140	; 0x8c
 801519c:	f7ff f810 	bl	80141c0 <malloc>
 80151a0:	4604      	mov	r4, r0
 80151a2:	2800      	cmp	r0, #0
 80151a4:	d0f5      	beq.n	8015192 <__register_exitproc+0x2a>
 80151a6:	2300      	movs	r3, #0
 80151a8:	682a      	ldr	r2, [r5, #0]
 80151aa:	6002      	str	r2, [r0, #0]
 80151ac:	6043      	str	r3, [r0, #4]
 80151ae:	6028      	str	r0, [r5, #0]
 80151b0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80151b4:	b30f      	cbz	r7, 80151fa <__register_exitproc+0x92>
 80151b6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80151ba:	f7ff f801 	bl	80141c0 <malloc>
 80151be:	2800      	cmp	r0, #0
 80151c0:	d0e7      	beq.n	8015192 <__register_exitproc+0x2a>
 80151c2:	2300      	movs	r3, #0
 80151c4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80151c8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80151cc:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80151d0:	6862      	ldr	r2, [r4, #4]
 80151d2:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80151d6:	2301      	movs	r3, #1
 80151d8:	4093      	lsls	r3, r2
 80151da:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80151de:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80151e2:	431a      	orrs	r2, r3
 80151e4:	2f02      	cmp	r7, #2
 80151e6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80151ea:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80151ee:	bf02      	ittt	eq
 80151f0:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80151f4:	4313      	orreq	r3, r2
 80151f6:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80151fa:	6863      	ldr	r3, [r4, #4]
 80151fc:	1c5a      	adds	r2, r3, #1
 80151fe:	3302      	adds	r3, #2
 8015200:	6062      	str	r2, [r4, #4]
 8015202:	2000      	movs	r0, #0
 8015204:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8015208:	e7c5      	b.n	8015196 <__register_exitproc+0x2e>
 801520a:	2f00      	cmp	r7, #0
 801520c:	d0f5      	beq.n	80151fa <__register_exitproc+0x92>
 801520e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8015212:	2800      	cmp	r0, #0
 8015214:	d1dc      	bne.n	80151d0 <__register_exitproc+0x68>
 8015216:	4b05      	ldr	r3, [pc, #20]	; (801522c <__register_exitproc+0xc4>)
 8015218:	2b00      	cmp	r3, #0
 801521a:	d0ba      	beq.n	8015192 <__register_exitproc+0x2a>
 801521c:	e7cb      	b.n	80151b6 <__register_exitproc+0x4e>
 801521e:	bf00      	nop
 8015220:	20000794 	.word	0x20000794
 8015224:	00000000 	.word	0x00000000
 8015228:	20000708 	.word	0x20000708
 801522c:	080141c1 	.word	0x080141c1

08015230 <quorem>:
 8015230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015234:	6903      	ldr	r3, [r0, #16]
 8015236:	690c      	ldr	r4, [r1, #16]
 8015238:	42a3      	cmp	r3, r4
 801523a:	4680      	mov	r8, r0
 801523c:	f2c0 8082 	blt.w	8015344 <quorem+0x114>
 8015240:	3c01      	subs	r4, #1
 8015242:	f101 0714 	add.w	r7, r1, #20
 8015246:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801524a:	f100 0614 	add.w	r6, r0, #20
 801524e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8015252:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015256:	eb06 030c 	add.w	r3, r6, ip
 801525a:	3501      	adds	r5, #1
 801525c:	eb07 090c 	add.w	r9, r7, ip
 8015260:	9301      	str	r3, [sp, #4]
 8015262:	fbb0 f5f5 	udiv	r5, r0, r5
 8015266:	b395      	cbz	r5, 80152ce <quorem+0x9e>
 8015268:	f04f 0a00 	mov.w	sl, #0
 801526c:	4638      	mov	r0, r7
 801526e:	46b6      	mov	lr, r6
 8015270:	46d3      	mov	fp, sl
 8015272:	f850 2b04 	ldr.w	r2, [r0], #4
 8015276:	b293      	uxth	r3, r2
 8015278:	fb05 a303 	mla	r3, r5, r3, sl
 801527c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015280:	b29b      	uxth	r3, r3
 8015282:	ebab 0303 	sub.w	r3, fp, r3
 8015286:	0c12      	lsrs	r2, r2, #16
 8015288:	f8de b000 	ldr.w	fp, [lr]
 801528c:	fb05 a202 	mla	r2, r5, r2, sl
 8015290:	fa13 f38b 	uxtah	r3, r3, fp
 8015294:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015298:	fa1f fb82 	uxth.w	fp, r2
 801529c:	f8de 2000 	ldr.w	r2, [lr]
 80152a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80152a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80152a8:	b29b      	uxth	r3, r3
 80152aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80152ae:	4581      	cmp	r9, r0
 80152b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80152b4:	f84e 3b04 	str.w	r3, [lr], #4
 80152b8:	d2db      	bcs.n	8015272 <quorem+0x42>
 80152ba:	f856 300c 	ldr.w	r3, [r6, ip]
 80152be:	b933      	cbnz	r3, 80152ce <quorem+0x9e>
 80152c0:	9b01      	ldr	r3, [sp, #4]
 80152c2:	3b04      	subs	r3, #4
 80152c4:	429e      	cmp	r6, r3
 80152c6:	461a      	mov	r2, r3
 80152c8:	d330      	bcc.n	801532c <quorem+0xfc>
 80152ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80152ce:	4640      	mov	r0, r8
 80152d0:	f001 f9f6 	bl	80166c0 <__mcmp>
 80152d4:	2800      	cmp	r0, #0
 80152d6:	db25      	blt.n	8015324 <quorem+0xf4>
 80152d8:	3501      	adds	r5, #1
 80152da:	4630      	mov	r0, r6
 80152dc:	f04f 0c00 	mov.w	ip, #0
 80152e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80152e4:	f8d0 e000 	ldr.w	lr, [r0]
 80152e8:	b293      	uxth	r3, r2
 80152ea:	ebac 0303 	sub.w	r3, ip, r3
 80152ee:	0c12      	lsrs	r2, r2, #16
 80152f0:	fa13 f38e 	uxtah	r3, r3, lr
 80152f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80152f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015302:	45b9      	cmp	r9, r7
 8015304:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015308:	f840 3b04 	str.w	r3, [r0], #4
 801530c:	d2e8      	bcs.n	80152e0 <quorem+0xb0>
 801530e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015312:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015316:	b92a      	cbnz	r2, 8015324 <quorem+0xf4>
 8015318:	3b04      	subs	r3, #4
 801531a:	429e      	cmp	r6, r3
 801531c:	461a      	mov	r2, r3
 801531e:	d30b      	bcc.n	8015338 <quorem+0x108>
 8015320:	f8c8 4010 	str.w	r4, [r8, #16]
 8015324:	4628      	mov	r0, r5
 8015326:	b003      	add	sp, #12
 8015328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801532c:	6812      	ldr	r2, [r2, #0]
 801532e:	3b04      	subs	r3, #4
 8015330:	2a00      	cmp	r2, #0
 8015332:	d1ca      	bne.n	80152ca <quorem+0x9a>
 8015334:	3c01      	subs	r4, #1
 8015336:	e7c5      	b.n	80152c4 <quorem+0x94>
 8015338:	6812      	ldr	r2, [r2, #0]
 801533a:	3b04      	subs	r3, #4
 801533c:	2a00      	cmp	r2, #0
 801533e:	d1ef      	bne.n	8015320 <quorem+0xf0>
 8015340:	3c01      	subs	r4, #1
 8015342:	e7ea      	b.n	801531a <quorem+0xea>
 8015344:	2000      	movs	r0, #0
 8015346:	e7ee      	b.n	8015326 <quorem+0xf6>

08015348 <_dtoa_r>:
 8015348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801534c:	ec57 6b10 	vmov	r6, r7, d0
 8015350:	b097      	sub	sp, #92	; 0x5c
 8015352:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015354:	9106      	str	r1, [sp, #24]
 8015356:	4604      	mov	r4, r0
 8015358:	920b      	str	r2, [sp, #44]	; 0x2c
 801535a:	9312      	str	r3, [sp, #72]	; 0x48
 801535c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015360:	e9cd 6700 	strd	r6, r7, [sp]
 8015364:	b93d      	cbnz	r5, 8015376 <_dtoa_r+0x2e>
 8015366:	2010      	movs	r0, #16
 8015368:	f7fe ff2a 	bl	80141c0 <malloc>
 801536c:	6260      	str	r0, [r4, #36]	; 0x24
 801536e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015372:	6005      	str	r5, [r0, #0]
 8015374:	60c5      	str	r5, [r0, #12]
 8015376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015378:	6819      	ldr	r1, [r3, #0]
 801537a:	b151      	cbz	r1, 8015392 <_dtoa_r+0x4a>
 801537c:	685a      	ldr	r2, [r3, #4]
 801537e:	604a      	str	r2, [r1, #4]
 8015380:	2301      	movs	r3, #1
 8015382:	4093      	lsls	r3, r2
 8015384:	608b      	str	r3, [r1, #8]
 8015386:	4620      	mov	r0, r4
 8015388:	f000 ffb8 	bl	80162fc <_Bfree>
 801538c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801538e:	2200      	movs	r2, #0
 8015390:	601a      	str	r2, [r3, #0]
 8015392:	1e3b      	subs	r3, r7, #0
 8015394:	bfbb      	ittet	lt
 8015396:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801539a:	9301      	strlt	r3, [sp, #4]
 801539c:	2300      	movge	r3, #0
 801539e:	2201      	movlt	r2, #1
 80153a0:	bfac      	ite	ge
 80153a2:	f8c8 3000 	strge.w	r3, [r8]
 80153a6:	f8c8 2000 	strlt.w	r2, [r8]
 80153aa:	4baf      	ldr	r3, [pc, #700]	; (8015668 <_dtoa_r+0x320>)
 80153ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80153b0:	ea33 0308 	bics.w	r3, r3, r8
 80153b4:	d114      	bne.n	80153e0 <_dtoa_r+0x98>
 80153b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80153b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80153bc:	6013      	str	r3, [r2, #0]
 80153be:	9b00      	ldr	r3, [sp, #0]
 80153c0:	b923      	cbnz	r3, 80153cc <_dtoa_r+0x84>
 80153c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80153c6:	2800      	cmp	r0, #0
 80153c8:	f000 8542 	beq.w	8015e50 <_dtoa_r+0xb08>
 80153cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80153ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801567c <_dtoa_r+0x334>
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	f000 8544 	beq.w	8015e60 <_dtoa_r+0xb18>
 80153d8:	f10b 0303 	add.w	r3, fp, #3
 80153dc:	f000 bd3e 	b.w	8015e5c <_dtoa_r+0xb14>
 80153e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80153e4:	2200      	movs	r2, #0
 80153e6:	2300      	movs	r3, #0
 80153e8:	4630      	mov	r0, r6
 80153ea:	4639      	mov	r1, r7
 80153ec:	f7eb fb7c 	bl	8000ae8 <__aeabi_dcmpeq>
 80153f0:	4681      	mov	r9, r0
 80153f2:	b168      	cbz	r0, 8015410 <_dtoa_r+0xc8>
 80153f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80153f6:	2301      	movs	r3, #1
 80153f8:	6013      	str	r3, [r2, #0]
 80153fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	f000 8524 	beq.w	8015e4a <_dtoa_r+0xb02>
 8015402:	4b9a      	ldr	r3, [pc, #616]	; (801566c <_dtoa_r+0x324>)
 8015404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015406:	f103 3bff 	add.w	fp, r3, #4294967295
 801540a:	6013      	str	r3, [r2, #0]
 801540c:	f000 bd28 	b.w	8015e60 <_dtoa_r+0xb18>
 8015410:	aa14      	add	r2, sp, #80	; 0x50
 8015412:	a915      	add	r1, sp, #84	; 0x54
 8015414:	ec47 6b10 	vmov	d0, r6, r7
 8015418:	4620      	mov	r0, r4
 801541a:	f001 f9c8 	bl	80167ae <__d2b>
 801541e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015422:	9004      	str	r0, [sp, #16]
 8015424:	2d00      	cmp	r5, #0
 8015426:	d07c      	beq.n	8015522 <_dtoa_r+0x1da>
 8015428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801542c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015430:	46b2      	mov	sl, r6
 8015432:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8015436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801543a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801543e:	2200      	movs	r2, #0
 8015440:	4b8b      	ldr	r3, [pc, #556]	; (8015670 <_dtoa_r+0x328>)
 8015442:	4650      	mov	r0, sl
 8015444:	4659      	mov	r1, fp
 8015446:	f7ea ff2f 	bl	80002a8 <__aeabi_dsub>
 801544a:	a381      	add	r3, pc, #516	; (adr r3, 8015650 <_dtoa_r+0x308>)
 801544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015450:	f7eb f8e2 	bl	8000618 <__aeabi_dmul>
 8015454:	a380      	add	r3, pc, #512	; (adr r3, 8015658 <_dtoa_r+0x310>)
 8015456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801545a:	f7ea ff27 	bl	80002ac <__adddf3>
 801545e:	4606      	mov	r6, r0
 8015460:	4628      	mov	r0, r5
 8015462:	460f      	mov	r7, r1
 8015464:	f7eb f86e 	bl	8000544 <__aeabi_i2d>
 8015468:	a37d      	add	r3, pc, #500	; (adr r3, 8015660 <_dtoa_r+0x318>)
 801546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801546e:	f7eb f8d3 	bl	8000618 <__aeabi_dmul>
 8015472:	4602      	mov	r2, r0
 8015474:	460b      	mov	r3, r1
 8015476:	4630      	mov	r0, r6
 8015478:	4639      	mov	r1, r7
 801547a:	f7ea ff17 	bl	80002ac <__adddf3>
 801547e:	4606      	mov	r6, r0
 8015480:	460f      	mov	r7, r1
 8015482:	f7eb fb79 	bl	8000b78 <__aeabi_d2iz>
 8015486:	2200      	movs	r2, #0
 8015488:	4682      	mov	sl, r0
 801548a:	2300      	movs	r3, #0
 801548c:	4630      	mov	r0, r6
 801548e:	4639      	mov	r1, r7
 8015490:	f7eb fb34 	bl	8000afc <__aeabi_dcmplt>
 8015494:	b148      	cbz	r0, 80154aa <_dtoa_r+0x162>
 8015496:	4650      	mov	r0, sl
 8015498:	f7eb f854 	bl	8000544 <__aeabi_i2d>
 801549c:	4632      	mov	r2, r6
 801549e:	463b      	mov	r3, r7
 80154a0:	f7eb fb22 	bl	8000ae8 <__aeabi_dcmpeq>
 80154a4:	b908      	cbnz	r0, 80154aa <_dtoa_r+0x162>
 80154a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80154aa:	f1ba 0f16 	cmp.w	sl, #22
 80154ae:	d859      	bhi.n	8015564 <_dtoa_r+0x21c>
 80154b0:	4970      	ldr	r1, [pc, #448]	; (8015674 <_dtoa_r+0x32c>)
 80154b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80154b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154be:	f7eb fb3b 	bl	8000b38 <__aeabi_dcmpgt>
 80154c2:	2800      	cmp	r0, #0
 80154c4:	d050      	beq.n	8015568 <_dtoa_r+0x220>
 80154c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80154ca:	2300      	movs	r3, #0
 80154cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80154ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80154d0:	1b5d      	subs	r5, r3, r5
 80154d2:	f1b5 0801 	subs.w	r8, r5, #1
 80154d6:	bf49      	itett	mi
 80154d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80154dc:	2300      	movpl	r3, #0
 80154de:	9305      	strmi	r3, [sp, #20]
 80154e0:	f04f 0800 	movmi.w	r8, #0
 80154e4:	bf58      	it	pl
 80154e6:	9305      	strpl	r3, [sp, #20]
 80154e8:	f1ba 0f00 	cmp.w	sl, #0
 80154ec:	db3e      	blt.n	801556c <_dtoa_r+0x224>
 80154ee:	2300      	movs	r3, #0
 80154f0:	44d0      	add	r8, sl
 80154f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80154f6:	9307      	str	r3, [sp, #28]
 80154f8:	9b06      	ldr	r3, [sp, #24]
 80154fa:	2b09      	cmp	r3, #9
 80154fc:	f200 8090 	bhi.w	8015620 <_dtoa_r+0x2d8>
 8015500:	2b05      	cmp	r3, #5
 8015502:	bfc4      	itt	gt
 8015504:	3b04      	subgt	r3, #4
 8015506:	9306      	strgt	r3, [sp, #24]
 8015508:	9b06      	ldr	r3, [sp, #24]
 801550a:	f1a3 0302 	sub.w	r3, r3, #2
 801550e:	bfcc      	ite	gt
 8015510:	2500      	movgt	r5, #0
 8015512:	2501      	movle	r5, #1
 8015514:	2b03      	cmp	r3, #3
 8015516:	f200 808f 	bhi.w	8015638 <_dtoa_r+0x2f0>
 801551a:	e8df f003 	tbb	[pc, r3]
 801551e:	7f7d      	.short	0x7f7d
 8015520:	7131      	.short	0x7131
 8015522:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015526:	441d      	add	r5, r3
 8015528:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801552c:	2820      	cmp	r0, #32
 801552e:	dd13      	ble.n	8015558 <_dtoa_r+0x210>
 8015530:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015534:	9b00      	ldr	r3, [sp, #0]
 8015536:	fa08 f800 	lsl.w	r8, r8, r0
 801553a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801553e:	fa23 f000 	lsr.w	r0, r3, r0
 8015542:	ea48 0000 	orr.w	r0, r8, r0
 8015546:	f7ea ffed 	bl	8000524 <__aeabi_ui2d>
 801554a:	2301      	movs	r3, #1
 801554c:	4682      	mov	sl, r0
 801554e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015552:	3d01      	subs	r5, #1
 8015554:	9313      	str	r3, [sp, #76]	; 0x4c
 8015556:	e772      	b.n	801543e <_dtoa_r+0xf6>
 8015558:	9b00      	ldr	r3, [sp, #0]
 801555a:	f1c0 0020 	rsb	r0, r0, #32
 801555e:	fa03 f000 	lsl.w	r0, r3, r0
 8015562:	e7f0      	b.n	8015546 <_dtoa_r+0x1fe>
 8015564:	2301      	movs	r3, #1
 8015566:	e7b1      	b.n	80154cc <_dtoa_r+0x184>
 8015568:	900f      	str	r0, [sp, #60]	; 0x3c
 801556a:	e7b0      	b.n	80154ce <_dtoa_r+0x186>
 801556c:	9b05      	ldr	r3, [sp, #20]
 801556e:	eba3 030a 	sub.w	r3, r3, sl
 8015572:	9305      	str	r3, [sp, #20]
 8015574:	f1ca 0300 	rsb	r3, sl, #0
 8015578:	9307      	str	r3, [sp, #28]
 801557a:	2300      	movs	r3, #0
 801557c:	930e      	str	r3, [sp, #56]	; 0x38
 801557e:	e7bb      	b.n	80154f8 <_dtoa_r+0x1b0>
 8015580:	2301      	movs	r3, #1
 8015582:	930a      	str	r3, [sp, #40]	; 0x28
 8015584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015586:	2b00      	cmp	r3, #0
 8015588:	dd59      	ble.n	801563e <_dtoa_r+0x2f6>
 801558a:	9302      	str	r3, [sp, #8]
 801558c:	4699      	mov	r9, r3
 801558e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015590:	2200      	movs	r2, #0
 8015592:	6072      	str	r2, [r6, #4]
 8015594:	2204      	movs	r2, #4
 8015596:	f102 0014 	add.w	r0, r2, #20
 801559a:	4298      	cmp	r0, r3
 801559c:	6871      	ldr	r1, [r6, #4]
 801559e:	d953      	bls.n	8015648 <_dtoa_r+0x300>
 80155a0:	4620      	mov	r0, r4
 80155a2:	f000 fe77 	bl	8016294 <_Balloc>
 80155a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155a8:	6030      	str	r0, [r6, #0]
 80155aa:	f1b9 0f0e 	cmp.w	r9, #14
 80155ae:	f8d3 b000 	ldr.w	fp, [r3]
 80155b2:	f200 80e6 	bhi.w	8015782 <_dtoa_r+0x43a>
 80155b6:	2d00      	cmp	r5, #0
 80155b8:	f000 80e3 	beq.w	8015782 <_dtoa_r+0x43a>
 80155bc:	ed9d 7b00 	vldr	d7, [sp]
 80155c0:	f1ba 0f00 	cmp.w	sl, #0
 80155c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80155c8:	dd74      	ble.n	80156b4 <_dtoa_r+0x36c>
 80155ca:	4a2a      	ldr	r2, [pc, #168]	; (8015674 <_dtoa_r+0x32c>)
 80155cc:	f00a 030f 	and.w	r3, sl, #15
 80155d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80155d4:	ed93 7b00 	vldr	d7, [r3]
 80155d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80155dc:	06f0      	lsls	r0, r6, #27
 80155de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80155e2:	d565      	bpl.n	80156b0 <_dtoa_r+0x368>
 80155e4:	4b24      	ldr	r3, [pc, #144]	; (8015678 <_dtoa_r+0x330>)
 80155e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80155ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80155ee:	f7eb f93d 	bl	800086c <__aeabi_ddiv>
 80155f2:	e9cd 0100 	strd	r0, r1, [sp]
 80155f6:	f006 060f 	and.w	r6, r6, #15
 80155fa:	2503      	movs	r5, #3
 80155fc:	4f1e      	ldr	r7, [pc, #120]	; (8015678 <_dtoa_r+0x330>)
 80155fe:	e04c      	b.n	801569a <_dtoa_r+0x352>
 8015600:	2301      	movs	r3, #1
 8015602:	930a      	str	r3, [sp, #40]	; 0x28
 8015604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015606:	4453      	add	r3, sl
 8015608:	f103 0901 	add.w	r9, r3, #1
 801560c:	9302      	str	r3, [sp, #8]
 801560e:	464b      	mov	r3, r9
 8015610:	2b01      	cmp	r3, #1
 8015612:	bfb8      	it	lt
 8015614:	2301      	movlt	r3, #1
 8015616:	e7ba      	b.n	801558e <_dtoa_r+0x246>
 8015618:	2300      	movs	r3, #0
 801561a:	e7b2      	b.n	8015582 <_dtoa_r+0x23a>
 801561c:	2300      	movs	r3, #0
 801561e:	e7f0      	b.n	8015602 <_dtoa_r+0x2ba>
 8015620:	2501      	movs	r5, #1
 8015622:	2300      	movs	r3, #0
 8015624:	9306      	str	r3, [sp, #24]
 8015626:	950a      	str	r5, [sp, #40]	; 0x28
 8015628:	f04f 33ff 	mov.w	r3, #4294967295
 801562c:	9302      	str	r3, [sp, #8]
 801562e:	4699      	mov	r9, r3
 8015630:	2200      	movs	r2, #0
 8015632:	2312      	movs	r3, #18
 8015634:	920b      	str	r2, [sp, #44]	; 0x2c
 8015636:	e7aa      	b.n	801558e <_dtoa_r+0x246>
 8015638:	2301      	movs	r3, #1
 801563a:	930a      	str	r3, [sp, #40]	; 0x28
 801563c:	e7f4      	b.n	8015628 <_dtoa_r+0x2e0>
 801563e:	2301      	movs	r3, #1
 8015640:	9302      	str	r3, [sp, #8]
 8015642:	4699      	mov	r9, r3
 8015644:	461a      	mov	r2, r3
 8015646:	e7f5      	b.n	8015634 <_dtoa_r+0x2ec>
 8015648:	3101      	adds	r1, #1
 801564a:	6071      	str	r1, [r6, #4]
 801564c:	0052      	lsls	r2, r2, #1
 801564e:	e7a2      	b.n	8015596 <_dtoa_r+0x24e>
 8015650:	636f4361 	.word	0x636f4361
 8015654:	3fd287a7 	.word	0x3fd287a7
 8015658:	8b60c8b3 	.word	0x8b60c8b3
 801565c:	3fc68a28 	.word	0x3fc68a28
 8015660:	509f79fb 	.word	0x509f79fb
 8015664:	3fd34413 	.word	0x3fd34413
 8015668:	7ff00000 	.word	0x7ff00000
 801566c:	0802329a 	.word	0x0802329a
 8015670:	3ff80000 	.word	0x3ff80000
 8015674:	08023358 	.word	0x08023358
 8015678:	08023330 	.word	0x08023330
 801567c:	080232c6 	.word	0x080232c6
 8015680:	07f1      	lsls	r1, r6, #31
 8015682:	d508      	bpl.n	8015696 <_dtoa_r+0x34e>
 8015684:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015688:	e9d7 2300 	ldrd	r2, r3, [r7]
 801568c:	f7ea ffc4 	bl	8000618 <__aeabi_dmul>
 8015690:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015694:	3501      	adds	r5, #1
 8015696:	1076      	asrs	r6, r6, #1
 8015698:	3708      	adds	r7, #8
 801569a:	2e00      	cmp	r6, #0
 801569c:	d1f0      	bne.n	8015680 <_dtoa_r+0x338>
 801569e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80156a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156a6:	f7eb f8e1 	bl	800086c <__aeabi_ddiv>
 80156aa:	e9cd 0100 	strd	r0, r1, [sp]
 80156ae:	e01a      	b.n	80156e6 <_dtoa_r+0x39e>
 80156b0:	2502      	movs	r5, #2
 80156b2:	e7a3      	b.n	80155fc <_dtoa_r+0x2b4>
 80156b4:	f000 80a0 	beq.w	80157f8 <_dtoa_r+0x4b0>
 80156b8:	f1ca 0600 	rsb	r6, sl, #0
 80156bc:	4b9f      	ldr	r3, [pc, #636]	; (801593c <_dtoa_r+0x5f4>)
 80156be:	4fa0      	ldr	r7, [pc, #640]	; (8015940 <_dtoa_r+0x5f8>)
 80156c0:	f006 020f 	and.w	r2, r6, #15
 80156c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80156c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80156d0:	f7ea ffa2 	bl	8000618 <__aeabi_dmul>
 80156d4:	e9cd 0100 	strd	r0, r1, [sp]
 80156d8:	1136      	asrs	r6, r6, #4
 80156da:	2300      	movs	r3, #0
 80156dc:	2502      	movs	r5, #2
 80156de:	2e00      	cmp	r6, #0
 80156e0:	d17f      	bne.n	80157e2 <_dtoa_r+0x49a>
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d1e1      	bne.n	80156aa <_dtoa_r+0x362>
 80156e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	f000 8087 	beq.w	80157fc <_dtoa_r+0x4b4>
 80156ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80156f2:	2200      	movs	r2, #0
 80156f4:	4b93      	ldr	r3, [pc, #588]	; (8015944 <_dtoa_r+0x5fc>)
 80156f6:	4630      	mov	r0, r6
 80156f8:	4639      	mov	r1, r7
 80156fa:	f7eb f9ff 	bl	8000afc <__aeabi_dcmplt>
 80156fe:	2800      	cmp	r0, #0
 8015700:	d07c      	beq.n	80157fc <_dtoa_r+0x4b4>
 8015702:	f1b9 0f00 	cmp.w	r9, #0
 8015706:	d079      	beq.n	80157fc <_dtoa_r+0x4b4>
 8015708:	9b02      	ldr	r3, [sp, #8]
 801570a:	2b00      	cmp	r3, #0
 801570c:	dd35      	ble.n	801577a <_dtoa_r+0x432>
 801570e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015712:	9308      	str	r3, [sp, #32]
 8015714:	4639      	mov	r1, r7
 8015716:	2200      	movs	r2, #0
 8015718:	4b8b      	ldr	r3, [pc, #556]	; (8015948 <_dtoa_r+0x600>)
 801571a:	4630      	mov	r0, r6
 801571c:	f7ea ff7c 	bl	8000618 <__aeabi_dmul>
 8015720:	e9cd 0100 	strd	r0, r1, [sp]
 8015724:	9f02      	ldr	r7, [sp, #8]
 8015726:	3501      	adds	r5, #1
 8015728:	4628      	mov	r0, r5
 801572a:	f7ea ff0b 	bl	8000544 <__aeabi_i2d>
 801572e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015732:	f7ea ff71 	bl	8000618 <__aeabi_dmul>
 8015736:	2200      	movs	r2, #0
 8015738:	4b84      	ldr	r3, [pc, #528]	; (801594c <_dtoa_r+0x604>)
 801573a:	f7ea fdb7 	bl	80002ac <__adddf3>
 801573e:	4605      	mov	r5, r0
 8015740:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015744:	2f00      	cmp	r7, #0
 8015746:	d15d      	bne.n	8015804 <_dtoa_r+0x4bc>
 8015748:	2200      	movs	r2, #0
 801574a:	4b81      	ldr	r3, [pc, #516]	; (8015950 <_dtoa_r+0x608>)
 801574c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015750:	f7ea fdaa 	bl	80002a8 <__aeabi_dsub>
 8015754:	462a      	mov	r2, r5
 8015756:	4633      	mov	r3, r6
 8015758:	e9cd 0100 	strd	r0, r1, [sp]
 801575c:	f7eb f9ec 	bl	8000b38 <__aeabi_dcmpgt>
 8015760:	2800      	cmp	r0, #0
 8015762:	f040 8288 	bne.w	8015c76 <_dtoa_r+0x92e>
 8015766:	462a      	mov	r2, r5
 8015768:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801576c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015770:	f7eb f9c4 	bl	8000afc <__aeabi_dcmplt>
 8015774:	2800      	cmp	r0, #0
 8015776:	f040 827c 	bne.w	8015c72 <_dtoa_r+0x92a>
 801577a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801577e:	e9cd 2300 	strd	r2, r3, [sp]
 8015782:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015784:	2b00      	cmp	r3, #0
 8015786:	f2c0 8150 	blt.w	8015a2a <_dtoa_r+0x6e2>
 801578a:	f1ba 0f0e 	cmp.w	sl, #14
 801578e:	f300 814c 	bgt.w	8015a2a <_dtoa_r+0x6e2>
 8015792:	4b6a      	ldr	r3, [pc, #424]	; (801593c <_dtoa_r+0x5f4>)
 8015794:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015798:	ed93 7b00 	vldr	d7, [r3]
 801579c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801579e:	2b00      	cmp	r3, #0
 80157a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80157a4:	f280 80d8 	bge.w	8015958 <_dtoa_r+0x610>
 80157a8:	f1b9 0f00 	cmp.w	r9, #0
 80157ac:	f300 80d4 	bgt.w	8015958 <_dtoa_r+0x610>
 80157b0:	f040 825e 	bne.w	8015c70 <_dtoa_r+0x928>
 80157b4:	2200      	movs	r2, #0
 80157b6:	4b66      	ldr	r3, [pc, #408]	; (8015950 <_dtoa_r+0x608>)
 80157b8:	ec51 0b17 	vmov	r0, r1, d7
 80157bc:	f7ea ff2c 	bl	8000618 <__aeabi_dmul>
 80157c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157c4:	f7eb f9ae 	bl	8000b24 <__aeabi_dcmpge>
 80157c8:	464f      	mov	r7, r9
 80157ca:	464e      	mov	r6, r9
 80157cc:	2800      	cmp	r0, #0
 80157ce:	f040 8234 	bne.w	8015c3a <_dtoa_r+0x8f2>
 80157d2:	2331      	movs	r3, #49	; 0x31
 80157d4:	f10b 0501 	add.w	r5, fp, #1
 80157d8:	f88b 3000 	strb.w	r3, [fp]
 80157dc:	f10a 0a01 	add.w	sl, sl, #1
 80157e0:	e22f      	b.n	8015c42 <_dtoa_r+0x8fa>
 80157e2:	07f2      	lsls	r2, r6, #31
 80157e4:	d505      	bpl.n	80157f2 <_dtoa_r+0x4aa>
 80157e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80157ea:	f7ea ff15 	bl	8000618 <__aeabi_dmul>
 80157ee:	3501      	adds	r5, #1
 80157f0:	2301      	movs	r3, #1
 80157f2:	1076      	asrs	r6, r6, #1
 80157f4:	3708      	adds	r7, #8
 80157f6:	e772      	b.n	80156de <_dtoa_r+0x396>
 80157f8:	2502      	movs	r5, #2
 80157fa:	e774      	b.n	80156e6 <_dtoa_r+0x39e>
 80157fc:	f8cd a020 	str.w	sl, [sp, #32]
 8015800:	464f      	mov	r7, r9
 8015802:	e791      	b.n	8015728 <_dtoa_r+0x3e0>
 8015804:	4b4d      	ldr	r3, [pc, #308]	; (801593c <_dtoa_r+0x5f4>)
 8015806:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801580a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801580e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015810:	2b00      	cmp	r3, #0
 8015812:	d047      	beq.n	80158a4 <_dtoa_r+0x55c>
 8015814:	4602      	mov	r2, r0
 8015816:	460b      	mov	r3, r1
 8015818:	2000      	movs	r0, #0
 801581a:	494e      	ldr	r1, [pc, #312]	; (8015954 <_dtoa_r+0x60c>)
 801581c:	f7eb f826 	bl	800086c <__aeabi_ddiv>
 8015820:	462a      	mov	r2, r5
 8015822:	4633      	mov	r3, r6
 8015824:	f7ea fd40 	bl	80002a8 <__aeabi_dsub>
 8015828:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801582c:	465d      	mov	r5, fp
 801582e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015832:	f7eb f9a1 	bl	8000b78 <__aeabi_d2iz>
 8015836:	4606      	mov	r6, r0
 8015838:	f7ea fe84 	bl	8000544 <__aeabi_i2d>
 801583c:	4602      	mov	r2, r0
 801583e:	460b      	mov	r3, r1
 8015840:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015844:	f7ea fd30 	bl	80002a8 <__aeabi_dsub>
 8015848:	3630      	adds	r6, #48	; 0x30
 801584a:	f805 6b01 	strb.w	r6, [r5], #1
 801584e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015852:	e9cd 0100 	strd	r0, r1, [sp]
 8015856:	f7eb f951 	bl	8000afc <__aeabi_dcmplt>
 801585a:	2800      	cmp	r0, #0
 801585c:	d163      	bne.n	8015926 <_dtoa_r+0x5de>
 801585e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015862:	2000      	movs	r0, #0
 8015864:	4937      	ldr	r1, [pc, #220]	; (8015944 <_dtoa_r+0x5fc>)
 8015866:	f7ea fd1f 	bl	80002a8 <__aeabi_dsub>
 801586a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801586e:	f7eb f945 	bl	8000afc <__aeabi_dcmplt>
 8015872:	2800      	cmp	r0, #0
 8015874:	f040 80b7 	bne.w	80159e6 <_dtoa_r+0x69e>
 8015878:	eba5 030b 	sub.w	r3, r5, fp
 801587c:	429f      	cmp	r7, r3
 801587e:	f77f af7c 	ble.w	801577a <_dtoa_r+0x432>
 8015882:	2200      	movs	r2, #0
 8015884:	4b30      	ldr	r3, [pc, #192]	; (8015948 <_dtoa_r+0x600>)
 8015886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801588a:	f7ea fec5 	bl	8000618 <__aeabi_dmul>
 801588e:	2200      	movs	r2, #0
 8015890:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015894:	4b2c      	ldr	r3, [pc, #176]	; (8015948 <_dtoa_r+0x600>)
 8015896:	e9dd 0100 	ldrd	r0, r1, [sp]
 801589a:	f7ea febd 	bl	8000618 <__aeabi_dmul>
 801589e:	e9cd 0100 	strd	r0, r1, [sp]
 80158a2:	e7c4      	b.n	801582e <_dtoa_r+0x4e6>
 80158a4:	462a      	mov	r2, r5
 80158a6:	4633      	mov	r3, r6
 80158a8:	f7ea feb6 	bl	8000618 <__aeabi_dmul>
 80158ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80158b0:	eb0b 0507 	add.w	r5, fp, r7
 80158b4:	465e      	mov	r6, fp
 80158b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158ba:	f7eb f95d 	bl	8000b78 <__aeabi_d2iz>
 80158be:	4607      	mov	r7, r0
 80158c0:	f7ea fe40 	bl	8000544 <__aeabi_i2d>
 80158c4:	3730      	adds	r7, #48	; 0x30
 80158c6:	4602      	mov	r2, r0
 80158c8:	460b      	mov	r3, r1
 80158ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158ce:	f7ea fceb 	bl	80002a8 <__aeabi_dsub>
 80158d2:	f806 7b01 	strb.w	r7, [r6], #1
 80158d6:	42ae      	cmp	r6, r5
 80158d8:	e9cd 0100 	strd	r0, r1, [sp]
 80158dc:	f04f 0200 	mov.w	r2, #0
 80158e0:	d126      	bne.n	8015930 <_dtoa_r+0x5e8>
 80158e2:	4b1c      	ldr	r3, [pc, #112]	; (8015954 <_dtoa_r+0x60c>)
 80158e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80158e8:	f7ea fce0 	bl	80002ac <__adddf3>
 80158ec:	4602      	mov	r2, r0
 80158ee:	460b      	mov	r3, r1
 80158f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158f4:	f7eb f920 	bl	8000b38 <__aeabi_dcmpgt>
 80158f8:	2800      	cmp	r0, #0
 80158fa:	d174      	bne.n	80159e6 <_dtoa_r+0x69e>
 80158fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015900:	2000      	movs	r0, #0
 8015902:	4914      	ldr	r1, [pc, #80]	; (8015954 <_dtoa_r+0x60c>)
 8015904:	f7ea fcd0 	bl	80002a8 <__aeabi_dsub>
 8015908:	4602      	mov	r2, r0
 801590a:	460b      	mov	r3, r1
 801590c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015910:	f7eb f8f4 	bl	8000afc <__aeabi_dcmplt>
 8015914:	2800      	cmp	r0, #0
 8015916:	f43f af30 	beq.w	801577a <_dtoa_r+0x432>
 801591a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801591e:	2b30      	cmp	r3, #48	; 0x30
 8015920:	f105 32ff 	add.w	r2, r5, #4294967295
 8015924:	d002      	beq.n	801592c <_dtoa_r+0x5e4>
 8015926:	f8dd a020 	ldr.w	sl, [sp, #32]
 801592a:	e04a      	b.n	80159c2 <_dtoa_r+0x67a>
 801592c:	4615      	mov	r5, r2
 801592e:	e7f4      	b.n	801591a <_dtoa_r+0x5d2>
 8015930:	4b05      	ldr	r3, [pc, #20]	; (8015948 <_dtoa_r+0x600>)
 8015932:	f7ea fe71 	bl	8000618 <__aeabi_dmul>
 8015936:	e9cd 0100 	strd	r0, r1, [sp]
 801593a:	e7bc      	b.n	80158b6 <_dtoa_r+0x56e>
 801593c:	08023358 	.word	0x08023358
 8015940:	08023330 	.word	0x08023330
 8015944:	3ff00000 	.word	0x3ff00000
 8015948:	40240000 	.word	0x40240000
 801594c:	401c0000 	.word	0x401c0000
 8015950:	40140000 	.word	0x40140000
 8015954:	3fe00000 	.word	0x3fe00000
 8015958:	e9dd 6700 	ldrd	r6, r7, [sp]
 801595c:	465d      	mov	r5, fp
 801595e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015962:	4630      	mov	r0, r6
 8015964:	4639      	mov	r1, r7
 8015966:	f7ea ff81 	bl	800086c <__aeabi_ddiv>
 801596a:	f7eb f905 	bl	8000b78 <__aeabi_d2iz>
 801596e:	4680      	mov	r8, r0
 8015970:	f7ea fde8 	bl	8000544 <__aeabi_i2d>
 8015974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015978:	f7ea fe4e 	bl	8000618 <__aeabi_dmul>
 801597c:	4602      	mov	r2, r0
 801597e:	460b      	mov	r3, r1
 8015980:	4630      	mov	r0, r6
 8015982:	4639      	mov	r1, r7
 8015984:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015988:	f7ea fc8e 	bl	80002a8 <__aeabi_dsub>
 801598c:	f805 6b01 	strb.w	r6, [r5], #1
 8015990:	eba5 060b 	sub.w	r6, r5, fp
 8015994:	45b1      	cmp	r9, r6
 8015996:	4602      	mov	r2, r0
 8015998:	460b      	mov	r3, r1
 801599a:	d139      	bne.n	8015a10 <_dtoa_r+0x6c8>
 801599c:	f7ea fc86 	bl	80002ac <__adddf3>
 80159a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80159a4:	4606      	mov	r6, r0
 80159a6:	460f      	mov	r7, r1
 80159a8:	f7eb f8c6 	bl	8000b38 <__aeabi_dcmpgt>
 80159ac:	b9c8      	cbnz	r0, 80159e2 <_dtoa_r+0x69a>
 80159ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80159b2:	4630      	mov	r0, r6
 80159b4:	4639      	mov	r1, r7
 80159b6:	f7eb f897 	bl	8000ae8 <__aeabi_dcmpeq>
 80159ba:	b110      	cbz	r0, 80159c2 <_dtoa_r+0x67a>
 80159bc:	f018 0f01 	tst.w	r8, #1
 80159c0:	d10f      	bne.n	80159e2 <_dtoa_r+0x69a>
 80159c2:	9904      	ldr	r1, [sp, #16]
 80159c4:	4620      	mov	r0, r4
 80159c6:	f000 fc99 	bl	80162fc <_Bfree>
 80159ca:	2300      	movs	r3, #0
 80159cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80159ce:	702b      	strb	r3, [r5, #0]
 80159d0:	f10a 0301 	add.w	r3, sl, #1
 80159d4:	6013      	str	r3, [r2, #0]
 80159d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159d8:	2b00      	cmp	r3, #0
 80159da:	f000 8241 	beq.w	8015e60 <_dtoa_r+0xb18>
 80159de:	601d      	str	r5, [r3, #0]
 80159e0:	e23e      	b.n	8015e60 <_dtoa_r+0xb18>
 80159e2:	f8cd a020 	str.w	sl, [sp, #32]
 80159e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80159ea:	2a39      	cmp	r2, #57	; 0x39
 80159ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80159f0:	d108      	bne.n	8015a04 <_dtoa_r+0x6bc>
 80159f2:	459b      	cmp	fp, r3
 80159f4:	d10a      	bne.n	8015a0c <_dtoa_r+0x6c4>
 80159f6:	9b08      	ldr	r3, [sp, #32]
 80159f8:	3301      	adds	r3, #1
 80159fa:	9308      	str	r3, [sp, #32]
 80159fc:	2330      	movs	r3, #48	; 0x30
 80159fe:	f88b 3000 	strb.w	r3, [fp]
 8015a02:	465b      	mov	r3, fp
 8015a04:	781a      	ldrb	r2, [r3, #0]
 8015a06:	3201      	adds	r2, #1
 8015a08:	701a      	strb	r2, [r3, #0]
 8015a0a:	e78c      	b.n	8015926 <_dtoa_r+0x5de>
 8015a0c:	461d      	mov	r5, r3
 8015a0e:	e7ea      	b.n	80159e6 <_dtoa_r+0x69e>
 8015a10:	2200      	movs	r2, #0
 8015a12:	4b9b      	ldr	r3, [pc, #620]	; (8015c80 <_dtoa_r+0x938>)
 8015a14:	f7ea fe00 	bl	8000618 <__aeabi_dmul>
 8015a18:	2200      	movs	r2, #0
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	4606      	mov	r6, r0
 8015a1e:	460f      	mov	r7, r1
 8015a20:	f7eb f862 	bl	8000ae8 <__aeabi_dcmpeq>
 8015a24:	2800      	cmp	r0, #0
 8015a26:	d09a      	beq.n	801595e <_dtoa_r+0x616>
 8015a28:	e7cb      	b.n	80159c2 <_dtoa_r+0x67a>
 8015a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a2c:	2a00      	cmp	r2, #0
 8015a2e:	f000 808b 	beq.w	8015b48 <_dtoa_r+0x800>
 8015a32:	9a06      	ldr	r2, [sp, #24]
 8015a34:	2a01      	cmp	r2, #1
 8015a36:	dc6e      	bgt.n	8015b16 <_dtoa_r+0x7ce>
 8015a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015a3a:	2a00      	cmp	r2, #0
 8015a3c:	d067      	beq.n	8015b0e <_dtoa_r+0x7c6>
 8015a3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015a42:	9f07      	ldr	r7, [sp, #28]
 8015a44:	9d05      	ldr	r5, [sp, #20]
 8015a46:	9a05      	ldr	r2, [sp, #20]
 8015a48:	2101      	movs	r1, #1
 8015a4a:	441a      	add	r2, r3
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	9205      	str	r2, [sp, #20]
 8015a50:	4498      	add	r8, r3
 8015a52:	f000 fcf3 	bl	801643c <__i2b>
 8015a56:	4606      	mov	r6, r0
 8015a58:	2d00      	cmp	r5, #0
 8015a5a:	dd0c      	ble.n	8015a76 <_dtoa_r+0x72e>
 8015a5c:	f1b8 0f00 	cmp.w	r8, #0
 8015a60:	dd09      	ble.n	8015a76 <_dtoa_r+0x72e>
 8015a62:	4545      	cmp	r5, r8
 8015a64:	9a05      	ldr	r2, [sp, #20]
 8015a66:	462b      	mov	r3, r5
 8015a68:	bfa8      	it	ge
 8015a6a:	4643      	movge	r3, r8
 8015a6c:	1ad2      	subs	r2, r2, r3
 8015a6e:	9205      	str	r2, [sp, #20]
 8015a70:	1aed      	subs	r5, r5, r3
 8015a72:	eba8 0803 	sub.w	r8, r8, r3
 8015a76:	9b07      	ldr	r3, [sp, #28]
 8015a78:	b1eb      	cbz	r3, 8015ab6 <_dtoa_r+0x76e>
 8015a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d067      	beq.n	8015b50 <_dtoa_r+0x808>
 8015a80:	b18f      	cbz	r7, 8015aa6 <_dtoa_r+0x75e>
 8015a82:	4631      	mov	r1, r6
 8015a84:	463a      	mov	r2, r7
 8015a86:	4620      	mov	r0, r4
 8015a88:	f000 fd78 	bl	801657c <__pow5mult>
 8015a8c:	9a04      	ldr	r2, [sp, #16]
 8015a8e:	4601      	mov	r1, r0
 8015a90:	4606      	mov	r6, r0
 8015a92:	4620      	mov	r0, r4
 8015a94:	f000 fcdb 	bl	801644e <__multiply>
 8015a98:	9904      	ldr	r1, [sp, #16]
 8015a9a:	9008      	str	r0, [sp, #32]
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	f000 fc2d 	bl	80162fc <_Bfree>
 8015aa2:	9b08      	ldr	r3, [sp, #32]
 8015aa4:	9304      	str	r3, [sp, #16]
 8015aa6:	9b07      	ldr	r3, [sp, #28]
 8015aa8:	1bda      	subs	r2, r3, r7
 8015aaa:	d004      	beq.n	8015ab6 <_dtoa_r+0x76e>
 8015aac:	9904      	ldr	r1, [sp, #16]
 8015aae:	4620      	mov	r0, r4
 8015ab0:	f000 fd64 	bl	801657c <__pow5mult>
 8015ab4:	9004      	str	r0, [sp, #16]
 8015ab6:	2101      	movs	r1, #1
 8015ab8:	4620      	mov	r0, r4
 8015aba:	f000 fcbf 	bl	801643c <__i2b>
 8015abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ac0:	4607      	mov	r7, r0
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	f000 81d0 	beq.w	8015e68 <_dtoa_r+0xb20>
 8015ac8:	461a      	mov	r2, r3
 8015aca:	4601      	mov	r1, r0
 8015acc:	4620      	mov	r0, r4
 8015ace:	f000 fd55 	bl	801657c <__pow5mult>
 8015ad2:	9b06      	ldr	r3, [sp, #24]
 8015ad4:	2b01      	cmp	r3, #1
 8015ad6:	4607      	mov	r7, r0
 8015ad8:	dc40      	bgt.n	8015b5c <_dtoa_r+0x814>
 8015ada:	9b00      	ldr	r3, [sp, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d139      	bne.n	8015b54 <_dtoa_r+0x80c>
 8015ae0:	9b01      	ldr	r3, [sp, #4]
 8015ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d136      	bne.n	8015b58 <_dtoa_r+0x810>
 8015aea:	9b01      	ldr	r3, [sp, #4]
 8015aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015af0:	0d1b      	lsrs	r3, r3, #20
 8015af2:	051b      	lsls	r3, r3, #20
 8015af4:	b12b      	cbz	r3, 8015b02 <_dtoa_r+0x7ba>
 8015af6:	9b05      	ldr	r3, [sp, #20]
 8015af8:	3301      	adds	r3, #1
 8015afa:	9305      	str	r3, [sp, #20]
 8015afc:	f108 0801 	add.w	r8, r8, #1
 8015b00:	2301      	movs	r3, #1
 8015b02:	9307      	str	r3, [sp, #28]
 8015b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d12a      	bne.n	8015b60 <_dtoa_r+0x818>
 8015b0a:	2001      	movs	r0, #1
 8015b0c:	e030      	b.n	8015b70 <_dtoa_r+0x828>
 8015b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015b14:	e795      	b.n	8015a42 <_dtoa_r+0x6fa>
 8015b16:	9b07      	ldr	r3, [sp, #28]
 8015b18:	f109 37ff 	add.w	r7, r9, #4294967295
 8015b1c:	42bb      	cmp	r3, r7
 8015b1e:	bfbf      	itttt	lt
 8015b20:	9b07      	ldrlt	r3, [sp, #28]
 8015b22:	9707      	strlt	r7, [sp, #28]
 8015b24:	1afa      	sublt	r2, r7, r3
 8015b26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015b28:	bfbb      	ittet	lt
 8015b2a:	189b      	addlt	r3, r3, r2
 8015b2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015b2e:	1bdf      	subge	r7, r3, r7
 8015b30:	2700      	movlt	r7, #0
 8015b32:	f1b9 0f00 	cmp.w	r9, #0
 8015b36:	bfb5      	itete	lt
 8015b38:	9b05      	ldrlt	r3, [sp, #20]
 8015b3a:	9d05      	ldrge	r5, [sp, #20]
 8015b3c:	eba3 0509 	sublt.w	r5, r3, r9
 8015b40:	464b      	movge	r3, r9
 8015b42:	bfb8      	it	lt
 8015b44:	2300      	movlt	r3, #0
 8015b46:	e77e      	b.n	8015a46 <_dtoa_r+0x6fe>
 8015b48:	9f07      	ldr	r7, [sp, #28]
 8015b4a:	9d05      	ldr	r5, [sp, #20]
 8015b4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015b4e:	e783      	b.n	8015a58 <_dtoa_r+0x710>
 8015b50:	9a07      	ldr	r2, [sp, #28]
 8015b52:	e7ab      	b.n	8015aac <_dtoa_r+0x764>
 8015b54:	2300      	movs	r3, #0
 8015b56:	e7d4      	b.n	8015b02 <_dtoa_r+0x7ba>
 8015b58:	9b00      	ldr	r3, [sp, #0]
 8015b5a:	e7d2      	b.n	8015b02 <_dtoa_r+0x7ba>
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	9307      	str	r3, [sp, #28]
 8015b60:	693b      	ldr	r3, [r7, #16]
 8015b62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015b66:	6918      	ldr	r0, [r3, #16]
 8015b68:	f000 fc1a 	bl	80163a0 <__hi0bits>
 8015b6c:	f1c0 0020 	rsb	r0, r0, #32
 8015b70:	4440      	add	r0, r8
 8015b72:	f010 001f 	ands.w	r0, r0, #31
 8015b76:	d047      	beq.n	8015c08 <_dtoa_r+0x8c0>
 8015b78:	f1c0 0320 	rsb	r3, r0, #32
 8015b7c:	2b04      	cmp	r3, #4
 8015b7e:	dd3b      	ble.n	8015bf8 <_dtoa_r+0x8b0>
 8015b80:	9b05      	ldr	r3, [sp, #20]
 8015b82:	f1c0 001c 	rsb	r0, r0, #28
 8015b86:	4403      	add	r3, r0
 8015b88:	9305      	str	r3, [sp, #20]
 8015b8a:	4405      	add	r5, r0
 8015b8c:	4480      	add	r8, r0
 8015b8e:	9b05      	ldr	r3, [sp, #20]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	dd05      	ble.n	8015ba0 <_dtoa_r+0x858>
 8015b94:	461a      	mov	r2, r3
 8015b96:	9904      	ldr	r1, [sp, #16]
 8015b98:	4620      	mov	r0, r4
 8015b9a:	f000 fd3d 	bl	8016618 <__lshift>
 8015b9e:	9004      	str	r0, [sp, #16]
 8015ba0:	f1b8 0f00 	cmp.w	r8, #0
 8015ba4:	dd05      	ble.n	8015bb2 <_dtoa_r+0x86a>
 8015ba6:	4639      	mov	r1, r7
 8015ba8:	4642      	mov	r2, r8
 8015baa:	4620      	mov	r0, r4
 8015bac:	f000 fd34 	bl	8016618 <__lshift>
 8015bb0:	4607      	mov	r7, r0
 8015bb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bb4:	b353      	cbz	r3, 8015c0c <_dtoa_r+0x8c4>
 8015bb6:	4639      	mov	r1, r7
 8015bb8:	9804      	ldr	r0, [sp, #16]
 8015bba:	f000 fd81 	bl	80166c0 <__mcmp>
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	da24      	bge.n	8015c0c <_dtoa_r+0x8c4>
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	220a      	movs	r2, #10
 8015bc6:	9904      	ldr	r1, [sp, #16]
 8015bc8:	4620      	mov	r0, r4
 8015bca:	f000 fbae 	bl	801632a <__multadd>
 8015bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bd0:	9004      	str	r0, [sp, #16]
 8015bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	f000 814d 	beq.w	8015e76 <_dtoa_r+0xb2e>
 8015bdc:	2300      	movs	r3, #0
 8015bde:	4631      	mov	r1, r6
 8015be0:	220a      	movs	r2, #10
 8015be2:	4620      	mov	r0, r4
 8015be4:	f000 fba1 	bl	801632a <__multadd>
 8015be8:	9b02      	ldr	r3, [sp, #8]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	4606      	mov	r6, r0
 8015bee:	dc4f      	bgt.n	8015c90 <_dtoa_r+0x948>
 8015bf0:	9b06      	ldr	r3, [sp, #24]
 8015bf2:	2b02      	cmp	r3, #2
 8015bf4:	dd4c      	ble.n	8015c90 <_dtoa_r+0x948>
 8015bf6:	e011      	b.n	8015c1c <_dtoa_r+0x8d4>
 8015bf8:	d0c9      	beq.n	8015b8e <_dtoa_r+0x846>
 8015bfa:	9a05      	ldr	r2, [sp, #20]
 8015bfc:	331c      	adds	r3, #28
 8015bfe:	441a      	add	r2, r3
 8015c00:	9205      	str	r2, [sp, #20]
 8015c02:	441d      	add	r5, r3
 8015c04:	4498      	add	r8, r3
 8015c06:	e7c2      	b.n	8015b8e <_dtoa_r+0x846>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	e7f6      	b.n	8015bfa <_dtoa_r+0x8b2>
 8015c0c:	f1b9 0f00 	cmp.w	r9, #0
 8015c10:	dc38      	bgt.n	8015c84 <_dtoa_r+0x93c>
 8015c12:	9b06      	ldr	r3, [sp, #24]
 8015c14:	2b02      	cmp	r3, #2
 8015c16:	dd35      	ble.n	8015c84 <_dtoa_r+0x93c>
 8015c18:	f8cd 9008 	str.w	r9, [sp, #8]
 8015c1c:	9b02      	ldr	r3, [sp, #8]
 8015c1e:	b963      	cbnz	r3, 8015c3a <_dtoa_r+0x8f2>
 8015c20:	4639      	mov	r1, r7
 8015c22:	2205      	movs	r2, #5
 8015c24:	4620      	mov	r0, r4
 8015c26:	f000 fb80 	bl	801632a <__multadd>
 8015c2a:	4601      	mov	r1, r0
 8015c2c:	4607      	mov	r7, r0
 8015c2e:	9804      	ldr	r0, [sp, #16]
 8015c30:	f000 fd46 	bl	80166c0 <__mcmp>
 8015c34:	2800      	cmp	r0, #0
 8015c36:	f73f adcc 	bgt.w	80157d2 <_dtoa_r+0x48a>
 8015c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c3c:	465d      	mov	r5, fp
 8015c3e:	ea6f 0a03 	mvn.w	sl, r3
 8015c42:	f04f 0900 	mov.w	r9, #0
 8015c46:	4639      	mov	r1, r7
 8015c48:	4620      	mov	r0, r4
 8015c4a:	f000 fb57 	bl	80162fc <_Bfree>
 8015c4e:	2e00      	cmp	r6, #0
 8015c50:	f43f aeb7 	beq.w	80159c2 <_dtoa_r+0x67a>
 8015c54:	f1b9 0f00 	cmp.w	r9, #0
 8015c58:	d005      	beq.n	8015c66 <_dtoa_r+0x91e>
 8015c5a:	45b1      	cmp	r9, r6
 8015c5c:	d003      	beq.n	8015c66 <_dtoa_r+0x91e>
 8015c5e:	4649      	mov	r1, r9
 8015c60:	4620      	mov	r0, r4
 8015c62:	f000 fb4b 	bl	80162fc <_Bfree>
 8015c66:	4631      	mov	r1, r6
 8015c68:	4620      	mov	r0, r4
 8015c6a:	f000 fb47 	bl	80162fc <_Bfree>
 8015c6e:	e6a8      	b.n	80159c2 <_dtoa_r+0x67a>
 8015c70:	2700      	movs	r7, #0
 8015c72:	463e      	mov	r6, r7
 8015c74:	e7e1      	b.n	8015c3a <_dtoa_r+0x8f2>
 8015c76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015c7a:	463e      	mov	r6, r7
 8015c7c:	e5a9      	b.n	80157d2 <_dtoa_r+0x48a>
 8015c7e:	bf00      	nop
 8015c80:	40240000 	.word	0x40240000
 8015c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c86:	f8cd 9008 	str.w	r9, [sp, #8]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	f000 80fa 	beq.w	8015e84 <_dtoa_r+0xb3c>
 8015c90:	2d00      	cmp	r5, #0
 8015c92:	dd05      	ble.n	8015ca0 <_dtoa_r+0x958>
 8015c94:	4631      	mov	r1, r6
 8015c96:	462a      	mov	r2, r5
 8015c98:	4620      	mov	r0, r4
 8015c9a:	f000 fcbd 	bl	8016618 <__lshift>
 8015c9e:	4606      	mov	r6, r0
 8015ca0:	9b07      	ldr	r3, [sp, #28]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d04c      	beq.n	8015d40 <_dtoa_r+0x9f8>
 8015ca6:	6871      	ldr	r1, [r6, #4]
 8015ca8:	4620      	mov	r0, r4
 8015caa:	f000 faf3 	bl	8016294 <_Balloc>
 8015cae:	6932      	ldr	r2, [r6, #16]
 8015cb0:	3202      	adds	r2, #2
 8015cb2:	4605      	mov	r5, r0
 8015cb4:	0092      	lsls	r2, r2, #2
 8015cb6:	f106 010c 	add.w	r1, r6, #12
 8015cba:	300c      	adds	r0, #12
 8015cbc:	f7fe fa90 	bl	80141e0 <memcpy>
 8015cc0:	2201      	movs	r2, #1
 8015cc2:	4629      	mov	r1, r5
 8015cc4:	4620      	mov	r0, r4
 8015cc6:	f000 fca7 	bl	8016618 <__lshift>
 8015cca:	9b00      	ldr	r3, [sp, #0]
 8015ccc:	f8cd b014 	str.w	fp, [sp, #20]
 8015cd0:	f003 0301 	and.w	r3, r3, #1
 8015cd4:	46b1      	mov	r9, r6
 8015cd6:	9307      	str	r3, [sp, #28]
 8015cd8:	4606      	mov	r6, r0
 8015cda:	4639      	mov	r1, r7
 8015cdc:	9804      	ldr	r0, [sp, #16]
 8015cde:	f7ff faa7 	bl	8015230 <quorem>
 8015ce2:	4649      	mov	r1, r9
 8015ce4:	4605      	mov	r5, r0
 8015ce6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015cea:	9804      	ldr	r0, [sp, #16]
 8015cec:	f000 fce8 	bl	80166c0 <__mcmp>
 8015cf0:	4632      	mov	r2, r6
 8015cf2:	9000      	str	r0, [sp, #0]
 8015cf4:	4639      	mov	r1, r7
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f000 fcfc 	bl	80166f4 <__mdiff>
 8015cfc:	68c3      	ldr	r3, [r0, #12]
 8015cfe:	4602      	mov	r2, r0
 8015d00:	bb03      	cbnz	r3, 8015d44 <_dtoa_r+0x9fc>
 8015d02:	4601      	mov	r1, r0
 8015d04:	9008      	str	r0, [sp, #32]
 8015d06:	9804      	ldr	r0, [sp, #16]
 8015d08:	f000 fcda 	bl	80166c0 <__mcmp>
 8015d0c:	9a08      	ldr	r2, [sp, #32]
 8015d0e:	4603      	mov	r3, r0
 8015d10:	4611      	mov	r1, r2
 8015d12:	4620      	mov	r0, r4
 8015d14:	9308      	str	r3, [sp, #32]
 8015d16:	f000 faf1 	bl	80162fc <_Bfree>
 8015d1a:	9b08      	ldr	r3, [sp, #32]
 8015d1c:	b9a3      	cbnz	r3, 8015d48 <_dtoa_r+0xa00>
 8015d1e:	9a06      	ldr	r2, [sp, #24]
 8015d20:	b992      	cbnz	r2, 8015d48 <_dtoa_r+0xa00>
 8015d22:	9a07      	ldr	r2, [sp, #28]
 8015d24:	b982      	cbnz	r2, 8015d48 <_dtoa_r+0xa00>
 8015d26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015d2a:	d029      	beq.n	8015d80 <_dtoa_r+0xa38>
 8015d2c:	9b00      	ldr	r3, [sp, #0]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	dd01      	ble.n	8015d36 <_dtoa_r+0x9ee>
 8015d32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015d36:	9b05      	ldr	r3, [sp, #20]
 8015d38:	1c5d      	adds	r5, r3, #1
 8015d3a:	f883 8000 	strb.w	r8, [r3]
 8015d3e:	e782      	b.n	8015c46 <_dtoa_r+0x8fe>
 8015d40:	4630      	mov	r0, r6
 8015d42:	e7c2      	b.n	8015cca <_dtoa_r+0x982>
 8015d44:	2301      	movs	r3, #1
 8015d46:	e7e3      	b.n	8015d10 <_dtoa_r+0x9c8>
 8015d48:	9a00      	ldr	r2, [sp, #0]
 8015d4a:	2a00      	cmp	r2, #0
 8015d4c:	db04      	blt.n	8015d58 <_dtoa_r+0xa10>
 8015d4e:	d125      	bne.n	8015d9c <_dtoa_r+0xa54>
 8015d50:	9a06      	ldr	r2, [sp, #24]
 8015d52:	bb1a      	cbnz	r2, 8015d9c <_dtoa_r+0xa54>
 8015d54:	9a07      	ldr	r2, [sp, #28]
 8015d56:	bb0a      	cbnz	r2, 8015d9c <_dtoa_r+0xa54>
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	ddec      	ble.n	8015d36 <_dtoa_r+0x9ee>
 8015d5c:	2201      	movs	r2, #1
 8015d5e:	9904      	ldr	r1, [sp, #16]
 8015d60:	4620      	mov	r0, r4
 8015d62:	f000 fc59 	bl	8016618 <__lshift>
 8015d66:	4639      	mov	r1, r7
 8015d68:	9004      	str	r0, [sp, #16]
 8015d6a:	f000 fca9 	bl	80166c0 <__mcmp>
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	dc03      	bgt.n	8015d7a <_dtoa_r+0xa32>
 8015d72:	d1e0      	bne.n	8015d36 <_dtoa_r+0x9ee>
 8015d74:	f018 0f01 	tst.w	r8, #1
 8015d78:	d0dd      	beq.n	8015d36 <_dtoa_r+0x9ee>
 8015d7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015d7e:	d1d8      	bne.n	8015d32 <_dtoa_r+0x9ea>
 8015d80:	9b05      	ldr	r3, [sp, #20]
 8015d82:	9a05      	ldr	r2, [sp, #20]
 8015d84:	1c5d      	adds	r5, r3, #1
 8015d86:	2339      	movs	r3, #57	; 0x39
 8015d88:	7013      	strb	r3, [r2, #0]
 8015d8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015d8e:	2b39      	cmp	r3, #57	; 0x39
 8015d90:	f105 32ff 	add.w	r2, r5, #4294967295
 8015d94:	d04f      	beq.n	8015e36 <_dtoa_r+0xaee>
 8015d96:	3301      	adds	r3, #1
 8015d98:	7013      	strb	r3, [r2, #0]
 8015d9a:	e754      	b.n	8015c46 <_dtoa_r+0x8fe>
 8015d9c:	9a05      	ldr	r2, [sp, #20]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	f102 0501 	add.w	r5, r2, #1
 8015da4:	dd06      	ble.n	8015db4 <_dtoa_r+0xa6c>
 8015da6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015daa:	d0e9      	beq.n	8015d80 <_dtoa_r+0xa38>
 8015dac:	f108 0801 	add.w	r8, r8, #1
 8015db0:	9b05      	ldr	r3, [sp, #20]
 8015db2:	e7c2      	b.n	8015d3a <_dtoa_r+0x9f2>
 8015db4:	9a02      	ldr	r2, [sp, #8]
 8015db6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015dba:	eba5 030b 	sub.w	r3, r5, fp
 8015dbe:	4293      	cmp	r3, r2
 8015dc0:	d021      	beq.n	8015e06 <_dtoa_r+0xabe>
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	220a      	movs	r2, #10
 8015dc6:	9904      	ldr	r1, [sp, #16]
 8015dc8:	4620      	mov	r0, r4
 8015dca:	f000 faae 	bl	801632a <__multadd>
 8015dce:	45b1      	cmp	r9, r6
 8015dd0:	9004      	str	r0, [sp, #16]
 8015dd2:	f04f 0300 	mov.w	r3, #0
 8015dd6:	f04f 020a 	mov.w	r2, #10
 8015dda:	4649      	mov	r1, r9
 8015ddc:	4620      	mov	r0, r4
 8015dde:	d105      	bne.n	8015dec <_dtoa_r+0xaa4>
 8015de0:	f000 faa3 	bl	801632a <__multadd>
 8015de4:	4681      	mov	r9, r0
 8015de6:	4606      	mov	r6, r0
 8015de8:	9505      	str	r5, [sp, #20]
 8015dea:	e776      	b.n	8015cda <_dtoa_r+0x992>
 8015dec:	f000 fa9d 	bl	801632a <__multadd>
 8015df0:	4631      	mov	r1, r6
 8015df2:	4681      	mov	r9, r0
 8015df4:	2300      	movs	r3, #0
 8015df6:	220a      	movs	r2, #10
 8015df8:	4620      	mov	r0, r4
 8015dfa:	f000 fa96 	bl	801632a <__multadd>
 8015dfe:	4606      	mov	r6, r0
 8015e00:	e7f2      	b.n	8015de8 <_dtoa_r+0xaa0>
 8015e02:	f04f 0900 	mov.w	r9, #0
 8015e06:	2201      	movs	r2, #1
 8015e08:	9904      	ldr	r1, [sp, #16]
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	f000 fc04 	bl	8016618 <__lshift>
 8015e10:	4639      	mov	r1, r7
 8015e12:	9004      	str	r0, [sp, #16]
 8015e14:	f000 fc54 	bl	80166c0 <__mcmp>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	dcb6      	bgt.n	8015d8a <_dtoa_r+0xa42>
 8015e1c:	d102      	bne.n	8015e24 <_dtoa_r+0xadc>
 8015e1e:	f018 0f01 	tst.w	r8, #1
 8015e22:	d1b2      	bne.n	8015d8a <_dtoa_r+0xa42>
 8015e24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015e28:	2b30      	cmp	r3, #48	; 0x30
 8015e2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8015e2e:	f47f af0a 	bne.w	8015c46 <_dtoa_r+0x8fe>
 8015e32:	4615      	mov	r5, r2
 8015e34:	e7f6      	b.n	8015e24 <_dtoa_r+0xadc>
 8015e36:	4593      	cmp	fp, r2
 8015e38:	d105      	bne.n	8015e46 <_dtoa_r+0xafe>
 8015e3a:	2331      	movs	r3, #49	; 0x31
 8015e3c:	f10a 0a01 	add.w	sl, sl, #1
 8015e40:	f88b 3000 	strb.w	r3, [fp]
 8015e44:	e6ff      	b.n	8015c46 <_dtoa_r+0x8fe>
 8015e46:	4615      	mov	r5, r2
 8015e48:	e79f      	b.n	8015d8a <_dtoa_r+0xa42>
 8015e4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015eb0 <_dtoa_r+0xb68>
 8015e4e:	e007      	b.n	8015e60 <_dtoa_r+0xb18>
 8015e50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015e52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015eb4 <_dtoa_r+0xb6c>
 8015e56:	b11b      	cbz	r3, 8015e60 <_dtoa_r+0xb18>
 8015e58:	f10b 0308 	add.w	r3, fp, #8
 8015e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015e5e:	6013      	str	r3, [r2, #0]
 8015e60:	4658      	mov	r0, fp
 8015e62:	b017      	add	sp, #92	; 0x5c
 8015e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e68:	9b06      	ldr	r3, [sp, #24]
 8015e6a:	2b01      	cmp	r3, #1
 8015e6c:	f77f ae35 	ble.w	8015ada <_dtoa_r+0x792>
 8015e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e72:	9307      	str	r3, [sp, #28]
 8015e74:	e649      	b.n	8015b0a <_dtoa_r+0x7c2>
 8015e76:	9b02      	ldr	r3, [sp, #8]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	dc03      	bgt.n	8015e84 <_dtoa_r+0xb3c>
 8015e7c:	9b06      	ldr	r3, [sp, #24]
 8015e7e:	2b02      	cmp	r3, #2
 8015e80:	f73f aecc 	bgt.w	8015c1c <_dtoa_r+0x8d4>
 8015e84:	465d      	mov	r5, fp
 8015e86:	4639      	mov	r1, r7
 8015e88:	9804      	ldr	r0, [sp, #16]
 8015e8a:	f7ff f9d1 	bl	8015230 <quorem>
 8015e8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015e92:	f805 8b01 	strb.w	r8, [r5], #1
 8015e96:	9a02      	ldr	r2, [sp, #8]
 8015e98:	eba5 030b 	sub.w	r3, r5, fp
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	ddb0      	ble.n	8015e02 <_dtoa_r+0xaba>
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	220a      	movs	r2, #10
 8015ea4:	9904      	ldr	r1, [sp, #16]
 8015ea6:	4620      	mov	r0, r4
 8015ea8:	f000 fa3f 	bl	801632a <__multadd>
 8015eac:	9004      	str	r0, [sp, #16]
 8015eae:	e7ea      	b.n	8015e86 <_dtoa_r+0xb3e>
 8015eb0:	08023299 	.word	0x08023299
 8015eb4:	080232bd 	.word	0x080232bd

08015eb8 <__sflush_r>:
 8015eb8:	898a      	ldrh	r2, [r1, #12]
 8015eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ebe:	4605      	mov	r5, r0
 8015ec0:	0710      	lsls	r0, r2, #28
 8015ec2:	460c      	mov	r4, r1
 8015ec4:	d458      	bmi.n	8015f78 <__sflush_r+0xc0>
 8015ec6:	684b      	ldr	r3, [r1, #4]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	dc05      	bgt.n	8015ed8 <__sflush_r+0x20>
 8015ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	dc02      	bgt.n	8015ed8 <__sflush_r+0x20>
 8015ed2:	2000      	movs	r0, #0
 8015ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015eda:	2e00      	cmp	r6, #0
 8015edc:	d0f9      	beq.n	8015ed2 <__sflush_r+0x1a>
 8015ede:	2300      	movs	r3, #0
 8015ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015ee4:	682f      	ldr	r7, [r5, #0]
 8015ee6:	6a21      	ldr	r1, [r4, #32]
 8015ee8:	602b      	str	r3, [r5, #0]
 8015eea:	d032      	beq.n	8015f52 <__sflush_r+0x9a>
 8015eec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015eee:	89a3      	ldrh	r3, [r4, #12]
 8015ef0:	075a      	lsls	r2, r3, #29
 8015ef2:	d505      	bpl.n	8015f00 <__sflush_r+0x48>
 8015ef4:	6863      	ldr	r3, [r4, #4]
 8015ef6:	1ac0      	subs	r0, r0, r3
 8015ef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015efa:	b10b      	cbz	r3, 8015f00 <__sflush_r+0x48>
 8015efc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015efe:	1ac0      	subs	r0, r0, r3
 8015f00:	2300      	movs	r3, #0
 8015f02:	4602      	mov	r2, r0
 8015f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f06:	6a21      	ldr	r1, [r4, #32]
 8015f08:	4628      	mov	r0, r5
 8015f0a:	47b0      	blx	r6
 8015f0c:	1c43      	adds	r3, r0, #1
 8015f0e:	89a3      	ldrh	r3, [r4, #12]
 8015f10:	d106      	bne.n	8015f20 <__sflush_r+0x68>
 8015f12:	6829      	ldr	r1, [r5, #0]
 8015f14:	291d      	cmp	r1, #29
 8015f16:	d848      	bhi.n	8015faa <__sflush_r+0xf2>
 8015f18:	4a29      	ldr	r2, [pc, #164]	; (8015fc0 <__sflush_r+0x108>)
 8015f1a:	40ca      	lsrs	r2, r1
 8015f1c:	07d6      	lsls	r6, r2, #31
 8015f1e:	d544      	bpl.n	8015faa <__sflush_r+0xf2>
 8015f20:	2200      	movs	r2, #0
 8015f22:	6062      	str	r2, [r4, #4]
 8015f24:	04d9      	lsls	r1, r3, #19
 8015f26:	6922      	ldr	r2, [r4, #16]
 8015f28:	6022      	str	r2, [r4, #0]
 8015f2a:	d504      	bpl.n	8015f36 <__sflush_r+0x7e>
 8015f2c:	1c42      	adds	r2, r0, #1
 8015f2e:	d101      	bne.n	8015f34 <__sflush_r+0x7c>
 8015f30:	682b      	ldr	r3, [r5, #0]
 8015f32:	b903      	cbnz	r3, 8015f36 <__sflush_r+0x7e>
 8015f34:	6560      	str	r0, [r4, #84]	; 0x54
 8015f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f38:	602f      	str	r7, [r5, #0]
 8015f3a:	2900      	cmp	r1, #0
 8015f3c:	d0c9      	beq.n	8015ed2 <__sflush_r+0x1a>
 8015f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f42:	4299      	cmp	r1, r3
 8015f44:	d002      	beq.n	8015f4c <__sflush_r+0x94>
 8015f46:	4628      	mov	r0, r5
 8015f48:	f7fe f984 	bl	8014254 <_free_r>
 8015f4c:	2000      	movs	r0, #0
 8015f4e:	6360      	str	r0, [r4, #52]	; 0x34
 8015f50:	e7c0      	b.n	8015ed4 <__sflush_r+0x1c>
 8015f52:	2301      	movs	r3, #1
 8015f54:	4628      	mov	r0, r5
 8015f56:	47b0      	blx	r6
 8015f58:	1c41      	adds	r1, r0, #1
 8015f5a:	d1c8      	bne.n	8015eee <__sflush_r+0x36>
 8015f5c:	682b      	ldr	r3, [r5, #0]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d0c5      	beq.n	8015eee <__sflush_r+0x36>
 8015f62:	2b1d      	cmp	r3, #29
 8015f64:	d001      	beq.n	8015f6a <__sflush_r+0xb2>
 8015f66:	2b16      	cmp	r3, #22
 8015f68:	d101      	bne.n	8015f6e <__sflush_r+0xb6>
 8015f6a:	602f      	str	r7, [r5, #0]
 8015f6c:	e7b1      	b.n	8015ed2 <__sflush_r+0x1a>
 8015f6e:	89a3      	ldrh	r3, [r4, #12]
 8015f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f74:	81a3      	strh	r3, [r4, #12]
 8015f76:	e7ad      	b.n	8015ed4 <__sflush_r+0x1c>
 8015f78:	690f      	ldr	r7, [r1, #16]
 8015f7a:	2f00      	cmp	r7, #0
 8015f7c:	d0a9      	beq.n	8015ed2 <__sflush_r+0x1a>
 8015f7e:	0793      	lsls	r3, r2, #30
 8015f80:	680e      	ldr	r6, [r1, #0]
 8015f82:	bf08      	it	eq
 8015f84:	694b      	ldreq	r3, [r1, #20]
 8015f86:	600f      	str	r7, [r1, #0]
 8015f88:	bf18      	it	ne
 8015f8a:	2300      	movne	r3, #0
 8015f8c:	eba6 0807 	sub.w	r8, r6, r7
 8015f90:	608b      	str	r3, [r1, #8]
 8015f92:	f1b8 0f00 	cmp.w	r8, #0
 8015f96:	dd9c      	ble.n	8015ed2 <__sflush_r+0x1a>
 8015f98:	4643      	mov	r3, r8
 8015f9a:	463a      	mov	r2, r7
 8015f9c:	6a21      	ldr	r1, [r4, #32]
 8015f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015fa0:	4628      	mov	r0, r5
 8015fa2:	47b0      	blx	r6
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	dc06      	bgt.n	8015fb6 <__sflush_r+0xfe>
 8015fa8:	89a3      	ldrh	r3, [r4, #12]
 8015faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fae:	81a3      	strh	r3, [r4, #12]
 8015fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8015fb4:	e78e      	b.n	8015ed4 <__sflush_r+0x1c>
 8015fb6:	4407      	add	r7, r0
 8015fb8:	eba8 0800 	sub.w	r8, r8, r0
 8015fbc:	e7e9      	b.n	8015f92 <__sflush_r+0xda>
 8015fbe:	bf00      	nop
 8015fc0:	20400001 	.word	0x20400001

08015fc4 <_fflush_r>:
 8015fc4:	b538      	push	{r3, r4, r5, lr}
 8015fc6:	690b      	ldr	r3, [r1, #16]
 8015fc8:	4605      	mov	r5, r0
 8015fca:	460c      	mov	r4, r1
 8015fcc:	b1db      	cbz	r3, 8016006 <_fflush_r+0x42>
 8015fce:	b118      	cbz	r0, 8015fd8 <_fflush_r+0x14>
 8015fd0:	6983      	ldr	r3, [r0, #24]
 8015fd2:	b90b      	cbnz	r3, 8015fd8 <_fflush_r+0x14>
 8015fd4:	f000 f860 	bl	8016098 <__sinit>
 8015fd8:	4b0c      	ldr	r3, [pc, #48]	; (801600c <_fflush_r+0x48>)
 8015fda:	429c      	cmp	r4, r3
 8015fdc:	d109      	bne.n	8015ff2 <_fflush_r+0x2e>
 8015fde:	686c      	ldr	r4, [r5, #4]
 8015fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fe4:	b17b      	cbz	r3, 8016006 <_fflush_r+0x42>
 8015fe6:	4621      	mov	r1, r4
 8015fe8:	4628      	mov	r0, r5
 8015fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fee:	f7ff bf63 	b.w	8015eb8 <__sflush_r>
 8015ff2:	4b07      	ldr	r3, [pc, #28]	; (8016010 <_fflush_r+0x4c>)
 8015ff4:	429c      	cmp	r4, r3
 8015ff6:	d101      	bne.n	8015ffc <_fflush_r+0x38>
 8015ff8:	68ac      	ldr	r4, [r5, #8]
 8015ffa:	e7f1      	b.n	8015fe0 <_fflush_r+0x1c>
 8015ffc:	4b05      	ldr	r3, [pc, #20]	; (8016014 <_fflush_r+0x50>)
 8015ffe:	429c      	cmp	r4, r3
 8016000:	bf08      	it	eq
 8016002:	68ec      	ldreq	r4, [r5, #12]
 8016004:	e7ec      	b.n	8015fe0 <_fflush_r+0x1c>
 8016006:	2000      	movs	r0, #0
 8016008:	bd38      	pop	{r3, r4, r5, pc}
 801600a:	bf00      	nop
 801600c:	080232ec 	.word	0x080232ec
 8016010:	0802330c 	.word	0x0802330c
 8016014:	080232cc 	.word	0x080232cc

08016018 <std>:
 8016018:	2300      	movs	r3, #0
 801601a:	b510      	push	{r4, lr}
 801601c:	4604      	mov	r4, r0
 801601e:	e9c0 3300 	strd	r3, r3, [r0]
 8016022:	6083      	str	r3, [r0, #8]
 8016024:	8181      	strh	r1, [r0, #12]
 8016026:	6643      	str	r3, [r0, #100]	; 0x64
 8016028:	81c2      	strh	r2, [r0, #14]
 801602a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801602e:	6183      	str	r3, [r0, #24]
 8016030:	4619      	mov	r1, r3
 8016032:	2208      	movs	r2, #8
 8016034:	305c      	adds	r0, #92	; 0x5c
 8016036:	f7fe f8f7 	bl	8014228 <memset>
 801603a:	4b05      	ldr	r3, [pc, #20]	; (8016050 <std+0x38>)
 801603c:	6263      	str	r3, [r4, #36]	; 0x24
 801603e:	4b05      	ldr	r3, [pc, #20]	; (8016054 <std+0x3c>)
 8016040:	62a3      	str	r3, [r4, #40]	; 0x28
 8016042:	4b05      	ldr	r3, [pc, #20]	; (8016058 <std+0x40>)
 8016044:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016046:	4b05      	ldr	r3, [pc, #20]	; (801605c <std+0x44>)
 8016048:	6224      	str	r4, [r4, #32]
 801604a:	6323      	str	r3, [r4, #48]	; 0x30
 801604c:	bd10      	pop	{r4, pc}
 801604e:	bf00      	nop
 8016050:	08016b3d 	.word	0x08016b3d
 8016054:	08016b5f 	.word	0x08016b5f
 8016058:	08016b97 	.word	0x08016b97
 801605c:	08016bbb 	.word	0x08016bbb

08016060 <_cleanup_r>:
 8016060:	4901      	ldr	r1, [pc, #4]	; (8016068 <_cleanup_r+0x8>)
 8016062:	f000 b885 	b.w	8016170 <_fwalk_reent>
 8016066:	bf00      	nop
 8016068:	08015fc5 	.word	0x08015fc5

0801606c <__sfmoreglue>:
 801606c:	b570      	push	{r4, r5, r6, lr}
 801606e:	1e4a      	subs	r2, r1, #1
 8016070:	2568      	movs	r5, #104	; 0x68
 8016072:	4355      	muls	r5, r2
 8016074:	460e      	mov	r6, r1
 8016076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801607a:	f7fe f939 	bl	80142f0 <_malloc_r>
 801607e:	4604      	mov	r4, r0
 8016080:	b140      	cbz	r0, 8016094 <__sfmoreglue+0x28>
 8016082:	2100      	movs	r1, #0
 8016084:	e9c0 1600 	strd	r1, r6, [r0]
 8016088:	300c      	adds	r0, #12
 801608a:	60a0      	str	r0, [r4, #8]
 801608c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016090:	f7fe f8ca 	bl	8014228 <memset>
 8016094:	4620      	mov	r0, r4
 8016096:	bd70      	pop	{r4, r5, r6, pc}

08016098 <__sinit>:
 8016098:	6983      	ldr	r3, [r0, #24]
 801609a:	b510      	push	{r4, lr}
 801609c:	4604      	mov	r4, r0
 801609e:	bb33      	cbnz	r3, 80160ee <__sinit+0x56>
 80160a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80160a4:	6503      	str	r3, [r0, #80]	; 0x50
 80160a6:	4b12      	ldr	r3, [pc, #72]	; (80160f0 <__sinit+0x58>)
 80160a8:	4a12      	ldr	r2, [pc, #72]	; (80160f4 <__sinit+0x5c>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	6282      	str	r2, [r0, #40]	; 0x28
 80160ae:	4298      	cmp	r0, r3
 80160b0:	bf04      	itt	eq
 80160b2:	2301      	moveq	r3, #1
 80160b4:	6183      	streq	r3, [r0, #24]
 80160b6:	f000 f81f 	bl	80160f8 <__sfp>
 80160ba:	6060      	str	r0, [r4, #4]
 80160bc:	4620      	mov	r0, r4
 80160be:	f000 f81b 	bl	80160f8 <__sfp>
 80160c2:	60a0      	str	r0, [r4, #8]
 80160c4:	4620      	mov	r0, r4
 80160c6:	f000 f817 	bl	80160f8 <__sfp>
 80160ca:	2200      	movs	r2, #0
 80160cc:	60e0      	str	r0, [r4, #12]
 80160ce:	2104      	movs	r1, #4
 80160d0:	6860      	ldr	r0, [r4, #4]
 80160d2:	f7ff ffa1 	bl	8016018 <std>
 80160d6:	2201      	movs	r2, #1
 80160d8:	2109      	movs	r1, #9
 80160da:	68a0      	ldr	r0, [r4, #8]
 80160dc:	f7ff ff9c 	bl	8016018 <std>
 80160e0:	2202      	movs	r2, #2
 80160e2:	2112      	movs	r1, #18
 80160e4:	68e0      	ldr	r0, [r4, #12]
 80160e6:	f7ff ff97 	bl	8016018 <std>
 80160ea:	2301      	movs	r3, #1
 80160ec:	61a3      	str	r3, [r4, #24]
 80160ee:	bd10      	pop	{r4, pc}
 80160f0:	08023274 	.word	0x08023274
 80160f4:	08016061 	.word	0x08016061

080160f8 <__sfp>:
 80160f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160fa:	4b1b      	ldr	r3, [pc, #108]	; (8016168 <__sfp+0x70>)
 80160fc:	681e      	ldr	r6, [r3, #0]
 80160fe:	69b3      	ldr	r3, [r6, #24]
 8016100:	4607      	mov	r7, r0
 8016102:	b913      	cbnz	r3, 801610a <__sfp+0x12>
 8016104:	4630      	mov	r0, r6
 8016106:	f7ff ffc7 	bl	8016098 <__sinit>
 801610a:	3648      	adds	r6, #72	; 0x48
 801610c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016110:	3b01      	subs	r3, #1
 8016112:	d503      	bpl.n	801611c <__sfp+0x24>
 8016114:	6833      	ldr	r3, [r6, #0]
 8016116:	b133      	cbz	r3, 8016126 <__sfp+0x2e>
 8016118:	6836      	ldr	r6, [r6, #0]
 801611a:	e7f7      	b.n	801610c <__sfp+0x14>
 801611c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016120:	b16d      	cbz	r5, 801613e <__sfp+0x46>
 8016122:	3468      	adds	r4, #104	; 0x68
 8016124:	e7f4      	b.n	8016110 <__sfp+0x18>
 8016126:	2104      	movs	r1, #4
 8016128:	4638      	mov	r0, r7
 801612a:	f7ff ff9f 	bl	801606c <__sfmoreglue>
 801612e:	6030      	str	r0, [r6, #0]
 8016130:	2800      	cmp	r0, #0
 8016132:	d1f1      	bne.n	8016118 <__sfp+0x20>
 8016134:	230c      	movs	r3, #12
 8016136:	603b      	str	r3, [r7, #0]
 8016138:	4604      	mov	r4, r0
 801613a:	4620      	mov	r0, r4
 801613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801613e:	4b0b      	ldr	r3, [pc, #44]	; (801616c <__sfp+0x74>)
 8016140:	6665      	str	r5, [r4, #100]	; 0x64
 8016142:	e9c4 5500 	strd	r5, r5, [r4]
 8016146:	60a5      	str	r5, [r4, #8]
 8016148:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801614c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016150:	2208      	movs	r2, #8
 8016152:	4629      	mov	r1, r5
 8016154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016158:	f7fe f866 	bl	8014228 <memset>
 801615c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016164:	e7e9      	b.n	801613a <__sfp+0x42>
 8016166:	bf00      	nop
 8016168:	08023274 	.word	0x08023274
 801616c:	ffff0001 	.word	0xffff0001

08016170 <_fwalk_reent>:
 8016170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016174:	4680      	mov	r8, r0
 8016176:	4689      	mov	r9, r1
 8016178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801617c:	2600      	movs	r6, #0
 801617e:	b914      	cbnz	r4, 8016186 <_fwalk_reent+0x16>
 8016180:	4630      	mov	r0, r6
 8016182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016186:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801618a:	3f01      	subs	r7, #1
 801618c:	d501      	bpl.n	8016192 <_fwalk_reent+0x22>
 801618e:	6824      	ldr	r4, [r4, #0]
 8016190:	e7f5      	b.n	801617e <_fwalk_reent+0xe>
 8016192:	89ab      	ldrh	r3, [r5, #12]
 8016194:	2b01      	cmp	r3, #1
 8016196:	d907      	bls.n	80161a8 <_fwalk_reent+0x38>
 8016198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801619c:	3301      	adds	r3, #1
 801619e:	d003      	beq.n	80161a8 <_fwalk_reent+0x38>
 80161a0:	4629      	mov	r1, r5
 80161a2:	4640      	mov	r0, r8
 80161a4:	47c8      	blx	r9
 80161a6:	4306      	orrs	r6, r0
 80161a8:	3568      	adds	r5, #104	; 0x68
 80161aa:	e7ee      	b.n	801618a <_fwalk_reent+0x1a>

080161ac <_localeconv_r>:
 80161ac:	4b04      	ldr	r3, [pc, #16]	; (80161c0 <_localeconv_r+0x14>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	6a18      	ldr	r0, [r3, #32]
 80161b2:	4b04      	ldr	r3, [pc, #16]	; (80161c4 <_localeconv_r+0x18>)
 80161b4:	2800      	cmp	r0, #0
 80161b6:	bf08      	it	eq
 80161b8:	4618      	moveq	r0, r3
 80161ba:	30f0      	adds	r0, #240	; 0xf0
 80161bc:	4770      	bx	lr
 80161be:	bf00      	nop
 80161c0:	2000002c 	.word	0x2000002c
 80161c4:	20000090 	.word	0x20000090

080161c8 <__swhatbuf_r>:
 80161c8:	b570      	push	{r4, r5, r6, lr}
 80161ca:	460e      	mov	r6, r1
 80161cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161d0:	2900      	cmp	r1, #0
 80161d2:	b096      	sub	sp, #88	; 0x58
 80161d4:	4614      	mov	r4, r2
 80161d6:	461d      	mov	r5, r3
 80161d8:	da07      	bge.n	80161ea <__swhatbuf_r+0x22>
 80161da:	2300      	movs	r3, #0
 80161dc:	602b      	str	r3, [r5, #0]
 80161de:	89b3      	ldrh	r3, [r6, #12]
 80161e0:	061a      	lsls	r2, r3, #24
 80161e2:	d410      	bmi.n	8016206 <__swhatbuf_r+0x3e>
 80161e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80161e8:	e00e      	b.n	8016208 <__swhatbuf_r+0x40>
 80161ea:	466a      	mov	r2, sp
 80161ec:	f000 fd0c 	bl	8016c08 <_fstat_r>
 80161f0:	2800      	cmp	r0, #0
 80161f2:	dbf2      	blt.n	80161da <__swhatbuf_r+0x12>
 80161f4:	9a01      	ldr	r2, [sp, #4]
 80161f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80161fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80161fe:	425a      	negs	r2, r3
 8016200:	415a      	adcs	r2, r3
 8016202:	602a      	str	r2, [r5, #0]
 8016204:	e7ee      	b.n	80161e4 <__swhatbuf_r+0x1c>
 8016206:	2340      	movs	r3, #64	; 0x40
 8016208:	2000      	movs	r0, #0
 801620a:	6023      	str	r3, [r4, #0]
 801620c:	b016      	add	sp, #88	; 0x58
 801620e:	bd70      	pop	{r4, r5, r6, pc}

08016210 <__smakebuf_r>:
 8016210:	898b      	ldrh	r3, [r1, #12]
 8016212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016214:	079d      	lsls	r5, r3, #30
 8016216:	4606      	mov	r6, r0
 8016218:	460c      	mov	r4, r1
 801621a:	d507      	bpl.n	801622c <__smakebuf_r+0x1c>
 801621c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016220:	6023      	str	r3, [r4, #0]
 8016222:	6123      	str	r3, [r4, #16]
 8016224:	2301      	movs	r3, #1
 8016226:	6163      	str	r3, [r4, #20]
 8016228:	b002      	add	sp, #8
 801622a:	bd70      	pop	{r4, r5, r6, pc}
 801622c:	ab01      	add	r3, sp, #4
 801622e:	466a      	mov	r2, sp
 8016230:	f7ff ffca 	bl	80161c8 <__swhatbuf_r>
 8016234:	9900      	ldr	r1, [sp, #0]
 8016236:	4605      	mov	r5, r0
 8016238:	4630      	mov	r0, r6
 801623a:	f7fe f859 	bl	80142f0 <_malloc_r>
 801623e:	b948      	cbnz	r0, 8016254 <__smakebuf_r+0x44>
 8016240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016244:	059a      	lsls	r2, r3, #22
 8016246:	d4ef      	bmi.n	8016228 <__smakebuf_r+0x18>
 8016248:	f023 0303 	bic.w	r3, r3, #3
 801624c:	f043 0302 	orr.w	r3, r3, #2
 8016250:	81a3      	strh	r3, [r4, #12]
 8016252:	e7e3      	b.n	801621c <__smakebuf_r+0xc>
 8016254:	4b0d      	ldr	r3, [pc, #52]	; (801628c <__smakebuf_r+0x7c>)
 8016256:	62b3      	str	r3, [r6, #40]	; 0x28
 8016258:	89a3      	ldrh	r3, [r4, #12]
 801625a:	6020      	str	r0, [r4, #0]
 801625c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016260:	81a3      	strh	r3, [r4, #12]
 8016262:	9b00      	ldr	r3, [sp, #0]
 8016264:	6163      	str	r3, [r4, #20]
 8016266:	9b01      	ldr	r3, [sp, #4]
 8016268:	6120      	str	r0, [r4, #16]
 801626a:	b15b      	cbz	r3, 8016284 <__smakebuf_r+0x74>
 801626c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016270:	4630      	mov	r0, r6
 8016272:	f000 fcdb 	bl	8016c2c <_isatty_r>
 8016276:	b128      	cbz	r0, 8016284 <__smakebuf_r+0x74>
 8016278:	89a3      	ldrh	r3, [r4, #12]
 801627a:	f023 0303 	bic.w	r3, r3, #3
 801627e:	f043 0301 	orr.w	r3, r3, #1
 8016282:	81a3      	strh	r3, [r4, #12]
 8016284:	89a3      	ldrh	r3, [r4, #12]
 8016286:	431d      	orrs	r5, r3
 8016288:	81a5      	strh	r5, [r4, #12]
 801628a:	e7cd      	b.n	8016228 <__smakebuf_r+0x18>
 801628c:	08016061 	.word	0x08016061

08016290 <__malloc_lock>:
 8016290:	4770      	bx	lr

08016292 <__malloc_unlock>:
 8016292:	4770      	bx	lr

08016294 <_Balloc>:
 8016294:	b570      	push	{r4, r5, r6, lr}
 8016296:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016298:	4604      	mov	r4, r0
 801629a:	460e      	mov	r6, r1
 801629c:	b93d      	cbnz	r5, 80162ae <_Balloc+0x1a>
 801629e:	2010      	movs	r0, #16
 80162a0:	f7fd ff8e 	bl	80141c0 <malloc>
 80162a4:	6260      	str	r0, [r4, #36]	; 0x24
 80162a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80162aa:	6005      	str	r5, [r0, #0]
 80162ac:	60c5      	str	r5, [r0, #12]
 80162ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80162b0:	68eb      	ldr	r3, [r5, #12]
 80162b2:	b183      	cbz	r3, 80162d6 <_Balloc+0x42>
 80162b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80162b6:	68db      	ldr	r3, [r3, #12]
 80162b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80162bc:	b9b8      	cbnz	r0, 80162ee <_Balloc+0x5a>
 80162be:	2101      	movs	r1, #1
 80162c0:	fa01 f506 	lsl.w	r5, r1, r6
 80162c4:	1d6a      	adds	r2, r5, #5
 80162c6:	0092      	lsls	r2, r2, #2
 80162c8:	4620      	mov	r0, r4
 80162ca:	f7fd ffb5 	bl	8014238 <_calloc_r>
 80162ce:	b160      	cbz	r0, 80162ea <_Balloc+0x56>
 80162d0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80162d4:	e00e      	b.n	80162f4 <_Balloc+0x60>
 80162d6:	2221      	movs	r2, #33	; 0x21
 80162d8:	2104      	movs	r1, #4
 80162da:	4620      	mov	r0, r4
 80162dc:	f7fd ffac 	bl	8014238 <_calloc_r>
 80162e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80162e2:	60e8      	str	r0, [r5, #12]
 80162e4:	68db      	ldr	r3, [r3, #12]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d1e4      	bne.n	80162b4 <_Balloc+0x20>
 80162ea:	2000      	movs	r0, #0
 80162ec:	bd70      	pop	{r4, r5, r6, pc}
 80162ee:	6802      	ldr	r2, [r0, #0]
 80162f0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80162f4:	2300      	movs	r3, #0
 80162f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80162fa:	e7f7      	b.n	80162ec <_Balloc+0x58>

080162fc <_Bfree>:
 80162fc:	b570      	push	{r4, r5, r6, lr}
 80162fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016300:	4606      	mov	r6, r0
 8016302:	460d      	mov	r5, r1
 8016304:	b93c      	cbnz	r4, 8016316 <_Bfree+0x1a>
 8016306:	2010      	movs	r0, #16
 8016308:	f7fd ff5a 	bl	80141c0 <malloc>
 801630c:	6270      	str	r0, [r6, #36]	; 0x24
 801630e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016312:	6004      	str	r4, [r0, #0]
 8016314:	60c4      	str	r4, [r0, #12]
 8016316:	b13d      	cbz	r5, 8016328 <_Bfree+0x2c>
 8016318:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801631a:	686a      	ldr	r2, [r5, #4]
 801631c:	68db      	ldr	r3, [r3, #12]
 801631e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016322:	6029      	str	r1, [r5, #0]
 8016324:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016328:	bd70      	pop	{r4, r5, r6, pc}

0801632a <__multadd>:
 801632a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801632e:	690d      	ldr	r5, [r1, #16]
 8016330:	461f      	mov	r7, r3
 8016332:	4606      	mov	r6, r0
 8016334:	460c      	mov	r4, r1
 8016336:	f101 0c14 	add.w	ip, r1, #20
 801633a:	2300      	movs	r3, #0
 801633c:	f8dc 0000 	ldr.w	r0, [ip]
 8016340:	b281      	uxth	r1, r0
 8016342:	fb02 7101 	mla	r1, r2, r1, r7
 8016346:	0c0f      	lsrs	r7, r1, #16
 8016348:	0c00      	lsrs	r0, r0, #16
 801634a:	fb02 7000 	mla	r0, r2, r0, r7
 801634e:	b289      	uxth	r1, r1
 8016350:	3301      	adds	r3, #1
 8016352:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016356:	429d      	cmp	r5, r3
 8016358:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801635c:	f84c 1b04 	str.w	r1, [ip], #4
 8016360:	dcec      	bgt.n	801633c <__multadd+0x12>
 8016362:	b1d7      	cbz	r7, 801639a <__multadd+0x70>
 8016364:	68a3      	ldr	r3, [r4, #8]
 8016366:	42ab      	cmp	r3, r5
 8016368:	dc12      	bgt.n	8016390 <__multadd+0x66>
 801636a:	6861      	ldr	r1, [r4, #4]
 801636c:	4630      	mov	r0, r6
 801636e:	3101      	adds	r1, #1
 8016370:	f7ff ff90 	bl	8016294 <_Balloc>
 8016374:	6922      	ldr	r2, [r4, #16]
 8016376:	3202      	adds	r2, #2
 8016378:	f104 010c 	add.w	r1, r4, #12
 801637c:	4680      	mov	r8, r0
 801637e:	0092      	lsls	r2, r2, #2
 8016380:	300c      	adds	r0, #12
 8016382:	f7fd ff2d 	bl	80141e0 <memcpy>
 8016386:	4621      	mov	r1, r4
 8016388:	4630      	mov	r0, r6
 801638a:	f7ff ffb7 	bl	80162fc <_Bfree>
 801638e:	4644      	mov	r4, r8
 8016390:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016394:	3501      	adds	r5, #1
 8016396:	615f      	str	r7, [r3, #20]
 8016398:	6125      	str	r5, [r4, #16]
 801639a:	4620      	mov	r0, r4
 801639c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080163a0 <__hi0bits>:
 80163a0:	0c02      	lsrs	r2, r0, #16
 80163a2:	0412      	lsls	r2, r2, #16
 80163a4:	4603      	mov	r3, r0
 80163a6:	b9b2      	cbnz	r2, 80163d6 <__hi0bits+0x36>
 80163a8:	0403      	lsls	r3, r0, #16
 80163aa:	2010      	movs	r0, #16
 80163ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80163b0:	bf04      	itt	eq
 80163b2:	021b      	lsleq	r3, r3, #8
 80163b4:	3008      	addeq	r0, #8
 80163b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80163ba:	bf04      	itt	eq
 80163bc:	011b      	lsleq	r3, r3, #4
 80163be:	3004      	addeq	r0, #4
 80163c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80163c4:	bf04      	itt	eq
 80163c6:	009b      	lsleq	r3, r3, #2
 80163c8:	3002      	addeq	r0, #2
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	db06      	blt.n	80163dc <__hi0bits+0x3c>
 80163ce:	005b      	lsls	r3, r3, #1
 80163d0:	d503      	bpl.n	80163da <__hi0bits+0x3a>
 80163d2:	3001      	adds	r0, #1
 80163d4:	4770      	bx	lr
 80163d6:	2000      	movs	r0, #0
 80163d8:	e7e8      	b.n	80163ac <__hi0bits+0xc>
 80163da:	2020      	movs	r0, #32
 80163dc:	4770      	bx	lr

080163de <__lo0bits>:
 80163de:	6803      	ldr	r3, [r0, #0]
 80163e0:	f013 0207 	ands.w	r2, r3, #7
 80163e4:	4601      	mov	r1, r0
 80163e6:	d00b      	beq.n	8016400 <__lo0bits+0x22>
 80163e8:	07da      	lsls	r2, r3, #31
 80163ea:	d423      	bmi.n	8016434 <__lo0bits+0x56>
 80163ec:	0798      	lsls	r0, r3, #30
 80163ee:	bf49      	itett	mi
 80163f0:	085b      	lsrmi	r3, r3, #1
 80163f2:	089b      	lsrpl	r3, r3, #2
 80163f4:	2001      	movmi	r0, #1
 80163f6:	600b      	strmi	r3, [r1, #0]
 80163f8:	bf5c      	itt	pl
 80163fa:	600b      	strpl	r3, [r1, #0]
 80163fc:	2002      	movpl	r0, #2
 80163fe:	4770      	bx	lr
 8016400:	b298      	uxth	r0, r3
 8016402:	b9a8      	cbnz	r0, 8016430 <__lo0bits+0x52>
 8016404:	0c1b      	lsrs	r3, r3, #16
 8016406:	2010      	movs	r0, #16
 8016408:	f013 0fff 	tst.w	r3, #255	; 0xff
 801640c:	bf04      	itt	eq
 801640e:	0a1b      	lsreq	r3, r3, #8
 8016410:	3008      	addeq	r0, #8
 8016412:	071a      	lsls	r2, r3, #28
 8016414:	bf04      	itt	eq
 8016416:	091b      	lsreq	r3, r3, #4
 8016418:	3004      	addeq	r0, #4
 801641a:	079a      	lsls	r2, r3, #30
 801641c:	bf04      	itt	eq
 801641e:	089b      	lsreq	r3, r3, #2
 8016420:	3002      	addeq	r0, #2
 8016422:	07da      	lsls	r2, r3, #31
 8016424:	d402      	bmi.n	801642c <__lo0bits+0x4e>
 8016426:	085b      	lsrs	r3, r3, #1
 8016428:	d006      	beq.n	8016438 <__lo0bits+0x5a>
 801642a:	3001      	adds	r0, #1
 801642c:	600b      	str	r3, [r1, #0]
 801642e:	4770      	bx	lr
 8016430:	4610      	mov	r0, r2
 8016432:	e7e9      	b.n	8016408 <__lo0bits+0x2a>
 8016434:	2000      	movs	r0, #0
 8016436:	4770      	bx	lr
 8016438:	2020      	movs	r0, #32
 801643a:	4770      	bx	lr

0801643c <__i2b>:
 801643c:	b510      	push	{r4, lr}
 801643e:	460c      	mov	r4, r1
 8016440:	2101      	movs	r1, #1
 8016442:	f7ff ff27 	bl	8016294 <_Balloc>
 8016446:	2201      	movs	r2, #1
 8016448:	6144      	str	r4, [r0, #20]
 801644a:	6102      	str	r2, [r0, #16]
 801644c:	bd10      	pop	{r4, pc}

0801644e <__multiply>:
 801644e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016452:	4614      	mov	r4, r2
 8016454:	690a      	ldr	r2, [r1, #16]
 8016456:	6923      	ldr	r3, [r4, #16]
 8016458:	429a      	cmp	r2, r3
 801645a:	bfb8      	it	lt
 801645c:	460b      	movlt	r3, r1
 801645e:	4688      	mov	r8, r1
 8016460:	bfbc      	itt	lt
 8016462:	46a0      	movlt	r8, r4
 8016464:	461c      	movlt	r4, r3
 8016466:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801646a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801646e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016472:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016476:	eb07 0609 	add.w	r6, r7, r9
 801647a:	42b3      	cmp	r3, r6
 801647c:	bfb8      	it	lt
 801647e:	3101      	addlt	r1, #1
 8016480:	f7ff ff08 	bl	8016294 <_Balloc>
 8016484:	f100 0514 	add.w	r5, r0, #20
 8016488:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801648c:	462b      	mov	r3, r5
 801648e:	2200      	movs	r2, #0
 8016490:	4573      	cmp	r3, lr
 8016492:	d316      	bcc.n	80164c2 <__multiply+0x74>
 8016494:	f104 0214 	add.w	r2, r4, #20
 8016498:	f108 0114 	add.w	r1, r8, #20
 801649c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80164a0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80164a4:	9300      	str	r3, [sp, #0]
 80164a6:	9b00      	ldr	r3, [sp, #0]
 80164a8:	9201      	str	r2, [sp, #4]
 80164aa:	4293      	cmp	r3, r2
 80164ac:	d80c      	bhi.n	80164c8 <__multiply+0x7a>
 80164ae:	2e00      	cmp	r6, #0
 80164b0:	dd03      	ble.n	80164ba <__multiply+0x6c>
 80164b2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d05d      	beq.n	8016576 <__multiply+0x128>
 80164ba:	6106      	str	r6, [r0, #16]
 80164bc:	b003      	add	sp, #12
 80164be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c2:	f843 2b04 	str.w	r2, [r3], #4
 80164c6:	e7e3      	b.n	8016490 <__multiply+0x42>
 80164c8:	f8b2 b000 	ldrh.w	fp, [r2]
 80164cc:	f1bb 0f00 	cmp.w	fp, #0
 80164d0:	d023      	beq.n	801651a <__multiply+0xcc>
 80164d2:	4689      	mov	r9, r1
 80164d4:	46ac      	mov	ip, r5
 80164d6:	f04f 0800 	mov.w	r8, #0
 80164da:	f859 4b04 	ldr.w	r4, [r9], #4
 80164de:	f8dc a000 	ldr.w	sl, [ip]
 80164e2:	b2a3      	uxth	r3, r4
 80164e4:	fa1f fa8a 	uxth.w	sl, sl
 80164e8:	fb0b a303 	mla	r3, fp, r3, sl
 80164ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80164f0:	f8dc 4000 	ldr.w	r4, [ip]
 80164f4:	4443      	add	r3, r8
 80164f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80164fa:	fb0b 840a 	mla	r4, fp, sl, r8
 80164fe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016502:	46e2      	mov	sl, ip
 8016504:	b29b      	uxth	r3, r3
 8016506:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801650a:	454f      	cmp	r7, r9
 801650c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016510:	f84a 3b04 	str.w	r3, [sl], #4
 8016514:	d82b      	bhi.n	801656e <__multiply+0x120>
 8016516:	f8cc 8004 	str.w	r8, [ip, #4]
 801651a:	9b01      	ldr	r3, [sp, #4]
 801651c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016520:	3204      	adds	r2, #4
 8016522:	f1ba 0f00 	cmp.w	sl, #0
 8016526:	d020      	beq.n	801656a <__multiply+0x11c>
 8016528:	682b      	ldr	r3, [r5, #0]
 801652a:	4689      	mov	r9, r1
 801652c:	46a8      	mov	r8, r5
 801652e:	f04f 0b00 	mov.w	fp, #0
 8016532:	f8b9 c000 	ldrh.w	ip, [r9]
 8016536:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801653a:	fb0a 440c 	mla	r4, sl, ip, r4
 801653e:	445c      	add	r4, fp
 8016540:	46c4      	mov	ip, r8
 8016542:	b29b      	uxth	r3, r3
 8016544:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016548:	f84c 3b04 	str.w	r3, [ip], #4
 801654c:	f859 3b04 	ldr.w	r3, [r9], #4
 8016550:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016554:	0c1b      	lsrs	r3, r3, #16
 8016556:	fb0a b303 	mla	r3, sl, r3, fp
 801655a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801655e:	454f      	cmp	r7, r9
 8016560:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016564:	d805      	bhi.n	8016572 <__multiply+0x124>
 8016566:	f8c8 3004 	str.w	r3, [r8, #4]
 801656a:	3504      	adds	r5, #4
 801656c:	e79b      	b.n	80164a6 <__multiply+0x58>
 801656e:	46d4      	mov	ip, sl
 8016570:	e7b3      	b.n	80164da <__multiply+0x8c>
 8016572:	46e0      	mov	r8, ip
 8016574:	e7dd      	b.n	8016532 <__multiply+0xe4>
 8016576:	3e01      	subs	r6, #1
 8016578:	e799      	b.n	80164ae <__multiply+0x60>
	...

0801657c <__pow5mult>:
 801657c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016580:	4615      	mov	r5, r2
 8016582:	f012 0203 	ands.w	r2, r2, #3
 8016586:	4606      	mov	r6, r0
 8016588:	460f      	mov	r7, r1
 801658a:	d007      	beq.n	801659c <__pow5mult+0x20>
 801658c:	3a01      	subs	r2, #1
 801658e:	4c21      	ldr	r4, [pc, #132]	; (8016614 <__pow5mult+0x98>)
 8016590:	2300      	movs	r3, #0
 8016592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016596:	f7ff fec8 	bl	801632a <__multadd>
 801659a:	4607      	mov	r7, r0
 801659c:	10ad      	asrs	r5, r5, #2
 801659e:	d035      	beq.n	801660c <__pow5mult+0x90>
 80165a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80165a2:	b93c      	cbnz	r4, 80165b4 <__pow5mult+0x38>
 80165a4:	2010      	movs	r0, #16
 80165a6:	f7fd fe0b 	bl	80141c0 <malloc>
 80165aa:	6270      	str	r0, [r6, #36]	; 0x24
 80165ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80165b0:	6004      	str	r4, [r0, #0]
 80165b2:	60c4      	str	r4, [r0, #12]
 80165b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80165b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80165bc:	b94c      	cbnz	r4, 80165d2 <__pow5mult+0x56>
 80165be:	f240 2171 	movw	r1, #625	; 0x271
 80165c2:	4630      	mov	r0, r6
 80165c4:	f7ff ff3a 	bl	801643c <__i2b>
 80165c8:	2300      	movs	r3, #0
 80165ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80165ce:	4604      	mov	r4, r0
 80165d0:	6003      	str	r3, [r0, #0]
 80165d2:	f04f 0800 	mov.w	r8, #0
 80165d6:	07eb      	lsls	r3, r5, #31
 80165d8:	d50a      	bpl.n	80165f0 <__pow5mult+0x74>
 80165da:	4639      	mov	r1, r7
 80165dc:	4622      	mov	r2, r4
 80165de:	4630      	mov	r0, r6
 80165e0:	f7ff ff35 	bl	801644e <__multiply>
 80165e4:	4639      	mov	r1, r7
 80165e6:	4681      	mov	r9, r0
 80165e8:	4630      	mov	r0, r6
 80165ea:	f7ff fe87 	bl	80162fc <_Bfree>
 80165ee:	464f      	mov	r7, r9
 80165f0:	106d      	asrs	r5, r5, #1
 80165f2:	d00b      	beq.n	801660c <__pow5mult+0x90>
 80165f4:	6820      	ldr	r0, [r4, #0]
 80165f6:	b938      	cbnz	r0, 8016608 <__pow5mult+0x8c>
 80165f8:	4622      	mov	r2, r4
 80165fa:	4621      	mov	r1, r4
 80165fc:	4630      	mov	r0, r6
 80165fe:	f7ff ff26 	bl	801644e <__multiply>
 8016602:	6020      	str	r0, [r4, #0]
 8016604:	f8c0 8000 	str.w	r8, [r0]
 8016608:	4604      	mov	r4, r0
 801660a:	e7e4      	b.n	80165d6 <__pow5mult+0x5a>
 801660c:	4638      	mov	r0, r7
 801660e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016612:	bf00      	nop
 8016614:	08023420 	.word	0x08023420

08016618 <__lshift>:
 8016618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801661c:	460c      	mov	r4, r1
 801661e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016622:	6923      	ldr	r3, [r4, #16]
 8016624:	6849      	ldr	r1, [r1, #4]
 8016626:	eb0a 0903 	add.w	r9, sl, r3
 801662a:	68a3      	ldr	r3, [r4, #8]
 801662c:	4607      	mov	r7, r0
 801662e:	4616      	mov	r6, r2
 8016630:	f109 0501 	add.w	r5, r9, #1
 8016634:	42ab      	cmp	r3, r5
 8016636:	db32      	blt.n	801669e <__lshift+0x86>
 8016638:	4638      	mov	r0, r7
 801663a:	f7ff fe2b 	bl	8016294 <_Balloc>
 801663e:	2300      	movs	r3, #0
 8016640:	4680      	mov	r8, r0
 8016642:	f100 0114 	add.w	r1, r0, #20
 8016646:	461a      	mov	r2, r3
 8016648:	4553      	cmp	r3, sl
 801664a:	db2b      	blt.n	80166a4 <__lshift+0x8c>
 801664c:	6920      	ldr	r0, [r4, #16]
 801664e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016652:	f104 0314 	add.w	r3, r4, #20
 8016656:	f016 021f 	ands.w	r2, r6, #31
 801665a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801665e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016662:	d025      	beq.n	80166b0 <__lshift+0x98>
 8016664:	f1c2 0e20 	rsb	lr, r2, #32
 8016668:	2000      	movs	r0, #0
 801666a:	681e      	ldr	r6, [r3, #0]
 801666c:	468a      	mov	sl, r1
 801666e:	4096      	lsls	r6, r2
 8016670:	4330      	orrs	r0, r6
 8016672:	f84a 0b04 	str.w	r0, [sl], #4
 8016676:	f853 0b04 	ldr.w	r0, [r3], #4
 801667a:	459c      	cmp	ip, r3
 801667c:	fa20 f00e 	lsr.w	r0, r0, lr
 8016680:	d814      	bhi.n	80166ac <__lshift+0x94>
 8016682:	6048      	str	r0, [r1, #4]
 8016684:	b108      	cbz	r0, 801668a <__lshift+0x72>
 8016686:	f109 0502 	add.w	r5, r9, #2
 801668a:	3d01      	subs	r5, #1
 801668c:	4638      	mov	r0, r7
 801668e:	f8c8 5010 	str.w	r5, [r8, #16]
 8016692:	4621      	mov	r1, r4
 8016694:	f7ff fe32 	bl	80162fc <_Bfree>
 8016698:	4640      	mov	r0, r8
 801669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801669e:	3101      	adds	r1, #1
 80166a0:	005b      	lsls	r3, r3, #1
 80166a2:	e7c7      	b.n	8016634 <__lshift+0x1c>
 80166a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80166a8:	3301      	adds	r3, #1
 80166aa:	e7cd      	b.n	8016648 <__lshift+0x30>
 80166ac:	4651      	mov	r1, sl
 80166ae:	e7dc      	b.n	801666a <__lshift+0x52>
 80166b0:	3904      	subs	r1, #4
 80166b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80166b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80166ba:	459c      	cmp	ip, r3
 80166bc:	d8f9      	bhi.n	80166b2 <__lshift+0x9a>
 80166be:	e7e4      	b.n	801668a <__lshift+0x72>

080166c0 <__mcmp>:
 80166c0:	6903      	ldr	r3, [r0, #16]
 80166c2:	690a      	ldr	r2, [r1, #16]
 80166c4:	1a9b      	subs	r3, r3, r2
 80166c6:	b530      	push	{r4, r5, lr}
 80166c8:	d10c      	bne.n	80166e4 <__mcmp+0x24>
 80166ca:	0092      	lsls	r2, r2, #2
 80166cc:	3014      	adds	r0, #20
 80166ce:	3114      	adds	r1, #20
 80166d0:	1884      	adds	r4, r0, r2
 80166d2:	4411      	add	r1, r2
 80166d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80166d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80166dc:	4295      	cmp	r5, r2
 80166de:	d003      	beq.n	80166e8 <__mcmp+0x28>
 80166e0:	d305      	bcc.n	80166ee <__mcmp+0x2e>
 80166e2:	2301      	movs	r3, #1
 80166e4:	4618      	mov	r0, r3
 80166e6:	bd30      	pop	{r4, r5, pc}
 80166e8:	42a0      	cmp	r0, r4
 80166ea:	d3f3      	bcc.n	80166d4 <__mcmp+0x14>
 80166ec:	e7fa      	b.n	80166e4 <__mcmp+0x24>
 80166ee:	f04f 33ff 	mov.w	r3, #4294967295
 80166f2:	e7f7      	b.n	80166e4 <__mcmp+0x24>

080166f4 <__mdiff>:
 80166f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166f8:	460d      	mov	r5, r1
 80166fa:	4607      	mov	r7, r0
 80166fc:	4611      	mov	r1, r2
 80166fe:	4628      	mov	r0, r5
 8016700:	4614      	mov	r4, r2
 8016702:	f7ff ffdd 	bl	80166c0 <__mcmp>
 8016706:	1e06      	subs	r6, r0, #0
 8016708:	d108      	bne.n	801671c <__mdiff+0x28>
 801670a:	4631      	mov	r1, r6
 801670c:	4638      	mov	r0, r7
 801670e:	f7ff fdc1 	bl	8016294 <_Balloc>
 8016712:	2301      	movs	r3, #1
 8016714:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801671c:	bfa4      	itt	ge
 801671e:	4623      	movge	r3, r4
 8016720:	462c      	movge	r4, r5
 8016722:	4638      	mov	r0, r7
 8016724:	6861      	ldr	r1, [r4, #4]
 8016726:	bfa6      	itte	ge
 8016728:	461d      	movge	r5, r3
 801672a:	2600      	movge	r6, #0
 801672c:	2601      	movlt	r6, #1
 801672e:	f7ff fdb1 	bl	8016294 <_Balloc>
 8016732:	692b      	ldr	r3, [r5, #16]
 8016734:	60c6      	str	r6, [r0, #12]
 8016736:	6926      	ldr	r6, [r4, #16]
 8016738:	f105 0914 	add.w	r9, r5, #20
 801673c:	f104 0214 	add.w	r2, r4, #20
 8016740:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016744:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016748:	f100 0514 	add.w	r5, r0, #20
 801674c:	f04f 0e00 	mov.w	lr, #0
 8016750:	f852 ab04 	ldr.w	sl, [r2], #4
 8016754:	f859 4b04 	ldr.w	r4, [r9], #4
 8016758:	fa1e f18a 	uxtah	r1, lr, sl
 801675c:	b2a3      	uxth	r3, r4
 801675e:	1ac9      	subs	r1, r1, r3
 8016760:	0c23      	lsrs	r3, r4, #16
 8016762:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016766:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801676a:	b289      	uxth	r1, r1
 801676c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016770:	45c8      	cmp	r8, r9
 8016772:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016776:	4694      	mov	ip, r2
 8016778:	f845 3b04 	str.w	r3, [r5], #4
 801677c:	d8e8      	bhi.n	8016750 <__mdiff+0x5c>
 801677e:	45bc      	cmp	ip, r7
 8016780:	d304      	bcc.n	801678c <__mdiff+0x98>
 8016782:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016786:	b183      	cbz	r3, 80167aa <__mdiff+0xb6>
 8016788:	6106      	str	r6, [r0, #16]
 801678a:	e7c5      	b.n	8016718 <__mdiff+0x24>
 801678c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016790:	fa1e f381 	uxtah	r3, lr, r1
 8016794:	141a      	asrs	r2, r3, #16
 8016796:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801679a:	b29b      	uxth	r3, r3
 801679c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80167a4:	f845 3b04 	str.w	r3, [r5], #4
 80167a8:	e7e9      	b.n	801677e <__mdiff+0x8a>
 80167aa:	3e01      	subs	r6, #1
 80167ac:	e7e9      	b.n	8016782 <__mdiff+0x8e>

080167ae <__d2b>:
 80167ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80167b2:	460e      	mov	r6, r1
 80167b4:	2101      	movs	r1, #1
 80167b6:	ec59 8b10 	vmov	r8, r9, d0
 80167ba:	4615      	mov	r5, r2
 80167bc:	f7ff fd6a 	bl	8016294 <_Balloc>
 80167c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80167c4:	4607      	mov	r7, r0
 80167c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80167ca:	bb34      	cbnz	r4, 801681a <__d2b+0x6c>
 80167cc:	9301      	str	r3, [sp, #4]
 80167ce:	f1b8 0300 	subs.w	r3, r8, #0
 80167d2:	d027      	beq.n	8016824 <__d2b+0x76>
 80167d4:	a802      	add	r0, sp, #8
 80167d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80167da:	f7ff fe00 	bl	80163de <__lo0bits>
 80167de:	9900      	ldr	r1, [sp, #0]
 80167e0:	b1f0      	cbz	r0, 8016820 <__d2b+0x72>
 80167e2:	9a01      	ldr	r2, [sp, #4]
 80167e4:	f1c0 0320 	rsb	r3, r0, #32
 80167e8:	fa02 f303 	lsl.w	r3, r2, r3
 80167ec:	430b      	orrs	r3, r1
 80167ee:	40c2      	lsrs	r2, r0
 80167f0:	617b      	str	r3, [r7, #20]
 80167f2:	9201      	str	r2, [sp, #4]
 80167f4:	9b01      	ldr	r3, [sp, #4]
 80167f6:	61bb      	str	r3, [r7, #24]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	bf14      	ite	ne
 80167fc:	2102      	movne	r1, #2
 80167fe:	2101      	moveq	r1, #1
 8016800:	6139      	str	r1, [r7, #16]
 8016802:	b1c4      	cbz	r4, 8016836 <__d2b+0x88>
 8016804:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016808:	4404      	add	r4, r0
 801680a:	6034      	str	r4, [r6, #0]
 801680c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016810:	6028      	str	r0, [r5, #0]
 8016812:	4638      	mov	r0, r7
 8016814:	b003      	add	sp, #12
 8016816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801681a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801681e:	e7d5      	b.n	80167cc <__d2b+0x1e>
 8016820:	6179      	str	r1, [r7, #20]
 8016822:	e7e7      	b.n	80167f4 <__d2b+0x46>
 8016824:	a801      	add	r0, sp, #4
 8016826:	f7ff fdda 	bl	80163de <__lo0bits>
 801682a:	9b01      	ldr	r3, [sp, #4]
 801682c:	617b      	str	r3, [r7, #20]
 801682e:	2101      	movs	r1, #1
 8016830:	6139      	str	r1, [r7, #16]
 8016832:	3020      	adds	r0, #32
 8016834:	e7e5      	b.n	8016802 <__d2b+0x54>
 8016836:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801683a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801683e:	6030      	str	r0, [r6, #0]
 8016840:	6918      	ldr	r0, [r3, #16]
 8016842:	f7ff fdad 	bl	80163a0 <__hi0bits>
 8016846:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801684a:	e7e1      	b.n	8016810 <__d2b+0x62>

0801684c <_realloc_r>:
 801684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801684e:	4607      	mov	r7, r0
 8016850:	4614      	mov	r4, r2
 8016852:	460e      	mov	r6, r1
 8016854:	b921      	cbnz	r1, 8016860 <_realloc_r+0x14>
 8016856:	4611      	mov	r1, r2
 8016858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801685c:	f7fd bd48 	b.w	80142f0 <_malloc_r>
 8016860:	b922      	cbnz	r2, 801686c <_realloc_r+0x20>
 8016862:	f7fd fcf7 	bl	8014254 <_free_r>
 8016866:	4625      	mov	r5, r4
 8016868:	4628      	mov	r0, r5
 801686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801686c:	f000 fa12 	bl	8016c94 <_malloc_usable_size_r>
 8016870:	42a0      	cmp	r0, r4
 8016872:	d20f      	bcs.n	8016894 <_realloc_r+0x48>
 8016874:	4621      	mov	r1, r4
 8016876:	4638      	mov	r0, r7
 8016878:	f7fd fd3a 	bl	80142f0 <_malloc_r>
 801687c:	4605      	mov	r5, r0
 801687e:	2800      	cmp	r0, #0
 8016880:	d0f2      	beq.n	8016868 <_realloc_r+0x1c>
 8016882:	4631      	mov	r1, r6
 8016884:	4622      	mov	r2, r4
 8016886:	f7fd fcab 	bl	80141e0 <memcpy>
 801688a:	4631      	mov	r1, r6
 801688c:	4638      	mov	r0, r7
 801688e:	f7fd fce1 	bl	8014254 <_free_r>
 8016892:	e7e9      	b.n	8016868 <_realloc_r+0x1c>
 8016894:	4635      	mov	r5, r6
 8016896:	e7e7      	b.n	8016868 <_realloc_r+0x1c>

08016898 <__ssputs_r>:
 8016898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801689c:	688e      	ldr	r6, [r1, #8]
 801689e:	429e      	cmp	r6, r3
 80168a0:	4682      	mov	sl, r0
 80168a2:	460c      	mov	r4, r1
 80168a4:	4690      	mov	r8, r2
 80168a6:	4699      	mov	r9, r3
 80168a8:	d837      	bhi.n	801691a <__ssputs_r+0x82>
 80168aa:	898a      	ldrh	r2, [r1, #12]
 80168ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80168b0:	d031      	beq.n	8016916 <__ssputs_r+0x7e>
 80168b2:	6825      	ldr	r5, [r4, #0]
 80168b4:	6909      	ldr	r1, [r1, #16]
 80168b6:	1a6f      	subs	r7, r5, r1
 80168b8:	6965      	ldr	r5, [r4, #20]
 80168ba:	2302      	movs	r3, #2
 80168bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80168c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80168c4:	f109 0301 	add.w	r3, r9, #1
 80168c8:	443b      	add	r3, r7
 80168ca:	429d      	cmp	r5, r3
 80168cc:	bf38      	it	cc
 80168ce:	461d      	movcc	r5, r3
 80168d0:	0553      	lsls	r3, r2, #21
 80168d2:	d530      	bpl.n	8016936 <__ssputs_r+0x9e>
 80168d4:	4629      	mov	r1, r5
 80168d6:	f7fd fd0b 	bl	80142f0 <_malloc_r>
 80168da:	4606      	mov	r6, r0
 80168dc:	b950      	cbnz	r0, 80168f4 <__ssputs_r+0x5c>
 80168de:	230c      	movs	r3, #12
 80168e0:	f8ca 3000 	str.w	r3, [sl]
 80168e4:	89a3      	ldrh	r3, [r4, #12]
 80168e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80168ea:	81a3      	strh	r3, [r4, #12]
 80168ec:	f04f 30ff 	mov.w	r0, #4294967295
 80168f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168f4:	463a      	mov	r2, r7
 80168f6:	6921      	ldr	r1, [r4, #16]
 80168f8:	f7fd fc72 	bl	80141e0 <memcpy>
 80168fc:	89a3      	ldrh	r3, [r4, #12]
 80168fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016906:	81a3      	strh	r3, [r4, #12]
 8016908:	6126      	str	r6, [r4, #16]
 801690a:	6165      	str	r5, [r4, #20]
 801690c:	443e      	add	r6, r7
 801690e:	1bed      	subs	r5, r5, r7
 8016910:	6026      	str	r6, [r4, #0]
 8016912:	60a5      	str	r5, [r4, #8]
 8016914:	464e      	mov	r6, r9
 8016916:	454e      	cmp	r6, r9
 8016918:	d900      	bls.n	801691c <__ssputs_r+0x84>
 801691a:	464e      	mov	r6, r9
 801691c:	4632      	mov	r2, r6
 801691e:	4641      	mov	r1, r8
 8016920:	6820      	ldr	r0, [r4, #0]
 8016922:	f7fd fc68 	bl	80141f6 <memmove>
 8016926:	68a3      	ldr	r3, [r4, #8]
 8016928:	1b9b      	subs	r3, r3, r6
 801692a:	60a3      	str	r3, [r4, #8]
 801692c:	6823      	ldr	r3, [r4, #0]
 801692e:	441e      	add	r6, r3
 8016930:	6026      	str	r6, [r4, #0]
 8016932:	2000      	movs	r0, #0
 8016934:	e7dc      	b.n	80168f0 <__ssputs_r+0x58>
 8016936:	462a      	mov	r2, r5
 8016938:	f7ff ff88 	bl	801684c <_realloc_r>
 801693c:	4606      	mov	r6, r0
 801693e:	2800      	cmp	r0, #0
 8016940:	d1e2      	bne.n	8016908 <__ssputs_r+0x70>
 8016942:	6921      	ldr	r1, [r4, #16]
 8016944:	4650      	mov	r0, sl
 8016946:	f7fd fc85 	bl	8014254 <_free_r>
 801694a:	e7c8      	b.n	80168de <__ssputs_r+0x46>

0801694c <_svfiprintf_r>:
 801694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016950:	461d      	mov	r5, r3
 8016952:	898b      	ldrh	r3, [r1, #12]
 8016954:	061f      	lsls	r7, r3, #24
 8016956:	b09d      	sub	sp, #116	; 0x74
 8016958:	4680      	mov	r8, r0
 801695a:	460c      	mov	r4, r1
 801695c:	4616      	mov	r6, r2
 801695e:	d50f      	bpl.n	8016980 <_svfiprintf_r+0x34>
 8016960:	690b      	ldr	r3, [r1, #16]
 8016962:	b96b      	cbnz	r3, 8016980 <_svfiprintf_r+0x34>
 8016964:	2140      	movs	r1, #64	; 0x40
 8016966:	f7fd fcc3 	bl	80142f0 <_malloc_r>
 801696a:	6020      	str	r0, [r4, #0]
 801696c:	6120      	str	r0, [r4, #16]
 801696e:	b928      	cbnz	r0, 801697c <_svfiprintf_r+0x30>
 8016970:	230c      	movs	r3, #12
 8016972:	f8c8 3000 	str.w	r3, [r8]
 8016976:	f04f 30ff 	mov.w	r0, #4294967295
 801697a:	e0c8      	b.n	8016b0e <_svfiprintf_r+0x1c2>
 801697c:	2340      	movs	r3, #64	; 0x40
 801697e:	6163      	str	r3, [r4, #20]
 8016980:	2300      	movs	r3, #0
 8016982:	9309      	str	r3, [sp, #36]	; 0x24
 8016984:	2320      	movs	r3, #32
 8016986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801698a:	2330      	movs	r3, #48	; 0x30
 801698c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016990:	9503      	str	r5, [sp, #12]
 8016992:	f04f 0b01 	mov.w	fp, #1
 8016996:	4637      	mov	r7, r6
 8016998:	463d      	mov	r5, r7
 801699a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801699e:	b10b      	cbz	r3, 80169a4 <_svfiprintf_r+0x58>
 80169a0:	2b25      	cmp	r3, #37	; 0x25
 80169a2:	d13e      	bne.n	8016a22 <_svfiprintf_r+0xd6>
 80169a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80169a8:	d00b      	beq.n	80169c2 <_svfiprintf_r+0x76>
 80169aa:	4653      	mov	r3, sl
 80169ac:	4632      	mov	r2, r6
 80169ae:	4621      	mov	r1, r4
 80169b0:	4640      	mov	r0, r8
 80169b2:	f7ff ff71 	bl	8016898 <__ssputs_r>
 80169b6:	3001      	adds	r0, #1
 80169b8:	f000 80a4 	beq.w	8016b04 <_svfiprintf_r+0x1b8>
 80169bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169be:	4453      	add	r3, sl
 80169c0:	9309      	str	r3, [sp, #36]	; 0x24
 80169c2:	783b      	ldrb	r3, [r7, #0]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	f000 809d 	beq.w	8016b04 <_svfiprintf_r+0x1b8>
 80169ca:	2300      	movs	r3, #0
 80169cc:	f04f 32ff 	mov.w	r2, #4294967295
 80169d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169d4:	9304      	str	r3, [sp, #16]
 80169d6:	9307      	str	r3, [sp, #28]
 80169d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80169dc:	931a      	str	r3, [sp, #104]	; 0x68
 80169de:	462f      	mov	r7, r5
 80169e0:	2205      	movs	r2, #5
 80169e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80169e6:	4850      	ldr	r0, [pc, #320]	; (8016b28 <_svfiprintf_r+0x1dc>)
 80169e8:	f7e9 fc0a 	bl	8000200 <memchr>
 80169ec:	9b04      	ldr	r3, [sp, #16]
 80169ee:	b9d0      	cbnz	r0, 8016a26 <_svfiprintf_r+0xda>
 80169f0:	06d9      	lsls	r1, r3, #27
 80169f2:	bf44      	itt	mi
 80169f4:	2220      	movmi	r2, #32
 80169f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80169fa:	071a      	lsls	r2, r3, #28
 80169fc:	bf44      	itt	mi
 80169fe:	222b      	movmi	r2, #43	; 0x2b
 8016a00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a04:	782a      	ldrb	r2, [r5, #0]
 8016a06:	2a2a      	cmp	r2, #42	; 0x2a
 8016a08:	d015      	beq.n	8016a36 <_svfiprintf_r+0xea>
 8016a0a:	9a07      	ldr	r2, [sp, #28]
 8016a0c:	462f      	mov	r7, r5
 8016a0e:	2000      	movs	r0, #0
 8016a10:	250a      	movs	r5, #10
 8016a12:	4639      	mov	r1, r7
 8016a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a18:	3b30      	subs	r3, #48	; 0x30
 8016a1a:	2b09      	cmp	r3, #9
 8016a1c:	d94d      	bls.n	8016aba <_svfiprintf_r+0x16e>
 8016a1e:	b1b8      	cbz	r0, 8016a50 <_svfiprintf_r+0x104>
 8016a20:	e00f      	b.n	8016a42 <_svfiprintf_r+0xf6>
 8016a22:	462f      	mov	r7, r5
 8016a24:	e7b8      	b.n	8016998 <_svfiprintf_r+0x4c>
 8016a26:	4a40      	ldr	r2, [pc, #256]	; (8016b28 <_svfiprintf_r+0x1dc>)
 8016a28:	1a80      	subs	r0, r0, r2
 8016a2a:	fa0b f000 	lsl.w	r0, fp, r0
 8016a2e:	4318      	orrs	r0, r3
 8016a30:	9004      	str	r0, [sp, #16]
 8016a32:	463d      	mov	r5, r7
 8016a34:	e7d3      	b.n	80169de <_svfiprintf_r+0x92>
 8016a36:	9a03      	ldr	r2, [sp, #12]
 8016a38:	1d11      	adds	r1, r2, #4
 8016a3a:	6812      	ldr	r2, [r2, #0]
 8016a3c:	9103      	str	r1, [sp, #12]
 8016a3e:	2a00      	cmp	r2, #0
 8016a40:	db01      	blt.n	8016a46 <_svfiprintf_r+0xfa>
 8016a42:	9207      	str	r2, [sp, #28]
 8016a44:	e004      	b.n	8016a50 <_svfiprintf_r+0x104>
 8016a46:	4252      	negs	r2, r2
 8016a48:	f043 0302 	orr.w	r3, r3, #2
 8016a4c:	9207      	str	r2, [sp, #28]
 8016a4e:	9304      	str	r3, [sp, #16]
 8016a50:	783b      	ldrb	r3, [r7, #0]
 8016a52:	2b2e      	cmp	r3, #46	; 0x2e
 8016a54:	d10c      	bne.n	8016a70 <_svfiprintf_r+0x124>
 8016a56:	787b      	ldrb	r3, [r7, #1]
 8016a58:	2b2a      	cmp	r3, #42	; 0x2a
 8016a5a:	d133      	bne.n	8016ac4 <_svfiprintf_r+0x178>
 8016a5c:	9b03      	ldr	r3, [sp, #12]
 8016a5e:	1d1a      	adds	r2, r3, #4
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	9203      	str	r2, [sp, #12]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	bfb8      	it	lt
 8016a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8016a6c:	3702      	adds	r7, #2
 8016a6e:	9305      	str	r3, [sp, #20]
 8016a70:	4d2e      	ldr	r5, [pc, #184]	; (8016b2c <_svfiprintf_r+0x1e0>)
 8016a72:	7839      	ldrb	r1, [r7, #0]
 8016a74:	2203      	movs	r2, #3
 8016a76:	4628      	mov	r0, r5
 8016a78:	f7e9 fbc2 	bl	8000200 <memchr>
 8016a7c:	b138      	cbz	r0, 8016a8e <_svfiprintf_r+0x142>
 8016a7e:	2340      	movs	r3, #64	; 0x40
 8016a80:	1b40      	subs	r0, r0, r5
 8016a82:	fa03 f000 	lsl.w	r0, r3, r0
 8016a86:	9b04      	ldr	r3, [sp, #16]
 8016a88:	4303      	orrs	r3, r0
 8016a8a:	3701      	adds	r7, #1
 8016a8c:	9304      	str	r3, [sp, #16]
 8016a8e:	7839      	ldrb	r1, [r7, #0]
 8016a90:	4827      	ldr	r0, [pc, #156]	; (8016b30 <_svfiprintf_r+0x1e4>)
 8016a92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016a96:	2206      	movs	r2, #6
 8016a98:	1c7e      	adds	r6, r7, #1
 8016a9a:	f7e9 fbb1 	bl	8000200 <memchr>
 8016a9e:	2800      	cmp	r0, #0
 8016aa0:	d038      	beq.n	8016b14 <_svfiprintf_r+0x1c8>
 8016aa2:	4b24      	ldr	r3, [pc, #144]	; (8016b34 <_svfiprintf_r+0x1e8>)
 8016aa4:	bb13      	cbnz	r3, 8016aec <_svfiprintf_r+0x1a0>
 8016aa6:	9b03      	ldr	r3, [sp, #12]
 8016aa8:	3307      	adds	r3, #7
 8016aaa:	f023 0307 	bic.w	r3, r3, #7
 8016aae:	3308      	adds	r3, #8
 8016ab0:	9303      	str	r3, [sp, #12]
 8016ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ab4:	444b      	add	r3, r9
 8016ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ab8:	e76d      	b.n	8016996 <_svfiprintf_r+0x4a>
 8016aba:	fb05 3202 	mla	r2, r5, r2, r3
 8016abe:	2001      	movs	r0, #1
 8016ac0:	460f      	mov	r7, r1
 8016ac2:	e7a6      	b.n	8016a12 <_svfiprintf_r+0xc6>
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	3701      	adds	r7, #1
 8016ac8:	9305      	str	r3, [sp, #20]
 8016aca:	4619      	mov	r1, r3
 8016acc:	250a      	movs	r5, #10
 8016ace:	4638      	mov	r0, r7
 8016ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ad4:	3a30      	subs	r2, #48	; 0x30
 8016ad6:	2a09      	cmp	r2, #9
 8016ad8:	d903      	bls.n	8016ae2 <_svfiprintf_r+0x196>
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d0c8      	beq.n	8016a70 <_svfiprintf_r+0x124>
 8016ade:	9105      	str	r1, [sp, #20]
 8016ae0:	e7c6      	b.n	8016a70 <_svfiprintf_r+0x124>
 8016ae2:	fb05 2101 	mla	r1, r5, r1, r2
 8016ae6:	2301      	movs	r3, #1
 8016ae8:	4607      	mov	r7, r0
 8016aea:	e7f0      	b.n	8016ace <_svfiprintf_r+0x182>
 8016aec:	ab03      	add	r3, sp, #12
 8016aee:	9300      	str	r3, [sp, #0]
 8016af0:	4622      	mov	r2, r4
 8016af2:	4b11      	ldr	r3, [pc, #68]	; (8016b38 <_svfiprintf_r+0x1ec>)
 8016af4:	a904      	add	r1, sp, #16
 8016af6:	4640      	mov	r0, r8
 8016af8:	f7fd fe28 	bl	801474c <_printf_float>
 8016afc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016b00:	4681      	mov	r9, r0
 8016b02:	d1d6      	bne.n	8016ab2 <_svfiprintf_r+0x166>
 8016b04:	89a3      	ldrh	r3, [r4, #12]
 8016b06:	065b      	lsls	r3, r3, #25
 8016b08:	f53f af35 	bmi.w	8016976 <_svfiprintf_r+0x2a>
 8016b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b0e:	b01d      	add	sp, #116	; 0x74
 8016b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b14:	ab03      	add	r3, sp, #12
 8016b16:	9300      	str	r3, [sp, #0]
 8016b18:	4622      	mov	r2, r4
 8016b1a:	4b07      	ldr	r3, [pc, #28]	; (8016b38 <_svfiprintf_r+0x1ec>)
 8016b1c:	a904      	add	r1, sp, #16
 8016b1e:	4640      	mov	r0, r8
 8016b20:	f7fe f8ca 	bl	8014cb8 <_printf_i>
 8016b24:	e7ea      	b.n	8016afc <_svfiprintf_r+0x1b0>
 8016b26:	bf00      	nop
 8016b28:	08023278 	.word	0x08023278
 8016b2c:	0802327e 	.word	0x0802327e
 8016b30:	08023282 	.word	0x08023282
 8016b34:	0801474d 	.word	0x0801474d
 8016b38:	08016899 	.word	0x08016899

08016b3c <__sread>:
 8016b3c:	b510      	push	{r4, lr}
 8016b3e:	460c      	mov	r4, r1
 8016b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b44:	f000 f8ae 	bl	8016ca4 <_read_r>
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	bfab      	itete	ge
 8016b4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8016b50:	181b      	addge	r3, r3, r0
 8016b52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016b56:	bfac      	ite	ge
 8016b58:	6563      	strge	r3, [r4, #84]	; 0x54
 8016b5a:	81a3      	strhlt	r3, [r4, #12]
 8016b5c:	bd10      	pop	{r4, pc}

08016b5e <__swrite>:
 8016b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b62:	461f      	mov	r7, r3
 8016b64:	898b      	ldrh	r3, [r1, #12]
 8016b66:	05db      	lsls	r3, r3, #23
 8016b68:	4605      	mov	r5, r0
 8016b6a:	460c      	mov	r4, r1
 8016b6c:	4616      	mov	r6, r2
 8016b6e:	d505      	bpl.n	8016b7c <__swrite+0x1e>
 8016b70:	2302      	movs	r3, #2
 8016b72:	2200      	movs	r2, #0
 8016b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b78:	f000 f868 	bl	8016c4c <_lseek_r>
 8016b7c:	89a3      	ldrh	r3, [r4, #12]
 8016b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016b86:	81a3      	strh	r3, [r4, #12]
 8016b88:	4632      	mov	r2, r6
 8016b8a:	463b      	mov	r3, r7
 8016b8c:	4628      	mov	r0, r5
 8016b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b92:	f000 b817 	b.w	8016bc4 <_write_r>

08016b96 <__sseek>:
 8016b96:	b510      	push	{r4, lr}
 8016b98:	460c      	mov	r4, r1
 8016b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b9e:	f000 f855 	bl	8016c4c <_lseek_r>
 8016ba2:	1c43      	adds	r3, r0, #1
 8016ba4:	89a3      	ldrh	r3, [r4, #12]
 8016ba6:	bf15      	itete	ne
 8016ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8016baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016bb2:	81a3      	strheq	r3, [r4, #12]
 8016bb4:	bf18      	it	ne
 8016bb6:	81a3      	strhne	r3, [r4, #12]
 8016bb8:	bd10      	pop	{r4, pc}

08016bba <__sclose>:
 8016bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bbe:	f000 b813 	b.w	8016be8 <_close_r>
	...

08016bc4 <_write_r>:
 8016bc4:	b538      	push	{r3, r4, r5, lr}
 8016bc6:	4c07      	ldr	r4, [pc, #28]	; (8016be4 <_write_r+0x20>)
 8016bc8:	4605      	mov	r5, r0
 8016bca:	4608      	mov	r0, r1
 8016bcc:	4611      	mov	r1, r2
 8016bce:	2200      	movs	r2, #0
 8016bd0:	6022      	str	r2, [r4, #0]
 8016bd2:	461a      	mov	r2, r3
 8016bd4:	f7f9 fb53 	bl	801027e <_write>
 8016bd8:	1c43      	adds	r3, r0, #1
 8016bda:	d102      	bne.n	8016be2 <_write_r+0x1e>
 8016bdc:	6823      	ldr	r3, [r4, #0]
 8016bde:	b103      	cbz	r3, 8016be2 <_write_r+0x1e>
 8016be0:	602b      	str	r3, [r5, #0]
 8016be2:	bd38      	pop	{r3, r4, r5, pc}
 8016be4:	2000079c 	.word	0x2000079c

08016be8 <_close_r>:
 8016be8:	b538      	push	{r3, r4, r5, lr}
 8016bea:	4c06      	ldr	r4, [pc, #24]	; (8016c04 <_close_r+0x1c>)
 8016bec:	2300      	movs	r3, #0
 8016bee:	4605      	mov	r5, r0
 8016bf0:	4608      	mov	r0, r1
 8016bf2:	6023      	str	r3, [r4, #0]
 8016bf4:	f7f9 fb5f 	bl	80102b6 <_close>
 8016bf8:	1c43      	adds	r3, r0, #1
 8016bfa:	d102      	bne.n	8016c02 <_close_r+0x1a>
 8016bfc:	6823      	ldr	r3, [r4, #0]
 8016bfe:	b103      	cbz	r3, 8016c02 <_close_r+0x1a>
 8016c00:	602b      	str	r3, [r5, #0]
 8016c02:	bd38      	pop	{r3, r4, r5, pc}
 8016c04:	2000079c 	.word	0x2000079c

08016c08 <_fstat_r>:
 8016c08:	b538      	push	{r3, r4, r5, lr}
 8016c0a:	4c07      	ldr	r4, [pc, #28]	; (8016c28 <_fstat_r+0x20>)
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	4605      	mov	r5, r0
 8016c10:	4608      	mov	r0, r1
 8016c12:	4611      	mov	r1, r2
 8016c14:	6023      	str	r3, [r4, #0]
 8016c16:	f7f9 fb5a 	bl	80102ce <_fstat>
 8016c1a:	1c43      	adds	r3, r0, #1
 8016c1c:	d102      	bne.n	8016c24 <_fstat_r+0x1c>
 8016c1e:	6823      	ldr	r3, [r4, #0]
 8016c20:	b103      	cbz	r3, 8016c24 <_fstat_r+0x1c>
 8016c22:	602b      	str	r3, [r5, #0]
 8016c24:	bd38      	pop	{r3, r4, r5, pc}
 8016c26:	bf00      	nop
 8016c28:	2000079c 	.word	0x2000079c

08016c2c <_isatty_r>:
 8016c2c:	b538      	push	{r3, r4, r5, lr}
 8016c2e:	4c06      	ldr	r4, [pc, #24]	; (8016c48 <_isatty_r+0x1c>)
 8016c30:	2300      	movs	r3, #0
 8016c32:	4605      	mov	r5, r0
 8016c34:	4608      	mov	r0, r1
 8016c36:	6023      	str	r3, [r4, #0]
 8016c38:	f7f9 fb59 	bl	80102ee <_isatty>
 8016c3c:	1c43      	adds	r3, r0, #1
 8016c3e:	d102      	bne.n	8016c46 <_isatty_r+0x1a>
 8016c40:	6823      	ldr	r3, [r4, #0]
 8016c42:	b103      	cbz	r3, 8016c46 <_isatty_r+0x1a>
 8016c44:	602b      	str	r3, [r5, #0]
 8016c46:	bd38      	pop	{r3, r4, r5, pc}
 8016c48:	2000079c 	.word	0x2000079c

08016c4c <_lseek_r>:
 8016c4c:	b538      	push	{r3, r4, r5, lr}
 8016c4e:	4c07      	ldr	r4, [pc, #28]	; (8016c6c <_lseek_r+0x20>)
 8016c50:	4605      	mov	r5, r0
 8016c52:	4608      	mov	r0, r1
 8016c54:	4611      	mov	r1, r2
 8016c56:	2200      	movs	r2, #0
 8016c58:	6022      	str	r2, [r4, #0]
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	f7f9 fb52 	bl	8010304 <_lseek>
 8016c60:	1c43      	adds	r3, r0, #1
 8016c62:	d102      	bne.n	8016c6a <_lseek_r+0x1e>
 8016c64:	6823      	ldr	r3, [r4, #0]
 8016c66:	b103      	cbz	r3, 8016c6a <_lseek_r+0x1e>
 8016c68:	602b      	str	r3, [r5, #0]
 8016c6a:	bd38      	pop	{r3, r4, r5, pc}
 8016c6c:	2000079c 	.word	0x2000079c

08016c70 <__ascii_mbtowc>:
 8016c70:	b082      	sub	sp, #8
 8016c72:	b901      	cbnz	r1, 8016c76 <__ascii_mbtowc+0x6>
 8016c74:	a901      	add	r1, sp, #4
 8016c76:	b142      	cbz	r2, 8016c8a <__ascii_mbtowc+0x1a>
 8016c78:	b14b      	cbz	r3, 8016c8e <__ascii_mbtowc+0x1e>
 8016c7a:	7813      	ldrb	r3, [r2, #0]
 8016c7c:	600b      	str	r3, [r1, #0]
 8016c7e:	7812      	ldrb	r2, [r2, #0]
 8016c80:	1c10      	adds	r0, r2, #0
 8016c82:	bf18      	it	ne
 8016c84:	2001      	movne	r0, #1
 8016c86:	b002      	add	sp, #8
 8016c88:	4770      	bx	lr
 8016c8a:	4610      	mov	r0, r2
 8016c8c:	e7fb      	b.n	8016c86 <__ascii_mbtowc+0x16>
 8016c8e:	f06f 0001 	mvn.w	r0, #1
 8016c92:	e7f8      	b.n	8016c86 <__ascii_mbtowc+0x16>

08016c94 <_malloc_usable_size_r>:
 8016c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c98:	1f18      	subs	r0, r3, #4
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	bfbc      	itt	lt
 8016c9e:	580b      	ldrlt	r3, [r1, r0]
 8016ca0:	18c0      	addlt	r0, r0, r3
 8016ca2:	4770      	bx	lr

08016ca4 <_read_r>:
 8016ca4:	b538      	push	{r3, r4, r5, lr}
 8016ca6:	4c07      	ldr	r4, [pc, #28]	; (8016cc4 <_read_r+0x20>)
 8016ca8:	4605      	mov	r5, r0
 8016caa:	4608      	mov	r0, r1
 8016cac:	4611      	mov	r1, r2
 8016cae:	2200      	movs	r2, #0
 8016cb0:	6022      	str	r2, [r4, #0]
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	f7f9 fac6 	bl	8010244 <_read>
 8016cb8:	1c43      	adds	r3, r0, #1
 8016cba:	d102      	bne.n	8016cc2 <_read_r+0x1e>
 8016cbc:	6823      	ldr	r3, [r4, #0]
 8016cbe:	b103      	cbz	r3, 8016cc2 <_read_r+0x1e>
 8016cc0:	602b      	str	r3, [r5, #0]
 8016cc2:	bd38      	pop	{r3, r4, r5, pc}
 8016cc4:	2000079c 	.word	0x2000079c

08016cc8 <__ascii_wctomb>:
 8016cc8:	b149      	cbz	r1, 8016cde <__ascii_wctomb+0x16>
 8016cca:	2aff      	cmp	r2, #255	; 0xff
 8016ccc:	bf85      	ittet	hi
 8016cce:	238a      	movhi	r3, #138	; 0x8a
 8016cd0:	6003      	strhi	r3, [r0, #0]
 8016cd2:	700a      	strbls	r2, [r1, #0]
 8016cd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8016cd8:	bf98      	it	ls
 8016cda:	2001      	movls	r0, #1
 8016cdc:	4770      	bx	lr
 8016cde:	4608      	mov	r0, r1
 8016ce0:	4770      	bx	lr
	...

08016ce4 <_init>:
 8016ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ce6:	bf00      	nop
 8016ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cea:	bc08      	pop	{r3}
 8016cec:	469e      	mov	lr, r3
 8016cee:	4770      	bx	lr

08016cf0 <_fini>:
 8016cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cf2:	bf00      	nop
 8016cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cf6:	bc08      	pop	{r3}
 8016cf8:	469e      	mov	lr, r3
 8016cfa:	4770      	bx	lr
