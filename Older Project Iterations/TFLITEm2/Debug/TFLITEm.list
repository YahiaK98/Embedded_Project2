
TFLITEm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b9bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b770  0801bb50  0801bb50  0002bb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080272c0  080272c0  000401e8  2**0
                  CONTENTS
  4 .ARM          00000008  080272c0  080272c0  000372c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080272c8  080272c8  000401e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080272c8  080272c8  000372c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080272cc  080272cc  000372cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080272d0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008404  200001e8  080274b8  000401e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200085ec  080274b8  000485ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   001f735d  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000113ad  00000000  00000000  00237575  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00006a30  00000000  00000000  00248928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000066c8  00000000  00000000  0024f358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034592  00000000  00000000  00255a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0004402d  00000000  00000000  00289fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00194bc7  00000000  00000000  002cdfdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00462ba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001f40c  00000000  00000000  00462c24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bb34 	.word	0x0801bb34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0801bb34 	.word	0x0801bb34

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9ac 	b.w	8000fd8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f840 	bl	8000d0c <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff2b 	bl	8000afc <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <__aeabi_d2ulz+0x3c>)
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca1 	bl	8000618 <__aeabi_dmul>
 8000cd6:	f000 f981 	bl	8000fdc <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc22 	bl	8000524 <__aeabi_ui2d>
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <__aeabi_d2ulz+0x40>)
 8000ce4:	f7ff fc98 	bl	8000618 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fada 	bl	80002a8 <__aeabi_dsub>
 8000cf4:	f000 f972 	bl	8000fdc <__aeabi_d2uiz>
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	4310      	orrs	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	bdd0      	pop	{r4, r6, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	3df00000 	.word	0x3df00000
 8000d08:	41f00000 	.word	0x41f00000

08000d0c <__udivmoddi4>:
 8000d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d10:	9e08      	ldr	r6, [sp, #32]
 8000d12:	4604      	mov	r4, r0
 8000d14:	4688      	mov	r8, r1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d14b      	bne.n	8000db2 <__udivmoddi4+0xa6>
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	4615      	mov	r5, r2
 8000d1e:	d967      	bls.n	8000df0 <__udivmoddi4+0xe4>
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	b14a      	cbz	r2, 8000d3a <__udivmoddi4+0x2e>
 8000d26:	f1c2 0720 	rsb	r7, r2, #32
 8000d2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d32:	4095      	lsls	r5, r2
 8000d34:	ea47 0803 	orr.w	r8, r7, r3
 8000d38:	4094      	lsls	r4, r2
 8000d3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3e:	0c23      	lsrs	r3, r4, #16
 8000d40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d44:	fa1f fc85 	uxth.w	ip, r5
 8000d48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d50:	fb07 f10c 	mul.w	r1, r7, ip
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x60>
 8000d58:	18eb      	adds	r3, r5, r3
 8000d5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5e:	f080 811b 	bcs.w	8000f98 <__udivmoddi4+0x28c>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 8118 	bls.w	8000f98 <__udivmoddi4+0x28c>
 8000d68:	3f02      	subs	r7, #2
 8000d6a:	442b      	add	r3, r5
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d80:	45a4      	cmp	ip, r4
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x8c>
 8000d84:	192c      	adds	r4, r5, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x290>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x290>
 8000d94:	3802      	subs	r0, #2
 8000d96:	442c      	add	r4, r5
 8000d98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d9c:	eba4 040c 	sub.w	r4, r4, ip
 8000da0:	2700      	movs	r7, #0
 8000da2:	b11e      	cbz	r6, 8000dac <__udivmoddi4+0xa0>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c6 4300 	strd	r4, r3, [r6]
 8000dac:	4639      	mov	r1, r7
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xbe>
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	f000 80eb 	beq.w	8000f92 <__udivmoddi4+0x286>
 8000dbc:	2700      	movs	r7, #0
 8000dbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	4639      	mov	r1, r7
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f783 	clz	r7, r3
 8000dce:	2f00      	cmp	r7, #0
 8000dd0:	d147      	bne.n	8000e62 <__udivmoddi4+0x156>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd0>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80fa 	bhi.w	8000fd0 <__udivmoddi4+0x2c4>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	4698      	mov	r8, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa0>
 8000dea:	e9c6 4800 	strd	r4, r8, [r6]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa0>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xe8>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 808f 	bne.w	8000f1c <__udivmoddi4+0x210>
 8000dfe:	1b49      	subs	r1, r1, r5
 8000e00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e04:	fa1f f885 	uxth.w	r8, r5
 8000e08:	2701      	movs	r7, #1
 8000e0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb08 f10c 	mul.w	r1, r8, ip
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x124>
 8000e20:	18eb      	adds	r3, r5, r3
 8000e22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x122>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	f200 80cd 	bhi.w	8000fc8 <__udivmoddi4+0x2bc>
 8000e2e:	4684      	mov	ip, r0
 8000e30:	1a59      	subs	r1, r3, r1
 8000e32:	b2a3      	uxth	r3, r4
 8000e34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e40:	fb08 f800 	mul.w	r8, r8, r0
 8000e44:	45a0      	cmp	r8, r4
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0x14c>
 8000e48:	192c      	adds	r4, r5, r4
 8000e4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x14a>
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	f200 80b6 	bhi.w	8000fc2 <__udivmoddi4+0x2b6>
 8000e56:	4618      	mov	r0, r3
 8000e58:	eba4 0408 	sub.w	r4, r4, r8
 8000e5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e60:	e79f      	b.n	8000da2 <__udivmoddi4+0x96>
 8000e62:	f1c7 0c20 	rsb	ip, r7, #32
 8000e66:	40bb      	lsls	r3, r7
 8000e68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e70:	fa01 f407 	lsl.w	r4, r1, r7
 8000e74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e80:	4325      	orrs	r5, r4
 8000e82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e86:	0c2c      	lsrs	r4, r5, #16
 8000e88:	fb08 3319 	mls	r3, r8, r9, r3
 8000e8c:	fa1f fa8e 	uxth.w	sl, lr
 8000e90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e94:	fb09 f40a 	mul.w	r4, r9, sl
 8000e98:	429c      	cmp	r4, r3
 8000e9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ea2:	d90b      	bls.n	8000ebc <__udivmoddi4+0x1b0>
 8000ea4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	f080 8087 	bcs.w	8000fbe <__udivmoddi4+0x2b2>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f240 8084 	bls.w	8000fbe <__udivmoddi4+0x2b2>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4473      	add	r3, lr
 8000ebc:	1b1b      	subs	r3, r3, r4
 8000ebe:	b2ad      	uxth	r5, r5
 8000ec0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ecc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ed0:	45a2      	cmp	sl, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1da>
 8000ed4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000edc:	d26b      	bcs.n	8000fb6 <__udivmoddi4+0x2aa>
 8000ede:	45a2      	cmp	sl, r4
 8000ee0:	d969      	bls.n	8000fb6 <__udivmoddi4+0x2aa>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4474      	add	r4, lr
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	eba4 040a 	sub.w	r4, r4, sl
 8000ef2:	454c      	cmp	r4, r9
 8000ef4:	46c2      	mov	sl, r8
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	d354      	bcc.n	8000fa4 <__udivmoddi4+0x298>
 8000efa:	d051      	beq.n	8000fa0 <__udivmoddi4+0x294>
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d069      	beq.n	8000fd4 <__udivmoddi4+0x2c8>
 8000f00:	ebb1 050a 	subs.w	r5, r1, sl
 8000f04:	eb64 0403 	sbc.w	r4, r4, r3
 8000f08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f0c:	40fd      	lsrs	r5, r7
 8000f0e:	40fc      	lsrs	r4, r7
 8000f10:	ea4c 0505 	orr.w	r5, ip, r5
 8000f14:	e9c6 5400 	strd	r5, r4, [r6]
 8000f18:	2700      	movs	r7, #0
 8000f1a:	e747      	b.n	8000dac <__udivmoddi4+0xa0>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f703 	lsr.w	r7, r0, r3
 8000f24:	4095      	lsls	r5, r2
 8000f26:	fa01 f002 	lsl.w	r0, r1, r2
 8000f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f32:	4338      	orrs	r0, r7
 8000f34:	0c01      	lsrs	r1, r0, #16
 8000f36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f3a:	fa1f f885 	uxth.w	r8, r5
 8000f3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f46:	fb07 f308 	mul.w	r3, r7, r8
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f50:	d907      	bls.n	8000f62 <__udivmoddi4+0x256>
 8000f52:	1869      	adds	r1, r5, r1
 8000f54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f58:	d22f      	bcs.n	8000fba <__udivmoddi4+0x2ae>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d92d      	bls.n	8000fba <__udivmoddi4+0x2ae>
 8000f5e:	3f02      	subs	r7, #2
 8000f60:	4429      	add	r1, r5
 8000f62:	1acb      	subs	r3, r1, r3
 8000f64:	b281      	uxth	r1, r0
 8000f66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb00 f308 	mul.w	r3, r0, r8
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d907      	bls.n	8000f8a <__udivmoddi4+0x27e>
 8000f7a:	1869      	adds	r1, r5, r1
 8000f7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f80:	d217      	bcs.n	8000fb2 <__udivmoddi4+0x2a6>
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d915      	bls.n	8000fb2 <__udivmoddi4+0x2a6>
 8000f86:	3802      	subs	r0, #2
 8000f88:	4429      	add	r1, r5
 8000f8a:	1ac9      	subs	r1, r1, r3
 8000f8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f90:	e73b      	b.n	8000e0a <__udivmoddi4+0xfe>
 8000f92:	4637      	mov	r7, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e709      	b.n	8000dac <__udivmoddi4+0xa0>
 8000f98:	4607      	mov	r7, r0
 8000f9a:	e6e7      	b.n	8000d6c <__udivmoddi4+0x60>
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x8c>
 8000fa0:	4541      	cmp	r1, r8
 8000fa2:	d2ab      	bcs.n	8000efc <__udivmoddi4+0x1f0>
 8000fa4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa8:	eb69 020e 	sbc.w	r2, r9, lr
 8000fac:	3801      	subs	r0, #1
 8000fae:	4613      	mov	r3, r2
 8000fb0:	e7a4      	b.n	8000efc <__udivmoddi4+0x1f0>
 8000fb2:	4660      	mov	r0, ip
 8000fb4:	e7e9      	b.n	8000f8a <__udivmoddi4+0x27e>
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	e795      	b.n	8000ee6 <__udivmoddi4+0x1da>
 8000fba:	4667      	mov	r7, ip
 8000fbc:	e7d1      	b.n	8000f62 <__udivmoddi4+0x256>
 8000fbe:	4681      	mov	r9, r0
 8000fc0:	e77c      	b.n	8000ebc <__udivmoddi4+0x1b0>
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	442c      	add	r4, r5
 8000fc6:	e747      	b.n	8000e58 <__udivmoddi4+0x14c>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	442b      	add	r3, r5
 8000fce:	e72f      	b.n	8000e30 <__udivmoddi4+0x124>
 8000fd0:	4638      	mov	r0, r7
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xda>
 8000fd4:	4637      	mov	r7, r6
 8000fd6:	e6e9      	b.n	8000dac <__udivmoddi4+0xa0>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <__aeabi_d2uiz>:
 8000fdc:	004a      	lsls	r2, r1, #1
 8000fde:	d211      	bcs.n	8001004 <__aeabi_d2uiz+0x28>
 8000fe0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fe4:	d211      	bcs.n	800100a <__aeabi_d2uiz+0x2e>
 8000fe6:	d50d      	bpl.n	8001004 <__aeabi_d2uiz+0x28>
 8000fe8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ff0:	d40e      	bmi.n	8001010 <__aeabi_d2uiz+0x34>
 8000ff2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ffe:	fa23 f002 	lsr.w	r0, r3, r2
 8001002:	4770      	bx	lr
 8001004:	f04f 0000 	mov.w	r0, #0
 8001008:	4770      	bx	lr
 800100a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800100e:	d102      	bne.n	8001016 <__aeabi_d2uiz+0x3a>
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	4770      	bx	lr
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	4770      	bx	lr

0800101c <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPsS3_>:
int32_t g_latest_audio_timestamp = 0;
}  // namespace


TfLiteStatus GetAudioSamples(tflite::ErrorReporter* error_reporter,int start_ms, int duration_ms,
                             int* audio_samples_size, int16_t** audio_samples, int16_t* samples) {
 800101c:	b480      	push	{r7}
 800101e:	b08b      	sub	sp, #44	; 0x2c
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
  const int yes_start = (0 * kAudioSampleFrequency) / 1000;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  const int yes_end = (1000 * kAudioSampleFrequency) / 1000;
 800102e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001032:	61bb      	str	r3, [r7, #24]
  const int start_sample = (start_ms * kAudioSampleFrequency) / 1000;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPsS3_+0x94>)
 8001040:	fb82 1203 	smull	r1, r2, r2, r3
 8001044:	1192      	asrs	r2, r2, #6
 8001046:	17db      	asrs	r3, r3, #31
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < kMaxAudioSampleSize; ++i) {
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001056:	da1c      	bge.n	8001092 <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPsS3_+0x76>
    const int sample_index = (start_sample + i);
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	4413      	add	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
    int16_t sample;
    if ((sample_index >= yes_start) && (sample_index < yes_end)) {
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0a      	blt.n	800107c <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPsS3_+0x60>
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800106c:	da06      	bge.n	800107c <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPsS3_+0x60>
      sample = samples[sample_index - yes_start];
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001074:	4413      	add	r3, r2
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	847b      	strh	r3, [r7, #34]	; 0x22
 800107a:	e001      	b.n	8001080 <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPsS3_+0x64>
    } else {
      sample = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    g_dummy_audio_data[i] = sample;
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPsS3_+0x98>)
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001086:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (int i = 0; i < kMaxAudioSampleSize; ++i) {
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	3301      	adds	r3, #1
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
 8001090:	e7de      	b.n	8001050 <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPsS3_+0x34>
  }
  *audio_samples_size = kMaxAudioSampleSize;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001098:	601a      	str	r2, [r3, #0]
  *audio_samples = g_dummy_audio_data;
 800109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109c:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPsS3_+0x98>)
 800109e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	372c      	adds	r7, #44	; 0x2c
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	10624dd3 	.word	0x10624dd3
 80010b4:	20000204 	.word	0x20000204

080010b8 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3301      	adds	r3, #1
 80010c4:	009b      	lsls	r3, r3, #2
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b0d      	cmp	r3, #13
 80010e2:	d83b      	bhi.n	800115c <TfLiteTypeGetName+0x88>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <TfLiteTypeGetName+0x18>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	08001125 	.word	0x08001125
 80010f0:	08001129 	.word	0x08001129
 80010f4:	08001131 	.word	0x08001131
 80010f8:	08001135 	.word	0x08001135
 80010fc:	0800113d 	.word	0x0800113d
 8001100:	08001151 	.word	0x08001151
 8001104:	08001145 	.word	0x08001145
 8001108:	0800112d 	.word	0x0800112d
 800110c:	08001149 	.word	0x08001149
 8001110:	08001139 	.word	0x08001139
 8001114:	08001155 	.word	0x08001155
 8001118:	08001159 	.word	0x08001159
 800111c:	0800114d 	.word	0x0800114d
 8001120:	08001141 	.word	0x08001141
    case kTfLiteNoType:
      return "NOTYPE";
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <TfLiteTypeGetName+0x98>)
 8001126:	e01a      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat32:
      return "FLOAT32";
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <TfLiteTypeGetName+0x9c>)
 800112a:	e018      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteInt16:
      return "INT16";
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <TfLiteTypeGetName+0xa0>)
 800112e:	e016      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteInt32:
      return "INT32";
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <TfLiteTypeGetName+0xa4>)
 8001132:	e014      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteUInt8:
      return "UINT8";
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <TfLiteTypeGetName+0xa8>)
 8001136:	e012      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteInt8:
      return "INT8";
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <TfLiteTypeGetName+0xac>)
 800113a:	e010      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteInt64:
      return "INT64";
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <TfLiteTypeGetName+0xb0>)
 800113e:	e00e      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteUInt64:
      return "UINT64";
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <TfLiteTypeGetName+0xb4>)
 8001142:	e00c      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteBool:
      return "BOOL";
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <TfLiteTypeGetName+0xb8>)
 8001146:	e00a      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <TfLiteTypeGetName+0xbc>)
 800114a:	e008      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteComplex128:
      return "COMPLEX128";
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <TfLiteTypeGetName+0xc0>)
 800114e:	e006      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteString:
      return "STRING";
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <TfLiteTypeGetName+0xc4>)
 8001152:	e004      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat16:
      return "FLOAT16";
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <TfLiteTypeGetName+0xc8>)
 8001156:	e002      	b.n	800115e <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat64:
      return "FLOAT64";
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <TfLiteTypeGetName+0xcc>)
 800115a:	e000      	b.n	800115e <TfLiteTypeGetName+0x8a>
  }
  return "Unknown type";
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <TfLiteTypeGetName+0xd0>)
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	0801bb50 	.word	0x0801bb50
 8001170:	0801bb58 	.word	0x0801bb58
 8001174:	0801bb60 	.word	0x0801bb60
 8001178:	0801bb68 	.word	0x0801bb68
 800117c:	0801bb70 	.word	0x0801bb70
 8001180:	0801bb78 	.word	0x0801bb78
 8001184:	0801bb80 	.word	0x0801bb80
 8001188:	0801bb88 	.word	0x0801bb88
 800118c:	0801bb90 	.word	0x0801bb90
 8001190:	0801bb98 	.word	0x0801bb98
 8001194:	0801bba4 	.word	0x0801bba4
 8001198:	0801bbb0 	.word	0x0801bbb0
 800119c:	0801bbb8 	.word	0x0801bbb8
 80011a0:	0801bbc0 	.word	0x0801bbc0
 80011a4:	0801bbc8 	.word	0x0801bbc8

080011a8 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <DebugLog+0x20>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	4619      	mov	r1, r3
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f017 fe6b 	bl	8018e94 <fputs>
#endif
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000018 	.word	0x20000018

080011cc <_ZNSt14numeric_limitsIaE3minEv>:
    struct numeric_limits<signed char>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR signed char
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_ZNSt14numeric_limitsIaE3maxEv>:

      static _GLIBCXX_CONSTEXPR signed char
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	237f      	movs	r3, #127	; 0x7f
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <_ZNSt14numeric_limitsIlE3minEv>:
    struct numeric_limits<long>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
 8001204:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eeb0 0a67 	vmov.f32	s0, s15
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	7f7fffff 	.word	0x7f7fffff

08001230 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
 8001234:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <_ZSt3maxIlERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	da01      	bge.n	8001262 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	e000      	b.n	8001264 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8001262:	687b      	ldr	r3, [r7, #4]
    }
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8001270:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001274:	b08c      	sub	sp, #48	; 0x30
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d107      	bne.n	8001294 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8001284:	f7ff ffb3 	bl	80011ee <_ZNSt14numeric_limitsIlE3minEv>
 8001288:	4602      	mov	r2, r0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4293      	cmp	r3, r2
 800128e:	d101      	bne.n	8001294 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8001294:	2300      	movs	r3, #0
 8001296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80012a0:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b_64(b);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80012aa:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	fb02 f203 	mul.w	r2, r2, r3
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	6a39      	ldr	r1, [r7, #32]
 80012ba:	fb01 f303 	mul.w	r3, r1, r3
 80012be:	441a      	add	r2, r3
 80012c0:	6a39      	ldr	r1, [r7, #32]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	fba1 3403 	umull	r3, r4, r1, r3
 80012c8:	4422      	add	r2, r4
 80012ca:	4614      	mov	r4, r2
 80012cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80012d0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80012d4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f174 0300 	sbcs.w	r3, r4, #0
 80012de:	db02      	blt.n	80012e6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x76>
 80012e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e4:	e000      	b.n	80012e8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 80012e8:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4619      	mov	r1, r3
 80012ee:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80012f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80012f6:	eb13 0b01 	adds.w	fp, r3, r1
 80012fa:	eb44 0c02 	adc.w	ip, r4, r2
 80012fe:	465b      	mov	r3, fp
 8001300:	4664      	mov	r4, ip
 8001302:	2b00      	cmp	r3, #0
 8001304:	f174 0200 	sbcs.w	r2, r4, #0
 8001308:	da06      	bge.n	8001318 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800130a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	185b      	adds	r3, r3, r1
 8001314:	eb44 0402 	adc.w	r4, r4, r2
 8001318:	f04f 0100 	mov.w	r1, #0
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	0fd9      	lsrs	r1, r3, #31
 8001322:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 8001326:	17e2      	asrs	r2, r4, #31
 8001328:	460b      	mov	r3, r1
 800132a:	4614      	mov	r4, r2
  std::int32_t ab_x2_high32 =
 800132c:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800132e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xce>
 8001336:	f7ff ff63 	bl	8001200 <_ZNSt14numeric_limitsIlE3maxEv>
 800133a:	4603      	mov	r3, r0
 800133c:	e000      	b.n	8001340 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800133e:	68bb      	ldr	r3, [r7, #8]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3730      	adds	r7, #48	; 0x30
 8001344:	46bd      	mov	sp, r7
 8001346:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800134a:	bf00      	nop
 800134c:	c0000001 	.word	0xc0000001

08001350 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b05      	cmp	r3, #5
 800135e:	dd08      	ble.n	8001372 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	f015 fa2f 	bl	80167d0 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	da01      	bge.n	80013a8 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 80013a4:	f017 fcb7 	bl	8018d16 <abort>
    TFLITE_DCHECK_LT(i, size_);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dc01      	bgt.n	80013b6 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 80013b2:	f017 fcb0 	bl	8018d16 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	dd06      	ble.n	80013cc <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	e004      	b.n	80013d6 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	685b      	ldr	r3, [r3, #4]
  }
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  }

  inline int32_t* DimsData() {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  inline const int32_t* DimsData() const {
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	dd02      	ble.n	80013f4 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	e001      	b.n	80013f8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3304      	adds	r3, #4
  }
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3304      	adds	r3, #4
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8001424:	2301      	movs	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ffd8 	bl	80013de <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800142e:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	429a      	cmp	r2, r3
 800143c:	da0c      	bge.n	8001458 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4413      	add	r3, r2
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	3301      	adds	r3, #1
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	e7ed      	b.n	8001434 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8001458:	697b      	ldr	r3, [r7, #20]
  }
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7ff ff83 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8001476:	4603      	mov	r3, r0
 8001478:	2b04      	cmp	r3, #4
 800147a:	d001      	beq.n	8001480 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800147c:	f017 fc4b 	bl	8018d16 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f7ff ffbf 	bl	8001404 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 8001486:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db04      	blt.n	8001498 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	db01      	blt.n	800149c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 8001498:	f017 fc3d 	bl	8018d16 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db05      	blt.n	80014ae <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3304      	adds	r3, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	db01      	blt.n	80014b2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 80014ae:	f017 fc32 	bl	8018d16 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db05      	blt.n	80014c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3308      	adds	r3, #8
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	db01      	blt.n	80014c8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 80014c4:	f017 fc27 	bl	8018d16 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db05      	blt.n	80014da <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	330c      	adds	r3, #12
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6a3a      	ldr	r2, [r7, #32]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	db01      	blt.n	80014de <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 80014da:	f017 fc1c 	bl	8018d16 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3304      	adds	r3, #4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	fb02 f203 	mul.w	r2, r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	3208      	adds	r2, #8
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	fb02 f203 	mul.w	r2, r2, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	320c      	adds	r2, #12
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	fb02 f203 	mul.w	r2, r2, r3
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	4413      	add	r3, r2
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8001512:	b590      	push	{r4, r7, lr}
 8001514:	b087      	sub	sp, #28
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7ff ff36 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001528:	4604      	mov	r4, r0
 800152a:	6839      	ldr	r1, [r7, #0]
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff31 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001532:	4603      	mov	r3, r0
 8001534:	429c      	cmp	r4, r3
 8001536:	d001      	beq.n	800153c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8001538:	f017 fbed 	bl	8018d16 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff ff28 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001544:	4603      	mov	r3, r0
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	6839      	ldr	r1, [r7, #0]
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff22 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001550:	4603      	mov	r3, r0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	f107 0214 	add.w	r2, r7, #20
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f001 f96c 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 8001564:	4603      	mov	r3, r0
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}

08001570 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001582:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	dc02      	bgt.n	8001590 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	425b      	negs	r3, r3
 800158e:	e000      	b.n	8001592 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fe66 	bl	8001270 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80015a4:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 f995 	bl	80028d8 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 80015ae:	4603      	mov	r3, r0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b0ab      	sub	sp, #172	; 0xac
 80015bc:	af02      	add	r7, sp, #8
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015de:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015e6:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015ee:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015fe:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	61bb      	str	r3, [r7, #24]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8001618:	6838      	ldr	r0, [r7, #0]
 800161a:	f7ff feaf 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800161e:	4603      	mov	r3, r0
 8001620:	2b04      	cmp	r3, #4
 8001622:	d001      	beq.n	8001628 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 8001624:	f017 fb77 	bl	8018d16 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8001628:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800162c:	f7ff fea6 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8001630:	4603      	mov	r3, r0
 8001632:	2b04      	cmp	r3, #4
 8001634:	d001      	beq.n	800163a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 8001636:	f017 fb6e 	bl	8018d16 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800163a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800163e:	f7ff fe9d 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8001642:	4603      	mov	r3, r0
 8001644:	2b04      	cmp	r3, #4
 8001646:	d001      	beq.n	800164c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 8001648:	f017 fb65 	bl	8018d16 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	429a      	cmp	r2, r3
 8001652:	dd01      	ble.n	8001658 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 8001654:	f017 fb5f 	bl	8018d16 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8001658:	2300      	movs	r3, #0
 800165a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800165e:	2100      	movs	r1, #0
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff ff56 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8001666:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8001668:	2303      	movs	r3, #3
 800166a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800166e:	2103      	movs	r1, #3
 8001670:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001674:	f7ff ff4d 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8001678:	4603      	mov	r3, r0
 800167a:	617b      	str	r3, [r7, #20]
  const int input_height = input_shape.Dims(1);
 800167c:	2101      	movs	r1, #1
 800167e:	6838      	ldr	r0, [r7, #0]
 8001680:	f7ff fe88 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001684:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_width = input_shape.Dims(2);
 8001686:	2102      	movs	r1, #2
 8001688:	6838      	ldr	r0, [r7, #0]
 800168a:	f7ff fe83 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 800168e:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_depth = input_shape.Dims(3);
 8001690:	2103      	movs	r1, #3
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f7ff fe7e 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001698:	6538      	str	r0, [r7, #80]	; 0x50
  const int filter_height = filter_shape.Dims(1);
 800169a:	2101      	movs	r1, #1
 800169c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80016a0:	f7ff fe78 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016a4:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_width = filter_shape.Dims(2);
 80016a6:	2102      	movs	r1, #2
 80016a8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80016ac:	f7ff fe72 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016b0:	64b8      	str	r0, [r7, #72]	; 0x48
  const int output_height = output_shape.Dims(1);
 80016b2:	2101      	movs	r1, #1
 80016b4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016b8:	f7ff fe6c 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016bc:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_width = output_shape.Dims(2);
 80016be:	2102      	movs	r1, #2
 80016c0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016c4:	f7ff fe66 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 80016c8:	6438      	str	r0, [r7, #64]	; 0x40
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 80016ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80016ce:	fb02 f203 	mul.w	r2, r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
 80016d8:	f017 fb1d 	bl	8018d16 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80016dc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80016e0:	f7ff fe9c 	bl	800141c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x138>
 80016ec:	f017 fb13 	bl	8018d16 <abort>

  for (int batch = 0; batch < batches; ++batch) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80016f6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80016fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016fc:	429a      	cmp	r2, r3
 80016fe:	f280 811a 	bge.w	8001936 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001708:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800170c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800170e:	429a      	cmp	r2, r3
 8001710:	f280 810b 	bge.w	800192a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x372>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800171a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800171e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001720:	429a      	cmp	r2, r3
 8001722:	f280 80fc 	bge.w	800191e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x366>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800172c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001732:	429a      	cmp	r2, r3
 8001734:	f280 80ed 	bge.w	8001912 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x35a>
          for (int m = 0; m < depth_multiplier; ++m) {
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800173e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001744:	429a      	cmp	r2, r3
 8001746:	f280 80de 	bge.w	8001906 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34e>
            const int output_channel = m + in_channel * depth_multiplier;
 800174a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800174e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001758:	4413      	add	r3, r2
 800175a:	63fb      	str	r3, [r7, #60]	; 0x3c
            const int in_x_origin = (out_x * stride_width) - pad_width;
 800175c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001760:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001764:	fb02 f203 	mul.w	r2, r2, r3
 8001768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_y_origin = (out_y * stride_height) - pad_height;
 800176e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001772:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001774:	fb02 f203 	mul.w	r2, r2, r3
 8001778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
            int32_t acc = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001788:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800178c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178e:	429a      	cmp	r2, r3
 8001790:	da68      	bge.n	8001864 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ac>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001798:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800179c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800179e:	429a      	cmp	r2, r3
 80017a0:	da5a      	bge.n	8001858 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a0>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80017a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017ae:	4413      	add	r3, r2
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 80017b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 80017bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017be:	4413      	add	r3, r2
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db0c      	blt.n	80017e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 80017c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017cc:	429a      	cmp	r2, r3
 80017ce:	da08      	bge.n	80017e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db05      	blt.n	80017e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 80017d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017da:	429a      	cmp	r2, r3
 80017dc:	da01      	bge.n	80017e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22c>
 80017e2:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 80017e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    (in_y < input_height);
                if (is_point_inside_image) {
 80017e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d02d      	beq.n	800184c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>
                  int32_t input_val = input_data[Offset(
 80017f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fa:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f7ff fe2f 	bl	8001462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 8001808:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800180c:	4413      	add	r3, r2
 800180e:	f993 3000 	ldrsb.w	r3, [r3]
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
                  int32_t filter_val = filter_data[Offset(
 8001814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800181c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001820:	2100      	movs	r1, #0
 8001822:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001826:	f7ff fe1c 	bl	8001462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 800182e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001832:	4413      	add	r3, r2
 8001834:	f993 3000 	ldrsb.w	r3, [r3]
 8001838:	623b      	str	r3, [r7, #32]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 800183a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800183e:	4413      	add	r3, r2
 8001840:	6a3a      	ldr	r2, [r7, #32]
 8001842:	fb02 f203 	mul.w	r2, r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4413      	add	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800184c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001850:	3301      	adds	r3, #1
 8001852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001856:	e79f      	b.n	8001798 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8001858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800185c:	3301      	adds	r3, #1
 800185e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001862:	e791      	b.n	8001788 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d0>
                }
              }
            }
            if (bias_data) {
 8001864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c6>
              acc += bias_data[output_channel];
 800186c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001874:	4413      	add	r3, r2
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4413      	add	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 800187e:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 8001880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8001888:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 800188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	f7ff fe6b 	bl	8001570 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800189a:	4603      	mov	r3, r0
 800189c:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018a2:	4413      	add	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 80018a6:	f107 021c 	add.w	r2, r7, #28
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fcc9 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 80018b6:	4603      	mov	r3, r0
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 80018bc:	f107 0218 	add.w	r2, r7, #24
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 ffb8 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 80018cc:	4603      	mov	r3, r0
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 80018d2:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 80018d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018e0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80018e4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80018e8:	f7ff fdbb 	bl	8001462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 80018f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018f4:	4413      	add	r3, r2
 80018f6:	b262      	sxtb	r2, r4
 80018f8:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 80018fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018fe:	3301      	adds	r3, #1
 8001900:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001904:	e71b      	b.n	800173e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x186>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8001906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800190a:	3301      	adds	r3, #1
 800190c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001910:	e70c      	b.n	800172c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001912:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001916:	3301      	adds	r3, #1
 8001918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800191c:	e6fd      	b.n	800171a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800191e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001922:	3301      	adds	r3, #1
 8001924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001928:	e6ee      	b.n	8001708 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x150>
  for (int batch = 0; batch < batches; ++batch) {
 800192a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800192e:	3301      	adds	r3, #1
 8001930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001934:	e6df      	b.n	80016f6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
          }
        }
      }
    }
  }
}
 8001936:	bf00      	nop
 8001938:	37a4      	adds	r7, #164	; 0xa4
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}

0800193e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800193e:	b590      	push	{r4, r7, lr}
 8001940:	ed2d 8b02 	vpush	{d8}
 8001944:	b0a9      	sub	sp, #164	; 0xa4
 8001946:	af02      	add	r7, sp, #8
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001956:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800195e:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001966:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800196e:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001976:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800197e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001986:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001992:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8001994:	68b8      	ldr	r0, [r7, #8]
 8001996:	f7ff fcf1 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800199a:	4603      	mov	r3, r0
 800199c:	2b04      	cmp	r3, #4
 800199e:	d001      	beq.n	80019a4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 80019a0:	f017 f9b9 	bl	8018d16 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80019a4:	6838      	ldr	r0, [r7, #0]
 80019a6:	f7ff fce9 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d001      	beq.n	80019b4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 80019b0:	f017 f9b1 	bl	8018d16 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80019b4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80019b8:	f7ff fce0 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d001      	beq.n	80019c6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 80019c2:	f017 f9a8 	bl	8018d16 <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019cc:	2100      	movs	r1, #0
 80019ce:	68b8      	ldr	r0, [r7, #8]
 80019d0:	f7ff fd9f 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80019d4:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 80019d6:	2303      	movs	r3, #3
 80019d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019dc:	2103      	movs	r1, #3
 80019de:	6838      	ldr	r0, [r7, #0]
 80019e0:	f7ff fd97 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80019e4:	4603      	mov	r3, r0
 80019e6:	613b      	str	r3, [r7, #16]
  const int input_height = input_shape.Dims(1);
 80019e8:	2101      	movs	r1, #1
 80019ea:	68b8      	ldr	r0, [r7, #8]
 80019ec:	f7ff fcd2 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 80019f0:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
 80019f2:	2102      	movs	r1, #2
 80019f4:	68b8      	ldr	r0, [r7, #8]
 80019f6:	f7ff fccd 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 80019fa:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_depth = input_shape.Dims(3);
 80019fc:	2103      	movs	r1, #3
 80019fe:	68b8      	ldr	r0, [r7, #8]
 8001a00:	f7ff fcc8 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a04:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 8001a06:	2101      	movs	r1, #1
 8001a08:	6838      	ldr	r0, [r7, #0]
 8001a0a:	f7ff fcc3 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a0e:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 8001a10:	2102      	movs	r1, #2
 8001a12:	6838      	ldr	r0, [r7, #0]
 8001a14:	f7ff fcbe 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a18:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001a20:	f7ff fcb8 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a24:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 8001a26:	2102      	movs	r1, #2
 8001a28:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001a2c:	f7ff fcb2 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8001a30:	6338      	str	r0, [r7, #48]	; 0x30
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8001a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a36:	fb02 f203 	mul.w	r2, r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x106>
 8001a40:	f017 f969 	bl	8018d16 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8001a44:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001a48:	f7ff fce8 	bl	800141c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11a>
 8001a54:	f017 f95f 	bl	8018d16 <abort>

  for (int b = 0; b < batches; ++b) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f280 80eb 	bge.w	8001c40 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x302>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a70:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a76:	429a      	cmp	r2, r3
 8001a78:	f280 80dc 	bge.w	8001c34 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a82:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f280 80cd 	bge.w	8001c28 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ea>
        for (int ic = 0; ic < input_depth; ++ic) {
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a94:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	f280 80be 	bge.w	8001c1c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2de>
          for (int m = 0; m < depth_multiplier; m++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001aa6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f280 80af 	bge.w	8001c10 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2d2>
            const int oc = m + ic * depth_multiplier;
 8001ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ab6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ac0:	4413      	add	r3, r2
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8001ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ac8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001aca:	fb02 f203 	mul.w	r2, r2, r3
 8001ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8001ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ad8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ada:	fb02 f203 	mul.w	r2, r2, r3
 8001ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
            float total = 0.f;
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001af0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af4:	429a      	cmp	r2, r3
 8001af6:	da54      	bge.n	8001ba2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x264>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001afc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b00:	429a      	cmp	r2, r3
 8001b02:	da4a      	bge.n	8001b9a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25c>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8001b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b0e:	4413      	add	r3, r2
 8001b10:	623b      	str	r3, [r7, #32]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8001b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b14:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	4413      	add	r3, r2
 8001b1e:	61fb      	str	r3, [r7, #28]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db35      	blt.n	8001b92 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
 8001b26:	6a3a      	ldr	r2, [r7, #32]
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	da31      	bge.n	8001b92 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db2e      	blt.n	8001b92 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	da2a      	bge.n	8001b92 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x254>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8001b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001b4a:	68b8      	ldr	r0, [r7, #8]
 8001b4c:	f7ff fc89 	bl	8001462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001b50:	4603      	mov	r3, r0
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	61bb      	str	r3, [r7, #24]
                  float filter_value = filter_data[Offset(
 8001b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b64:	2100      	movs	r1, #0
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f7ff fc7b 	bl	8001462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001b6c:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	617b      	str	r3, [r7, #20]
                  total += (input_value * filter_value);
 8001b7a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b86:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8001b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b94:	3301      	adds	r3, #1
 8001b96:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b98:	e7b0      	b.n	8001afc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1be>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8001b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ba0:	e7a6      	b.n	8001af0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b2>
                }
              }
            }
            float bias_value = 0.0f;
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 8001ba8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x280>
              bias_value = bias_data[oc];
 8001bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001bb8:	4413      	add	r3, r2
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 8001bbe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001bc2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001bc6:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001bd6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001bda:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001bde:	f7ff fc40 	bl	8001462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8001be2:	4603      	mov	r3, r0
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001bea:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 8001bec:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8001bf0:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8001bf4:	eeb0 0a48 	vmov.f32	s0, s16
 8001bf8:	f000 fe4d 	bl	8002896 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8001bfc:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8001c00:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 8001c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c0e:	e74a      	b.n	8001aa6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x168>
        for (int ic = 0; ic < input_depth; ++ic) {
 8001c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c14:	3301      	adds	r3, #1
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c1a:	e73b      	b.n	8001a94 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x156>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8001c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c20:	3301      	adds	r3, #1
 8001c22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c26:	e72c      	b.n	8001a82 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8001c28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c32:	e71d      	b.n	8001a70 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x132>
  for (int b = 0; b < batches; ++b) {
 8001c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c3e:	e70e      	b.n	8001a5e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x120>
          }
        }
      }
    }
  }
}
 8001c40:	bf00      	nop
 8001c42:	379c      	adds	r7, #156	; 0x9c
 8001c44:	46bd      	mov	sp, r7
 8001c46:	ecbd 8b02 	vpop	{d8}
 8001c4a:	bd90      	pop	{r4, r7, pc}

08001c4c <_ZN6tflite13reference_ops14depthwise_conv18DepthwiseConvRoundILNS_27DepthwiseConvOutputRoundingE1EEEllli>:
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
}

template <>
inline int32_t DepthwiseConvRound<DepthwiseConvOutputRounding::kAwayFromZero>(
    int32_t x, int32_t quantized_multiplier, int shift) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff fc87 	bl	8001570 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af06      	add	r7, sp, #24
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  return depthwise_conv::DepthwiseConvBasicKernel<
      DepthwiseConvOutputRounding::kAwayFromZero>::Run(params, input_shape,
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	9304      	str	r3, [sp, #16]
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	9303      	str	r3, [sp, #12]
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	9302      	str	r3, [sp, #8]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 feaa 	bl	80029ee <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph>
                                                       input_data, filter_shape,
                                                       filter_data, bias_shape,
                                                       bias_data, output_shape,
                                                       output_data);
 8001c9a:	bf00      	nop
}
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	685b      	ldr	r3, [r3, #4]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_ZN6tflite9NumInputsEPK10TfLiteNode>:

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8001cde:	b480      	push	{r7}
 8001ce0:	b087      	sub	sp, #28
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	fb02 f203 	mul.w	r2, r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	441a      	add	r2, r3
  int total_padding =
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d14:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	bfb8      	it	lt
 8001d20:	425b      	neglt	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	0fda      	lsrs	r2, r3, #31
 8001d2c:	4413      	add	r3, r2
 8001d2e:	105b      	asrs	r3, r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	4603      	mov	r3, r0
 8001d4a:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6a3a      	ldr	r2, [r7, #32]
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
  switch (padding) {
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d002      	beq.n	8001d66 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d008      	beq.n	8001d76 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x3a>
 8001d64:	e010      	b.n	8001d88 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4c>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d74:	e009      	b.n	8001d8a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	441a      	add	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	1ad2      	subs	r2, r2, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d86:	e000      	b.n	8001d8a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    default:
      return 0;
 8001d88:	2300      	movs	r3, #0
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b088      	sub	sp, #32
 8001d9a:	af02      	add	r7, sp, #8
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8001da4:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db2:	f7ff ffc3 	bl	8001d3c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8001db6:	4602      	mov	r2, r0
 8001db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dba:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8001dbc:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dca:	f7ff ffb7 	bl	8001d3c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd2:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8001dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f107 0214 	add.w	r2, r7, #20
 8001de0:	9201      	str	r2, [sp, #4]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	6839      	ldr	r1, [r7, #0]
 8001dea:	68b8      	ldr	r0, [r7, #8]
 8001dec:	f7ff ff77 	bl	8001cde <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8001df0:	4602      	mov	r2, r0
  padding_values.height =
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8001dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f107 0214 	add.w	r2, r7, #20
 8001e04:	9201      	str	r2, [sp, #4]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e0c:	6a39      	ldr	r1, [r7, #32]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff65 	bl	8001cde <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8001e14:	4602      	mov	r2, r0
  padding_values.width =
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	609a      	str	r2, [r3, #8]
  return padding_values;
 8001e20:	bf00      	nop
}
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8001e3c:	f016 ff6b 	bl	8018d16 <abort>
  TFLITE_DCHECK(node != nullptr);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8001e46:	f016 ff66 	bl	8018d16 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	4790      	blx	r2
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7ff ffd5 	bl	8001e2a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8001e9c:	f016 ff3b 	bl	8018d16 <abort>
  TFLITE_DCHECK(node != nullptr);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8001ea6:	f016 ff36 	bl	8018d16 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	4790      	blx	r2
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             TfLiteDepthwiseConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             const TfLiteType data_type, OpData* data) {
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ece:	b09d      	sub	sp, #116	; 0x74
 8001ed0:	af0a      	add	r7, sp, #40	; 0x28
 8001ed2:	6278      	str	r0, [r7, #36]	; 0x24
 8001ed4:	6239      	str	r1, [r7, #32]
 8001ed6:	61fa      	str	r2, [r7, #28]
 8001ed8:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8001eec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ef0:	f083 0301 	eor.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00f      	beq.n	8001f1a <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x4e>
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d00a      	beq.n	8001f1a <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x4e>
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	695c      	ldr	r4, [r3, #20]
 8001f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	; (8002080 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b4>)
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2345      	movs	r3, #69	; 0x45
 8001f10:	4a5c      	ldr	r2, [pc, #368]	; (8002084 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001f12:	495d      	ldr	r1, [pc, #372]	; (8002088 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 8001f14:	47a0      	blx	r4
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0ae      	b.n	8002078 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d012      	beq.n	8001f4a <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x7e>
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	695c      	ldr	r4, [r3, #20]
 8001f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	9203      	str	r2, [sp, #12]
 8001f34:	9302      	str	r3, [sp, #8]
 8001f36:	4b55      	ldr	r3, [pc, #340]	; (800208c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1c0>)
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	4b55      	ldr	r3, [pc, #340]	; (8002090 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1c4>)
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2346      	movs	r3, #70	; 0x46
 8001f40:	4a50      	ldr	r2, [pc, #320]	; (8002084 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001f42:	4954      	ldr	r1, [pc, #336]	; (8002094 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1c8>)
 8001f44:	47a0      	blx	r4
 8001f46:	2301      	movs	r3, #1
 8001f48:	e096      	b.n	8002078 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>

  int unused_output_height, unused_output_width;
  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width, 1, 1, height, width,
      filter_height, filter_width, params->padding, &unused_output_height,
      &unused_output_width);
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	6899      	ldr	r1, [r3, #8]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	685d      	ldr	r5, [r3, #4]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	781b      	ldrb	r3, [r3, #0]
  data->padding = ComputePaddingHeightWidth(
 8001f56:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8001f58:	f107 0008 	add.w	r0, r7, #8
 8001f5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f60:	9207      	str	r2, [sp, #28]
 8001f62:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001f66:	9206      	str	r2, [sp, #24]
 8001f68:	9305      	str	r3, [sp, #20]
 8001f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f6c:	9304      	str	r3, [sp, #16]
 8001f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f70:	9303      	str	r3, [sp, #12]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	9302      	str	r3, [sp, #8]
 8001f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	462a      	mov	r2, r5
 8001f82:	f7ff ff08 	bl	8001d96 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8001f90:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d06e      	beq.n	8002076 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1aa>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	6a39      	ldr	r1, [r7, #32]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f005 fce1 	bl	8007966 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8001fa4:	6438      	str	r0, [r7, #64]	; 0x40
    TF_LITE_ENSURE(context, input != nullptr);
 8001fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10a      	bne.n	8001fc2 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0xf6>
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	695c      	ldr	r4, [r3, #20]
 8001fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb2:	4b39      	ldr	r3, [pc, #228]	; (8002098 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1cc>)
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2352      	movs	r3, #82	; 0x52
 8001fb8:	4a32      	ldr	r2, [pc, #200]	; (8002084 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001fba:	4933      	ldr	r1, [pc, #204]	; (8002088 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 8001fbc:	47a0      	blx	r4
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e05a      	b.n	8002078 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	6a39      	ldr	r1, [r7, #32]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 fccc 	bl	8007966 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8001fce:	63f8      	str	r0, [r7, #60]	; 0x3c
    TF_LITE_ENSURE(context, filter != nullptr);
 8001fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10a      	bne.n	8001fec <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x120>
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	695c      	ldr	r4, [r3, #20]
 8001fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	; (800209c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1d0>)
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2354      	movs	r3, #84	; 0x54
 8001fe2:	4a28      	ldr	r2, [pc, #160]	; (8002084 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 8001fe4:	4928      	ldr	r1, [pc, #160]	; (8002088 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 8001fe6:	47a0      	blx	r4
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e045      	b.n	8002078 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
    const TfLiteTensor* bias =
        GetOptionalInputTensor(context, node, kBiasTensor);
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	2202      	movs	r2, #2
 8001ff0:	6a39      	ldr	r1, [r7, #32]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f005 fce6 	bl	80079c4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8001ff8:	63b8      	str	r0, [r7, #56]	; 0x38
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	6a39      	ldr	r1, [r7, #32]
 8002000:	4618      	mov	r0, r3
 8002002:	f005 fcc0 	bl	8007986 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8002006:	6378      	str	r0, [r7, #52]	; 0x34
    TF_LITE_ENSURE(context, output != nullptr);
 8002008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10a      	bne.n	8002024 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x158>
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	695c      	ldr	r4, [r3, #20]
 8002012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1d4>)
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2358      	movs	r3, #88	; 0x58
 800201a:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1b8>)
 800201c:	491a      	ldr	r1, [pc, #104]	; (8002088 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1bc>)
 800201e:	47a0      	blx	r4
 8002020:	2301      	movs	r3, #1
 8002022:	e029      	b.n	8002078 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
    int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 8002024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	633b      	str	r3, [r7, #48]	; 0x30

    return tflite::PopulateConvolutionQuantizationParams(
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3310      	adds	r3, #16
 8002034:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002036:	321c      	adds	r2, #28
 8002038:	603a      	str	r2, [r7, #0]
 800203a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800203c:	3120      	adds	r1, #32
 800203e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002040:	302c      	adds	r0, #44	; 0x2c
 8002042:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002044:	3430      	adds	r4, #48	; 0x30
 8002046:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8002048:	6a6d      	ldr	r5, [r5, #36]	; 0x24
        context, input, filter, bias, output, params->activation,
        &data->output_multiplier, &data->output_shift,
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels);
 800204a:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800204c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800204e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002050:	9208      	str	r2, [sp, #32]
 8002052:	9607      	str	r6, [sp, #28]
 8002054:	9506      	str	r5, [sp, #24]
 8002056:	9405      	str	r4, [sp, #20]
 8002058:	9004      	str	r0, [sp, #16]
 800205a:	9103      	str	r1, [sp, #12]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	9202      	str	r2, [sp, #8]
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800206a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f005 fcb9 	bl	80079e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 8002072:	4603      	mov	r3, r0
 8002074:	e000      	b.n	8002078 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE+0x1ac>
  }
  return kTfLiteOk;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	374c      	adds	r7, #76	; 0x4c
 800207c:	46bd      	mov	sp, r7
 800207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002080:	0801bc10 	.word	0x0801bc10
 8002084:	0801bbd8 	.word	0x0801bbd8
 8002088:	0801bbf8 	.word	0x0801bbf8
 800208c:	0801bc50 	.word	0x0801bc50
 8002090:	0801bc54 	.word	0x0801bc54
 8002094:	0801bc34 	.word	0x0801bc34
 8002098:	0801bc68 	.word	0x0801bc68
 800209c:	0801bc7c 	.word	0x0801bc7c
 80020a0:	0801bc90 	.word	0x0801bc90

080020a4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 80020b8:	f016 fe2d 	bl	8018d16 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	2134      	movs	r1, #52	; 0x34
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	4798      	blx	r3
 80020c6:	4603      	mov	r3, r0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b097      	sub	sp, #92	; 0x5c
 80020d4:	af06      	add	r7, sp, #24
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80020e2:	f016 fe18 	bl	8018d16 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 80020ee:	f016 fe12 	bl	8018d16 <abort>

  auto* params =
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  OpData* data = static_cast<OpData*>(node->user_data);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	63bb      	str	r3, [r7, #56]	; 0x38

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f005 fc3e 	bl	8007986 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800210a:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10a      	bne.n	8002128 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x58>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695c      	ldr	r4, [r3, #20]
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4b85      	ldr	r3, [pc, #532]	; (8002330 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2373      	movs	r3, #115	; 0x73
 800211e:	4a85      	ldr	r2, [pc, #532]	; (8002334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002120:	4985      	ldr	r1, [pc, #532]	; (8002338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002122:	47a0      	blx	r4
 8002124:	2301      	movs	r3, #1
 8002126:	e0ff      	b.n	8002328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f005 fc19 	bl	8007966 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8002134:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(context, input != nullptr);
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10a      	bne.n	8002152 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x82>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695c      	ldr	r4, [r3, #20]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4b7e      	ldr	r3, [pc, #504]	; (800233c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2375      	movs	r3, #117	; 0x75
 8002148:	4a7a      	ldr	r2, [pc, #488]	; (8002334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800214a:	497b      	ldr	r1, [pc, #492]	; (8002338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800214c:	47a0      	blx	r4
 800214e:	2301      	movs	r3, #1
 8002150:	e0ea      	b.n	8002328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	6839      	ldr	r1, [r7, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f005 fc04 	bl	8007966 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800215e:	62f8      	str	r0, [r7, #44]	; 0x2c
  TF_LITE_ENSURE(context, filter != nullptr);
 8002160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10a      	bne.n	800217c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695c      	ldr	r4, [r3, #20]
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4b74      	ldr	r3, [pc, #464]	; (8002340 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2377      	movs	r3, #119	; 0x77
 8002172:	4a70      	ldr	r2, [pc, #448]	; (8002334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002174:	4970      	ldr	r1, [pc, #448]	; (8002338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002176:	47a0      	blx	r4
 8002178:	2301      	movs	r3, #1
 800217a:	e0d5      	b.n	8002328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>

  const TfLiteType data_type = input->type;
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  int width = SizeOfDimension(input, 2);
 8002184:	2102      	movs	r1, #2
 8002186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002188:	f7ff fd8b 	bl	8001ca2 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 800218c:	6278      	str	r0, [r7, #36]	; 0x24
  int height = SizeOfDimension(input, 1);
 800218e:	2101      	movs	r1, #1
 8002190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002192:	f7ff fd86 	bl	8001ca2 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8002196:	6238      	str	r0, [r7, #32]
  int filter_width = SizeOfDimension(filter, 2);
 8002198:	2102      	movs	r1, #2
 800219a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800219c:	f7ff fd81 	bl	8001ca2 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80021a0:	61f8      	str	r0, [r7, #28]
  int filter_height = SizeOfDimension(filter, 1);
 80021a2:	2101      	movs	r1, #1
 80021a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021a6:	f7ff fd7c 	bl	8001ca2 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80021aa:	61b8      	str	r0, [r7, #24]

  // Per channel quantization is only needed for int8_t inference. For other
  // quantized types, only a single scale and zero point is needed.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 80021ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	617b      	str	r3, [r7, #20]
  // Dynamically allocate per-channel quantization parameters.
  data->per_channel_output_multiplier =
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	4611      	mov	r1, r2
 80021c0:	4798      	blx	r3
 80021c2:	4602      	mov	r2, r0
  data->per_channel_output_multiplier =
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4611      	mov	r1, r2
 80021d4:	4798      	blx	r3
 80021d6:	4602      	mov	r2, r0
  data->per_channel_output_shift =
 80021d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b09      	cmp	r3, #9
 80021e2:	d17c      	bne.n	80022de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20e>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d013      	beq.n	8002216 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x146>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695c      	ldr	r4, [r3, #20]
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021fa:	461a      	mov	r2, r3
 80021fc:	2301      	movs	r3, #1
 80021fe:	9303      	str	r3, [sp, #12]
 8002200:	9202      	str	r2, [sp, #8]
 8002202:	4b50      	ldr	r3, [pc, #320]	; (8002344 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	4b50      	ldr	r3, [pc, #320]	; (8002348 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	238d      	movs	r3, #141	; 0x8d
 800220c:	4a49      	ldr	r2, [pc, #292]	; (8002334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800220e:	494f      	ldr	r1, [pc, #316]	; (800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 8002210:	47a0      	blx	r4
 8002212:	2301      	movs	r3, #1
 8002214:	e088      	b.n	8002328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    const auto* affine_quantization =
 800221a:	60fb      	str	r3, [r7, #12]
    TF_LITE_ENSURE(context, affine_quantization);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10a      	bne.n	8002238 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695c      	ldr	r4, [r3, #20]
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4b49      	ldr	r3, [pc, #292]	; (8002350 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2392      	movs	r3, #146	; 0x92
 800222e:	4a41      	ldr	r2, [pc, #260]	; (8002334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8002230:	4941      	ldr	r1, [pc, #260]	; (8002338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002232:	47a0      	blx	r4
 8002234:	2301      	movs	r3, #1
 8002236:	e077      	b.n	8002328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x186>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695c      	ldr	r4, [r3, #20]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4b43      	ldr	r3, [pc, #268]	; (8002354 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2393      	movs	r3, #147	; 0x93
 800224c:	4a39      	ldr	r2, [pc, #228]	; (8002334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800224e:	493a      	ldr	r1, [pc, #232]	; (8002338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8002250:	47a0      	blx	r4
 8002252:	2301      	movs	r3, #1
 8002254:	e068      	b.n	8002328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10a      	bne.n	8002274 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695c      	ldr	r4, [r3, #20]
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4b3c      	ldr	r3, [pc, #240]	; (8002358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2394      	movs	r3, #148	; 0x94
 800226a:	4a32      	ldr	r2, [pc, #200]	; (8002334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800226c:	4932      	ldr	r1, [pc, #200]	; (8002338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800226e:	47a0      	blx	r4
 8002270:	2301      	movs	r3, #1
 8002272:	e059      	b.n	8002328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
    TF_LITE_ENSURE(
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d012      	beq.n	80022a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	429a      	cmp	r2, r3
 800228c:	d00a      	beq.n	80022a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695c      	ldr	r4, [r3, #20]
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4b31      	ldr	r3, [pc, #196]	; (800235c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2398      	movs	r3, #152	; 0x98
 800229a:	4a26      	ldr	r2, [pc, #152]	; (8002334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800229c:	4926      	ldr	r1, [pc, #152]	; (8002338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800229e:	47a0      	blx	r4
 80022a0:	2301      	movs	r3, #1
 80022a2:	e041      	b.n	8002328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d014      	beq.n	80022de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695c      	ldr	r4, [r3, #20]
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	6852      	ldr	r2, [r2, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	9203      	str	r2, [sp, #12]
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x290>)
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	4b25      	ldr	r3, [pc, #148]	; (8002364 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x294>)
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	239a      	movs	r3, #154	; 0x9a
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80022d6:	491d      	ldr	r1, [pc, #116]	; (800234c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 80022d8:	47a0      	blx	r4
 80022da:	2301      	movs	r3, #1
 80022dc:	e024      	b.n	8002328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, width, height,
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e2:	9304      	str	r3, [sp, #16]
 80022e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022e8:	9303      	str	r3, [sp, #12]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	9302      	str	r3, [sp, #8]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022fa:	6839      	ldr	r1, [r7, #0]
 80022fc:	f7ff fde6 	bl	8001ecc <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsiiii10TfLiteTypePNS0_6OpDataE>
 8002300:	4603      	mov	r3, r0
 8002302:	74fb      	strb	r3, [r7, #19]
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23e>
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	e00c      	b.n	8002328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>
                                        filter_width, filter_height, data_type,
                                        data));

  data->input_zero_point = input->params.zero_point;
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 800231e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3744      	adds	r7, #68	; 0x44
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}
 8002330:	0801bc90 	.word	0x0801bc90
 8002334:	0801bbd8 	.word	0x0801bbd8
 8002338:	0801bbf8 	.word	0x0801bbf8
 800233c:	0801bc68 	.word	0x0801bc68
 8002340:	0801bc7c 	.word	0x0801bc7c
 8002344:	0801bca4 	.word	0x0801bca4
 8002348:	0801bcc0 	.word	0x0801bcc0
 800234c:	0801bc34 	.word	0x0801bc34
 8002350:	0801bcdc 	.word	0x0801bcdc
 8002354:	0801bcf0 	.word	0x0801bcf0
 8002358:	0801bd0c 	.word	0x0801bd0c
 800235c:	0801bd2c 	.word	0x0801bd2c
 8002360:	0801bdb0 	.word	0x0801bdb0
 8002364:	0801bdd8 	.word	0x0801bdd8

08002368 <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteDepthwiseConvParams* params, const OpData& data,
               const TfLiteEvalTensor* input, const TfLiteEvalTensor* filter,
               const TfLiteEvalTensor* bias, TfLiteEvalTensor* output) {
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	b0b5      	sub	sp, #212	; 0xd4
 800236c:	af06      	add	r7, sp, #24
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7c1b      	ldrb	r3, [r3, #16]
 800237a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800237e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fcec 	bl	8002d60 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);

  tflite::DepthwiseParams op_params;
  // Padding type is ignored, but still set.
  op_params.padding_type = PaddingType::kSame;
 8002388:	2301      	movs	r3, #1
 800238a:	743b      	strb	r3, [r7, #16]
  op_params.padding_values.width = data.padding.width;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	b21b      	sxth	r3, r3
 8002392:	827b      	strh	r3, [r7, #18]
  op_params.padding_values.height = data.padding.height;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	b21b      	sxth	r3, r3
 800239a:	82bb      	strh	r3, [r7, #20]
  op_params.stride_width = params->stride_width;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	837b      	strh	r3, [r7, #26]
  op_params.stride_height = params->stride_height;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	b21b      	sxth	r3, r3
 80023aa:	83bb      	strh	r3, [r7, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	83fb      	strh	r3, [r7, #30]
  op_params.dilation_height_factor = params->dilation_height_factor;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	843b      	strh	r3, [r7, #32]
  op_params.depth_multiplier = params->depth_multiplier;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.float_activation_min = output_activation_min;
 80023c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c6:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.float_activation_max = output_activation_max;
 80023c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ca:	647b      	str	r3, [r7, #68]	; 0x44

  tflite::reference_ops::DepthwiseConv(
      op_params, tflite::micro::GetTensorShape(input),
 80023cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f005 f9b2 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 80023da:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80023de:	f000 fd01 	bl	8002de4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80023e2:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<float>(input),
      tflite::micro::GetTensorShape(filter),
 80023e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023e8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80023ec:	4618      	mov	r0, r3
 80023ee:	f005 f9a6 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 80023f2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80023f6:	f000 fcf5 	bl	8002de4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80023fa:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<float>(filter),
      tflite::micro::GetTensorShape(bias),
 80023fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002400:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002404:	4618      	mov	r0, r3
 8002406:	f005 f99a 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 800240a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800240e:	f000 fce9 	bl	8002de4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8002412:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<float>(bias),
      tflite::micro::GetTensorShape(output),
 8002414:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002418:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800241c:	4618      	mov	r0, r3
 800241e:	f005 f98e 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 8002422:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002426:	f000 fcec 	bl	8002e02 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800242a:	4603      	mov	r3, r0
 800242c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002430:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002434:	f107 0010 	add.w	r0, r7, #16
 8002438:	9304      	str	r3, [sp, #16]
 800243a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800243e:	9303      	str	r3, [sp, #12]
 8002440:	9502      	str	r5, [sp, #8]
 8002442:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	9400      	str	r4, [sp, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	4632      	mov	r2, r6
 800244e:	f7ff fa76 	bl	800193e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      tflite::micro::GetTensorShape(output),
 8002452:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe ff7a 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 800245c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe ff75 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 8002466:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe ff70 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 8002470:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe ff6b 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<float>(output));
}
 800247a:	bf00      	nop
 800247c:	37bc      	adds	r7, #188	; 0xbc
 800247e:	46bd      	mov	sp, r7
 8002480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002482 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteDepthwiseConvParams* params,
                             const OpData& data, const TfLiteEvalTensor* input,
                             const TfLiteEvalTensor* filter,
                             const TfLiteEvalTensor* bias,
                             TfLiteEvalTensor* output) {
 8002482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002484:	b0b7      	sub	sp, #220	; 0xdc
 8002486:	af08      	add	r7, sp, #32
 8002488:	6178      	str	r0, [r7, #20]
 800248a:	6139      	str	r1, [r7, #16]
 800248c:	60fa      	str	r2, [r7, #12]
 800248e:	60bb      	str	r3, [r7, #8]
  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
 8002490:	2301      	movs	r3, #1
 8002492:	763b      	strb	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	b21b      	sxth	r3, r3
 800249a:	837b      	strh	r3, [r7, #26]
  op_params.padding_values.height = data.padding.height;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	83bb      	strh	r3, [r7, #28]
  op_params.stride_width = params->stride_width;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.stride_height = params->stride_height;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.dilation_width_factor = params->dilation_width_factor;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.dilation_height_factor = params->dilation_height_factor;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.depth_multiplier = params->depth_multiplier;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	857b      	strh	r3, [r7, #42]	; 0x2a
  op_params.input_offset = -data.input_zero_point;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	425b      	negs	r3, r3
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.weights_offset = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.output_offset = data.output_zero_point;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
  // TODO(b/130439627): Use calculated value for clamping.
  op_params.quantized_activation_min = std::numeric_limits<int8_t>::min();
 80024de:	f7fe fe75 	bl	80011cc <_ZNSt14numeric_limitsIaE3minEv>
 80024e2:	4603      	mov	r3, r0
 80024e4:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
 80024e6:	f7fe fe7a 	bl	80011de <_ZNSt14numeric_limitsIaE3maxEv>
 80024ea:	4603      	mov	r3, r0
 80024ec:	647b      	str	r3, [r7, #68]	; 0x44

  reference_integer_ops::DepthwiseConvPerChannel(
      op_params, data.per_channel_output_multiplier,
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
      data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80024f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024fa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 f91d 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 8002504:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002508:	f000 fc8c 	bl	8002e24 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800250c:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(filter),
 800250e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002512:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002516:	4618      	mov	r0, r3
 8002518:	f005 f911 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 800251c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002520:	f000 fc80 	bl	8002e24 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8002524:	6078      	str	r0, [r7, #4]
      tflite::micro::GetTensorData<int8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 8002526:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800252a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800252e:	4618      	mov	r0, r3
 8002530:	f005 f905 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 8002534:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002538:	f000 fc83 	bl	8002e42 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800253c:	6038      	str	r0, [r7, #0]
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 800253e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002542:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002546:	4618      	mov	r0, r3
 8002548:	f005 f8f9 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
 800254c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002550:	f000 fc86 	bl	8002e60 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8002554:	4603      	mov	r3, r0
 8002556:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800255a:	f107 0018 	add.w	r0, r7, #24
 800255e:	9306      	str	r3, [sp, #24]
 8002560:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002564:	9305      	str	r3, [sp, #20]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	9304      	str	r3, [sp, #16]
 800256a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800256e:	9303      	str	r3, [sp, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	9600      	str	r6, [sp, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	462a      	mov	r2, r5
 8002580:	4621      	mov	r1, r4
 8002582:	f7ff f819 	bl	80015b8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      tflite::micro::GetTensorShape(output),
 8002586:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fee0 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 8002590:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fedb 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 800259a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fed6 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 80025a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fed1 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
}
 80025ae:	bf00      	nop
 80025b0:	37bc      	adds	r7, #188	; 0xbc
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025b6 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteDepthwiseConvParams* params, const OpData& data,
                   const TfLiteEvalTensor* input,
                   const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
                   TfLiteEvalTensor* output) {
 80025b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b8:	b0b7      	sub	sp, #220	; 0xdc
 80025ba:	af06      	add	r7, sp, #24
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = -data.input_zero_point;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	425b      	negs	r3, r3
 80025ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const int32_t filter_offset = -data.filter_zero_point;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	425b      	negs	r3, r3
 80025d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const int32_t output_offset = data.output_zero_point;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  tflite::DepthwiseParams op_params;
  // Padding type is ignored, but still set.
  op_params.padding_type = PaddingType::kSame;
 80025e0:	2301      	movs	r3, #1
 80025e2:	753b      	strb	r3, [r7, #20]
  op_params.padding_values.width = data.padding.width;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b21b      	sxth	r3, r3
 80025ea:	82fb      	strh	r3, [r7, #22]
  op_params.padding_values.height = data.padding.height;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	b21b      	sxth	r3, r3
 80025f2:	833b      	strh	r3, [r7, #24]
  op_params.stride_width = params->stride_width;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	83fb      	strh	r3, [r7, #30]
  op_params.stride_height = params->stride_height;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	b21b      	sxth	r3, r3
 8002602:	843b      	strh	r3, [r7, #32]
  op_params.dilation_width_factor = params->dilation_width_factor;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	b21b      	sxth	r3, r3
 800260a:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.dilation_height_factor = params->dilation_height_factor;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	b21b      	sxth	r3, r3
 8002612:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.depth_multiplier = params->depth_multiplier;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	b21b      	sxth	r3, r3
 800261a:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.quantized_activation_min = data.output_activation_min;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	63fb      	str	r3, [r7, #60]	; 0x3c
  op_params.quantized_activation_max = data.output_activation_max;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.input_offset = input_offset;
 8002628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.weights_offset = filter_offset;
 800262e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.output_offset = output_offset;
 8002634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.output_multiplier = data.output_multiplier;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	425b      	negs	r3, r3
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38

  tflite::reference_ops::DepthwiseConv(
      op_params, tflite::micro::GetTensorShape(input),
 8002648:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800264c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002650:	4618      	mov	r0, r3
 8002652:	f005 f874 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 8002656:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800265a:	f000 fc12 	bl	8002e82 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800265e:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<uint8_t>(input),
      tflite::micro::GetTensorShape(filter),
 8002660:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002664:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002668:	4618      	mov	r0, r3
 800266a:	f005 f868 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 800266e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002672:	f000 fc06 	bl	8002e82 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8002676:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<uint8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 8002678:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800267c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8002680:	4618      	mov	r0, r3
 8002682:	f005 f85c 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 8002686:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800268a:	f000 fbda 	bl	8002e42 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800268e:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 8002690:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002694:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002698:	4618      	mov	r0, r3
 800269a:	f005 f850 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::DepthwiseConv(
 800269e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80026a2:	f000 fbfd 	bl	8002ea0 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80026ac:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80026b0:	f107 0014 	add.w	r0, r7, #20
 80026b4:	9304      	str	r3, [sp, #16]
 80026b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026ba:	9303      	str	r3, [sp, #12]
 80026bc:	9502      	str	r5, [sp, #8]
 80026be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	9400      	str	r4, [sp, #0]
 80026c6:	4613      	mov	r3, r2
 80026c8:	4632      	mov	r2, r6
 80026ca:	f7ff facf 	bl	8001c6c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
      tflite::micro::GetTensorShape(output),
 80026ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fe3c 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 80026d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fe37 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 80026e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fe32 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 80026ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fe2d 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<uint8_t>(output));
}
 80026f6:	bf00      	nop
 80026f8:	37c4      	adds	r7, #196	; 0xc4
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002700 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8002700:	b5b0      	push	{r4, r5, r7, lr}
 8002702:	b08c      	sub	sp, #48	; 0x30
 8002704:	af04      	add	r7, sp, #16
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8002712:	f016 fb00 	bl	8018d16 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 800271e:	f016 fafa 	bl	8018d16 <abort>

  auto* params =
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	61fb      	str	r3, [r7, #28]
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	61bb      	str	r3, [r7, #24]

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	6839      	ldr	r1, [r7, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fba8 	bl	8001e8a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800273a:	6178      	str	r0, [r7, #20]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	6839      	ldr	r1, [r7, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fb91 	bl	8001e6a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8002748:	6138      	str	r0, [r7, #16]
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFilterTensor);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fb8a 	bl	8001e6a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8002756:	60f8      	str	r0, [r7, #12]
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 8002758:	6838      	ldr	r0, [r7, #0]
 800275a:	f7ff fab3 	bl	8001cc4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800275e:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kBiasTensor)
 8002760:	2b03      	cmp	r3, #3
 8002762:	d107      	bne.n	8002774 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x74>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fb7d 	bl	8001e6a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8002770:	4603      	mov	r3, r0
 8002772:	e000      	b.n	8002776 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
 8002774:	2300      	movs	r3, #0
          : nullptr;
 8002776:	60bb      	str	r3, [r7, #8]

  // TODO(aselle): Consider whether float conv and quantized conv should be
  // separate ops to avoid dispatch overhead here.
  switch (input->type) {  // Already know in/out types are same.
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	7a1b      	ldrb	r3, [r3, #8]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d021      	beq.n	80027c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
 8002780:	2b09      	cmp	r3, #9
 8002782:	d010      	beq.n	80027a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa6>
 8002784:	2b01      	cmp	r3, #1
 8002786:	d12c      	bne.n	80027e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe2>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, output);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	9303      	str	r3, [sp, #12]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	9302      	str	r3, [sp, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	6839      	ldr	r1, [r7, #0]
 80027a0:	f7ff fde2 	bl	8002368 <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>
      break;
 80027a4:	e02d      	b.n	8002802 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	9303      	str	r3, [sp, #12]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	9302      	str	r3, [sp, #8]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	f7ff fe60 	bl	8002482 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>
                              output);
      break;
 80027c2:	e01e      	b.n	8002802 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, data, input, filter, bias, output);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	9303      	str	r3, [sp, #12]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	9302      	str	r3, [sp, #8]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	6839      	ldr	r1, [r7, #0]
 80027dc:	f7ff feeb 	bl	80025b6 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeP25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_>
      break;
 80027e0:	e00f      	b.n	8002802 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695c      	ldr	r4, [r3, #20]
 80027e6:	687d      	ldr	r5, [r7, #4]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	7a1b      	ldrb	r3, [r3, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fc71 	bl	80010d4 <TfLiteTypeGetName>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	7a1b      	ldrb	r3, [r3, #8]
 80027f8:	4904      	ldr	r1, [pc, #16]	; (800280c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10c>)
 80027fa:	4628      	mov	r0, r5
 80027fc:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>
  }
  return kTfLiteOk;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bdb0      	pop	{r4, r5, r7, pc}
 800280c:	0801bdfc 	.word	0x0801bdfc

08002810 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
 8002810:	b4b0      	push	{r4, r5, r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a07      	ldr	r2, [pc, #28]	; (8002838 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 800281c:	461c      	mov	r4, r3
 800281e:	4615      	mov	r5, r2
 8002820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002824:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bcb0      	pop	{r4, r5, r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	0801be18 	.word	0x0801be18

0800283c <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	da01      	bge.n	8002856 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	e000      	b.n	8002858 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8002856:	687b      	ldr	r3, [r7, #4]
    }
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	ed93 7a00 	vldr	s14, [r3]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002882:	d501      	bpl.n	8002888 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	e000      	b.n	800288a <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002888:	687b      	ldr	r3, [r7, #4]
    }
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	ed87 0a03 	vstr	s0, [r7, #12]
 80028a0:	edc7 0a02 	vstr	s1, [r7, #8]
 80028a4:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 80028a8:	f107 0208 	add.w	r2, r7, #8
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ffd6 	bl	8002864 <_ZSt3maxIfERKT_S2_S2_>
 80028b8:	4602      	mov	r2, r0
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f000 f87c 	bl	80029bc <_ZSt3minIfERKT_S2_S2_>
 80028c4:	4603      	mov	r3, r0
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	ee07 3a90 	vmov	s15, r3
}
 80028cc:	eeb0 0a67 	vmov.f32	s0, s15
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType, typename ExponentType>
inline IntegerType RoundingDivideByPOT(IntegerType x, ExponentType exponent) {
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	2a00      	cmp	r2, #0
 80028e6:	da06      	bge.n	80028f6 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0x1e>
 80028e8:	4b30      	ldr	r3, [pc, #192]	; (80029ac <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xd4>)
 80028ea:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xd8>)
 80028ec:	f240 1171 	movw	r1, #369	; 0x171
 80028f0:	4830      	ldr	r0, [pc, #192]	; (80029b4 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xdc>)
 80028f2:	f016 fa17 	bl	8018d24 <__assert_func>
  assert(exponent <= 31);
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dd06      	ble.n	800290a <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0x32>
 80028fc:	4b2e      	ldr	r3, [pc, #184]	; (80029b8 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xe0>)
 80028fe:	4a2c      	ldr	r2, [pc, #176]	; (80029b0 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xd8>)
 8002900:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8002904:	482b      	ldr	r0, [pc, #172]	; (80029b4 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_+0xdc>)
 8002906:	f016 fa0d 	bl	8018d24 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800290a:	f04f 0101 	mov.w	r1, #1
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	6838      	ldr	r0, [r7, #0]
 8002914:	f1a0 0620 	sub.w	r6, r0, #32
 8002918:	f1c0 0520 	rsb	r5, r0, #32
 800291c:	fa02 f400 	lsl.w	r4, r2, r0
 8002920:	fa01 f606 	lsl.w	r6, r1, r6
 8002924:	4334      	orrs	r4, r6
 8002926:	fa21 f505 	lsr.w	r5, r1, r5
 800292a:	432c      	orrs	r4, r5
 800292c:	fa01 f300 	lsl.w	r3, r1, r0
 8002930:	3b01      	subs	r3, #1
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fac5 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8002938:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800293a:	2000      	movs	r0, #0
 800293c:	f000 fac1 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8002940:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8002942:	2001      	movs	r0, #1
 8002944:	f000 fabd 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8002948:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800294a:	69f9      	ldr	r1, [r7, #28]
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fac3 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8002952:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8002954:	2101      	movs	r1, #1
 8002956:	69f8      	ldr	r0, [r7, #28]
 8002958:	f000 facc 	bl	8002ef4 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800295c:	4604      	mov	r4, r0
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fad6 	bl	8002f12 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8002966:	4603      	mov	r3, r0
 8002968:	6979      	ldr	r1, [r7, #20]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fab4 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8002970:	4603      	mov	r3, r0
  const IntegerType threshold =
 8002972:	4619      	mov	r1, r3
 8002974:	4620      	mov	r0, r4
 8002976:	f000 fae0 	bl	8002f3a <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800297a:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800297c:	6839      	ldr	r1, [r7, #0]
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fab8 	bl	8002ef4 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8002984:	4604      	mov	r4, r0
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	6938      	ldr	r0, [r7, #16]
 800298a:	f000 fae4 	bl	8002f56 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800298e:	4603      	mov	r3, r0
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 faa0 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8002998:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 800299a:	4619      	mov	r1, r3
 800299c:	4620      	mov	r0, r4
 800299e:	f000 facc 	bl	8002f3a <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80029a2:	4603      	mov	r3, r0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3724      	adds	r7, #36	; 0x24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ac:	0801be38 	.word	0x0801be38
 80029b0:	0801eee4 	.word	0x0801eee4
 80029b4:	0801be48 	.word	0x0801be48
 80029b8:	0801be64 	.word	0x0801be64

080029bc <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	ed93 7a00 	vldr	s14, [r3]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029da:	d501      	bpl.n	80029e0 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	e000      	b.n	80029e2 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80029e0:	687b      	ldr	r3, [r7, #4]
    }
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph>:
  static inline void Run(
 80029ee:	b590      	push	{r4, r7, lr}
 80029f0:	b0ad      	sub	sp, #180	; 0xb4
 80029f2:	af02      	add	r7, sp, #8
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
    const int stride_width = params.stride_width;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    const int stride_height = params.stride_height;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const int dilation_width_factor = params.dilation_width_factor;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int dilation_height_factor = params.dilation_height_factor;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002a20:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int pad_width = params.padding_values.width;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a28:	67bb      	str	r3, [r7, #120]	; 0x78
    const int pad_height = params.padding_values.height;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a30:	677b      	str	r3, [r7, #116]	; 0x74
    const int depth_multiplier = params.depth_multiplier;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002a38:	673b      	str	r3, [r7, #112]	; 0x70
    const int32_t output_activation_min = params.quantized_activation_min;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	61fb      	str	r3, [r7, #28]
    const int32_t output_activation_max = params.quantized_activation_max;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	61bb      	str	r3, [r7, #24]
    const int32_t input_offset = params.input_offset;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    const int32_t filter_offset = params.weights_offset;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t output_offset = params.output_offset;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_multiplier = params.output_multiplier;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	663b      	str	r3, [r7, #96]	; 0x60
    const int output_shift = params.output_shift;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	65fb      	str	r3, [r7, #92]	; 0x5c
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8002a64:	68b8      	ldr	r0, [r7, #8]
 8002a66:	f7fe fc89 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d001      	beq.n	8002a74 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x86>
 8002a70:	f016 f951 	bl	8018d16 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8002a74:	6838      	ldr	r0, [r7, #0]
 8002a76:	f7fe fc81 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d001      	beq.n	8002a84 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x96>
 8002a80:	f016 f949 	bl	8018d16 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8002a84:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002a88:	f7fe fc78 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d001      	beq.n	8002a96 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0xa8>
 8002a92:	f016 f940 	bl	8018d16 <abort>
    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	dd01      	ble.n	8002aa2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0xb4>
 8002a9e:	f016 f93a 	bl	8018d16 <abort>
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	68b8      	ldr	r0, [r7, #8]
 8002aac:	f7fe fd31 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8002ab0:	65b8      	str	r0, [r7, #88]	; 0x58
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ab8:	2103      	movs	r1, #3
 8002aba:	6838      	ldr	r0, [r7, #0]
 8002abc:	f7fe fd29 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	617b      	str	r3, [r7, #20]
    const int input_height = input_shape.Dims(1);
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	68b8      	ldr	r0, [r7, #8]
 8002ac8:	f7fe fc64 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002acc:	6578      	str	r0, [r7, #84]	; 0x54
    const int input_width = input_shape.Dims(2);
 8002ace:	2102      	movs	r1, #2
 8002ad0:	68b8      	ldr	r0, [r7, #8]
 8002ad2:	f7fe fc5f 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002ad6:	6538      	str	r0, [r7, #80]	; 0x50
    const int input_depth = input_shape.Dims(3);
 8002ad8:	2103      	movs	r1, #3
 8002ada:	68b8      	ldr	r0, [r7, #8]
 8002adc:	f7fe fc5a 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002ae0:	64f8      	str	r0, [r7, #76]	; 0x4c
    const int filter_height = filter_shape.Dims(1);
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	6838      	ldr	r0, [r7, #0]
 8002ae6:	f7fe fc55 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002aea:	64b8      	str	r0, [r7, #72]	; 0x48
    const int filter_width = filter_shape.Dims(2);
 8002aec:	2102      	movs	r1, #2
 8002aee:	6838      	ldr	r0, [r7, #0]
 8002af0:	f7fe fc50 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002af4:	6478      	str	r0, [r7, #68]	; 0x44
    const int output_height = output_shape.Dims(1);
 8002af6:	2101      	movs	r1, #1
 8002af8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002afc:	f7fe fc4a 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002b00:	6438      	str	r0, [r7, #64]	; 0x40
    const int output_width = output_shape.Dims(2);
 8002b02:	2102      	movs	r1, #2
 8002b04:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002b08:	f7fe fc44 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8002b0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8002b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b12:	fb02 f203 	mul.w	r2, r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x132>
 8002b1c:	f016 f8fb 	bl	8018d16 <abort>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8002b20:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002b24:	f7fe fc7a 	bl	800141c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x146>
 8002b30:	f016 f8f1 	bl	8018d16 <abort>
    for (int b = 0; b < batches; ++b) {
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002b3a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f280 8109 	bge.w	8002d58 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x36a>
      for (int out_y = 0; out_y < output_height; ++out_y) {
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b4c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b52:	429a      	cmp	r2, r3
 8002b54:	f280 80fa 	bge.w	8002d4c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x35e>
        for (int out_x = 0; out_x < output_width; ++out_x) {
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b5e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f280 80eb 	bge.w	8002d40 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x352>
          for (int ic = 0; ic < input_depth; ++ic) {
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b70:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b76:	429a      	cmp	r2, r3
 8002b78:	f280 80dc 	bge.w	8002d34 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x346>
            for (int m = 0; m < depth_multiplier; m++) {
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f280 80cd 	bge.w	8002d28 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x33a>
              const int oc = m + ic * depth_multiplier;
 8002b8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b9c:	4413      	add	r3, r2
 8002b9e:	63bb      	str	r3, [r7, #56]	; 0x38
              const int in_x_origin = (out_x * stride_width) - pad_width;
 8002ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ba4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002ba8:	fb02 f203 	mul.w	r2, r2, r3
 8002bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y_origin = (out_y * stride_height) - pad_height;
 8002bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bb6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002bba:	fb02 f203 	mul.w	r2, r2, r3
 8002bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
              int32_t acc = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	da5e      	bge.n	8002c96 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x2a8>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002bde:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be4:	429a      	cmp	r2, r3
 8002be6:	da50      	bge.n	8002c8a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x29c>
                      in_x_origin + dilation_width_factor * filter_x;
 8002be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
                  const int in_x =
 8002bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf6:	4413      	add	r3, r2
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
                      in_y_origin + dilation_height_factor * filter_y;
 8002bfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bfc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c00:	fb02 f303 	mul.w	r3, r2, r3
                  const int in_y =
 8002c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c06:	4413      	add	r3, r2
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db36      	blt.n	8002c7e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
 8002c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c14:	429a      	cmp	r2, r3
 8002c16:	da32      	bge.n	8002c7e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db2f      	blt.n	8002c7e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
 8002c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c22:	429a      	cmp	r2, r3
 8002c24:	da2b      	bge.n	8002c7e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x290>
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8002c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c30:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c34:	68b8      	ldr	r0, [r7, #8]
 8002c36:	f7fe fc14 	bl	8001462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	461a      	mov	r2, r3
                    int32_t input_val =
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
                    int32_t filter_val = filter_data[Offset(
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c52:	2100      	movs	r1, #0
 8002c54:	6838      	ldr	r0, [r7, #0]
 8002c56:	f7fe fc04 	bl	8001462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c62:	4413      	add	r3, r2
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	623b      	str	r3, [r7, #32]
                    acc += (filter_val + filter_offset) *
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c6c:	4413      	add	r3, r2
                           (input_val + input_offset);
 8002c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c72:	440a      	add	r2, r1
                    acc += (filter_val + filter_offset) *
 8002c74:	fb02 f203 	mul.w	r2, r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8002c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c82:	3301      	adds	r3, #1
 8002c84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c88:	e7a9      	b.n	8002bde <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1f0>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8002c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c94:	e79b      	b.n	8002bce <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x1e0>
              if (bias_data) {
 8002c96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x2c2>
                acc += bias_data[oc];
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ca6:	4413      	add	r3, r2
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
              acc = DepthwiseConvRound<output_rounding>(acc, output_multiplier,
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cb4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe ffc8 	bl	8001c4c <_ZN6tflite13reference_ops14depthwise_conv18DepthwiseConvRoundILNS_27DepthwiseConvOutputRoundingE1EEEllli>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	613b      	str	r3, [r7, #16]
              acc += output_offset;
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cc4:	4413      	add	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
              acc = std::max(acc, output_activation_min);
 8002cc8:	f107 021c 	add.w	r2, r7, #28
 8002ccc:	f107 0310 	add.w	r3, r7, #16
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe fab8 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	613b      	str	r3, [r7, #16]
              acc = std::min(acc, output_activation_max);
 8002cde:	f107 0218 	add.w	r2, r7, #24
 8002ce2:	f107 0310 	add.w	r3, r7, #16
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fda7 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	613b      	str	r3, [r7, #16]
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8002cf4:	693c      	ldr	r4, [r7, #16]
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cfe:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d06:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002d0a:	f7fe fbaa 	bl	8001462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d16:	4413      	add	r3, r2
 8002d18:	b2e2      	uxtb	r2, r4
 8002d1a:	701a      	strb	r2, [r3, #0]
            for (int m = 0; m < depth_multiplier; m++) {
 8002d1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d20:	3301      	adds	r3, #1
 8002d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d26:	e72c      	b.n	8002b82 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x194>
          for (int ic = 0; ic < input_depth; ++ic) {
 8002d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d32:	e71d      	b.n	8002b70 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x182>
        for (int out_x = 0; out_x < output_width; ++out_x) {
 8002d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d3e:	e70e      	b.n	8002b5e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x170>
      for (int out_y = 0; out_y < output_height; ++out_y) {
 8002d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d44:	3301      	adds	r3, #1
 8002d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d4a:	e6ff      	b.n	8002b4c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x15e>
    for (int b = 0; b < batches; ++b) {
 8002d4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d50:	3301      	adds	r3, #1
 8002d52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002d56:	e6f0      	b.n	8002b3a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKlSA_Ph+0x14c>
  }
 8002d58:	bf00      	nop
 8002d5a:	37ac      	adds	r7, #172	; 0xac
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd90      	pop	{r4, r7, pc}

08002d60 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d10b      	bne.n	8002d8c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8002d7c:	f7fe fa4a 	bl	8001214 <_ZNSt14numeric_limitsIfE3maxEv>
 8002d80:	eef0 7a40 	vmov.f32	s15, s0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8002d8a:	e023      	b.n	8002dd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d107      	bne.n	8002da2 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8002d9e:	601a      	str	r2, [r3, #0]
}
 8002da0:	e018      	b.n	8002dd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d107      	bne.n	8002db8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8002dac:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002db4:	601a      	str	r2, [r3, #0]
}
 8002db6:	e00d      	b.n	8002dd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8002db8:	f7fe fa3a 	bl	8001230 <_ZNSt14numeric_limitsIfE6lowestEv>
 8002dbc:	eef0 7a40 	vmov.f32	s15, s0
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8002dc6:	f7fe fa25 	bl	8001214 <_ZNSt14numeric_limitsIfE3maxEv>
 8002dca:	eef0 7a40 	vmov.f32	s15, s0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	edc3 7a00 	vstr	s15, [r3]
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40c00000 	.word	0x40c00000
 8002de0:	bf800000 	.word	0xbf800000

08002de4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8002df2:	f015 ff90 	bl	8018d16 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	e000      	b.n	8002e18 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8002e32:	f015 ff70 	bl	8018d16 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8002e50:	f015 ff61 	bl	8018d16 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	e000      	b.n	8002e76 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 8002e90:	f015 ff41 	bl	8018d16 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	e000      	b.n	8002eb6 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  return x;
 8002eca:	687b      	ldr	r3, [r7, #4]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  return a & b;
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4013      	ands	r3, r2
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	fa42 f303 	asr.w	r3, r2, r3
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	bfb4      	ite	lt
 8002f24:	2301      	movlt	r3, #1
 8002f26:	2300      	movge	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f827 	bl	8002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8002f30:	4603      	mov	r3, r0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
  return a + b;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	4413      	add	r3, r2
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	bfcc      	ite	gt
 8002f68:	2301      	movgt	r3, #1
 8002f6a:	2300      	movle	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f805 	bl	8002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f000 f807 	bl	8002fa0 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8002f92:	4603      	mov	r3, r0
 8002f94:	e000      	b.n	8002f98 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ~a;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	43db      	mvns	r3, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8002fb8:	b40e      	push	{r1, r2, r3}
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8002fc2:	f107 0320 	add.w	r3, r7, #32
 8002fc6:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3308      	adds	r3, #8
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	69f9      	ldr	r1, [r7, #28]
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
 8002fd8:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fe6:	b003      	add	sp, #12
 8002fe8:	4770      	bx	lr

08002fea <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8002fea:	b40c      	push	{r2, r3}
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8002ff6:	f107 031c 	add.w	r3, r7, #28
 8002ffa:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3308      	adds	r3, #8
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	69b9      	ldr	r1, [r7, #24]
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	4798      	blx	r3
 800300c:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800301a:	b002      	add	sp, #8
 800301c:	4770      	bx	lr

0800301e <_ZN15FeatureProviderC1EiPa>:

#include "audio_provider.h"
#include "micro_features_generator.h"
#include "micro_model_settings.h"

FeatureProvider::FeatureProvider(int feature_size, int8_t* feature_data)
 800301e:	b480      	push	{r7}
 8003020:	b087      	sub	sp, #28
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
    : feature_size_(feature_size),
      feature_data_(feature_data),
      is_first_run_(true) {
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	721a      	strb	r2, [r3, #8]
  // Initialize the feature data to default values.
  for (int n = 0; n < feature_size_; ++n) {
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	429a      	cmp	r2, r3
 8003048:	da09      	bge.n	800305e <_ZN15FeatureProviderC1EiPa+0x40>
    feature_data_[n] = 0;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	4413      	add	r3, r2
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
  for (int n = 0; n < feature_size_; ++n) {
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e7f0      	b.n	8003040 <_ZN15FeatureProviderC1EiPa+0x22>
  }
}
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <_ZN15FeatureProviderD1Ev>:

FeatureProvider::~FeatureProvider() {}
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs>:

TfLiteStatus FeatureProvider::PopulateFeatureData(
    tflite::ErrorReporter* error_reporter, int32_t last_time_in_ms,
    int32_t time_in_ms, int* how_many_new_slices, int16_t* samples) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b09a      	sub	sp, #104	; 0x68
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
  if (feature_size_ != kFeatureElementCount) {
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f5b3 6ff5 	cmp.w	r3, #1960	; 0x7a8
 800309a:	d009      	beq.n	80030b0 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	f44f 63f5 	mov.w	r3, #1960	; 0x7a8
 80030a4:	4968      	ldr	r1, [pc, #416]	; (8003248 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1c4>)
 80030a6:	68b8      	ldr	r0, [r7, #8]
 80030a8:	f7ff ff86 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Requested feature_data_ size %d doesn't match %d",
                         feature_size_, kFeatureElementCount);
    return kTfLiteError;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0c6      	b.n	800323e <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1ba>
  }

  // Quantize the time into steps as long as each window stride, so we can
  // figure out which audio data we need to fetch.
  const int last_step = (last_time_in_ms / kFeatureSliceStrideMs);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a66      	ldr	r2, [pc, #408]	; (800324c <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1c8>)
 80030b4:	fb82 1203 	smull	r1, r2, r2, r3
 80030b8:	10d2      	asrs	r2, r2, #3
 80030ba:	17db      	asrs	r3, r3, #31
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int current_step = (time_in_ms / kFeatureSliceStrideMs);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4a62      	ldr	r2, [pc, #392]	; (800324c <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1c8>)
 80030c4:	fb82 1203 	smull	r1, r2, r2, r3
 80030c8:	10d2      	asrs	r2, r2, #3
 80030ca:	17db      	asrs	r3, r3, #31
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48

  int slices_needed = current_step - last_step;
 80030d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  // If this is the first call, make sure we don't use any cached information.
  if (is_first_run_) {
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	7a1b      	ldrb	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d011      	beq.n	8003104 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x80>
    TfLiteStatus init_status = InitializeMicroFeatures(error_reporter);
 80030e0:	68b8      	ldr	r0, [r7, #8]
 80030e2:	f00a fadd 	bl	800d6a0 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (init_status != kTfLiteOk) {
 80030ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x76>
      return init_status;
 80030f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030f8:	e0a1      	b.n	800323e <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1ba>
    }
    is_first_run_ = false;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	721a      	strb	r2, [r3, #8]
    slices_needed = kFeatureSliceCount;
 8003100:	2331      	movs	r3, #49	; 0x31
 8003102:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  if (slices_needed > kFeatureSliceCount) {
 8003104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003106:	2b31      	cmp	r3, #49	; 0x31
 8003108:	dd01      	ble.n	800310e <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x8a>
    slices_needed = kFeatureSliceCount;
 800310a:	2331      	movs	r3, #49	; 0x31
 800310c:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  slices_needed = kFeatureSliceCount;
 800310e:	2331      	movs	r3, #49	; 0x31
 8003110:	65fb      	str	r3, [r7, #92]	; 0x5c
  *how_many_new_slices = slices_needed;
 8003112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003114:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003116:	601a      	str	r2, [r3, #0]

  const int slices_to_keep = kFeatureSliceCount - slices_needed;
 8003118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311a:	f1c3 0331 	rsb	r3, r3, #49	; 0x31
 800311e:	643b      	str	r3, [r7, #64]	; 0x40
  const int slices_to_drop = kFeatureSliceCount - slices_to_keep;
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	f1c3 0331 	rsb	r3, r3, #49	; 0x31
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
  // +-----------+   --  --    +-----------+
  // | data@60ms | --  --      |  <empty>  |
  // +-----------+   --        +-----------+
  // | data@80ms | --          |  <empty>  |
  // +-----------+             +-----------+
  if (slices_to_keep > 0) {
 8003128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	dd31      	ble.n	8003192 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x10e>
    for (int dest_slice = 0; dest_slice < slices_to_keep; ++dest_slice) {
 800312e:	2300      	movs	r3, #0
 8003130:	65bb      	str	r3, [r7, #88]	; 0x58
 8003132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003136:	429a      	cmp	r2, r3
 8003138:	da2b      	bge.n	8003192 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x10e>
      int8_t* dest_slice_data =
          feature_data_ + (dest_slice * kFeatureSliceSize);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
      int8_t* dest_slice_data =
 8003148:	440b      	add	r3, r1
 800314a:	63bb      	str	r3, [r7, #56]	; 0x38
      const int src_slice = dest_slice + slices_to_drop;
 800314c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003150:	4413      	add	r3, r2
 8003152:	637b      	str	r3, [r7, #52]	; 0x34
      const int8_t* src_slice_data =
          feature_data_ + (src_slice * kFeatureSliceSize);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
      const int8_t* src_slice_data =
 8003162:	440b      	add	r3, r1
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
      for (int i = 0; i < kFeatureSliceSize; ++i) {
 8003166:	2300      	movs	r3, #0
 8003168:	657b      	str	r3, [r7, #84]	; 0x54
 800316a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800316c:	2b27      	cmp	r3, #39	; 0x27
 800316e:	dc0c      	bgt.n	800318a <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x106>
        dest_slice_data[i] = src_slice_data[i];
 8003170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003174:	441a      	add	r2, r3
 8003176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800317a:	440b      	add	r3, r1
 800317c:	f992 2000 	ldrsb.w	r2, [r2]
 8003180:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < kFeatureSliceSize; ++i) {
 8003182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003184:	3301      	adds	r3, #1
 8003186:	657b      	str	r3, [r7, #84]	; 0x54
 8003188:	e7ef      	b.n	800316a <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0xe6>
    for (int dest_slice = 0; dest_slice < slices_to_keep; ++dest_slice) {
 800318a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318c:	3301      	adds	r3, #1
 800318e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003190:	e7cf      	b.n	8003132 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0xae>
      }
    }
  }
  // Any slices that need to be filled in with feature data have their
  // appropriate audio data pulled, and features calculated for that slice.
  if (slices_needed > 0) {
 8003192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003194:	2b00      	cmp	r3, #0
 8003196:	dd51      	ble.n	800323c <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1b8>
    for (int new_slice = slices_to_keep; new_slice < kFeatureSliceCount; ++new_slice)
 8003198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319a:	653b      	str	r3, [r7, #80]	; 0x50
 800319c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800319e:	2b30      	cmp	r3, #48	; 0x30
 80031a0:	dc4c      	bgt.n	800323c <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1b8>
    {
      const int new_step = (current_step - kFeatureSliceCount + 1) + new_slice;
 80031a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a4:	3b30      	subs	r3, #48	; 0x30
 80031a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031a8:	4413      	add	r3, r2
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      const int32_t slice_start_ms = (new_step * kFeatureSliceStrideMs);
 80031ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
      int16_t* audio_samples = nullptr;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61fb      	str	r3, [r7, #28]
      int audio_samples_size = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]

      GetAudioSamples(error_reporter, (slice_start_ms > 0 ? slice_start_ms : 0),
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 80031c6:	f107 0218 	add.w	r2, r7, #24
 80031ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	f107 031c 	add.w	r3, r7, #28
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	221e      	movs	r2, #30
 80031d8:	68b8      	ldr	r0, [r7, #8]
 80031da:	f7fd ff1f 	bl	800101c <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPsS3_>
                      kFeatureSliceDurationMs, &audio_samples_size,
                      &audio_samples, samples);
      if (audio_samples_size < kMaxAudioSampleSize) {
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e4:	da08      	bge.n	80031f8 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x174>
        TF_LITE_REPORT_ERROR(error_reporter,
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ec:	4918      	ldr	r1, [pc, #96]	; (8003250 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1cc>)
 80031ee:	68b8      	ldr	r0, [r7, #8]
 80031f0:	f7ff fee2 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Audio data size %d too small, want %d",
                             audio_samples_size, kMaxAudioSampleSize);
        return kTfLiteError;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e022      	b.n	800323e <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1ba>
      }
      int8_t* new_slice_data = feature_data_ + (new_slice * kFeatureSliceSize);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
      size_t num_samples_read;
      TfLiteStatus generate_status = GenerateMicroFeatures(
 800320a:	69f9      	ldr	r1, [r7, #28]
 800320c:	69ba      	ldr	r2, [r7, #24]
          error_reporter, audio_samples, audio_samples_size, kFeatureSliceSize,
          new_slice_data, &num_samples_read);
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2328      	movs	r3, #40	; 0x28
 800321a:	68b8      	ldr	r0, [r7, #8]
 800321c:	f00a fa96 	bl	800d74c <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (generate_status != kTfLiteOk) {
 8003226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1b0>
        return generate_status;
 800322e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003232:	e004      	b.n	800323e <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x1ba>
    for (int new_slice = slices_to_keep; new_slice < kFeatureSliceCount; ++new_slice)
 8003234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003236:	3301      	adds	r3, #1
 8003238:	653b      	str	r3, [r7, #80]	; 0x50
 800323a:	e7af      	b.n	800319c <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs+0x118>
      }
    }
  }
  return kTfLiteOk;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3760      	adds	r7, #96	; 0x60
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	0801be74 	.word	0x0801be74
 800324c:	66666667 	.word	0x66666667
 8003250:	0801bea8 	.word	0x0801bea8

08003254 <FftCompute>:
#define FIXED_POINT 16
#include "kiss_fft.h"
#include "kiss_fftr.h"

void FftCompute(struct FftState* state, const int16_t* input,
                int input_scale_shift) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  const size_t input_size = state->input_size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	61bb      	str	r3, [r7, #24]
  const size_t fft_size = state->fft_size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	617b      	str	r3, [r7, #20]

  int16_t* fft_input = state->input;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	613b      	str	r3, [r7, #16]
  // First, scale the input by the given shift.
  size_t i;
  for (i = 0; i < input_size; ++i) {
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	429a      	cmp	r2, r3
 800327c:	d214      	bcs.n	80032a8 <FftCompute+0x54>
    fft_input[i] = static_cast<int16_t>(static_cast<uint16_t>(input[i])
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	4413      	add	r3, r2
 8003286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800328a:	b29b      	uxth	r3, r3
 800328c:	461a      	mov	r2, r3
                                        << input_scale_shift);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	fa02 f103 	lsl.w	r1, r2, r3
    fft_input[i] = static_cast<int16_t>(static_cast<uint16_t>(input[i])
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	b20a      	sxth	r2, r1
 800329e:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < input_size; ++i) {
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	3301      	adds	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	e7e6      	b.n	8003276 <FftCompute+0x22>
  }
  // Zero out whatever else remains in the top part of the input.
  for (; i < fft_size; ++i) {
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d209      	bcs.n	80032c4 <FftCompute+0x70>
    fft_input[i] = 0;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	2200      	movs	r2, #0
 80032ba:	801a      	strh	r2, [r3, #0]
  for (; i < fft_size; ++i) {
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3301      	adds	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	e7f1      	b.n	80032a8 <FftCompute+0x54>
  }

  // Apply the FFT.
  kiss_fftr(reinterpret_cast<kiss_fftr_cfg>(state->scratch),
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6918      	ldr	r0, [r3, #16]
            state->input,
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6819      	ldr	r1, [r3, #0]
            reinterpret_cast<kiss_fft_cpx*>(state->output));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
  kiss_fftr(reinterpret_cast<kiss_fftr_cfg>(state->scratch),
 80032d0:	461a      	mov	r2, r3
 80032d2:	f006 f975 	bl	80095c0 <kiss_fftr>
}
 80032d6:	bf00      	nop
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <FftInit>:

void FftInit(struct FftState* state) {
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  // All the initialization is done in FftPopulateState()
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <FftReset>:

void FftReset(struct FftState* state) {
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  memset(state->input, 0, state->fft_size * sizeof(*state->input));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	461a      	mov	r2, r3
 8003306:	2100      	movs	r1, #0
 8003308:	f015 fe80 	bl	801900c <memset>
  memset(state->output, 0, (state->fft_size / 2 + 1) * sizeof(*state->output));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6858      	ldr	r0, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	3301      	adds	r3, #1
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	461a      	mov	r2, r3
 800331c:	2100      	movs	r1, #0
 800331e:	f015 fe75 	bl	801900c <memset>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <FftPopulateState>:

#define FIXED_POINT 16
#include "kiss_fft.h"
#include "kiss_fftr.h"

int FftPopulateState(struct FftState* state, size_t input_size) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  state->input_size = input_size;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	60da      	str	r2, [r3, #12]
  state->fft_size = 1;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	609a      	str	r2, [r3, #8]
  while (state->fft_size < state->input_size) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	429a      	cmp	r2, r3
 800334c:	d205      	bcs.n	800335a <FftPopulateState+0x2e>
    state->fft_size <<= 1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	005a      	lsls	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	609a      	str	r2, [r3, #8]
  while (state->fft_size < state->input_size) {
 8003358:	e7f3      	b.n	8003342 <FftPopulateState+0x16>
  }

  state->input = reinterpret_cast<int16_t*>(
      malloc(state->fft_size * sizeof(*state->input)));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4618      	mov	r0, r3
 8003362:	f015 fe1f 	bl	8018fa4 <malloc>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
  state->input = reinterpret_cast<int16_t*>(
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	601a      	str	r2, [r3, #0]
  if (state->input == nullptr) {
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <FftPopulateState+0x5e>
    fprintf(stderr, "Failed to alloc fft input buffer\n");
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <FftPopulateState+0x138>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2221      	movs	r2, #33	; 0x21
 800337e:	2101      	movs	r1, #1
 8003380:	4839      	ldr	r0, [pc, #228]	; (8003468 <FftPopulateState+0x13c>)
 8003382:	f015 fddd 	bl	8018f40 <fwrite>
    return 0;
 8003386:	2300      	movs	r3, #0
 8003388:	e067      	b.n	800345a <FftPopulateState+0x12e>
  }

  state->output = reinterpret_cast<complex_int16_t*>(
      malloc((state->fft_size / 2 + 1) * sizeof(*state->output) * 2));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	3302      	adds	r3, #2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4618      	mov	r0, r3
 8003398:	f015 fe04 	bl	8018fa4 <malloc>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
  state->output = reinterpret_cast<complex_int16_t*>(
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	605a      	str	r2, [r3, #4]
  if (state->output == nullptr) {
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <FftPopulateState+0x94>
    fprintf(stderr, "Failed to alloc fft output buffer\n");
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <FftPopulateState+0x138>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2222      	movs	r2, #34	; 0x22
 80033b4:	2101      	movs	r1, #1
 80033b6:	482d      	ldr	r0, [pc, #180]	; (800346c <FftPopulateState+0x140>)
 80033b8:	f015 fdc2 	bl	8018f40 <fwrite>
    return 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	e04c      	b.n	800345a <FftPopulateState+0x12e>
  }

  // Ask kissfft how much memory it wants.
  size_t scratch_size = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
  kiss_fftr_cfg kfft_cfg = kiss_fftr_alloc(
      state->fft_size, 0, nullptr, &scratch_size);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
  kiss_fftr_cfg kfft_cfg = kiss_fftr_alloc(
 80033c8:	4618      	mov	r0, r3
      state->fft_size, 0, nullptr, &scratch_size);
 80033ca:	f107 0308 	add.w	r3, r7, #8
 80033ce:	2200      	movs	r2, #0
 80033d0:	2100      	movs	r1, #0
 80033d2:	f006 f815 	bl	8009400 <kiss_fftr_alloc>
 80033d6:	60f8      	str	r0, [r7, #12]
  if (kfft_cfg != nullptr) {
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <FftPopulateState+0xc6>
    fprintf(stderr, "Kiss memory sizing failed.\n");
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <FftPopulateState+0x138>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	221b      	movs	r2, #27
 80033e6:	2101      	movs	r1, #1
 80033e8:	4821      	ldr	r0, [pc, #132]	; (8003470 <FftPopulateState+0x144>)
 80033ea:	f015 fda9 	bl	8018f40 <fwrite>
    return 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e033      	b.n	800345a <FftPopulateState+0x12e>
  }
  state->scratch = malloc(scratch_size);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f015 fdd5 	bl	8018fa4 <malloc>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	611a      	str	r2, [r3, #16]
  if (state->scratch == nullptr) {
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <FftPopulateState+0xf2>
    fprintf(stderr, "Failed to alloc fft scratch buffer\n");
 800340a:	4b16      	ldr	r3, [pc, #88]	; (8003464 <FftPopulateState+0x138>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2223      	movs	r2, #35	; 0x23
 8003412:	2101      	movs	r1, #1
 8003414:	4817      	ldr	r0, [pc, #92]	; (8003474 <FftPopulateState+0x148>)
 8003416:	f015 fd93 	bl	8018f40 <fwrite>
    return 0;
 800341a:	2300      	movs	r3, #0
 800341c:	e01d      	b.n	800345a <FftPopulateState+0x12e>
  }
  state->scratch_size = scratch_size;
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	615a      	str	r2, [r3, #20]
  // Let kissfft configure the scratch space we just allocated
  kfft_cfg = kiss_fftr_alloc(state->fft_size, 0,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	f107 0308 	add.w	r3, r7, #8
 8003432:	2100      	movs	r1, #0
 8003434:	f005 ffe4 	bl	8009400 <kiss_fftr_alloc>
 8003438:	60f8      	str	r0, [r7, #12]
                                              state->scratch, &scratch_size);
  if (kfft_cfg != state->scratch) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d009      	beq.n	8003458 <FftPopulateState+0x12c>
    fprintf(stderr, "Kiss memory preallocation strategy failed.\n");
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <FftPopulateState+0x138>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	222b      	movs	r2, #43	; 0x2b
 800344c:	2101      	movs	r1, #1
 800344e:	480a      	ldr	r0, [pc, #40]	; (8003478 <FftPopulateState+0x14c>)
 8003450:	f015 fd76 	bl	8018f40 <fwrite>
    return 0;
 8003454:	2300      	movs	r3, #0
 8003456:	e000      	b.n	800345a <FftPopulateState+0x12e>
  }
  return 1;
 8003458:	2301      	movs	r3, #1
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000018 	.word	0x20000018
 8003468:	0801bed0 	.word	0x0801bed0
 800346c:	0801bef4 	.word	0x0801bef4
 8003470:	0801bf18 	.word	0x0801bf18
 8003474:	0801bf34 	.word	0x0801bf34
 8003478:	0801bf58 	.word	0x0801bf58

0800347c <CountLeadingZeros32>:
  if (n >> 8) zeroes -= 8, n >>= 8;
  if (n >> 4) zeroes -= 4, n >>= 4;
  return "\4\3\2\2\1\1\1\1\0\0\0\0\0\0\0"[n] + zeroes;
}

static inline int CountLeadingZeros32(uint32_t n) {
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  }
  return 32;
#elif defined(__GNUC__)

  // Handle 0 as a special case because __builtin_clz(0) is undefined.
  if (n == 0) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <CountLeadingZeros32+0x12>
    return 32;
 800348a:	2320      	movs	r3, #32
 800348c:	e002      	b.n	8003494 <CountLeadingZeros32+0x18>
  }
  return __builtin_clz(n);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	fab3 f383 	clz	r3, r3
#else
  return CountLeadingZeros32Slow(n);
#endif
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <MostSignificantBit32>:

static inline int MostSignificantBit32(uint32_t n) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return 32 - CountLeadingZeros32(n);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ffe7 	bl	800347c <CountLeadingZeros32>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f1c3 0320 	rsb	r3, r3, #32
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <CountLeadingZeros64>:
  if (n >> 8) zeroes -= 8, n >>= 8;
  if (n >> 4) zeroes -= 4, n >>= 4;
  return "\4\3\2\2\1\1\1\1\0\0\0\0\0\0\0"[n] + zeroes;
}

static inline int CountLeadingZeros64(uint64_t n) {
 80034bc:	b490      	push	{r4, r7}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	e9c7 0100 	strd	r0, r1, [r7]
  }
  return 64;
#elif defined(__GNUC__)

  // Handle 0 as a special case because __builtin_clzll(0) is undefined.
  if (n == 0) {
 80034c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80034ca:	4323      	orrs	r3, r4
 80034cc:	d101      	bne.n	80034d2 <CountLeadingZeros64+0x16>
    return 64;
 80034ce:	2340      	movs	r3, #64	; 0x40
 80034d0:	e009      	b.n	80034e6 <CountLeadingZeros64+0x2a>
  }
  return __builtin_clzll(n);
 80034d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80034d6:	2c00      	cmp	r4, #0
 80034d8:	d002      	beq.n	80034e0 <CountLeadingZeros64+0x24>
 80034da:	fab4 f384 	clz	r3, r4
 80034de:	e002      	b.n	80034e6 <CountLeadingZeros64+0x2a>
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	3320      	adds	r3, #32
#else
  return CountLeadingZeros64Slow(n);
#endif
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc90      	pop	{r4, r7}
 80034ee:	4770      	bx	lr

080034f0 <MostSignificantBit64>:

static inline int MostSignificantBit64(uint64_t n) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	e9c7 0100 	strd	r0, r1, [r7]
  return 64 - CountLeadingZeros64(n);
 80034fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034fe:	f7ff ffdd 	bl	80034bc <CountLeadingZeros64>
 8003502:	4603      	mov	r3, r0
 8003504:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <FilterbankConvertFftComplexToEnergy>:

#include "bits.h"

void FilterbankConvertFftComplexToEnergy(struct FilterbankState* state,
                                         struct complex_int16_t* fft_output,
                                         int32_t* energy) {
 8003510:	b480      	push	{r7}
 8003512:	b08b      	sub	sp, #44	; 0x2c
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  const int end_index = state->end_index;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	623b      	str	r3, [r7, #32]
  int i;
  energy += state->start_index;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	607b      	str	r3, [r7, #4]
  fft_output += state->start_index;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	4413      	add	r3, r2
 8003538:	60bb      	str	r3, [r7, #8]
  for (i = state->start_index; i < end_index; ++i) {
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	e01c      	b.n	800357c <FilterbankConvertFftComplexToEnergy+0x6c>
    const int32_t real = fft_output->real;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003548:	61fb      	str	r3, [r7, #28]
    const int32_t imag = fft_output->imag;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003550:	61bb      	str	r3, [r7, #24]
    fft_output++;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3304      	adds	r3, #4
 8003556:	60bb      	str	r3, [r7, #8]
    const uint32_t mag_squared = (real * real) + (imag * imag);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	fb02 f203 	mul.w	r2, r2, r3
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	69b9      	ldr	r1, [r7, #24]
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	4413      	add	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
    *energy++ = mag_squared;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	1d1a      	adds	r2, r3, #4
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	601a      	str	r2, [r3, #0]
  for (i = state->start_index; i < end_index; ++i) {
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	3301      	adds	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	429a      	cmp	r2, r3
 8003582:	dbde      	blt.n	8003542 <FilterbankConvertFftComplexToEnergy+0x32>
  }
}
 8003584:	bf00      	nop
 8003586:	372c      	adds	r7, #44	; 0x2c
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <FilterbankAccumulateChannels>:

void FilterbankAccumulateChannels(struct FilterbankState* state,
                                  const int32_t* energy) {
 8003590:	b4f0      	push	{r4, r5, r6, r7}
 8003592:	b092      	sub	sp, #72	; 0x48
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint64_t* work = state->work;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
  uint64_t weight_accumulator = 0;
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	f04f 0400 	mov.w	r4, #0
 80035a8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  uint64_t unweight_accumulator = 0;
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	f04f 0400 	mov.w	r4, #0
 80035b4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

  const int16_t* channel_frequency_starts = state->channel_frequency_starts;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  const int16_t* channel_weight_starts = state->channel_weight_starts;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
  const int16_t* channel_widths = state->channel_widths;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24

  int num_channels_plus_1 = state->num_channels + 1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3301      	adds	r3, #1
 80035d0:	60fb      	str	r3, [r7, #12]
  int i;
  for (i = 0; i < num_channels_plus_1; ++i) {
 80035d2:	2300      	movs	r3, #0
 80035d4:	623b      	str	r3, [r7, #32]
 80035d6:	e07a      	b.n	80036ce <FilterbankAccumulateChannels+0x13e>
    const int32_t* magnitudes = energy + *channel_frequency_starts++;
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	1c9a      	adds	r2, r3, #2
 80035dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	61fb      	str	r3, [r7, #28]
    const int16_t* weights = state->weights + *channel_weight_starts;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
    const int16_t* unweights = state->unweights + *channel_weight_starts++;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	1c99      	adds	r1, r3, #2
 8003602:	62b9      	str	r1, [r7, #40]	; 0x28
 8003604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
    const int width = *channel_widths++;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	627a      	str	r2, [r7, #36]	; 0x24
 8003614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003618:	60bb      	str	r3, [r7, #8]
    int j;
    for (j = 0; j < width; ++j) {
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	e03d      	b.n	800369c <FilterbankAccumulateChannels+0x10c>
      weight_accumulator += *weights++ * ((uint64_t)*magnitudes);
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	1c9a      	adds	r2, r3, #2
 8003624:	61ba      	str	r2, [r7, #24]
 8003626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800362a:	b219      	sxth	r1, r3
 800362c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8003638:	fb03 f502 	mul.w	r5, r3, r2
 800363c:	fb01 f004 	mul.w	r0, r1, r4
 8003640:	4428      	add	r0, r5
 8003642:	fba1 5603 	umull	r5, r6, r1, r3
 8003646:	1982      	adds	r2, r0, r6
 8003648:	4616      	mov	r6, r2
 800364a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800364e:	186b      	adds	r3, r5, r1
 8003650:	eb46 0402 	adc.w	r4, r6, r2
 8003654:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      unweight_accumulator += *unweights++ * ((uint64_t)*magnitudes);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	1c9a      	adds	r2, r3, #2
 800365c:	617a      	str	r2, [r7, #20]
 800365e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003662:	b219      	sxth	r1, r3
 8003664:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8003670:	fb03 f502 	mul.w	r5, r3, r2
 8003674:	fb01 f004 	mul.w	r0, r1, r4
 8003678:	4428      	add	r0, r5
 800367a:	fba1 5603 	umull	r5, r6, r1, r3
 800367e:	1982      	adds	r2, r0, r6
 8003680:	4616      	mov	r6, r2
 8003682:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003686:	186b      	adds	r3, r5, r1
 8003688:	eb46 0402 	adc.w	r4, r6, r2
 800368c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      ++magnitudes;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3304      	adds	r3, #4
 8003694:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < width; ++j) {
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	3301      	adds	r3, #1
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	dbbd      	blt.n	8003620 <FilterbankAccumulateChannels+0x90>
    }
    *work++ = weight_accumulator;
 80036a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036a6:	f102 0308 	add.w	r3, r2, #8
 80036aa:	647b      	str	r3, [r7, #68]	; 0x44
 80036ac:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80036b0:	e9c2 3400 	strd	r3, r4, [r2]
    weight_accumulator = unweight_accumulator;
 80036b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80036b8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    unweight_accumulator = 0;
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	f04f 0400 	mov.w	r4, #0
 80036c4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  for (i = 0; i < num_channels_plus_1; ++i) {
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	3301      	adds	r3, #1
 80036cc:	623b      	str	r3, [r7, #32]
 80036ce:	6a3a      	ldr	r2, [r7, #32]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	db80      	blt.n	80035d8 <FilterbankAccumulateChannels+0x48>
  }
}
 80036d6:	bf00      	nop
 80036d8:	3748      	adds	r7, #72	; 0x48
 80036da:	46bd      	mov	sp, r7
 80036dc:	bcf0      	pop	{r4, r5, r6, r7}
 80036de:	4770      	bx	lr

080036e0 <Sqrt32>:

static uint16_t Sqrt32(uint32_t num) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if (num == 0) {
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <Sqrt32+0x12>
    return 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e047      	b.n	8003782 <Sqrt32+0xa2>
  }
  uint32_t res = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  int max_bit_number = 32 - MostSignificantBit32(num);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff fed2 	bl	80034a0 <MostSignificantBit32>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f1c3 0320 	rsb	r3, r3, #32
 8003702:	60bb      	str	r3, [r7, #8]
  max_bit_number |= 1;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	60bb      	str	r3, [r7, #8]
  uint32_t bit = 1U << (31 - max_bit_number);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f1c3 031f 	rsb	r3, r3, #31
 8003712:	2201      	movs	r2, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	613b      	str	r3, [r7, #16]
  int iterations = (31 - max_bit_number) / 2 + 1;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f1c3 031f 	rsb	r3, r3, #31
 8003720:	0fda      	lsrs	r2, r3, #31
 8003722:	4413      	add	r3, r2
 8003724:	105b      	asrs	r3, r3, #1
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
  while (iterations--) {
 800372a:	e017      	b.n	800375c <Sqrt32+0x7c>
    if (num >= res + bit) {
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d30b      	bcc.n	8003750 <Sqrt32+0x70>
      num -= res + bit;
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	607b      	str	r3, [r7, #4]
      res = (res >> 1U) + bit;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e002      	b.n	8003756 <Sqrt32+0x76>
    } else {
      res >>= 1U;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	617b      	str	r3, [r7, #20]
    }
    bit >>= 2U;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	613b      	str	r3, [r7, #16]
  while (iterations--) {
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1e5a      	subs	r2, r3, #1
 8003760:	60fa      	str	r2, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e2      	bne.n	800372c <Sqrt32+0x4c>
  }
  // Do rounding - if we have the bits.
  if (num > res && res != 0xFFFF) {
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	429a      	cmp	r2, r3
 800376c:	d907      	bls.n	800377e <Sqrt32+0x9e>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003774:	4293      	cmp	r3, r2
 8003776:	d002      	beq.n	800377e <Sqrt32+0x9e>
    ++res;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3301      	adds	r3, #1
 800377c:	617b      	str	r3, [r7, #20]
  }
  return res;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	b29b      	uxth	r3, r3
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <Sqrt64>:

static uint32_t Sqrt64(uint64_t num) {
 800378a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378c:	b089      	sub	sp, #36	; 0x24
 800378e:	af00      	add	r7, sp, #0
 8003790:	e9c7 0100 	strd	r0, r1, [r7]
  // Take a shortcut and just use 32 bit operations if the upper word is all
  // clear. This will cause a slight off by one issue for numbers close to 2^32,
  // but it probably isn't going to matter (and gives us a big performance win).
  if ((num >> 32) == 0) {
 8003794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	000a      	movs	r2, r1
 80037a2:	2300      	movs	r3, #0
 80037a4:	4313      	orrs	r3, r2
 80037a6:	d105      	bne.n	80037b4 <Sqrt64+0x2a>
    return Sqrt32((uint32_t)num);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff ff98 	bl	80036e0 <Sqrt32>
 80037b0:	4603      	mov	r3, r0
 80037b2:	e08a      	b.n	80038ca <Sqrt64+0x140>
  }
  uint64_t res = 0;
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int max_bit_number = 64 - MostSignificantBit64(num);
 80037c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037c4:	f7ff fe94 	bl	80034f0 <MostSignificantBit64>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80037ce:	60bb      	str	r3, [r7, #8]
  max_bit_number |= 1;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
  uint64_t bit = 1ULL << (63 - max_bit_number);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f1c3 013f 	rsb	r1, r3, #63	; 0x3f
 80037de:	f04f 0201 	mov.w	r2, #1
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	f1a1 0620 	sub.w	r6, r1, #32
 80037ea:	f1c1 0020 	rsb	r0, r1, #32
 80037ee:	fa03 f501 	lsl.w	r5, r3, r1
 80037f2:	fa02 f606 	lsl.w	r6, r2, r6
 80037f6:	4335      	orrs	r5, r6
 80037f8:	fa22 f000 	lsr.w	r0, r2, r0
 80037fc:	4305      	orrs	r5, r0
 80037fe:	fa02 f401 	lsl.w	r4, r2, r1
 8003802:	e9c7 4504 	strd	r4, r5, [r7, #16]
  int iterations = (63 - max_bit_number) / 2 + 1;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800380c:	0fda      	lsrs	r2, r3, #31
 800380e:	4413      	add	r3, r2
 8003810:	105b      	asrs	r3, r3, #1
 8003812:	3301      	adds	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]
  while (iterations--) {
 8003816:	e03c      	b.n	8003892 <Sqrt64+0x108>
    if (num >= res + bit) {
 8003818:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800381c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003820:	185d      	adds	r5, r3, r1
 8003822:	eb44 0602 	adc.w	r6, r4, r2
 8003826:	e9d7 1200 	ldrd	r1, r2, [r7]
 800382a:	42b2      	cmp	r2, r6
 800382c:	bf08      	it	eq
 800382e:	42a9      	cmpeq	r1, r5
 8003830:	d31c      	bcc.n	800386c <Sqrt64+0xe2>
      num -= res + bit;
 8003832:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003836:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800383a:	185d      	adds	r5, r3, r1
 800383c:	eb44 0602 	adc.w	r6, r4, r2
 8003840:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003844:	460b      	mov	r3, r1
 8003846:	4614      	mov	r4, r2
 8003848:	1b5b      	subs	r3, r3, r5
 800384a:	eb64 0406 	sbc.w	r4, r4, r6
 800384e:	e9c7 3400 	strd	r3, r4, [r7]
      res = (res >> 1U) + bit;
 8003852:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003856:	0866      	lsrs	r6, r4, #1
 8003858:	ea4f 0533 	mov.w	r5, r3, rrx
 800385c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003860:	186b      	adds	r3, r5, r1
 8003862:	eb46 0402 	adc.w	r4, r6, r2
 8003866:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800386a:	e006      	b.n	800387a <Sqrt64+0xf0>
    } else {
      res >>= 1U;
 800386c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003870:	0864      	lsrs	r4, r4, #1
 8003872:	ea4f 0333 	mov.w	r3, r3, rrx
 8003876:	e9c7 3406 	strd	r3, r4, [r7, #24]
    }
    bit >>= 2U;
 800387a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	f04f 0400 	mov.w	r4, #0
 8003886:	088b      	lsrs	r3, r1, #2
 8003888:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800388c:	0894      	lsrs	r4, r2, #2
 800388e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  while (iterations--) {
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e5a      	subs	r2, r3, #1
 8003896:	60fa      	str	r2, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1bd      	bne.n	8003818 <Sqrt64+0x8e>
  }
  // Do rounding - if we have the bits.
  if (num > res && res != 0xFFFFFFFFLL) {
 800389c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80038a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038a4:	42a2      	cmp	r2, r4
 80038a6:	bf08      	it	eq
 80038a8:	4299      	cmpeq	r1, r3
 80038aa:	d20d      	bcs.n	80038c8 <Sqrt64+0x13e>
 80038ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80038b0:	2c00      	cmp	r4, #0
 80038b2:	bf08      	it	eq
 80038b4:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 80038b8:	d006      	beq.n	80038c8 <Sqrt64+0x13e>
    ++res;
 80038ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80038be:	1c59      	adds	r1, r3, #1
 80038c0:	f144 0200 	adc.w	r2, r4, #0
 80038c4:	e9c7 1206 	strd	r1, r2, [r7, #24]
  }
  return res;
 80038c8:	69bb      	ldr	r3, [r7, #24]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3724      	adds	r7, #36	; 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038d2 <FilterbankSqrt>:

uint32_t* FilterbankSqrt(struct FilterbankState* state, int scale_down_shift) {
 80038d2:	b590      	push	{r4, r7, lr}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
  const int num_channels = state->num_channels;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60bb      	str	r3, [r7, #8]
  const uint64_t* work = state->work + 1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	3308      	adds	r3, #8
 80038e8:	617b      	str	r3, [r7, #20]
  // Reuse the work buffer since we're fine clobbering it at this point to hold
  // the output.
  uint32_t* output = (uint32_t*)state->work;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	613b      	str	r3, [r7, #16]
  int i;
  for (i = 0; i < num_channels; ++i) {
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e014      	b.n	8003920 <FilterbankSqrt+0x4e>
    *output++ = Sqrt64(*work++) >> scale_down_shift;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f103 0208 	add.w	r2, r3, #8
 80038fc:	617a      	str	r2, [r7, #20]
 80038fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003902:	4618      	mov	r0, r3
 8003904:	4621      	mov	r1, r4
 8003906:	f7ff ff40 	bl	800378a <Sqrt64>
 800390a:	4601      	mov	r1, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1d1a      	adds	r2, r3, #4
 8003910:	613a      	str	r2, [r7, #16]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	fa21 f202 	lsr.w	r2, r1, r2
 8003918:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_channels; ++i) {
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3301      	adds	r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	dbe6      	blt.n	80038f6 <FilterbankSqrt+0x24>
  }
  return (uint32_t*)state->work;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
}
 800392c:	4618      	mov	r0, r3
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	bd90      	pop	{r4, r7, pc}

08003934 <FilterbankReset>:

void FilterbankReset(struct FilterbankState* state) {
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  memset(state->work, 0, (state->num_channels + 1) * sizeof(*state->work));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a18      	ldr	r0, [r3, #32]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	461a      	mov	r2, r3
 800394a:	2100      	movs	r1, #0
 800394c:	f015 fb5e 	bl	801900c <memset>
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <FreqToMel>:
  config->lower_band_limit = 125.0f;
  config->upper_band_limit = 7500.0f;
  config->output_scale_shift = 7;
}

static float FreqToMel(float freq) { return 1127.0 * log1p(freq / 700.0); }
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fc fe00 	bl	8000568 <__aeabi_f2d>
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <FreqToMel+0x60>)
 800396e:	f7fc ff7d 	bl	800086c <__aeabi_ddiv>
 8003972:	4603      	mov	r3, r0
 8003974:	460c      	mov	r4, r1
 8003976:	ec44 3b17 	vmov	d7, r3, r4
 800397a:	eeb0 0a47 	vmov.f32	s0, s14
 800397e:	eef0 0a67 	vmov.f32	s1, s15
 8003982:	f013 f86d 	bl	8016a60 <log1p>
 8003986:	ec51 0b10 	vmov	r0, r1, d0
 800398a:	a309      	add	r3, pc, #36	; (adr r3, 80039b0 <FreqToMel+0x58>)
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	f7fc fe42 	bl	8000618 <__aeabi_dmul>
 8003994:	4603      	mov	r3, r0
 8003996:	460c      	mov	r4, r1
 8003998:	4618      	mov	r0, r3
 800399a:	4621      	mov	r1, r4
 800399c:	f7fd f914 	bl	8000bc8 <__aeabi_d2f>
 80039a0:	4603      	mov	r3, r0
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eeb0 0a67 	vmov.f32	s0, s15
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd90      	pop	{r4, r7, pc}
 80039b0:	00000000 	.word	0x00000000
 80039b4:	40919c00 	.word	0x40919c00
 80039b8:	4085e000 	.word	0x4085e000

080039bc <CalculateCenterFrequencies>:

static void CalculateCenterFrequencies(const int num_channels,
                                       const float lower_frequency_limit,
                                       const float upper_frequency_limit,
                                       float* center_frequencies) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80039c8:	edc7 0a01 	vstr	s1, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  assert(lower_frequency_limit >= 0.0f);
 80039ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80039d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039da:	da05      	bge.n	80039e8 <CalculateCenterFrequencies+0x2c>
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <CalculateCenterFrequencies+0xcc>)
 80039de:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <CalculateCenterFrequencies+0xd0>)
 80039e0:	2125      	movs	r1, #37	; 0x25
 80039e2:	482b      	ldr	r0, [pc, #172]	; (8003a90 <CalculateCenterFrequencies+0xd4>)
 80039e4:	f015 f99e 	bl	8018d24 <__assert_func>
  assert(upper_frequency_limit > lower_frequency_limit);
 80039e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80039ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80039f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f8:	dc05      	bgt.n	8003a06 <CalculateCenterFrequencies+0x4a>
 80039fa:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <CalculateCenterFrequencies+0xd8>)
 80039fc:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <CalculateCenterFrequencies+0xd0>)
 80039fe:	2126      	movs	r1, #38	; 0x26
 8003a00:	4823      	ldr	r0, [pc, #140]	; (8003a90 <CalculateCenterFrequencies+0xd4>)
 8003a02:	f015 f98f 	bl	8018d24 <__assert_func>

  const float mel_low = FreqToMel(lower_frequency_limit);
 8003a06:	ed97 0a02 	vldr	s0, [r7, #8]
 8003a0a:	f7ff ffa5 	bl	8003958 <FreqToMel>
 8003a0e:	ed87 0a08 	vstr	s0, [r7, #32]
  const float mel_hi = FreqToMel(upper_frequency_limit);
 8003a12:	ed97 0a01 	vldr	s0, [r7, #4]
 8003a16:	f7ff ff9f 	bl	8003958 <FreqToMel>
 8003a1a:	ed87 0a07 	vstr	s0, [r7, #28]
  const float mel_span = mel_hi - mel_low;
 8003a1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a22:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a2a:	edc7 7a06 	vstr	s15, [r7, #24]
  const float mel_spacing = mel_span / ((float)num_channels);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a38:	edd7 6a06 	vldr	s13, [r7, #24]
 8003a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a40:	edc7 7a05 	vstr	s15, [r7, #20]
  int i;
  for (i = 0; i < num_channels; ++i) {
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
 8003a48:	e016      	b.n	8003a78 <CalculateCenterFrequencies+0xbc>
    center_frequencies[i] = mel_low + (mel_spacing * (i + 1));
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a56:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	4413      	add	r3, r2
 8003a66:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a6e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < num_channels; ++i) {
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	3301      	adds	r3, #1
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
 8003a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dbe4      	blt.n	8003a4a <CalculateCenterFrequencies+0x8e>
  }
}
 8003a80:	bf00      	nop
 8003a82:	3728      	adds	r7, #40	; 0x28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	0801bf84 	.word	0x0801bf84
 8003a8c:	0801ef5c 	.word	0x0801ef5c
 8003a90:	0801bfa4 	.word	0x0801bfa4
 8003a94:	0801bfc4 	.word	0x0801bfc4

08003a98 <QuantizeFilterbankWeights>:

static void QuantizeFilterbankWeights(const float float_weight, int16_t* weight,
                                      int16_t* unweight) {
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003aa2:	60b8      	str	r0, [r7, #8]
 8003aa4:	6079      	str	r1, [r7, #4]
  *weight = floor(float_weight * (1 << kFilterbankBits) + 0.5);
 8003aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aaa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003b58 <QuantizeFilterbankWeights+0xc0>
 8003aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ab2:	ee17 0a90 	vmov	r0, s15
 8003ab6:	f7fc fd57 	bl	8000568 <__aeabi_f2d>
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <QuantizeFilterbankWeights+0xc4>)
 8003ac0:	f7fc fbf4 	bl	80002ac <__adddf3>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	ec44 3b17 	vmov	d7, r3, r4
 8003acc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ad0:	eef0 0a67 	vmov.f32	s1, s15
 8003ad4:	f012 ff08 	bl	80168e8 <floor>
 8003ad8:	ec54 3b10 	vmov	r3, r4, d0
 8003adc:	4618      	mov	r0, r3
 8003ade:	4621      	mov	r1, r4
 8003ae0:	f7fd f84a 	bl	8000b78 <__aeabi_d2iz>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	b21a      	sxth	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	801a      	strh	r2, [r3, #0]
  *unweight = floor((1.0 - float_weight) * (1 << kFilterbankBits) + 0.5);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7fc fd3b 	bl	8000568 <__aeabi_f2d>
 8003af2:	4603      	mov	r3, r0
 8003af4:	460c      	mov	r4, r1
 8003af6:	461a      	mov	r2, r3
 8003af8:	4623      	mov	r3, r4
 8003afa:	f04f 0000 	mov.w	r0, #0
 8003afe:	4918      	ldr	r1, [pc, #96]	; (8003b60 <QuantizeFilterbankWeights+0xc8>)
 8003b00:	f7fc fbd2 	bl	80002a8 <__aeabi_dsub>
 8003b04:	4603      	mov	r3, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <QuantizeFilterbankWeights+0xcc>)
 8003b12:	f7fc fd81 	bl	8000618 <__aeabi_dmul>
 8003b16:	4603      	mov	r3, r0
 8003b18:	460c      	mov	r4, r1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <QuantizeFilterbankWeights+0xc4>)
 8003b24:	f7fc fbc2 	bl	80002ac <__adddf3>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	ec44 3b17 	vmov	d7, r3, r4
 8003b30:	eeb0 0a47 	vmov.f32	s0, s14
 8003b34:	eef0 0a67 	vmov.f32	s1, s15
 8003b38:	f012 fed6 	bl	80168e8 <floor>
 8003b3c:	ec54 3b10 	vmov	r3, r4, d0
 8003b40:	4618      	mov	r0, r3
 8003b42:	4621      	mov	r1, r4
 8003b44:	f7fd f818 	bl	8000b78 <__aeabi_d2iz>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	b21a      	sxth	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	801a      	strh	r2, [r3, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd90      	pop	{r4, r7, pc}
 8003b58:	45800000 	.word	0x45800000
 8003b5c:	3fe00000 	.word	0x3fe00000
 8003b60:	3ff00000 	.word	0x3ff00000
 8003b64:	40b00000 	.word	0x40b00000

08003b68 <FilterbankPopulateState>:

int FilterbankPopulateState(const struct FilterbankConfig* config,
                            struct FilterbankState* state, int sample_rate,
                            int spectrum_size) {
 8003b68:	b5b0      	push	{r4, r5, r7, lr}
 8003b6a:	ed2d 8b02 	vpush	{d8}
 8003b6e:	b09e      	sub	sp, #120	; 0x78
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  state->num_channels = config->num_channels;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	601a      	str	r2, [r3, #0]
  const int num_channels_plus_1 = config->num_channels + 1;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	657b      	str	r3, [r7, #84]	; 0x54

  // How should we align things to index counts given the byte alignment?
  const int index_alignment =
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	653b      	str	r3, [r7, #80]	; 0x50
      (kFilterbankIndexAlignment < sizeof(int16_t)
           ? 1
           : kFilterbankIndexAlignment / sizeof(int16_t));

  state->channel_frequency_starts =
      malloc(num_channels_plus_1 * sizeof(*state->channel_frequency_starts));
 8003b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f015 fa06 	bl	8018fa4 <malloc>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
  state->channel_frequency_starts =
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	60da      	str	r2, [r3, #12]
  state->channel_weight_starts =
      malloc(num_channels_plus_1 * sizeof(*state->channel_weight_starts));
 8003ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f015 f9fd 	bl	8018fa4 <malloc>
 8003baa:	4603      	mov	r3, r0
 8003bac:	461a      	mov	r2, r3
  state->channel_weight_starts =
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	611a      	str	r2, [r3, #16]
  state->channel_widths =
      malloc(num_channels_plus_1 * sizeof(*state->channel_widths));
 8003bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f015 f9f4 	bl	8018fa4 <malloc>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461a      	mov	r2, r3
  state->channel_widths =
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	615a      	str	r2, [r3, #20]
  state->work = malloc(num_channels_plus_1 * sizeof(*state->work));
 8003bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f015 f9eb 	bl	8018fa4 <malloc>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	621a      	str	r2, [r3, #32]

  float* center_mel_freqs =
      malloc(num_channels_plus_1 * sizeof(*center_mel_freqs));
 8003bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd8:	009b      	lsls	r3, r3, #2
  float* center_mel_freqs =
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f015 f9e2 	bl	8018fa4 <malloc>
 8003be0:	4603      	mov	r3, r0
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  int16_t* actual_channel_starts =
      malloc(num_channels_plus_1 * sizeof(*actual_channel_starts));
 8003be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be6:	005b      	lsls	r3, r3, #1
  int16_t* actual_channel_starts =
 8003be8:	4618      	mov	r0, r3
 8003bea:	f015 f9db 	bl	8018fa4 <malloc>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	64bb      	str	r3, [r7, #72]	; 0x48
  int16_t* actual_channel_widths =
      malloc(num_channels_plus_1 * sizeof(*actual_channel_widths));
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf4:	005b      	lsls	r3, r3, #1
  int16_t* actual_channel_widths =
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f015 f9d4 	bl	8018fa4 <malloc>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	647b      	str	r3, [r7, #68]	; 0x44

  if (state->channel_frequency_starts == NULL ||
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <FilterbankPopulateState+0xc2>
      state->channel_weight_starts == NULL || state->channel_widths == NULL ||
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	691b      	ldr	r3, [r3, #16]
  if (state->channel_frequency_starts == NULL ||
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00c      	beq.n	8003c2a <FilterbankPopulateState+0xc2>
      state->channel_weight_starts == NULL || state->channel_widths == NULL ||
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <FilterbankPopulateState+0xc2>
 8003c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <FilterbankPopulateState+0xc2>
      center_mel_freqs == NULL || actual_channel_starts == NULL ||
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <FilterbankPopulateState+0xc2>
 8003c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d112      	bne.n	8003c50 <FilterbankPopulateState+0xe8>
      actual_channel_widths == NULL) {
    free(center_mel_freqs);
 8003c2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003c2c:	f015 f9c2 	bl	8018fb4 <free>
    free(actual_channel_starts);
 8003c30:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003c32:	f015 f9bf 	bl	8018fb4 <free>
    free(actual_channel_widths);
 8003c36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003c38:	f015 f9bc 	bl	8018fb4 <free>
    fprintf(stderr, "Failed to allocate channel buffers\n");
 8003c3c:	4ba4      	ldr	r3, [pc, #656]	; (8003ed0 <FilterbankPopulateState+0x368>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2223      	movs	r2, #35	; 0x23
 8003c44:	2101      	movs	r1, #1
 8003c46:	48a3      	ldr	r0, [pc, #652]	; (8003ed4 <FilterbankPopulateState+0x36c>)
 8003c48:	f015 f97a 	bl	8018f40 <fwrite>
    return 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e1e8      	b.n	8004022 <FilterbankPopulateState+0x4ba>
  }

  CalculateCenterFrequencies(num_channels_plus_1, config->lower_band_limit,
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c5c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003c5e:	eef0 0a47 	vmov.f32	s1, s14
 8003c62:	eeb0 0a67 	vmov.f32	s0, s15
 8003c66:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c68:	f7ff fea8 	bl	80039bc <CalculateCenterFrequencies>
                             config->upper_band_limit, center_mel_freqs);

  // Always exclude DC.
  const float hz_per_sbin = 0.5 * sample_rate / ((float)spectrum_size - 1);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7fc fc69 	bl	8000544 <__aeabi_i2d>
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	4b98      	ldr	r3, [pc, #608]	; (8003ed8 <FilterbankPopulateState+0x370>)
 8003c78:	f7fc fcce 	bl	8000618 <__aeabi_dmul>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	4625      	mov	r5, r4
 8003c82:	461c      	mov	r4, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c96:	ee17 0a90 	vmov	r0, s15
 8003c9a:	f7fc fc65 	bl	8000568 <__aeabi_f2d>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	f7fc fde1 	bl	800086c <__aeabi_ddiv>
 8003caa:	4603      	mov	r3, r0
 8003cac:	460c      	mov	r4, r1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	f7fc ff89 	bl	8000bc8 <__aeabi_d2f>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	643b      	str	r3, [r7, #64]	; 0x40
  state->start_index = 1.5 + config->lower_band_limit / hz_per_sbin;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8003cc0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003cc4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cc8:	ee16 0a90 	vmov	r0, s13
 8003ccc:	f7fc fc4c 	bl	8000568 <__aeabi_f2d>
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	4b81      	ldr	r3, [pc, #516]	; (8003edc <FilterbankPopulateState+0x374>)
 8003cd6:	f7fc fae9 	bl	80002ac <__adddf3>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	f7fc ff49 	bl	8000b78 <__aeabi_d2iz>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	605a      	str	r2, [r3, #4]
  state->end_index = 0;  // Initialized to zero here, but actually set below.
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
  // how much padding we need to add so that we can efficiently multiply the
  // weights and unweights for accumulation. To simplify the multiplication
  // logic, all channels will have some multiplication to do (even if there are
  // no frequencies that accumulate to that channel) - they will be directed to
  // a set of zero weights.
  int chan_freq_index_start = state->start_index;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	677b      	str	r3, [r7, #116]	; 0x74
  int weight_index_start = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	673b      	str	r3, [r7, #112]	; 0x70
  int needs_zeros = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	66fb      	str	r3, [r7, #108]	; 0x6c

  int chan;
  for (chan = 0; chan < num_channels_plus_1; ++chan) {
 8003d00:	2300      	movs	r3, #0
 8003d02:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d04:	e0a5      	b.n	8003e52 <FilterbankPopulateState+0x2ea>
    // Keep jumping frequencies until we overshoot the bound on this channel.
    int freq_index = chan_freq_index_start;
 8003d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d08:	667b      	str	r3, [r7, #100]	; 0x64
    while (FreqToMel((freq_index)*hz_per_sbin) <= center_mel_freqs[chan]) {
 8003d0a:	e002      	b.n	8003d12 <FilterbankPopulateState+0x1aa>
      ++freq_index;
 8003d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d0e:	3301      	adds	r3, #1
 8003d10:	667b      	str	r3, [r7, #100]	; 0x64
    while (FreqToMel((freq_index)*hz_per_sbin) <= center_mel_freqs[chan]) {
 8003d12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d1c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d24:	eeb0 0a67 	vmov.f32	s0, s15
 8003d28:	f7ff fe16 	bl	8003958 <FreqToMel>
 8003d2c:	eeb0 7a40 	vmov.f32	s14, s0
 8003d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d36:	4413      	add	r3, r2
 8003d38:	edd3 7a00 	vldr	s15, [r3]
 8003d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	d9e2      	bls.n	8003d0c <FilterbankPopulateState+0x1a4>
    }

    const int width = freq_index - chan_freq_index_start;
 8003d46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	623b      	str	r3, [r7, #32]
    actual_channel_starts[chan] = chan_freq_index_start;
 8003d4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d54:	4413      	add	r3, r2
 8003d56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d58:	b212      	sxth	r2, r2
 8003d5a:	801a      	strh	r2, [r3, #0]
    actual_channel_widths[chan] = width;
 8003d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d62:	4413      	add	r3, r2
 8003d64:	6a3a      	ldr	r2, [r7, #32]
 8003d66:	b212      	sxth	r2, r2
 8003d68:	801a      	strh	r2, [r3, #0]

    if (width == 0) {
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d138      	bne.n	8003de2 <FilterbankPopulateState+0x27a>
      // always zero. We need then to insert some 'zero' weights into the
      // output, and just redirect this channel to do a single multiplication at
      // this point. For simplicity, the zeros are placed at the beginning of
      // the weights arrays, so we have to go and update all the other
      // weight_starts to reflect this shift (but only once).
      state->channel_frequency_starts[chan] = 0;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	801a      	strh	r2, [r3, #0]
      state->channel_weight_starts[chan] = 0;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	2200      	movs	r2, #0
 8003d8a:	801a      	strh	r2, [r3, #0]
      state->channel_widths[chan] = kFilterbankChannelBlockSize;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4413      	add	r3, r2
 8003d96:	2204      	movs	r2, #4
 8003d98:	801a      	strh	r2, [r3, #0]
      if (!needs_zeros) {
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d153      	bne.n	8003e48 <FilterbankPopulateState+0x2e0>
        needs_zeros = 1;
 8003da0:	2301      	movs	r3, #1
 8003da2:	66fb      	str	r3, [r7, #108]	; 0x6c
        int j;
        for (j = 0; j < chan; ++j) {
 8003da4:	2300      	movs	r3, #0
 8003da6:	663b      	str	r3, [r7, #96]	; 0x60
 8003da8:	e013      	b.n	8003dd2 <FilterbankPopulateState+0x26a>
          state->channel_weight_starts[j] += kFilterbankChannelBlockSize;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3304      	adds	r3, #4
 8003dbc:	b299      	uxth	r1, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	b20a      	sxth	r2, r1
 8003dca:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < chan; ++j) {
 8003dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dce:	3301      	adds	r3, #1
 8003dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8003dd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	dbe7      	blt.n	8003daa <FilterbankPopulateState+0x242>
        }
        weight_index_start += kFilterbankChannelBlockSize;
 8003dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ddc:	3304      	adds	r3, #4
 8003dde:	673b      	str	r3, [r7, #112]	; 0x70
 8003de0:	e032      	b.n	8003e48 <FilterbankPopulateState+0x2e0>
      }
    } else {
      // How far back do we need to go to ensure that we have the proper
      // alignment?
      const int aligned_start =
          (chan_freq_index_start / index_alignment) * index_alignment;
 8003de2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de6:	fb92 f2f3 	sdiv	r2, r2, r3
      const int aligned_start =
 8003dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dec:	fb02 f303 	mul.w	r3, r2, r3
 8003df0:	61fb      	str	r3, [r7, #28]
      const int aligned_width = (chan_freq_index_start - aligned_start + width);
 8003df2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
      const int padded_width =
          (((aligned_width - 1) / kFilterbankChannelBlockSize) + 1) *
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	da00      	bge.n	8003e08 <FilterbankPopulateState+0x2a0>
 8003e06:	3303      	adds	r3, #3
 8003e08:	109b      	asrs	r3, r3, #2
 8003e0a:	3301      	adds	r3, #1
      const int padded_width =
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	617b      	str	r3, [r7, #20]
          kFilterbankChannelBlockSize;

      state->channel_frequency_starts[chan] = aligned_start;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	b212      	sxth	r2, r2
 8003e1e:	801a      	strh	r2, [r3, #0]
      state->channel_weight_starts[chan] = weight_index_start;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e2c:	b212      	sxth	r2, r2
 8003e2e:	801a      	strh	r2, [r3, #0]
      state->channel_widths[chan] = padded_width;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	b212      	sxth	r2, r2
 8003e3e:	801a      	strh	r2, [r3, #0]
      weight_index_start += padded_width;
 8003e40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	4413      	add	r3, r2
 8003e46:	673b      	str	r3, [r7, #112]	; 0x70
    }
    chan_freq_index_start = freq_index;
 8003e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e4a:	677b      	str	r3, [r7, #116]	; 0x74
  for (chan = 0; chan < num_channels_plus_1; ++chan) {
 8003e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e4e:	3301      	adds	r3, #1
 8003e50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e56:	429a      	cmp	r2, r3
 8003e58:	f6ff af55 	blt.w	8003d06 <FilterbankPopulateState+0x19e>
  }

  // Allocate the two arrays to store the weights - weight_index_start contains
  // the index of what would be the next set of weights that we would need to
  // add, so that's how many weights we need to allocate.
  state->weights = calloc(weight_index_start, sizeof(*state->weights));
 8003e5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f014 ff83 	bl	8018d6c <calloc>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	619a      	str	r2, [r3, #24]
  state->unweights = calloc(weight_index_start, sizeof(*state->unweights));
 8003e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e70:	2102      	movs	r1, #2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f014 ff7a 	bl	8018d6c <calloc>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	61da      	str	r2, [r3, #28]

  // If the alloc failed, we also need to nuke the arrays.
  if (state->weights == NULL || state->unweights == NULL) {
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <FilterbankPopulateState+0x328>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d112      	bne.n	8003eb6 <FilterbankPopulateState+0x34e>
    free(center_mel_freqs);
 8003e90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003e92:	f015 f88f 	bl	8018fb4 <free>
    free(actual_channel_starts);
 8003e96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003e98:	f015 f88c 	bl	8018fb4 <free>
    free(actual_channel_widths);
 8003e9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003e9e:	f015 f889 	bl	8018fb4 <free>
    fprintf(stderr, "Failed to allocate weights or unweights\n");
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <FilterbankPopulateState+0x368>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2228      	movs	r2, #40	; 0x28
 8003eaa:	2101      	movs	r1, #1
 8003eac:	480c      	ldr	r0, [pc, #48]	; (8003ee0 <FilterbankPopulateState+0x378>)
 8003eae:	f015 f847 	bl	8018f40 <fwrite>
    return 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e0b5      	b.n	8004022 <FilterbankPopulateState+0x4ba>
  }

  // Next pass, compute all the weights. Since everything has been memset to
  // zero, we only need to fill in the weights that correspond to some frequency
  // for a channel.
  const float mel_low = FreqToMel(config->lower_band_limit);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	f7ff fd4a 	bl	8003958 <FreqToMel>
 8003ec4:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
  for (chan = 0; chan < num_channels_plus_1; ++chan) {
 8003ec8:	2300      	movs	r3, #0
 8003eca:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ecc:	e08b      	b.n	8003fe6 <FilterbankPopulateState+0x47e>
 8003ece:	bf00      	nop
 8003ed0:	20000018 	.word	0x20000018
 8003ed4:	0801bff4 	.word	0x0801bff4
 8003ed8:	3fe00000 	.word	0x3fe00000
 8003edc:	3ff80000 	.word	0x3ff80000
 8003ee0:	0801c018 	.word	0x0801c018
    int frequency = actual_channel_starts[chan];
 8003ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eea:	4413      	add	r3, r2
 8003eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int num_frequencies = actual_channel_widths[chan];
 8003ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ef8:	4413      	add	r3, r2
 8003efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003efe:	63bb      	str	r3, [r7, #56]	; 0x38
    const int frequency_offset =
        frequency - state->channel_frequency_starts[chan];
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f0e:	461a      	mov	r2, r3
    const int frequency_offset =
 8003f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
    const int weight_start = state->channel_weight_starts[chan];
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f24:	633b      	str	r3, [r7, #48]	; 0x30
    const float denom_val = (chan == 0) ? mel_low : center_mel_freqs[chan - 1];
 8003f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <FilterbankPopulateState+0x3d6>
 8003f2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f32:	3b01      	subs	r3, #1
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f38:	4413      	add	r3, r2
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	e000      	b.n	8003f40 <FilterbankPopulateState+0x3d8>
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c

    int j;
    for (j = 0; j < num_frequencies; ++j, ++frequency) {
 8003f42:	2300      	movs	r3, #0
 8003f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f46:	e03f      	b.n	8003fc8 <FilterbankPopulateState+0x460>
      const float weight =
          (center_mel_freqs[chan] - FreqToMel(frequency * hz_per_sbin)) /
 8003f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f4e:	4413      	add	r3, r2
 8003f50:	ed93 8a00 	vldr	s16, [r3]
 8003f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f5e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6a:	f7ff fcf5 	bl	8003958 <FreqToMel>
 8003f6e:	eef0 7a40 	vmov.f32	s15, s0
 8003f72:	ee78 6a67 	vsub.f32	s13, s16, s15
          (center_mel_freqs[chan] - denom_val);
 8003f76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f7c:	4413      	add	r3, r2
 8003f7e:	ed93 7a00 	vldr	s14, [r3]
 8003f82:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003f86:	ee37 7a67 	vsub.f32	s14, s14, s15
      const float weight =
 8003f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f8e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

      // Make the float into an integer for the weights (and unweights).
      const int weight_index = weight_start + frequency_offset + j;
 8003f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f96:	4413      	add	r3, r2
 8003f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f9a:	4413      	add	r3, r2
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
      QuantizeFilterbankWeights(weight, state->weights + weight_index,
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	18d0      	adds	r0, r2, r3
                                state->unweights + weight_index);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	005b      	lsls	r3, r3, #1
      QuantizeFilterbankWeights(weight, state->weights + weight_index,
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003fb8:	f7ff fd6e 	bl	8003a98 <QuantizeFilterbankWeights>
    for (j = 0; j < num_frequencies; ++j, ++frequency) {
 8003fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	dbbb      	blt.n	8003f48 <FilterbankPopulateState+0x3e0>
    }
    if (frequency > state->end_index) {
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	dd02      	ble.n	8003fe0 <FilterbankPopulateState+0x478>
      state->end_index = frequency;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fde:	609a      	str	r2, [r3, #8]
  for (chan = 0; chan < num_channels_plus_1; ++chan) {
 8003fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fea:	429a      	cmp	r2, r3
 8003fec:	f6ff af7a 	blt.w	8003ee4 <FilterbankPopulateState+0x37c>
    }
  }

  free(center_mel_freqs);
 8003ff0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003ff2:	f014 ffdf 	bl	8018fb4 <free>
  free(actual_channel_starts);
 8003ff6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ff8:	f014 ffdc 	bl	8018fb4 <free>
  free(actual_channel_widths);
 8003ffc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003ffe:	f014 ffd9 	bl	8018fb4 <free>
  if (state->end_index >= spectrum_size) {
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	dc09      	bgt.n	8004020 <FilterbankPopulateState+0x4b8>
    fprintf(stderr, "Filterbank end_index is above spectrum size.\n");
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <FilterbankPopulateState+0x4c8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	222d      	movs	r2, #45	; 0x2d
 8004014:	2101      	movs	r1, #1
 8004016:	4807      	ldr	r0, [pc, #28]	; (8004034 <FilterbankPopulateState+0x4cc>)
 8004018:	f014 ff92 	bl	8018f40 <fwrite>
    return 0;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <FilterbankPopulateState+0x4ba>
  }
  return 1;
 8004020:	2301      	movs	r3, #1
}
 8004022:	4618      	mov	r0, r3
 8004024:	3778      	adds	r7, #120	; 0x78
 8004026:	46bd      	mov	sp, r7
 8004028:	ecbd 8b02 	vpop	{d8}
 800402c:	bdb0      	pop	{r4, r5, r7, pc}
 800402e:	bf00      	nop
 8004030:	20000018 	.word	0x20000018
 8004034:	0801c044 	.word	0x0801c044

08004038 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8004058:	687c      	ldr	r4, [r7, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fd08 	bl	8004a72 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8004062:	4603      	mov	r3, r0
 8004064:	425b      	negs	r3, r3
 8004066:	4423      	add	r3, r4
  }
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}

08004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff ffe7 	bl	8004050 <_ZNK11flatbuffers5Table9GetVTableEv>
 8004082:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fcd8 	bl	8004a3a <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800408a:	4603      	mov	r3, r0
 800408c:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	897b      	ldrh	r3, [r7, #10]
 8004092:	429a      	cmp	r2, r3
 8004094:	d207      	bcs.n	80040a6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fccc 	bl	8004a3a <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80040a2:	4603      	mov	r3, r0
 80040a4:	e000      	b.n	80040a8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 80040a6:	2300      	movs	r3, #0
  }
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
    VT_DEPTH_MULTIPLIER = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_W_FACTOR = 14,
    VT_DILATION_H_FACTOR = 16
  };
  tflite::Padding padding() const {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	2104      	movs	r1, #4
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fd50 	bl	8004b64 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80040c4:	4603      	mov	r3, r0
 80040c6:	b2db      	uxtb	r3, r3
  }
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	2106      	movs	r1, #6
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fd12 	bl	8004b08 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80040e4:	4603      	mov	r3, r0
  }
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	2108      	movs	r1, #8
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fd03 	bl	8004b08 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004102:	4603      	mov	r3, r0
  }
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	210a      	movs	r1, #10
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fcf4 	bl	8004b08 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004120:	4603      	mov	r3, r0
  }
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	210c      	movs	r1, #12
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fd13 	bl	8004b64 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800413e:	4603      	mov	r3, r0
 8004140:	b2db      	uxtb	r3, r3
  }
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	210e      	movs	r1, #14
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fcd5 	bl	8004b08 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800415e:	4603      	mov	r3, r0
  }
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	2110      	movs	r1, #16
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fcc6 	bl	8004b08 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800417c:	4603      	mov	r3, r0
  }
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_WEIGHTS_FORMAT = 6,
    VT_KEEP_NUM_DIMS = 8,
    VT_ASYMMETRIC_QUANTIZE_INPUTS = 10
  };
  tflite::ActivationFunctionType fused_activation_function() const {
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	2104      	movs	r1, #4
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fce5 	bl	8004b64 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800419a:	4603      	mov	r3, r0
 800419c:	b2db      	uxtb	r3, r3
  }
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2106      	movs	r1, #6
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fcd5 	bl	8004b64 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80041ba:	4603      	mov	r3, r0
 80041bc:	b2db      	uxtb	r3, r3
  }
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2108      	movs	r1, #8
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fc68 	bl	8004aaa <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
  }
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	210a      	movs	r1, #10
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fc54 	bl	8004aaa <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
  }
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <_ZNK6tflite14SoftmaxOptions4betaEv>:
struct SoftmaxOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SoftmaxOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BETA = 4
  };
  float beta() const {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800423c <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8004226:	2104      	movs	r1, #4
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fcbb 	bl	8004ba4 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 800422e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8004232:	eeb0 0a67 	vmov.f32	s0, s15
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	00000000 	.word	0x00000000

08004240 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
struct ReshapeOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReshapeOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_SHAPE = 4
  };
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2104      	movs	r1, #4
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fc79 	bl	8004b44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8004252:	4603      	mov	r3, r0
  }
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <_ZNK6tflite8Operator20builtin_options_typeEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	210a      	movs	r1, #10
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fc1d 	bl	8004aaa <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004270:	4603      	mov	r3, r0
  }
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	210c      	movs	r1, #12
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fc2e 	bl	8004ae8 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 800428c:	4603      	mov	r3, r0
  }
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
  }
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff ffdc 	bl	800425c <_ZNK6tflite8Operator20builtin_options_typeEv>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d104      	bne.n	80042b4 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff ffe5 	bl	800427a <_ZNK6tflite8Operator15builtin_optionsEv>
 80042b0:	4603      	mov	r3, r0
 80042b2:	e000      	b.n	80042b6 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 80042b4:	2300      	movs	r3, #0
  }
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_SVDFOptions ? static_cast<const tflite::SVDFOptions *>(builtin_options()) : nullptr;
  }
  const tflite::RNNOptions *builtin_options_as_RNNOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff ffc8 	bl	800425c <_ZNK6tflite8Operator20builtin_options_typeEv>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d104      	bne.n	80042dc <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff ffd1 	bl	800427a <_ZNK6tflite8Operator15builtin_optionsEv>
 80042d8:	4603      	mov	r3, r0
 80042da:	e000      	b.n	80042de <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 80042dc:	2300      	movs	r3, #0
  }
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ffb4 	bl	800425c <_ZNK6tflite8Operator20builtin_options_typeEv>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b09      	cmp	r3, #9
 80042f8:	d104      	bne.n	8004304 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ffbd 	bl	800427a <_ZNK6tflite8Operator15builtin_optionsEv>
 8004300:	4603      	mov	r3, r0
 8004302:	e000      	b.n	8004306 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 8004304:	2300      	movs	r3, #0
  }
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
  }
  const tflite::CallOptions *builtin_options_as_CallOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOptions ? static_cast<const tflite::CallOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ffa0 	bl	800425c <_ZNK6tflite8Operator20builtin_options_typeEv>
 800431c:	4603      	mov	r3, r0
 800431e:	2b11      	cmp	r3, #17
 8004320:	d104      	bne.n	800432c <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ffa9 	bl	800427a <_ZNK6tflite8Operator15builtin_optionsEv>
 8004328:	4603      	mov	r3, r0
 800432a:	e000      	b.n	800432e <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 800432c:	2300      	movs	r3, #0
  }
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3304      	adds	r3, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	4610      	mov	r0, r2
 8004370:	4798      	blx	r3
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 80043ac:	f014 fcb3 	bl	8018d16 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 80043b6:	f014 fcae 	bl	8018d16 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 80043c0:	f014 fca9 	bl	8018d16 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 80043ca:	f014 fca4 	bl	8018d16 <abort>
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 80043ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ee:	4917      	ldr	r1, [pc, #92]	; (800444c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 80043f0:	6838      	ldr	r0, [r7, #0]
 80043f2:	f7fe fde1 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e024      	b.n	8004444 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f000 fbf4 	bl	8004be8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004400:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d906      	bls.n	800441a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 800440c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800440e:	4910      	ldr	r1, [pc, #64]	; (8004450 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8004410:	6838      	ldr	r0, [r7, #0]
 8004412:	f7fe fdd1 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8004416:	2301      	movs	r3, #1
 8004418:	e014      	b.n	8004444 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	429a      	cmp	r2, r3
 8004424:	d20d      	bcs.n	8004442 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	18d4      	adds	r4, r2, r3
 800442e:	6979      	ldr	r1, [r7, #20]
 8004430:	68b8      	ldr	r0, [r7, #8]
 8004432:	f000 fbe7 	bl	8004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8004436:	4603      	mov	r3, r0
 8004438:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	3301      	adds	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e7ed      	b.n	800441e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	bd90      	pop	{r4, r7, pc}
 800444c:	0801c088 	.word	0x0801c088
 8004450:	0801c0b8 	.word	0x0801c0b8

08004454 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	2b05      	cmp	r3, #5
 8004462:	d81b      	bhi.n	800449c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	08004485 	.word	0x08004485
 8004470:	08004489 	.word	0x08004489
 8004474:	0800448d 	.word	0x0800448d
 8004478:	08004491 	.word	0x08004491
 800447c:	08004495 	.word	0x08004495
 8004480:	08004499 	.word	0x08004499
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8004484:	2300      	movs	r3, #0
 8004486:	e00a      	b.n	800449e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8004488:	2301      	movs	r3, #1
 800448a:	e008      	b.n	800449e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 800448c:	2302      	movs	r3, #2
 800448e:	e006      	b.n	800449e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8004490:	2303      	movs	r3, #3
 8004492:	e004      	b.n	800449e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8004494:	2304      	movs	r3, #4
 8004496:	e002      	b.n	800449e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8004498:	2305      	movs	r3, #5
 800449a:	e000      	b.n	800449e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop

080044ac <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d002      	beq.n	80044c6 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 80044c0:	e003      	b.n	80044ca <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e002      	b.n	80044cc <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 80044c6:	2302      	movs	r3, #2
 80044c8:	e000      	b.n	80044cc <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	d85e      	bhi.n	80045aa <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd2>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004533 	.word	0x08004533
 80044f8:	08004529 	.word	0x08004529
 80044fc:	08004551 	.word	0x08004551
 8004500:	0800455b 	.word	0x0800455b
 8004504:	0800456f 	.word	0x0800456f
 8004508:	08004583 	.word	0x08004583
 800450c:	0800458d 	.word	0x0800458d
 8004510:	08004547 	.word	0x08004547
 8004514:	08004597 	.word	0x08004597
 8004518:	08004565 	.word	0x08004565
 800451c:	0800453d 	.word	0x0800453d
 8004520:	080045a1 	.word	0x080045a1
 8004524:	08004579 	.word	0x08004579
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	220a      	movs	r2, #10
 800452c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800452e:	2300      	movs	r3, #0
 8004530:	e045      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004538:	2300      	movs	r3, #0
 800453a:	e040      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	220b      	movs	r2, #11
 8004540:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004542:	2300      	movs	r3, #0
 8004544:	e03b      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2207      	movs	r2, #7
 800454a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800454c:	2300      	movs	r3, #0
 800454e:	e036      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2202      	movs	r2, #2
 8004554:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004556:	2300      	movs	r3, #0
 8004558:	e031      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2203      	movs	r2, #3
 800455e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004560:	2300      	movs	r3, #0
 8004562:	e02c      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2209      	movs	r2, #9
 8004568:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800456a:	2300      	movs	r3, #0
 800456c:	e027      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2204      	movs	r2, #4
 8004572:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004574:	2300      	movs	r3, #0
 8004576:	e022      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	220d      	movs	r2, #13
 800457c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800457e:	2300      	movs	r3, #0
 8004580:	e01d      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_STRING:
      *type = kTfLiteString;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2205      	movs	r2, #5
 8004586:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004588:	2300      	movs	r3, #0
 800458a:	e018      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2206      	movs	r2, #6
 8004590:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004592:	2300      	movs	r3, #0
 8004594:	e013      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2208      	movs	r2, #8
 800459a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800459c:	2300      	movs	r3, #0
 800459e:	e00e      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	220c      	movs	r2, #12
 80045a4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e009      	b.n	80045be <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    default:
      *type = kTfLiteNoType;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	461a      	mov	r2, r3
 80045b4:	4904      	ldr	r1, [pc, #16]	; (80045c8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xf0>)
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fe fcfe 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 80045bc:	2301      	movs	r3, #1
  }
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	0801c1c4 	.word	0x0801c1c4

080045cc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 80045cc:	b5b0      	push	{r4, r5, r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff fed9 	bl	8004398 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80045e6:	f107 0318 	add.w	r3, r7, #24
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fec4 	bl	800437a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 80045f2:	f107 0310 	add.w	r3, r7, #16
 80045f6:	f107 0218 	add.w	r2, r7, #24
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fb27 	bl	8004c50 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8004602:	f107 0310 	add.w	r3, r7, #16
 8004606:	2100      	movs	r1, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fb5e 	bl	8004cca <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800460e:	4603      	mov	r3, r0
 8004610:	f083 0301 	eor.w	r3, r3, #1
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800461a:	68b8      	ldr	r0, [r7, #8]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	4b3e      	ldr	r3, [pc, #248]	; (8004718 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	4b3c      	ldr	r3, [pc, #240]	; (800471c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 800462a:	4a3d      	ldr	r2, [pc, #244]	; (8004720 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 800462c:	f7fe fcdd 	bl	8002fea <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8004630:	2401      	movs	r4, #1
 8004632:	e066      	b.n	8004702 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7ff fe2e 	bl	8004296 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 800463a:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d056      	beq.n	80046f0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 8004642:	69f8      	ldr	r0, [r7, #28]
 8004644:	f7ff fd34 	bl	80040b0 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 8004648:	4603      	mov	r3, r0
 800464a:	461d      	mov	r5, r3
 800464c:	f107 0310 	add.w	r3, r7, #16
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fb47 	bl	8004ce4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004656:	4604      	mov	r4, r0
 8004658:	4628      	mov	r0, r5
 800465a:	f7ff ff27 	bl	80044ac <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800465e:	4603      	mov	r3, r0
 8004660:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8004662:	f107 0310 	add.w	r3, r7, #16
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fb3c 	bl	8004ce4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800466c:	4604      	mov	r4, r0
 800466e:	69f8      	ldr	r0, [r7, #28]
 8004670:	f7ff fd2e 	bl	80040d0 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 8004674:	4603      	mov	r3, r0
 8004676:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8004678:	f107 0310 	add.w	r3, r7, #16
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fb31 	bl	8004ce4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004682:	4604      	mov	r4, r0
 8004684:	69f8      	ldr	r0, [r7, #28]
 8004686:	f7ff fd32 	bl	80040ee <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 800468a:	4603      	mov	r3, r0
 800468c:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 800468e:	f107 0310 	add.w	r3, r7, #16
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fb26 	bl	8004ce4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004698:	4604      	mov	r4, r0
 800469a:	69f8      	ldr	r0, [r7, #28]
 800469c:	f7ff fd36 	bl	800410c <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 80046a0:	4603      	mov	r3, r0
 80046a2:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80046a4:	69f8      	ldr	r0, [r7, #28]
 80046a6:	f7ff fd40 	bl	800412a <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461d      	mov	r5, r3
    params->activation =
 80046ae:	f107 0310 	add.w	r3, r7, #16
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fb16 	bl	8004ce4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80046b8:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80046ba:	4628      	mov	r0, r5
 80046bc:	f7ff feca 	bl	8004454 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80046c0:	4603      	mov	r3, r0
    params->activation =
 80046c2:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 80046c4:	f107 0310 	add.w	r3, r7, #16
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fb0b 	bl	8004ce4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80046ce:	4604      	mov	r4, r0
 80046d0:	69f8      	ldr	r0, [r7, #28]
 80046d2:	f7ff fd3a 	bl	800414a <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 80046d6:	4603      	mov	r3, r0
 80046d8:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 80046da:	f107 0310 	add.w	r3, r7, #16
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fb00 	bl	8004ce4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80046e4:	4604      	mov	r4, r0
 80046e6:	69f8      	ldr	r0, [r7, #28]
 80046e8:	f7ff fd3e 	bl	8004168 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 80046ec:	4603      	mov	r3, r0
 80046ee:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80046f0:	f107 0310 	add.w	r3, r7, #16
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fb01 	bl	8004cfc <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80046fa:	4602      	mov	r2, r0
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004700:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 8004702:	f107 0310 	add.w	r3, r7, #16
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fac0 	bl	8004c8c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800470c:	4623      	mov	r3, r4
}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bdb0      	pop	{r4, r5, r7, pc}
 8004716:	bf00      	nop
 8004718:	0801c13c 	.word	0x0801c13c
 800471c:	0801c0fc 	.word	0x0801c0fc
 8004720:	0801c124 	.word	0x0801c124

08004724 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8004724:	b5b0      	push	{r4, r5, r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff fe2d 	bl	8004398 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800473e:	f107 0318 	add.w	r3, r7, #24
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fe18 	bl	800437a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 800474a:	f107 0310 	add.w	r3, r7, #16
 800474e:	f107 0218 	add.w	r2, r7, #24
 8004752:	4611      	mov	r1, r2
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fae5 	bl	8004d24 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800475a:	f107 0310 	add.w	r3, r7, #16
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fb1c 	bl	8004d9e <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8004766:	4603      	mov	r3, r0
 8004768:	f083 0301 	eor.w	r3, r3, #1
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004772:	68b8      	ldr	r0, [r7, #8]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	4b36      	ldr	r3, [pc, #216]	; (8004850 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	f240 435c 	movw	r3, #1116	; 0x45c
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	4b34      	ldr	r3, [pc, #208]	; (8004854 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 8004782:	4a35      	ldr	r2, [pc, #212]	; (8004858 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8004784:	f7fe fc31 	bl	8002fea <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8004788:	2401      	movs	r4, #1
 800478a:	e057      	b.n	800483c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fd96 	bl	80042be <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 8004792:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d047      	beq.n	800482a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800479a:	69f8      	ldr	r0, [r7, #28]
 800479c:	f7ff fcf3 	bl	8004186 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461d      	mov	r5, r3
    params->activation =
 80047a4:	f107 0310 	add.w	r3, r7, #16
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fb05 	bl	8004db8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80047ae:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80047b0:	4628      	mov	r0, r5
 80047b2:	f7ff fe4f 	bl	8004454 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80047b6:	4603      	mov	r3, r0
    params->activation =
 80047b8:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 80047ba:	f107 0310 	add.w	r3, r7, #16
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fafa 	bl	8004db8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80047c4:	4604      	mov	r4, r0
 80047c6:	69f8      	ldr	r0, [r7, #28]
 80047c8:	f7ff fcfd 	bl	80041c6 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 80047cc:	4603      	mov	r3, r0
 80047ce:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 80047d0:	f107 0310 	add.w	r3, r7, #16
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 faef 	bl	8004db8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80047da:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 80047dc:	69f8      	ldr	r0, [r7, #28]
 80047de:	f7ff fd06 	bl	80041ee <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 80047e2:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 80047e4:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 80047e6:	69f8      	ldr	r0, [r7, #28]
 80047e8:	f7ff fcdd 	bl	80041a6 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d009      	beq.n	800480a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 80047f6:	e011      	b.n	800481c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 80047f8:	f107 0310 	add.w	r3, r7, #16
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fadb 	bl	8004db8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004802:	4603      	mov	r3, r0
 8004804:	2200      	movs	r2, #0
 8004806:	705a      	strb	r2, [r3, #1]
        break;
 8004808:	e00f      	b.n	800482a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 800480a:	f107 0310 	add.w	r3, r7, #16
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fad2 	bl	8004db8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004814:	4603      	mov	r3, r0
 8004816:	2201      	movs	r2, #1
 8004818:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 800481a:	e006      	b.n	800482a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	490f      	ldr	r1, [pc, #60]	; (800485c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe fbc9 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 8004826:	2401      	movs	r4, #1
 8004828:	e008      	b.n	800483c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800482a:	f107 0310 	add.w	r3, r7, #16
 800482e:	4618      	mov	r0, r3
 8004830:	f000 face 	bl	8004dd0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004834:	4602      	mov	r2, r0
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800483a:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 800483c:	f107 0310 	add.w	r3, r7, #16
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fa8d 	bl	8004d60 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004846:	4623      	mov	r3, r4
}
 8004848:	4618      	mov	r0, r3
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bdb0      	pop	{r4, r5, r7, pc}
 8004850:	0801c13c 	.word	0x0801c13c
 8004854:	0801c0fc 	.word	0x0801c0fc
 8004858:	0801c124 	.word	0x0801c124
 800485c:	0801c1e8 	.word	0x0801c1e8

08004860 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b08d      	sub	sp, #52	; 0x34
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff fd8f 	bl	8004398 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800487a:	f107 0318 	add.w	r3, r7, #24
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fd7a 	bl	800437a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 8004886:	f107 0310 	add.w	r3, r7, #16
 800488a:	f107 0218 	add.w	r2, r7, #24
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fab1 	bl	8004df8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8004896:	f107 0310 	add.w	r3, r7, #16
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fae8 	bl	8004e72 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f083 0301 	eor.w	r3, r3, #1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80048ae:	68b8      	ldr	r0, [r7, #8]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	4b27      	ldr	r3, [pc, #156]	; (8004950 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	f240 53ad 	movw	r3, #1453	; 0x5ad
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 80048be:	4a26      	ldr	r2, [pc, #152]	; (8004958 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 80048c0:	f7fe fb93 	bl	8002fea <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80048c4:	2401      	movs	r4, #1
 80048c6:	e039      	b.n	800493c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7ff fd20 	bl	800430e <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d029      	beq.n	800492a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 80048d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048d8:	f7ff fcb2 	bl	8004240 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 80048dc:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d022      	beq.n	800492a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
      TF_LITE_ENSURE_STATUS(
 80048e4:	f107 0310 	add.w	r3, r7, #16
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 facf 	bl	8004e8c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80048ee:	4603      	mov	r3, r0
 80048f0:	4619      	mov	r1, r3
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4b19      	ldr	r3, [pc, #100]	; (800495c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>)
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	460a      	mov	r2, r1
 80048fc:	6a39      	ldr	r1, [r7, #32]
 80048fe:	2020      	movs	r0, #32
 8004900:	f7ff fd6a 	bl	80043d8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 8004904:	4603      	mov	r3, r0
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	7ffb      	ldrb	r3, [r7, #31]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
 800490e:	7ffc      	ldrb	r4, [r7, #31]
 8004910:	e014      	b.n	800493c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 8004912:	6a38      	ldr	r0, [r7, #32]
 8004914:	f000 f968 	bl	8004be8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004918:	4604      	mov	r4, r0
 800491a:	f107 0310 	add.w	r3, r7, #16
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fab4 	bl	8004e8c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004924:	4603      	mov	r3, r0
 8004926:	4622      	mov	r2, r4
 8004928:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800492a:	f107 0310 	add.w	r3, r7, #16
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fab8 	bl	8004ea4 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004934:	4602      	mov	r2, r0
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800493a:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800493c:	f107 0310 	add.w	r3, r7, #16
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fa77 	bl	8004e34 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004946:	4623      	mov	r3, r4
}
 8004948:	4618      	mov	r0, r3
 800494a:	372c      	adds	r7, #44	; 0x2c
 800494c:	46bd      	mov	sp, r7
 800494e:	bd90      	pop	{r4, r7, pc}
 8004950:	0801c13c 	.word	0x0801c13c
 8004954:	0801c0fc 	.word	0x0801c0fc
 8004958:	0801c124 	.word	0x0801c124
 800495c:	0801c214 	.word	0x0801c214

08004960 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b08b      	sub	sp, #44	; 0x2c
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7ff fd0f 	bl	8004398 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800497a:	f107 0318 	add.w	r3, r7, #24
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fcfa 	bl	800437a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8004986:	f107 0310 	add.w	r3, r7, #16
 800498a:	f107 0218 	add.w	r2, r7, #24
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fa9b 	bl	8004ecc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8004996:	f107 0310 	add.w	r3, r7, #16
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fad2 	bl	8004f46 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f083 0301 	eor.w	r3, r3, #1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00c      	beq.n	80049c8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80049ae:	68b8      	ldr	r0, [r7, #8]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	f240 6336 	movw	r3, #1590	; 0x636
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 80049be:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 80049c0:	f7fe fb13 	bl	8002fea <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80049c4:	2401      	movs	r4, #1
 80049c6:	e01c      	b.n	8004a02 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7ff fc8c 	bl	80042e6 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 80049ce:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00c      	beq.n	80049f0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 80049d6:	f107 0310 	add.w	r3, r7, #16
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fac0 	bl	8004f60 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80049e0:	4604      	mov	r4, r0
 80049e2:	69f8      	ldr	r0, [r7, #28]
 80049e4:	f7ff fc18 	bl	8004218 <_ZNK6tflite14SoftmaxOptions4betaEv>
 80049e8:	eef0 7a40 	vmov.f32	s15, s0
 80049ec:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80049f0:	f107 0310 	add.w	r3, r7, #16
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fabf 	bl	8004f78 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80049fa:	4602      	mov	r2, r0
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004a00:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8004a02:	f107 0310 	add.w	r3, r7, #16
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fa7e 	bl	8004f08 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004a0c:	4623      	mov	r3, r4
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3724      	adds	r7, #36	; 0x24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd90      	pop	{r4, r7, pc}
 8004a16:	bf00      	nop
 8004a18:	0801c13c 	.word	0x0801c13c
 8004a1c:	0801c0fc 	.word	0x0801c0fc
 8004a20:	0801c124 	.word	0x0801c124

08004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8004a2c:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fab5 	bl	8004fb6 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8004a4c:	4603      	mov	r3, r0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ffde 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8004a68:	4603      	mov	r3, r0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fa8e 	bl	8004fa0 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8004a84:	4603      	mov	r3, r0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fa97 	bl	8004fce <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8004aa0:	4603      	mov	r3, r0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	807b      	strh	r3, [r7, #2]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004aba:	887b      	ldrh	r3, [r7, #2]
 8004abc:	4619      	mov	r1, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff fad6 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004ac8:	89fb      	ldrh	r3, [r7, #14]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	89fb      	ldrh	r3, [r7, #14]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ffda 	bl	8004a8e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8004ada:	4603      	mov	r3, r0
 8004adc:	e000      	b.n	8004ae0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8004ade:	787b      	ldrb	r3, [r7, #1]
  }
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004af4:	887b      	ldrh	r3, [r7, #2]
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fa74 	bl	8004fe6 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8004afe:	4603      	mov	r3, r0
  }
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	460b      	mov	r3, r1
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff faa8 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004b20:	4603      	mov	r3, r0
 8004b22:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004b24:	8afb      	ldrh	r3, [r7, #22]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	8afb      	ldrh	r3, [r7, #22]
 8004b2e:	4413      	add	r3, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff ff9e 	bl	8004a72 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8004b36:	4603      	mov	r3, r0
 8004b38:	e000      	b.n	8004b3c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8004b3a:	687b      	ldr	r3, [r7, #4]
  }
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fa66 	bl	8005026 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8004b5a:	4603      	mov	r3, r0
  }
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
 8004b70:	4613      	mov	r3, r2
 8004b72:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004b74:	887b      	ldrh	r3, [r7, #2]
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff fa79 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004b82:	89fb      	ldrh	r3, [r7, #14]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fa69 	bl	8005066 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8004b94:	4603      	mov	r3, r0
 8004b96:	e001      	b.n	8004b9c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8004b98:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	460b      	mov	r3, r1
 8004bae:	ed87 0a01 	vstr	s0, [r7, #4]
 8004bb2:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8004bb4:	897b      	ldrh	r3, [r7, #10]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff fa59 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004bc2:	8afb      	ldrh	r3, [r7, #22]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	8afb      	ldrh	r3, [r7, #22]
 8004bcc:	4413      	add	r3, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fa58 	bl	8005084 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 8004bd4:	eef0 7a40 	vmov.f32	s15, s0
 8004bd8:	e001      	b.n	8004bde <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 8004bda:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 8004bde:	eeb0 0a67 	vmov.f32	s0, s15
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ff15 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff ffea 	bl	8004be8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004c14:	4602      	mov	r2, r0
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d306      	bcc.n	8004c2a <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8004c20:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004c24:	4809      	ldr	r0, [pc, #36]	; (8004c4c <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8004c26:	f014 f87d 	bl	8018d24 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa4e 	bl	80050cc <_ZNK11flatbuffers6VectorIlE4DataEv>
 8004c30:	4603      	mov	r3, r0
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fa37 	bl	80050a8 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 8004c3a:	4603      	mov	r3, r0
  }
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	0801c21c 	.word	0x0801c21c
 8004c48:	0801ef78 	.word	0x0801ef78
 8004c4c:	0801c228 	.word	0x0801c228

08004c50 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fa56 	bl	8005110 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 8004c64:	4604      	mov	r4, r0
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	f107 030c 	add.w	r3, r7, #12
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fb60 	bl	8004336 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004c76:	f107 030c 	add.w	r3, r7, #12
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa75 	bl	800516e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd90      	pop	{r4, r7, pc}

08004c8c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fa85 	bl	80051a6 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004c9c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa8a 	bl	80051c0 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f7ff fb4d 	bl	8004354 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
      }
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fa96 	bl	8005206 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	return get();
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fa9b 	bl	8005228 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004cf2:	4603      	mov	r3, r0
      }
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fa8f 	bl	8005228 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004d0a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fa49 	bl	80051a6 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004d14:	4602      	mov	r2, r0
 8004d16:	2300      	movs	r3, #0
 8004d18:	6013      	str	r3, [r2, #0]
	return __p;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
      }
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa85 	bl	8005242 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8004d38:	4604      	mov	r4, r0
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	f107 030c 	add.w	r3, r7, #12
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff faf6 	bl	8004336 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004d4a:	f107 030c 	add.w	r3, r7, #12
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4621      	mov	r1, r4
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fa9b 	bl	800528e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd90      	pop	{r4, r7, pc}

08004d60 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 faab 	bl	80052c6 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004d70:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fab0 	bl	80052e0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f7ff fae3 	bl	8004354 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
      }
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fabc 	bl	8005326 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004dae:	4603      	mov	r3, r0
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	return get();
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fac1 	bl	8005348 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004dc6:	4603      	mov	r3, r0
      }
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fab5 	bl	8005348 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004dde:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fa6f 	bl	80052c6 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004de8:	4602      	mov	r2, r0
 8004dea:	2300      	movs	r3, #0
 8004dec:	6013      	str	r3, [r2, #0]
	return __p;
 8004dee:	68fb      	ldr	r3, [r7, #12]
      }
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 faab 	bl	8005362 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	f107 030c 	add.w	r3, r7, #12
 8004e16:	4611      	mov	r1, r2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fa8c 	bl	8004336 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004e1e:	f107 030c 	add.w	r3, r7, #12
 8004e22:	461a      	mov	r2, r3
 8004e24:	4621      	mov	r1, r4
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fac7 	bl	80053ba <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd90      	pop	{r4, r7, pc}

08004e34 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fad7 	bl	80053f2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004e44:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fadc 	bl	800540c <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f7ff fa79 	bl	8004354 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
      }
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fae8 	bl	8005452 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
	return get();
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 faed 	bl	8005474 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004e9a:	4603      	mov	r3, r0
      }
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fae1 	bl	8005474 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004eb2:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fa9b 	bl	80053f2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	6013      	str	r3, [r2, #0]
	return __p;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
      }
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fad7 	bl	800548e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	f107 030c 	add.w	r3, r7, #12
 8004eea:	4611      	mov	r1, r2
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff fa22 	bl	8004336 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004ef2:	f107 030c 	add.w	r3, r7, #12
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4621      	mov	r1, r4
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 faed 	bl	80054da <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd90      	pop	{r4, r7, pc}

08004f08 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fafd 	bl	8005512 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004f18:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d009      	beq.n	8004f36 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fb02 	bl	800552c <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f7ff fa0f 	bl	8004354 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
      }
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fb0e 	bl	8005572 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	return get();
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fb13 	bl	8005594 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004f6e:	4603      	mov	r3, r0
      }
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fb07 	bl	8005594 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004f86:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fac1 	bl	8005512 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004f90:	4602      	mov	r2, r0
 8004f92:	2300      	movs	r3, #0
 8004f94:	6013      	str	r3, [r2, #0]
	return __p;
 8004f96:	68fb      	ldr	r3, [r7, #12]
      }
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
    return t;
 8004fa8:	687b      	ldr	r3, [r7, #4]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	80fb      	strh	r3, [r7, #6]
    return t;
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	71fb      	strb	r3, [r7, #7]
    return t;
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004ff2:	887b      	ldrh	r3, [r7, #2]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff f83a 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	89fb      	ldrh	r3, [r7, #14]
 8005004:	4413      	add	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005008:	89fb      	ldrh	r3, [r7, #14]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d006      	beq.n	800501c <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 800500e:	68b8      	ldr	r0, [r7, #8]
 8005010:	f7ff fd21 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005014:	4602      	mov	r2, r0
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4413      	add	r3, r2
                        : nullptr;
 800501a:	e000      	b.n	800501e <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800501c:	2300      	movs	r3, #0
  }
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8005032:	887b      	ldrh	r3, [r7, #2]
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff f81a 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800503c:	4603      	mov	r3, r0
 800503e:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	89fb      	ldrh	r3, [r7, #14]
 8005044:	4413      	add	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005048:	89fb      	ldrh	r3, [r7, #14]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d006      	beq.n	800505c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 800504e:	68b8      	ldr	r0, [r7, #8]
 8005050:	f7ff fd01 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005054:	4602      	mov	r2, r0
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4413      	add	r3, r2
                        : nullptr;
 800505a:	e000      	b.n	800505e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800505c:	2300      	movs	r3, #0
  }
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f993 3000 	ldrsb.w	r3, [r3]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fa9a 	bl	80055ae <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 800507a:	4603      	mov	r3, r0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	edd3 7a00 	vldr	s15, [r3]
 8005092:	eeb0 0a67 	vmov.f32	s0, s15
 8005096:	f000 fa97 	bl	80055c8 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800509a:	eef0 7a40 	vmov.f32	s15, s0
}
 800509e:	eeb0 0a67 	vmov.f32	s0, s15
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ff6f 	bl	8004fa0 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 80050c2:	4603      	mov	r3, r0
  }
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
  }
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2204      	movs	r2, #4
 8005120:	211c      	movs	r1, #28
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
 8005126:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4619      	mov	r1, r3
 800512c:	201c      	movs	r0, #28
 800512e:	f7fe ff83 	bl	8004038 <_ZnwjPv>
 8005132:	4601      	mov	r1, r0
 8005134:	2900      	cmp	r1, #0
 8005136:	d00a      	beq.n	800514e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v+0x3e>
 8005138:	460a      	mov	r2, r1
 800513a:	2300      	movs	r3, #0
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	6053      	str	r3, [r2, #4]
 8005140:	6093      	str	r3, [r2, #8]
 8005142:	60d3      	str	r3, [r2, #12]
 8005144:	6113      	str	r3, [r2, #16]
 8005146:	6153      	str	r3, [r2, #20]
 8005148:	6193      	str	r3, [r2, #24]
 800514a:	460b      	mov	r3, r1
 800514c:	e000      	b.n	8005150 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v+0x40>
 800514e:	460b      	mov	r3, r1
  }
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800516e:	b5b0      	push	{r4, r5, r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800517a:	68fc      	ldr	r4, [r7, #12]
 800517c:	f107 0308 	add.w	r3, r7, #8
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff ffe9 	bl	8005158 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005186:	4603      	mov	r3, r0
 8005188:	681d      	ldr	r5, [r3, #0]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff ffaa 	bl	80050e4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	4629      	mov	r1, r5
 8005196:	4620      	mov	r0, r4
 8005198:	f000 f81f 	bl	80051da <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bdb0      	pop	{r4, r5, r7, pc}

080051a6 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fa18 	bl	80055e6 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fa18 	bl	8005600 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80051da:	b590      	push	{r4, r7, lr}
 80051dc:	b085      	sub	sp, #20
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80051e6:	68fc      	ldr	r4, [r7, #12]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff ff86 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80051ee:	4602      	mov	r2, r0
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	4619      	mov	r1, r3
 80051f6:	4620      	mov	r0, r4
 80051f8:	f000 fa1a 	bl	8005630 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	bd90      	pop	{r4, r7, pc}

08005206 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f80a 	bl	8005228 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf14      	ite	ne
 800521a:	2301      	movne	r3, #1
 800521c:	2300      	moveq	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fa15 	bl	8005662 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005238:	4603      	mov	r3, r0
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  T* AllocatePOD() {
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2201      	movs	r2, #1
 8005252:	2104      	movs	r1, #4
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	4798      	blx	r3
 8005258:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4619      	mov	r1, r3
 800525e:	2004      	movs	r0, #4
 8005260:	f7fe feea 	bl	8004038 <_ZnwjPv>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v+0x2e>
 800526a:	4619      	mov	r1, r3
 800526c:	2200      	movs	r2, #0
 800526e:	600a      	str	r2, [r1, #0]
  }
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800528e:	b5b0      	push	{r4, r5, r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800529a:	68fc      	ldr	r4, [r7, #12]
 800529c:	f107 0308 	add.w	r3, r7, #8
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff ffe9 	bl	8005278 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80052a6:	4603      	mov	r3, r0
 80052a8:	681d      	ldr	r5, [r3, #0]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ff1a 	bl	80050e4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80052b0:	4603      	mov	r3, r0
 80052b2:	461a      	mov	r2, r3
 80052b4:	4629      	mov	r1, r5
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 f81f 	bl	80052fa <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bdb0      	pop	{r4, r5, r7, pc}

080052c6 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 f9d4 	bl	800567e <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f9d4 	bl	8005698 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80052fa:	b590      	push	{r4, r7, lr}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005306:	68fc      	ldr	r4, [r7, #12]
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff fef6 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800530e:	4602      	mov	r2, r0
 8005310:	f107 0308 	add.w	r3, r7, #8
 8005314:	4619      	mov	r1, r3
 8005316:	4620      	mov	r0, r4
 8005318:	f000 f9d6 	bl	80056c8 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bd90      	pop	{r4, r7, pc}

08005326 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f80a 	bl	8005348 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf14      	ite	ne
 800533a:	2301      	movne	r3, #1
 800533c:	2300      	moveq	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 f9d1 	bl	80056fa <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005358:	4603      	mov	r3, r0
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 8005362:	b590      	push	{r4, r7, lr}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2204      	movs	r2, #4
 8005372:	2124      	movs	r1, #36	; 0x24
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
 8005378:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4619      	mov	r1, r3
 800537e:	2024      	movs	r0, #36	; 0x24
 8005380:	f7fe fe5a 	bl	8004038 <_ZnwjPv>
 8005384:	4604      	mov	r4, r0
 8005386:	2c00      	cmp	r4, #0
 8005388:	d007      	beq.n	800539a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v+0x38>
 800538a:	4620      	mov	r0, r4
 800538c:	2324      	movs	r3, #36	; 0x24
 800538e:	461a      	mov	r2, r3
 8005390:	2100      	movs	r1, #0
 8005392:	f013 fe3b 	bl	801900c <memset>
 8005396:	4623      	mov	r3, r4
 8005398:	e000      	b.n	800539c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v+0x3a>
 800539a:	4623      	mov	r3, r4
  }
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd90      	pop	{r4, r7, pc}

080053a4 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 80053ba:	b5b0      	push	{r4, r5, r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 80053c6:	68fc      	ldr	r4, [r7, #12]
 80053c8:	f107 0308 	add.w	r3, r7, #8
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ffe9 	bl	80053a4 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80053d2:	4603      	mov	r3, r0
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fe84 	bl	80050e4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80053dc:	4603      	mov	r3, r0
 80053de:	461a      	mov	r2, r3
 80053e0:	4629      	mov	r1, r5
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 f81f 	bl	8005426 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bdb0      	pop	{r4, r5, r7, pc}

080053f2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f98a 	bl	8005716 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005402:	4603      	mov	r3, r0
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f98a 	bl	8005730 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800541c:	4603      	mov	r3, r0
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8005426:	b590      	push	{r4, r7, lr}
 8005428:	b085      	sub	sp, #20
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005432:	68fc      	ldr	r4, [r7, #12]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff fe60 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800543a:	4602      	mov	r2, r0
 800543c:	f107 0308 	add.w	r3, r7, #8
 8005440:	4619      	mov	r1, r3
 8005442:	4620      	mov	r0, r4
 8005444:	f000 f98c 	bl	8005760 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	bd90      	pop	{r4, r7, pc}

08005452 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f80a 	bl	8005474 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	bf14      	ite	ne
 8005466:	2301      	movne	r3, #1
 8005468:	2300      	moveq	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f987 	bl	8005792 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005484:	4603      	mov	r3, r0
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2204      	movs	r2, #4
 800549e:	2104      	movs	r1, #4
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	4798      	blx	r3
 80054a4:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4619      	mov	r1, r3
 80054aa:	2004      	movs	r0, #4
 80054ac:	f7fe fdc4 	bl	8004038 <_ZnwjPv>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v+0x2e>
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
  }
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 80054da:	b5b0      	push	{r4, r5, r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 80054e6:	68fc      	ldr	r4, [r7, #12]
 80054e8:	f107 0308 	add.w	r3, r7, #8
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff ffe9 	bl	80054c4 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80054f2:	4603      	mov	r3, r0
 80054f4:	681d      	ldr	r5, [r3, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff fdf4 	bl	80050e4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80054fc:	4603      	mov	r3, r0
 80054fe:	461a      	mov	r2, r3
 8005500:	4629      	mov	r1, r5
 8005502:	4620      	mov	r0, r4
 8005504:	f000 f81f 	bl	8005546 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bdb0      	pop	{r4, r5, r7, pc}

08005512 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f946 	bl	80057ae <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005522:	4603      	mov	r3, r0
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 f946 	bl	80057c8 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800553c:	4603      	mov	r3, r0
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8005546:	b590      	push	{r4, r7, lr}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005552:	68fc      	ldr	r4, [r7, #12]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff fdd0 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800555a:	4602      	mov	r2, r0
 800555c:	f107 0308 	add.w	r3, r7, #8
 8005560:	4619      	mov	r1, r3
 8005562:	4620      	mov	r0, r4
 8005564:	f000 f948 	bl	80057f8 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bd90      	pop	{r4, r7, pc}

08005572 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f80a 	bl	8005594 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf14      	ite	ne
 8005586:	2301      	movne	r3, #1
 8005588:	2300      	moveq	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f943 	bl	800582a <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80055a4:	4603      	mov	r3, r0
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	4603      	mov	r3, r0
 80055b6:	71fb      	strb	r3, [r7, #7]
    return t;
 80055b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	ee07 3a90 	vmov	s15, r3
}
 80055d8:	eeb0 0a67 	vmov.f32	s0, s15
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f928 	bl	8005846 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80055f6:	4603      	mov	r3, r0
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f927 	bl	800585e <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005610:	4603      	mov	r3, r0
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8005630:	b5b0      	push	{r4, r5, r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800563c:	68fc      	ldr	r4, [r7, #12]
 800563e:	68b8      	ldr	r0, [r7, #8]
 8005640:	f7ff ffeb 	bl	800561a <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005644:	4605      	mov	r5, r0
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fd57 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800564c:	4603      	mov	r3, r0
 800564e:	461a      	mov	r2, r3
 8005650:	4629      	mov	r1, r5
 8005652:	4620      	mov	r0, r4
 8005654:	f000 f910 	bl	8005878 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bdb0      	pop	{r4, r5, r7, pc}

08005662 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 f921 	bl	80058b4 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8005672:	4603      	mov	r3, r0
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 f920 	bl	80058ce <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800568e:	4603      	mov	r3, r0
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f91f 	bl	80058e6 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80056a8:	4603      	mov	r3, r0
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80056d4:	68fc      	ldr	r4, [r7, #12]
 80056d6:	68b8      	ldr	r0, [r7, #8]
 80056d8:	f7ff ffeb 	bl	80056b2 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80056dc:	4605      	mov	r5, r0
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fd0b 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	4629      	mov	r1, r5
 80056ea:	4620      	mov	r0, r4
 80056ec:	f000 f908 	bl	8005900 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bdb0      	pop	{r4, r5, r7, pc}

080056fa <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f919 	bl	800593c <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800570a:	4603      	mov	r3, r0
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f918 	bl	8005956 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005726:	4603      	mov	r3, r0
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4618      	mov	r0, r3
 800573c:	f000 f917 	bl	800596e <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005740:	4603      	mov	r3, r0
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8005760:	b5b0      	push	{r4, r5, r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800576c:	68fc      	ldr	r4, [r7, #12]
 800576e:	68b8      	ldr	r0, [r7, #8]
 8005770:	f7ff ffeb 	bl	800574a <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005774:	4605      	mov	r5, r0
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fcbf 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800577c:	4603      	mov	r3, r0
 800577e:	461a      	mov	r2, r3
 8005780:	4629      	mov	r1, r5
 8005782:	4620      	mov	r0, r4
 8005784:	f000 f900 	bl	8005988 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bdb0      	pop	{r4, r5, r7, pc}

08005792 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	f000 f911 	bl	80059c4 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80057a2:	4603      	mov	r3, r0
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 f910 	bl	80059de <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80057be:	4603      	mov	r3, r0
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f90f 	bl	80059f6 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80057d8:	4603      	mov	r3, r0
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80057f8:	b5b0      	push	{r4, r5, r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005804:	68fc      	ldr	r4, [r7, #12]
 8005806:	68b8      	ldr	r0, [r7, #8]
 8005808:	f7ff ffeb 	bl	80057e2 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800580c:	4605      	mov	r5, r0
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fc73 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005814:	4603      	mov	r3, r0
 8005816:	461a      	mov	r2, r3
 8005818:	4629      	mov	r1, r5
 800581a:	4620      	mov	r0, r4
 800581c:	f000 f8f8 	bl	8005a10 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bdb0      	pop	{r4, r5, r7, pc}

0800582a <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4618      	mov	r0, r3
 8005836:	f000 f909 	bl	8005a4c <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800583a:	4603      	mov	r3, r0
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f928 	bl	8005aa4 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005854:	4603      	mov	r3, r0
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4618      	mov	r0, r3
 800586a:	f000 f8fc 	bl	8005a66 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800586e:	4603      	mov	r3, r0
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005878:	b590      	push	{r4, r7, lr}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8005884:	68fc      	ldr	r4, [r7, #12]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff fc37 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800588c:	4603      	mov	r3, r0
 800588e:	4619      	mov	r1, r3
 8005890:	4620      	mov	r0, r4
 8005892:	f000 f8f4 	bl	8005a7e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1d1c      	adds	r4, r3, #4
 800589a:	68b8      	ldr	r0, [r7, #8]
 800589c:	f7ff febd 	bl	800561a <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80058a0:	4603      	mov	r3, r0
 80058a2:	4619      	mov	r1, r3
 80058a4:	4620      	mov	r0, r4
 80058a6:	f000 f90b 	bl	8005ac0 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd90      	pop	{r4, r7, pc}

080058b4 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f90f 	bl	8005ae2 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80058c4:	4603      	mov	r3, r0
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f90f 	bl	8005afa <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80058dc:	4603      	mov	r3, r0
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f8b8 	bl	8005a66 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80058f6:	4603      	mov	r3, r0
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005900:	b590      	push	{r4, r7, lr}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800590c:	68fc      	ldr	r4, [r7, #12]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fbf3 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005914:	4603      	mov	r3, r0
 8005916:	4619      	mov	r1, r3
 8005918:	4620      	mov	r0, r4
 800591a:	f000 f8b0 	bl	8005a7e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1d1c      	adds	r4, r3, #4
 8005922:	68b8      	ldr	r0, [r7, #8]
 8005924:	f7ff fec5 	bl	80056b2 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005928:	4603      	mov	r3, r0
 800592a:	4619      	mov	r1, r3
 800592c:	4620      	mov	r0, r4
 800592e:	f000 f8f2 	bl	8005b16 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bd90      	pop	{r4, r7, pc}

0800593c <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f8f6 	bl	8005b38 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800594c:	4603      	mov	r3, r0
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f8f6 	bl	8005b50 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005964:	4603      	mov	r3, r0
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f874 	bl	8005a66 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800597e:	4603      	mov	r3, r0
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8005994:	68fc      	ldr	r4, [r7, #12]
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fbaf 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800599c:	4603      	mov	r3, r0
 800599e:	4619      	mov	r1, r3
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 f86c 	bl	8005a7e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1d1c      	adds	r4, r3, #4
 80059aa:	68b8      	ldr	r0, [r7, #8]
 80059ac:	f7ff fecd 	bl	800574a <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80059b0:	4603      	mov	r3, r0
 80059b2:	4619      	mov	r1, r3
 80059b4:	4620      	mov	r0, r4
 80059b6:	f000 f8d9 	bl	8005b6c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd90      	pop	{r4, r7, pc}

080059c4 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 f8dd 	bl	8005b8e <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80059d4:	4603      	mov	r3, r0
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8dd 	bl	8005ba6 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80059ec:	4603      	mov	r3, r0
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 f830 	bl	8005a66 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005a10:	b590      	push	{r4, r7, lr}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8005a1c:	68fc      	ldr	r4, [r7, #12]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fb6b 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005a24:	4603      	mov	r3, r0
 8005a26:	4619      	mov	r1, r3
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 f828 	bl	8005a7e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1d1c      	adds	r4, r3, #4
 8005a32:	68b8      	ldr	r0, [r7, #8]
 8005a34:	f7ff fed5 	bl	80057e2 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f000 f8c0 	bl	8005bc2 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd90      	pop	{r4, r7, pc}

08005a4c <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 f8c4 	bl	8005be4 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f8c4 	bl	8005bfc <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8005a74:	4603      	mov	r3, r0
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8005a7e:	b590      	push	{r4, r7, lr}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8005a88:	687c      	ldr	r4, [r7, #4]
 8005a8a:	6838      	ldr	r0, [r7, #0]
 8005a8c:	f7ff fb35 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005a90:	4603      	mov	r3, r0
 8005a92:	4619      	mov	r1, r3
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 f8be 	bl	8005c16 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd90      	pop	{r4, r7, pc}

08005aa4 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 f8c1 	bl	8005c38 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005aca:	6838      	ldr	r0, [r7, #0]
 8005acc:	f7ff fda5 	bl	800561a <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f8af 	bl	8005c4e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005af0:	4603      	mov	r3, r0
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 f8af 	bl	8005c6a <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005b20:	6838      	ldr	r0, [r7, #0]
 8005b22:	f7ff fdc6 	bl	80056b2 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005b26:	4603      	mov	r3, r0
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f89d 	bl	8005c80 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005b46:	4603      	mov	r3, r0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 f89d 	bl	8005c9c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 8005b62:	4603      	mov	r3, r0
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005b76:	6838      	ldr	r0, [r7, #0]
 8005b78:	f7ff fde7 	bl	800574a <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f88b 	bl	8005cb2 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f88b 	bl	8005cce <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005bcc:	6838      	ldr	r0, [r7, #0]
 8005bce:	f7ff fe08 	bl	80057e2 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f879 	bl	8005ce4 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 f87a 	bl	8005d00 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005c20:	6838      	ldr	r0, [r7, #0]
 8005c22:	f7ff fa6a 	bl	80050fa <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005c26:	4602      	mov	r2, r0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f85b 	bl	8005d16 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 8005c60:	4603      	mov	r3, r0
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 f84d 	bl	8005d2c <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 f83f 	bl	8005d42 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f831 	bl	8005d58 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <CountLeadingZeros32>:
static inline int CountLeadingZeros32(uint32_t n) {
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  if (n == 0) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <CountLeadingZeros32+0x12>
    return 32;
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	e002      	b.n	8005d86 <CountLeadingZeros32+0x18>
  return __builtin_clz(n);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	fab3 f383 	clz	r3, r3
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <MostSignificantBit32>:
static inline int MostSignificantBit32(uint32_t n) {
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  return 32 - CountLeadingZeros32(n);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff ffe7 	bl	8005d6e <CountLeadingZeros32>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f1c3 0320 	rsb	r3, r3, #32
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <FrontendProcessSamples>:
#include "bits.h"

struct FrontendOutput FrontendProcessSamples(struct FrontendState* state,
                                             const int16_t* samples,
                                             size_t num_samples,
                                             size_t* num_samples_read) {
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b08c      	sub	sp, #48	; 0x30
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	603b      	str	r3, [r7, #0]
  struct FrontendOutput output;
  output.values = NULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
  output.size = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61bb      	str	r3, [r7, #24]

  // Try to apply the window - if it fails, return and wait for more data.
  if (!WindowProcessSamples(&state->window, samples, num_samples,
 8005dc4:	68b8      	ldr	r0, [r7, #8]
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	f00c fe86 	bl	8012adc <WindowProcessSamples>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d108      	bne.n	8005de8 <FrontendProcessSamples+0x3a>
                            num_samples_read)) {
    return output;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f107 0314 	add.w	r3, r7, #20
 8005dde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005de2:	e882 0003 	stmia.w	r2, {r0, r1}
 8005de6:	e05a      	b.n	8005e9e <FrontendProcessSamples+0xf0>
  }

  // Apply the FFT to the window's output (and scale it so that the fixed point
  // FFT can have as much resolution as possible).
  int input_shift =
      15 - MostSignificantBit32(state->window.max_abs_output_value);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff ffcf 	bl	8005d92 <MostSignificantBit32>
 8005df4:	4603      	mov	r3, r0
  int input_shift =
 8005df6:	f1c3 030f 	rsb	r3, r3, #15
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  FftCompute(&state->fft, state->window.output, input_shift);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f103 001c 	add.w	r0, r3, #28
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f7fd fa23 	bl	8003254 <FftCompute>

  // We can re-ruse the fft's output buffer to hold the energy.
  int32_t* energy = (int32_t*)state->fft.output;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28

  FilterbankConvertFftComplexToEnergy(&state->filterbank, state->fft.output,
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e20:	4619      	mov	r1, r3
 8005e22:	f7fd fb75 	bl	8003510 <FilterbankConvertFftComplexToEnergy>
                                      energy);

  FilterbankAccumulateChannels(&state->filterbank, energy);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	3334      	adds	r3, #52	; 0x34
 8005e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fd fbaf 	bl	8003590 <FilterbankAccumulateChannels>
  uint32_t* scaled_filterbank = FilterbankSqrt(&state->filterbank, input_shift);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	3334      	adds	r3, #52	; 0x34
 8005e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fd fd4a 	bl	80038d2 <FilterbankSqrt>
 8005e3e:	6278      	str	r0, [r7, #36]	; 0x24

  // Apply noise reduction.
  NoiseReductionApply(&state->noise_reduction, scaled_filterbank);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	3358      	adds	r3, #88	; 0x58
 8005e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e46:	4618      	mov	r0, r3
 8005e48:	f008 fd70 	bl	800e92c <NoiseReductionApply>

  if (state->pcan_gain_control.enable_pcan) {
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <FrontendProcessSamples+0xb2>
    PcanGainControlApply(&state->pcan_gain_control, scaled_filterbank);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	336c      	adds	r3, #108	; 0x6c
 8005e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f008 ff9f 	bl	800ed9e <PcanGainControlApply>
  }

  // Apply the log and scale.
  int correction_bits =
      MostSignificantBit32(state->fft.fft_size) - 1 - (kFilterbankBits / 2);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff ff94 	bl	8005d92 <MostSignificantBit32>
 8005e6a:	4603      	mov	r3, r0
  int correction_bits =
 8005e6c:	3b07      	subs	r3, #7
 8005e6e:	623b      	str	r3, [r7, #32]
  uint16_t* logged_filterbank =
      LogScaleApply(&state->log_scale, scaled_filterbank,
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  uint16_t* logged_filterbank =
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e7e:	f003 fd97 	bl	80099b0 <LogScaleApply>
 8005e82:	61f8      	str	r0, [r7, #28]
                    state->filterbank.num_channels, correction_bits);

  output.size = state->filterbank.num_channels;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e88:	61bb      	str	r3, [r7, #24]
  output.values = logged_filterbank;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	617b      	str	r3, [r7, #20]
  return output;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	461a      	mov	r2, r3
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005e9a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	3730      	adds	r7, #48	; 0x30
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <FrontendReset>:

void FrontendReset(struct FrontendState* state) {
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  WindowReset(&state->window);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f00c fe9f 	bl	8012bf4 <WindowReset>
  FftReset(&state->fft);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	331c      	adds	r3, #28
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fd fa19 	bl	80032f2 <FftReset>
  FilterbankReset(&state->filterbank);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3334      	adds	r3, #52	; 0x34
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fd fd35 	bl	8003934 <FilterbankReset>
  NoiseReductionReset(&state->noise_reduction);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3358      	adds	r3, #88	; 0x58
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f008 fdcd 	bl	800ea6e <NoiseReductionReset>
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <CountLeadingZeros32>:
static inline int CountLeadingZeros32(uint32_t n) {
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  if (n == 0) {
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <CountLeadingZeros32+0x12>
    return 32;
 8005eea:	2320      	movs	r3, #32
 8005eec:	e002      	b.n	8005ef4 <CountLeadingZeros32+0x18>
  return __builtin_clz(n);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	fab3 f383 	clz	r3, r3
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <MostSignificantBit32>:
static inline int MostSignificantBit32(uint32_t n) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  return 32 - CountLeadingZeros32(n);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ffe7 	bl	8005edc <CountLeadingZeros32>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f1c3 0320 	rsb	r3, r3, #32
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <FrontendPopulateState>:
  PcanGainControlFillConfigWithDefaults(&config->pcan_gain_control);
  LogScaleFillConfigWithDefaults(&config->log_scale);
}

int FrontendPopulateState(const struct FrontendConfig* config,
                          struct FrontendState* state, int sample_rate) {
 8005f1c:	b5b0      	push	{r4, r5, r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  memset(state, 0, sizeof(*state));
 8005f28:	2288      	movs	r2, #136	; 0x88
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	68b8      	ldr	r0, [r7, #8]
 8005f2e:	f013 f86d 	bl	801900c <memset>

  if (!WindowPopulateState(&config->window, &state->window, sample_rate)) {
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f00c fe7d 	bl	8012c38 <WindowPopulateState>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d109      	bne.n	8005f58 <FrontendPopulateState+0x3c>
    fprintf(stderr, "Failed to populate window state\n");
 8005f44:	4b4e      	ldr	r3, [pc, #312]	; (8006080 <FrontendPopulateState+0x164>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	484d      	ldr	r0, [pc, #308]	; (8006084 <FrontendPopulateState+0x168>)
 8005f50:	f012 fff6 	bl	8018f40 <fwrite>
    return 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e08f      	b.n	8006078 <FrontendPopulateState+0x15c>
  }

  if (!FftPopulateState(&state->fft, state->window.size)) {
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f103 021c 	add.w	r2, r3, #28
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4619      	mov	r1, r3
 8005f64:	4610      	mov	r0, r2
 8005f66:	f7fd f9e1 	bl	800332c <FftPopulateState>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d109      	bne.n	8005f84 <FrontendPopulateState+0x68>
    fprintf(stderr, "Failed to populate fft state\n");
 8005f70:	4b43      	ldr	r3, [pc, #268]	; (8006080 <FrontendPopulateState+0x164>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	221d      	movs	r2, #29
 8005f78:	2101      	movs	r1, #1
 8005f7a:	4843      	ldr	r0, [pc, #268]	; (8006088 <FrontendPopulateState+0x16c>)
 8005f7c:	f012 ffe0 	bl	8018f40 <fwrite>
    return 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	e079      	b.n	8006078 <FrontendPopulateState+0x15c>
  }
  FftInit(&state->fft);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	331c      	adds	r3, #28
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fd f9a8 	bl	80032de <FftInit>

  if (!FilterbankPopulateState(&config->filterbank, &state->filterbank,
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f103 0008 	add.w	r0, r3, #8
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f103 0134 	add.w	r1, r3, #52	; 0x34
                               sample_rate, state->fft.fft_size / 2 + 1)) {
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	3301      	adds	r3, #1
  if (!FilterbankPopulateState(&config->filterbank, &state->filterbank,
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	f7fd fde0 	bl	8003b68 <FilterbankPopulateState>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <FrontendPopulateState+0xa6>
    fprintf(stderr, "Failed to populate filterbank state\n");
 8005fae:	4b34      	ldr	r3, [pc, #208]	; (8006080 <FrontendPopulateState+0x164>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	2224      	movs	r2, #36	; 0x24
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	4834      	ldr	r0, [pc, #208]	; (800608c <FrontendPopulateState+0x170>)
 8005fba:	f012 ffc1 	bl	8018f40 <fwrite>
    return 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e05a      	b.n	8006078 <FrontendPopulateState+0x15c>
  }

  if (!NoiseReductionPopulateState(&config->noise_reduction,
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f103 0018 	add.w	r0, r3, #24
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f008 fd5c 	bl	800ea90 <NoiseReductionPopulateState>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <FrontendPopulateState+0xd6>
                                   &state->noise_reduction,
                                   state->filterbank.num_channels)) {
    fprintf(stderr, "Failed to populate noise reduction state\n");
 8005fde:	4b28      	ldr	r3, [pc, #160]	; (8006080 <FrontendPopulateState+0x164>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2229      	movs	r2, #41	; 0x29
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	4829      	ldr	r0, [pc, #164]	; (8006090 <FrontendPopulateState+0x174>)
 8005fea:	f012 ffa9 	bl	8018f40 <fwrite>
    return 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e042      	b.n	8006078 <FrontendPopulateState+0x15c>
  }

  int input_correction_bits =
      MostSignificantBit32(state->fft.fft_size) - 1 - (kFilterbankBits / 2);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff ff82 	bl	8005f00 <MostSignificantBit32>
 8005ffc:	4603      	mov	r3, r0
  int input_correction_bits =
 8005ffe:	3b07      	subs	r3, #7
 8006000:	617b      	str	r3, [r7, #20]
  if (!PcanGainControlPopulateState(
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	6b5d      	ldr	r5, [r3, #52]	; 0x34
          &config->pcan_gain_control, &state->pcan_gain_control,
          state->noise_reduction.estimate, state->filterbank.num_channels,
          state->noise_reduction.smoothing_bits, input_correction_bits)) {
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  if (!PcanGainControlPopulateState(
 800601a:	b29b      	uxth	r3, r3
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	9201      	str	r2, [sp, #4]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	462b      	mov	r3, r5
 8006024:	4622      	mov	r2, r4
 8006026:	f008 ff67 	bl	800eef8 <PcanGainControlPopulateState>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d109      	bne.n	8006044 <FrontendPopulateState+0x128>
    fprintf(stderr, "Failed to populate pcan gain control state\n");
 8006030:	4b13      	ldr	r3, [pc, #76]	; (8006080 <FrontendPopulateState+0x164>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	222b      	movs	r2, #43	; 0x2b
 8006038:	2101      	movs	r1, #1
 800603a:	4816      	ldr	r0, [pc, #88]	; (8006094 <FrontendPopulateState+0x178>)
 800603c:	f012 ff80 	bl	8018f40 <fwrite>
    return 0;
 8006040:	2300      	movs	r3, #0
 8006042:	e019      	b.n	8006078 <FrontendPopulateState+0x15c>
  }

  if (!LogScalePopulateState(&config->log_scale, &state->log_scale)) {
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	3380      	adds	r3, #128	; 0x80
 800604e:	4619      	mov	r1, r3
 8006050:	4610      	mov	r0, r2
 8006052:	f003 fcfa 	bl	8009a4a <LogScalePopulateState>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <FrontendPopulateState+0x154>
    fprintf(stderr, "Failed to populate log scale state\n");
 800605c:	4b08      	ldr	r3, [pc, #32]	; (8006080 <FrontendPopulateState+0x164>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2223      	movs	r2, #35	; 0x23
 8006064:	2101      	movs	r1, #1
 8006066:	480c      	ldr	r0, [pc, #48]	; (8006098 <FrontendPopulateState+0x17c>)
 8006068:	f012 ff6a 	bl	8018f40 <fwrite>
    return 0;
 800606c:	2300      	movs	r3, #0
 800606e:	e003      	b.n	8006078 <FrontendPopulateState+0x15c>
  }

  FrontendReset(state);
 8006070:	68b8      	ldr	r0, [r7, #8]
 8006072:	f7ff ff18 	bl	8005ea6 <FrontendReset>

  // All good, return a true value.
  return 1;
 8006076:	2301      	movs	r3, #1
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bdb0      	pop	{r4, r5, r7, pc}
 8006080:	20000018 	.word	0x20000018
 8006084:	0801c244 	.word	0x0801c244
 8006088:	0801c268 	.word	0x0801c268
 800608c:	0801c288 	.word	0x0801c288
 8006090:	0801c2b0 	.word	0x0801c2b0
 8006094:	0801c2dc 	.word	0x0801c2dc
 8006098:	0801c308 	.word	0x0801c308

0800609c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fb f968 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80060ac:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	db03      	blt.n	80060bc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	db01      	blt.n	80060c0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 80060bc:	f012 fe2b 	bl	8018d16 <abort>
  const auto* dims_data = shape.DimsData();
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7fb f98c 	bl	80013de <_ZNK6tflite12RuntimeShape8DimsDataEv>
 80060c6:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80060cc:	2300      	movs	r3, #0
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	da12      	bge.n	80060fe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d005      	beq.n	80060ec <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	4413      	add	r3, r2
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	e000      	b.n	80060ee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 80060ec:	2301      	movs	r3, #1
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	fb03 f302 	mul.w	r3, r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	3301      	adds	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	e7e8      	b.n	80060d0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 80060fe:	697b      	ldr	r3, [r7, #20]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b091      	sub	sp, #68	; 0x44
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8006122:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006124:	f7fb f92a 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006128:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800612a:	6838      	ldr	r0, [r7, #0]
 800612c:	f7fb f926 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006130:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	3b01      	subs	r3, #1
 8006136:	4619      	mov	r1, r3
 8006138:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800613a:	f7ff ffaf 	bl	800609c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800613e:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	1e99      	subs	r1, r3, #2
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	3b01      	subs	r3, #1
                                       output_shape, output_dims_count - 1);
 8006148:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800614a:	6838      	ldr	r0, [r7, #0]
 800614c:	f7fb f9e1 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8006150:	6178      	str	r0, [r7, #20]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	3b01      	subs	r3, #1
 8006156:	4619      	mov	r1, r3
 8006158:	6838      	ldr	r0, [r7, #0]
 800615a:	f7fb f91b 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 800615e:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8006160:	2300      	movs	r3, #0
 8006162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	429a      	cmp	r2, r3
 800616a:	da5f      	bge.n	800622c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800616c:	2300      	movs	r3, #0
 800616e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	429a      	cmp	r2, r3
 8006176:	da55      	bge.n	8006224 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800617e:	2300      	movs	r3, #0
 8006180:	633b      	str	r3, [r7, #48]	; 0x30
 8006182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	429a      	cmp	r2, r3
 8006188:	da21      	bge.n	80061ce <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	fb02 f203 	mul.w	r2, r2, r3
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	4413      	add	r3, r2
 800619c:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	fb02 f203 	mul.w	r2, r2, r3
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061b0:	4413      	add	r3, r2
 80061b2:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 80061b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80061be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	3301      	adds	r3, #1
 80061ca:	633b      	str	r3, [r7, #48]	; 0x30
 80061cc:	e7d9      	b.n	8006182 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 80061d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061e0:	4413      	add	r3, r2
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 80061e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80061ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80061ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061f6:	fb02 f203 	mul.w	r2, r2, r3
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006202:	18d4      	adds	r4, r2, r3
 8006204:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8006208:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800620c:	eeb0 0a67 	vmov.f32	s0, s15
 8006210:	f7fc fb41 	bl	8002896 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8006214:	eef0 7a40 	vmov.f32	s15, s0
 8006218:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	3301      	adds	r3, #1
 8006220:	63bb      	str	r3, [r7, #56]	; 0x38
 8006222:	e7a5      	b.n	8006170 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8006224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006226:	3301      	adds	r3, #1
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800622a:	e79b      	b.n	8006164 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800622c:	bf00      	nop
 800622e:	3744      	adds	r7, #68	; 0x44
 8006230:	46bd      	mov	sp, r7
 8006232:	bd90      	pop	{r4, r7, pc}

08006234 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 8006234:	b580      	push	{r7, lr}
 8006236:	b096      	sub	sp, #88	; 0x58
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800626c:	6838      	ldr	r0, [r7, #0]
 800626e:	f7fb f885 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006272:	4603      	mov	r3, r0
 8006274:	2b01      	cmp	r3, #1
 8006276:	dc01      	bgt.n	800627c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8006278:	f012 fd4d 	bl	8018d16 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800627c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800627e:	f7fb f87d 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	dc01      	bgt.n	800628c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8006288:	f012 fd45 	bl	8018d16 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	dd01      	ble.n	8006298 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 8006294:	f012 fd3f 	bl	8018d16 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8006298:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800629a:	f7fb f86f 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800629e:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 80062a0:	6838      	ldr	r0, [r7, #0]
 80062a2:	f7fb f86b 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80062a6:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 80062a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062aa:	3b01      	subs	r3, #1
 80062ac:	4619      	mov	r1, r3
 80062ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062b0:	f7ff fef4 	bl	800609c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80062b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	1e99      	subs	r1, r3, #2
 80062ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062bc:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 80062be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062c0:	6838      	ldr	r0, [r7, #0]
 80062c2:	f7fb f926 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80062c6:	62b8      	str	r0, [r7, #40]	; 0x28
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	3b01      	subs	r3, #1
 80062cc:	4619      	mov	r1, r3
 80062ce:	6838      	ldr	r0, [r7, #0]
 80062d0:	f7fb f860 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 80062d4:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 80062d6:	2300      	movs	r3, #0
 80062d8:	657b      	str	r3, [r7, #84]	; 0x54
 80062da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	429a      	cmp	r2, r3
 80062e0:	da73      	bge.n	80063ca <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80062e2:	2300      	movs	r3, #0
 80062e4:	653b      	str	r3, [r7, #80]	; 0x50
 80062e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	429a      	cmp	r2, r3
 80062ec:	da69      	bge.n	80063c2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 80062f2:	2300      	movs	r3, #0
 80062f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	429a      	cmp	r2, r3
 80062fc:	da24      	bge.n	8006348 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 80062fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006302:	fb02 f203 	mul.w	r2, r2, r3
 8006306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006308:	4413      	add	r3, r2
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4413      	add	r3, r2
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8006314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006318:	fb02 f203 	mul.w	r2, r2, r3
 800631c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631e:	4413      	add	r3, r2
 8006320:	461a      	mov	r2, r3
 8006322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006324:	4413      	add	r3, r2
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800632e:	4413      	add	r3, r2
 8006330:	6a39      	ldr	r1, [r7, #32]
 8006332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006334:	440a      	add	r2, r1
 8006336:	fb02 f203 	mul.w	r2, r2, r3
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4413      	add	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8006340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006342:	3301      	adds	r3, #1
 8006344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006346:	e7d6      	b.n	80062f6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8006348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 800634e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006354:	4413      	add	r3, r2
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006364:	4618      	mov	r0, r3
 8006366:	f7fb f903 	bl	8001570 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800636a:	4603      	mov	r3, r0
 800636c:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006372:	4413      	add	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8006376:	f107 0218 	add.w	r2, r7, #24
 800637a:	f107 0310 	add.w	r3, r7, #16
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f7fa ff61 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 8006386:	4603      	mov	r3, r0
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 800638c:	f107 0214 	add.w	r2, r7, #20
 8006390:	f107 0310 	add.w	r3, r7, #16
 8006394:	4611      	mov	r1, r2
 8006396:	4618      	mov	r0, r3
 8006398:	f7fc fa50 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 800639c:	4603      	mov	r3, r0
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 80063a2:	6939      	ldr	r1, [r7, #16]
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063a8:	fb02 f203 	mul.w	r2, r2, r3
 80063ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ae:	4413      	add	r3, r2
 80063b0:	461a      	mov	r2, r3
 80063b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063b4:	4413      	add	r3, r2
 80063b6:	b2ca      	uxtb	r2, r1
 80063b8:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80063ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063bc:	3301      	adds	r3, #1
 80063be:	653b      	str	r3, [r7, #80]	; 0x50
 80063c0:	e791      	b.n	80062e6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 80063c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063c4:	3301      	adds	r3, #1
 80063c6:	657b      	str	r3, [r7, #84]	; 0x54
 80063c8:	e787      	b.n	80062da <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 80063ca:	bf00      	nop
 80063cc:	3758      	adds	r7, #88	; 0x58
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b098      	sub	sp, #96	; 0x60
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
 80063de:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	653b      	str	r3, [r7, #80]	; 0x50
  const int32_t filter_offset = params.weights_offset;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32_t output_offset = params.output_offset;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	623b      	str	r3, [r7, #32]
  const int32_t output_multiplier = params.output_multiplier;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	64bb      	str	r3, [r7, #72]	; 0x48
  const int output_shift = params.output_shift;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_activation_min = params.quantized_activation_min;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	61bb      	str	r3, [r7, #24]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	429a      	cmp	r2, r3
 8006410:	dd01      	ble.n	8006416 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 8006412:	f012 fc80 	bl	8018d16 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 800641c:	f012 fc7b 	bl	8018d16 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8006420:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006422:	f7fa ffab 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8006426:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_dim_count = filter_shape.DimensionsCount();
 8006428:	6838      	ldr	r0, [r7, #0]
 800642a:	f7fa ffa7 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800642e:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8006430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006432:	3b01      	subs	r3, #1
 8006434:	4619      	mov	r1, r3
 8006436:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006438:	f7ff fe30 	bl	800609c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800643c:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006440:	1e99      	subs	r1, r3, #2
 8006442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006444:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 8006446:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006448:	6838      	ldr	r0, [r7, #0]
 800644a:	f7fb f862 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800644e:	6378      	str	r0, [r7, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	3b01      	subs	r3, #1
 8006454:	4619      	mov	r1, r3
 8006456:	6838      	ldr	r0, [r7, #0]
 8006458:	f7fa ff9c 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 800645c:	6338      	str	r0, [r7, #48]	; 0x30
  for (int b = 0; b < batches; ++b) {
 800645e:	2300      	movs	r3, #0
 8006460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006462:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	429a      	cmp	r2, r3
 8006468:	da7c      	bge.n	8006564 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800646a:	2300      	movs	r3, #0
 800646c:	65bb      	str	r3, [r7, #88]	; 0x58
 800646e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	429a      	cmp	r2, r3
 8006474:	da72      	bge.n	800655c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32_t accum = bias_data[out_c];
 8006476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800647c:	4413      	add	r3, r2
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 8006482:	2300      	movs	r3, #0
 8006484:	657b      	str	r3, [r7, #84]	; 0x54
 8006486:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	429a      	cmp	r2, r3
 800648c:	da2c      	bge.n	80064e8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 800648e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006492:	fb02 f203 	mul.w	r2, r2, r3
 8006496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006498:	4413      	add	r3, r2
 800649a:	461a      	mov	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4413      	add	r3, r2
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	4413      	add	r3, r2
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
        int16_t filter_val =
            filter_data[out_c * accum_depth + d] + filter_offset;
 80064ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b2:	fb02 f203 	mul.w	r2, r2, r3
 80064b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b8:	4413      	add	r3, r2
 80064ba:	461a      	mov	r2, r3
 80064bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064be:	4413      	add	r3, r2
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	4413      	add	r3, r2
 80064ca:	b29b      	uxth	r3, r3
        int16_t filter_val =
 80064cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        accum += filter_val * input_val;
 80064ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80064d2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80064d6:	fb02 f203 	mul.w	r2, r2, r3
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 80064e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e2:	3301      	adds	r3, #1
 80064e4:	657b      	str	r3, [r7, #84]	; 0x54
 80064e6:	e7ce      	b.n	8006486 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32_t accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fb f83e 	bl	8001570 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80064f4:	4603      	mov	r3, r0
      accum =
 80064f6:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16_t, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006500:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006504:	f107 0314 	add.w	r3, r7, #20
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f7fa fe9c 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 8006510:	4603      	mov	r3, r0
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
 800651e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006522:	f107 0314 	add.w	r3, r7, #20
 8006526:	4611      	mov	r1, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f7fc f987 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 800652e:	4603      	mov	r3, r0
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	4413      	add	r3, r2
 800653a:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 800653c:	6979      	ldr	r1, [r7, #20]
 800653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006540:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006542:	fb02 f203 	mul.w	r2, r2, r3
 8006546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006548:	4413      	add	r3, r2
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800654e:	4413      	add	r3, r2
 8006550:	b20a      	sxth	r2, r1
 8006552:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8006554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006556:	3301      	adds	r3, #1
 8006558:	65bb      	str	r3, [r7, #88]	; 0x58
 800655a:	e788      	b.n	800646e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 800655c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800655e:	3301      	adds	r3, #1
 8006560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006562:	e77e      	b.n	8006462 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 8006564:	bf00      	nop
 8006566:	3760      	adds	r7, #96	; 0x60
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800656c:	b580      	push	{r7, lr}
 800656e:	b096      	sub	sp, #88	; 0x58
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	623b      	str	r3, [r7, #32]
  const int32_t output_activation_max = params.quantized_activation_max;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	61fb      	str	r3, [r7, #28]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 80065a4:	6838      	ldr	r0, [r7, #0]
 80065a6:	f7fa fee9 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	dc01      	bgt.n	80065b4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 80065b0:	f012 fbb1 	bl	8018d16 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80065b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065b6:	f7fa fee1 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d001      	beq.n	80065c4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 80065c0:	f012 fba9 	bl	8018d16 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80065c4:	6a3a      	ldr	r2, [r7, #32]
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	dd01      	ble.n	80065d0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 80065cc:	f012 fba3 	bl	8018d16 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 80065d0:	6838      	ldr	r0, [r7, #0]
 80065d2:	f7fa fed3 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80065d6:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 80065d8:	2100      	movs	r1, #0
 80065da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065dc:	f7fa feda 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 80065e0:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 80065e2:	2101      	movs	r1, #1
 80065e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065e6:	f7fa fed5 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 80065ea:	4603      	mov	r3, r0
 80065ec:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 80065ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f0:	3b02      	subs	r3, #2
 80065f2:	4619      	mov	r1, r3
 80065f4:	6838      	ldr	r0, [r7, #0]
 80065f6:	f7fa fecd 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 80065fa:	4602      	mov	r2, r0
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	429a      	cmp	r2, r3
 8006600:	da01      	bge.n	8006606 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x9a>
 8006602:	f012 fb88 	bl	8018d16 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8006606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006608:	3b01      	subs	r3, #1
 800660a:	4619      	mov	r1, r3
 800660c:	6838      	ldr	r0, [r7, #0]
 800660e:	f7fa fec1 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 8006612:	62f8      	str	r0, [r7, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
 8006614:	2300      	movs	r3, #0
 8006616:	657b      	str	r3, [r7, #84]	; 0x54
 8006618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	429a      	cmp	r2, r3
 800661e:	da75      	bge.n	800670c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x1a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8006620:	2300      	movs	r3, #0
 8006622:	653b      	str	r3, [r7, #80]	; 0x50
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006628:	429a      	cmp	r2, r3
 800662a:	da6b      	bge.n	8006704 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x198>
      int32_t acc = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8006630:	2300      	movs	r3, #0
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	429a      	cmp	r2, r3
 800663a:	da26      	bge.n	800668a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11e>
        int32_t input_val = input_data[b * accum_depth + d];
 800663c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800663e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006640:	fb02 f203 	mul.w	r2, r2, r3
 8006644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006646:	4413      	add	r3, r2
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4413      	add	r3, r2
 800664e:	f993 3000 	ldrsb.w	r3, [r3]
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8006654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006658:	fb02 f203 	mul.w	r2, r2, r3
 800665c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665e:	4413      	add	r3, r2
 8006660:	461a      	mov	r2, r3
 8006662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006664:	4413      	add	r3, r2
 8006666:	f993 3000 	ldrsb.w	r3, [r3]
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800666c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006670:	4413      	add	r3, r2
 8006672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006676:	440a      	add	r2, r1
 8006678:	fb02 f203 	mul.w	r2, r2, r3
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	4413      	add	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8006682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006684:	3301      	adds	r3, #1
 8006686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006688:	e7d4      	b.n	8006634 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc8>
      }
      if (bias_data) {
 800668a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x134>
        acc += bias_data[out_c];
 8006690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006696:	4413      	add	r3, r2
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	4413      	add	r3, r2
 800669e:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fa ff62 	bl	8001570 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80066ac:	4603      	mov	r3, r0
 80066ae:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b4:	4413      	add	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 80066b8:	f107 0220 	add.w	r2, r7, #32
 80066bc:	f107 0314 	add.w	r3, r7, #20
 80066c0:	4611      	mov	r1, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fa fdc0 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 80066c8:	4603      	mov	r3, r0
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 80066ce:	f107 021c 	add.w	r2, r7, #28
 80066d2:	f107 0314 	add.w	r3, r7, #20
 80066d6:	4611      	mov	r1, r2
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fc f8af 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 80066de:	4603      	mov	r3, r0
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 80066e4:	6979      	ldr	r1, [r7, #20]
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066ea:	fb02 f203 	mul.w	r2, r2, r3
 80066ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f0:	4413      	add	r3, r2
 80066f2:	461a      	mov	r2, r3
 80066f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066f6:	4413      	add	r3, r2
 80066f8:	b24a      	sxtb	r2, r1
 80066fa:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80066fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066fe:	3301      	adds	r3, #1
 8006700:	653b      	str	r3, [r7, #80]	; 0x50
 8006702:	e78f      	b.n	8006624 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb8>
  for (int b = 0; b < batches; ++b) {
 8006704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006706:	3301      	adds	r3, #1
 8006708:	657b      	str	r3, [r7, #84]	; 0x54
 800670a:	e785      	b.n	8006618 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xac>
    }
  }
}
 800670c:	bf00      	nop
 800670e:	3758      	adds	r7, #88	; 0x58
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 8006714:	b590      	push	{r4, r7, lr}
 8006716:	b08d      	sub	sp, #52	; 0x34
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	607b      	str	r3, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	72fb      	strb	r3, [r7, #11]
 8006722:	4613      	mov	r3, r2
 8006724:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 8006726:	2300      	movs	r3, #0
 8006728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 800672c:	7abb      	ldrb	r3, [r7, #10]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d04d      	beq.n	80067ce <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xba>
    double real_multiplier = 0.0;
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	f04f 0400 	mov.w	r4, #0
 800673a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800673e:	f107 0318 	add.w	r3, r7, #24
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f001 fade 	bl	8007d10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8006754:	4603      	mov	r3, r0
 8006756:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800675a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0x54>
 8006762:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006766:	e034      	b.n	80067d2 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xbe>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 8006768:	ed97 7b06 	vldr	d7, [r7, #24]
 800676c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676e:	f107 0214 	add.w	r2, r7, #20
 8006772:	4611      	mov	r1, r2
 8006774:	4618      	mov	r0, r3
 8006776:	eeb0 0a47 	vmov.f32	s0, s14
 800677a:	eef0 0a67 	vmov.f32	s1, s15
 800677e:	f008 fc7d 	bl	800f07c <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	425a      	negs	r2, r3
 8006786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006788:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800678a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800678c:	f103 0208 	add.w	r2, r3, #8
 8006790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006792:	330c      	adds	r3, #12
 8006794:	7af9      	ldrb	r1, [r7, #11]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f001 fc45 	bl	800802c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80067a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xa2>
 80067b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80067b4:	e00d      	b.n	80067d2 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xbe>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));

    data->input_zero_point = input->params.zero_point;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067bc:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c0:	691a      	ldr	r2, [r3, #16]
 80067c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c4:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 80067c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067cc:	61da      	str	r2, [r3, #28]
  }
  return status;
 80067ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	372c      	adds	r7, #44	; 0x2c
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd90      	pop	{r4, r7, pc}

080067da <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 80067ee:	f012 fa92 	bl	8018d16 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	2120      	movs	r1, #32
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	4798      	blx	r3
 80067fc:	4603      	mov	r3, r0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8006808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800680a:	b08d      	sub	sp, #52	; 0x34
 800680c:	af04      	add	r7, sp, #16
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800681a:	f012 fa7c 	bl	8018d16 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8006826:	f012 fa76 	bl	8018d16 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	61fb      	str	r3, [r7, #28]
  const auto params =
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f001 f892 	bl	8007966 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8006842:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x58>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695c      	ldr	r4, [r3, #20]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	4b3e      	ldr	r3, [pc, #248]	; (800694c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	235c      	movs	r3, #92	; 0x5c
 8006856:	4a3e      	ldr	r2, [pc, #248]	; (8006950 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 8006858:	493e      	ldr	r1, [pc, #248]	; (8006954 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800685a:	47a0      	blx	r4
 800685c:	2301      	movs	r3, #1
 800685e:	e071      	b.n	8006944 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f001 f87d 	bl	8007966 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800686c:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x82>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	695c      	ldr	r4, [r3, #20]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4b37      	ldr	r3, [pc, #220]	; (8006958 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	235e      	movs	r3, #94	; 0x5e
 8006880:	4a33      	ldr	r2, [pc, #204]	; (8006950 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 8006882:	4934      	ldr	r1, [pc, #208]	; (8006954 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 8006884:	47a0      	blx	r4
 8006886:	2301      	movs	r3, #1
 8006888:	e05c      	b.n	8006944 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f001 f897 	bl	80079c4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8006896:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 f871 	bl	8007986 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80068a4:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, output != nullptr);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xba>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695c      	ldr	r4, [r3, #20]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4b2a      	ldr	r3, [pc, #168]	; (800695c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	2361      	movs	r3, #97	; 0x61
 80068b8:	4a25      	ldr	r2, [pc, #148]	; (8006950 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 80068ba:	4926      	ldr	r1, [pc, #152]	; (8006954 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 80068bc:	47a0      	blx	r4
 80068be:	2301      	movs	r3, #1
 80068c0:	e040      	b.n	8006944 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	781a      	ldrb	r2, [r3, #0]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d01b      	beq.n	8006906 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695c      	ldr	r4, [r3, #20]
 80068d2:	687d      	ldr	r5, [r7, #4]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fa fbfb 	bl	80010d4 <TfLiteTypeGetName>
 80068de:	4606      	mov	r6, r0
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fa fbf5 	bl	80010d4 <TfLiteTypeGetName>
 80068ea:	4603      	mov	r3, r0
 80068ec:	9303      	str	r3, [sp, #12]
 80068ee:	9602      	str	r6, [sp, #8]
 80068f0:	4b1b      	ldr	r3, [pc, #108]	; (8006960 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	4b1b      	ldr	r3, [pc, #108]	; (8006964 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	2363      	movs	r3, #99	; 0x63
 80068fa:	4a15      	ldr	r2, [pc, #84]	; (8006950 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 80068fc:	491a      	ldr	r1, [pc, #104]	; (8006968 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
 80068fe:	4628      	mov	r0, r5
 8006900:	47a0      	blx	r4
 8006902:	2301      	movs	r3, #1
 8006904:	e01e      	b.n	8006944 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	781a      	ldrb	r2, [r3, #0]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d007      	beq.n	8006922 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	4914      	ldr	r1, [pc, #80]	; (800696c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 800691a:	4610      	mov	r0, r2
 800691c:	4798      	blx	r3
 800691e:	2301      	movs	r3, #1
 8006920:	e010      	b.n	8006944 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	7819      	ldrb	r1, [r3, #0]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	781a      	ldrb	r2, [r3, #0]
                         filter, bias, output, data);
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	9302      	str	r3, [sp, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f7ff fee9 	bl	8006714 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE>
 8006942:	4603      	mov	r3, r0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3724      	adds	r7, #36	; 0x24
 8006948:	46bd      	mov	sp, r7
 800694a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800694c:	0801c364 	.word	0x0801c364
 8006950:	0801c32c 	.word	0x0801c32c
 8006954:	0801c34c 	.word	0x0801c34c
 8006958:	0801c378 	.word	0x0801c378
 800695c:	0801c38c 	.word	0x0801c38c
 8006960:	0801c3bc 	.word	0x0801c3bc
 8006964:	0801c3cc 	.word	0x0801c3cc
 8006968:	0801c3a0 	.word	0x0801c3a0
 800696c:	0801c3d8 	.word	0x0801c3d8

08006970 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 8006970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006972:	b0ad      	sub	sp, #180	; 0xb4
 8006974:	af06      	add	r7, sp, #24
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	425b      	negs	r3, r3
 8006984:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -data.filter_zero_point;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	425b      	negs	r3, r3
 800698c:	617b      	str	r3, [r7, #20]
  op_params.output_offset = data.output_zero_point;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	425b      	negs	r3, r3
 80069a0:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, tflite::micro::GetTensorShape(input),
 80069ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fec2 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 80069ba:	6838      	ldr	r0, [r7, #0]
 80069bc:	f7fc fa32 	bl	8002e24 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80069c0:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(filter),
 80069c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80069c6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 feb7 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 80069d0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80069d4:	f7fc fa26 	bl	8002e24 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80069d8:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 80069da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80069de:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 feab 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 80069e8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80069ec:	f7fc fa29 	bl	8002e42 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80069f0:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 80069f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80069f6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fe9f 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 8006a00:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006a04:	f7fc fa2c 	bl	8002e60 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a0e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006a12:	f107 0010 	add.w	r0, r7, #16
 8006a16:	9304      	str	r3, [sp, #16]
 8006a18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a1c:	9303      	str	r3, [sp, #12]
 8006a1e:	9502      	str	r5, [sp, #8]
 8006a20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	9400      	str	r4, [sp, #0]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	4632      	mov	r2, r6
 8006a2c:	f7ff fd9e 	bl	800656c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      tflite::micro::GetTensorShape(output),
 8006a30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fa fc8b 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 8006a3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fa fc86 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 8006a44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fa fc81 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 8006a4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fa fc7c 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
  return kTfLiteOk;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	379c      	adds	r7, #156	; 0x9c
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006a64 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteEvalTensor* input,
                           const TfLiteEvalTensor* filter,
                           const TfLiteEvalTensor* bias,
                           TfLiteEvalTensor* output) {
 8006a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a66:	b0c9      	sub	sp, #292	; 0x124
 8006a68:	af06      	add	r7, sp, #24
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	f107 0008 	add.w	r0, r7, #8
 8006a70:	6001      	str	r1, [r0, #0]
 8006a72:	1d39      	adds	r1, r7, #4
 8006a74:	600a      	str	r2, [r1, #0]
 8006a76:	463a      	mov	r2, r7
 8006a78:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -data.input_zero_point;
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	425b      	negs	r3, r3
 8006a82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -data.filter_zero_point;
 8006a86:	1d3b      	adds	r3, r7, #4
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	425b      	negs	r3, r3
 8006a8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = data.output_zero_point;
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa0:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 8006aa2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006aa6:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 8006aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aac:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 8006aae:	1d3b      	adds	r3, r7, #4
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 8006ab6:	1d3b      	adds	r3, r7, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	425b      	negs	r3, r3
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 8006ac0:	1d3b      	adds	r3, r7, #4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8006ac8:	1d3b      	adds	r3, r7, #4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c
      tflite::micro::GetTensorData<uint8_t>(filter),   \
      tflite::micro::GetTensorShape(bias),             \
      tflite::micro::GetTensorData<int32_t>(bias),     \
      tflite::micro::GetTensorShape(output),           \
      tflite::micro::GetTensorData<output_data_type>(output))
  switch (output->type) {
 8006ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ad4:	7a1b      	ldrb	r3, [r3, #8]
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d002      	beq.n	8006ae0 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x7c>
 8006ada:	2b07      	cmp	r3, #7
 8006adc:	d058      	beq.n	8006b90 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
 8006ade:	e0af      	b.n	8006c40 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 8006ae0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	6819      	ldr	r1, [r3, #0]
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f000 fe28 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8006aee:	463b      	mov	r3, r7
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	f7fc f9c6 	bl	8002e82 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8006af6:	4606      	mov	r6, r0
 8006af8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006afc:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fe1c 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8006b06:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8006b0a:	f7fc f9ba 	bl	8002e82 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8006b0e:	4604      	mov	r4, r0
 8006b10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006b14:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fe10 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8006b1e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8006b22:	f7fc f98e 	bl	8002e42 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8006b26:	4605      	mov	r5, r0
 8006b28:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006b2c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fe04 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8006b36:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8006b3a:	f7fc f9b1 	bl	8002ea0 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006b44:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006b48:	f107 0014 	add.w	r0, r7, #20
 8006b4c:	9304      	str	r3, [sp, #16]
 8006b4e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006b52:	9303      	str	r3, [sp, #12]
 8006b54:	9502      	str	r5, [sp, #8]
 8006b56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	9400      	str	r4, [sp, #0]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	4632      	mov	r2, r6
 8006b62:	f7ff fb67 	bl	8006234 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 8006b66:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fa fbf0 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
 8006b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fa fbeb 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
 8006b7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fa fbe6 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
 8006b84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fa fbe1 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8006b8e:	e069      	b.n	8006c64 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x200>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 8006b90:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8006b94:	463b      	mov	r3, r7
 8006b96:	6819      	ldr	r1, [r3, #0]
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f000 fdd0 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f7fc f96e 	bl	8002e82 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006bac:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fdc4 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8006bb6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8006bba:	f7fc f962 	bl	8002e82 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006bc4:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fdb8 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8006bce:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8006bd2:	f7fc f936 	bl	8002e42 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006bdc:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fdac 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8006be6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8006bea:	f000 f943 	bl	8006e74 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8006bf4:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8006bf8:	f107 0014 	add.w	r0, r7, #20
 8006bfc:	9304      	str	r3, [sp, #16]
 8006bfe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006c02:	9303      	str	r3, [sp, #12]
 8006c04:	9502      	str	r5, [sp, #8]
 8006c06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	9400      	str	r4, [sp, #0]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	4632      	mov	r2, r6
 8006c12:	f7ff fbde 	bl	80063d2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 8006c16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fa fb98 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
 8006c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fa fb93 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
 8006c2a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fa fb8e 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
 8006c34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fa fb89 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8006c3e:	e011      	b.n	8006c64 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x200>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	695c      	ldr	r4, [r3, #20]
 8006c44:	68fd      	ldr	r5, [r7, #12]
 8006c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c4a:	7a1b      	ldrb	r3, [r3, #8]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fa fa41 	bl	80010d4 <TfLiteTypeGetName>
 8006c52:	4602      	mov	r2, r0
 8006c54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c58:	7a1b      	ldrb	r3, [r3, #8]
 8006c5a:	4905      	ldr	r1, [pc, #20]	; (8006c70 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x20c>)
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e000      	b.n	8006c66 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x202>
  }

  return kTfLiteOk;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c70:	0801c428 	.word	0x0801c428

08006c74 <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK16TfLiteEvalTensorS8_S8_PS6_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteEvalTensor* input,
                       const TfLiteEvalTensor* filter,
                       const TfLiteEvalTensor* bias, TfLiteEvalTensor* output) {
 8006c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c76:	b0af      	sub	sp, #188	; 0xbc
 8006c78:	af06      	add	r7, sp, #24
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	4613      	mov	r3, r2
 8006c82:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 8006c84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c88:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fc f866 	bl	8002d60 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 8006c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, tflite::micro::GetTensorShape(input),
 8006c9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fd4b 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 8006ca8:	6838      	ldr	r0, [r7, #0]
 8006caa:	f7fc f89b 	bl	8002de4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8006cae:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<float>(input),
      tflite::micro::GetTensorShape(filter),
 8006cb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006cb4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fd40 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 8006cbe:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006cc2:	f7fc f88f 	bl	8002de4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8006cc6:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<float>(filter),
      tflite::micro::GetTensorShape(bias),
 8006cc8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006ccc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fd34 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 8006cd6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006cda:	f7fc f883 	bl	8002de4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8006cde:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<float>(bias),
      tflite::micro::GetTensorShape(output),
 8006ce0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006ce4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fd28 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 8006cee:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8006cf2:	f7fc f886 	bl	8002e02 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006cfc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006d00:	f107 0010 	add.w	r0, r7, #16
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006d0a:	9303      	str	r3, [sp, #12]
 8006d0c:	9502      	str	r5, [sp, #8]
 8006d0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006d12:	9301      	str	r3, [sp, #4]
 8006d14:	9400      	str	r4, [sp, #0]
 8006d16:	4613      	mov	r3, r2
 8006d18:	4632      	mov	r2, r6
 8006d1a:	f7ff f9f5 	bl	8006108 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      tflite::micro::GetTensorShape(output),
 8006d1e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fa fb14 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 8006d28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fa fb0f 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 8006d32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fa fb0a 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 8006d3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fa fb05 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<float>(output));
  return kTfLiteOk;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	37a4      	adds	r7, #164	; 0xa4
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8006d50:	b5b0      	push	{r4, r5, r7, lr}
 8006d52:	b08c      	sub	sp, #48	; 0x30
 8006d54:	af04      	add	r7, sp, #16
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8006d62:	f011 ffd8 	bl	8018d16 <abort>
  const auto* params =
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fb f879 	bl	8001e6a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8006d78:	61b8      	str	r0, [r7, #24]
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kWeightsTensor);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fb f872 	bl	8001e6a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8006d86:	6178      	str	r0, [r7, #20]
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kBiasTensor);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fb f86b 	bl	8001e6a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8006d94:	6138      	str	r0, [r7, #16]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fb f874 	bl	8001e8a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8006da2:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
 8006dac:	f011 ffb3 	bl	8018d16 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	7a1b      	ldrb	r3, [r3, #8]
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d020      	beq.n	8006e00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 8006dbe:	2b09      	cmp	r3, #9
 8006dc0:	d010      	beq.n	8006de4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d12a      	bne.n	8006e1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	781a      	ldrb	r2, [r3, #0]
                       output);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	9302      	str	r3, [sp, #8]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	f7ff ff4a 	bl	8006c74 <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK16TfLiteEvalTensorS8_S8_PS6_>
 8006de0:	4603      	mov	r3, r0
 8006de2:	e02a      	b.n	8006e3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8006de4:	6878      	ldr	r0, [r7, #4]
                               output);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	9302      	str	r3, [sp, #8]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	f7ff fdba 	bl	8006970 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	e01c      	b.n	8006e3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	9302      	str	r3, [sp, #8]
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	9301      	str	r3, [sp, #4]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	f7ff fe26 	bl	8006a64 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	e00e      	b.n	8006e3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	695c      	ldr	r4, [r3, #20]
 8006e20:	687d      	ldr	r5, [r7, #4]
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	7a1b      	ldrb	r3, [r3, #8]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fa f954 	bl	80010d4 <TfLiteTypeGetName>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	7a1b      	ldrb	r3, [r3, #8]
 8006e32:	4904      	ldr	r1, [pc, #16]	; (8006e44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 8006e34:	4628      	mov	r0, r5
 8006e36:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8006e38:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3720      	adds	r7, #32
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bdb0      	pop	{r4, r5, r7, pc}
 8006e42:	bf00      	nop
 8006e44:	0801c428 	.word	0x0801c428

08006e48 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8006e48:	b4b0      	push	{r4, r5, r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a07      	ldr	r2, [pc, #28]	; (8006e70 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 8006e54:	461c      	mov	r4, r3
 8006e56:	4615      	mov	r5, r2
 8006e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bcb0      	pop	{r4, r5, r7}
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	0801c444 	.word	0x0801c444

08006e74 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	e000      	b.n	8006e8a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	0801f070 	.word	0x0801f070

08006eb8 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	4a04      	ldr	r2, [pc, #16]	; (8006ed4 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	0801f070 	.word	0x0801f070

08006ed8 <_ZN6tflite13MemoryPlannerD0Ev>:
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff ffe9 	bl	8006eb8 <_ZN6tflite13MemoryPlannerD1Ev>
 8006ee6:	2104      	movs	r1, #4
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f00f fc78 	bl	80167de <_ZdlPvj>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8006efe:	2328      	movs	r3, #40	; 0x28
 8006f00:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8006f02:	2328      	movs	r3, #40	; 0x28
  }
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8006f10:	b480      	push	{r7}
 8006f12:	b089      	sub	sp, #36	; 0x24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8006f20:	2301      	movs	r3, #1
 8006f22:	61bb      	str	r3, [r7, #24]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	da4c      	bge.n	8006fc6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f32:	3b01      	subs	r3, #1
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	68f9      	ldr	r1, [r7, #12]
 8006f42:	440b      	add	r3, r1
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	da39      	bge.n	8006fbe <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f50:	3b01      	subs	r3, #1
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	441a      	add	r2, r3
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	440b      	add	r3, r1
 8006f72:	6812      	ldr	r2, [r2, #0]
 8006f74:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	4413      	add	r3, r2
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	441a      	add	r2, r3
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	68b9      	ldr	r1, [r7, #8]
 8006fa8:	440b      	add	r3, r1
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	e7ae      	b.n	8006f24 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8006fc6:	7ffb      	ldrb	r3, [r7, #31]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d000      	beq.n	8006fce <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 8006fcc:	e7a6      	b.n	8006f1c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8006fce:	bf00      	nop
 8006fd0:	3724      	adds	r7, #36	; 0x24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
	...

08006fdc <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff ff54 	bl	8006e98 <_ZN6tflite13MemoryPlannerC1Ev>
 8006ff0:	4a22      	ldr	r2, [pc, #136]	; (800707c <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	609a      	str	r2, [r3, #8]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8007004:	687c      	ldr	r4, [r7, #4]
 8007006:	f7ff ff77 	bl	8006ef8 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 800700a:	4603      	mov	r3, r0
 800700c:	fbb4 f3f3 	udiv	r3, r4, r3
 8007010:	461a      	mov	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4413      	add	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4413      	add	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4413      	add	r3, r2
 800704e:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	461a      	mov	r2, r3
 800705c:	4613      	mov	r3, r2
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	461a      	mov	r2, r3
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4618      	mov	r0, r3
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	bd90      	pop	{r4, r7, pc}
 800707c:	0801f050 	.word	0x0801f050

08007080 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	4a05      	ldr	r2, [pc, #20]	; (80070a0 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff ff11 	bl	8006eb8 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	0801f050 	.word	0x0801f050

080070a4 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
}
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ffe7 	bl	8007080 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 80070b2:	212c      	movs	r1, #44	; 0x2c
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f00f fb92 	bl	80167de <_ZdlPvj>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	429a      	cmp	r2, r3
 80070dc:	db08      	blt.n	80070f0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	461a      	mov	r2, r3
 80070e4:	4913      	ldr	r1, [pc, #76]	; (8007134 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 80070e6:	68b8      	ldr	r0, [r7, #8]
 80070e8:	f7fb ff66 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e01d      	b.n	800712c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	4413      	add	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]
  current->size = size;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	6a3a      	ldr	r2, [r7, #32]
 800710e:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f04f 32ff 	mov.w	r2, #4294967295
 8007116:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	0801c4a0 	.word	0x0801c4a0

08007138 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b089      	sub	sp, #36	; 0x24
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	4413      	add	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	681c      	ldr	r4, [r3, #0]
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	47a0      	blx	r4
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	bf14      	ite	ne
 8007170:	2301      	movne	r3, #1
 8007172:	2300      	moveq	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 800717a:	2301      	movs	r3, #1
 800717c:	e003      	b.n	8007186 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007182:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd90      	pop	{r4, r7, pc}

0800718e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 800718e:	b480      	push	{r7}
 8007190:	b087      	sub	sp, #28
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 80071a6:	4413      	add	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	da01      	bge.n	80071b8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 80071b4:	2300      	movs	r3, #0
 80071b6:	e007      	b.n	80071c8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	429a      	cmp	r2, r3
 80071c0:	dd01      	ble.n	80071c6 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e000      	b.n	80071c8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 80071c6:	2301      	movs	r3, #1
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10b      	bne.n	8007204 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	4619      	mov	r1, r3
 80071f6:	460b      	mov	r3, r1
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	440b      	add	r3, r1
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	e011      	b.n	8007228 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720c:	d101      	bne.n	8007212 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 800720e:	2300      	movs	r3, #0
 8007210:	e029      	b.n	8007266 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	4619      	mov	r1, r3
 800721c:	460b      	mov	r3, r1
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	440b      	add	r3, r1
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6939      	ldr	r1, [r7, #16]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff ffad 	bl	800718e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	617b      	str	r3, [r7, #20]
      break;
 800723e:	e011      	b.n	8007264 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d00b      	beq.n	8007262 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	4619      	mov	r1, r3
 8007254:	460b      	mov	r3, r1
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	440b      	add	r3, r1
 800725a:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 800725c:	4413      	add	r3, r2
 800725e:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8007260:	e7e2      	b.n	8007228 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 8007262:	bf00      	nop
  } while (true);
  return result;
 8007264:	697b      	ldr	r3, [r7, #20]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800726e:	b580      	push	{r7, lr}
 8007270:	b098      	sub	sp, #96	; 0x60
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800727c:	f083 0301 	eor.w	r3, r3, #1
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 815f 	bne.w	8007546 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 815a 	beq.w	8007546 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 80072a4:	2300      	movs	r3, #0
 80072a6:	657b      	str	r3, [r7, #84]	; 0x54
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072ae:	429a      	cmp	r2, r3
 80072b0:	da4d      	bge.n	800734e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	4413      	add	r3, r2
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c2:	d11e      	bne.n	8007302 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 80072c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c6:	3b01      	subs	r3, #1
 80072c8:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	441a      	add	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6919      	ldr	r1, [r3, #16]
 80072d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072ee:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	f04f 32ff 	mov.w	r2, #4294967295
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	e021      	b.n	8007346 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	441a      	add	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6919      	ldr	r1, [r3, #16]
 8007310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	6812      	ldr	r2, [r2, #0]
 8007318:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695a      	ldr	r2, [r3, #20]
 800731e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007326:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	6852      	ldr	r2, [r2, #4]
 800733e:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 8007340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007342:	3301      	adds	r3, #1
 8007344:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8007346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007348:	3301      	adds	r3, #1
 800734a:	657b      	str	r3, [r7, #84]	; 0x54
 800734c:	e7ac      	b.n	80072a8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	695a      	ldr	r2, [r3, #20]
 800735c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800735e:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8007360:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8007366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	461a      	mov	r2, r3
 800736c:	f7ff fdd0 	bl	8006f10 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699a      	ldr	r2, [r3, #24]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	4619      	mov	r1, r3
 8007386:	460b      	mov	r3, r1
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	440b      	add	r3, r1
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 8007392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 80073a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073a6:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	4413      	add	r3, r2
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b8:	d106      	bne.n	80073c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d6:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 80073d8:	2301      	movs	r3, #1
 80073da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073e2:	429a      	cmp	r2, r3
 80073e4:	f280 80b0 	bge.w	8007548 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695a      	ldr	r2, [r3, #20]
 80073ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	4413      	add	r3, r2
 8007400:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d12d      	bne.n	800747e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 8007422:	2300      	movs	r3, #0
 8007424:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
            prior_entry, wanted_first_time_used, wanted_last_time_used);
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff fed1 	bl	80071d4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 8007432:	62b8      	str	r0, [r7, #40]	; 0x28

        if (prior_entry) {
 8007434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007436:	2b00      	cmp	r3, #0
 8007438:	d012      	beq.n	8007460 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 8007444:	4413      	add	r3, r2
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 8007448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 8007450:	4413      	add	r3, r2
 8007452:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 8007454:	6a3a      	ldr	r2, [r7, #32]
 8007456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007458:	429a      	cmp	r2, r3
 800745a:	dd01      	ble.n	8007460 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00f      	beq.n	8007486 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	429a      	cmp	r2, r3
 8007476:	da08      	bge.n	800748a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	647b      	str	r3, [r7, #68]	; 0x44
      }
 800747c:	e7d3      	b.n	8007426 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	64bb      	str	r3, [r7, #72]	; 0x48
 8007484:	e002      	b.n	800748c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 8007486:	bf00      	nop
 8007488:	e000      	b.n	800748c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800748a:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007498:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699a      	ldr	r2, [r3, #24]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	4619      	mov	r1, r3
 80074a4:	460b      	mov	r3, r1
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	440b      	add	r3, r1
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b4:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074ba:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 80074cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074d2:	429a      	cmp	r2, r3
 80074d4:	da09      	bge.n	80074ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074e0:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	621a      	str	r2, [r3, #32]
 80074e8:	e029      	b.n	800753e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 80074ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ec:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 80074ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d107      	bne.n	800750c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 80074fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	f04f 32ff 	mov.w	r2, #4294967295
 8007508:	609a      	str	r2, [r3, #8]
          break;
 800750a:	e018      	b.n	800753e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6999      	ldr	r1, [r3, #24]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4613      	mov	r3, r2
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007524:	429a      	cmp	r2, r3
 8007526:	da07      	bge.n	8007538 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 8007528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 8007530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	609a      	str	r2, [r3, #8]
          break;
 8007536:	e002      	b.n	800753e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	643b      	str	r3, [r7, #64]	; 0x40
      }
 800753c:	e7d7      	b.n	80074ee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 800753e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007540:	3301      	adds	r3, #1
 8007542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007544:	e74a      	b.n	80073dc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 8007546:	bf00      	nop
    }
  }
}
 8007548:	3760      	adds	r7, #96	; 0x60
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800754e:	b580      	push	{r7, lr}
 8007550:	b086      	sub	sp, #24
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff fe89 	bl	800726e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 8007564:	2300      	movs	r3, #0
 8007566:	e035      	b.n	80075d4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699a      	ldr	r2, [r3, #24]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	4619      	mov	r1, r3
 8007572:	460b      	mov	r3, r1
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	440b      	add	r3, r1
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	613b      	str	r3, [r7, #16]
  while (entry) {
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d024      	beq.n	80075d2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 8007592:	4413      	add	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4413      	add	r3, r2
 80075a0:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d901      	bls.n	80075ae <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b6:	d00b      	beq.n	80075d0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	4619      	mov	r1, r3
 80075c2:	460b      	mov	r3, r1
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	440b      	add	r3, r1
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]
  while (entry) {
 80075ce:	e7d8      	b.n	8007582 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 80075d0:	bf00      	nop
  }
  return max_size;
 80075d2:	693b      	ldr	r3, [r7, #16]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff fe33 	bl	800726e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	db04      	blt.n	8007618 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	db08      	blt.n	800762a <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	4909      	ldr	r1, [pc, #36]	; (8007644 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 8007620:	68b8      	ldr	r0, [r7, #8]
 8007622:	f7fb fcc9 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 8007626:	2301      	movs	r3, #1
 8007628:	e008      	b.n	800763c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	0801c530 	.word	0x0801c530

08007648 <_ZN6tflite12RuntimeShapeC1Ev>:
  RuntimeShape() : size_(0) {}
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <_ZN6tflite12RuntimeShapeC1EiPKl>:
  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f846 	bl	800770c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <_ZN6tflite12RuntimeShape8DimsDataEv>:
  inline int32_t* DimsData() {
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b05      	cmp	r3, #5
 8007698:	dd02      	ble.n	80076a0 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	e001      	b.n	80076a4 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3304      	adds	r3, #4
  }
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <_ZN6tflite12RuntimeShape6ResizeEi>:
  inline void Resize(int dimensions_count) {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b05      	cmp	r3, #5
 80076c0:	dd08      	ble.n	80076d4 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
      delete[] dims_pointer_;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f00f f87e 	bl	80167d0 <_ZdaPv>
    size_ = dimensions_count;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b05      	cmp	r3, #5
 80076de:	dd0e      	ble.n	80076fe <_ZN6tflite12RuntimeShape6ResizeEi+0x4e>
      dims_pointer_ = new int32_t[dimensions_count];
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	4a09      	ldr	r2, [pc, #36]	; (8007708 <_ZN6tflite12RuntimeShape6ResizeEi+0x58>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d801      	bhi.n	80076ec <_ZN6tflite12RuntimeShape6ResizeEi+0x3c>
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	e001      	b.n	80076f0 <_ZN6tflite12RuntimeShape6ResizeEi+0x40>
 80076ec:	f04f 33ff 	mov.w	r3, #4294967295
 80076f0:	4618      	mov	r0, r3
 80076f2:	f00f f872 	bl	80167da <_Znaj>
 80076f6:	4603      	mov	r3, r0
 80076f8:	461a      	mov	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	605a      	str	r2, [r3, #4]
  }
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	1ffffffe 	.word	0x1ffffffe

0800770c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f7ff ffc8 	bl	80076b0 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff ffb2 	bl	800768a <_ZN6tflite12RuntimeShape8DimsDataEv>
 8007726:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	461a      	mov	r2, r3
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	6978      	ldr	r0, [r7, #20]
 8007732:	f011 fc47 	bl	8018fc4 <memcpy>
  }
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800773e:	b580      	push	{r7, lr}
 8007740:	b086      	sub	sp, #24
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7ff ff76 	bl	8007648 <_ZN6tflite12RuntimeShapeC1Ev>
 800775c:	e00d      	b.n	800777a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	3304      	adds	r3, #4
 800776e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	6939      	ldr	r1, [r7, #16]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff ff75 	bl	8007664 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8007782:	b480      	push	{r7}
 8007784:	af00      	add	r7, sp, #0
 8007786:	2300      	movs	r3, #0
 8007788:	4618      	mov	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8007792:	b480      	push	{r7}
 8007794:	af00      	add	r7, sp, #0
 8007796:	23ff      	movs	r3, #255	; 0xff
 8007798:	4618      	mov	r0, r3
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
	...

080077a4 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	4b02      	ldr	r3, [pc, #8]	; (80077b4 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 80077aa:	4618      	mov	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	ffff8000 	.word	0xffff8000

080077b8 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80077c0:	4618      	mov	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int64_t NumElements(const TfLiteIntArray* dims) {
 80077e4:	b490      	push	{r4, r7}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 80077ec:	f04f 0301 	mov.w	r3, #1
 80077f0:	f04f 0400 	mov.w	r4, #0
 80077f4:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	429a      	cmp	r2, r3
 8007804:	da1a      	bge.n	800783c <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x58>
    count *= dims->data[i];
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	fb03 f102 	mul.w	r1, r3, r2
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	fb04 f202 	mul.w	r2, r4, r2
 8007820:	440a      	add	r2, r1
 8007822:	6939      	ldr	r1, [r7, #16]
 8007824:	fba1 3403 	umull	r3, r4, r1, r3
 8007828:	4422      	add	r2, r4
 800782a:	4614      	mov	r4, r2
 800782c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8007830:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3301      	adds	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	e7df      	b.n	80077fc <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  return count;
 800783c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8007840:	4618      	mov	r0, r3
 8007842:	4621      	mov	r1, r4
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bc90      	pop	{r4, r7}
 800784a:	4770      	bx	lr

0800784c <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 800784c:	b590      	push	{r4, r7, lr}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff ffc3 	bl	80077e4 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800785e:	4603      	mov	r3, r0
 8007860:	460c      	mov	r4, r1
}
 8007862:	4618      	mov	r0, r3
 8007864:	4621      	mov	r1, r4
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	bd90      	pop	{r4, r7, pc}

0800786c <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800786c:	b490      	push	{r4, r7}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	ed87 0b00 	vstr	d0, [r7]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 800787e:	ec44 3b17 	vmov	d7, r3, r4
 8007882:	eeb0 0a47 	vmov.f32	s0, s14
 8007886:	eef0 0a67 	vmov.f32	s1, s15
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bc90      	pop	{r4, r7}
 8007890:	4770      	bx	lr

08007892 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	ed87 0a01 	vstr	s0, [r7, #4]
 800789c:	ed97 0a01 	vldr	s0, [r7, #4]
 80078a0:	f00f fb6a 	bl	8016f78 <roundf>
 80078a4:	eef0 7a40 	vmov.f32	s15, s0
 80078a8:	eeb0 0a67 	vmov.f32	s0, s15
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	019b      	lsls	r3, r3, #6
 80078cc:	4413      	add	r3, r2
 80078ce:	e005      	b.n	80078dc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2a>
  } else {
    return context->GetTensor(context, tensor_index);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
  }
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	db0f      	blt.n	8007918 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	da0b      	bge.n	8007918 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	4413      	add	r3, r2
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007912:	d001      	beq.n	8007918 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	e001      	b.n	800791c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8007918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800791c:	4618      	mov	r0, r3
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8007938:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800793e:	3304      	adds	r3, #4
      context, index, node->inputs->size, node->inputs->data);
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff ffce 	bl	80078e4 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8007948:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b00      	cmp	r3, #0
 800794e:	da01      	bge.n	8007954 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8007950:	2300      	movs	r3, #0
 8007952:	e004      	b.n	800795e <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  }
  return GetTensorAtIndex(context, tensor_index);
 8007954:	6979      	ldr	r1, [r7, #20]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff ffab 	bl	80078b2 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800795c:	4603      	mov	r3, r0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff ffd6 	bl	8007928 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 800797c:	4603      	mov	r3, r0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 8007986:	b580      	push	{r7, lr}
 8007988:	b086      	sub	sp, #24
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 8007996:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 800799c:	3304      	adds	r3, #4
      context, index, node->outputs->size, node->outputs->data);
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff ff9f 	bl	80078e4 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80079a6:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da01      	bge.n	80079b2 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80079ae:	2300      	movs	r3, #0
 80079b0:	e004      	b.n	80079bc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  }
  return GetTensorAtIndex(context, tensor_index);
 80079b2:	6979      	ldr	r1, [r7, #20]
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7ff ff7c 	bl	80078b2 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80079ba:	4603      	mov	r3, r0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff ffc6 	bl	8007966 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80079da:	4603      	mov	r3, r0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 80079e4:	b5b0      	push	{r4, r5, r7, lr}
 80079e6:	b09a      	sub	sp, #104	; 0x68
 80079e8:	af04      	add	r7, sp, #16
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d013      	beq.n	8007a24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	695c      	ldr	r4, [r3, #20]
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a08:	461a      	mov	r2, r3
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	9303      	str	r3, [sp, #12]
 8007a0e:	9202      	str	r2, [sp, #8]
 8007a10:	4b97      	ldr	r3, [pc, #604]	; (8007c70 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	4b97      	ldr	r3, [pc, #604]	; (8007c74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	23d2      	movs	r3, #210	; 0xd2
 8007a1a:	4a97      	ldr	r2, [pc, #604]	; (8007c78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007a1c:	4997      	ldr	r1, [pc, #604]	; (8007c7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8007a1e:	47a0      	blx	r4
 8007a20:	2301      	movs	r3, #1
 8007a22:	e171      	b.n	8007d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d013      	beq.n	8007a56 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	695c      	ldr	r4, [r3, #20]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	9303      	str	r3, [sp, #12]
 8007a40:	9202      	str	r2, [sp, #8]
 8007a42:	4b8b      	ldr	r3, [pc, #556]	; (8007c70 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	4b8e      	ldr	r3, [pc, #568]	; (8007c80 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	23d4      	movs	r3, #212	; 0xd4
 8007a4c:	4a8a      	ldr	r2, [pc, #552]	; (8007c78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007a4e:	498b      	ldr	r1, [pc, #556]	; (8007c7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8007a50:	47a0      	blx	r4
 8007a52:	2301      	movs	r3, #1
 8007a54:	e158      	b.n	8007d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  const auto* affine_quantization =
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  TF_LITE_ENSURE(context, affine_quantization);
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	695c      	ldr	r4, [r3, #20]
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	4b86      	ldr	r3, [pc, #536]	; (8007c84 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	23de      	movs	r3, #222	; 0xde
 8007a6e:	4a82      	ldr	r2, [pc, #520]	; (8007c78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007a70:	4985      	ldr	r1, [pc, #532]	; (8007c88 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8007a72:	47a0      	blx	r4
 8007a74:	2301      	movs	r3, #1
 8007a76:	e147      	b.n	8007d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	695c      	ldr	r4, [r3, #20]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	4b81      	ldr	r3, [pc, #516]	; (8007c8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	23df      	movs	r3, #223	; 0xdf
 8007a8c:	4a7a      	ldr	r2, [pc, #488]	; (8007c78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007a8e:	497e      	ldr	r1, [pc, #504]	; (8007c88 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8007a90:	47a0      	blx	r4
 8007a92:	2301      	movs	r3, #1
 8007a94:	e138      	b.n	8007d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	bfcc      	ite	gt
 8007aa0:	2301      	movgt	r3, #1
 8007aa2:	2300      	movle	r3, #0
 8007aa4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (is_per_channel) {
 8007aa8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d067      	beq.n	8007b80 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d00e      	beq.n	8007ad6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b07      	cmp	r3, #7
 8007abe:	d00a      	beq.n	8007ad6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	695c      	ldr	r4, [r3, #20]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	4b72      	ldr	r3, [pc, #456]	; (8007c90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	23e4      	movs	r3, #228	; 0xe4
 8007acc:	4a6a      	ldr	r2, [pc, #424]	; (8007c78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007ace:	496e      	ldr	r1, [pc, #440]	; (8007c88 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8007ad0:	47a0      	blx	r4
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e118      	b.n	8007d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b09      	cmp	r3, #9
 8007adc:	d012      	beq.n	8007b04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	695c      	ldr	r4, [r3, #20]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	2309      	movs	r3, #9
 8007aec:	9303      	str	r3, [sp, #12]
 8007aee:	9202      	str	r2, [sp, #8]
 8007af0:	4b68      	ldr	r3, [pc, #416]	; (8007c94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	4b68      	ldr	r3, [pc, #416]	; (8007c98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	23e5      	movs	r3, #229	; 0xe5
 8007afa:	4a5f      	ldr	r2, [pc, #380]	; (8007c78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007afc:	495f      	ldr	r1, [pc, #380]	; (8007c7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8007afe:	47a0      	blx	r4
 8007b00:	2301      	movs	r3, #1
 8007b02:	e101      	b.n	8007d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d013      	beq.n	8007b3a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	695c      	ldr	r4, [r3, #20]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007b22:	9203      	str	r2, [sp, #12]
 8007b24:	9302      	str	r3, [sp, #8]
 8007b26:	4b5d      	ldr	r3, [pc, #372]	; (8007c9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	4b5d      	ldr	r3, [pc, #372]	; (8007ca0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	23e6      	movs	r3, #230	; 0xe6
 8007b30:	4a51      	ldr	r2, [pc, #324]	; (8007c78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007b32:	4952      	ldr	r1, [pc, #328]	; (8007c7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8007b34:	47a0      	blx	r4
 8007b36:	2301      	movs	r3, #1
 8007b38:	e0e6      	b.n	8007d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
    TF_LITE_ENSURE_EQ(
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689a      	ldr	r2, [r3, #8]
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d017      	beq.n	8007b80 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	695c      	ldr	r4, [r3, #20]
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6899      	ldr	r1, [r3, #8]
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	9303      	str	r3, [sp, #12]
 8007b6a:	9202      	str	r2, [sp, #8]
 8007b6c:	4b4d      	ldr	r3, [pc, #308]	; (8007ca4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	4b4a      	ldr	r3, [pc, #296]	; (8007c9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	23e9      	movs	r3, #233	; 0xe9
 8007b76:	4a40      	ldr	r2, [pc, #256]	; (8007c78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007b78:	4940      	ldr	r1, [pc, #256]	; (8007c7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8007b7a:	47a0      	blx	r4
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0c3      	b.n	8007d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float output_scale = output->params.scale;
 8007b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  const float* filter_scales = affine_quantization->scale->data;
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3304      	adds	r3, #4
 8007b92:	647b      	str	r3, [r7, #68]	; 0x44
  for (int i = 0; i < num_channels; ++i) {
 8007b94:	2300      	movs	r3, #0
 8007b96:	657b      	str	r3, [r7, #84]	; 0x54
 8007b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	da47      	bge.n	8007c32 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8007ba2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 8007baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb0:	4413      	add	r3, r2
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	e001      	b.n	8007bba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 8007bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	643b      	str	r3, [r7, #64]	; 0x40
    const double filter_scale = static_cast<double>(scale);
 8007bbc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007bbe:	f7f8 fcd3 	bl	8000568 <__aeabi_f2d>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 8007bca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007bcc:	f7f8 fccc 	bl	8000568 <__aeabi_f2d>
 8007bd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bd4:	f7f8 fd20 	bl	8000618 <__aeabi_dmul>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	4625      	mov	r5, r4
 8007bde:	461c      	mov	r4, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 8007be0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007be2:	f7f8 fcc1 	bl	8000568 <__aeabi_f2d>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 8007bea:	4620      	mov	r0, r4
 8007bec:	4629      	mov	r1, r5
 8007bee:	f7f8 fe3d 	bl	800086c <__aeabi_ddiv>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8007bfa:	f107 0220 	add.w	r2, r7, #32
 8007bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007c0a:	f007 fa37 	bl	800f07c <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 8007c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c16:	4413      	add	r3, r2
 8007c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1a:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 8007c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c24:	4413      	add	r3, r2
 8007c26:	6a3a      	ldr	r2, [r7, #32]
 8007c28:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 8007c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8007c30:	e7b2      	b.n	8007b98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d146      	bne.n	8007cc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	f04f 0400 	mov.w	r4, #0
 8007c42:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f107 0318 	add.w	r3, r7, #24
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	f000 f85a 	bl	8007d10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d01e      	beq.n	8007ca8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 8007c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c6e:	e04b      	b.n	8007d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
 8007c70:	0801c628 	.word	0x0801c628
 8007c74:	0801c644 	.word	0x0801c644
 8007c78:	0801c5f0 	.word	0x0801c5f0
 8007c7c:	0801c60c 	.word	0x0801c60c
 8007c80:	0801c660 	.word	0x0801c660
 8007c84:	0801c694 	.word	0x0801c694
 8007c88:	0801c67c 	.word	0x0801c67c
 8007c8c:	0801c6a8 	.word	0x0801c6a8
 8007c90:	0801c6c4 	.word	0x0801c6c4
 8007c94:	0801c700 	.word	0x0801c700
 8007c98:	0801c70c 	.word	0x0801c70c
 8007c9c:	0801c71c 	.word	0x0801c71c
 8007ca0:	0801c72c 	.word	0x0801c72c
 8007ca4:	0801c750 	.word	0x0801c750
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8007ca8:	ed97 7b06 	vldr	d7, [r7, #24]
 8007cac:	f107 0314 	add.w	r3, r7, #20
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007cb4:	eeb0 0a47 	vmov.f32	s0, s14
 8007cb8:	eef0 0a67 	vmov.f32	s1, s15
 8007cbc:	f007 f9de 	bl	800f07c <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	425a      	negs	r2, r3
 8007cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cc6:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b09      	cmp	r3, #9
 8007cce:	d007      	beq.n	8007ce0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d003      	beq.n	8007ce0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8007cdc:	2b07      	cmp	r3, #7
 8007cde:	d112      	bne.n	8007d06 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x322>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce4:	7819      	ldrb	r1, [r3, #0]
 8007ce6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cee:	f000 f99d 	bl	800802c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007cf8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x322>
 8007d00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d04:	e000      	b.n	8007d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3758      	adds	r7, #88	; 0x58
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bdb0      	pop	{r4, r5, r7, pc}

08007d10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8007d10:	b5b0      	push	{r4, r5, r7, lr}
 8007d12:	b08e      	sub	sp, #56	; 0x38
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7f8 fc20 	bl	8000568 <__aeabi_f2d>
 8007d28:	4604      	mov	r4, r0
 8007d2a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7f8 fc19 	bl	8000568 <__aeabi_f2d>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	f7f8 fc6b 	bl	8000618 <__aeabi_dmul>
 8007d42:	4603      	mov	r3, r0
 8007d44:	460c      	mov	r4, r1
 8007d46:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d04b      	beq.n	8007de8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7f8 fc07 	bl	8000568 <__aeabi_f2d>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	e9c7 3408 	strd	r3, r4, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8007d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007d6a:	f7f8 fa9d 	bl	80002a8 <__aeabi_dsub>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	460c      	mov	r4, r1
 8007d72:	ec44 3b17 	vmov	d7, r3, r4
 8007d76:	eeb0 0a47 	vmov.f32	s0, s14
 8007d7a:	eef0 0a67 	vmov.f32	s1, s15
 8007d7e:	f7ff fd75 	bl	800786c <_ZSt3absd>
 8007d82:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8007d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7f8 fbec 	bl	8000568 <__aeabi_f2d>
 8007d90:	4603      	mov	r3, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	e9c7 3404 	strd	r3, r4, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8007d98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007da0:	f7f8 fd64 	bl	800086c <__aeabi_ddiv>
 8007da4:	4603      	mov	r3, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	4618      	mov	r0, r3
 8007daa:	4621      	mov	r1, r4
 8007dac:	2301      	movs	r3, #1
 8007dae:	461c      	mov	r4, r3
 8007db0:	a318      	add	r3, pc, #96	; (adr r3, 8007e14 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 feab 	bl	8000b10 <__aeabi_dcmple>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	461c      	mov	r4, r3
 8007dc4:	b2e3      	uxtb	r3, r4
 8007dc6:	f083 0301 	eor.w	r3, r3, #1
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	695c      	ldr	r4, [r3, #20]
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	f240 1335 	movw	r3, #309	; 0x135
 8007dde:	4a0b      	ldr	r2, [pc, #44]	; (8007e0c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8007de0:	490b      	ldr	r1, [pc, #44]	; (8007e10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8007de2:	47a0      	blx	r4
 8007de4:	2301      	movs	r3, #1
 8007de6:	e008      	b.n	8007dfa <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8007de8:	68f8      	ldr	r0, [r7, #12]
                                          multiplier);
 8007dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	68b9      	ldr	r1, [r7, #8]
 8007df4:	f000 f812 	bl	8007e1c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8007df8:	4603      	mov	r3, r0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3730      	adds	r7, #48	; 0x30
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bdb0      	pop	{r4, r5, r7, pc}
 8007e02:	bf00      	nop
 8007e04:	f3af 8000 	nop.w
 8007e08:	0801c790 	.word	0x0801c790
 8007e0c:	0801c5f0 	.word	0x0801c5f0
 8007e10:	0801c67c 	.word	0x0801c67c
 8007e14:	47ae147b 	.word	0x47ae147b
 8007e18:	3f947ae1 	.word	0x3f947ae1

08007e1c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b089      	sub	sp, #36	; 0x24
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	ed93 7a03 	vldr	s14, [r3, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e36:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8007e3a:	ee17 0a90 	vmov	r0, s15
 8007e3e:	f7f8 fb93 	bl	8000568 <__aeabi_f2d>
 8007e42:	4603      	mov	r3, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	e9c7 3404 	strd	r3, r4, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	461c      	mov	r4, r3
 8007e4e:	f04f 0200 	mov.w	r2, #0
 8007e52:	f04f 0300 	mov.w	r3, #0
 8007e56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e5a:	f7f8 fe63 	bl	8000b24 <__aeabi_dcmpge>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8007e64:	2300      	movs	r3, #0
 8007e66:	461c      	mov	r4, r3
 8007e68:	b2e3      	uxtb	r3, r4
 8007e6a:	f083 0301 	eor.w	r3, r3, #1
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	695c      	ldr	r4, [r3, #20]
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	4b10      	ldr	r3, [pc, #64]	; (8007ebc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	f44f 73a1 	mov.w	r3, #322	; 0x142
 8007e82:	4a0f      	ldr	r2, [pc, #60]	; (8007ec0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8007e84:	490f      	ldr	r1, [pc, #60]	; (8007ec4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa8>)
 8007e86:	47a0      	blx	r4
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e012      	b.n	8007eb2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x96>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7f8 fb69 	bl	8000568 <__aeabi_f2d>
 8007e96:	4603      	mov	r3, r0
 8007e98:	460c      	mov	r4, r1
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4623      	mov	r3, r4
 8007e9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ea2:	f7f8 fce3 	bl	800086c <__aeabi_ddiv>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eac:	e9c2 3400 	strd	r3, r4, [r2]

  return kTfLiteOk;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd90      	pop	{r4, r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	0801c7b4 	.word	0x0801c7b4
 8007ec0:	0801c5f0 	.word	0x0801c5f0
 8007ec4:	0801c67c 	.word	0x0801c67c

08007ec8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	ed87 0a00 	vstr	s0, [r7]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8007eda:	ed97 7a00 	vldr	s14, [r7]
 8007ede:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007ee2:	eeb0 0a66 	vmov.f32	s0, s13
 8007ee6:	f000 f8f5 	bl	80080d4 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8007eea:	eef0 7a40 	vmov.f32	s15, s0
 8007eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ef2:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
  };
 8007efa:	4413      	add	r3, r2
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08e      	sub	sp, #56	; 0x38
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	4603      	mov	r3, r0
 8007f12:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8007f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d118      	bne.n	8007f60 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8007f2e:	f107 0314 	add.w	r3, r7, #20
 8007f32:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8008028 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff ffc6 	bl	8007ec8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	f107 021c 	add.w	r2, r7, #28
 8007f44:	f107 0308 	add.w	r3, r7, #8
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7f9 f97c 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 8007f50:	4603      	mov	r3, r0
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f56:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f5c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8007f5e:	e05f      	b.n	8008020 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d129      	bne.n	8007fba <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8007f66:	f107 0314 	add.w	r3, r7, #20
 8007f6a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8008028 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff ffaa 	bl	8007ec8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8007f74:	4603      	mov	r3, r0
 8007f76:	623b      	str	r3, [r7, #32]
 8007f78:	f107 0220 	add.w	r2, r7, #32
 8007f7c:	f107 0308 	add.w	r3, r7, #8
 8007f80:	4611      	mov	r1, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7f9 f960 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f8e:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8007f90:	f107 0314 	add.w	r3, r7, #20
 8007f94:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff ff95 	bl	8007ec8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007fa6:	1d3b      	adds	r3, r7, #4
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fa fc46 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fb6:	601a      	str	r2, [r3, #0]
}
 8007fb8:	e032      	b.n	8008020 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d129      	bne.n	8008014 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff ff7d 	bl	8007ec8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007fd6:	f107 0308 	add.w	r3, r7, #8
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7f9 f933 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe8:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8007fea:	f107 0314 	add.w	r3, r7, #20
 8007fee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff ff68 	bl	8007ec8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ffc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008000:	1d3b      	adds	r3, r7, #4
 8008002:	4611      	mov	r1, r2
 8008004:	4618      	mov	r0, r3
 8008006:	f7fa fc19 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 800800a:	4603      	mov	r3, r0
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008010:	601a      	str	r2, [r3, #0]
}
 8008012:	e005      	b.n	8008020 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008018:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800801e:	601a      	str	r2, [r3, #0]
}
 8008020:	bf00      	nop
 8008022:	3738      	adds	r7, #56	; 0x38
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	00000000 	.word	0x00000000

0800802c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800802c:	b590      	push	{r4, r7, lr}
 800802e:	b089      	sub	sp, #36	; 0x24
 8008030:	af02      	add	r7, sp, #8
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	607a      	str	r2, [r7, #4]
 8008036:	603b      	str	r3, [r7, #0]
 8008038:	460b      	mov	r3, r1
 800803a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d108      	bne.n	800805e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800804c:	f7ff fb99 	bl	8007782 <_ZNSt14numeric_limitsIhE3minEv>
 8008050:	4603      	mov	r3, r0
 8008052:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8008054:	f7ff fb9d 	bl	8007792 <_ZNSt14numeric_limitsIhE3maxEv>
 8008058:	4603      	mov	r3, r0
 800805a:	613b      	str	r3, [r7, #16]
 800805c:	e025      	b.n	80080aa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b09      	cmp	r3, #9
 8008064:	d108      	bne.n	8008078 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8008066:	f7f9 f8b1 	bl	80011cc <_ZNSt14numeric_limitsIaE3minEv>
 800806a:	4603      	mov	r3, r0
 800806c:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800806e:	f7f9 f8b6 	bl	80011de <_ZNSt14numeric_limitsIaE3maxEv>
 8008072:	4603      	mov	r3, r0
 8008074:	613b      	str	r3, [r7, #16]
 8008076:	e018      	b.n	80080aa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b07      	cmp	r3, #7
 800807e:	d108      	bne.n	8008092 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8008080:	f7ff fb90 	bl	80077a4 <_ZNSt14numeric_limitsIsE3minEv>
 8008084:	4603      	mov	r3, r0
 8008086:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8008088:	f7ff fb96 	bl	80077b8 <_ZNSt14numeric_limitsIsE3maxEv>
 800808c:	4603      	mov	r3, r0
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	e00b      	b.n	80080aa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	695c      	ldr	r4, [r3, #20]
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	f240 1375 	movw	r3, #373	; 0x175
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 80080a2:	490b      	ldr	r1, [pc, #44]	; (80080d0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80080a4:	47a0      	blx	r4
 80080a6:	2301      	movs	r3, #1
 80080a8:	e00a      	b.n	80080c0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 80080aa:	7af8      	ldrb	r0, [r7, #11]
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	6979      	ldr	r1, [r7, #20]
 80080ba:	f7ff ff23 	bl	8007f04 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd90      	pop	{r4, r7, pc}
 80080c8:	0801c7d0 	.word	0x0801c7d0
 80080cc:	0801c5f0 	.word	0x0801c5f0
 80080d0:	0801c67c 	.word	0x0801c67c

080080d4 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	ed87 0a01 	vstr	s0, [r7, #4]
 80080de:	ed97 0a01 	vldr	s0, [r7, #4]
 80080e2:	f7ff fbd6 	bl	8007892 <_ZSt5roundf>
 80080e6:	eef0 7a40 	vmov.f32	s15, s0
 80080ea:	eeb0 0a67 	vmov.f32	s0, s15
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <kf_bfly2>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b089      	sub	sp, #36	; 0x24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8008108:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4413      	add	r3, r2
 8008112:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	ed93 7a00 	vldr	s14, [r3]
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	edd3 7a00 	vldr	s15, [r3]
 8008120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	edd3 6a01 	vldr	s13, [r3, #4]
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008138:	edc7 7a04 	vstr	s15, [r7, #16]
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	ed93 7a00 	vldr	s14, [r3]
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	edd3 7a01 	vldr	s15, [r3, #4]
 8008148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	edd3 6a01 	vldr	s13, [r3, #4]
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	edd3 7a00 	vldr	s15, [r3]
 8008158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800815c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008160:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	4413      	add	r3, r2
 800816c:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	ed93 7a00 	vldr	s14, [r3]
 8008174:	edd7 7a04 	vldr	s15, [r7, #16]
 8008178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	edc3 7a00 	vstr	s15, [r3]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	ed93 7a01 	vldr	s14, [r3, #4]
 8008188:	edd7 7a05 	vldr	s15, [r7, #20]
 800818c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	ed93 7a00 	vldr	s14, [r3]
 800819c:	edd7 7a04 	vldr	s15, [r7, #16]
 80081a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	edc3 7a00 	vstr	s15, [r3]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80081b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80081b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	3308      	adds	r3, #8
 80081c2:	61fb      	str	r3, [r7, #28]
        ++Fout;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3308      	adds	r3, #8
 80081c8:	60fb      	str	r3, [r7, #12]
    }while (--m);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d19e      	bne.n	8008114 <kf_bfly2+0x20>
}
 80081d6:	bf00      	nop
 80081d8:	3724      	adds	r7, #36	; 0x24
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <kf_bfly4>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 80081e2:	b480      	push	{r7}
 80081e4:	b097      	sub	sp, #92	; 0x5c
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4613      	mov	r3, r2
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	4413      	add	r3, r2
 8008202:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800820a:	657b      	str	r3, [r7, #84]	; 0x54
 800820c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800820e:	653b      	str	r3, [r7, #80]	; 0x50
 8008210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008212:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	ed93 7a00 	vldr	s14, [r3]
 8008220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008222:	edd3 7a00 	vldr	s15, [r3]
 8008226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	edd3 6a01 	vldr	s13, [r3, #4]
 8008236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008238:	edd3 7a01 	vldr	s15, [r3, #4]
 800823c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008244:	edc7 7a04 	vstr	s15, [r7, #16]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	ed93 7a00 	vldr	s14, [r3]
 8008254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008256:	edd3 7a01 	vldr	s15, [r3, #4]
 800825a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	edd3 6a01 	vldr	s13, [r3, #4]
 800826a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800826c:	edd3 7a00 	vldr	s15, [r3]
 8008270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008278:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 800827c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4413      	add	r3, r2
 8008284:	ed93 7a00 	vldr	s14, [r3]
 8008288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800828a:	edd3 7a00 	vldr	s15, [r3]
 800828e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4413      	add	r3, r2
 800829a:	edd3 6a01 	vldr	s13, [r3, #4]
 800829e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80082a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082ac:	edc7 7a06 	vstr	s15, [r7, #24]
 80082b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4413      	add	r3, r2
 80082b8:	ed93 7a00 	vldr	s14, [r3]
 80082bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082be:	edd3 7a01 	vldr	s15, [r3, #4]
 80082c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082c8:	00db      	lsls	r3, r3, #3
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80082d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082d4:	edd3 7a00 	vldr	s15, [r3]
 80082d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082e0:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 80082e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	ed93 7a00 	vldr	s14, [r3]
 80082f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f2:	edd3 7a00 	vldr	s15, [r3]
 80082f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	edd3 6a01 	vldr	s13, [r3, #4]
 8008306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008308:	edd3 7a01 	vldr	s15, [r3, #4]
 800830c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008314:	edc7 7a08 	vstr	s15, [r7, #32]
 8008318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	ed93 7a00 	vldr	s14, [r3]
 8008324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008326:	edd3 7a01 	vldr	s15, [r3, #4]
 800832a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800832e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	edd3 6a01 	vldr	s13, [r3, #4]
 800833a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833c:	edd3 7a00 	vldr	s15, [r3]
 8008340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	ed93 7a00 	vldr	s14, [r3]
 8008352:	edd7 7a06 	vldr	s15, [r7, #24]
 8008356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800835a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	ed93 7a01 	vldr	s14, [r3, #4]
 8008364:	edd7 7a07 	vldr	s15, [r7, #28]
 8008368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800836c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	ed93 7a00 	vldr	s14, [r3]
 8008376:	edd7 7a06 	vldr	s15, [r7, #24]
 800837a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	edc3 7a00 	vstr	s15, [r3]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	ed93 7a01 	vldr	s14, [r3, #4]
 800838a:	edd7 7a07 	vldr	s15, [r7, #28]
 800838e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 8008398:	ed97 7a04 	vldr	s14, [r7, #16]
 800839c:	edd7 7a08 	vldr	s15, [r7, #32]
 80083a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083a4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80083a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80083ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80083b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 80083b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80083bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80083c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80083c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80083cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80083d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083d4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	ed93 7a00 	vldr	s14, [r3]
 80083de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80083e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083ee:	edc3 7a00 	vstr	s15, [r3]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80083f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80083fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008408:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008412:	4413      	add	r3, r2
 8008414:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800841c:	4413      	add	r3, r2
 800841e:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	4413      	add	r3, r2
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	461a      	mov	r2, r3
 800842c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842e:	4413      	add	r3, r2
 8008430:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	ed93 7a00 	vldr	s14, [r3]
 8008438:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800843c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	edc3 7a00 	vstr	s15, [r3]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	ed93 7a01 	vldr	s14, [r3, #4]
 800844c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d030      	beq.n	80084c4 <kf_bfly4+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 8008462:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008466:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008476:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 800847a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800847e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800848e:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8008492:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008496:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800849a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084a6:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 80084aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80084ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80084b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	4413      	add	r3, r2
 80084ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084be:	edc3 7a01 	vstr	s15, [r3, #4]
 80084c2:	e02f      	b.n	8008524 <kf_bfly4+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 80084c4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80084c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084d8:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 80084dc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80084e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084f0:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 80084f4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80084f8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80084fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008508:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 800850c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008510:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008520:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3308      	adds	r3, #8
 8008528:	60fb      	str	r3, [r7, #12]
    }while(--k);
 800852a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852c:	3b01      	subs	r3, #1
 800852e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008532:	2b00      	cmp	r3, #0
 8008534:	f47f ae6e 	bne.w	8008214 <kf_bfly4+0x32>
}
 8008538:	bf00      	nop
 800853a:	375c      	adds	r7, #92	; 0x5c
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <kf_bfly3>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8008544:	b480      	push	{r7}
 8008546:	b095      	sub	sp, #84	; 0x54
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	fb02 f303 	mul.w	r3, r2, r3
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	3321      	adds	r3, #33	; 0x21
 8008568:	f107 0210 	add.w	r2, r7, #16
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	440b      	add	r3, r1
 8008570:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008574:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800857e:	647b      	str	r3, [r7, #68]	; 0x44
 8008580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008582:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4413      	add	r3, r2
 800858c:	ed93 7a00 	vldr	s14, [r3]
 8008590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008592:	edd3 7a00 	vldr	s15, [r3]
 8008596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	00db      	lsls	r3, r3, #3
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4413      	add	r3, r2
 80085a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80085a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80085ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085b4:	edc7 7a08 	vstr	s15, [r7, #32]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4413      	add	r3, r2
 80085c0:	ed93 7a00 	vldr	s14, [r3]
 80085c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80085ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	4413      	add	r3, r2
 80085d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80085da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085dc:	edd3 7a00 	vldr	s15, [r3]
 80085e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 80085ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4413      	add	r3, r2
 80085f4:	ed93 7a00 	vldr	s14, [r3]
 80085f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085fa:	edd3 7a00 	vldr	s15, [r3]
 80085fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008604:	00db      	lsls	r3, r3, #3
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4413      	add	r3, r2
 800860a:	edd3 6a01 	vldr	s13, [r3, #4]
 800860e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008610:	edd3 7a01 	vldr	s15, [r3, #4]
 8008614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800861c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8008620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	4413      	add	r3, r2
 8008628:	ed93 7a00 	vldr	s14, [r3]
 800862c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008638:	00db      	lsls	r3, r3, #3
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4413      	add	r3, r2
 800863e:	edd3 6a01 	vldr	s13, [r3, #4]
 8008642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008644:	edd3 7a00 	vldr	s15, [r3]
 8008648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800864c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008650:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8008654:	ed97 7a08 	vldr	s14, [r7, #32]
 8008658:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800865c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008660:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8008664:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008668:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800866c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008670:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8008674:	ed97 7a08 	vldr	s14, [r7, #32]
 8008678:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800867c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008680:	edc7 7a06 	vstr	s15, [r7, #24]
 8008684:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008688:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800868c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008690:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800869a:	4413      	add	r3, r2
 800869c:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086a4:	4413      	add	r3, r2
 80086a6:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	ed93 7a00 	vldr	s14, [r3]
 80086ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80086b2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80086b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	4413      	add	r3, r2
 80086c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086c6:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80086d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80086d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80086d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	4413      	add	r3, r2
 80086e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086e8:	edc3 7a01 	vstr	s15, [r3, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 80086ec:	ed97 7a06 	vldr	s14, [r7, #24]
 80086f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80086f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f8:	edc7 7a06 	vstr	s15, [r7, #24]
 80086fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8008700:	edd7 7a05 	vldr	s15, [r7, #20]
 8008704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008708:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	ed93 7a00 	vldr	s14, [r3]
 8008712:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	edc3 7a00 	vstr	s15, [r3]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	ed93 7a01 	vldr	s14, [r3, #4]
 8008726:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800872a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4413      	add	r3, r2
 800873c:	ed93 7a00 	vldr	s14, [r3]
 8008740:	edd7 7a07 	vldr	s15, [r7, #28]
 8008744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008750:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4413      	add	r3, r2
 800875c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008760:	edd7 7a06 	vldr	s15, [r7, #24]
 8008764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008770:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4413      	add	r3, r2
 800877c:	ed93 7a00 	vldr	s14, [r3]
 8008780:	edd7 7a07 	vldr	s15, [r7, #28]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4413      	add	r3, r2
 800878c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008790:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	ed93 7a01 	vldr	s14, [r3, #4]
 80087a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	4413      	add	r3, r2
 80087ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087b0:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3308      	adds	r3, #8
 80087b8:	60fb      	str	r3, [r7, #12]
     }while(--k);
 80087ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087bc:	3b01      	subs	r3, #1
 80087be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f47f aede 	bne.w	8008584 <kf_bfly3+0x40>
}
 80087c8:	bf00      	nop
 80087ca:	3754      	adds	r7, #84	; 0x54
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <kf_bfly5>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b0ab      	sub	sp, #172	; 0xac
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80087e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	fb02 f303 	mul.w	r3, r2, r3
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80087fa:	441a      	add	r2, r3
 80087fc:	f107 0318 	add.w	r3, r7, #24
 8008800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008804:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	fb02 f303 	mul.w	r3, r2, r3
 8008810:	011b      	lsls	r3, r3, #4
 8008812:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008816:	441a      	add	r2, r3
 8008818:	f107 0310 	add.w	r3, r7, #16
 800881c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008820:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008832:	4413      	add	r3, r2
 8008834:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	461a      	mov	r2, r3
 800883e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008842:	4413      	add	r3, r2
 8008844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	4613      	mov	r3, r2
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	4413      	add	r3, r2
 8008850:	00db      	lsls	r3, r3, #3
 8008852:	461a      	mov	r2, r3
 8008854:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008858:	4413      	add	r3, r2
 800885a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	015b      	lsls	r3, r3, #5
 8008862:	461a      	mov	r2, r3
 8008864:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008868:	4413      	add	r3, r2
 800886a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8008874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 8008878:	2300      	movs	r3, #0
 800887a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800887e:	e2a7      	b.n	8008dd0 <kf_bfly5+0x5fc>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8008880:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008884:	f107 0320 	add.w	r3, r7, #32
 8008888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800888c:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8008890:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008894:	ed93 7a00 	vldr	s14, [r3]
 8008898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	fb02 f303 	mul.w	r3, r2, r3
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80088a8:	4413      	add	r3, r2
 80088aa:	edd3 7a00 	vldr	s15, [r3]
 80088ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80088ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	fb02 f303 	mul.w	r3, r2, r3
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80088ca:	4413      	add	r3, r2
 80088cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80088d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80088dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088e0:	ed93 7a00 	vldr	s14, [r3]
 80088e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	fb02 f303 	mul.w	r3, r2, r3
 80088ee:	00db      	lsls	r3, r3, #3
 80088f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80088f4:	4413      	add	r3, r2
 80088f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80088fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008902:	edd3 6a01 	vldr	s13, [r3, #4]
 8008906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	fb02 f303 	mul.w	r3, r2, r3
 8008910:	00db      	lsls	r3, r3, #3
 8008912:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008916:	4413      	add	r3, r2
 8008918:	edd3 7a00 	vldr	s15, [r3]
 800891c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008924:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8008928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800892c:	ed93 7a00 	vldr	s14, [r3]
 8008930:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	fb02 f303 	mul.w	r3, r2, r3
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008940:	4413      	add	r3, r2
 8008942:	edd3 7a00 	vldr	s15, [r3]
 8008946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800894a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800894e:	edd3 6a01 	vldr	s13, [r3, #4]
 8008952:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	fb02 f303 	mul.w	r3, r2, r3
 800895c:	011b      	lsls	r3, r3, #4
 800895e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008962:	4413      	add	r3, r2
 8008964:	edd3 7a01 	vldr	s15, [r3, #4]
 8008968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800896c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008970:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8008974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008978:	ed93 7a00 	vldr	s14, [r3]
 800897c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	fb02 f303 	mul.w	r3, r2, r3
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800898c:	4413      	add	r3, r2
 800898e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008996:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800899a:	edd3 6a01 	vldr	s13, [r3, #4]
 800899e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	fb02 f303 	mul.w	r3, r2, r3
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80089ae:	4413      	add	r3, r2
 80089b0:	edd3 7a00 	vldr	s15, [r3]
 80089b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089bc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 80089c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089c4:	ed93 7a00 	vldr	s14, [r3]
 80089c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	fb02 f203 	mul.w	r2, r2, r3
 80089d2:	4613      	mov	r3, r2
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	4413      	add	r3, r2
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	461a      	mov	r2, r3
 80089dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089e0:	4413      	add	r3, r2
 80089e2:	edd3 7a00 	vldr	s15, [r3]
 80089e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80089ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80089f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	fb02 f203 	mul.w	r2, r2, r3
 80089fc:	4613      	mov	r3, r2
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	4413      	add	r3, r2
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	461a      	mov	r2, r3
 8008a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a0a:	4413      	add	r3, r2
 8008a0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a18:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8008a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a20:	ed93 7a00 	vldr	s14, [r3]
 8008a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	fb02 f203 	mul.w	r2, r2, r3
 8008a2e:	4613      	mov	r3, r2
 8008a30:	005b      	lsls	r3, r3, #1
 8008a32:	4413      	add	r3, r2
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	461a      	mov	r2, r3
 8008a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a3c:	4413      	add	r3, r2
 8008a3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008a42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8008a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	fb02 f203 	mul.w	r2, r2, r3
 8008a58:	4613      	mov	r3, r2
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	4413      	add	r3, r2
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	461a      	mov	r2, r3
 8008a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a66:	4413      	add	r3, r2
 8008a68:	edd3 7a00 	vldr	s15, [r3]
 8008a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a74:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 8008a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a7c:	ed93 7a00 	vldr	s14, [r3]
 8008a80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	fb02 f303 	mul.w	r3, r2, r3
 8008a8a:	015b      	lsls	r3, r3, #5
 8008a8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a90:	4413      	add	r3, r2
 8008a92:	edd3 7a00 	vldr	s15, [r3]
 8008a96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a9e:	edd3 6a01 	vldr	s13, [r3, #4]
 8008aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	fb02 f303 	mul.w	r3, r2, r3
 8008aac:	015b      	lsls	r3, r3, #5
 8008aae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008ab2:	4413      	add	r3, r2
 8008ab4:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ac0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8008ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ac8:	ed93 7a00 	vldr	s14, [r3]
 8008acc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	fb02 f303 	mul.w	r3, r2, r3
 8008ad6:	015b      	lsls	r3, r3, #5
 8008ad8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008adc:	4413      	add	r3, r2
 8008ade:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008aea:	edd3 6a01 	vldr	s13, [r3, #4]
 8008aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	fb02 f303 	mul.w	r3, r2, r3
 8008af8:	015b      	lsls	r3, r3, #5
 8008afa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008afe:	4413      	add	r3, r2
 8008b00:	edd3 7a00 	vldr	s15, [r3]
 8008b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8008b10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008b14:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b1c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8008b20:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008b24:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b2c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8008b30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008b34:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b3c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8008b40:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008b44:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b4c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 8008b50:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008b54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b5c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8008b60:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008b64:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b6c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 8008b70:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008b74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b7c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8008b80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008b84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b8c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 8008b90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b94:	ed93 7a00 	vldr	s14, [r3]
 8008b98:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8008b9c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ba8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008bac:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8008bb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008bb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8008bb8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8008bbc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008bcc:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8008bd0:	ed97 7a08 	vldr	s14, [r7, #32]
 8008bd4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8008bd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8008bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008be4:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8008be8:	edd7 7a04 	vldr	s15, [r7, #16]
 8008bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bf4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 8008bf8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008bfc:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8008c00:	edd7 7a06 	vldr	s15, [r7, #24]
 8008c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c0c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8008c10:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c1c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 8008c20:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8008c24:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c2c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8008c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c3c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 8008c40:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8008c44:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4c:	eeb1 7a67 	vneg.f32	s14, s15
 8008c50:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8008c54:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c60:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 8008c64:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008c68:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c74:	edc3 7a00 	vstr	s15, [r3]
 8008c78:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008c7c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c88:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8008c8c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008c90:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c9c:	edc3 7a00 	vstr	s15, [r3]
 8008ca0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008ca4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cb0:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8008cb4:	ed97 7a08 	vldr	s14, [r7, #32]
 8008cb8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8008cbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8008cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008cc8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8008ccc:	edd7 7a06 	vldr	s15, [r7, #24]
 8008cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cd8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8008cdc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008ce0:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8008ce4:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008cf0:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8008cf4:	edd7 7a06 	vldr	s15, [r7, #24]
 8008cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d00:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8008d04:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8008d08:	edd7 7a07 	vldr	s15, [r7, #28]
 8008d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d10:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8008d14:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d20:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8008d24:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8008d28:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d30:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8008d34:	edd7 7a07 	vldr	s15, [r7, #28]
 8008d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d40:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 8008d44:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8008d48:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8008d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d54:	edc3 7a00 	vstr	s15, [r3]
 8008d58:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8008d5c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8008d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d68:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 8008d6c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8008d70:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8008d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d7c:	edc3 7a00 	vstr	s15, [r3]
 8008d80:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8008d84:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8008d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d90:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 8008d94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d98:	3308      	adds	r3, #8
 8008d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008da2:	3308      	adds	r3, #8
 8008da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dac:	3308      	adds	r3, #8
 8008dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008db2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008db6:	3308      	adds	r3, #8
 8008db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008dc0:	3308      	adds	r3, #8
 8008dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 8008dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008dca:	3301      	adds	r3, #1
 8008dcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dd0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	f6ff ad52 	blt.w	8008880 <kf_bfly5+0xac>
    }
}
 8008ddc:	bf00      	nop
 8008dde:	37ac      	adds	r7, #172	; 0xac
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <kf_bfly_generic>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b08e      	sub	sp, #56	; 0x38
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8008dfc:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 8008e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f010 f8cb 	bl	8018fa4 <malloc>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	61bb      	str	r3, [r7, #24]
    if (scratch == NULL){
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d117      	bne.n	8008e48 <kf_bfly_generic+0x60>
        KISS_FFT_ERROR("Memory allocation failed.");
 8008e18:	4b6d      	ldr	r3, [pc, #436]	; (8008fd0 <kf_bfly_generic+0x1e8>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	2223      	movs	r2, #35	; 0x23
 8008e20:	2101      	movs	r1, #1
 8008e22:	486c      	ldr	r0, [pc, #432]	; (8008fd4 <kf_bfly_generic+0x1ec>)
 8008e24:	f010 f88c 	bl	8018f40 <fwrite>
 8008e28:	4b69      	ldr	r3, [pc, #420]	; (8008fd0 <kf_bfly_generic+0x1e8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	2219      	movs	r2, #25
 8008e30:	2101      	movs	r1, #1
 8008e32:	4869      	ldr	r0, [pc, #420]	; (8008fd8 <kf_bfly_generic+0x1f0>)
 8008e34:	f010 f884 	bl	8018f40 <fwrite>
 8008e38:	4b65      	ldr	r3, [pc, #404]	; (8008fd0 <kf_bfly_generic+0x1e8>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	200a      	movs	r0, #10
 8008e42:	f00f ffd7 	bl	8018df4 <fputc>
 8008e46:	e0bf      	b.n	8008fc8 <kf_bfly_generic+0x1e0>
        return;
    }

    for ( u=0; u<m; ++u ) {
 8008e48:	2300      	movs	r3, #0
 8008e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4c:	e0b4      	b.n	8008fb8 <kf_bfly_generic+0x1d0>
        k=u;
 8008e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e50:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8008e52:	2300      	movs	r3, #0
 8008e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e56:	e013      	b.n	8008e80 <kf_bfly_generic+0x98>
            scratch[q1] = Fout[ k  ];
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	18d1      	adds	r1, r2, r3
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	00db      	lsls	r3, r3, #3
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	4413      	add	r3, r2
 8008e68:	460a      	mov	r2, r1
 8008e6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e6e:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 8008e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	4413      	add	r3, r2
 8008e78:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e84:	429a      	cmp	r2, r3
 8008e86:	dbe7      	blt.n	8008e58 <kf_bfly_generic+0x70>
        }

        k=u;
 8008e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8a:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e90:	e08a      	b.n	8008fa8 <kf_bfly_generic+0x1c0>
            int twidx=0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	00db      	lsls	r3, r3, #3
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	69ba      	ldr	r2, [r7, #24]
 8008ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ea4:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eac:	e071      	b.n	8008f92 <kf_bfly_generic+0x1aa>
                twidx += fstride * k;
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	fb02 f203 	mul.w	r2, r2, r3
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	4413      	add	r3, r2
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 8008ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	db03      	blt.n	8008ecc <kf_bfly_generic+0xe4>
 8008ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	00db      	lsls	r3, r3, #3
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	ed93 7a00 	vldr	s14, [r3]
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	6a3a      	ldr	r2, [r7, #32]
 8008ede:	4413      	add	r3, r2
 8008ee0:	edd3 7a00 	vldr	s15, [r3]
 8008ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	00db      	lsls	r3, r3, #3
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	4413      	add	r3, r2
 8008ef0:	edd3 6a01 	vldr	s13, [r3, #4]
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	6a3a      	ldr	r2, [r7, #32]
 8008efa:	4413      	add	r3, r2
 8008efc:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f08:	edc7 7a04 	vstr	s15, [r7, #16]
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	4413      	add	r3, r2
 8008f14:	ed93 7a00 	vldr	s14, [r3]
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	00db      	lsls	r3, r3, #3
 8008f1c:	6a3a      	ldr	r2, [r7, #32]
 8008f1e:	4413      	add	r3, r2
 8008f20:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	4413      	add	r3, r2
 8008f30:	edd3 6a01 	vldr	s13, [r3, #4]
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	6a3a      	ldr	r2, [r7, #32]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	edd3 7a00 	vldr	s15, [r3]
 8008f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f48:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4413      	add	r3, r2
 8008f54:	ed93 7a00 	vldr	s14, [r3]
 8008f58:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f68:	edc3 7a00 	vstr	s15, [r3]
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4413      	add	r3, r2
 8008f74:	ed93 7a01 	vldr	s14, [r3, #4]
 8008f78:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f88:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 8008f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8e:	3301      	adds	r3, #1
 8008f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f96:	429a      	cmp	r2, r3
 8008f98:	db89      	blt.n	8008eae <kf_bfly_generic+0xc6>
            }
            k += m;
 8008f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8008fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fac:	429a      	cmp	r2, r3
 8008fae:	f6ff af70 	blt.w	8008e92 <kf_bfly_generic+0xaa>
    for ( u=0; u<m; ++u ) {
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	f6ff af46 	blt.w	8008e4e <kf_bfly_generic+0x66>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 8008fc2:	69b8      	ldr	r0, [r7, #24]
 8008fc4:	f00f fff6 	bl	8018fb4 <free>
}
 8008fc8:	3738      	adds	r7, #56	; 0x38
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000018 	.word	0x20000018
 8008fd4:	0801c84c 	.word	0x0801c84c
 8008fd8:	0801c870 	.word	0x0801c870

08008fdc <kf_work>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08a      	sub	sp, #40	; 0x28
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	1d1a      	adds	r2, r3, #4
 8008ff2:	62ba      	str	r2, [r7, #40]	; 0x28
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	1d1a      	adds	r2, r3, #4
 8008ffc:	62ba      	str	r2, [r7, #40]	; 0x28
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	fb02 f303 	mul.w	r3, r2, r3
 800900a:	00db      	lsls	r3, r3, #3
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d115      	bne.n	8009044 <kf_work+0x68>
        do{
            *Fout = *f;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009020:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	fb02 f303 	mul.w	r3, r2, r3
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	4413      	add	r3, r2
 8009032:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	3308      	adds	r3, #8
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	429a      	cmp	r2, r3
 8009040:	d1ea      	bne.n	8009018 <kf_work+0x3c>
 8009042:	e01d      	b.n	8009080 <kf_work+0xa4>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	fb02 f203 	mul.w	r2, r2, r3
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68b9      	ldr	r1, [r7, #8]
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f7ff ffbf 	bl	8008fdc <kf_work>
            f += fstride*in_stride;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	fb02 f303 	mul.w	r3, r2, r3
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	4413      	add	r3, r2
 800906c:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	00db      	lsls	r3, r3, #3
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	4413      	add	r3, r2
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	429a      	cmp	r2, r3
 800907e:	d1e1      	bne.n	8009044 <kf_work+0x68>
    }

    Fout=Fout_beg;
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	3b02      	subs	r3, #2
 8009088:	2b03      	cmp	r3, #3
 800908a:	d827      	bhi.n	80090dc <kf_work+0x100>
 800908c:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <kf_work+0xb8>)
 800908e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009092:	bf00      	nop
 8009094:	080090a5 	.word	0x080090a5
 8009098:	080090b3 	.word	0x080090b3
 800909c:	080090c1 	.word	0x080090c1
 80090a0:	080090cf 	.word	0x080090cf
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7ff f822 	bl	80080f4 <kf_bfly2>
 80090b0:	e01d      	b.n	80090ee <kf_work+0x112>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f7ff fa43 	bl	8008544 <kf_bfly3>
 80090be:	e016      	b.n	80090ee <kf_work+0x112>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f7ff f88b 	bl	80081e2 <kf_bfly4>
 80090cc:	e00f      	b.n	80090ee <kf_work+0x112>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f7ff fb7d 	bl	80087d4 <kf_bfly5>
 80090da:	e008      	b.n	80090ee <kf_work+0x112>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f7ff fe7e 	bl	8008de8 <kf_bfly_generic>
 80090ec:	bf00      	nop
    }
}
 80090ee:	bf00      	nop
 80090f0:	3720      	adds	r7, #32
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop

080090f8 <kf_factor>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 80090f8:	b590      	push	{r4, r7, lr}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
    int p=4;
 8009102:	2304      	movs	r3, #4
 8009104:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7f7 fa1c 	bl	8000544 <__aeabi_i2d>
 800910c:	4603      	mov	r3, r0
 800910e:	460c      	mov	r4, r1
 8009110:	ec44 3b10 	vmov	d0, r3, r4
 8009114:	f00d ff56 	bl	8016fc4 <sqrt>
 8009118:	eeb0 7a40 	vmov.f32	s14, s0
 800911c:	eef0 7a60 	vmov.f32	s15, s1
 8009120:	eeb0 0a47 	vmov.f32	s0, s14
 8009124:	eef0 0a67 	vmov.f32	s1, s15
 8009128:	f00d fbde 	bl	80168e8 <floor>
 800912c:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8009130:	e01f      	b.n	8009172 <kf_factor+0x7a>
            switch (p) {
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d004      	beq.n	8009142 <kf_factor+0x4a>
 8009138:	2b04      	cmp	r3, #4
 800913a:	d105      	bne.n	8009148 <kf_factor+0x50>
                case 4: p = 2; break;
 800913c:	2302      	movs	r3, #2
 800913e:	617b      	str	r3, [r7, #20]
 8009140:	e006      	b.n	8009150 <kf_factor+0x58>
                case 2: p = 3; break;
 8009142:	2303      	movs	r3, #3
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	e003      	b.n	8009150 <kf_factor+0x58>
                default: p += 2; break;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	3302      	adds	r3, #2
 800914c:	617b      	str	r3, [r7, #20]
 800914e:	bf00      	nop
            }
            if (p > floor_sqrt)
 8009150:	6978      	ldr	r0, [r7, #20]
 8009152:	f7f7 f9f7 	bl	8000544 <__aeabi_i2d>
 8009156:	4603      	mov	r3, r0
 8009158:	460c      	mov	r4, r1
 800915a:	461a      	mov	r2, r3
 800915c:	4623      	mov	r3, r4
 800915e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009162:	f7f7 fccb 	bl	8000afc <__aeabi_dcmplt>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d100      	bne.n	800916e <kf_factor+0x76>
 800916c:	e001      	b.n	8009172 <kf_factor+0x7a>
                p = n;          /* no more factors, skip to end */
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	617b      	str	r3, [r7, #20]
        while (n % p) {
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	fb93 f2f2 	sdiv	r2, r3, r2
 800917a:	6979      	ldr	r1, [r7, #20]
 800917c:	fb01 f202 	mul.w	r2, r1, r2
 8009180:	1a9b      	subs	r3, r3, r2
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1d5      	bne.n	8009132 <kf_factor+0x3a>
        }
        n /= p;
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	fb92 f3f3 	sdiv	r3, r2, r3
 800918e:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	1d1a      	adds	r2, r3, #4
 8009194:	603a      	str	r2, [r7, #0]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	1d1a      	adds	r2, r3, #4
 800919e:	603a      	str	r2, [r7, #0]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	dce3      	bgt.n	8009172 <kf_factor+0x7a>
}
 80091aa:	bf00      	nop
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd90      	pop	{r4, r7, pc}
 80091b2:	0000      	movs	r0, r0
 80091b4:	0000      	movs	r0, r0
	...

080091b8 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )
{
 80091b8:	b5b0      	push	{r4, r5, r7, lr}
 80091ba:	b08c      	sub	sp, #48	; 0x30
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	603b      	str	r3, [r7, #0]
    KISS_FFT_ALIGN_CHECK(mem)

    kiss_fft_cfg st=NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t memneeded = KISS_FFT_ALIGN_SIZE_UP(sizeof(struct kiss_fft_state)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3321      	adds	r3, #33	; 0x21
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	61fb      	str	r3, [r7, #28]
        + sizeof(kiss_fft_cpx)*(nfft-1)); /* twiddle factors*/

    if ( lenmem==NULL ) {
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d105      	bne.n	80091e4 <kiss_fft_alloc+0x2c>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 80091d8:	69f8      	ldr	r0, [r7, #28]
 80091da:	f00f fee3 	bl	8018fa4 <malloc>
 80091de:	4603      	mov	r3, r0
 80091e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091e2:	e00c      	b.n	80091fe <kiss_fft_alloc+0x46>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d006      	beq.n	80091f8 <kiss_fft_alloc+0x40>
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69fa      	ldr	r2, [r7, #28]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d801      	bhi.n	80091f8 <kiss_fft_alloc+0x40>
            st = (kiss_fft_cfg)mem;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        *lenmem = memneeded;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	2b00      	cmp	r3, #0
 8009202:	d06a      	beq.n	80092da <kiss_fft_alloc+0x122>
        int i;
        st->nfft=nfft;
 8009204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	605a      	str	r2, [r3, #4]

        for (i=0;i<nfft;++i) {
 8009210:	2300      	movs	r3, #0
 8009212:	62bb      	str	r3, [r7, #40]	; 0x28
 8009214:	e057      	b.n	80092c6 <kiss_fft_alloc+0x10e>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8009216:	a434      	add	r4, pc, #208	; (adr r4, 80092e8 <kiss_fft_alloc+0x130>)
 8009218:	e9d4 3400 	ldrd	r3, r4, [r4]
 800921c:	e9c7 3404 	strd	r3, r4, [r7, #16]
            double phase = -2*pi*i / nfft;
 8009220:	f04f 0200 	mov.w	r2, #0
 8009224:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009228:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800922c:	f7f7 f9f4 	bl	8000618 <__aeabi_dmul>
 8009230:	4603      	mov	r3, r0
 8009232:	460c      	mov	r4, r1
 8009234:	4625      	mov	r5, r4
 8009236:	461c      	mov	r4, r3
 8009238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800923a:	f7f7 f983 	bl	8000544 <__aeabi_i2d>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4620      	mov	r0, r4
 8009244:	4629      	mov	r1, r5
 8009246:	f7f7 f9e7 	bl	8000618 <__aeabi_dmul>
 800924a:	4603      	mov	r3, r0
 800924c:	460c      	mov	r4, r1
 800924e:	4625      	mov	r5, r4
 8009250:	461c      	mov	r4, r3
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7f7 f976 	bl	8000544 <__aeabi_i2d>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4620      	mov	r0, r4
 800925e:	4629      	mov	r1, r5
 8009260:	f7f7 fb04 	bl	800086c <__aeabi_ddiv>
 8009264:	4603      	mov	r3, r0
 8009266:	460c      	mov	r4, r1
 8009268:	e9c7 3408 	strd	r3, r4, [r7, #32]
            if (st->inverse)
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <kiss_fft_alloc+0xc8>
                phase *= -1;
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	623b      	str	r3, [r7, #32]
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800927e:	627b      	str	r3, [r7, #36]	; 0x24
            kf_cexp(st->twiddles+i, phase );
 8009280:	ed97 0b08 	vldr	d0, [r7, #32]
 8009284:	f00d faec 	bl	8016860 <cos>
 8009288:	ec51 0b10 	vmov	r0, r1, d0
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	00db      	lsls	r3, r3, #3
 8009296:	18d4      	adds	r4, r2, r3
 8009298:	f7f7 fc96 	bl	8000bc8 <__aeabi_d2f>
 800929c:	4603      	mov	r3, r0
 800929e:	6023      	str	r3, [r4, #0]
 80092a0:	ed97 0b08 	vldr	d0, [r7, #32]
 80092a4:	f00d fe20 	bl	8016ee8 <sin>
 80092a8:	ec51 0b10 	vmov	r0, r1, d0
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	00db      	lsls	r3, r3, #3
 80092b6:	18d4      	adds	r4, r2, r3
 80092b8:	f7f7 fc86 	bl	8000bc8 <__aeabi_d2f>
 80092bc:	4603      	mov	r3, r0
 80092be:	6063      	str	r3, [r4, #4]
        for (i=0;i<nfft;++i) {
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	3301      	adds	r3, #1
 80092c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80092c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	dba3      	blt.n	8009216 <kiss_fft_alloc+0x5e>
        }

        kf_factor(nfft,st->factors);
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	3308      	adds	r3, #8
 80092d2:	4619      	mov	r1, r3
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff ff0f 	bl	80090f8 <kf_factor>
    }
    return st;
 80092da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3730      	adds	r7, #48	; 0x30
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bdb0      	pop	{r4, r5, r7, pc}
 80092e4:	f3af 8000 	nop.w
 80092e8:	54442d18 	.word	0x54442d18
 80092ec:	400921fb 	.word	0x400921fb

080092f0 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
 80092fc:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	429a      	cmp	r2, r3
 8009304:	d154      	bne.n	80093b0 <kiss_fft_stride+0xc0>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        if (fout == NULL){
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d117      	bne.n	800933c <kiss_fft_stride+0x4c>
            KISS_FFT_ERROR("fout buffer NULL.");
 800930c:	4b2f      	ldr	r3, [pc, #188]	; (80093cc <kiss_fft_stride+0xdc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	2223      	movs	r2, #35	; 0x23
 8009314:	2101      	movs	r1, #1
 8009316:	482e      	ldr	r0, [pc, #184]	; (80093d0 <kiss_fft_stride+0xe0>)
 8009318:	f00f fe12 	bl	8018f40 <fwrite>
 800931c:	4b2b      	ldr	r3, [pc, #172]	; (80093cc <kiss_fft_stride+0xdc>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	2211      	movs	r2, #17
 8009324:	2101      	movs	r1, #1
 8009326:	482b      	ldr	r0, [pc, #172]	; (80093d4 <kiss_fft_stride+0xe4>)
 8009328:	f00f fe0a 	bl	8018f40 <fwrite>
 800932c:	4b27      	ldr	r3, [pc, #156]	; (80093cc <kiss_fft_stride+0xdc>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	4619      	mov	r1, r3
 8009334:	200a      	movs	r0, #10
 8009336:	f00f fd5d 	bl	8018df4 <fputc>
        return;
 800933a:	e044      	b.n	80093c6 <kiss_fft_stride+0xd6>
        }

        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	4618      	mov	r0, r3
 8009344:	f00f fe2e 	bl	8018fa4 <malloc>
 8009348:	4603      	mov	r3, r0
 800934a:	617b      	str	r3, [r7, #20]
        if (tmpbuf == NULL){
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d117      	bne.n	8009382 <kiss_fft_stride+0x92>
            KISS_FFT_ERROR("Memory allocation error.");
 8009352:	4b1e      	ldr	r3, [pc, #120]	; (80093cc <kiss_fft_stride+0xdc>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	2223      	movs	r2, #35	; 0x23
 800935a:	2101      	movs	r1, #1
 800935c:	481e      	ldr	r0, [pc, #120]	; (80093d8 <kiss_fft_stride+0xe8>)
 800935e:	f00f fdef 	bl	8018f40 <fwrite>
 8009362:	4b1a      	ldr	r3, [pc, #104]	; (80093cc <kiss_fft_stride+0xdc>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	2218      	movs	r2, #24
 800936a:	2101      	movs	r1, #1
 800936c:	481b      	ldr	r0, [pc, #108]	; (80093dc <kiss_fft_stride+0xec>)
 800936e:	f00f fde7 	bl	8018f40 <fwrite>
 8009372:	4b16      	ldr	r3, [pc, #88]	; (80093cc <kiss_fft_stride+0xdc>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	4619      	mov	r1, r3
 800937a:	200a      	movs	r0, #10
 800937c:	f00f fd3a 	bl	8018df4 <fputc>
        return;
 8009380:	e021      	b.n	80093c6 <kiss_fft_stride+0xd6>
        }



        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3308      	adds	r3, #8
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	9201      	str	r2, [sp, #4]
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2201      	movs	r2, #1
 8009390:	68b9      	ldr	r1, [r7, #8]
 8009392:	6978      	ldr	r0, [r7, #20]
 8009394:	f7ff fe22 	bl	8008fdc <kf_work>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	461a      	mov	r2, r3
 80093a0:	6979      	ldr	r1, [r7, #20]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f00f fe0e 	bl	8018fc4 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 80093a8:	6978      	ldr	r0, [r7, #20]
 80093aa:	f00f fe03 	bl	8018fb4 <free>
 80093ae:	e00a      	b.n	80093c6 <kiss_fft_stride+0xd6>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3308      	adds	r3, #8
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	9201      	str	r2, [sp, #4]
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2201      	movs	r2, #1
 80093be:	68b9      	ldr	r1, [r7, #8]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff fe0b 	bl	8008fdc <kf_work>
    }
}
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20000018 	.word	0x20000018
 80093d0:	0801c88c 	.word	0x0801c88c
 80093d4:	0801c8b0 	.word	0x0801c8b0
 80093d8:	0801c8c4 	.word	0x0801c8c4
 80093dc:	0801c8e8 	.word	0x0801c8e8

080093e0 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 80093ec:	2301      	movs	r3, #1
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	68b9      	ldr	r1, [r7, #8]
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7ff ff7c 	bl	80092f0 <kiss_fft_stride>
}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem)
{
 8009400:	b5b0      	push	{r4, r5, r7, lr}
 8009402:	b08a      	sub	sp, #40	; 0x28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
	KISS_FFT_ALIGN_CHECK(mem)

    int i;
    kiss_fftr_cfg st = NULL;
 800940e:	2300      	movs	r3, #0
 8009410:	623b      	str	r3, [r7, #32]
    size_t subsize = 0, memneeded;
 8009412:	2300      	movs	r3, #0
 8009414:	613b      	str	r3, [r7, #16]

    if (nfft & 1) {
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	d018      	beq.n	8009452 <kiss_fftr_alloc+0x52>
        KISS_FFT_ERROR("Real FFT optimization must be even.");
 8009420:	4b63      	ldr	r3, [pc, #396]	; (80095b0 <kiss_fftr_alloc+0x1b0>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	2223      	movs	r2, #35	; 0x23
 8009428:	2101      	movs	r1, #1
 800942a:	4862      	ldr	r0, [pc, #392]	; (80095b4 <kiss_fftr_alloc+0x1b4>)
 800942c:	f00f fd88 	bl	8018f40 <fwrite>
 8009430:	4b5f      	ldr	r3, [pc, #380]	; (80095b0 <kiss_fftr_alloc+0x1b0>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	2223      	movs	r2, #35	; 0x23
 8009438:	2101      	movs	r1, #1
 800943a:	485f      	ldr	r0, [pc, #380]	; (80095b8 <kiss_fftr_alloc+0x1b8>)
 800943c:	f00f fd80 	bl	8018f40 <fwrite>
 8009440:	4b5b      	ldr	r3, [pc, #364]	; (80095b0 <kiss_fftr_alloc+0x1b0>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	4619      	mov	r1, r3
 8009448:	200a      	movs	r0, #10
 800944a:	f00f fcd3 	bl	8018df4 <fputc>
        return NULL;
 800944e:	2300      	movs	r3, #0
 8009450:	e0a3      	b.n	800959a <kiss_fftr_alloc+0x19a>
    }
    nfft >>= 1;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	105b      	asrs	r3, r3, #1
 8009456:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8009458:	f107 0310 	add.w	r3, r7, #16
 800945c:	2200      	movs	r2, #0
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff fea9 	bl	80091b8 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	4613      	mov	r3, r2
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	4413      	add	r3, r2
 800946e:	0fda      	lsrs	r2, r3, #31
 8009470:	4413      	add	r3, r2
 8009472:	105b      	asrs	r3, r3, #1
 8009474:	00da      	lsls	r2, r3, #3
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	4413      	add	r3, r2
 800947a:	330c      	adds	r3, #12
 800947c:	617b      	str	r3, [r7, #20]

    if (lenmem == NULL) {
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d105      	bne.n	8009490 <kiss_fftr_alloc+0x90>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 8009484:	6978      	ldr	r0, [r7, #20]
 8009486:	f00f fd8d 	bl	8018fa4 <malloc>
 800948a:	4603      	mov	r3, r0
 800948c:	623b      	str	r3, [r7, #32]
 800948e:	e009      	b.n	80094a4 <kiss_fftr_alloc+0xa4>
    } else {
        if (*lenmem >= memneeded)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	429a      	cmp	r2, r3
 8009498:	d801      	bhi.n	800949e <kiss_fftr_alloc+0x9e>
            st = (kiss_fftr_cfg) mem;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	623b      	str	r3, [r7, #32]
        *lenmem = memneeded;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <kiss_fftr_alloc+0xae>
        return NULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	e075      	b.n	800959a <kiss_fftr_alloc+0x19a>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	f103 020c 	add.w	r2, r3, #12
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	441a      	add	r2, r3
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	441a      	add	r2, r3
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 80094d2:	6a3b      	ldr	r3, [r7, #32]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	f107 0310 	add.w	r3, r7, #16
 80094da:	68b9      	ldr	r1, [r7, #8]
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f7ff fe6b 	bl	80091b8 <kiss_fft_alloc>

    for (i = 0; i < nfft/2; ++i) {
 80094e2:	2300      	movs	r3, #0
 80094e4:	627b      	str	r3, [r7, #36]	; 0x24
 80094e6:	e04f      	b.n	8009588 <kiss_fftr_alloc+0x188>
        double phase =
            -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	3301      	adds	r3, #1
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7f7 f829 	bl	8000544 <__aeabi_i2d>
 80094f2:	4604      	mov	r4, r0
 80094f4:	460d      	mov	r5, r1
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7f7 f824 	bl	8000544 <__aeabi_i2d>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4620      	mov	r0, r4
 8009502:	4629      	mov	r1, r5
 8009504:	f7f7 f9b2 	bl	800086c <__aeabi_ddiv>
 8009508:	4603      	mov	r3, r0
 800950a:	460c      	mov	r4, r1
 800950c:	4618      	mov	r0, r3
 800950e:	4621      	mov	r1, r4
 8009510:	f04f 0200 	mov.w	r2, #0
 8009514:	4b29      	ldr	r3, [pc, #164]	; (80095bc <kiss_fftr_alloc+0x1bc>)
 8009516:	f7f6 fec9 	bl	80002ac <__adddf3>
 800951a:	4603      	mov	r3, r0
 800951c:	460c      	mov	r4, r1
 800951e:	4618      	mov	r0, r3
 8009520:	4621      	mov	r1, r4
        double phase =
 8009522:	a321      	add	r3, pc, #132	; (adr r3, 80095a8 <kiss_fftr_alloc+0x1a8>)
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f7f7 f876 	bl	8000618 <__aeabi_dmul>
 800952c:	4603      	mov	r3, r0
 800952e:	460c      	mov	r4, r1
 8009530:	e9c7 3406 	strd	r3, r4, [r7, #24]
        if (inverse_fft)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <kiss_fftr_alloc+0x146>
            phase *= -1;
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009544:	61fb      	str	r3, [r7, #28]
        kf_cexp (st->super_twiddles+i,phase);
 8009546:	ed97 0b06 	vldr	d0, [r7, #24]
 800954a:	f00d f989 	bl	8016860 <cos>
 800954e:	ec51 0b10 	vmov	r0, r1, d0
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	18d4      	adds	r4, r2, r3
 800955c:	f7f7 fb34 	bl	8000bc8 <__aeabi_d2f>
 8009560:	4603      	mov	r3, r0
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	ed97 0b06 	vldr	d0, [r7, #24]
 8009568:	f00d fcbe 	bl	8016ee8 <sin>
 800956c:	ec51 0b10 	vmov	r0, r1, d0
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	18d4      	adds	r4, r2, r3
 800957a:	f7f7 fb25 	bl	8000bc8 <__aeabi_d2f>
 800957e:	4603      	mov	r3, r0
 8009580:	6063      	str	r3, [r4, #4]
    for (i = 0; i < nfft/2; ++i) {
 8009582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009584:	3301      	adds	r3, #1
 8009586:	627b      	str	r3, [r7, #36]	; 0x24
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	0fda      	lsrs	r2, r3, #31
 800958c:	4413      	add	r3, r2
 800958e:	105b      	asrs	r3, r3, #1
 8009590:	461a      	mov	r2, r3
 8009592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009594:	4293      	cmp	r3, r2
 8009596:	dba7      	blt.n	80094e8 <kiss_fftr_alloc+0xe8>
    }
    return st;
 8009598:	6a3b      	ldr	r3, [r7, #32]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3728      	adds	r7, #40	; 0x28
 800959e:	46bd      	mov	sp, r7
 80095a0:	bdb0      	pop	{r4, r5, r7, pc}
 80095a2:	bf00      	nop
 80095a4:	f3af 8000 	nop.w
 80095a8:	54442d18 	.word	0x54442d18
 80095ac:	c00921fb 	.word	0xc00921fb
 80095b0:	20000018 	.word	0x20000018
 80095b4:	0801c904 	.word	0x0801c904
 80095b8:	0801c928 	.word	0x0801c928
 80095bc:	3fe00000 	.word	0x3fe00000

080095c0 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b092      	sub	sp, #72	; 0x48
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d017      	beq.n	8009606 <kiss_fftr+0x46>
        KISS_FFT_ERROR("kiss fft usage error: improper alloc");
 80095d6:	4b91      	ldr	r3, [pc, #580]	; (800981c <kiss_fftr+0x25c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	2223      	movs	r2, #35	; 0x23
 80095de:	2101      	movs	r1, #1
 80095e0:	488f      	ldr	r0, [pc, #572]	; (8009820 <kiss_fftr+0x260>)
 80095e2:	f00f fcad 	bl	8018f40 <fwrite>
 80095e6:	4b8d      	ldr	r3, [pc, #564]	; (800981c <kiss_fftr+0x25c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	2224      	movs	r2, #36	; 0x24
 80095ee:	2101      	movs	r1, #1
 80095f0:	488c      	ldr	r0, [pc, #560]	; (8009824 <kiss_fftr+0x264>)
 80095f2:	f00f fca5 	bl	8018f40 <fwrite>
 80095f6:	4b89      	ldr	r3, [pc, #548]	; (800981c <kiss_fftr+0x25c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	4619      	mov	r1, r3
 80095fe:	200a      	movs	r0, #10
 8009600:	f00f fbf8 	bl	8018df4 <fputc>
 8009604:	e107      	b.n	8009816 <kiss_fftr+0x256>
        return;/* The caller did not call the correct function */
    }

    ncfft = st->substate->nfft;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	461a      	mov	r2, r3
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	f7ff fee1 	bl	80093e0 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 800962e:	ed97 7a04 	vldr	s14, [r7, #16]
 8009632:	edd7 7a05 	vldr	s15, [r7, #20]
 8009636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8009640:	ed97 7a04 	vldr	s14, [r7, #16]
 8009644:	edd7 7a05 	vldr	s15, [r7, #20]
 8009648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009654:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	605a      	str	r2, [r3, #4]
 8009660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	4413      	add	r3, r2
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	6852      	ldr	r2, [r2, #4]
 800966c:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 800966e:	2301      	movs	r3, #1
 8009670:	647b      	str	r3, [r7, #68]	; 0x44
 8009672:	e0c7      	b.n	8009804 <kiss_fftr+0x244>
        fpk    = st->tmpbuf[k];
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800967a:	00db      	lsls	r3, r3, #3
 800967c:	441a      	add	r2, r3
 800967e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009686:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009692:	1acb      	subs	r3, r1, r3
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	4413      	add	r3, r2
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096a4:	1acb      	subs	r3, r1, r3
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	4413      	add	r3, r2
 80096aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80096ae:	eef1 7a67 	vneg.f32	s15, s15
 80096b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 80096b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80096ba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80096be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80096c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80096ca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80096ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 80096d6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80096da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80096de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096e2:	edc7 7a08 	vstr	s15, [r7, #32]
 80096e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80096ea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80096ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 80096f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	689a      	ldr	r2, [r3, #8]
 80096fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009700:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009704:	3b01      	subs	r3, #1
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	4413      	add	r3, r2
 800970a:	edd3 7a00 	vldr	s15, [r3]
 800970e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009712:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	689a      	ldr	r2, [r3, #8]
 800971a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800971c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009720:	3b01      	subs	r3, #1
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	4413      	add	r3, r2
 8009726:	edd3 7a01 	vldr	s15, [r3, #4]
 800972a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800972e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009732:	edc7 7a06 	vstr	s15, [r7, #24]
 8009736:	ed97 7a08 	vldr	s14, [r7, #32]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009740:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009744:	3b01      	subs	r3, #1
 8009746:	00db      	lsls	r3, r3, #3
 8009748:	4413      	add	r3, r2
 800974a:	edd3 7a01 	vldr	s15, [r3, #4]
 800974e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009752:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	689a      	ldr	r2, [r3, #8]
 800975a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800975c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009760:	3b01      	subs	r3, #1
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	4413      	add	r3, r2
 8009766:	edd3 7a00 	vldr	s15, [r3]
 800976a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800976e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009772:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 8009776:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800977a:	edd7 7a06 	vldr	s15, [r7, #24]
 800977e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009784:	00db      	lsls	r3, r3, #3
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	4413      	add	r3, r2
 800978a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800978e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009792:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 8009796:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800979a:	edd7 7a07 	vldr	s15, [r7, #28]
 800979e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	4413      	add	r3, r2
 80097aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80097ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097b2:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 80097b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80097ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80097be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80097d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097d6:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 80097da:	ed97 7a07 	vldr	s14, [r7, #28]
 80097de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80097e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	00db      	lsls	r3, r3, #3
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	4413      	add	r3, r2
 80097f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80097f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097fa:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 80097fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009800:	3301      	adds	r3, #1
 8009802:	647b      	str	r3, [r7, #68]	; 0x44
 8009804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009806:	0fda      	lsrs	r2, r3, #31
 8009808:	4413      	add	r3, r2
 800980a:	105b      	asrs	r3, r3, #1
 800980c:	461a      	mov	r2, r3
 800980e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009810:	4293      	cmp	r3, r2
 8009812:	f77f af2f 	ble.w	8009674 <kiss_fftr+0xb4>
    }
}
 8009816:	3748      	adds	r7, #72	; 0x48
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20000018 	.word	0x20000018
 8009820:	0801c94c 	.word	0x0801c94c
 8009824:	0801c970 	.word	0x0801c970

08009828 <CountLeadingZeros32>:
static inline int CountLeadingZeros32(uint32_t n) {
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  if (n == 0) {
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <CountLeadingZeros32+0x12>
    return 32;
 8009836:	2320      	movs	r3, #32
 8009838:	e002      	b.n	8009840 <CountLeadingZeros32+0x18>
  return __builtin_clz(n);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	fab3 f383 	clz	r3, r3
}
 8009840:	4618      	mov	r0, r3
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <MostSignificantBit32>:
static inline int MostSignificantBit32(uint32_t n) {
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  return 32 - CountLeadingZeros32(n);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff ffe7 	bl	8009828 <CountLeadingZeros32>
 800985a:	4603      	mov	r3, r0
 800985c:	f1c3 0320 	rsb	r3, r3, #32
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <Log2FractionPart>:
//       www.inti.gob.ar/electronicaeinformatica/instrumentacion/utic/
//       publicaciones/SPL2007/Log10-spl07.pdf
// It first calculates log2 of the input and then converts it to natural
// logarithm.

static uint32_t Log2FractionPart(const uint32_t x, const uint32_t log2x) {
 8009868:	b4f0      	push	{r4, r5, r6, r7}
 800986a:	b08a      	sub	sp, #40	; 0x28
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  // Part 1
  int32_t frac = x - (1LL << log2x);
 8009872:	f04f 0101 	mov.w	r1, #1
 8009876:	f04f 0200 	mov.w	r2, #0
 800987a:	6838      	ldr	r0, [r7, #0]
 800987c:	f1a0 0620 	sub.w	r6, r0, #32
 8009880:	f1c0 0520 	rsb	r5, r0, #32
 8009884:	fa02 f400 	lsl.w	r4, r2, r0
 8009888:	fa01 f606 	lsl.w	r6, r1, r6
 800988c:	4334      	orrs	r4, r6
 800988e:	fa21 f505 	lsr.w	r5, r1, r5
 8009892:	432c      	orrs	r4, r5
 8009894:	fa01 f300 	lsl.w	r3, r1, r0
 8009898:	461a      	mov	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	627b      	str	r3, [r7, #36]	; 0x24
  if (log2x < kLogScaleLog2) {
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2b0f      	cmp	r3, #15
 80098a4:	d807      	bhi.n	80098b6 <Log2FractionPart+0x4e>
    frac <<= kLogScaleLog2 - log2x;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	f1c3 0310 	rsb	r3, r3, #16
 80098ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ae:	fa02 f303 	lsl.w	r3, r2, r3
 80098b2:	627b      	str	r3, [r7, #36]	; 0x24
 80098b4:	e005      	b.n	80098c2 <Log2FractionPart+0x5a>
  } else {
    frac >>= log2x - kLogScaleLog2;
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	3b10      	subs	r3, #16
 80098ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098bc:	fa42 f303 	asr.w	r3, r2, r3
 80098c0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // Part 2
  const uint32_t base_seg = frac >> (kLogScaleLog2 - kLogSegmentsLog2);
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	125b      	asrs	r3, r3, #9
 80098c6:	623b      	str	r3, [r7, #32]
  const uint32_t seg_unit =
 80098c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098cc:	61fb      	str	r3, [r7, #28]
      (((uint32_t)1) << kLogScaleLog2) >> kLogSegmentsLog2;

  const int32_t c0 = kLogLut[base_seg];
 80098ce:	4a12      	ldr	r2, [pc, #72]	; (8009918 <Log2FractionPart+0xb0>)
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098d6:	61bb      	str	r3, [r7, #24]
  const int32_t c1 = kLogLut[base_seg + 1];
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	3301      	adds	r3, #1
 80098dc:	4a0e      	ldr	r2, [pc, #56]	; (8009918 <Log2FractionPart+0xb0>)
 80098de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098e2:	617b      	str	r3, [r7, #20]
  const int32_t seg_base = seg_unit * base_seg;
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	6a3a      	ldr	r2, [r7, #32]
 80098e8:	fb02 f303 	mul.w	r3, r2, r3
 80098ec:	613b      	str	r3, [r7, #16]
  const int32_t rel_pos = ((c1 - c0) * (frac - seg_base)) >> kLogScaleLog2;
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	1a8a      	subs	r2, r1, r2
 80098fa:	fb02 f303 	mul.w	r3, r2, r3
 80098fe:	141b      	asrs	r3, r3, #16
 8009900:	60fb      	str	r3, [r7, #12]
  return frac + c0 + rel_pos;
 8009902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	441a      	add	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4413      	add	r3, r2
}
 800990c:	4618      	mov	r0, r3
 800990e:	3728      	adds	r7, #40	; 0x28
 8009910:	46bd      	mov	sp, r7
 8009912:	bcf0      	pop	{r4, r5, r6, r7}
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	0801f088 	.word	0x0801f088

0800991c <Log>:

static uint32_t Log(const uint32_t x, const uint32_t scale_shift) {
 800991c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009920:	b088      	sub	sp, #32
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
  const uint32_t integer = MostSignificantBit32(x) - 1;
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff ff8f 	bl	800984c <MostSignificantBit32>
 800992e:	4603      	mov	r3, r0
 8009930:	3b01      	subs	r3, #1
 8009932:	61fb      	str	r3, [r7, #28]
  const uint32_t fraction = Log2FractionPart(x, integer);
 8009934:	69f9      	ldr	r1, [r7, #28]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff ff96 	bl	8009868 <Log2FractionPart>
 800993c:	61b8      	str	r0, [r7, #24]
  const uint32_t log2 = (integer << kLogScaleLog2) + fraction;
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	041b      	lsls	r3, r3, #16
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	4413      	add	r3, r2
 8009946:	617b      	str	r3, [r7, #20]
  const uint32_t round = kLogScale / 2;
 8009948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800994c:	613b      	str	r3, [r7, #16]
  const uint32_t loge = (((uint64_t)kLogCoeff) * log2 + round) >> kLogScaleLog2;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f04f 0400 	mov.w	r4, #0
 8009954:	f24b 1272 	movw	r2, #45426	; 0xb172
 8009958:	fb02 f104 	mul.w	r1, r2, r4
 800995c:	2200      	movs	r2, #0
 800995e:	fb02 f203 	mul.w	r2, r2, r3
 8009962:	440a      	add	r2, r1
 8009964:	f24b 1172 	movw	r1, #45426	; 0xb172
 8009968:	fba3 3401 	umull	r3, r4, r3, r1
 800996c:	4422      	add	r2, r4
 800996e:	4614      	mov	r4, r2
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	4611      	mov	r1, r2
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	eb11 0b03 	adds.w	fp, r1, r3
 800997c:	eb42 0c04 	adc.w	ip, r2, r4
 8009980:	f04f 0300 	mov.w	r3, #0
 8009984:	f04f 0400 	mov.w	r4, #0
 8009988:	ea4f 431b 	mov.w	r3, fp, lsr #16
 800998c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8009990:	ea4f 441c 	mov.w	r4, ip, lsr #16
 8009994:	60fb      	str	r3, [r7, #12]
  // Finally scale to our output scale
  const uint32_t loge_scaled = ((loge << scale_shift) + round) >> kLogScaleLog2;
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	409a      	lsls	r2, r3
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	4413      	add	r3, r2
 80099a0:	0c1b      	lsrs	r3, r3, #16
 80099a2:	60bb      	str	r3, [r7, #8]
  return loge_scaled;
 80099a4:	68bb      	ldr	r3, [r7, #8]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3720      	adds	r7, #32
 80099aa:	46bd      	mov	sp, r7
 80099ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080099b0 <LogScaleApply>:

uint16_t* LogScaleApply(struct LogScaleState* state, uint32_t* signal,
                        int signal_size, int correction_bits) {
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08a      	sub	sp, #40	; 0x28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	603b      	str	r3, [r7, #0]
  const int scale_shift = state->scale_shift;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	61bb      	str	r3, [r7, #24]
  uint16_t* output = (uint16_t*)signal;
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t* ret = output;
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	617b      	str	r3, [r7, #20]
  int i;
  for (i = 0; i < signal_size; ++i) {
 80099cc:	2300      	movs	r3, #0
 80099ce:	623b      	str	r3, [r7, #32]
 80099d0:	e032      	b.n	8009a38 <LogScaleApply+0x88>
    uint32_t value = *signal++;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	1d1a      	adds	r2, r3, #4
 80099d6:	60ba      	str	r2, [r7, #8]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	61fb      	str	r3, [r7, #28]
    if (state->enable_log) {
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d01a      	beq.n	8009a1a <LogScaleApply+0x6a>
      if (correction_bits < 0) {
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	da06      	bge.n	80099f8 <LogScaleApply+0x48>
        value >>= -correction_bits;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	425b      	negs	r3, r3
 80099ee:	69fa      	ldr	r2, [r7, #28]
 80099f0:	fa22 f303 	lsr.w	r3, r2, r3
 80099f4:	61fb      	str	r3, [r7, #28]
 80099f6:	e004      	b.n	8009a02 <LogScaleApply+0x52>
      } else {
        value <<= correction_bits;
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009a00:	61fb      	str	r3, [r7, #28]
      }
      if (value > 1) {
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d906      	bls.n	8009a16 <LogScaleApply+0x66>
        value = Log(value, scale_shift);
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	69f8      	ldr	r0, [r7, #28]
 8009a0e:	f7ff ff85 	bl	800991c <Log>
 8009a12:	61f8      	str	r0, [r7, #28]
 8009a14:	e001      	b.n	8009a1a <LogScaleApply+0x6a>
      } else {
        value = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	61fb      	str	r3, [r7, #28]
      }
    }
    *output++ = (value < kuint16max) ? value : kuint16max;
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a20:	4293      	cmp	r3, r2
 8009a22:	bf28      	it	cs
 8009a24:	4613      	movcs	r3, r2
 8009a26:	4619      	mov	r1, r3
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	1c9a      	adds	r2, r3, #2
 8009a2c:	627a      	str	r2, [r7, #36]	; 0x24
 8009a2e:	b28a      	uxth	r2, r1
 8009a30:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < signal_size; ++i) {
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	3301      	adds	r3, #1
 8009a36:	623b      	str	r3, [r7, #32]
 8009a38:	6a3a      	ldr	r2, [r7, #32]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	dbc8      	blt.n	80099d2 <LogScaleApply+0x22>
  }
  return ret;
 8009a40:	697b      	ldr	r3, [r7, #20]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3728      	adds	r7, #40	; 0x28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <LogScalePopulateState>:
  config->enable_log = 1;
  config->scale_shift = 6;
}

int LogScalePopulateState(const struct LogScaleConfig* config,
                          struct LogScaleState* state) {
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  state->enable_log = config->enable_log;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	601a      	str	r2, [r3, #0]
  state->scale_shift = config->scale_shift;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	605a      	str	r2, [r3, #4]
  return 1;
 8009a64:	2301      	movs	r3, #1
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
	...

08009a74 <_ZN11flatbuffers11EndianCheckEv>:
inline void EndianCheck() {
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	607b      	str	r3, [r7, #4]
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 8009a7e:	1d3b      	adds	r3, r7, #4
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d005      	beq.n	8009a92 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8009a88:	4a05      	ldr	r2, [pc, #20]	; (8009aa0 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8009a8a:	214e      	movs	r1, #78	; 0x4e
 8009a8c:	4805      	ldr	r0, [pc, #20]	; (8009aa4 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8009a8e:	f00f f949 	bl	8018d24 <__assert_func>
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	0801c9c0 	.word	0x0801c9c0
 8009aa0:	0801f1f8 	.word	0x0801f1f8
 8009aa4:	0801ca04 	.word	0x0801ca04

08009aa8 <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2104      	movs	r1, #4
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fe13 	bl	800a6e2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8009abc:	4603      	mov	r3, r0
  }
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fe25 	bl	800a71e <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8009ad4:	4603      	mov	r3, r0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 fe23 	bl	800a736 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	4a04      	ldr	r2, [pc, #16]	; (8009b14 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	0801f1e4 	.word	0x0801f1e4

08009b18 <_ZN6tflite10OpResolverD0Ev>:
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7ff ffe9 	bl	8009af8 <_ZN6tflite10OpResolverD1Ev>
 8009b26:	2104      	movs	r1, #4
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f00c fe58 	bl	80167de <_ZdlPvj>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	460b      	mov	r3, r1
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3314      	adds	r3, #20
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	7afa      	ldrb	r2, [r7, #11]
 8009b50:	4611      	mov	r1, r2
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	4798      	blx	r3
 8009b56:	4603      	mov	r3, r0
  }
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	3318      	adds	r3, #24
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68b9      	ldr	r1, [r7, #8]
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	4798      	blx	r3
 8009b7a:	4603      	mov	r3, r0
  }
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	4a05      	ldr	r2, [pc, #20]	; (8009ba4 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	601a      	str	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7ff ffaf 	bl	8009af8 <_ZN6tflite10OpResolverD1Ev>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	0801f1bc 	.word	0x0801f1bc

08009ba8 <_ZN6tflite15MicroOpResolverD0Ev>:
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7ff ffe7 	bl	8009b84 <_ZN6tflite15MicroOpResolverD1Ev>
 8009bb6:	2104      	movs	r1, #4
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f00c fe10 	bl	80167de <_ZdlPvj>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <_Z11readSamplesv>:
const int no_of_samples = 16000;

int16_t samples[no_of_samples];


void readSamples(){
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
	//char debug [10];
//	int a =0;
	int read;
	float convf;
	float volt;
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8009bce:	4b3c      	ldr	r3, [pc, #240]	; (8009cc0 <_Z11readSamplesv+0xf8>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	625a      	str	r2, [r3, #36]	; 0x24

	while(sampleCompleted<no_of_samples){
 8009bd6:	4b3b      	ldr	r3, [pc, #236]	; (8009cc4 <_Z11readSamplesv+0xfc>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8009bde:	da67      	bge.n	8009cb0 <_Z11readSamplesv+0xe8>
		while (__HAL_TIM_GET_COUNTER(&htim1) < 10);
 8009be0:	4b37      	ldr	r3, [pc, #220]	; (8009cc0 <_Z11readSamplesv+0xf8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	2b09      	cmp	r3, #9
 8009be8:	bf94      	ite	ls
 8009bea:	2301      	movls	r3, #1
 8009bec:	2300      	movhi	r3, #0
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d000      	beq.n	8009bf6 <_Z11readSamplesv+0x2e>
 8009bf4:	e7f4      	b.n	8009be0 <_Z11readSamplesv+0x18>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8009bf6:	4b32      	ldr	r3, [pc, #200]	; (8009cc0 <_Z11readSamplesv+0xf8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_ADC_Start(&hadc1);
 8009bfe:	4832      	ldr	r0, [pc, #200]	; (8009cc8 <_Z11readSamplesv+0x100>)
 8009c00:	f009 fcc4 	bl	801358c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 8009c04:	2164      	movs	r1, #100	; 0x64
 8009c06:	4830      	ldr	r0, [pc, #192]	; (8009cc8 <_Z11readSamplesv+0x100>)
 8009c08:	f009 fd23 	bl	8013652 <HAL_ADC_PollForConversion>
		read = HAL_ADC_GetValue(&hadc1);
 8009c0c:	482e      	ldr	r0, [pc, #184]	; (8009cc8 <_Z11readSamplesv+0x100>)
 8009c0e:	f009 fda8 	bl	8013762 <HAL_ADC_GetValue>
 8009c12:	4603      	mov	r3, r0
 8009c14:	60fb      	str	r3, [r7, #12]
		convf = (read/4096.0)*65536-32768;
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f7f6 fc94 	bl	8000544 <__aeabi_i2d>
 8009c1c:	f04f 0200 	mov.w	r2, #0
 8009c20:	4b2a      	ldr	r3, [pc, #168]	; (8009ccc <_Z11readSamplesv+0x104>)
 8009c22:	f7f6 fe23 	bl	800086c <__aeabi_ddiv>
 8009c26:	4603      	mov	r3, r0
 8009c28:	460c      	mov	r4, r1
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	f04f 0200 	mov.w	r2, #0
 8009c32:	4b27      	ldr	r3, [pc, #156]	; (8009cd0 <_Z11readSamplesv+0x108>)
 8009c34:	f7f6 fcf0 	bl	8000618 <__aeabi_dmul>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	4621      	mov	r1, r4
 8009c40:	f04f 0200 	mov.w	r2, #0
 8009c44:	4b23      	ldr	r3, [pc, #140]	; (8009cd4 <_Z11readSamplesv+0x10c>)
 8009c46:	f7f6 fb2f 	bl	80002a8 <__aeabi_dsub>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	4618      	mov	r0, r3
 8009c50:	4621      	mov	r1, r4
 8009c52:	f7f6 ffb9 	bl	8000bc8 <__aeabi_d2f>
 8009c56:	4603      	mov	r3, r0
 8009c58:	60bb      	str	r3, [r7, #8]
		volt = (read/4096.0)*5.0f;
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f7f6 fc72 	bl	8000544 <__aeabi_i2d>
 8009c60:	f04f 0200 	mov.w	r2, #0
 8009c64:	4b19      	ldr	r3, [pc, #100]	; (8009ccc <_Z11readSamplesv+0x104>)
 8009c66:	f7f6 fe01 	bl	800086c <__aeabi_ddiv>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	4618      	mov	r0, r3
 8009c70:	4621      	mov	r1, r4
 8009c72:	f04f 0200 	mov.w	r2, #0
 8009c76:	4b18      	ldr	r3, [pc, #96]	; (8009cd8 <_Z11readSamplesv+0x110>)
 8009c78:	f7f6 fcce 	bl	8000618 <__aeabi_dmul>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	460c      	mov	r4, r1
 8009c80:	4618      	mov	r0, r3
 8009c82:	4621      	mov	r1, r4
 8009c84:	f7f6 ffa0 	bl	8000bc8 <__aeabi_d2f>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	607b      	str	r3, [r7, #4]
		samples[sampleCompleted]= int16_t(convf);
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <_Z11readSamplesv+0xfc>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c98:	ee17 2a90 	vmov	r2, s15
 8009c9c:	b211      	sxth	r1, r2
 8009c9e:	4a0f      	ldr	r2, [pc, #60]	; (8009cdc <_Z11readSamplesv+0x114>)
 8009ca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//HAL_ADC_Stop(&hadc1);
		/*sprintf(message,"VALUE %d = %.2f \r\n", sampleCompleted, volt);
		HAL_UART_Transmit(&huart2,(uint8_t *)&message, 22, 100);*/
		sampleCompleted++;
 8009ca4:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <_Z11readSamplesv+0xfc>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	4a06      	ldr	r2, [pc, #24]	; (8009cc4 <_Z11readSamplesv+0xfc>)
 8009cac:	6013      	str	r3, [r2, #0]
	while(sampleCompleted<no_of_samples){
 8009cae:	e792      	b.n	8009bd6 <_Z11readSamplesv+0xe>

	}
	sampleCompleted = 0;
 8009cb0:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <_Z11readSamplesv+0xfc>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
}
 8009cb6:	bf00      	nop
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd90      	pop	{r4, r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	2000068c 	.word	0x2000068c
 8009cc4:	200007a4 	.word	0x200007a4
 8009cc8:	20000604 	.word	0x20000604
 8009ccc:	40b00000 	.word	0x40b00000
 8009cd0:	40f00000 	.word	0x40f00000
 8009cd4:	40e00000 	.word	0x40e00000
 8009cd8:	40140000 	.word	0x40140000
 8009cdc:	200007ac 	.word	0x200007ac

08009ce0 <__tcf_0>:
  interpreter.AllocateTensors();

  // Get information about the memory area to use for the model's input.
  TfLiteTensor* input = interpreter.input(0);
  static FeatureProvider static_feature_provider(kFeatureElementCount,
                                                   feature_buffer);
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	4801      	ldr	r0, [pc, #4]	; (8009cec <__tcf_0+0xc>)
 8009ce6:	f7f9 f9c1 	bl	800306c <_ZN15FeatureProviderD1Ev>
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	200084ac 	.word	0x200084ac

08009cf0 <main>:
{
 8009cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cf2:	f5ad 5d47 	sub.w	sp, sp, #12736	; 0x31c0
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af04      	add	r7, sp, #16
	FeatureProvider* feature_provider = nullptr;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8009d00:	6013      	str	r3, [r2, #0]
  HAL_Init();
 8009d02:	f009 f8c0 	bl	8012e86 <HAL_Init>
  SystemClock_Config();
 8009d06:	f000 faaf 	bl	800a268 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8009d0a:	f000 fc9f 	bl	800a64c <_ZL12MX_GPIO_Initv>
  MX_TIM16_Init();
 8009d0e:	f000 fc3d 	bl	800a58c <_ZL13MX_TIM16_Initv>
  MX_USART2_UART_Init();
 8009d12:	f000 fc67 	bl	800a5e4 <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 8009d16:	f000 fbaf 	bl	800a478 <_ZL11MX_CRC_Initv>
  MX_ADC1_Init();
 8009d1a:	f000 fb3f 	bl	800a39c <_ZL12MX_ADC1_Initv>
  MX_TIM1_Init();
 8009d1e:	f000 fbd3 	bl	800a4c8 <_ZL12MX_TIM1_Initv>
  tflite::MicroErrorReporter micro_error_reporter;
 8009d22:	4ab9      	ldr	r2, [pc, #740]	; (800a008 <main+0x318>)
 8009d24:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 8009d28:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8009d2c:	601a      	str	r2, [r3, #0]
  tflite::ErrorReporter* error_reporter = &micro_error_reporter;
 8009d2e:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 8009d32:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8009d36:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 8009d3a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8009d3e:	6013      	str	r3, [r2, #0]
  const tflite::Model* model = ::tflite::GetModel(g_model);
 8009d40:	48b2      	ldr	r0, [pc, #712]	; (800a00c <main+0x31c>)
 8009d42:	f7ff fec0 	bl	8009ac6 <_ZN6tflite8GetModelEPKv>
 8009d46:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8009d4a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8009d4e:	6018      	str	r0, [r3, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION)
 8009d50:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8009d54:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	f7ff fea5 	bl	8009aa8 <_ZNK6tflite5Model7versionEv>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	bf14      	ite	ne
 8009d64:	2301      	movne	r3, #1
 8009d66:	2300      	moveq	r3, #0
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00f      	beq.n	8009d8e <main+0x9e>
	  TF_LITE_REPORT_ERROR(&micro_error_reporter,
 8009d6e:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8009d72:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	f7ff fe96 	bl	8009aa8 <_ZNK6tflite5Model7versionEv>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	f507 5026 	add.w	r0, r7, #10624	; 0x2980
 8009d82:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8009d86:	2303      	movs	r3, #3
 8009d88:	49a1      	ldr	r1, [pc, #644]	; (800a010 <main+0x320>)
 8009d8a:	f7f9 f915 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  tflite::MicroMutableOpResolver<4> micro_op_resolver;
 8009d8e:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8009d92:	f103 0304 	add.w	r3, r3, #4
 8009d96:	2100      	movs	r1, #0
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 fcfb 	bl	800a794 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>
  micro_op_resolver.AddDepthwiseConv2D();
 8009d9e:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8009da2:	f103 0304 	add.w	r3, r3, #4
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 fd14 	bl	800a7d4 <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv>
    return AddBuiltin(BuiltinOperator_FLOOR,
                      tflite::ops::micro::Register_FLOOR(), ParseFloor);
  }

  TfLiteStatus AddFullyConnected(
      const TfLiteRegistration& registration = Register_FULLY_CONNECTED()) {
 8009dac:	f507 5345 	add.w	r3, r7, #12608	; 0x3140
 8009db0:	f103 0314 	add.w	r3, r3, #20
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fd f847 	bl	8006e48 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
  micro_op_resolver.AddFullyConnected();
 8009dba:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 8009dbe:	f102 0214 	add.w	r2, r2, #20
 8009dc2:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8009dc6:	f103 0304 	add.w	r3, r3, #4
 8009dca:	4611      	mov	r1, r2
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 fd19 	bl	800a804 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration>
  micro_op_resolver.AddReshape();
 8009dd2:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8009dd6:	f103 0304 	add.w	r3, r3, #4
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 fd24 	bl	800a828 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv>
  micro_op_resolver.AddSoftmax();
 8009de0:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8009de4:	f103 0304 	add.w	r3, r3, #4
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fd35 	bl	800a858 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxEv>
  const int tensor_arena_size = 10 * 1024;
 8009dee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009df2:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 8009df6:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8009dfa:	6013      	str	r3, [r2, #0]
									 &micro_error_reporter);
 8009dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e00:	3b04      	subs	r3, #4
 8009e02:	f507 5124 	add.w	r1, r7, #10496	; 0x2900
 8009e06:	f101 0104 	add.w	r1, r1, #4
 8009e0a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8009e0e:	381c      	subs	r0, #28
 8009e10:	2200      	movs	r2, #0
 8009e12:	9202      	str	r2, [sp, #8]
 8009e14:	f507 5226 	add.w	r2, r7, #10624	; 0x2980
 8009e18:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8009e1c:	9201      	str	r2, [sp, #4]
 8009e1e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009e22:	9200      	str	r2, [sp, #0]
 8009e24:	460a      	mov	r2, r1
 8009e26:	f507 5146 	add.w	r1, r7, #12672	; 0x3180
 8009e2a:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8009e2e:	6809      	ldr	r1, [r1, #0]
 8009e30:	f003 fe74 	bl	800db1c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
  interpreter.AllocateTensors();
 8009e34:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009e38:	3b1c      	subs	r3, #28
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f003 ff08 	bl	800dc50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
  TfLiteTensor* input = interpreter.input(0);
 8009e40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009e44:	3b1c      	subs	r3, #28
 8009e46:	2100      	movs	r1, #0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f004 f8d1 	bl	800dff0 <_ZN6tflite16MicroInterpreter5inputEj>
 8009e4e:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8009e52:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8009e56:	6018      	str	r0, [r3, #0]
                                                   feature_buffer);
 8009e58:	4b6e      	ldr	r3, [pc, #440]	; (800a014 <main+0x324>)
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	f3bf 8f5b 	dmb	ish
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	bf0c      	ite	eq
 8009e6a:	2301      	moveq	r3, #1
 8009e6c:	2300      	movne	r3, #0
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d01a      	beq.n	8009eaa <main+0x1ba>
 8009e74:	4867      	ldr	r0, [pc, #412]	; (800a014 <main+0x324>)
 8009e76:	f00c fcc5 	bl	8016804 <__cxa_guard_acquire>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bf14      	ite	ne
 8009e80:	2301      	movne	r3, #1
 8009e82:	2300      	moveq	r3, #0
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00f      	beq.n	8009eaa <main+0x1ba>
 8009e8a:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 8009e8e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8009e92:	461a      	mov	r2, r3
 8009e94:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8009e98:	485f      	ldr	r0, [pc, #380]	; (800a018 <main+0x328>)
 8009e9a:	f7f9 f8c0 	bl	800301e <_ZN15FeatureProviderC1EiPa>
 8009e9e:	485d      	ldr	r0, [pc, #372]	; (800a014 <main+0x324>)
 8009ea0:	f00c fcbc 	bl	801681c <__cxa_guard_release>
 8009ea4:	485d      	ldr	r0, [pc, #372]	; (800a01c <main+0x32c>)
 8009ea6:	f00e ff5b 	bl	8018d60 <atexit>
  feature_provider = &static_feature_provider;
 8009eaa:	4b5b      	ldr	r3, [pc, #364]	; (800a018 <main+0x328>)
 8009eac:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8009eb0:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   float convF;
   uint32_t converted;
   HAL_TIM_Base_Start (&htim1);
 8009eb2:	485b      	ldr	r0, [pc, #364]	; (800a020 <main+0x330>)
 8009eb4:	f00b fdce 	bl	8015a54 <HAL_TIM_Base_Start>
   volatile int bit;
	__HAL_TIM_ENABLE_IT(&htim1,TIM_IT_CC1);
 8009eb8:	4b59      	ldr	r3, [pc, #356]	; (800a020 <main+0x330>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	4b58      	ldr	r3, [pc, #352]	; (800a020 <main+0x330>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0202 	orr.w	r2, r2, #2
 8009ec6:	60da      	str	r2, [r3, #12]
	int32_t previous_time = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 8009ece:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8009ed2:	6013      	str	r3, [r2, #0]
   	while(1){
   		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5))
 8009ed4:	2120      	movs	r1, #32
 8009ed6:	4853      	ldr	r0, [pc, #332]	; (800a024 <main+0x334>)
 8009ed8:	f00a fbc2 	bl	8014660 <HAL_GPIO_ReadPin>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bf14      	ite	ne
 8009ee2:	2301      	movne	r3, #1
 8009ee4:	2300      	moveq	r3, #0
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d005      	beq.n	8009ef8 <main+0x208>
   			bit =0;
 8009eec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009ef0:	3b20      	subs	r3, #32
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	e010      	b.n	8009f1a <main+0x22a>
   		else
   		{
   			bit =1;
 8009ef8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009efc:	3b20      	subs	r3, #32
 8009efe:	2201      	movs	r2, #1
 8009f00:	601a      	str	r2, [r3, #0]
   			if(flag == false)
 8009f02:	4b49      	ldr	r3, [pc, #292]	; (800a028 <main+0x338>)
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	f083 0301 	eor.w	r3, r3, #1
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <main+0x224>
   				readSamples();
 8009f10:	f7ff fe5a 	bl	8009bc8 <_Z11readSamplesv>
   			flag = true;
 8009f14:	4b44      	ldr	r3, [pc, #272]	; (800a028 <main+0x338>)
 8009f16:	2201      	movs	r2, #1
 8009f18:	701a      	strb	r2, [r3, #0]
   		}



   		if(bit){
 8009f1a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009f1e:	3b20      	subs	r3, #32
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	bf14      	ite	ne
 8009f26:	2301      	movne	r3, #1
 8009f28:	2300      	moveq	r3, #0
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0d1      	beq.n	8009ed4 <main+0x1e4>

   			HAL_UART_Transmit(&huart2,(uint8_t *)"DONE!\r\n", 7, 100);
 8009f30:	2364      	movs	r3, #100	; 0x64
 8009f32:	2207      	movs	r2, #7
 8009f34:	493d      	ldr	r1, [pc, #244]	; (800a02c <main+0x33c>)
 8009f36:	483e      	ldr	r0, [pc, #248]	; (800a030 <main+0x340>)
 8009f38:	f00c f844 	bl	8015fc4 <HAL_UART_Transmit>
   			const int32_t current_time = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 8009f42:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8009f46:	6013      	str	r3, [r2, #0]
   			int how_many_new_slices = 0;
 8009f48:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009f4c:	3b24      	subs	r3, #36	; 0x24
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]
   			feature_provider->PopulateFeatureData(
 8009f52:	4b38      	ldr	r3, [pc, #224]	; (800a034 <main+0x344>)
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009f5a:	3b24      	subs	r3, #36	; 0x24
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 8009f64:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8009f68:	6812      	ldr	r2, [r2, #0]
 8009f6a:	f507 5146 	add.w	r1, r7, #12672	; 0x3180
 8009f6e:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8009f72:	6809      	ldr	r1, [r1, #0]
 8009f74:	f507 5047 	add.w	r0, r7, #12736	; 0x31c0
 8009f78:	6800      	ldr	r0, [r0, #0]
 8009f7a:	f7f9 f883 	bl	8003084 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEllPiPs>
   			      error_reporter, previous_time, current_time, &how_many_new_slices, samples);
   			HAL_UART_Transmit(&huart2,(uint8_t *)"BONE!\r\n", 7, 100);
 8009f7e:	2364      	movs	r3, #100	; 0x64
 8009f80:	2207      	movs	r2, #7
 8009f82:	492d      	ldr	r1, [pc, #180]	; (800a038 <main+0x348>)
 8009f84:	482a      	ldr	r0, [pc, #168]	; (800a030 <main+0x340>)
 8009f86:	f00c f81d 	bl	8015fc4 <HAL_UART_Transmit>
   			// Copy a spectrogram created from a .wav audio file of someone saying "Yes",
   			  // into the memory area used for the input.
   			  const int8_t* yes_features_data = g_yes_micro_f2e59fea_nohash_1_data;
 8009f8a:	4b2c      	ldr	r3, [pc, #176]	; (800a03c <main+0x34c>)
 8009f8c:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 8009f90:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8009f94:	6013      	str	r3, [r2, #0]
   			  for (size_t i = 0; i < input->bytes; ++i) {
 8009f96:	2300      	movs	r3, #0
 8009f98:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8009f9c:	f102 0204 	add.w	r2, r2, #4
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8009fa6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8009fb2:	f102 0204 	add.w	r2, r2, #4
 8009fb6:	6812      	ldr	r2, [r2, #0]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d241      	bcs.n	800a040 <main+0x350>
   				  input->data.int8[i] = feature_buffer[i];
 8009fbc:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 8009fc0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8009fcc:	f103 0304 	add.w	r3, r3, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f507 5126 	add.w	r1, r7, #10624	; 0x2980
 8009fd8:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 8009fdc:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8009fe0:	f102 0204 	add.w	r2, r2, #4
 8009fe4:	6812      	ldr	r2, [r2, #0]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f992 2000 	ldrsb.w	r2, [r2]
 8009fec:	701a      	strb	r2, [r3, #0]
   			  for (size_t i = 0; i < input->bytes; ++i) {
 8009fee:	f507 5347 	add.w	r3, r7, #12736	; 0x31c0
 8009ff2:	f103 0304 	add.w	r3, r3, #4
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	f507 5247 	add.w	r2, r7, #12736	; 0x31c0
 8009ffe:	f102 0204 	add.w	r2, r2, #4
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	e7cd      	b.n	8009fa2 <main+0x2b2>
 800a006:	bf00      	nop
 800a008:	0801fc5c 	.word	0x0801fc5c
 800a00c:	0801fc68 	.word	0x0801fc68
 800a010:	0801ca34 	.word	0x0801ca34
 800a014:	200084b8 	.word	0x200084b8
 800a018:	200084ac 	.word	0x200084ac
 800a01c:	08009ce1 	.word	0x08009ce1
 800a020:	2000068c 	.word	0x2000068c
 800a024:	48000400 	.word	0x48000400
 800a028:	200007a8 	.word	0x200007a8
 800a02c:	0801ca7c 	.word	0x0801ca7c
 800a030:	20000724 	.word	0x20000724
 800a034:	200007ac 	.word	0x200007ac
 800a038:	0801ca84 	.word	0x0801ca84
 800a03c:	080265f4 	.word	0x080265f4
   			  }

   			  // Run the model on this input and make sure it succeeds.
   			  TfLiteStatus invoke_status = interpreter.Invoke();
 800a040:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a044:	3b1c      	subs	r3, #28
 800a046:	4618      	mov	r0, r3
 800a048:	f003 ff34 	bl	800deb4 <_ZN6tflite16MicroInterpreter6InvokeEv>
 800a04c:	4603      	mov	r3, r0
 800a04e:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 800a052:	f102 0223 	add.w	r2, r2, #35	; 0x23
 800a056:	7013      	strb	r3, [r2, #0]
   			  if (invoke_status != kTfLiteOk)
 800a058:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800a05c:	f103 0323 	add.w	r3, r3, #35	; 0x23
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d007      	beq.n	800a076 <main+0x386>
   			  {
   				  TF_LITE_REPORT_ERROR(&micro_error_reporter, "Invoke failed\n");
 800a066:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 800a06a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800a06e:	497b      	ldr	r1, [pc, #492]	; (800a25c <main+0x56c>)
 800a070:	4618      	mov	r0, r3
 800a072:	f7f8 ffa1 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   			  }

   			  // Get the output from the model, and make sure it's the expected size and
   			  // type.
   			  TfLiteTensor* output = interpreter.output(0);
 800a076:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a07a:	3b1c      	subs	r3, #28
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f004 f81c 	bl	800e0bc <_ZN6tflite16MicroInterpreter6outputEj>
 800a084:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800a088:	f103 031c 	add.w	r3, r3, #28
 800a08c:	6018      	str	r0, [r3, #0]

   			  // There are four possible classes in the output, each with a score.
   			  const int kSilenceIndex = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 800a094:	f102 0218 	add.w	r2, r2, #24
 800a098:	6013      	str	r3, [r2, #0]
   			  const int kUnknownIndex = 1;
 800a09a:	2301      	movs	r3, #1
 800a09c:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 800a0a0:	f102 0214 	add.w	r2, r2, #20
 800a0a4:	6013      	str	r3, [r2, #0]
   			  const int kGoIndex = 2;
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 800a0ac:	f102 0210 	add.w	r2, r2, #16
 800a0b0:	6013      	str	r3, [r2, #0]
   			  const int kStopIndex = 3;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 800a0b8:	f102 020c 	add.w	r2, r2, #12
 800a0bc:	6013      	str	r3, [r2, #0]
   			  const int kRightIndex = 4;
 800a0be:	2304      	movs	r3, #4
 800a0c0:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 800a0c4:	f102 0208 	add.w	r2, r2, #8
 800a0c8:	6013      	str	r3, [r2, #0]
   			  const int kLeftIndex = 5;
 800a0ca:	2305      	movs	r3, #5
 800a0cc:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 800a0d0:	f102 0204 	add.w	r2, r2, #4
 800a0d4:	6013      	str	r3, [r2, #0]
   			  const int kYesIndex = 2;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	f507 5246 	add.w	r2, r7, #12672	; 0x3180
 800a0dc:	6013      	str	r3, [r2, #0]
   			  const int kNoIndex = 3;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800a0e4:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800a0e8:	6013      	str	r3, [r2, #0]

   			  // Make sure that the expected "Yes" score is higher than the other classes.
   			  uint8_t silence_score = output->data.uint8[kSilenceIndex] + 128;
 800a0ea:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800a0ee:	f103 031c 	add.w	r3, r3, #28
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	3b80      	subs	r3, #128	; 0x80
 800a0fa:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800a0fe:	f102 023b 	add.w	r2, r2, #59	; 0x3b
 800a102:	7013      	strb	r3, [r2, #0]
   			  uint8_t unknown_score = output->data.uint8[kUnknownIndex] + 128;
 800a104:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800a108:	f103 031c 	add.w	r3, r3, #28
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	3301      	adds	r3, #1
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	3b80      	subs	r3, #128	; 0x80
 800a116:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800a11a:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 800a11e:	7013      	strb	r3, [r2, #0]
   			  uint8_t go_score = output->data.int8[kGoIndex] + 128;
 800a120:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800a124:	f103 031c 	add.w	r3, r3, #28
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	3302      	adds	r3, #2
 800a12e:	f993 3000 	ldrsb.w	r3, [r3]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	3b80      	subs	r3, #128	; 0x80
 800a136:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800a13a:	f102 0239 	add.w	r2, r2, #57	; 0x39
 800a13e:	7013      	strb	r3, [r2, #0]
   			  uint8_t stop_score = output->data.int8[kStopIndex] + 128;
 800a140:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800a144:	f103 031c 	add.w	r3, r3, #28
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	3303      	adds	r3, #3
 800a14e:	f993 3000 	ldrsb.w	r3, [r3]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	3b80      	subs	r3, #128	; 0x80
 800a156:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800a15a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800a15e:	7013      	strb	r3, [r2, #0]
   			  uint8_t right_score = output->data.int8[kRightIndex] + 128;
 800a160:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800a164:	f103 031c 	add.w	r3, r3, #28
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	3304      	adds	r3, #4
 800a16e:	f993 3000 	ldrsb.w	r3, [r3]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	3b80      	subs	r3, #128	; 0x80
 800a176:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800a17a:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800a17e:	7013      	strb	r3, [r2, #0]
   			  uint8_t left_score = output->data.int8[kLeftIndex] + 128;
 800a180:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800a184:	f103 031c 	add.w	r3, r3, #28
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	3305      	adds	r3, #5
 800a18e:	f993 3000 	ldrsb.w	r3, [r3]
 800a192:	b2db      	uxtb	r3, r3
 800a194:	3b80      	subs	r3, #128	; 0x80
 800a196:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800a19a:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800a19e:	7013      	strb	r3, [r2, #0]


   			uint8_t yes_score = output->data.int8[kYesIndex] + 128;
 800a1a0:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800a1a4:	f103 031c 	add.w	r3, r3, #28
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	3302      	adds	r3, #2
 800a1ae:	f993 3000 	ldrsb.w	r3, [r3]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	3b80      	subs	r3, #128	; 0x80
 800a1b6:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800a1ba:	f102 0235 	add.w	r2, r2, #53	; 0x35
 800a1be:	7013      	strb	r3, [r2, #0]
   			uint8_t no_score = output->data.int8[kNoIndex] + 128;
 800a1c0:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800a1c4:	f103 031c 	add.w	r3, r3, #28
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	3303      	adds	r3, #3
 800a1ce:	f993 3000 	ldrsb.w	r3, [r3]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	3b80      	subs	r3, #128	; 0x80
 800a1d6:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800a1da:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800a1de:	7013      	strb	r3, [r2, #0]

   			  char buf2[100]="";
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	3b08      	subs	r3, #8
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	2260      	movs	r2, #96	; 0x60
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f00e ff0b 	bl	801900c <memset>

   			  sprintf(buf2, "Silence %d | Unknown %d | Go %d | Stop %d | Right %d | Left %d \r\n",
 800a1f6:	f507 5345 	add.w	r3, r7, #12608	; 0x3140
 800a1fa:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 800a1fe:	781d      	ldrb	r5, [r3, #0]
 800a200:	f507 5345 	add.w	r3, r7, #12608	; 0x3140
 800a204:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 800a208:	781e      	ldrb	r6, [r3, #0]
 800a20a:	f507 5345 	add.w	r3, r7, #12608	; 0x3140
 800a20e:	f103 0339 	add.w	r3, r3, #57	; 0x39
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	f507 5245 	add.w	r2, r7, #12608	; 0x3140
 800a218:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800a21c:	7812      	ldrb	r2, [r2, #0]
 800a21e:	f507 5145 	add.w	r1, r7, #12608	; 0x3140
 800a222:	f101 0137 	add.w	r1, r1, #55	; 0x37
 800a226:	7809      	ldrb	r1, [r1, #0]
 800a228:	f507 5045 	add.w	r0, r7, #12608	; 0x3140
 800a22c:	f100 0036 	add.w	r0, r0, #54	; 0x36
 800a230:	7804      	ldrb	r4, [r0, #0]
 800a232:	f107 0008 	add.w	r0, r7, #8
 800a236:	3808      	subs	r0, #8
 800a238:	9403      	str	r4, [sp, #12]
 800a23a:	9102      	str	r1, [sp, #8]
 800a23c:	9201      	str	r2, [sp, #4]
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	4633      	mov	r3, r6
 800a242:	462a      	mov	r2, r5
 800a244:	4906      	ldr	r1, [pc, #24]	; (800a260 <main+0x570>)
 800a246:	f00f fdc5 	bl	8019dd4 <siprintf>
   			  		  silence_score,unknown_score,go_score,stop_score,right_score,left_score);

   			/*sprintf(buf2, "Silence %d | Unknown %d | Yes %d | No %d \r\n",
   			 		  silence_score,unknown_score,yes_score,no_score);*/
   			  HAL_UART_Transmit(&huart2, (uint8_t *)buf2, sizeof(buf2), 100);
 800a24a:	f107 0108 	add.w	r1, r7, #8
 800a24e:	3908      	subs	r1, #8
 800a250:	2364      	movs	r3, #100	; 0x64
 800a252:	2264      	movs	r2, #100	; 0x64
 800a254:	4803      	ldr	r0, [pc, #12]	; (800a264 <main+0x574>)
 800a256:	f00b feb5 	bl	8015fc4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(uint8_t *)&message, 22, 100);
   			}*/
   		}

   		//readSamples();
   	}
 800a25a:	e63b      	b.n	8009ed4 <main+0x1e4>
 800a25c:	0801ca8c 	.word	0x0801ca8c
 800a260:	0801ca9c 	.word	0x0801ca9c
 800a264:	20000724 	.word	0x20000724

0800a268 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b0ac      	sub	sp, #176	; 0xb0
 800a26c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a26e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a272:	2244      	movs	r2, #68	; 0x44
 800a274:	2100      	movs	r1, #0
 800a276:	4618      	mov	r0, r3
 800a278:	f00e fec8 	bl	801900c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a27c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a280:	2200      	movs	r2, #0
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	605a      	str	r2, [r3, #4]
 800a286:	609a      	str	r2, [r3, #8]
 800a288:	60da      	str	r2, [r3, #12]
 800a28a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a28c:	1d3b      	adds	r3, r7, #4
 800a28e:	2254      	movs	r2, #84	; 0x54
 800a290:	2100      	movs	r1, #0
 800a292:	4618      	mov	r0, r3
 800a294:	f00e feba 	bl	801900c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800a298:	f00a f9fa 	bl	8014690 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800a29c:	4b3e      	ldr	r3, [pc, #248]	; (800a398 <_Z18SystemClock_Configv+0x130>)
 800a29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2a2:	4a3d      	ldr	r2, [pc, #244]	; (800a398 <_Z18SystemClock_Configv+0x130>)
 800a2a4:	f023 0318 	bic.w	r3, r3, #24
 800a2a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800a2ac:	2314      	movs	r3, #20
 800a2ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a2c0:	2360      	movs	r3, #96	; 0x60
 800a2c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800a2d8:	2328      	movs	r3, #40	; 0x28
 800a2da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800a2de:	2307      	movs	r3, #7
 800a2e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a2f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f00a fa3f 	bl	8014778 <HAL_RCC_OscConfig>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	bf14      	ite	ne
 800a300:	2301      	movne	r3, #1
 800a302:	2300      	moveq	r3, #0
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800a30a:	f000 f9e3 	bl	800a6d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a30e:	230f      	movs	r3, #15
 800a310:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a312:	2303      	movs	r3, #3
 800a314:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a316:	2300      	movs	r3, #0
 800a318:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a31a:	2300      	movs	r3, #0
 800a31c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a31e:	2300      	movs	r3, #0
 800a320:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a322:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a326:	2104      	movs	r1, #4
 800a328:	4618      	mov	r0, r3
 800a32a:	f00a fe45 	bl	8014fb8 <HAL_RCC_ClockConfig>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	bf14      	ite	ne
 800a334:	2301      	movne	r3, #1
 800a336:	2300      	moveq	r3, #0
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800a33e:	f000 f9c9 	bl	800a6d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800a342:	f244 0302 	movw	r3, #16386	; 0x4002
 800a346:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a348:	2300      	movs	r3, #0
 800a34a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800a34c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800a350:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a352:	1d3b      	adds	r3, r7, #4
 800a354:	4618      	mov	r0, r3
 800a356:	f00b f833 	bl	80153c0 <HAL_RCCEx_PeriphCLKConfig>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	bf14      	ite	ne
 800a360:	2301      	movne	r3, #1
 800a362:	2300      	moveq	r3, #0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <_Z18SystemClock_Configv+0x106>
  {
    Error_Handler();
 800a36a:	f000 f9b3 	bl	800a6d4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a36e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a372:	f00a f9ab 	bl	80146cc <HAL_PWREx_ControlVoltageScaling>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	bf14      	ite	ne
 800a37c:	2301      	movne	r3, #1
 800a37e:	2300      	moveq	r3, #0
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <_Z18SystemClock_Configv+0x122>
  {
    Error_Handler();
 800a386:	f000 f9a5 	bl	800a6d4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800a38a:	f00b fa0b 	bl	80157a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800a38e:	bf00      	nop
 800a390:	37b0      	adds	r7, #176	; 0xb0
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	40021000 	.word	0x40021000

0800a39c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a3a2:	463b      	mov	r3, r7
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	605a      	str	r2, [r3, #4]
 800a3aa:	609a      	str	r2, [r3, #8]
 800a3ac:	60da      	str	r2, [r3, #12]
 800a3ae:	611a      	str	r2, [r3, #16]
 800a3b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800a3b2:	4b2e      	ldr	r3, [pc, #184]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3b4:	4a2e      	ldr	r2, [pc, #184]	; (800a470 <_ZL12MX_ADC1_Initv+0xd4>)
 800a3b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a3b8:	4b2c      	ldr	r3, [pc, #176]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a3be:	4b2b      	ldr	r3, [pc, #172]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a3c4:	4b29      	ldr	r3, [pc, #164]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a3ca:	4b28      	ldr	r3, [pc, #160]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a3d0:	4b26      	ldr	r3, [pc, #152]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3d2:	2204      	movs	r2, #4
 800a3d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a3d6:	4b25      	ldr	r3, [pc, #148]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a3dc:	4b23      	ldr	r3, [pc, #140]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800a3e2:	4b22      	ldr	r3, [pc, #136]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a3e8:	4b20      	ldr	r3, [pc, #128]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a3f0:	4b1e      	ldr	r3, [pc, #120]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a3f6:	4b1d      	ldr	r3, [pc, #116]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a3fc:	4b1b      	ldr	r3, [pc, #108]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a404:	4b19      	ldr	r3, [pc, #100]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a406:	2200      	movs	r2, #0
 800a408:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800a40a:	4b18      	ldr	r3, [pc, #96]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a412:	4816      	ldr	r0, [pc, #88]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a414:	f008 ff74 	bl	8013300 <HAL_ADC_Init>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bf14      	ite	ne
 800a41e:	2301      	movne	r3, #1
 800a420:	2300      	moveq	r3, #0
 800a422:	b2db      	uxtb	r3, r3
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <_ZL12MX_ADC1_Initv+0x90>
  {
    Error_Handler();
 800a428:	f000 f954 	bl	800a6d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800a42c:	4b11      	ldr	r3, [pc, #68]	; (800a474 <_ZL12MX_ADC1_Initv+0xd8>)
 800a42e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a430:	2306      	movs	r3, #6
 800a432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800a434:	2300      	movs	r3, #0
 800a436:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a438:	237f      	movs	r3, #127	; 0x7f
 800a43a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a43c:	2304      	movs	r3, #4
 800a43e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800a440:	2300      	movs	r3, #0
 800a442:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a444:	463b      	mov	r3, r7
 800a446:	4619      	mov	r1, r3
 800a448:	4808      	ldr	r0, [pc, #32]	; (800a46c <_ZL12MX_ADC1_Initv+0xd0>)
 800a44a:	f009 f997 	bl	801377c <HAL_ADC_ConfigChannel>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	bf14      	ite	ne
 800a454:	2301      	movne	r3, #1
 800a456:	2300      	moveq	r3, #0
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 800a45e:	f000 f939 	bl	800a6d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a462:	bf00      	nop
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20000604 	.word	0x20000604
 800a470:	50040000 	.word	0x50040000
 800a474:	32601000 	.word	0x32601000

0800a478 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a47c:	4b10      	ldr	r3, [pc, #64]	; (800a4c0 <_ZL11MX_CRC_Initv+0x48>)
 800a47e:	4a11      	ldr	r2, [pc, #68]	; (800a4c4 <_ZL11MX_CRC_Initv+0x4c>)
 800a480:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a482:	4b0f      	ldr	r3, [pc, #60]	; (800a4c0 <_ZL11MX_CRC_Initv+0x48>)
 800a484:	2200      	movs	r2, #0
 800a486:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800a488:	4b0d      	ldr	r3, [pc, #52]	; (800a4c0 <_ZL11MX_CRC_Initv+0x48>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800a48e:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <_ZL11MX_CRC_Initv+0x48>)
 800a490:	2200      	movs	r2, #0
 800a492:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800a494:	4b0a      	ldr	r3, [pc, #40]	; (800a4c0 <_ZL11MX_CRC_Initv+0x48>)
 800a496:	2200      	movs	r2, #0
 800a498:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800a49a:	4b09      	ldr	r3, [pc, #36]	; (800a4c0 <_ZL11MX_CRC_Initv+0x48>)
 800a49c:	2201      	movs	r2, #1
 800a49e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a4a0:	4807      	ldr	r0, [pc, #28]	; (800a4c0 <_ZL11MX_CRC_Initv+0x48>)
 800a4a2:	f009 fe89 	bl	80141b8 <HAL_CRC_Init>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	bf14      	ite	ne
 800a4ac:	2301      	movne	r3, #1
 800a4ae:	2300      	moveq	r3, #0
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 800a4b6:	f000 f90d 	bl	800a6d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800a4ba:	bf00      	nop
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000668 	.word	0x20000668
 800a4c4:	40023000 	.word	0x40023000

0800a4c8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b088      	sub	sp, #32
 800a4cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a4ce:	f107 0310 	add.w	r3, r7, #16
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	605a      	str	r2, [r3, #4]
 800a4d8:	609a      	str	r2, [r3, #8]
 800a4da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a4dc:	1d3b      	adds	r3, r7, #4
 800a4de:	2200      	movs	r2, #0
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	605a      	str	r2, [r3, #4]
 800a4e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a4e6:	4b27      	ldr	r3, [pc, #156]	; (800a584 <_ZL12MX_TIM1_Initv+0xbc>)
 800a4e8:	4a27      	ldr	r2, [pc, #156]	; (800a588 <_ZL12MX_TIM1_Initv+0xc0>)
 800a4ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 499;
 800a4ec:	4b25      	ldr	r3, [pc, #148]	; (800a584 <_ZL12MX_TIM1_Initv+0xbc>)
 800a4ee:	f240 12f3 	movw	r2, #499	; 0x1f3
 800a4f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4f4:	4b23      	ldr	r3, [pc, #140]	; (800a584 <_ZL12MX_TIM1_Initv+0xbc>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19;
 800a4fa:	4b22      	ldr	r3, [pc, #136]	; (800a584 <_ZL12MX_TIM1_Initv+0xbc>)
 800a4fc:	2213      	movs	r2, #19
 800a4fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a500:	4b20      	ldr	r3, [pc, #128]	; (800a584 <_ZL12MX_TIM1_Initv+0xbc>)
 800a502:	2200      	movs	r2, #0
 800a504:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a506:	4b1f      	ldr	r3, [pc, #124]	; (800a584 <_ZL12MX_TIM1_Initv+0xbc>)
 800a508:	2200      	movs	r2, #0
 800a50a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a50c:	4b1d      	ldr	r3, [pc, #116]	; (800a584 <_ZL12MX_TIM1_Initv+0xbc>)
 800a50e:	2200      	movs	r2, #0
 800a510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a512:	481c      	ldr	r0, [pc, #112]	; (800a584 <_ZL12MX_TIM1_Initv+0xbc>)
 800a514:	f00b fa46 	bl	80159a4 <HAL_TIM_Base_Init>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	bf14      	ite	ne
 800a51e:	2301      	movne	r3, #1
 800a520:	2300      	moveq	r3, #0
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 800a528:	f000 f8d4 	bl	800a6d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a52c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a530:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a532:	f107 0310 	add.w	r3, r7, #16
 800a536:	4619      	mov	r1, r3
 800a538:	4812      	ldr	r0, [pc, #72]	; (800a584 <_ZL12MX_TIM1_Initv+0xbc>)
 800a53a:	f00b fad7 	bl	8015aec <HAL_TIM_ConfigClockSource>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	bf14      	ite	ne
 800a544:	2301      	movne	r3, #1
 800a546:	2300      	moveq	r3, #0
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800a54e:	f000 f8c1 	bl	800a6d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a552:	2300      	movs	r3, #0
 800a554:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a556:	2300      	movs	r3, #0
 800a558:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a55a:	2300      	movs	r3, #0
 800a55c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a55e:	1d3b      	adds	r3, r7, #4
 800a560:	4619      	mov	r1, r3
 800a562:	4808      	ldr	r0, [pc, #32]	; (800a584 <_ZL12MX_TIM1_Initv+0xbc>)
 800a564:	f00b fc7a 	bl	8015e5c <HAL_TIMEx_MasterConfigSynchronization>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	bf14      	ite	ne
 800a56e:	2301      	movne	r3, #1
 800a570:	2300      	moveq	r3, #0
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 800a578:	f000 f8ac 	bl	800a6d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a57c:	bf00      	nop
 800a57e:	3720      	adds	r7, #32
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	2000068c 	.word	0x2000068c
 800a588:	40012c00 	.word	0x40012c00

0800a58c <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800a590:	4b12      	ldr	r3, [pc, #72]	; (800a5dc <_ZL13MX_TIM16_Initv+0x50>)
 800a592:	4a13      	ldr	r2, [pc, #76]	; (800a5e0 <_ZL13MX_TIM16_Initv+0x54>)
 800a594:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 800a596:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <_ZL13MX_TIM16_Initv+0x50>)
 800a598:	224f      	movs	r2, #79	; 0x4f
 800a59a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <_ZL13MX_TIM16_Initv+0x50>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800a5a2:	4b0e      	ldr	r3, [pc, #56]	; (800a5dc <_ZL13MX_TIM16_Initv+0x50>)
 800a5a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5a8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a5aa:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <_ZL13MX_TIM16_Initv+0x50>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	; (800a5dc <_ZL13MX_TIM16_Initv+0x50>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a5b6:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <_ZL13MX_TIM16_Initv+0x50>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800a5bc:	4807      	ldr	r0, [pc, #28]	; (800a5dc <_ZL13MX_TIM16_Initv+0x50>)
 800a5be:	f00b f9f1 	bl	80159a4 <HAL_TIM_Base_Init>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	bf14      	ite	ne
 800a5c8:	2301      	movne	r3, #1
 800a5ca:	2300      	moveq	r3, #0
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 800a5d2:	f000 f87f 	bl	800a6d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800a5d6:	bf00      	nop
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	200006d8 	.word	0x200006d8
 800a5e0:	40014400 	.word	0x40014400

0800a5e4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a5e8:	4b16      	ldr	r3, [pc, #88]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a5ea:	4a17      	ldr	r2, [pc, #92]	; (800a648 <_ZL19MX_USART2_UART_Initv+0x64>)
 800a5ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a5ee:	4b15      	ldr	r3, [pc, #84]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a5f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a5f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a5f6:	4b13      	ldr	r3, [pc, #76]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a5fc:	4b11      	ldr	r3, [pc, #68]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a602:	4b10      	ldr	r3, [pc, #64]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a604:	2200      	movs	r2, #0
 800a606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a608:	4b0e      	ldr	r3, [pc, #56]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a60a:	220c      	movs	r2, #12
 800a60c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a60e:	4b0d      	ldr	r3, [pc, #52]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a610:	2200      	movs	r2, #0
 800a612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a614:	4b0b      	ldr	r3, [pc, #44]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a616:	2200      	movs	r2, #0
 800a618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a61a:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a620:	4b08      	ldr	r3, [pc, #32]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a622:	2200      	movs	r2, #0
 800a624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a626:	4807      	ldr	r0, [pc, #28]	; (800a644 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a628:	f00b fc7e 	bl	8015f28 <HAL_UART_Init>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	bf14      	ite	ne
 800a632:	2301      	movne	r3, #1
 800a634:	2300      	moveq	r3, #0
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 800a63c:	f000 f84a 	bl	800a6d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a640:	bf00      	nop
 800a642:	bd80      	pop	{r7, pc}
 800a644:	20000724 	.word	0x20000724
 800a648:	40004400 	.word	0x40004400

0800a64c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a652:	f107 030c 	add.w	r3, r7, #12
 800a656:	2200      	movs	r2, #0
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	605a      	str	r2, [r3, #4]
 800a65c:	609a      	str	r2, [r3, #8]
 800a65e:	60da      	str	r2, [r3, #12]
 800a660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a662:	4b1a      	ldr	r3, [pc, #104]	; (800a6cc <_ZL12MX_GPIO_Initv+0x80>)
 800a664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a666:	4a19      	ldr	r2, [pc, #100]	; (800a6cc <_ZL12MX_GPIO_Initv+0x80>)
 800a668:	f043 0304 	orr.w	r3, r3, #4
 800a66c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a66e:	4b17      	ldr	r3, [pc, #92]	; (800a6cc <_ZL12MX_GPIO_Initv+0x80>)
 800a670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a672:	f003 0304 	and.w	r3, r3, #4
 800a676:	60bb      	str	r3, [r7, #8]
 800a678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a67a:	4b14      	ldr	r3, [pc, #80]	; (800a6cc <_ZL12MX_GPIO_Initv+0x80>)
 800a67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a67e:	4a13      	ldr	r2, [pc, #76]	; (800a6cc <_ZL12MX_GPIO_Initv+0x80>)
 800a680:	f043 0301 	orr.w	r3, r3, #1
 800a684:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a686:	4b11      	ldr	r3, [pc, #68]	; (800a6cc <_ZL12MX_GPIO_Initv+0x80>)
 800a688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	607b      	str	r3, [r7, #4]
 800a690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a692:	4b0e      	ldr	r3, [pc, #56]	; (800a6cc <_ZL12MX_GPIO_Initv+0x80>)
 800a694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a696:	4a0d      	ldr	r2, [pc, #52]	; (800a6cc <_ZL12MX_GPIO_Initv+0x80>)
 800a698:	f043 0302 	orr.w	r3, r3, #2
 800a69c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a69e:	4b0b      	ldr	r3, [pc, #44]	; (800a6cc <_ZL12MX_GPIO_Initv+0x80>)
 800a6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	603b      	str	r3, [r7, #0]
 800a6a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a6aa:	2320      	movs	r3, #32
 800a6ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6b6:	f107 030c 	add.w	r3, r7, #12
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4804      	ldr	r0, [pc, #16]	; (800a6d0 <_ZL12MX_GPIO_Initv+0x84>)
 800a6be:	f009 fe65 	bl	801438c <HAL_GPIO_Init>

}
 800a6c2:	bf00      	nop
 800a6c4:	3720      	adds	r7, #32
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	40021000 	.word	0x40021000
 800a6d0:	48000400 	.word	0x48000400

0800a6d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a6d8:	bf00      	nop
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b086      	sub	sp, #24
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	607a      	str	r2, [r7, #4]
 800a6ee:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800a6f0:	897b      	ldrh	r3, [r7, #10]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f7f9 fcbb 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800a6fe:	8afb      	ldrh	r3, [r7, #22]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d007      	beq.n	800a714 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	8afb      	ldrh	r3, [r7, #22]
 800a708:	4413      	add	r3, r2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fa f9a3 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a710:	4603      	mov	r3, r0
 800a712:	e000      	b.n	800a716 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 800a714:	687b      	ldr	r3, [r7, #4]
  }
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f8ae 	bl	800a888 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 800a72c:	4603      	mov	r3, r0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800a736:	b580      	push	{r7, lr}
 800a738:	b082      	sub	sp, #8
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4618      	mov	r0, r3
 800a742:	f000 f8b3 	bl	800a8ac <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	4a04      	ldr	r2, [pc, #16]	; (800a76c <_ZN6tflite10OpResolverC1Ev+0x1c>)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4618      	mov	r0, r3
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	0801f1e4 	.word	0x0801f1e4

0800a770 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7ff ffe8 	bl	800a750 <_ZN6tflite10OpResolverC1Ev>
 800a780:	4a03      	ldr	r2, [pc, #12]	; (800a790 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4618      	mov	r0, r3
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	0801f1bc 	.word	0x0801f1bc

0800a794 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7ff ffe5 	bl	800a770 <_ZN6tflite15MicroOpResolverC1Ev>
 800a7a6:	4a0a      	ldr	r2, [pc, #40]	; (800a7d0 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE+0x3c>)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	0801f194 	.word	0x0801f194

0800a7d4 <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv>:
  TfLiteStatus AddDepthwiseConv2D() {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	; 0x28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
 800a7dc:	f107 0308 	add.w	r3, r7, #8
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7f8 f815 	bl	8002810 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 800a7e6:	f107 0208 	add.w	r2, r7, #8
 800a7ea:	4b05      	ldr	r3, [pc, #20]	; (800a800 <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv+0x2c>)
 800a7ec:	2104      	movs	r1, #4
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f86a 	bl	800a8c8 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a7f4:	4603      	mov	r3, r0
  }
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3728      	adds	r7, #40	; 0x28
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	080045cd 	.word	0x080045cd

0800a804 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration>:
  TfLiteStatus AddFullyConnected(
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
                      ParseFullyConnected);
 800a80e:	4b05      	ldr	r3, [pc, #20]	; (800a824 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration+0x20>)
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	2109      	movs	r1, #9
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f857 	bl	800a8c8 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a81a:	4603      	mov	r3, r0
  }
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	08004725 	.word	0x08004725

0800a828 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6,
                      tflite::ops::micro::Register_RELU6(), ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08a      	sub	sp, #40	; 0x28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 800a830:	f107 0308 	add.w	r3, r7, #8
 800a834:	4618      	mov	r0, r3
 800a836:	f004 ff7b 	bl	800f730 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 800a83a:	f107 0208 	add.w	r2, r7, #8
 800a83e:	4b05      	ldr	r3, [pc, #20]	; (800a854 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv+0x2c>)
 800a840:	2116      	movs	r1, #22
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f840 	bl	800a8c8 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a848:	4603      	mov	r3, r0
  }
 800a84a:	4618      	mov	r0, r3
 800a84c:	3728      	adds	r7, #40	; 0x28
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	08004861 	.word	0x08004861

0800a858 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxEv>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax() {
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08a      	sub	sp, #40	; 0x28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_SOFTMAX, Register_SOFTMAX(),
 800a860:	f107 0308 	add.w	r3, r7, #8
 800a864:	4618      	mov	r0, r3
 800a866:	f006 fb9f 	bl	8010fa8 <_ZN6tflite16Register_SOFTMAXEv>
                      ParseSoftmax);
 800a86a:	f107 0208 	add.w	r2, r7, #8
 800a86e:	4b05      	ldr	r3, [pc, #20]	; (800a884 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxEv+0x2c>)
 800a870:	2119      	movs	r1, #25
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f828 	bl	800a8c8 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a878:	4603      	mov	r3, r0
  }
 800a87a:	4618      	mov	r0, r3
 800a87c:	3728      	adds	r7, #40	; 0x28
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	08004961 	.word	0x08004961

0800a888 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  EndianCheck();
 800a890:	f7ff f8f0 	bl	8009a74 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fa f8c3 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4413      	add	r3, r2
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      _Vector_base()
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 f894 	bl	800a9e4 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 800a8c8:	b5b0      	push	{r4, r5, r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	607a      	str	r2, [r7, #4]
 800a8d2:	603b      	str	r3, [r7, #0]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 800a8d8:	7afb      	ldrb	r3, [r7, #11]
 800a8da:	2b20      	cmp	r3, #32
 800a8dc:	d10d      	bne.n	800a8fa <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d006      	beq.n	800a8f6 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a8ee:	493a      	ldr	r1, [pc, #232]	; (800a9d8 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7f8 fb61 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e06a      	b.n	800a9d0 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (FindOp(op) != nullptr) {
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3314      	adds	r3, #20
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	7afa      	ldrb	r2, [r7, #11]
 800a904:	4611      	mov	r1, r2
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	4798      	blx	r3
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	bf14      	ite	ne
 800a910:	2301      	movne	r3, #1
 800a912:	2300      	moveq	r3, #0
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00e      	beq.n	800a938 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d007      	beq.n	800a934 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a92a:	7afa      	ldrb	r2, [r7, #11]
 800a92c:	492b      	ldr	r1, [pc, #172]	; (800a9dc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f8 fb42 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 800a934:	2301      	movs	r3, #1
 800a936:	e04b      	b.n	800a9d0 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (registrations_len_ >= tOpCount) {
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d90e      	bls.n	800a960 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800a952:	7afa      	ldrb	r2, [r7, #11]
 800a954:	2304      	movs	r3, #4
 800a956:	4922      	ldr	r1, [pc, #136]	; (800a9e0 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 800a958:	f7f8 fb2e 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e037      	b.n	800a9d0 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    registrations_[registrations_len_] = registration;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	015b      	lsls	r3, r3, #5
 800a96a:	4413      	add	r3, r2
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	1d1c      	adds	r4, r3, #4
 800a970:	4615      	mov	r5, r2
 800a972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a976:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a97a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a984:	7afa      	ldrb	r2, [r7, #11]
 800a986:	68f9      	ldr	r1, [r7, #12]
 800a988:	015b      	lsls	r3, r3, #5
 800a98a:	440b      	add	r3, r1
 800a98c:	3318      	adds	r3, #24
 800a98e:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a996:	1c5a      	adds	r2, r3, #1
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    builtin_codes_[num_buitin_ops_] = op;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	7afa      	ldrb	r2, [r7, #11]
 800a9aa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    builtin_parsers_[num_buitin_ops_] = parser;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	3322      	adds	r3, #34	; 0x22
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9c6:	1c5a      	adds	r2, r3, #1
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return kTfLiteOk;
 800a9ce:	2300      	movs	r3, #0
  }
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bdb0      	pop	{r4, r5, r7, pc}
 800a9d8:	0801cae0 	.word	0x0801cae0
 800a9dc:	0801cb28 	.word	0x0801cb28
 800a9e0:	0801cb78 	.word	0x0801cb78

0800a9e4 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f839 	bl	800aa64 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	605a      	str	r2, [r3, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	609a      	str	r2, [r3, #8]
	{ }
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4618      	mov	r0, r3
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 800aa0e:	b480      	push	{r7}
 800aa10:	b085      	sub	sp, #20
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	460b      	mov	r3, r1
 800aa18:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 800aa1a:	78fb      	ldrb	r3, [r7, #3]
 800aa1c:	2b20      	cmp	r3, #32
 800aa1e:	d101      	bne.n	800aa24 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x16>
 800aa20:	2300      	movs	r3, #0
 800aa22:	e019      	b.n	800aa58 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d210      	bcs.n	800aa56 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	015b      	lsls	r3, r3, #5
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	695a      	ldr	r2, [r3, #20]
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d101      	bne.n	800aa4e <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	e004      	b.n	800aa58 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3301      	adds	r3, #1
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e7e8      	b.n	800aa28 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 800aa56:	2300      	movs	r3, #0
  }
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f805 	bl	800aa7c <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4618      	mov	r0, r3
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
	...

0800aa94 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	4a05      	ldr	r2, [pc, #20]	; (800aab4 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev+0x20>)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7ff f86d 	bl	8009b84 <_ZN6tflite15MicroOpResolverD1Ev>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	0801f194 	.word	0x0801f194

0800aab8 <_ZN6tflite22MicroMutableOpResolverILj4EED0Ev>:
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff ffe7 	bl	800aa94 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
 800aac6:	21a4      	movs	r1, #164	; 0xa4
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f00b fe88 	bl	80167de <_ZdlPvj>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d218      	bcs.n	800ab24 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	015b      	lsls	r3, r3, #5
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	4413      	add	r3, r2
 800aafa:	3304      	adds	r3, #4
 800aafc:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	2b20      	cmp	r3, #32
 800ab04:	d10a      	bne.n	800ab1c <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7f5 fb5f 	bl	80001d0 <strcmp>
 800ab12:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
        return &registration;
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	e004      	b.n	800ab26 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	60fb      	str	r3, [r7, #12]
 800ab22:	e7e0      	b.n	800aae6 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0xe>
    return nullptr;
 800ab24:	2300      	movs	r3, #0
  }
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	d901      	bls.n	800ab48 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 800ab44:	f00e f8e7 	bl	8018d16 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d212      	bcs.n	800ab7e <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	3388      	adds	r3, #136	; 0x88
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	78fa      	ldrb	r2, [r7, #3]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d106      	bne.n	800ab76 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x48>
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3322      	adds	r3, #34	; 0x22
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	e004      	b.n	800ab80 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x52>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	e7e6      	b.n	800ab4c <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 800ab7e:	2300      	movs	r3, #0
  }
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	4a04      	ldr	r2, [pc, #16]	; (800aba4 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	0801f220 	.word	0x0801f220

0800aba8 <_ZN6tflite13ErrorReporterD0Ev>:
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff ffe9 	bl	800ab88 <_ZN6tflite13ErrorReporterD1Ev>
 800abb6:	2104      	movs	r1, #4
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f00b fe10 	bl	80167de <_ZdlPvj>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	4a05      	ldr	r2, [pc, #20]	; (800abe8 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4618      	mov	r0, r3
 800abda:	f7ff ffd5 	bl	800ab88 <_ZN6tflite13ErrorReporterD1Ev>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	0801fc5c 	.word	0x0801fc5c

0800abec <_ZN6tflite18MicroErrorReporterD0Ev>:
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7ff ffe7 	bl	800abc8 <_ZN6tflite18MicroErrorReporterD1Ev>
 800abfa:	2104      	movs	r1, #4
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f00b fdee 	bl	80167de <_ZdlPvj>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4618      	mov	r0, r3
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2104      	movs	r1, #4
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7f9 ff93 	bl	8004b44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800ac1e:	4603      	mov	r3, r0
  }
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	2106      	movs	r1, #6
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7f9 ff94 	bl	8004b64 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	b2db      	uxtb	r3, r3
  }
 800ac40:	4618      	mov	r0, r3
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensor_ctypes.h"
#include "schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	1e5a      	subs	r2, r3, #1
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 800ac6a:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 800ac7a:	b480      	push	{r7}
 800ac7c:	b085      	sub	sp, #20
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
 800ac82:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 800ac96:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800ac98:	68bb      	ldr	r3, [r7, #8]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 800aca6:	b480      	push	{r7}
 800aca8:	b085      	sub	sp, #20
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4413      	add	r3, r2
 800acb6:	1e5a      	subs	r2, r3, #1
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	fbb2 f2f3 	udiv	r2, r2, r3
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	fb02 f303 	mul.w	r3, r2, r3
 800acc4:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800acc6:	68fb      	ldr	r3, [r7, #12]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	6039      	str	r1, [r7, #0]
 800acde:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	2b0c      	cmp	r3, #12
 800ace6:	d845      	bhi.n	800ad74 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa0>
 800ace8:	a201      	add	r2, pc, #4	; (adr r2, 800acf0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 800acea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acee:	bf00      	nop
 800acf0:	0800ad25 	.word	0x0800ad25
 800acf4:	0800ad35 	.word	0x0800ad35
 800acf8:	0800ad3d 	.word	0x0800ad3d
 800acfc:	0800ad4d 	.word	0x0800ad4d
 800ad00:	0800ad75 	.word	0x0800ad75
 800ad04:	0800ad5d 	.word	0x0800ad5d
 800ad08:	0800ad2d 	.word	0x0800ad2d
 800ad0c:	0800ad65 	.word	0x0800ad65
 800ad10:	0800ad45 	.word	0x0800ad45
 800ad14:	0800ad75 	.word	0x0800ad75
 800ad18:	0800ad75 	.word	0x0800ad75
 800ad1c:	0800ad6d 	.word	0x0800ad6d
 800ad20:	0800ad55 	.word	0x0800ad55
    case kTfLiteFloat32:
      *size = sizeof(float);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	2204      	movs	r2, #4
 800ad28:	601a      	str	r2, [r3, #0]
      break;
 800ad2a:	e025      	b.n	800ad78 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	2202      	movs	r2, #2
 800ad30:	601a      	str	r2, [r3, #0]
      break;
 800ad32:	e021      	b.n	800ad78 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	2204      	movs	r2, #4
 800ad38:	601a      	str	r2, [r3, #0]
      break;
 800ad3a:	e01d      	b.n	800ad78 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	601a      	str	r2, [r3, #0]
      break;
 800ad42:	e019      	b.n	800ad78 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2201      	movs	r2, #1
 800ad48:	601a      	str	r2, [r3, #0]
      break;
 800ad4a:	e015      	b.n	800ad78 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2208      	movs	r2, #8
 800ad50:	601a      	str	r2, [r3, #0]
      break;
 800ad52:	e011      	b.n	800ad78 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	2208      	movs	r2, #8
 800ad58:	601a      	str	r2, [r3, #0]
      break;
 800ad5a:	e00d      	b.n	800ad78 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteBool:
      *size = sizeof(bool);
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	601a      	str	r2, [r3, #0]
      break;
 800ad62:	e009      	b.n	800ad78 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2208      	movs	r2, #8
 800ad68:	601a      	str	r2, [r3, #0]
      break;
 800ad6a:	e005      	b.n	800ad78 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	2210      	movs	r2, #16
 800ad70:	601a      	str	r2, [r3, #0]
      break;
 800ad72:	e001      	b.n	800ad78 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    default:
      return kTfLiteError;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e000      	b.n	800ad7a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa6>
  }
  return kTfLiteOk;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop

0800ad88 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b088      	sub	sp, #32
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800ad96:	2301      	movs	r3, #1
 800ad98:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f7ff ff36 	bl	800ac0c <_ZNK6tflite6Tensor5shapeEv>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	bf14      	ite	ne
 800ada6:	2301      	movne	r3, #1
 800ada8:	2300      	moveq	r3, #0
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b00      	cmp	r3, #0
 800adae:	d022      	beq.n	800adf6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800adb0:	2300      	movs	r3, #0
 800adb2:	61bb      	str	r3, [r7, #24]
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f7ff ff29 	bl	800ac0c <_ZNK6tflite6Tensor5shapeEv>
 800adba:	4603      	mov	r3, r0
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 f884 	bl	800aeca <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800adc2:	4602      	mov	r2, r0
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	4293      	cmp	r3, r2
 800adc8:	bf34      	ite	cc
 800adca:	2301      	movcc	r3, #1
 800adcc:	2300      	movcs	r3, #0
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	d010      	beq.n	800adf6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7ff ff19 	bl	800ac0c <_ZNK6tflite6Tensor5shapeEv>
 800adda:	4603      	mov	r3, r0
 800addc:	69b9      	ldr	r1, [r7, #24]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f9 ff10 	bl	8004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800ade4:	4602      	mov	r2, r0
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	fb02 f303 	mul.w	r3, r2, r3
 800adec:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	3301      	adds	r3, #1
 800adf2:	61bb      	str	r3, [r7, #24]
 800adf4:	e7de      	b.n	800adb4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f7ff ff16 	bl	800ac28 <_ZNK6tflite6Tensor4typeEv>
 800adfc:	4603      	mov	r3, r0
 800adfe:	4618      	mov	r0, r3
 800ae00:	f107 0315 	add.w	r3, r7, #21
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	4619      	mov	r1, r3
 800ae08:	f7f9 fb66 	bl	80044d8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	75fb      	strb	r3, [r7, #23]
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	e013      	b.n	800ae42 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 800ae1a:	7d7b      	ldrb	r3, [r7, #21]
 800ae1c:	6879      	ldr	r1, [r7, #4]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff ff58 	bl	800acd4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800ae24:	4603      	mov	r3, r0
 800ae26:	75bb      	strb	r3, [r7, #22]
 800ae28:	7dbb      	ldrb	r3, [r7, #22]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 800ae2e:	7dbb      	ldrb	r3, [r7, #22]
 800ae30:	e007      	b.n	800ae42 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	69fa      	ldr	r2, [r7, #28]
 800ae38:	fb02 f203 	mul.w	r2, r2, r3
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3720      	adds	r7, #32
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b086      	sub	sp, #24
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 800ae5a:	f00d ff5c 	bl	8018d16 <abort>

  int element_count = 1;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d015      	beq.n	800ae96 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	613b      	str	r3, [r7, #16]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	da0d      	bge.n	800ae96 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	fb02 f303 	mul.w	r3, r2, r3
 800ae8c:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	3301      	adds	r3, #1
 800ae92:	613b      	str	r3, [r7, #16]
 800ae94:	e7eb      	b.n	800ae6e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	7a1b      	ldrb	r3, [r3, #8]
 800ae9a:	f107 0208 	add.w	r2, r7, #8
 800ae9e:	4611      	mov	r1, r2
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7ff ff17 	bl	800acd4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	e006      	b.n	800aec2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	fb02 f203 	mul.w	r2, r2, r3
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b082      	sub	sp, #8
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7f9 fe88 	bl	8004be8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800aed8:	4603      	mov	r3, r0
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f001 fe1f 	bl	800cb30 <_ZNK11flatbuffers6VectorIcE4DataEv>
 800aef2:	4603      	mov	r3, r0
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0
  return names;
 800af00:	4b02      	ldr	r3, [pc, #8]	; (800af0c <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800af02:	4618      	mov	r0, r3
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	0801f22c 	.word	0x0801f22c

0800af10 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_RFFT2D))
 800af1a:	2300      	movs	r3, #0
 800af1c:	72bb      	strb	r3, [r7, #10]
 800af1e:	2383      	movs	r3, #131	; 0x83
 800af20:	72fb      	strb	r3, [r7, #11]
 800af22:	f107 020b 	add.w	r2, r7, #11
 800af26:	f107 010a 	add.w	r1, r7, #10
 800af2a:	1dfb      	adds	r3, r7, #7
 800af2c:	4618      	mov	r0, r3
 800af2e:	f001 fe0b 	bl	800cb48 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
    return "";
 800af38:	4b07      	ldr	r3, [pc, #28]	; (800af58 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800af3a:	e008      	b.n	800af4e <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 800af3c:	79fb      	ldrb	r3, [r7, #7]
 800af3e:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 800af40:	f7ff ffdc 	bl	800aefc <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 800af44:	4602      	mov	r2, r0
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	681b      	ldr	r3, [r3, #0]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	0801d1e0 	.word	0x0801d1e0

0800af5c <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2108      	movs	r1, #8
 800af68:	4618      	mov	r0, r3
 800af6a:	f001 fe18 	bl	800cb9e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800af6e:	4603      	mov	r3, r0
  }
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	210a      	movs	r1, #10
 800af84:	4618      	mov	r0, r3
 800af86:	f001 fe1a 	bl	800cbbe <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800af8a:	4603      	mov	r3, r0
  }
 800af8c:	4618      	mov	r0, r3
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	2110      	movs	r1, #16
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7f9 fdb0 	bl	8004b08 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800afa8:	4603      	mov	r3, r0
  }
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	2108      	movs	r1, #8
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7ff fb8e 	bl	800a6e2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800afc6:	4603      	mov	r3, r0
  }
 800afc8:	4618      	mov	r0, r3
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	210c      	movs	r1, #12
 800afdc:	4618      	mov	r0, r3
 800afde:	f001 fe0e 	bl	800cbfe <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800afe2:	4603      	mov	r3, r0
  }
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	210e      	movs	r1, #14
 800affa:	4618      	mov	r0, r3
 800affc:	f7f9 fd55 	bl	8004aaa <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	bf14      	ite	ne
 800b006:	2301      	movne	r3, #1
 800b008:	2300      	moveq	r3, #0
 800b00a:	b2db      	uxtb	r3, r3
  }
 800b00c:	4618      	mov	r0, r3
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	2104      	movs	r1, #4
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff fb5d 	bl	800a6e2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800b028:	4603      	mov	r3, r0
  }
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2106      	movs	r1, #6
 800b03e:	4618      	mov	r0, r3
 800b040:	f7f9 fd80 	bl	8004b44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800b044:	4603      	mov	r3, r0
  }
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2108      	movs	r1, #8
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7f9 fd72 	bl	8004b44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800b060:	4603      	mov	r3, r0
  }
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	210e      	movs	r1, #14
 800b076:	4618      	mov	r0, r3
 800b078:	f001 fd81 	bl	800cb7e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800b07c:	4603      	mov	r3, r0
  }
 800b07e:	4618      	mov	r0, r3
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 800b086:	b580      	push	{r7, lr}
 800b088:	b082      	sub	sp, #8
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2104      	movs	r1, #4
 800b092:	4618      	mov	r0, r3
 800b094:	f001 fdc3 	bl	800cc1e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800b098:	4603      	mov	r3, r0
  }
 800b09a:	4618      	mov	r0, r3
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b082      	sub	sp, #8
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2106      	movs	r1, #6
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7f9 fd48 	bl	8004b44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800b0b4:	4603      	mov	r3, r0
  }
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2108      	movs	r1, #8
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f9 fd3a 	bl	8004b44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800b0d0:	4603      	mov	r3, r0
  }
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b082      	sub	sp, #8
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	210a      	movs	r1, #10
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f001 fda9 	bl	800cc3e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800b0ec:	4603      	mov	r3, r0
  }
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2104      	movs	r1, #4
 800b102:	4618      	mov	r0, r3
 800b104:	f001 fd3b 	bl	800cb7e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800b108:	4603      	mov	r3, r0
  }
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2104      	movs	r1, #4
 800b11e:	4618      	mov	r0, r3
 800b120:	f001 fd5d 	bl	800cbde <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800b124:	4603      	mov	r3, r0
  }
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 800b12e:	b580      	push	{r7, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	2106      	movs	r1, #6
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff fad0 	bl	800a6e2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800b142:	4603      	mov	r3, r0
  }
 800b144:	4618      	mov	r0, r3
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2106      	movs	r1, #6
 800b158:	4618      	mov	r0, r3
 800b15a:	f001 fd80 	bl	800cc5e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800b15e:	4603      	mov	r3, r0
  }
 800b160:	4618      	mov	r0, r3
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2108      	movs	r1, #8
 800b174:	4618      	mov	r0, r3
 800b176:	f001 fd82 	bl	800cc7e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800b17a:	4603      	mov	r3, r0
  }
 800b17c:	4618      	mov	r0, r3
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	210c      	movs	r1, #12
 800b190:	4618      	mov	r0, r3
 800b192:	f001 fd84 	bl	800cc9e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800b196:	4603      	mov	r3, r0
  }
 800b198:	4618      	mov	r0, r3
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2110      	movs	r1, #16
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f001 fd86 	bl	800ccbe <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800b1b2:	4603      	mov	r3, r0
  }
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	4a04      	ldr	r2, [pc, #16]	; (800b1d8 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	0801f4bc 	.word	0x0801f4bc

0800b1dc <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff ffe9 	bl	800b1bc <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800b1ea:	2104      	movs	r1, #4
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f00b faf6 	bl	80167de <_ZdlPvj>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	4a04      	ldr	r2, [pc, #16]	; (800b218 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4618      	mov	r0, r3
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	0801f4bc 	.word	0x0801f4bc

0800b21c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4618      	mov	r0, r3
 800b22a:	f7ff ffe7 	bl	800b1fc <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800b22e:	4a05      	ldr	r2, [pc, #20]	; (800b244 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	605a      	str	r2, [r3, #4]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4618      	mov	r0, r3
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	0801f464 	.word	0x0801f464

0800b248 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6858      	ldr	r0, [r3, #4]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	330c      	adds	r3, #12
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	68b9      	ldr	r1, [r7, #8]
 800b266:	4798      	blx	r3
 800b268:	4603      	mov	r3, r0
  }
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 800b272:	b480      	push	{r7}
 800b274:	b083      	sub	sp, #12
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
 800b294:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	605a      	str	r2, [r3, #4]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	609a      	str	r2, [r3, #8]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	69ba      	ldr	r2, [r7, #24]
 800b2ac:	60da      	str	r2, [r3, #12]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3714      	adds	r7, #20
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b09a      	sub	sp, #104	; 0x68
 800b2c0:	af02      	add	r7, sp, #8
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 800b2d0:	f00d fd21 	bl	8018d16 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d267      	bcs.n	800b3b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6819      	ldr	r1, [r3, #0]
 800b2e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	4413      	add	r3, r2
 800b2ee:	00db      	lsls	r3, r3, #3
 800b2f0:	440b      	add	r3, r1
 800b2f2:	643b      	str	r3, [r7, #64]	; 0x40
    current->output_ptr = &(eval_tensors[i].data.data);
 800b2f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	4413      	add	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	461a      	mov	r2, r3
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	4413      	add	r3, r2
 800b304:	461a      	mov	r2, r3
 800b306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b308:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800b30a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b30c:	4613      	mov	r3, r2
 800b30e:	005b      	lsls	r3, r3, #1
 800b310:	4413      	add	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	461a      	mov	r2, r3
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	4413      	add	r3, r2
 800b31a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b31c:	4611      	mov	r1, r2
 800b31e:	4618      	mov	r0, r3
 800b320:	f7ff fd93 	bl	800ae4a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800b324:	4603      	mov	r3, r0
 800b326:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b32a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d002      	beq.n	800b338 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 800b332:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b336:	e170      	b.n	800b61a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35e>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 800b338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b33a:	f04f 32ff 	mov.w	r2, #4294967295
 800b33e:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 800b340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b342:	f04f 32ff 	mov.w	r2, #4294967295
 800b346:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800b348:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b34a:	4613      	mov	r3, r2
 800b34c:	005b      	lsls	r3, r3, #1
 800b34e:	4413      	add	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	461a      	mov	r2, r3
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	4413      	add	r3, r2
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d113      	bne.n	800b386 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 800b35e:	68b8      	ldr	r0, [r7, #8]
 800b360:	f7ff fe91 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800b364:	4603      	mov	r3, r0
 800b366:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b368:	4618      	mov	r0, r3
 800b36a:	f001 fd41 	bl	800cdf0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800b36e:	4603      	mov	r3, r0
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff fe3b 	bl	800afec <_ZNK6tflite6Tensor11is_variableEv>
 800b376:	4603      	mov	r3, r0
 800b378:	f083 0301 	eor.w	r3, r3, #1
 800b37c:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 800b382:	2201      	movs	r2, #1
 800b384:	e000      	b.n	800b388 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 800b386:	2200      	movs	r2, #0
 800b388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b38a:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d007      	beq.n	800b3a2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 800b392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	4413      	add	r3, r2
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b39e:	611a      	str	r2, [r3, #16]
 800b3a0:	e003      	b.n	800b3aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 800b3a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a8:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800b3aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3b0:	e792      	b.n	800b2d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3b6:	68b8      	ldr	r0, [r7, #8]
 800b3b8:	f7ff fe73 	bl	800b0a2 <_ZNK6tflite8SubGraph6inputsEv>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7f9 fc12 	bl	8004be8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	bf34      	ite	cc
 800b3cc:	2301      	movcc	r3, #1
 800b3ce:	2300      	movcs	r3, #0
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d018      	beq.n	800b408 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x14c>
    const int tensor_index = subgraph->inputs()->Get(i);
 800b3d6:	68b8      	ldr	r0, [r7, #8]
 800b3d8:	f7ff fe63 	bl	800b0a2 <_ZNK6tflite8SubGraph6inputsEv>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7f9 fc0f 	bl	8004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800b3e6:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6819      	ldr	r1, [r3, #0]
 800b3ec:	697a      	ldr	r2, [r7, #20]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	4413      	add	r3, r2
 800b3f4:	00db      	lsls	r3, r3, #3
 800b3f6:	440b      	add	r3, r1
 800b3f8:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800b400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b402:	3301      	adds	r3, #1
 800b404:	65bb      	str	r3, [r7, #88]	; 0x58
 800b406:	e7d6      	b.n	800b3b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xfa>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800b408:	2300      	movs	r3, #0
 800b40a:	657b      	str	r3, [r7, #84]	; 0x54
 800b40c:	68b8      	ldr	r0, [r7, #8]
 800b40e:	f7ff fe56 	bl	800b0be <_ZNK6tflite8SubGraph7outputsEv>
 800b412:	4603      	mov	r3, r0
 800b414:	4618      	mov	r0, r3
 800b416:	f7f9 fbe7 	bl	8004be8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800b41a:	4602      	mov	r2, r0
 800b41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b41e:	4293      	cmp	r3, r2
 800b420:	bf34      	ite	cc
 800b422:	2301      	movcc	r3, #1
 800b424:	2300      	movcs	r3, #0
 800b426:	b2db      	uxtb	r3, r3
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d021      	beq.n	800b470 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
    const int tensor_index = subgraph->outputs()->Get(i);
 800b42c:	68b8      	ldr	r0, [r7, #8]
 800b42e:	f7ff fe46 	bl	800b0be <_ZNK6tflite8SubGraph7outputsEv>
 800b432:	4603      	mov	r3, r0
 800b434:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b436:	4618      	mov	r0, r3
 800b438:	f7f9 fbe4 	bl	8004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800b43c:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6819      	ldr	r1, [r3, #0]
 800b442:	69fa      	ldr	r2, [r7, #28]
 800b444:	4613      	mov	r3, r2
 800b446:	005b      	lsls	r3, r3, #1
 800b448:	4413      	add	r3, r2
 800b44a:	00db      	lsls	r3, r3, #3
 800b44c:	440b      	add	r3, r1
 800b44e:	61bb      	str	r3, [r7, #24]
    current->last_used = subgraph->operators()->size() - 1;
 800b450:	68b8      	ldr	r0, [r7, #8]
 800b452:	f7ff fe42 	bl	800b0da <_ZNK6tflite8SubGraph9operatorsEv>
 800b456:	4603      	mov	r3, r0
 800b458:	4618      	mov	r0, r3
 800b45a:	f001 fcef 	bl	800ce3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800b45e:	4603      	mov	r3, r0
 800b460:	3b01      	subs	r3, #1
 800b462:	461a      	mov	r2, r3
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800b468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b46a:	3301      	adds	r3, #1
 800b46c:	657b      	str	r3, [r7, #84]	; 0x54
 800b46e:	e7cd      	b.n	800b40c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x150>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800b470:	68b8      	ldr	r0, [r7, #8]
 800b472:	f7ff fe32 	bl	800b0da <_ZNK6tflite8SubGraph9operatorsEv>
 800b476:	4603      	mov	r3, r0
 800b478:	4618      	mov	r0, r3
 800b47a:	f001 fcdf 	bl	800ce3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800b47e:	4603      	mov	r3, r0
 800b480:	3b01      	subs	r3, #1
 800b482:	653b      	str	r3, [r7, #80]	; 0x50
 800b484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b486:	2b00      	cmp	r3, #0
 800b488:	db77      	blt.n	800b57a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2be>
    const auto* op = subgraph->operators()->Get(i);
 800b48a:	68b8      	ldr	r0, [r7, #8]
 800b48c:	f7ff fe25 	bl	800b0da <_ZNK6tflite8SubGraph9operatorsEv>
 800b490:	4602      	mov	r2, r0
 800b492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b494:	4619      	mov	r1, r3
 800b496:	4610      	mov	r0, r2
 800b498:	f001 fcde 	bl	800ce58 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800b49c:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800b49e:	2300      	movs	r3, #0
 800b4a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4a4:	f7ff fdc5 	bl	800b032 <_ZNK6tflite8Operator6inputsEv>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7f9 fb9c 	bl	8004be8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	bf34      	ite	cc
 800b4b8:	2301      	movcc	r3, #1
 800b4ba:	2300      	movcs	r3, #0
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d022      	beq.n	800b508 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x24c>
      const int tensor_index = op->inputs()->Get(n);
 800b4c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4c4:	f7ff fdb5 	bl	800b032 <_ZNK6tflite8Operator6inputsEv>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f9 fb99 	bl	8004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800b4d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6819      	ldr	r1, [r3, #0]
 800b4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4da:	4613      	mov	r3, r2
 800b4dc:	005b      	lsls	r3, r3, #1
 800b4de:	4413      	add	r3, r2
 800b4e0:	00db      	lsls	r3, r3, #3
 800b4e2:	440b      	add	r3, r1
 800b4e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if (((current->last_used == -1) || (current->last_used < i))) {
 800b4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ee:	d004      	beq.n	800b4fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23e>
 800b4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	dd02      	ble.n	800b500 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x244>
        current->last_used = i;
 800b4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4fe:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800b500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b502:	3301      	adds	r3, #1
 800b504:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b506:	e7cc      	b.n	800b4a2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1e6>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800b508:	2300      	movs	r3, #0
 800b50a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b50c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b50e:	f7ff fd9e 	bl	800b04e <_ZNK6tflite8Operator7outputsEv>
 800b512:	4603      	mov	r3, r0
 800b514:	4618      	mov	r0, r3
 800b516:	f7f9 fb67 	bl	8004be8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800b51a:	4602      	mov	r2, r0
 800b51c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b51e:	4293      	cmp	r3, r2
 800b520:	bf34      	ite	cc
 800b522:	2301      	movcc	r3, #1
 800b524:	2300      	movcs	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d022      	beq.n	800b572 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2b6>
      const int tensor_index = op->outputs()->Get(n);
 800b52c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b52e:	f7ff fd8e 	bl	800b04e <_ZNK6tflite8Operator7outputsEv>
 800b532:	4603      	mov	r3, r0
 800b534:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b536:	4618      	mov	r0, r3
 800b538:	f7f9 fb64 	bl	8004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800b53c:	6378      	str	r0, [r7, #52]	; 0x34
      AllocationInfo* current = &info_[tensor_index];
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6819      	ldr	r1, [r3, #0]
 800b542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b544:	4613      	mov	r3, r2
 800b546:	005b      	lsls	r3, r3, #1
 800b548:	4413      	add	r3, r2
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	440b      	add	r3, r1
 800b54e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((current->first_created == -1) || (current->first_created > i)) {
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b558:	d004      	beq.n	800b564 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a8>
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b560:	429a      	cmp	r2, r3
 800b562:	da02      	bge.n	800b56a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ae>
        current->first_created = i;
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b568:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800b56a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b56c:	3301      	adds	r3, #1
 800b56e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b570:	e7cc      	b.n	800b50c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x250>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800b572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b574:	3b01      	subs	r3, #1
 800b576:	653b      	str	r3, [r7, #80]	; 0x50
 800b578:	e784      	b.n	800b484 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c8>
      }
    }
  }

  // Sanity check for valid tensor lifetime.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800b57a:	2300      	movs	r3, #0
 800b57c:	647b      	str	r3, [r7, #68]	; 0x44
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b584:	429a      	cmp	r2, r3
 800b586:	d247      	bcs.n	800b618 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35c>
    AllocationInfo* current = &info_[i];
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6819      	ldr	r1, [r3, #0]
 800b58c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b58e:	4613      	mov	r3, r2
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	4413      	add	r3, r2
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	440b      	add	r3, r1
 800b598:	627b      	str	r3, [r7, #36]	; 0x24
    // Even though tensor appears to be read only it may still need to be
    // allocated.
    const bool appears_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a2:	d106      	bne.n	800b5b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ac:	d001      	beq.n	800b5b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e000      	b.n	800b5b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f8>
 800b5b2:	2300      	movs	r3, #0
    const bool appears_read_only =
 800b5b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    const bool has_partial_lifetime =
        !appears_read_only &&
 800b5b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5bc:	f083 0301 	eor.w	r3, r3, #1
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00b      	beq.n	800b5de <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x322>
        ((current->first_created == -1) || (current->last_used == -1));
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c8:	689b      	ldr	r3, [r3, #8]
        !appears_read_only &&
 800b5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ce:	d004      	beq.n	800b5da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x31e>
        ((current->first_created == -1) || (current->last_used == -1));
 800b5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d8:	d101      	bne.n	800b5de <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x322>
        !appears_read_only &&
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x324>
 800b5de:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 800b5e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (has_partial_lifetime && current->needs_allocating) {
 800b5e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d011      	beq.n	800b610 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x354>
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	7d1b      	ldrb	r3, [r3, #20]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00d      	beq.n	800b610 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x354>
      TF_LITE_REPORT_ERROR(
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	68d8      	ldr	r0, [r3, #12]
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	689a      	ldr	r2, [r3, #8]
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	4613      	mov	r3, r2
 800b604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b606:	4907      	ldr	r1, [pc, #28]	; (800b624 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x368>)
 800b608:	f7f7 fcd6 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e004      	b.n	800b61a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35e>
  for (size_t i = 0; i < tensor_count_; ++i) {
 800b610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b612:	3301      	adds	r3, #1
 800b614:	647b      	str	r3, [r7, #68]	; 0x44
 800b616:	e7b2      	b.n	800b57e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2c2>
    }
  }
  return kTfLiteOk;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3760      	adds	r7, #96	; 0x60
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	0801d324 	.word	0x0801d324

0800b628 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 800b628:	b580      	push	{r7, lr}
 800b62a:	b08c      	sub	sp, #48	; 0x30
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 800b634:	68b8      	ldr	r0, [r7, #8]
 800b636:	f7ff fdb3 	bl	800b1a0 <_ZNK6tflite5Model8metadataEv>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	bf14      	ite	ne
 800b640:	2301      	movne	r3, #1
 800b642:	2300      	moveq	r3, #0
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	d060      	beq.n	800b70c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800b64a:	2300      	movs	r3, #0
 800b64c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b64e:	68b8      	ldr	r0, [r7, #8]
 800b650:	f7ff fda6 	bl	800b1a0 <_ZNK6tflite5Model8metadataEv>
 800b654:	4603      	mov	r3, r0
 800b656:	4618      	mov	r0, r3
 800b658:	f001 fcc0 	bl	800cfdc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800b65c:	4602      	mov	r2, r0
 800b65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b660:	4293      	cmp	r3, r2
 800b662:	bf34      	ite	cc
 800b664:	2301      	movcc	r3, #1
 800b666:	2300      	movcs	r3, #0
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d04e      	beq.n	800b70c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 800b66e:	68b8      	ldr	r0, [r7, #8]
 800b670:	f7ff fd96 	bl	800b1a0 <_ZNK6tflite5Model8metadataEv>
 800b674:	4603      	mov	r3, r0
 800b676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b678:	4618      	mov	r0, r3
 800b67a:	f001 fcbd 	bl	800cff8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 800b67e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800b680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b682:	f7ff fd46 	bl	800b112 <_ZNK6tflite8Metadata4nameEv>
 800b686:	4603      	mov	r3, r0
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff fc2a 	bl	800aee2 <_ZNK11flatbuffers6String5c_strEv>
 800b68e:	4603      	mov	r3, r0
 800b690:	2217      	movs	r2, #23
 800b692:	4921      	ldr	r1, [pc, #132]	; (800b718 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 800b694:	4618      	mov	r0, r3
 800b696:	f00e fbbd 	bl	8019e14 <strncmp>
 800b69a:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bf0c      	ite	eq
 800b6a0:	2301      	moveq	r3, #1
 800b6a2:	2300      	movne	r3, #0
 800b6a4:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d02c      	beq.n	800b704 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 800b6aa:	68b8      	ldr	r0, [r7, #8]
 800b6ac:	f7ff fd6a 	bl	800b184 <_ZNK6tflite5Model7buffersEv>
 800b6b0:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 800b6b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6b4:	f7ff fd3b 	bl	800b12e <_ZNK6tflite8Metadata6bufferEv>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6be:	f001 fccf 	bl	800d060 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800b6c2:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 800b6c4:	6a38      	ldr	r0, [r7, #32]
 800b6c6:	f7ff fd16 	bl	800b0f6 <_ZNK6tflite6Buffer4dataEv>
 800b6ca:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 800b6cc:	69f8      	ldr	r0, [r7, #28]
 800b6ce:	f001 fcd5 	bl	800d07c <_ZNK11flatbuffers6VectorIhE4dataEv>
 800b6d2:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d009      	beq.n	800b704 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	68d8      	ldr	r0, [r3, #12]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	4908      	ldr	r1, [pc, #32]	; (800b71c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 800b6fc:	f7f7 fc5c 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 800b700:	2301      	movs	r3, #1
 800b702:	e004      	b.n	800b70e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800b704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b706:	3301      	adds	r3, #1
 800b708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b70a:	e7a0      	b.n	800b64e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3730      	adds	r7, #48	; 0x30
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	0801f440 	.word	0x0801f440
 800b71c:	0801d2d8 	.word	0x0801d2d8

0800b720 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 800b720:	b480      	push	{r7}
 800b722:	b089      	sub	sp, #36	; 0x24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	61fb      	str	r3, [r7, #28]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	4413      	add	r3, r2
 800b73c:	69fa      	ldr	r2, [r7, #28]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d232      	bcs.n	800b7a8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	69fa      	ldr	r2, [r7, #28]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	4413      	add	r3, r2
 800b750:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	69fa      	ldr	r2, [r7, #28]
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	4413      	add	r3, r2
 800b760:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6819      	ldr	r1, [r3, #0]
 800b766:	69fa      	ldr	r2, [r7, #28]
 800b768:	4613      	mov	r3, r2
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	4413      	add	r3, r2
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	440b      	add	r3, r1
 800b772:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	685a      	ldr	r2, [r3, #4]
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f04f 32ff 	mov.w	r2, #4294967295
 800b798:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	2201      	movs	r2, #1
 800b79e:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	e7c4      	b.n	800b732 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3724      	adds	r7, #36	; 0x24
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800b7b6:	b590      	push	{r4, r7, lr}
 800b7b8:	b08b      	sub	sp, #44	; 0x2c
 800b7ba:	af02      	add	r7, sp, #8
 800b7bc:	60f8      	str	r0, [r7, #12]
 800b7be:	60b9      	str	r1, [r7, #8]
 800b7c0:	607a      	str	r2, [r7, #4]
 800b7c2:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	61fb      	str	r3, [r7, #28]
 800b7c8:	69fa      	ldr	r2, [r7, #28]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d247      	bcs.n	800b860 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 800b7d0:	69fa      	ldr	r2, [r7, #28]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	4413      	add	r3, r2
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	461a      	mov	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4413      	add	r3, r2
 800b7e0:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	7d1b      	ldrb	r3, [r3, #20]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d036      	beq.n	800b858 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2110      	movs	r1, #16
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7ff fa58 	bl	800aca6 <_ZN6tflite11AlignSizeUpEjj>
 800b7f6:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b800:	d114      	bne.n	800b82c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	3308      	adds	r3, #8
 800b808:	681c      	ldr	r4, [r3, #0]
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	6899      	ldr	r1, [r3, #8]
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	460b      	mov	r3, r1
 800b818:	68f9      	ldr	r1, [r7, #12]
 800b81a:	68b8      	ldr	r0, [r7, #8]
 800b81c:	47a0      	blx	r4
 800b81e:	4603      	mov	r3, r0
 800b820:	74bb      	strb	r3, [r7, #18]
 800b822:	7cbb      	ldrb	r3, [r7, #18]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d017      	beq.n	800b858 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800b828:	7cbb      	ldrb	r3, [r7, #18]
 800b82a:	e01a      	b.n	800b862 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 800b82c:	6979      	ldr	r1, [r7, #20]
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	6898      	ldr	r0, [r3, #8]
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	6912      	ldr	r2, [r2, #16]
 800b83a:	9201      	str	r2, [sp, #4]
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	4603      	mov	r3, r0
 800b840:	460a      	mov	r2, r1
 800b842:	68f9      	ldr	r1, [r7, #12]
 800b844:	68b8      	ldr	r0, [r7, #8]
 800b846:	f7fb fc77 	bl	8007138 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 800b84a:	4603      	mov	r3, r0
 800b84c:	74fb      	strb	r3, [r7, #19]
 800b84e:	7cfb      	ldrb	r3, [r7, #19]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d001      	beq.n	800b858 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800b854:	7cfb      	ldrb	r3, [r7, #19]
 800b856:	e004      	b.n	800b862 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	3301      	adds	r3, #1
 800b85c:	61fb      	str	r3, [r7, #28]
 800b85e:	e7b3      	b.n	800b7c8 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3724      	adds	r7, #36	; 0x24
 800b866:	46bd      	mov	sp, r7
 800b868:	bd90      	pop	{r4, r7, pc}

0800b86a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800b86a:	b590      	push	{r4, r7, lr}
 800b86c:	b08b      	sub	sp, #44	; 0x2c
 800b86e:	af00      	add	r7, sp, #0
 800b870:	60f8      	str	r0, [r7, #12]
 800b872:	60b9      	str	r1, [r7, #8]
 800b874:	607a      	str	r2, [r7, #4]
 800b876:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800b87c:	2300      	movs	r3, #0
 800b87e:	623b      	str	r3, [r7, #32]
 800b880:	6a3a      	ldr	r2, [r7, #32]
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	429a      	cmp	r2, r3
 800b886:	d22e      	bcs.n	800b8e6 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 800b888:	6a3a      	ldr	r2, [r7, #32]
 800b88a:	4613      	mov	r3, r2
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	4413      	add	r3, r2
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	461a      	mov	r2, r3
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	4413      	add	r3, r2
 800b898:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	7d1b      	ldrb	r3, [r3, #20]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d01d      	beq.n	800b8de <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 800b8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a6:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	3314      	adds	r3, #20
 800b8ae:	681c      	ldr	r4, [r3, #0]
 800b8b0:	f107 0314 	add.w	r3, r7, #20
 800b8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b6:	68f9      	ldr	r1, [r7, #12]
 800b8b8:	68b8      	ldr	r0, [r7, #8]
 800b8ba:	47a0      	blx	r4
 800b8bc:	4603      	mov	r3, r0
 800b8be:	76fb      	strb	r3, [r7, #27]
 800b8c0:	7efb      	ldrb	r3, [r7, #27]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 800b8c6:	7efb      	ldrb	r3, [r7, #27]
 800b8c8:	e00e      	b.n	800b8e8 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	601a      	str	r2, [r3, #0]
      ++planner_index;
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	3301      	adds	r3, #1
 800b8dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	623b      	str	r3, [r7, #32]
 800b8e4:	e7cc      	b.n	800b880 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	372c      	adds	r7, #44	; 0x2c
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd90      	pop	{r4, r7, pc}

0800b8f0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f7ff fb57 	bl	800afb2 <_ZNK6tflite6Tensor6bufferEv>
 800b904:	4603      	mov	r3, r0
 800b906:	4619      	mov	r1, r3
 800b908:	6838      	ldr	r0, [r7, #0]
 800b90a:	f001 fba9 	bl	800d060 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800b90e:	6138      	str	r0, [r7, #16]
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d015      	beq.n	800b942 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 800b916:	6938      	ldr	r0, [r7, #16]
 800b918:	f7ff fbed 	bl	800b0f6 <_ZNK6tflite6Buffer4dataEv>
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00e      	beq.n	800b942 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f001 f9da 	bl	800ccde <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bf14      	ite	ne
 800b930:	2301      	movne	r3, #1
 800b932:	2300      	moveq	r3, #0
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f001 fb9e 	bl	800d07c <_ZNK11flatbuffers6VectorIhE4dataEv>
 800b940:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 800b942:	697b      	ldr	r3, [r7, #20]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 800b94c:	b590      	push	{r4, r7, lr}
 800b94e:	b08d      	sub	sp, #52	; 0x34
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	607a      	str	r2, [r7, #4]
 800b956:	603b      	str	r3, [r7, #0]
 800b958:	460b      	mov	r3, r1
 800b95a:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 800b95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 800b962:	f00d f9d8 	bl	8018d16 <abort>

  *result = {};
 800b966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b968:	4618      	mov	r0, r3
 800b96a:	2340      	movs	r3, #64	; 0x40
 800b96c:	461a      	mov	r2, r3
 800b96e:	2100      	movs	r1, #0
 800b970:	f00d fb4c 	bl	801900c <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff f957 	bl	800ac28 <_ZNK6tflite6Tensor4typeEv>
 800b97a:	4603      	mov	r3, r0
 800b97c:	4618      	mov	r0, r3
 800b97e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b982:	4619      	mov	r1, r3
 800b984:	f7f8 fda8 	bl	80044d8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800b988:	4603      	mov	r3, r0
 800b98a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b98e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 800b996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b99a:	e128      	b.n	800bbee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7ff fb25 	bl	800afec <_ZNK6tflite6Tensor11is_variableEv>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff ff9e 	bl	800b8f0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9b8:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 800b9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d103      	bne.n	800b9ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 800b9c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9c4:	2202      	movs	r2, #2
 800b9c6:	751a      	strb	r2, [r3, #20]
 800b9c8:	e002      	b.n	800b9d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 800b9ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 800b9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9d2:	f103 0118 	add.w	r1, r3, #24
 800b9d6:	f107 0210 	add.w	r2, r7, #16
 800b9da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff f9d3 	bl	800ad88 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b9e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 800b9f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800b9f4:	e0fb      	b.n	800bbee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff f908 	bl	800ac0c <_ZNK6tflite6Tensor5shapeEv>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	bf0c      	ite	eq
 800ba02:	2301      	moveq	r3, #1
 800ba04:	2300      	movne	r3, #0
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800ba0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba0e:	4a7a      	ldr	r2, [pc, #488]	; (800bbf8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 800ba10:	609a      	str	r2, [r3, #8]
 800ba12:	e013      	b.n	800ba3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff f8f9 	bl	800ac0c <_ZNK6tflite6Tensor5shapeEv>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba1e:	3308      	adds	r3, #8
 800ba20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f001 fb36 	bl	800d094 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800ba2e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 800ba36:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ba3a:	e0d8      	b.n	800bbee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff fac7 	bl	800afd0 <_ZNK6tflite6Tensor12quantizationEv>
 800ba42:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d021      	beq.n	800ba8e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 800ba4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba4c:	f7ff fa86 	bl	800af5c <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d01b      	beq.n	800ba8e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 800ba56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba58:	f7ff fa80 	bl	800af5c <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f001 f94b 	bl	800ccfa <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800ba64:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d011      	beq.n	800ba8e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 800ba6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba6c:	f7ff fa84 	bl	800af78 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800ba70:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00b      	beq.n	800ba8e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 800ba76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba78:	f7ff fa7e 	bl	800af78 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f001 f972 	bl	800cd68 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800ba84:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 800ba8e:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 80ab 	beq.w	800bbec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 800ba96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba98:	f7ff fa60 	bl	800af5c <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2100      	movs	r1, #0
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 f939 	bl	800cd18 <_ZNK11flatbuffers6VectorIfE3GetEm>
 800baa6:	eef0 7a40 	vmov.f32	s15, s0
 800baaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baac:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 800bab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bab2:	f7ff fa61 	bl	800af78 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2100      	movs	r1, #0
 800baba:	4618      	mov	r0, r3
 800babc:	f001 f962 	bl	800cd84 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800bac0:	4603      	mov	r3, r0
 800bac2:	460c      	mov	r4, r1
    result->params.zero_point =
 800bac4:	461a      	mov	r2, r3
 800bac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bac8:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 800baca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bacc:	f7ff fa46 	bl	800af5c <_ZNK6tflite22QuantizationParameters5scaleEv>
 800bad0:	4603      	mov	r3, r0
 800bad2:	4618      	mov	r0, r3
 800bad4:	f001 f911 	bl	800ccfa <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800bad8:	4603      	mov	r3, r0
 800bada:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800badc:	7afb      	ldrb	r3, [r7, #11]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d009      	beq.n	800baf6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1aa>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3310      	adds	r3, #16
 800bae8:	681b      	ldr	r3, [r3, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800baea:	2204      	movs	r2, #4
 800baec:	210c      	movs	r1, #12
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	4798      	blx	r3
 800baf2:	4603      	mov	r3, r0
 800baf4:	e008      	b.n	800bb08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1bc>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	330c      	adds	r3, #12
 800bafc:	681b      	ldr	r3, [r3, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800bafe:	2204      	movs	r2, #4
 800bb00:	210c      	movs	r1, #12
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	4798      	blx	r3
 800bb06:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 800bb08:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d105      	bne.n	800bb1c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1d0>
      TF_LITE_REPORT_ERROR(error_reporter,
 800bb10:	493a      	ldr	r1, [pc, #232]	; (800bbfc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 800bb12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bb14:	f7f7 fa50 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e068      	b.n	800bbee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800bb1c:	7afb      	ldrb	r3, [r7, #11]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00d      	beq.n	800bb3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f2>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3310      	adds	r3, #16
 800bb28:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800bb2a:	6a38      	ldr	r0, [r7, #32]
 800bb2c:	f7f5 fac4 	bl	80010b8 <TfLiteIntArrayGetSizeInBytes>
 800bb30:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800bb32:	2204      	movs	r2, #4
 800bb34:	4619      	mov	r1, r3
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	47a0      	blx	r4
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	e00c      	b.n	800bb58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20c>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	330c      	adds	r3, #12
 800bb44:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800bb46:	6a38      	ldr	r0, [r7, #32]
 800bb48:	f7f5 fab6 	bl	80010b8 <TfLiteIntArrayGetSizeInBytes>
 800bb4c:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800bb4e:	2204      	movs	r2, #4
 800bb50:	4619      	mov	r1, r3
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	47a0      	blx	r4
 800bb56:	4602      	mov	r2, r0
    quantization->zero_point =
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	605a      	str	r2, [r3, #4]
    if (quantization->zero_point == nullptr) {
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d105      	bne.n	800bb70 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x224>
      TF_LITE_REPORT_ERROR(error_reporter,
 800bb64:	4926      	ldr	r1, [pc, #152]	; (800bc00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b4>)
 800bb66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bb68:	f7f7 fa26 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e03e      	b.n	800bbee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800bb70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb72:	f7ff f9f3 	bl	800af5c <_ZNK6tflite22QuantizationParameters5scaleEv>
 800bb76:	4602      	mov	r2, r0
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f001 faa2 	bl	800d0c6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800bb82:	4603      	mov	r3, r0
 800bb84:	76fb      	strb	r3, [r7, #27]
 800bb86:	7efb      	ldrb	r3, [r7, #27]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d001      	beq.n	800bb90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
 800bb8c:	7efb      	ldrb	r3, [r7, #27]
 800bb8e:	e02e      	b.n	800bbee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	6a3a      	ldr	r2, [r7, #32]
 800bb96:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 800bba0:	2300      	movs	r3, #0
 800bba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bba6:	6a3b      	ldr	r3, [r7, #32]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	da12      	bge.n	800bbd2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 800bbac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbae:	f7ff f9e3 	bl	800af78 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4610      	mov	r0, r2
 800bbba:	f001 f8e3 	bl	800cd84 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800bbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 800bbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbcc:	3301      	adds	r3, #1
 800bbce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbd0:	e7e8      	b.n	800bba4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 800bbd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbd4:	f7ff f9de 	bl	800af94 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 800bbde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bbe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe8:	69fa      	ldr	r2, [r7, #28]
 800bbea:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3734      	adds	r7, #52	; 0x34
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd90      	pop	{r4, r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	0801f458 	.word	0x0801f458
 800bbfc:	0801d388 	.word	0x0801d388
 800bc00:	0801d3b8 	.word	0x0801d3b8

0800bc04 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	603b      	str	r3, [r7, #0]
  *result = {};
 800bc12:	6a3b      	ldr	r3, [r7, #32]
 800bc14:	461a      	mov	r2, r3
 800bc16:	2300      	movs	r3, #0
 800bc18:	6013      	str	r3, [r2, #0]
 800bc1a:	6053      	str	r3, [r2, #4]
 800bc1c:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800bc1e:	68b8      	ldr	r0, [r7, #8]
 800bc20:	f7ff f802 	bl	800ac28 <_ZNK6tflite6Tensor4typeEv>
 800bc24:	4603      	mov	r3, r0
 800bc26:	4618      	mov	r0, r3
 800bc28:	6a3b      	ldr	r3, [r7, #32]
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	4619      	mov	r1, r3
 800bc30:	f7f8 fc52 	bl	80044d8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800bc34:	4603      	mov	r3, r0
 800bc36:	75fb      	strb	r3, [r7, #23]
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d001      	beq.n	800bc42 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
 800bc40:	e027      	b.n	800bc92 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	68b8      	ldr	r0, [r7, #8]
 800bc46:	f7ff fe53 	bl	800b8f0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 800bc50:	68b8      	ldr	r0, [r7, #8]
 800bc52:	f7fe ffdb 	bl	800ac0c <_ZNK6tflite6Tensor5shapeEv>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	bf0c      	ite	eq
 800bc5c:	2301      	moveq	r3, #1
 800bc5e:	2300      	movne	r3, #0
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	4a0c      	ldr	r2, [pc, #48]	; (800bc9c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 800bc6a:	605a      	str	r2, [r3, #4]
 800bc6c:	e010      	b.n	800bc90 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800bc6e:	68b8      	ldr	r0, [r7, #8]
 800bc70:	f7fe ffcc 	bl	800ac0c <_ZNK6tflite6Tensor5shapeEv>
 800bc74:	4602      	mov	r2, r0
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	3304      	adds	r3, #4
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f001 fa09 	bl	800d094 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800bc82:	4603      	mov	r3, r0
 800bc84:	75bb      	strb	r3, [r7, #22]
 800bc86:	7dbb      	ldrb	r3, [r7, #22]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d001      	beq.n	800bc90 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 800bc8c:	7dbb      	ldrb	r3, [r7, #22]
 800bc8e:	e000      	b.n	800bc92 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3718      	adds	r7, #24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	0801f458 	.word	0x0801f458

0800bca0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 800bcac:	4a0c      	ldr	r2, [pc, #48]	; (800bce0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	605a      	str	r2, [r3, #4]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	609a      	str	r2, [r3, #8]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	731a      	strb	r2, [r3, #12]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	611a      	str	r2, [r3, #16]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	615a      	str	r2, [r3, #20]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	0801f47c 	.word	0x0801f47c

0800bce4 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	4a04      	ldr	r2, [pc, #16]	; (800bd00 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	0801f47c 	.word	0x0801f47c

0800bd04 <_ZN6tflite14MicroAllocatorD0Ev>:
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7ff ffe9 	bl	800bce4 <_ZN6tflite14MicroAllocatorD1Ev>
 800bd12:	2118      	movs	r1, #24
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f00a fd62 	bl	80167de <_ZdlPvj>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 800bd30:	2110      	movs	r1, #16
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7fe ff88 	bl	800ac48 <_ZN6tflite14AlignPointerUpEPhj>
 800bd38:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	4413      	add	r3, r2
 800bd40:	461a      	mov	r2, r3
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	6979      	ldr	r1, [r7, #20]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f003 fdbf 	bl	800f8d0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 800bd52:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
 800bd54:	6879      	ldr	r1, [r7, #4]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 f805 	bl	800bd66 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800bd5c:	4603      	mov	r3, r0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 800bd66:	b590      	push	{r4, r7, lr}
 800bd68:	b085      	sub	sp, #20
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 800bd76:	f00c ffce 	bl	8018d16 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 800bd80:	f00c ffc9 	bl	8018d16 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	330c      	adds	r3, #12
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2204      	movs	r2, #4
 800bd8e:	2118      	movs	r1, #24
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	4798      	blx	r3
 800bd94:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	4619      	mov	r1, r3
 800bd9a:	2018      	movs	r0, #24
 800bd9c:	f7f8 f94c 	bl	8004038 <_ZnwjPv>
 800bda0:	4604      	mov	r4, r0
 800bda2:	2c00      	cmp	r4, #0
 800bda4:	d006      	beq.n	800bdb4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x4e>
 800bda6:	683a      	ldr	r2, [r7, #0]
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f7ff ff78 	bl	800bca0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800bdb0:	4623      	mov	r3, r4
 800bdb2:	e000      	b.n	800bdb6 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x50>
 800bdb4:	4623      	mov	r3, r4
 800bdb6:	60bb      	str	r3, [r7, #8]
  return allocator;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd90      	pop	{r4, r7, pc}
	...

0800bdc4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations,
    TfLiteEvalTensor** eval_tensors) {
 800bdc4:	b590      	push	{r4, r7, lr}
 800bdc6:	b087      	sub	sp, #28
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
 800bdd0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x18>
 800bdd8:	f00c ff9d 	bl	8018d16 <abort>

  if (model_is_allocating_) {
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	7b1b      	ldrb	r3, [r3, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d007      	beq.n	800bdf4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x30>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	4923      	ldr	r1, [pc, #140]	; (800be78 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xb4>)
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7f7 f8e4 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e03c      	b.n	800be6e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  }

  model_is_allocating_ = true;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(InitScratchBufferData());
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 fe68 	bl	800cad0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 800be00:	4603      	mov	r3, r0
 800be02:	75fb      	strb	r3, [r7, #23]
 800be04:	7dfb      	ldrb	r3, [r7, #23]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x4a>
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
 800be0c:	e02f      	b.n	800be6e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  TF_LITE_ENSURE_STATUS(AllocateTfLiteEvalTensors(model, eval_tensors));
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3320      	adds	r3, #32
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be18:	68b9      	ldr	r1, [r7, #8]
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	4798      	blx	r3
 800be1e:	4603      	mov	r3, r0
 800be20:	75bb      	strb	r3, [r7, #22]
 800be22:	7dbb      	ldrb	r3, [r7, #22]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x68>
 800be28:	7dbb      	ldrb	r3, [r7, #22]
 800be2a:	e020      	b.n	800be6e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  TF_LITE_ENSURE_STATUS(
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3318      	adds	r3, #24
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	68b9      	ldr	r1, [r7, #8]
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	4798      	blx	r3
 800be3c:	4603      	mov	r3, r0
 800be3e:	757b      	strb	r3, [r7, #21]
 800be40:	7d7b      	ldrb	r3, [r7, #21]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x86>
 800be46:	7d7b      	ldrb	r3, [r7, #21]
 800be48:	e011      	b.n	800be6e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
      AllocateNodeAndRegistrations(model, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	331c      	adds	r3, #28
 800be50:	681c      	ldr	r4, [r3, #0]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	68b9      	ldr	r1, [r7, #8]
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	47a0      	blx	r4
 800be5e:	4603      	mov	r3, r0
 800be60:	753b      	strb	r3, [r7, #20]
 800be62:	7d3b      	ldrb	r3, [r7, #20]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xa8>
 800be68:	7d3b      	ldrb	r3, [r7, #20]
 800be6a:	e000      	b.n	800be6e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
      model, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	371c      	adds	r7, #28
 800be72:	46bd      	mov	sp, r7
 800be74:	bd90      	pop	{r4, r7, pc}
 800be76:	bf00      	nop
 800be78:	0801d3e8 	.word	0x0801d3e8

0800be7c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle** scratch_buffer_handles) {
 800be7c:	b590      	push	{r4, r7, lr}
 800be7e:	b089      	sub	sp, #36	; 0x24
 800be80:	af02      	add	r7, sp, #8
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	7b1b      	ldrb	r3, [r3, #12]
 800be8e:	f083 0301 	eor.w	r3, r3, #1
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b00      	cmp	r3, #0
 800be96:	d007      	beq.n	800bea8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	4924      	ldr	r1, [pc, #144]	; (800bf30 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xb4>)
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7f7 f88a 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 800bea4:	2301      	movs	r3, #1
 800bea6:	e03f      	b.n	800bf28 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800bea8:	68b9      	ldr	r1, [r7, #8]
 800beaa:	68f8      	ldr	r0, [r7, #12]
 800beac:	f000 fc86 	bl	800c7bc <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800beb0:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x40>
 800beb8:	f00c ff2d 	bl	8018d16 <abort>

  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	3334      	adds	r3, #52	; 0x34
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	6912      	ldr	r2, [r2, #16]
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	4798      	blx	r3
 800bece:	4603      	mov	r3, r0
 800bed0:	74fb      	strb	r3, [r7, #19]
 800bed2:	7cfb      	ldrb	r3, [r7, #19]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d001      	beq.n	800bedc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x60>
 800bed8:	7cfb      	ldrb	r3, [r7, #19]
 800beda:	e025      	b.n	800bf28 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
      scratch_buffer_handles, scratch_buffer_request_count_));
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3330      	adds	r3, #48	; 0x30
 800bee2:	681c      	ldr	r4, [r3, #0]
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	68b9      	ldr	r1, [r7, #8]
 800bef0:	68f8      	ldr	r0, [r7, #12]
 800bef2:	47a0      	blx	r4
 800bef4:	4603      	mov	r3, r0
 800bef6:	74bb      	strb	r3, [r7, #18]
 800bef8:	7cbb      	ldrb	r3, [r7, #18]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d001      	beq.n	800bf02 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x86>
 800befe:	7cbb      	ldrb	r3, [r7, #18]
 800bf00:	e012      	b.n	800bf28 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
                                               *scratch_buffer_handles));
  TF_LITE_ENSURE_STATUS(AllocateVariables(subgraph, eval_tensors));
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3324      	adds	r3, #36	; 0x24
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	6979      	ldr	r1, [r7, #20]
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	4798      	blx	r3
 800bf12:	4603      	mov	r3, r0
 800bf14:	747b      	strb	r3, [r7, #17]
 800bf16:	7c7b      	ldrb	r3, [r7, #17]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xa4>
 800bf1c:	7c7b      	ldrb	r3, [r7, #17]
 800bf1e:	e003      	b.n	800bf28 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>

  model_is_allocating_ = false;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	371c      	adds	r7, #28
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd90      	pop	{r4, r7, pc}
 800bf30:	0801d440 	.word	0x0801d440

0800bf34 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6858      	ldr	r0, [r3, #4]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	330c      	adds	r3, #12
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2210      	movs	r2, #16
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	4798      	blx	r3
 800bf52:	4603      	mov	r3, r0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int* buffer_idx) {
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b088      	sub	sp, #32
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f000 fdce 	bl	800cb0a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800bf6e:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800bf74:	2300      	movs	r3, #0
 800bf76:	61bb      	str	r3, [r7, #24]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	69ba      	ldr	r2, [r7, #24]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d20e      	bcs.n	800bfa0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	00db      	lsls	r3, r3, #3
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	4413      	add	r3, r2
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf90:	d102      	bne.n	800bf98 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x3c>
      ++current_node_request_count;
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	3301      	adds	r3, #1
 800bf96:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	61bb      	str	r3, [r7, #24]
 800bf9e:	e7eb      	b.n	800bf78 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x1c>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	2b07      	cmp	r3, #7
 800bfa4:	d908      	bls.n	800bfb8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x5c>
    TF_LITE_REPORT_ERROR(
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	2208      	movs	r2, #8
 800bfac:	4913      	ldr	r1, [pc, #76]	; (800bffc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0xa0>)
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7f7 f802 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e01c      	b.n	800bff2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x96>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	613b      	str	r3, [r7, #16]
  *current_request = {};
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	2300      	movs	r3, #0
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfda:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3720      	adds	r7, #32
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	0801d48c 	.word	0x0801d48c

0800c000 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3308      	adds	r3, #8
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fd77 	bl	800cb0a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800c01c:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800c01e:	2300      	movs	r3, #0
 800c020:	617b      	str	r3, [r7, #20]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	697a      	ldr	r2, [r7, #20]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d211      	bcs.n	800c050 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	4413      	add	r3, r2
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03a:	d105      	bne.n	800c048 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	4413      	add	r3, r2
 800c044:	683a      	ldr	r2, [r7, #0]
 800c046:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	3301      	adds	r3, #1
 800c04c:	617b      	str	r3, [r7, #20]
 800c04e:	e7e8      	b.n	800c022 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6858      	ldr	r0, [r3, #4]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3308      	adds	r3, #8
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	6912      	ldr	r2, [r2, #16]
 800c062:	3208      	adds	r2, #8
 800c064:	00d1      	lsls	r1, r2, #3
 800c066:	2204      	movs	r2, #4
 800c068:	4798      	blx	r3
 800c06a:	4603      	mov	r3, r0
 800c06c:	73fb      	strb	r3, [r7, #15]
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	e000      	b.n	800c07a <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3718      	adds	r7, #24
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, NodeAndRegistration** node_and_registrations) {
 800c084:	b5b0      	push	{r4, r5, r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(node_and_registrations);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x16>
 800c096:	f00c fe3e 	bl	8018d16 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800c09a:	68b9      	ldr	r1, [r7, #8]
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f000 fb8d 	bl	800c7bc <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800c0a2:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d101      	bne.n	800c0ae <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x2a>
 800c0aa:	f00c fe34 	bl	8018d16 <abort>

  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	685d      	ldr	r5, [r3, #4]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	685b      	ldr	r3, [r3, #4]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
          alignof(NodeAndRegistration)));
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 800c0bc:	6978      	ldr	r0, [r7, #20]
 800c0be:	f7ff f80c 	bl	800b0da <_ZNK6tflite8SubGraph9operatorsEv>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 feb9 	bl	800ce3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4413      	add	r3, r2
 800c0d2:	00db      	lsls	r3, r3, #3
          alignof(NodeAndRegistration)));
 800c0d4:	2204      	movs	r2, #4
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	4628      	mov	r0, r5
 800c0da:	47a0      	blx	r4
 800c0dc:	6138      	str	r0, [r7, #16]
  if (output == nullptr) {
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d107      	bne.n	800c0f4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
    TF_LITE_REPORT_ERROR(
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	4906      	ldr	r1, [pc, #24]	; (800c104 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x80>)
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7f6 ff64 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e003      	b.n	800c0fc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x78>
  }
  *node_and_registrations = output;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bdb0      	pop	{r4, r5, r7, pc}
 800c104:	0801d4c4 	.word	0x0801d4c4

0800c108 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 800c108:	b5b0      	push	{r4, r5, r7, lr}
 800c10a:	b098      	sub	sp, #96	; 0x60
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
 800c114:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d101      	bne.n	800c120 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x18>
 800c11c:	f00c fdfb 	bl	8018d16 <abort>
  TFLITE_DCHECK(node_and_registrations != nullptr);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
 800c126:	f00c fdf6 	bl	8018d16 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800c12a:	68b9      	ldr	r1, [r7, #8]
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f000 fb45 	bl	800c7bc <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800c132:	6538      	str	r0, [r7, #80]	; 0x50
  TFLITE_DCHECK(subgraph != nullptr);
 800c134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c136:	2b00      	cmp	r3, #0
 800c138:	d101      	bne.n	800c13e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x36>
 800c13a:	f00c fdec 	bl	8018d16 <abort>

  TfLiteStatus status = kTfLiteOk;
 800c13e:	2300      	movs	r3, #0
 800c140:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  auto* opcodes = model->operator_codes();
 800c144:	68b8      	ldr	r0, [r7, #8]
 800c146:	f7ff f801 	bl	800b14c <_ZNK6tflite5Model14operator_codesEv>
 800c14a:	64b8      	str	r0, [r7, #72]	; 0x48
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	f107 0320 	add.w	r3, r7, #32
 800c154:	4611      	mov	r1, r2
 800c156:	4618      	mov	r0, r3
 800c158:	f7ff f860 	bl	800b21c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800c15c:	2300      	movs	r3, #0
 800c15e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c160:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c162:	f7fe ffba 	bl	800b0da <_ZNK6tflite8SubGraph9operatorsEv>
 800c166:	4603      	mov	r3, r0
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 fe67 	bl	800ce3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800c16e:	4602      	mov	r2, r0
 800c170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c172:	4293      	cmp	r3, r2
 800c174:	bf34      	ite	cc
 800c176:	2301      	movcc	r3, #1
 800c178:	2300      	movcs	r3, #0
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 812c 	beq.w	800c3da <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d2>
    const auto* op = subgraph->operators()->Get(i);
 800c182:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c184:	f7fe ffa9 	bl	800b0da <_ZNK6tflite8SubGraph9operatorsEv>
 800c188:	4603      	mov	r3, r0
 800c18a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 fe63 	bl	800ce58 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800c192:	6478      	str	r0, [r7, #68]	; 0x44
    const size_t index = op->opcode_index();
 800c194:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c196:	f7fe ff3d 	bl	800b014 <_ZNK6tflite8Operator12opcode_indexEv>
 800c19a:	6438      	str	r0, [r7, #64]	; 0x40
    if (index >= opcodes->size()) {
 800c19c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c19e:	f000 fe81 	bl	800cea4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	bf2c      	ite	cs
 800c1aa:	2301      	movcs	r3, #1
 800c1ac:	2300      	movcc	r3, #0
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d008      	beq.n	800c1c6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xbe>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1ba:	498d      	ldr	r1, [pc, #564]	; (800c3f0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2e8>)
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7f6 fefb 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 800c1c2:	2401      	movs	r4, #1
 800c1c4:	e10a      	b.n	800c3dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    auto* opcode = (*opcodes)[index];
 800c1c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c1ca:	f000 ff95 	bl	800d0f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 800c1ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 800c1d0:	6879      	ldr	r1, [r7, #4]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 800c1d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	00db      	lsls	r3, r3, #3
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 800c1e6:	3324      	adds	r3, #36	; 0x24
    status =
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c1ec:	f002 fcc8 	bl	800eb80 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (status != kTfLiteOk) {
 800c1f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d011      	beq.n	800c222 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11a>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	689c      	ldr	r4, [r3, #8]
 800c202:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c204:	f003 fac9 	bl	800f79a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800c208:	4603      	mov	r3, r0
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe fe80 	bl	800af10 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800c210:	4603      	mov	r3, r0
 800c212:	461a      	mov	r2, r3
 800c214:	4977      	ldr	r1, [pc, #476]	; (800c3f4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ec>)
 800c216:	4620      	mov	r0, r4
 800c218:	f7f6 fece 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
      return status;
 800c21c:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 800c220:	e0dc      	b.n	800c3dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    const auto* registration = node_and_registrations[i].registration;
 800c222:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c224:	4613      	mov	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4413      	add	r3, r2
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	461a      	mov	r2, r3
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	4413      	add	r3, r2
 800c232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c234:	63bb      	str	r3, [r7, #56]	; 0x38
    if (registration == nullptr) {
 800c236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d108      	bne.n	800c24e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x146>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c242:	496d      	ldr	r1, [pc, #436]	; (800c3f8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f0>)
 800c244:	4618      	mov	r0, r3
 800c246:	f7f6 feb7 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 800c24a:	2401      	movs	r4, #1
 800c24c:	e0c6      	b.n	800c3dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 800c24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c250:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 800c252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    const char* custom_data = nullptr;
 800c256:	2300      	movs	r3, #0
 800c258:	65bb      	str	r3, [r7, #88]	; 0x58
    size_t custom_data_size = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char* builtin_data = nullptr;
 800c25e:	2300      	movs	r3, #0
 800c260:	61fb      	str	r3, [r7, #28]

    if (op_type == BuiltinOperator_CUSTOM) {
 800c262:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c266:	2b20      	cmp	r3, #32
 800c268:	d11b      	bne.n	800c2a2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x19a>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 800c26a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c26c:	f7fe fefd 	bl	800b06a <_ZNK6tflite8Operator14custom_optionsEv>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	bf14      	ite	ne
 800c276:	2301      	movne	r3, #1
 800c278:	2300      	moveq	r3, #0
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d059      	beq.n	800c334 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 800c280:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c282:	f7fe fef2 	bl	800b06a <_ZNK6tflite8Operator14custom_optionsEv>
 800c286:	4603      	mov	r3, r0
        custom_data =
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 fef7 	bl	800d07c <_ZNK11flatbuffers6VectorIhE4dataEv>
 800c28e:	65b8      	str	r0, [r7, #88]	; 0x58
        custom_data_size = op->custom_options()->size();
 800c290:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c292:	f7fe feea 	bl	800b06a <_ZNK6tflite8Operator14custom_optionsEv>
 800c296:	4603      	mov	r3, r0
 800c298:	4618      	mov	r0, r3
 800c29a:	f000 fd20 	bl	800ccde <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800c29e:	6578      	str	r0, [r7, #84]	; 0x54
 800c2a0:	e048      	b.n	800c334 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
      }
    } else {
      if (op->custom_options() != nullptr) {
 800c2a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c2a4:	f7fe fee1 	bl	800b06a <_ZNK6tflite8Operator14custom_optionsEv>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	bf14      	ite	ne
 800c2ae:	2301      	movne	r3, #1
 800c2b0:	2300      	moveq	r3, #0
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00e      	beq.n	800c2d6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ce>
        TF_LITE_REPORT_ERROR(
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	689c      	ldr	r4, [r3, #8]
 800c2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fe fe25 	bl	800af10 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	494c      	ldr	r1, [pc, #304]	; (800c3fc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f4>)
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f7f6 fe73 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 800c2d2:	2401      	movs	r4, #1
 800c2d4:	e082      	b.n	800c3dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	331c      	adds	r3, #28
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	4798      	blx	r3
 800c2e8:	6338      	str	r0, [r7, #48]	; 0x30
      if (parser == nullptr) {
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10e      	bne.n	800c30e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x206>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	689c      	ldr	r4, [r3, #8]
 800c2f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7fe fe09 	bl	800af10 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800c2fe:	4603      	mov	r3, r0
 800c300:	461a      	mov	r2, r3
 800c302:	493f      	ldr	r1, [pc, #252]	; (800c400 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f8>)
 800c304:	4620      	mov	r0, r4
 800c306:	f7f6 fe57 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 800c30a:	2401      	movs	r4, #1
 800c30c:	e066      	b.n	800c3dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6899      	ldr	r1, [r3, #8]
 800c312:	f107 031c 	add.w	r3, r7, #28
 800c316:	f107 0220 	add.w	r2, r7, #32
 800c31a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800c31c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c31e:	47a0      	blx	r4
 800c320:	4603      	mov	r3, r0
 800c322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d002      	beq.n	800c334 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
 800c32e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800c332:	e053      	b.n	800c3dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	685c      	ldr	r4, [r3, #4]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	689d      	ldr	r5, [r3, #8]
 800c33c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c33e:	f7fe fe78 	bl	800b032 <_ZNK6tflite8Operator6inputsEv>
 800c342:	4602      	mov	r2, r0
 800c344:	f107 0318 	add.w	r3, r7, #24
 800c348:	4629      	mov	r1, r5
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 fea2 	bl	800d094 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800c350:	4603      	mov	r3, r0
 800c352:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c356:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d002      	beq.n	800c364 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x25c>
 800c35e:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 800c362:	e03b      	b.n	800c3dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	685c      	ldr	r4, [r3, #4]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	689d      	ldr	r5, [r3, #8]
 800c36c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c36e:	f7fe fe6e 	bl	800b04e <_ZNK6tflite8Operator7outputsEv>
 800c372:	4602      	mov	r2, r0
 800c374:	f107 0314 	add.w	r3, r7, #20
 800c378:	4629      	mov	r1, r5
 800c37a:	4620      	mov	r0, r4
 800c37c:	f000 fe8a 	bl	800d094 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800c380:	4603      	mov	r3, r0
 800c382:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800c386:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d002      	beq.n	800c394 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x28c>
 800c38e:	f897 402d 	ldrb.w	r4, [r7, #45]	; 0x2d
 800c392:	e023      	b.n	800c3dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 800c394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c396:	4613      	mov	r3, r2
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	4413      	add	r3, r2
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	461a      	mov	r2, r3
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	62bb      	str	r3, [r7, #40]	; 0x28
    *node = {};
 800c3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	2324      	movs	r3, #36	; 0x24
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	f00c fe2c 	bl	801900c <memset>
    node->inputs = inputs_array;
 800c3b4:	69ba      	ldr	r2, [r7, #24]
 800c3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b8:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800c3c0:	69fa      	ldr	r2, [r7, #28]
 800c3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c4:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 800c3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3ca:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 800c3cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d0:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800c3d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3d8:	e6c2      	b.n	800c160 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
  }

  return kTfLiteOk;
 800c3da:	2400      	movs	r4, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 800c3dc:	f107 0320 	add.w	r3, r7, #32
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f001 f915 	bl	800d610 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800c3e6:	4623      	mov	r3, r4
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3760      	adds	r7, #96	; 0x60
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bdb0      	pop	{r4, r5, r7, pc}
 800c3f0:	0801d4fc 	.word	0x0801d4fc
 800c3f4:	0801d528 	.word	0x0801d528
 800c3f8:	0801d558 	.word	0x0801d558
 800c3fc:	0801d57c 	.word	0x0801d57c
 800c400:	0801d5c4 	.word	0x0801d5c4

0800c404 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 800c404:	b590      	push	{r4, r7, lr}
 800c406:	b089      	sub	sp, #36	; 0x24
 800c408:	af02      	add	r7, sp, #8
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
 800c410:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800c412:	68b9      	ldr	r1, [r7, #8]
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f000 f9d1 	bl	800c7bc <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800c41a:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 800c422:	f00c fc78 	bl	8018d16 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor =
      AllocatePersistentTfLiteTensorInternal(model, eval_tensors, tensor_index);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3328      	adds	r3, #40	; 0x28
 800c42c:	681c      	ldr	r4, [r3, #0]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	68b9      	ldr	r1, [r7, #8]
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	47a0      	blx	r4
 800c438:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/false) !=
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	332c      	adds	r3, #44	; 0x2c
 800c440:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800c442:	2300      	movs	r3, #0
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	697a      	ldr	r2, [r7, #20]
 800c44e:	68b9      	ldr	r1, [r7, #8]
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	47a0      	blx	r4
 800c454:	4603      	mov	r3, r0
                                         /*allocate_temp=*/false) !=
 800c456:	2b00      	cmp	r3, #0
 800c458:	bf14      	ite	ne
 800c45a:	2301      	movne	r3, #1
 800c45c:	2300      	moveq	r3, #0
 800c45e:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800c460:	2b00      	cmp	r3, #0
 800c462:	d007      	beq.n	800c474 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x70>
      kTfLiteOk) {
    TF_LITE_REPORT_ERROR(error_reporter_,
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	490c      	ldr	r1, [pc, #48]	; (800c49c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7f6 fda4 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 800c470:	2300      	movs	r3, #0
 800c472:	e00e      	b.n	800c492 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
  }

  if (eval_tensors != nullptr) {
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00a      	beq.n	800c490 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8c>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	4613      	mov	r3, r2
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	4413      	add	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	461a      	mov	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4413      	add	r3, r2
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 800c490:	693b      	ldr	r3, [r7, #16]
}
 800c492:	4618      	mov	r0, r3
 800c494:	371c      	adds	r7, #28
 800c496:	46bd      	mov	sp, r7
 800c498:	bd90      	pop	{r4, r7, pc}
 800c49a:	bf00      	nop
 800c49c:	0801d5e4 	.word	0x0801d5e4

0800c4a0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 800c4a0:	b590      	push	{r4, r7, lr}
 800c4a2:	b089      	sub	sp, #36	; 0x24
 800c4a4:	af02      	add	r7, sp, #8
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	607a      	str	r2, [r7, #4]
 800c4ac:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800c4ae:	68b9      	ldr	r1, [r7, #8]
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f000 f983 	bl	800c7bc <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800c4b6:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 800c4be:	f00c fc2a 	bl	8018d16 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6858      	ldr	r0, [r3, #4]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3310      	adds	r3, #16
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2204      	movs	r2, #4
 800c4d2:	2140      	movs	r1, #64	; 0x40
 800c4d4:	4798      	blx	r3
 800c4d6:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	332c      	adds	r3, #44	; 0x2c
 800c4de:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	9301      	str	r3, [sp, #4]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	68b9      	ldr	r1, [r7, #8]
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	47a0      	blx	r4
 800c4f2:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bf14      	ite	ne
 800c4f8:	2301      	movne	r3, #1
 800c4fa:	2300      	moveq	r3, #0
 800c4fc:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d007      	beq.n	800c512 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x72>
    TF_LITE_REPORT_ERROR(
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	490c      	ldr	r1, [pc, #48]	; (800c538 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 800c508:	4618      	mov	r0, r3
 800c50a:	f7f6 fd55 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 800c50e:	2300      	movs	r3, #0
 800c510:	e00e      	b.n	800c530 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x90>
  }

  if (eval_tensors != nullptr) {
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00a      	beq.n	800c52e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	4613      	mov	r3, r2
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	461a      	mov	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4413      	add	r3, r2
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 800c52e:	693b      	ldr	r3, [r7, #16]
}
 800c530:	4618      	mov	r0, r3
 800c532:	371c      	adds	r7, #28
 800c534:	46bd      	mov	sp, r7
 800c536:	bd90      	pop	{r4, r7, pc}
 800c538:	0801d630 	.word	0x0801d630

0800c53c <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3314      	adds	r3, #20
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4610      	mov	r0, r2
 800c554:	4798      	blx	r3
}
 800c556:	bf00      	nop
 800c558:	3708      	adds	r7, #8
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
	...

0800c560 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, TfLiteEvalTensor** eval_tensors) {
 800c560:	b5b0      	push	{r4, r5, r7, lr}
 800c562:	b08c      	sub	sp, #48	; 0x30
 800c564:	af02      	add	r7, sp, #8
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x16>
 800c572:	f00c fbd0 	bl	8018d16 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800c576:	68b9      	ldr	r1, [r7, #8]
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f000 f91f 	bl	800c7bc <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800c57e:	6238      	str	r0, [r7, #32]
  TFLITE_DCHECK(subgraph != nullptr);
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x2a>
 800c586:	f00c fbc6 	bl	8018d16 <abort>

  size_t alloc_count = subgraph->tensors()->size();
 800c58a:	6a38      	ldr	r0, [r7, #32]
 800c58c:	f7fe fd7b 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800c590:	4603      	mov	r3, r0
 800c592:	4618      	mov	r0, r3
 800c594:	f000 fc1e 	bl	800cdd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800c598:	61f8      	str	r0, [r7, #28]
  TfLiteEvalTensor* tensors =
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6858      	ldr	r0, [r3, #4]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	330c      	adds	r3, #12
 800c5a6:	681c      	ldr	r4, [r3, #0]
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800c5a8:	69fa      	ldr	r2, [r7, #28]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	4413      	add	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
          sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 800c5b2:	2204      	movs	r2, #4
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	47a0      	blx	r4
 800c5b8:	61b8      	str	r0, [r7, #24]
  if (tensors == nullptr) {
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10c      	bne.n	800c5da <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6898      	ldr	r0, [r3, #8]
 800c5c4:	69fa      	ldr	r2, [r7, #28]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	4413      	add	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	4921      	ldr	r1, [pc, #132]	; (800c658 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf8>)
 800c5d2:	f7f6 fcf1 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate memory for context->eval_tensors, "
                         "%d bytes required",
                         sizeof(TfLiteEvalTensor) * alloc_count);
    return kTfLiteError;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e03a      	b.n	800c650 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  }

  for (size_t i = 0; i < alloc_count; ++i) {
 800c5da:	2300      	movs	r3, #0
 800c5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c5de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d230      	bcs.n	800c648 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe8>
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 800c5ea:	6a38      	ldr	r0, [r7, #32]
 800c5ec:	f7fe fd4b 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f000 fbfb 	bl	800cdf0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800c5fa:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800c5fc:	68b8      	ldr	r0, [r7, #8]
 800c5fe:	f7fe fdc1 	bl	800b184 <_ZNK6tflite5Model7buffersEv>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &tensors[i]);
 800c606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c608:	4613      	mov	r3, r2
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	461a      	mov	r2, r3
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	4413      	add	r3, r2
        error_reporter_, &tensors[i]);
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	460b      	mov	r3, r1
 800c61a:	4602      	mov	r2, r0
 800c61c:	4629      	mov	r1, r5
 800c61e:	4620      	mov	r0, r4
 800c620:	f7ff faf0 	bl	800bc04 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 800c624:	4603      	mov	r3, r0
 800c626:	75fb      	strb	r3, [r7, #23]
    if (status != kTfLiteOk) {
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d008      	beq.n	800c640 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe0>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c634:	4909      	ldr	r1, [pc, #36]	; (800c65c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xfc>)
 800c636:	4618      	mov	r0, r3
 800c638:	f7f6 fcbe 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e007      	b.n	800c650 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  for (size_t i = 0; i < alloc_count; ++i) {
 800c640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c642:	3301      	adds	r3, #1
 800c644:	627b      	str	r3, [r7, #36]	; 0x24
 800c646:	e7ca      	b.n	800c5de <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7e>
    }
  }
  *eval_tensors = tensors;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	69ba      	ldr	r2, [r7, #24]
 800c64c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3728      	adds	r7, #40	; 0x28
 800c654:	46bd      	mov	sp, r7
 800c656:	bdb0      	pop	{r4, r5, r7, pc}
 800c658:	0801d674 	.word	0x0801d674
 800c65c:	0801d6bc 	.word	0x0801d6bc

0800c660 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 800c660:	b5b0      	push	{r4, r5, r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800c66c:	2300      	movs	r3, #0
 800c66e:	61fb      	str	r3, [r7, #28]
 800c670:	68b8      	ldr	r0, [r7, #8]
 800c672:	f7fe fd08 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800c676:	4603      	mov	r3, r0
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 fbab 	bl	800cdd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800c67e:	4602      	mov	r2, r0
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	4293      	cmp	r3, r2
 800c684:	bf34      	ite	cc
 800c686:	2301      	movcc	r3, #1
 800c688:	2300      	movcs	r3, #0
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d04f      	beq.n	800c730 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 800c690:	68b8      	ldr	r0, [r7, #8]
 800c692:	f7fe fcf8 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800c696:	4603      	mov	r3, r0
 800c698:	69f9      	ldr	r1, [r7, #28]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 fba8 	bl	800cdf0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800c6a0:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 800c6a2:	69b8      	ldr	r0, [r7, #24]
 800c6a4:	f7fe fca2 	bl	800afec <_ZNK6tflite6Tensor11is_variableEv>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d03c      	beq.n	800c728 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800c6ae:	69fa      	ldr	r2, [r7, #28]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4413      	add	r3, r2
 800c6be:	f107 0210 	add.w	r2, r7, #16
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7fe fbc0 	bl	800ae4a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	75fb      	strb	r3, [r7, #23]
 800c6ce:	7dfb      	ldrb	r3, [r7, #23]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d001      	beq.n	800c6d8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 800c6d4:	7dfb      	ldrb	r3, [r7, #23]
 800c6d6:	e02c      	b.n	800c732 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6858      	ldr	r0, [r3, #4]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	330c      	adds	r3, #12
 800c6e4:	681d      	ldr	r5, [r3, #0]
 800c6e6:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 800c6e8:	69fa      	ldr	r2, [r7, #28]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	005b      	lsls	r3, r3, #1
 800c6ee:	4413      	add	r3, r2
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800c6f8:	2210      	movs	r2, #16
 800c6fa:	47a8      	blx	r5
 800c6fc:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 800c6fe:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 800c700:	69fa      	ldr	r2, [r7, #28]
 800c702:	4613      	mov	r3, r2
 800c704:	005b      	lsls	r3, r3, #1
 800c706:	4413      	add	r3, r2
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	461a      	mov	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4413      	add	r3, r2
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d108      	bne.n	800c728 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	4907      	ldr	r1, [pc, #28]	; (800c73c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f6 fc4a 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 800c724:	2301      	movs	r3, #1
 800c726:	e004      	b.n	800c732 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	3301      	adds	r3, #1
 800c72c:	61fb      	str	r3, [r7, #28]
 800c72e:	e79f      	b.n	800c670 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3720      	adds	r7, #32
 800c736:	46bd      	mov	sp, r7
 800c738:	bdb0      	pop	{r4, r5, r7, pc}
 800c73a:	bf00      	nop
 800c73c:	0801d6dc 	.word	0x0801d6dc

0800c740 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	603b      	str	r3, [r7, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	6858      	ldr	r0, [r3, #4]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	330c      	adds	r3, #12
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2204      	movs	r2, #4
 800c75e:	2140      	movs	r1, #64	; 0x40
 800c760:	4798      	blx	r3
 800c762:	4603      	mov	r3, r0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, const SubGraph* subgraph, TfLiteTensor* tensor,
    int tensor_index, bool allocate_temp) {
 800c76c:	b5b0      	push	{r4, r5, r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af02      	add	r7, sp, #8
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
 800c778:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp, *subgraph->tensors()->Get(tensor_index),
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7fe fc81 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800c784:	4602      	mov	r2, r0
 800c786:	6a3b      	ldr	r3, [r7, #32]
 800c788:	4619      	mov	r1, r3
 800c78a:	4610      	mov	r0, r2
 800c78c:	f000 fb30 	bl	800cdf0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800c790:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800c792:	68b8      	ldr	r0, [r7, #8]
 800c794:	f7fe fcf6 	bl	800b184 <_ZNK6tflite5Model7buffersEv>
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	689b      	ldr	r3, [r3, #8]
      model->buffers(), error_reporter_, tensor);
 800c79c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	9201      	str	r2, [sp, #4]
 800c7a4:	9300      	str	r3, [sp, #0]
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	462a      	mov	r2, r5
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f7ff f8ce 	bl	800b94c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 800c7b0:	4603      	mov	r3, r0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c7bc <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 800c7c6:	6838      	ldr	r0, [r7, #0]
 800c7c8:	f7fe fcce 	bl	800b168 <_ZNK6tflite5Model9subgraphsEv>
 800c7cc:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f000 fb9c 	bl	800cf0c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	bf14      	ite	ne
 800c7da:	2301      	movne	r3, #1
 800c7dc:	2300      	moveq	r3, #0
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d007      	beq.n	800c7f4 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	4907      	ldr	r1, [pc, #28]	; (800c808 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7f6 fbe4 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	e004      	b.n	800c7fe <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x42>
  }
  return (*subgraphs)[0];
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f000 fc24 	bl	800d044 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800c7fc:	4603      	mov	r3, r0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	0801d70c 	.word	0x0801d70c

0800c80c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, const SubGraph* subgraph,
    TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles) {
 800c80c:	b590      	push	{r4, r7, lr}
 800c80e:	b0a3      	sub	sp, #140	; 0x8c
 800c810:	af02      	add	r7, sp, #8
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
 800c818:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	67fb      	str	r3, [r7, #124]	; 0x7c
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7fe fc31 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800c824:	4603      	mov	r3, r0
 800c826:	4618      	mov	r0, r3
 800c828:	f000 fad4 	bl	800cdd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800c82c:	4602      	mov	r2, r0
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	4413      	add	r3, r2
 800c834:	67bb      	str	r3, [r7, #120]	; 0x78
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 800c836:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c838:	4613      	mov	r3, r2
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	4413      	add	r3, r2
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	677b      	str	r3, [r7, #116]	; 0x74

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6858      	ldr	r0, [r3, #4]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3310      	adds	r3, #16
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2204      	movs	r2, #4
 800c852:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c854:	4798      	blx	r3
 800c856:	6738      	str	r0, [r7, #112]	; 0x70
  if (allocation_info == nullptr) {
 800c858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d108      	bne.n	800c870 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x64>
    TF_LITE_REPORT_ERROR(
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c864:	4983      	ldr	r1, [pc, #524]	; (800ca74 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x268>)
 800c866:	4618      	mov	r0, r3
 800c868:	f7f6 fba6 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 800c86c:	2401      	movs	r4, #1
 800c86e:	e0fb      	b.n	800ca68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7fe fc08 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800c876:	4603      	mov	r3, r0
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 faab 	bl	800cdd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800c87e:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	691a      	ldr	r2, [r3, #16]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	4613      	mov	r3, r2
 800c890:	460a      	mov	r2, r1
 800c892:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c894:	f7fe fcf8 	bl	800b288 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 800c898:	2300      	movs	r3, #0
 800c89a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TF_LITE_ENSURE_STATUS(
 800c89c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c8a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c8a4:	68b9      	ldr	r1, [r7, #8]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe febe 	bl	800b628 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800c8b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d002      	beq.n	800c8c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xb4>
 800c8ba:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 800c8be:	e0d3      	b.n	800ca68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 800c8c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c8c2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	6879      	ldr	r1, [r7, #4]
 800c8ca:	f7fe fcf7 	bl	800b2bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800c8d4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xd6>
 800c8dc:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 800c8e0:	e0c2      	b.n	800ca68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f000 f911 	bl	800cb0a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800c8e8:	66b8      	str	r0, [r7, #104]	; 0x68

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 800c8ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c8ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c8f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fe ff13 	bl	800b720 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c900:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c904:	2b00      	cmp	r3, #0
 800c906:	d002      	beq.n	800c90e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x102>
 800c908:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 800c90c:	e0ac      	b.n	800ca68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	2110      	movs	r1, #16
 800c914:	4618      	mov	r0, r3
 800c916:	f003 f8f5 	bl	800fb04 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800c91a:	6638      	str	r0, [r7, #96]	; 0x60
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6858      	ldr	r0, [r3, #4]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3310      	adds	r3, #16
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2210      	movs	r2, #16
 800c92c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c92e:	4798      	blx	r3
 800c930:	65f8      	str	r0, [r7, #92]	; 0x5c
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 800c932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10e      	bne.n	800c956 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x14a>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6898      	ldr	r0, [r3, #8]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6899      	ldr	r1, [r3, #8]
 800c940:	4b4d      	ldr	r3, [pc, #308]	; (800ca78 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x26c>)
 800c942:	9301      	str	r3, [sp, #4]
 800c944:	f240 4333 	movw	r3, #1075	; 0x433
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	4b4c      	ldr	r3, [pc, #304]	; (800ca7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x270>)
 800c94c:	4a4c      	ldr	r2, [pc, #304]	; (800ca80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x274>)
 800c94e:	f7f6 fb4c 	bl	8002fea <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800c952:	2401      	movs	r4, #1
 800c954:	e088      	b.n	800ca68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800c956:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c958:	f107 0310 	add.w	r3, r7, #16
 800c95c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fa fb3c 	bl	8006fdc <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6898      	ldr	r0, [r3, #8]
 800c968:	f107 0110 	add.w	r1, r7, #16
 800c96c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c96e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c970:	f7fe ff21 	bl	800b7b6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 800c974:	4603      	mov	r3, r0
 800c976:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800c97a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d002      	beq.n	800c988 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x17c>
 800c982:	f897 405b 	ldrb.w	r4, [r7, #91]	; 0x5b
 800c986:	e06a      	b.n	800ca5e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	3314      	adds	r3, #20
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4610      	mov	r0, r2
 800c998:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	2110      	movs	r1, #16
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f003 f8af 	bl	800fb04 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800c9a6:	6578      	str	r0, [r7, #84]	; 0x54

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 800c9a8:	f107 0310 	add.w	r3, r7, #16
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fa fdce 	bl	800754e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	bf34      	ite	cc
 800c9ba:	2301      	movcc	r3, #1
 800c9bc:	2300      	movcs	r3, #0
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00e      	beq.n	800c9e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1d6>
    TF_LITE_REPORT_ERROR(
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	689c      	ldr	r4, [r3, #8]
 800c9c8:	f107 0310 	add.w	r3, r7, #16
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fa fdbe 	bl	800754e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9d6:	492b      	ldr	r1, [pc, #172]	; (800ca84 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x278>)
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f7f6 faed 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 800c9de:	2401      	movs	r4, #1
 800c9e0:	e03d      	b.n	800ca5e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	689c      	ldr	r4, [r3, #8]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f003 f87e 	bl	800faec <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	f107 0110 	add.w	r1, r7, #16
 800c9f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f7fe ff34 	bl	800b86a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 800ca02:	4603      	mov	r3, r0
 800ca04:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800ca08:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x20a>
 800ca10:	f897 4053 	ldrb.w	r4, [r7, #83]	; 0x53
 800ca14:	e023      	b.n	800ca5e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
  head_usage = planner.GetMaximumMemorySize();
 800ca16:	f107 0310 	add.w	r3, r7, #16
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fa fd97 	bl	800754e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800ca20:	67f8      	str	r0, [r7, #124]	; 0x7c
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	695b      	ldr	r3, [r3, #20]
 800ca26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d902      	bls.n	800ca32 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x226>
    max_head_buffer_usage_ = head_usage;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ca30:	615a      	str	r2, [r3, #20]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6858      	ldr	r0, [r3, #4]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3308      	adds	r3, #8
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	6951      	ldr	r1, [r2, #20]
 800ca44:	2210      	movs	r2, #16
 800ca46:	4798      	blx	r3
 800ca48:	4603      	mov	r3, r0
 800ca4a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800ca4e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d002      	beq.n	800ca5c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x250>
 800ca56:	f897 4052 	ldrb.w	r4, [r7, #82]	; 0x52
 800ca5a:	e000      	b.n	800ca5e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 800ca5c:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800ca5e:	f107 0310 	add.w	r3, r7, #16
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fa fb0c 	bl	8007080 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800ca68:	4623      	mov	r3, r4
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3784      	adds	r7, #132	; 0x84
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd90      	pop	{r4, r7, pc}
 800ca72:	bf00      	nop
 800ca74:	0801d738 	.word	0x0801d738
 800ca78:	0801d7b4 	.word	0x0801d7b4
 800ca7c:	0801d77c 	.word	0x0801d77c
 800ca80:	0801d79c 	.word	0x0801d79c
 800ca84:	0801d7d0 	.word	0x0801d7d0

0800ca88 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d101      	bne.n	800ca9e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 800ca9a:	f00c f93c 	bl	8018d16 <abort>

  if (scratch_buffer_request_count_ == 0) {
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d101      	bne.n	800caaa <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 800caa6:	2300      	movs	r3, #0
 800caa8:	e00e      	b.n	800cac8 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6858      	ldr	r0, [r3, #4]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	330c      	adds	r3, #12
 800cab6:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	0091      	lsls	r1, r2, #2
 800cabc:	2204      	movs	r2, #4
 800cabe:	4798      	blx	r3
 800cac0:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	611a      	str	r2, [r3, #16]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6858      	ldr	r0, [r3, #4]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	3308      	adds	r3, #8
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2204      	movs	r2, #4
 800caee:	2140      	movs	r1, #64	; 0x40
 800caf0:	4798      	blx	r3
 800caf2:	4603      	mov	r3, r0
 800caf4:	73fb      	strb	r3, [r7, #15]
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d001      	beq.n	800cb00 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 800cafc:	7bfb      	ldrb	r3, [r7, #15]
 800cafe:	e000      	b.n	800cb02 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f002 ffe8 	bl	800faec <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800cb1c:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
 800cb1e:	2104      	movs	r1, #4
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fe f891 	bl	800ac48 <_ZN6tflite14AlignPointerUpEPhj>
 800cb26:	4603      	mov	r3, r0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3304      	adds	r3, #4
  }
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	781a      	ldrb	r2, [r3, #0]
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d305      	bcc.n	800cb6c <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	781a      	ldrb	r2, [r3, #0]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d201      	bcs.n	800cb70 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e000      	b.n	800cb72 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr

0800cb7e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	460b      	mov	r3, r1
 800cb88:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800cb8a:	887b      	ldrh	r3, [r7, #2]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 fac0 	bl	800d114 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800cb94:	4603      	mov	r3, r0
  }
 800cb96:	4618      	mov	r0, r3
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b082      	sub	sp, #8
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	460b      	mov	r3, r1
 800cba8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800cbaa:	887b      	ldrh	r3, [r7, #2]
 800cbac:	4619      	mov	r1, r3
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fad0 	bl	800d154 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800cbb4:	4603      	mov	r3, r0
  }
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b082      	sub	sp, #8
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800cbca:	887b      	ldrh	r3, [r7, #2]
 800cbcc:	4619      	mov	r1, r3
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fae0 	bl	800d194 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800cbd4:	4603      	mov	r3, r0
  }
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800cbea:	887b      	ldrh	r3, [r7, #2]
 800cbec:	4619      	mov	r1, r3
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 faf0 	bl	800d1d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800cbf4:	4603      	mov	r3, r0
  }
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b082      	sub	sp, #8
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	460b      	mov	r3, r1
 800cc08:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800cc0a:	887b      	ldrh	r3, [r7, #2]
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fb00 	bl	800d214 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800cc14:	4603      	mov	r3, r0
  }
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b082      	sub	sp, #8
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	460b      	mov	r3, r1
 800cc28:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800cc2a:	887b      	ldrh	r3, [r7, #2]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fb10 	bl	800d254 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800cc34:	4603      	mov	r3, r0
  }
 800cc36:	4618      	mov	r0, r3
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b082      	sub	sp, #8
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	460b      	mov	r3, r1
 800cc48:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800cc4a:	887b      	ldrh	r3, [r7, #2]
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fb20 	bl	800d294 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800cc54:	4603      	mov	r3, r0
  }
 800cc56:	4618      	mov	r0, r3
 800cc58:	3708      	adds	r7, #8
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b082      	sub	sp, #8
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	460b      	mov	r3, r1
 800cc68:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800cc6a:	887b      	ldrh	r3, [r7, #2]
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fb30 	bl	800d2d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800cc74:	4603      	mov	r3, r0
  }
 800cc76:	4618      	mov	r0, r3
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b082      	sub	sp, #8
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	460b      	mov	r3, r1
 800cc88:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800cc8a:	887b      	ldrh	r3, [r7, #2]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 fb40 	bl	800d314 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800cc94:	4603      	mov	r3, r0
  }
 800cc96:	4618      	mov	r0, r3
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b082      	sub	sp, #8
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
 800cca6:	460b      	mov	r3, r1
 800cca8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800ccaa:	887b      	ldrh	r3, [r7, #2]
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fb50 	bl	800d354 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800ccb4:	4603      	mov	r3, r0
  }
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b082      	sub	sp, #8
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800ccca:	887b      	ldrh	r3, [r7, #2]
 800cccc:	4619      	mov	r1, r3
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 fb60 	bl	800d394 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800ccd4:	4603      	mov	r3, r0
  }
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7f7 fe9a 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b082      	sub	sp, #8
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7f7 fe8c 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
	...

0800cd18 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7ff ffe9 	bl	800ccfa <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d306      	bcc.n	800cd3e <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 800cd30:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 800cd32:	4a0b      	ldr	r2, [pc, #44]	; (800cd60 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 800cd34:	f44f 7183 	mov.w	r1, #262	; 0x106
 800cd38:	480a      	ldr	r0, [pc, #40]	; (800cd64 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 800cd3a:	f00b fff3 	bl	8018d24 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fb6a 	bl	800d418 <_ZNK11flatbuffers6VectorIfE4DataEv>
 800cd44:	4603      	mov	r3, r0
 800cd46:	6839      	ldr	r1, [r7, #0]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fb4f 	bl	800d3ec <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 800cd4e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cd52:	eeb0 0a67 	vmov.f32	s0, s15
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	0801d820 	.word	0x0801d820
 800cd60:	0801f9b0 	.word	0x0801f9b0
 800cd64:	0801d82c 	.word	0x0801d82c

0800cd68 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7f7 fe55 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 800cd84:	b590      	push	{r4, r7, lr}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7ff ffea 	bl	800cd68 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800cd94:	4602      	mov	r2, r0
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d306      	bcc.n	800cdaa <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 800cd9c:	4b0a      	ldr	r3, [pc, #40]	; (800cdc8 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 800cd9e:	4a0b      	ldr	r2, [pc, #44]	; (800cdcc <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 800cda0:	f44f 7183 	mov.w	r1, #262	; 0x106
 800cda4:	480a      	ldr	r0, [pc, #40]	; (800cdd0 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 800cda6:	f00b ffbd 	bl	8018d24 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fb56 	bl	800d45c <_ZNK11flatbuffers6VectorIxE4DataEv>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	6839      	ldr	r1, [r7, #0]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f000 fb3b 	bl	800d430 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	460c      	mov	r4, r1
  }
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	4621      	mov	r1, r4
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd90      	pop	{r4, r7, pc}
 800cdc8:	0801d820 	.word	0x0801d820
 800cdcc:	0801fa78 	.word	0x0801fa78
 800cdd0:	0801d82c 	.word	0x0801d82c

0800cdd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7f7 fe1f 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800cde6:	4603      	mov	r3, r0
 800cde8:	4618      	mov	r0, r3
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7ff ffea 	bl	800cdd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800ce00:	4602      	mov	r2, r0
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d306      	bcc.n	800ce16 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 800ce08:	4b09      	ldr	r3, [pc, #36]	; (800ce30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 800ce0a:	4a0a      	ldr	r2, [pc, #40]	; (800ce34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 800ce0c:	f44f 7183 	mov.w	r1, #262	; 0x106
 800ce10:	4809      	ldr	r0, [pc, #36]	; (800ce38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 800ce12:	f00b ff87 	bl	8018d24 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 fb40 	bl	800d49c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	6839      	ldr	r1, [r7, #0]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 fb27 	bl	800d474 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 800ce26:	4603      	mov	r3, r0
  }
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	0801d820 	.word	0x0801d820
 800ce34:	0801f7bc 	.word	0x0801f7bc
 800ce38:	0801d82c 	.word	0x0801d82c

0800ce3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7f7 fdeb 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	4618      	mov	r0, r3
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff ffea 	bl	800ce3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d306      	bcc.n	800ce7e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 800ce70:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 800ce72:	4a0a      	ldr	r2, [pc, #40]	; (800ce9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 800ce74:	f44f 7183 	mov.w	r1, #262	; 0x106
 800ce78:	4809      	ldr	r0, [pc, #36]	; (800cea0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 800ce7a:	f00b ff53 	bl	8018d24 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fb2c 	bl	800d4dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 800ce84:	4603      	mov	r3, r0
 800ce86:	6839      	ldr	r1, [r7, #0]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 fb13 	bl	800d4b4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 800ce8e:	4603      	mov	r3, r0
  }
 800ce90:	4618      	mov	r0, r3
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	0801d820 	.word	0x0801d820
 800ce9c:	0801f8b4 	.word	0x0801f8b4
 800cea0:	0801d82c 	.word	0x0801d82c

0800cea4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7f7 fdb7 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7ff ffea 	bl	800cea4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800ced0:	4602      	mov	r2, r0
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d306      	bcc.n	800cee6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800ced8:	4b09      	ldr	r3, [pc, #36]	; (800cf00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800ceda:	4a0a      	ldr	r2, [pc, #40]	; (800cf04 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800cedc:	f44f 7183 	mov.w	r1, #262	; 0x106
 800cee0:	4809      	ldr	r0, [pc, #36]	; (800cf08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800cee2:	f00b ff1f 	bl	8018d24 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 fb18 	bl	800d51c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800ceec:	4603      	mov	r3, r0
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 faff 	bl	800d4f4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800cef6:	4603      	mov	r3, r0
  }
 800cef8:	4618      	mov	r0, r3
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	0801d820 	.word	0x0801d820
 800cf04:	0801fb50 	.word	0x0801fb50
 800cf08:	0801d82c 	.word	0x0801d82c

0800cf0c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7f7 fd83 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	4618      	mov	r0, r3
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff ffea 	bl	800cf0c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d306      	bcc.n	800cf4e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 800cf40:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800cf42:	4a0a      	ldr	r2, [pc, #40]	; (800cf6c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800cf44:	f44f 7183 	mov.w	r1, #262	; 0x106
 800cf48:	4809      	ldr	r0, [pc, #36]	; (800cf70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800cf4a:	f00b feeb 	bl	8018d24 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 fb04 	bl	800d55c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800cf54:	4603      	mov	r3, r0
 800cf56:	6839      	ldr	r1, [r7, #0]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f000 faeb 	bl	800d534 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 800cf5e:	4603      	mov	r3, r0
  }
 800cf60:	4618      	mov	r0, r3
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	0801d820 	.word	0x0801d820
 800cf6c:	0801f5c8 	.word	0x0801f5c8
 800cf70:	0801d82c 	.word	0x0801d82c

0800cf74 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7f7 fd4f 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800cf86:	4603      	mov	r3, r0
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff ffea 	bl	800cf74 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d306      	bcc.n	800cfb6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 800cfa8:	4b09      	ldr	r3, [pc, #36]	; (800cfd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 800cfaa:	4a0a      	ldr	r2, [pc, #40]	; (800cfd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 800cfac:	f44f 7183 	mov.w	r1, #262	; 0x106
 800cfb0:	4809      	ldr	r0, [pc, #36]	; (800cfd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 800cfb2:	f00b feb7 	bl	8018d24 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 faf0 	bl	800d59c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f000 fad7 	bl	800d574 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 800cfc6:	4603      	mov	r3, r0
  }
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	0801d820 	.word	0x0801d820
 800cfd4:	0801f6c4 	.word	0x0801f6c4
 800cfd8:	0801d82c 	.word	0x0801d82c

0800cfdc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7f7 fd1b 	bl	8004a24 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800cfee:	4603      	mov	r3, r0
 800cff0:	4618      	mov	r0, r3
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7ff ffea 	bl	800cfdc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800d008:	4602      	mov	r2, r0
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d306      	bcc.n	800d01e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800d010:	4b09      	ldr	r3, [pc, #36]	; (800d038 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800d012:	4a0a      	ldr	r2, [pc, #40]	; (800d03c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 800d014:	f44f 7183 	mov.w	r1, #262	; 0x106
 800d018:	4809      	ldr	r0, [pc, #36]	; (800d040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 800d01a:	f00b fe83 	bl	8018d24 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fadc 	bl	800d5dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 800d024:	4603      	mov	r3, r0
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 fac3 	bl	800d5b4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800d02e:	4603      	mov	r3, r0
  }
 800d030:	4618      	mov	r0, r3
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	0801d820 	.word	0x0801d820
 800d03c:	0801f4cc 	.word	0x0801f4cc
 800d040:	0801d82c 	.word	0x0801d82c

0800d044 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7ff ff69 	bl	800cf28 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d056:	4603      	mov	r3, r0
 800d058:	4618      	mov	r0, r3
 800d05a:	3708      	adds	r7, #8
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
 800d06a:	6839      	ldr	r1, [r7, #0]
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7ff ff8f 	bl	800cf90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800d072:	4603      	mov	r3, r0
 800d074:	4618      	mov	r0, r3
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 f9a5 	bl	800d3d4 <_ZNK11flatbuffers6VectorIhE4DataEv>
 800d08a:	4603      	mov	r3, r0
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
 800d0a0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800d0a8:	f00b fe35 	bl	8018d16 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800d0b2:	f00b fe30 	bl	8018d16 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b084      	sub	sp, #16
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	60f8      	str	r0, [r7, #12]
 800d0ce:	60b9      	str	r1, [r7, #8]
 800d0d0:	607a      	str	r2, [r7, #4]
 800d0d2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d101      	bne.n	800d0de <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800d0da:	f00b fe1c 	bl	8018d16 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d101      	bne.n	800d0e8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800d0e4:	f00b fe17 	bl	8018d16 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
 800d102:	6839      	ldr	r1, [r7, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7ff fedb 	bl	800cec0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 800d10a:	4603      	mov	r3, r0
 800d10c:	4618      	mov	r0, r3
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	460b      	mov	r3, r1
 800d11e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d120:	887b      	ldrh	r3, [r7, #2]
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7f6 ffa3 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d12a:	4603      	mov	r3, r0
 800d12c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	89fb      	ldrh	r3, [r7, #14]
 800d132:	4413      	add	r3, r2
 800d134:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d136:	89fb      	ldrh	r3, [r7, #14]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d006      	beq.n	800d14a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800d13c:	68b8      	ldr	r0, [r7, #8]
 800d13e:	f7f7 fc8a 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d142:	4602      	mov	r2, r0
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	4413      	add	r3, r2
                        : nullptr;
 800d148:	e000      	b.n	800d14c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d14a:	2300      	movs	r3, #0
  }
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	460b      	mov	r3, r1
 800d15e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d160:	887b      	ldrh	r3, [r7, #2]
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7f6 ff83 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d16a:	4603      	mov	r3, r0
 800d16c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	89fb      	ldrh	r3, [r7, #14]
 800d172:	4413      	add	r3, r2
 800d174:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d176:	89fb      	ldrh	r3, [r7, #14]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d006      	beq.n	800d18a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800d17c:	68b8      	ldr	r0, [r7, #8]
 800d17e:	f7f7 fc6a 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d182:	4602      	mov	r2, r0
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	4413      	add	r3, r2
                        : nullptr;
 800d188:	e000      	b.n	800d18c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d18a:	2300      	movs	r3, #0
  }
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	460b      	mov	r3, r1
 800d19e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d1a0:	887b      	ldrh	r3, [r7, #2]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f7f6 ff63 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	89fb      	ldrh	r3, [r7, #14]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d1b6:	89fb      	ldrh	r3, [r7, #14]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d006      	beq.n	800d1ca <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800d1bc:	68b8      	ldr	r0, [r7, #8]
 800d1be:	f7f7 fc4a 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	4413      	add	r3, r2
                        : nullptr;
 800d1c8:	e000      	b.n	800d1cc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d1ca:	2300      	movs	r3, #0
  }
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3710      	adds	r7, #16
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	460b      	mov	r3, r1
 800d1de:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d1e0:	887b      	ldrh	r3, [r7, #2]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f7f6 ff43 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	89fb      	ldrh	r3, [r7, #14]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d1f6:	89fb      	ldrh	r3, [r7, #14]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d006      	beq.n	800d20a <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800d1fc:	68b8      	ldr	r0, [r7, #8]
 800d1fe:	f7f7 fc2a 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d202:	4602      	mov	r2, r0
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	4413      	add	r3, r2
                        : nullptr;
 800d208:	e000      	b.n	800d20c <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d20a:	2300      	movs	r3, #0
  }
 800d20c:	4618      	mov	r0, r3
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	460b      	mov	r3, r1
 800d21e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d220:	887b      	ldrh	r3, [r7, #2]
 800d222:	4619      	mov	r1, r3
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f7f6 ff23 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d22a:	4603      	mov	r3, r0
 800d22c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	89fb      	ldrh	r3, [r7, #14]
 800d232:	4413      	add	r3, r2
 800d234:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d236:	89fb      	ldrh	r3, [r7, #14]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d006      	beq.n	800d24a <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 800d23c:	68b8      	ldr	r0, [r7, #8]
 800d23e:	f7f7 fc0a 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d242:	4602      	mov	r2, r0
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	4413      	add	r3, r2
                        : nullptr;
 800d248:	e000      	b.n	800d24c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d24a:	2300      	movs	r3, #0
  }
 800d24c:	4618      	mov	r0, r3
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d260:	887b      	ldrh	r3, [r7, #2]
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7f6 ff03 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d26a:	4603      	mov	r3, r0
 800d26c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	89fb      	ldrh	r3, [r7, #14]
 800d272:	4413      	add	r3, r2
 800d274:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d276:	89fb      	ldrh	r3, [r7, #14]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d006      	beq.n	800d28a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800d27c:	68b8      	ldr	r0, [r7, #8]
 800d27e:	f7f7 fbea 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d282:	4602      	mov	r2, r0
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	4413      	add	r3, r2
                        : nullptr;
 800d288:	e000      	b.n	800d28c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d28a:	2300      	movs	r3, #0
  }
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	460b      	mov	r3, r1
 800d29e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d2a0:	887b      	ldrh	r3, [r7, #2]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7f6 fee3 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	89fb      	ldrh	r3, [r7, #14]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d2b6:	89fb      	ldrh	r3, [r7, #14]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d006      	beq.n	800d2ca <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800d2bc:	68b8      	ldr	r0, [r7, #8]
 800d2be:	f7f7 fbca 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	4413      	add	r3, r2
                        : nullptr;
 800d2c8:	e000      	b.n	800d2cc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d2ca:	2300      	movs	r3, #0
  }
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d2e0:	887b      	ldrh	r3, [r7, #2]
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7f6 fec3 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	89fb      	ldrh	r3, [r7, #14]
 800d2f2:	4413      	add	r3, r2
 800d2f4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d2f6:	89fb      	ldrh	r3, [r7, #14]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d006      	beq.n	800d30a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800d2fc:	68b8      	ldr	r0, [r7, #8]
 800d2fe:	f7f7 fbaa 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d302:	4602      	mov	r2, r0
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	4413      	add	r3, r2
                        : nullptr;
 800d308:	e000      	b.n	800d30c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d30a:	2300      	movs	r3, #0
  }
 800d30c:	4618      	mov	r0, r3
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	460b      	mov	r3, r1
 800d31e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d320:	887b      	ldrh	r3, [r7, #2]
 800d322:	4619      	mov	r1, r3
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7f6 fea3 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d32a:	4603      	mov	r3, r0
 800d32c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	89fb      	ldrh	r3, [r7, #14]
 800d332:	4413      	add	r3, r2
 800d334:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d336:	89fb      	ldrh	r3, [r7, #14]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d006      	beq.n	800d34a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800d33c:	68b8      	ldr	r0, [r7, #8]
 800d33e:	f7f7 fb8a 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d342:	4602      	mov	r2, r0
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	4413      	add	r3, r2
                        : nullptr;
 800d348:	e000      	b.n	800d34c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d34a:	2300      	movs	r3, #0
  }
 800d34c:	4618      	mov	r0, r3
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d360:	887b      	ldrh	r3, [r7, #2]
 800d362:	4619      	mov	r1, r3
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f7f6 fe83 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d36a:	4603      	mov	r3, r0
 800d36c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	89fb      	ldrh	r3, [r7, #14]
 800d372:	4413      	add	r3, r2
 800d374:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d376:	89fb      	ldrh	r3, [r7, #14]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d006      	beq.n	800d38a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800d37c:	68b8      	ldr	r0, [r7, #8]
 800d37e:	f7f7 fb6a 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d382:	4602      	mov	r2, r0
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	4413      	add	r3, r2
                        : nullptr;
 800d388:	e000      	b.n	800d38c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d38a:	2300      	movs	r3, #0
  }
 800d38c:	4618      	mov	r0, r3
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	460b      	mov	r3, r1
 800d39e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800d3a0:	887b      	ldrh	r3, [r7, #2]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7f6 fe63 	bl	8004070 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	89fb      	ldrh	r3, [r7, #14]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d3b6:	89fb      	ldrh	r3, [r7, #14]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d006      	beq.n	800d3ca <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800d3bc:	68b8      	ldr	r0, [r7, #8]
 800d3be:	f7f7 fb4a 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	4413      	add	r3, r2
                        : nullptr;
 800d3c8:	e000      	b.n	800d3cc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800d3ca:	2300      	movs	r3, #0
  }
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	3304      	adds	r3, #4
  }
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	edd3 7a00 	vldr	s15, [r3]
 800d402:	eeb0 0a67 	vmov.f32	s0, s15
 800d406:	f7f8 f8df 	bl	80055c8 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800d40a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d40e:	eeb0 0a67 	vmov.f32	s0, s15
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	3304      	adds	r3, #4
  }
 800d424:	4618      	mov	r0, r3
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800d430:	b590      	push	{r4, r7, lr}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	00db      	lsls	r3, r3, #3
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	4413      	add	r3, r2
 800d442:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d446:	4618      	mov	r0, r3
 800d448:	4621      	mov	r1, r4
 800d44a:	f000 f8d3 	bl	800d5f4 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800d44e:	4603      	mov	r3, r0
 800d450:	460c      	mov	r4, r1
  }
 800d452:	4618      	mov	r0, r3
 800d454:	4621      	mov	r1, r4
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd90      	pop	{r4, r7, pc}

0800d45c <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	3304      	adds	r3, #4
  }
 800d468:	4618      	mov	r0, r3
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	4413      	add	r3, r2
 800d486:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f7f7 fae4 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d48e:	4602      	mov	r2, r0
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4413      	add	r3, r2
  }
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3304      	adds	r3, #4
  }
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7f7 fac4 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4413      	add	r3, r2
  }
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3708      	adds	r7, #8
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	3304      	adds	r3, #4
  }
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	4413      	add	r3, r2
 800d506:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f7f7 faa4 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d50e:	4602      	mov	r2, r0
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4413      	add	r3, r2
  }
 800d514:	4618      	mov	r0, r3
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3304      	adds	r3, #4
  }
 800d528:	4618      	mov	r0, r3
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	4413      	add	r3, r2
 800d546:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7f7 fa84 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d54e:	4602      	mov	r2, r0
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4413      	add	r3, r2
  }
 800d554:	4618      	mov	r0, r3
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3304      	adds	r3, #4
  }
 800d568:	4618      	mov	r0, r3
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	009b      	lsls	r3, r3, #2
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	4413      	add	r3, r2
 800d586:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7f7 fa64 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d58e:	4602      	mov	r2, r0
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4413      	add	r3, r2
  }
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	3304      	adds	r3, #4
  }
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	370c      	adds	r7, #12
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7f7 fa44 	bl	8004a56 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4413      	add	r3, r2
  }
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3708      	adds	r7, #8
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	3304      	adds	r3, #4
  }
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800d5f4:	b490      	push	{r4, r7}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800d5fe:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 800d602:	4618      	mov	r0, r3
 800d604:	4621      	mov	r1, r4
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bc90      	pop	{r4, r7}
 800d60c:	4770      	bx	lr
	...

0800d610 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	4a05      	ldr	r2, [pc, #20]	; (800d630 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4618      	mov	r0, r3
 800d622:	f7fd fdcb 	bl	800b1bc <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4618      	mov	r0, r3
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	0801f464 	.word	0x0801f464

0800d634 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff ffe7 	bl	800d610 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800d642:	2108      	movs	r1, #8
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f009 f8ca 	bl	80167de <_ZdlPvj>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4618      	mov	r0, r3
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 800d654:	b580      	push	{r7, lr}
 800d656:	b0c4      	sub	sp, #272	; 0x110
 800d658:	af00      	add	r7, sp, #0
 800d65a:	f107 030c 	add.w	r3, r7, #12
 800d65e:	6018      	str	r0, [r3, #0]
 800d660:	f107 0308 	add.w	r3, r7, #8
 800d664:	6019      	str	r1, [r3, #0]
 800d666:	1d3b      	adds	r3, r7, #4
 800d668:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800d66a:	1d3b      	adds	r3, r7, #4
 800d66c:	f107 0208 	add.w	r2, r7, #8
 800d670:	f107 0010 	add.w	r0, r7, #16
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	6812      	ldr	r2, [r2, #0]
 800d678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d67c:	f001 f80c 	bl	800e698 <MicroVsnprintf>
  DebugLog(log_buffer);
 800d680:	f107 0310 	add.w	r3, r7, #16
 800d684:	4618      	mov	r0, r3
 800d686:	f7f3 fd8f 	bl	80011a8 <DebugLog>
  DebugLog("\r\n");
 800d68a:	4804      	ldr	r0, [pc, #16]	; (800d69c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x48>)
 800d68c:	f7f3 fd8c 	bl	80011a8 <DebugLog>
#endif
  return 0;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	0801d848 	.word	0x0801d848

0800d6a0 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE>:
FrontendState g_micro_features_state;
bool g_is_first_time = true;

}  // namespace

TfLiteStatus InitializeMicroFeatures(tflite::ErrorReporter* error_reporter) {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b092      	sub	sp, #72	; 0x48
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  FrontendConfig config;
  config.window.size_ms = kFeatureSliceDurationMs;
 800d6a8:	231e      	movs	r3, #30
 800d6aa:	60bb      	str	r3, [r7, #8]
  config.window.step_size_ms = kFeatureSliceStrideMs;
 800d6ac:	2314      	movs	r3, #20
 800d6ae:	60fb      	str	r3, [r7, #12]
  config.noise_reduction.smoothing_bits = 10;
 800d6b0:	230a      	movs	r3, #10
 800d6b2:	623b      	str	r3, [r7, #32]
  config.filterbank.num_channels = kFeatureSliceSize;
 800d6b4:	2328      	movs	r3, #40	; 0x28
 800d6b6:	613b      	str	r3, [r7, #16]
  config.filterbank.lower_band_limit = 125.0;
 800d6b8:	4b1a      	ldr	r3, [pc, #104]	; (800d724 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x84>)
 800d6ba:	61bb      	str	r3, [r7, #24]
  config.filterbank.upper_band_limit = 7500.0;
 800d6bc:	4b1a      	ldr	r3, [pc, #104]	; (800d728 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x88>)
 800d6be:	617b      	str	r3, [r7, #20]
  config.noise_reduction.smoothing_bits = 10;
 800d6c0:	230a      	movs	r3, #10
 800d6c2:	623b      	str	r3, [r7, #32]
  config.noise_reduction.even_smoothing = 0.025;
 800d6c4:	4b19      	ldr	r3, [pc, #100]	; (800d72c <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x8c>)
 800d6c6:	627b      	str	r3, [r7, #36]	; 0x24
  config.noise_reduction.odd_smoothing = 0.06;
 800d6c8:	4b19      	ldr	r3, [pc, #100]	; (800d730 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x90>)
 800d6ca:	62bb      	str	r3, [r7, #40]	; 0x28
  config.noise_reduction.min_signal_remaining = 0.05;
 800d6cc:	4b19      	ldr	r3, [pc, #100]	; (800d734 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x94>)
 800d6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  config.pcan_gain_control.enable_pcan = 1;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	633b      	str	r3, [r7, #48]	; 0x30
  config.pcan_gain_control.strength = 0.95;
 800d6d4:	4b18      	ldr	r3, [pc, #96]	; (800d738 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x98>)
 800d6d6:	637b      	str	r3, [r7, #52]	; 0x34
  config.pcan_gain_control.offset = 80.0;
 800d6d8:	4b18      	ldr	r3, [pc, #96]	; (800d73c <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x9c>)
 800d6da:	63bb      	str	r3, [r7, #56]	; 0x38
  config.pcan_gain_control.gain_bits = 21;
 800d6dc:	2315      	movs	r3, #21
 800d6de:	63fb      	str	r3, [r7, #60]	; 0x3c
  config.log_scale.enable_log = 1;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	643b      	str	r3, [r7, #64]	; 0x40
  config.log_scale.scale_shift = 6;
 800d6e4:	2306      	movs	r3, #6
 800d6e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (!FrontendPopulateState(&config, &g_micro_features_state,
 800d6e8:	f107 0308 	add.w	r3, r7, #8
 800d6ec:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800d6f0:	4913      	ldr	r1, [pc, #76]	; (800d740 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0xa0>)
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7f8 fc12 	bl	8005f1c <FrontendPopulateState>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	bf0c      	ite	eq
 800d6fe:	2301      	moveq	r3, #1
 800d700:	2300      	movne	r3, #0
 800d702:	b2db      	uxtb	r3, r3
 800d704:	2b00      	cmp	r3, #0
 800d706:	d005      	beq.n	800d714 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x74>
                             kAudioSampleFrequency)) {
    TF_LITE_REPORT_ERROR(error_reporter, "FrontendPopulateState() failed");
 800d708:	490e      	ldr	r1, [pc, #56]	; (800d744 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0xa4>)
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7f5 fc54 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 800d710:	2301      	movs	r3, #1
 800d712:	e003      	b.n	800d71c <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x7c>
  }
  g_is_first_time = true;
 800d714:	4b0c      	ldr	r3, [pc, #48]	; (800d748 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0xa8>)
 800d716:	2201      	movs	r2, #1
 800d718:	701a      	strb	r2, [r3, #0]
  return kTfLiteOk;
 800d71a:	2300      	movs	r3, #0
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3748      	adds	r7, #72	; 0x48
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	42fa0000 	.word	0x42fa0000
 800d728:	45ea6000 	.word	0x45ea6000
 800d72c:	3ccccccd 	.word	0x3ccccccd
 800d730:	3d75c28f 	.word	0x3d75c28f
 800d734:	3d4ccccd 	.word	0x3d4ccccd
 800d738:	3f733333 	.word	0x3f733333
 800d73c:	42a00000 	.word	0x42a00000
 800d740:	200084bc 	.word	0x200084bc
 800d744:	0801d84c 	.word	0x0801d84c
 800d748:	20000000 	.word	0x20000000

0800d74c <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj>:
}

TfLiteStatus GenerateMicroFeatures(tflite::ErrorReporter* error_reporter,
                                   const int16_t* input, int input_size,
                                   int output_size, int8_t* output,
                                   size_t* num_samples_read) {
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08e      	sub	sp, #56	; 0x38
 800d750:	af02      	add	r7, sp, #8
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	603b      	str	r3, [r7, #0]
  const int16_t* frontend_input;
  if (g_is_first_time) {
 800d75a:	4b28      	ldr	r3, [pc, #160]	; (800d7fc <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0xb0>)
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d005      	beq.n	800d76e <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x22>
    frontend_input = input;
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	62fb      	str	r3, [r7, #44]	; 0x2c
    g_is_first_time = false;
 800d766:	4b25      	ldr	r3, [pc, #148]	; (800d7fc <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0xb0>)
 800d768:	2200      	movs	r2, #0
 800d76a:	701a      	strb	r2, [r3, #0]
 800d76c:	e001      	b.n	800d772 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x26>
  } else {
    frontend_input = input;// + 160;
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  FrontendOutput frontend_output = FrontendProcessSamples(
      &g_micro_features_state, frontend_input, input_size, num_samples_read);
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	f107 0014 	add.w	r0, r7, #20
 800d778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	4613      	mov	r3, r2
 800d77e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d780:	491f      	ldr	r1, [pc, #124]	; (800d800 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0xb4>)
 800d782:	f7f8 fb14 	bl	8005dae <FrontendProcessSamples>

  for (size_t i = 0; i < frontend_output.size; ++i) {
 800d786:	2300      	movs	r3, #0
 800d788:	62bb      	str	r3, [r7, #40]	; 0x28
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d78e:	429a      	cmp	r2, r3
 800d790:	d22e      	bcs.n	800d7f0 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0xa4>
    // All this means that to get matching values from our integer feature
    // output into the tensor input, we have to perform:
    // input = (((feature / 25.6) / 26.0) * 256) - 128
    // To simplify this and perform it in 32-bit integer math, we rearrange to:
    // input = (feature * 256) / (25.6 * 26.0) - 128
    constexpr int32_t value_scale = 256;
 800d792:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d796:	623b      	str	r3, [r7, #32]
    constexpr int32_t value_div = static_cast<int32_t>((25.6f * 26.0f) + 0.5f);
 800d798:	f240 239a 	movw	r3, #666	; 0x29a
 800d79c:	61fb      	str	r3, [r7, #28]
    int32_t value =
        ((frontend_output.values[i] * value_scale) + (value_div / 2)) /
 800d79e:	697a      	ldr	r2, [r7, #20]
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	005b      	lsls	r3, r3, #1
 800d7a4:	4413      	add	r3, r2
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	021b      	lsls	r3, r3, #8
 800d7aa:	f203 134d 	addw	r3, r3, #333	; 0x14d
    int32_t value =
 800d7ae:	4a15      	ldr	r2, [pc, #84]	; (800d804 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0xb8>)
 800d7b0:	fb82 1203 	smull	r1, r2, r2, r3
 800d7b4:	441a      	add	r2, r3
 800d7b6:	1252      	asrs	r2, r2, #9
 800d7b8:	17db      	asrs	r3, r3, #31
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	627b      	str	r3, [r7, #36]	; 0x24
        value_div;
    value -= 128;
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	3b80      	subs	r3, #128	; 0x80
 800d7c2:	627b      	str	r3, [r7, #36]	; 0x24
    if (value < -128) {
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800d7ca:	da02      	bge.n	800d7d2 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x86>
      value = -128;
 800d7cc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800d7d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (value > 127) {
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d4:	2b7f      	cmp	r3, #127	; 0x7f
 800d7d6:	dd01      	ble.n	800d7dc <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x90>
      value = 127;
 800d7d8:	237f      	movs	r3, #127	; 0x7f
 800d7da:	627b      	str	r3, [r7, #36]	; 0x24
    }
    output[i] = value;
 800d7dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e0:	4413      	add	r3, r2
 800d7e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7e4:	b252      	sxtb	r2, r2
 800d7e6:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < frontend_output.size; ++i) {
 800d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7ee:	e7cc      	b.n	800d78a <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x3e>
  }

  return kTfLiteOk;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3730      	adds	r7, #48	; 0x30
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20000000 	.word	0x20000000
 800d800:	200084bc 	.word	0x200084bc
 800d804:	c4ce07b1 	.word	0xc4ce07b1

0800d808 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>:
  // comes from.
  virtual uint32_t BeginEvent(const char* tag, EventType event_type,
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
 800d808:	b5b0      	push	{r4, r5, r7, lr}
 800d80a:	b088      	sub	sp, #32
 800d80c:	af04      	add	r7, sp, #16
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	607a      	str	r2, [r7, #4]
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	3308      	adds	r3, #8
 800d81a:	681d      	ldr	r5, [r3, #0]
 800d81c:	f04f 0300 	mov.w	r3, #0
 800d820:	f04f 0400 	mov.w	r4, #0
 800d824:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d828:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d82c:	e9cd 3400 	strd	r3, r4, [sp]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	68b9      	ldr	r1, [r7, #8]
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	47a8      	blx	r5
 800d838:	4603      	mov	r3, r0
  }
 800d83a:	4618      	mov	r0, r3
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bdb0      	pop	{r4, r5, r7, pc}

0800d842 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>:
// of the object and ends when the object goes out of scope.
// The lifetime of tag should be at least the lifetime of `profiler`.
// `profiler` may be null, in which case nothing is profiled.
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
 800d842:	b590      	push	{r4, r7, lr}
 800d844:	b087      	sub	sp, #28
 800d846:	af02      	add	r7, sp, #8
 800d848:	60f8      	str	r0, [r7, #12]
 800d84a:	60b9      	str	r1, [r7, #8]
 800d84c:	607a      	str	r2, [r7, #4]
 800d84e:	603b      	str	r3, [r7, #0]
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	601a      	str	r2, [r3, #0]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2200      	movs	r2, #0
 800d85a:	605a      	str	r2, [r3, #4]
    if (profiler) {
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00c      	beq.n	800d87c <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx+0x3a>
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6818      	ldr	r0, [r3, #0]
 800d866:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d86a:	e9cd 3400 	strd	r3, r4, [sp]
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	6879      	ldr	r1, [r7, #4]
 800d872:	f7ff ffc9 	bl	800d808 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>
 800d876:	4602      	mov	r2, r0
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	605a      	str	r2, [r3, #4]
    }
  }
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	4618      	mov	r0, r3
 800d880:	3714      	adds	r7, #20
 800d882:	46bd      	mov	sp, r7
 800d884:	bd90      	pop	{r4, r7, pc}

0800d886 <_ZN6tflite13ScopedProfileD1Ev>:

  ~ScopedProfile() {
 800d886:	b580      	push	{r7, lr}
 800d888:	b082      	sub	sp, #8
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
    if (profiler_) {
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00a      	beq.n	800d8ac <_ZN6tflite13ScopedProfileD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6818      	ldr	r0, [r3, #0]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	3310      	adds	r3, #16
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	6852      	ldr	r2, [r2, #4]
 800d8a8:	4611      	mov	r1, r2
 800d8aa:	4798      	blx	r3
    }
  }
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>:
  uint32_t event_handle_;
};

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
 800d8b6:	b590      	push	{r4, r7, lr}
 800d8b8:	b087      	sub	sp, #28
 800d8ba:	af02      	add	r7, sp, #8
 800d8bc:	60f8      	str	r0, [r7, #12]
 800d8be:	60b9      	str	r1, [r7, #8]
 800d8c0:	607a      	str	r2, [r7, #4]
 800d8c2:	603b      	str	r3, [r7, #0]
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	f04f 0400 	mov.w	r4, #0
 800d8cc:	e9cd 3400 	strd	r3, r4, [sp]
 800d8d0:	2302      	movs	r3, #2
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	68b9      	ldr	r1, [r7, #8]
 800d8d6:	f7ff ffb4 	bl	800d842 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd90      	pop	{r4, r7, pc}

0800d8e4 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fd fbd6 	bl	800b0a2 <_ZNK6tflite8SubGraph6inputsEv>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fd fae6 	bl	800aeca <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800d8fe:	4603      	mov	r3, r0
 800d900:	4618      	mov	r0, r3
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d914:	4618      	mov	r0, r3
 800d916:	f7fd fbc4 	bl	800b0a2 <_ZNK6tflite8SubGraph6inputsEv>
 800d91a:	4603      	mov	r3, r0
  }
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d930:	4618      	mov	r0, r3
 800d932:	f7fd fbc4 	bl	800b0be <_ZNK6tflite8SubGraph7outputsEv>
 800d936:	4603      	mov	r3, r0
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fd fac6 	bl	800aeca <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800d93e:	4603      	mov	r3, r0
 800d940:	4618      	mov	r0, r3
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d954:	4618      	mov	r0, r3
 800d956:	f7fd fbb2 	bl	800b0be <_ZNK6tflite8SubGraph7outputsEv>
 800d95a:	4603      	mov	r3, r0
  }
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	695b      	ldr	r3, [r3, #20]
 800d970:	2b20      	cmp	r3, #32
 800d972:	d102      	bne.n	800d97a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	e006      	b.n	800d988 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	695b      	ldr	r3, [r3, #20]
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	4618      	mov	r0, r3
 800d982:	f7fd fac5 	bl	800af10 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800d986:	4603      	mov	r3, r0
  }
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>:

}  // namespace

namespace internal {

ContextHelper::ContextHelper(ErrorReporter* error_reporter,
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
 800d99c:	603b      	str	r3, [r7, #0]
                             MicroAllocator* allocator, const Model* model)
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	601a      	str	r2, [r3, #0]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	68ba      	ldr	r2, [r7, #8]
 800d9a8:	605a      	str	r2, [r3, #4]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	683a      	ldr	r2, [r7, #0]
 800d9ae:	609a      	str	r2, [r3, #8]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	60da      	str	r2, [r3, #12]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	611a      	str	r2, [r3, #16]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3714      	adds	r7, #20
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr

0800d9ca <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextj>:

void* ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                              size_t bytes) {
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 800d9d8:	681a      	ldr	r2, [r3, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	330c      	adds	r3, #12
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	4610      	mov	r0, r2
 800d9ea:	4798      	blx	r3
 800d9ec:	4603      	mov	r3, r0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b086      	sub	sp, #24
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	60f8      	str	r0, [r7, #12]
 800d9fe:	60b9      	str	r1, [r7, #8]
 800da00:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(bytes, buffer_idx);
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	68b9      	ldr	r1, [r7, #8]
 800da10:	4618      	mov	r0, r3
 800da12:	f7fe faa3 	bl	800bf5c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>
 800da16:	4603      	mov	r3, r0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3718      	adds	r7, #24
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	60fb      	str	r3, [r7, #12]
  ScratchBufferHandle* handle = helper->scratch_buffer_handles_ + buffer_idx;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	691a      	ldr	r2, [r3, #16]
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4413      	add	r3, r2
 800da3a:	60bb      	str	r3, [r7, #8]
  return handle->data;
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	681b      	ldr	r3, [r3, #0]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3714      	adds	r7, #20
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 800da4c:	b40e      	push	{r1, r2, r3}
 800da4e:	b580      	push	{r7, lr}
 800da50:	b085      	sub	sp, #20
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 800da5c:	f107 0320 	add.w	r3, r7, #32
 800da60:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	6858      	ldr	r0, [r3, #4]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	3308      	adds	r3, #8
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	69f9      	ldr	r1, [r7, #28]
 800da74:	4798      	blx	r3
  va_end(args);
#endif
}
 800da76:	bf00      	nop
 800da78:	3714      	adds	r7, #20
 800da7a:	46bd      	mov	sp, r7
 800da7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da80:	b003      	add	sp, #12
 800da82:	4770      	bx	lr

0800da84 <_ZN6tflite8internal13ContextHelper9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* ContextHelper::GetTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 800da84:	b590      	push	{r4, r7, lr}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	60fb      	str	r3, [r7, #12]
  return helper->allocator_->AllocateTempTfLiteTensor(
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6818      	ldr	r0, [r3, #0]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
      helper->model_, helper->eval_tensors_, tensor_idx);
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	3304      	adds	r3, #4
 800daa0:	681c      	ldr	r4, [r3, #0]
  return helper->allocator_->AllocateTempTfLiteTensor(
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6899      	ldr	r1, [r3, #8]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	68da      	ldr	r2, [r3, #12]
      helper->model_, helper->eval_tensors_, tensor_idx);
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	47a0      	blx	r4
 800daae:	4603      	mov	r3, r0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd90      	pop	{r4, r7, pc}

0800dab8 <_ZN6tflite8internal13ContextHelper13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* ContextHelper::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800dab8:	b480      	push	{r7}
 800daba:	b085      	sub	sp, #20
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(context->impl_);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	60fb      	str	r3, [r7, #12]
  return &helper->eval_tensors_[tensor_idx];
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	68d9      	ldr	r1, [r3, #12]
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	4613      	mov	r3, r2
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	4413      	add	r3, r2
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	440b      	add	r3, r1
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>:

void ContextHelper::SetTfLiteEvalTensors(TfLiteEvalTensor* eval_tensors) {
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  eval_tensors_ = eval_tensors;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	683a      	ldr	r2, [r7, #0]
 800daf2:	60da      	str	r2, [r3, #12]
}
 800daf4:	bf00      	nop
 800daf6:	370c      	adds	r7, #12
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <_ZN6tflite8internal13ContextHelper23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:

void ContextHelper::SetScratchBufferHandles(
    ScratchBufferHandle* scratch_buffer_handles) {
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  scratch_buffer_handles_ = scratch_buffer_handles;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	611a      	str	r2, [r3, #16]
}
 800db10:	bf00      	nop
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
 800db28:	603b      	str	r3, [r7, #0]
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      eval_tensors_(nullptr),
      context_helper_(error_reporter_, &allocator_, model),
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	601a      	str	r2, [r3, #0]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	68ba      	ldr	r2, [r7, #8]
 800db34:	605a      	str	r2, [r3, #4]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	609a      	str	r2, [r3, #8]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	69fa      	ldr	r2, [r7, #28]
 800db40:	60da      	str	r2, [r3, #12]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	3310      	adds	r3, #16
 800db46:	2258      	movs	r2, #88	; 0x58
 800db48:	2100      	movs	r1, #0
 800db4a:	4618      	mov	r0, r3
 800db4c:	f00b fa5e 	bl	801900c <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800db50:	69fa      	ldr	r2, [r7, #28]
 800db52:	69b9      	ldr	r1, [r7, #24]
 800db54:	6838      	ldr	r0, [r7, #0]
 800db56:	f7fe f8e5 	bl	800bd24 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800db5a:	4602      	mov	r2, r0
      output_tensor_(nullptr) {
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	669a      	str	r2, [r3, #104]	; 0x68
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2200      	movs	r2, #0
 800db74:	671a      	str	r2, [r3, #112]	; 0x70
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	675a      	str	r2, [r3, #116]	; 0x74
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2200      	movs	r2, #0
 800db80:	679a      	str	r2, [r3, #120]	; 0x78
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	68d9      	ldr	r1, [r3, #12]
      context_helper_(error_reporter_, &allocator_, model),
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
      output_tensor_(nullptr) {
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	f7ff fefd 	bl	800d990 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2200      	movs	r2, #0
 800db9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 800dba6:	6a39      	ldr	r1, [r7, #32]
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f000 f805 	bl	800dbb8 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:
      }
    }
  }
}

void MicroInterpreter::Init(tflite::Profiler* profiler) {
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fd face 	bl	800b168 <_ZNK6tflite5Model9subgraphsEv>
 800dbcc:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f7ff f99c 	bl	800cf0c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	bf14      	ite	ne
 800dbda:	2301      	movne	r3, #1
 800dbdc:	2300      	moveq	r3, #0
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00a      	beq.n	800dbfa <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	4915      	ldr	r1, [pc, #84]	; (800dc40 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x88>)
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7f5 f9e4 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return;
 800dbf8:	e01e      	b.n	800dc38 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x80>
  }
  subgraph_ = (*subgraphs)[0];
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	f7ff fa21 	bl	800d044 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800dc02:	4602      	mov	r2, r0
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	671a      	str	r2, [r3, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a0b      	ldr	r2, [pc, #44]	; (800dc44 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x8c>)
 800dc16:	625a      	str	r2, [r3, #36]	; 0x24
  context_.GetTensor = context_helper_.GetTensor;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	4a0b      	ldr	r2, [pc, #44]	; (800dc48 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x90>)
 800dc1c:	661a      	str	r2, [r3, #96]	; 0x60
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a0a      	ldr	r2, [pc, #40]	; (800dc4c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x94>)
 800dc22:	665a      	str	r2, [r3, #100]	; 0x64
  context_.recommended_num_threads = 1;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 800dc38:	3710      	adds	r7, #16
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	0801de94 	.word	0x0801de94
 800dc44:	0800da4d 	.word	0x0800da4d
 800dc48:	0800da85 	.word	0x0800da85
 800dc4c:	0800dab9 	.word	0x0800dab9

0800dc50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800dc50:	b590      	push	{r4, r7, lr}
 800dc52:	b091      	sub	sp, #68	; 0x44
 800dc54:	af02      	add	r7, sp, #8
 800dc56:	6078      	str	r0, [r7, #4]
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6859      	ldr	r1, [r3, #4]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	689a      	ldr	r2, [r3, #8]
 800dc64:	687c      	ldr	r4, [r7, #4]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3374      	adds	r3, #116	; 0x74
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	4623      	mov	r3, r4
 800dc6e:	f7fe f8a9 	bl	800bdc4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>
 800dc72:	4603      	mov	r3, r0
                                      &node_and_registrations_,
                                      &eval_tensors_) != kTfLiteOk) {
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	bf14      	ite	ne
 800dc78:	2301      	movne	r3, #1
 800dc7a:	2300      	moveq	r3, #0
 800dc7c:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00b      	beq.n	800dc9a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	497f      	ldr	r1, [pc, #508]	; (800de84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x234>)
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7f5 f995 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2201      	movs	r2, #1
 800dc92:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return kTfLiteError;
 800dc96:	2301      	movs	r3, #1
 800dc98:	e0f0      	b.n	800de7c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>

  // Update the pointer now that TfLiteEvalTensor allocation has completed on
  // the context helper.
  // TODO(b/16157777): This call would not be needed if ContextHelper rolled
  // into the interpreter.
  context_helper_.SetTfLiteEvalTensors(eval_tensors_);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dca4:	4619      	mov	r1, r3
 800dca6:	4610      	mov	r0, r2
 800dca8:	f7ff ff1c 	bl	800dae4 <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>
  context_.tensors_size = subgraph_->tensors()->size();
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fd f9e8 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7ff f88b 	bl	800cdd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	611a      	str	r2, [r3, #16]
      }
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4a70      	ldr	r2, [pc, #448]	; (800de88 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x238>)
 800dcc8:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2200      	movs	r2, #0
 800dcce:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	637b      	str	r3, [r7, #52]	; 0x34
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fd f9fb 	bl	800b0da <_ZNK6tflite8SubGraph9operatorsEv>
 800dce4:	4603      	mov	r3, r0
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7ff f8a8 	bl	800ce3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800dcec:	4602      	mov	r2, r0
 800dcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	bf34      	ite	cc
 800dcf4:	2301      	movcc	r3, #1
 800dcf6:	2300      	movcs	r3, #0
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d035      	beq.n	800dd6a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
    auto* node = &(node_and_registrations_[i].node);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6819      	ldr	r1, [r3, #0]
 800dd02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd04:	4613      	mov	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	4413      	add	r3, r2
 800dd0a:	00db      	lsls	r3, r3, #3
 800dd0c:	440b      	add	r3, r1
 800dd0e:	617b      	str	r3, [r7, #20]
    auto* registration = node_and_registrations_[i].registration;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6819      	ldr	r1, [r3, #0]
 800dd14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd16:	4613      	mov	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4413      	add	r3, r2
 800dd1c:	00db      	lsls	r3, r3, #3
 800dd1e:	440b      	add	r3, r1
 800dd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd22:	613b      	str	r3, [r7, #16]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	695b      	ldr	r3, [r3, #20]
 800dd28:	2b20      	cmp	r3, #32
 800dd2a:	d106      	bne.n	800dd3a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xea>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	699b      	ldr	r3, [r3, #24]
 800dd30:	62fb      	str	r3, [r7, #44]	; 0x2c
      init_data_size = node->custom_initial_data_size;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	69db      	ldr	r3, [r3, #28]
 800dd36:	633b      	str	r3, [r7, #48]	; 0x30
 800dd38:	e004      	b.n	800dd44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	695b      	ldr	r3, [r3, #20]
 800dd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      init_data_size = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (registration->init) {
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00a      	beq.n	800dd62 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x112>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	f102 0010 	add.w	r0, r2, #16
 800dd56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd5a:	4798      	blx	r3
 800dd5c:	4602      	mov	r2, r0
      node->user_data =
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800dd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd64:	3301      	adds	r3, #1
 800dd66:	637b      	str	r3, [r7, #52]	; 0x34
 800dd68:	e7b7      	b.n	800dcda <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x8a>
    }
  }

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena =
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4a47      	ldr	r2, [pc, #284]	; (800de8c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x23c>)
 800dd6e:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800dd70:	2300      	movs	r3, #0
 800dd72:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7fd f9ae 	bl	800b0da <_ZNK6tflite8SubGraph9operatorsEv>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7ff f85b 	bl	800ce3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800dd86:	4602      	mov	r2, r0
 800dd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	bf34      	ite	cc
 800dd8e:	2301      	movcc	r3, #1
 800dd90:	2300      	movcs	r3, #0
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d03c      	beq.n	800de12 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    auto* node = &(node_and_registrations_[i].node);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6819      	ldr	r1, [r3, #0]
 800dd9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd9e:	4613      	mov	r3, r2
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	4413      	add	r3, r2
 800dda4:	00db      	lsls	r3, r3, #3
 800dda6:	440b      	add	r3, r1
 800dda8:	623b      	str	r3, [r7, #32]
    auto* registration = node_and_registrations_[i].registration;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6819      	ldr	r1, [r3, #0]
 800ddae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	4413      	add	r3, r2
 800ddb6:	00db      	lsls	r3, r3, #3
 800ddb8:	440b      	add	r3, r1
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbc:	61fb      	str	r3, [r7, #28]
    if (registration->prepare) {
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d01a      	beq.n	800ddfc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	3210      	adds	r2, #16
 800ddce:	6a39      	ldr	r1, [r7, #32]
 800ddd0:	4610      	mov	r0, r2
 800ddd2:	4798      	blx	r3
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	76fb      	strb	r3, [r7, #27]
      if (prepare_status != kTfLiteOk) {
 800ddd8:	7efb      	ldrb	r3, [r7, #27]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d00e      	beq.n	800ddfc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
        TF_LITE_REPORT_ERROR(
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	68dc      	ldr	r4, [r3, #12]
 800dde2:	69f8      	ldr	r0, [r7, #28]
 800dde4:	f7ff fdbe 	bl	800d964 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800dde8:	4602      	mov	r2, r0
 800ddea:	7efb      	ldrb	r3, [r7, #27]
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf0:	4927      	ldr	r1, [pc, #156]	; (800de90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x240>)
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f7f5 f8e0 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e03f      	b.n	800de7c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>
      }
    }
    allocator_.FinishPrepareNodeAllocations(/*node_id=*/i);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de02:	4611      	mov	r1, r2
 800de04:	4618      	mov	r0, r3
 800de06:	f7fe f8fb 	bl	800c000 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800de0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0c:	3301      	adds	r3, #1
 800de0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800de10:	e7b0      	b.n	800dd74 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x124>
  }

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2200      	movs	r2, #0
 800de16:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4a1c      	ldr	r2, [pc, #112]	; (800de94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x244>)
 800de22:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6859      	ldr	r1, [r3, #4]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	3378      	adds	r3, #120	; 0x78
 800de34:	f7fe f822 	bl	800be7c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>
 800de38:	4603      	mov	r3, r0
 800de3a:	73fb      	strb	r3, [r7, #15]
 800de3c:	7bfb      	ldrb	r3, [r7, #15]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d001      	beq.n	800de46 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1f6>
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	e01a      	b.n	800de7c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>
                    allocator_.FinishModelAllocation(model_, eval_tensors_,
                                                     &scratch_buffer_handles_));
  // TODO(b/16157777): Remove this when ContextHelper is rolled into this class.
  context_helper_.SetScratchBufferHandles(scratch_buffer_handles_);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de50:	4619      	mov	r1, r3
 800de52:	4610      	mov	r0, r2
 800de54:	f7ff fe54 	bl	800db00 <_ZN6tflite8internal13ContextHelper23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 f995 	bl	800e188 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800de5e:	4603      	mov	r3, r0
 800de60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d002      	beq.n	800de72 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x222>
 800de6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de70:	e004      	b.n	800de7c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>

  tensors_allocated_ = true;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2201      	movs	r2, #1
 800de76:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  return kTfLiteOk;
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	373c      	adds	r7, #60	; 0x3c
 800de80:	46bd      	mov	sp, r7
 800de82:	bd90      	pop	{r4, r7, pc}
 800de84:	0801dec0 	.word	0x0801dec0
 800de88:	0800d9cb 	.word	0x0800d9cb
 800de8c:	0800d9f7 	.word	0x0800d9f7
 800de90:	0801dee4 	.word	0x0801dee4
 800de94:	0800da21 	.word	0x0800da21

0800de98 <_ZN6tflite21ScopedOperatorProfileD1Ev>:
class ScopedOperatorProfile : public ScopedProfile {
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7ff fcef 	bl	800d886 <_ZN6tflite13ScopedProfileD1Ev>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4618      	mov	r0, r3
 800deac:	3708      	adds	r7, #8
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
	...

0800deb4 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800deb4:	b5b0      	push	{r4, r5, r7, lr}
 800deb6:	b08c      	sub	sp, #48	; 0x30
 800deb8:	af02      	add	r7, sp, #8
 800deba:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d007      	beq.n	800ded6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	4947      	ldr	r1, [pc, #284]	; (800dfe8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x134>)
 800decc:	4618      	mov	r0, r3
 800dece:	f7f5 f873 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800ded2:	2401      	movs	r4, #1
 800ded4:	e082      	b.n	800dfdc <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800dedc:	f083 0301 	eor.w	r3, r3, #1
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d009      	beq.n	800defa <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7ff feb2 	bl	800dc50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800deec:	4603      	mov	r3, r0
 800deee:	75bb      	strb	r3, [r7, #22]
 800def0:	7dbb      	ldrb	r3, [r7, #22]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800def6:	7dbc      	ldrb	r4, [r7, #22]
 800def8:	e070      	b.n	800dfdc <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
  }

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800defa:	2300      	movs	r3, #0
 800defc:	627b      	str	r3, [r7, #36]	; 0x24
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df02:	4618      	mov	r0, r3
 800df04:	f7fd f8e9 	bl	800b0da <_ZNK6tflite8SubGraph9operatorsEv>
 800df08:	4603      	mov	r3, r0
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7fe ff96 	bl	800ce3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800df10:	4602      	mov	r2, r0
 800df12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df14:	4293      	cmp	r3, r2
 800df16:	bf34      	ite	cc
 800df18:	2301      	movcc	r3, #1
 800df1a:	2300      	movcs	r3, #0
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d05b      	beq.n	800dfda <_ZN6tflite16MicroInterpreter6InvokeEv+0x126>
    auto* node = &(node_and_registrations_[i].node);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6819      	ldr	r1, [r3, #0]
 800df26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df28:	4613      	mov	r3, r2
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	4413      	add	r3, r2
 800df2e:	00db      	lsls	r3, r3, #3
 800df30:	440b      	add	r3, r1
 800df32:	623b      	str	r3, [r7, #32]
    auto* registration = node_and_registrations_[i].registration;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6819      	ldr	r1, [r3, #0]
 800df38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df3a:	4613      	mov	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	00db      	lsls	r3, r3, #3
 800df42:	440b      	add	r3, r1
 800df44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df46:	61fb      	str	r3, [r7, #28]

    if (registration->invoke) {
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d040      	beq.n	800dfd2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11e>
      TfLiteStatus invoke_status;
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by
      // ScopedOperatorProfile.
      tflite::Profiler* profiler =
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df54:	61bb      	str	r3, [r7, #24]
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
 800df56:	69f8      	ldr	r0, [r7, #28]
 800df58:	f7ff fd04 	bl	800d964 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800df5c:	4602      	mov	r2, r0
 800df5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df60:	f107 000c 	add.w	r0, r7, #12
 800df64:	69b9      	ldr	r1, [r7, #24]
 800df66:	f7ff fca6 	bl	800d8b6 <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>
#endif
      invoke_status = registration->invoke(&context_, node);
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	3210      	adds	r2, #16
 800df72:	6a39      	ldr	r1, [r7, #32]
 800df74:	4610      	mov	r0, r2
 800df76:	4798      	blx	r3
 800df78:	4603      	mov	r3, r0
 800df7a:	75fb      	strb	r3, [r7, #23]

      // All TfLiteTensor structs used in the kernel are allocated from temp
      // memory in the allocator. This creates a chain of allocations in the
      // temp section. The call below resets the chain of allocations to
      // prepare for the next call.
      allocator_.ResetTempAllocations();
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	3308      	adds	r3, #8
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4610      	mov	r0, r2
 800df8c:	4798      	blx	r3

      if (invoke_status == kTfLiteError) {
 800df8e:	7dfb      	ldrb	r3, [r7, #23]
 800df90:	2b01      	cmp	r3, #1
 800df92:	d10f      	bne.n	800dfb4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x100>
        TF_LITE_REPORT_ERROR(
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	68dc      	ldr	r4, [r3, #12]
 800df98:	69f8      	ldr	r0, [r7, #28]
 800df9a:	f7ff fce3 	bl	800d964 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	7dfb      	ldrb	r3, [r7, #23]
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa6:	4911      	ldr	r1, [pc, #68]	; (800dfec <_ZN6tflite16MicroInterpreter6InvokeEv+0x138>)
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f7f5 f805 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %d) failed to invoke with status %d",
            OpNameFromRegistration(registration), i, invoke_status);
        return kTfLiteError;
 800dfae:	2401      	movs	r4, #1
 800dfb0:	2500      	movs	r5, #0
 800dfb2:	e006      	b.n	800dfc2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x10e>
      } else if (invoke_status != kTfLiteOk) {
 800dfb4:	7dfb      	ldrb	r3, [r7, #23]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d002      	beq.n	800dfc0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x10c>
        return invoke_status;
 800dfba:	7dfc      	ldrb	r4, [r7, #23]
 800dfbc:	2500      	movs	r5, #0
 800dfbe:	e000      	b.n	800dfc2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x10e>
 800dfc0:	2501      	movs	r5, #1
 800dfc2:	f107 030c 	add.w	r3, r7, #12
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7ff ff66 	bl	800de98 <_ZN6tflite21ScopedOperatorProfileD1Ev>
 800dfcc:	2d01      	cmp	r5, #1
 800dfce:	d105      	bne.n	800dfdc <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
          profiler, OpNameFromRegistration(registration), i);
 800dfd0:	bf00      	nop
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800dfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	627b      	str	r3, [r7, #36]	; 0x24
 800dfd8:	e791      	b.n	800defe <_ZN6tflite16MicroInterpreter6InvokeEv+0x4a>
      }
    }
  }
  return kTfLiteOk;
 800dfda:	2400      	movs	r4, #0
 800dfdc:	4623      	mov	r3, r4
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3728      	adds	r7, #40	; 0x28
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bdb0      	pop	{r4, r5, r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	0801df1c 	.word	0x0801df1c
 800dfec:	0801df4c 	.word	0x0801df4c

0800dff0 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dff2:	b087      	sub	sp, #28
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
  const size_t length = inputs_size();
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f7ff fc72 	bl	800d8e4 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800e000:	6178      	str	r0, [r7, #20]
  if (index >= length) {
 800e002:	68ba      	ldr	r2, [r7, #8]
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	429a      	cmp	r2, r3
 800e008:	d308      	bcc.n	800e01c <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	68d8      	ldr	r0, [r3, #12]
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	68ba      	ldr	r2, [r7, #8]
 800e012:	4928      	ldr	r1, [pc, #160]	; (800e0b4 <_ZN6tflite16MicroInterpreter5inputEj+0xc4>)
 800e014:	f7f4 ffd0 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800e018:	2300      	movs	r3, #0
 800e01a:	e046      	b.n	800e0aa <_ZN6tflite16MicroInterpreter5inputEj+0xba>
  }
  if (index != 0) {
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d01f      	beq.n	800e062 <_ZN6tflite16MicroInterpreter5inputEj+0x72>
    TF_LITE_REPORT_ERROR(
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	4924      	ldr	r1, [pc, #144]	; (800e0b8 <_ZN6tflite16MicroInterpreter5inputEj+0xc8>)
 800e028:	4618      	mov	r0, r3
 800e02a:	f7f4 ffc5 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Input tensors not at index 0 are allocated from the "
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                                     inputs().Get(index));
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681c      	ldr	r4, [r3, #0]
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	685e      	ldr	r6, [r3, #4]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e042:	607b      	str	r3, [r7, #4]
                                                     inputs().Get(index));
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f7ff fc5f 	bl	800d908 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800e04a:	4603      	mov	r3, r0
 800e04c:	68b9      	ldr	r1, [r7, #8]
 800e04e:	4618      	mov	r0, r3
 800e050:	f7f6 fdd8 	bl	8004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800e054:	4603      	mov	r3, r0
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	4631      	mov	r1, r6
 800e05a:	4628      	mov	r0, r5
 800e05c:	47a0      	blx	r4
 800e05e:	4603      	mov	r3, r0
 800e060:	e023      	b.n	800e0aa <_ZN6tflite16MicroInterpreter5inputEj+0xba>
  }
  if (input_tensor_ == nullptr) {
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d11b      	bne.n	800e0a4 <_ZN6tflite16MicroInterpreter5inputEj+0xb4>
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, inputs().Get(index));
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	681c      	ldr	r4, [r3, #0]
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	685e      	ldr	r6, [r3, #4]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e080:	607b      	str	r3, [r7, #4]
        model_, eval_tensors_, inputs().Get(index));
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f7ff fc40 	bl	800d908 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800e088:	4603      	mov	r3, r0
 800e08a:	68b9      	ldr	r1, [r7, #8]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7f6 fdb9 	bl	8004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800e092:	4603      	mov	r3, r0
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	4631      	mov	r1, r6
 800e098:	4628      	mov	r0, r5
 800e09a:	47a0      	blx	r4
 800e09c:	4602      	mov	r2, r0
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
  return input_tensor_;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	371c      	adds	r7, #28
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	0801df80 	.word	0x0801df80
 800e0b8:	0801dfac 	.word	0x0801dfac

0800e0bc <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800e0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0be:	b087      	sub	sp, #28
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
  const size_t length = outputs_size();
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f7ff fc2c 	bl	800d924 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800e0cc:	6178      	str	r0, [r7, #20]
  if (index >= length) {
 800e0ce:	68ba      	ldr	r2, [r7, #8]
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d308      	bcc.n	800e0e8 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	68d8      	ldr	r0, [r3, #12]
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	68ba      	ldr	r2, [r7, #8]
 800e0de:	4928      	ldr	r1, [pc, #160]	; (800e180 <_ZN6tflite16MicroInterpreter6outputEj+0xc4>)
 800e0e0:	f7f4 ff6a 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	e046      	b.n	800e176 <_ZN6tflite16MicroInterpreter6outputEj+0xba>
  }
  if (index != 0) {
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d01f      	beq.n	800e12e <_ZN6tflite16MicroInterpreter6outputEj+0x72>
    TF_LITE_REPORT_ERROR(
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	4924      	ldr	r1, [pc, #144]	; (800e184 <_ZN6tflite16MicroInterpreter6outputEj+0xc8>)
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f4 ff5f 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Output tensors not at index 0 are allocated from the "
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                                     outputs().Get(index));
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681c      	ldr	r4, [r3, #0]
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	685e      	ldr	r6, [r3, #4]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e10e:	607b      	str	r3, [r7, #4]
                                                     outputs().Get(index));
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f7ff fc19 	bl	800d948 <_ZNK6tflite16MicroInterpreter7outputsEv>
 800e116:	4603      	mov	r3, r0
 800e118:	68b9      	ldr	r1, [r7, #8]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7f6 fd72 	bl	8004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800e120:	4603      	mov	r3, r0
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	4631      	mov	r1, r6
 800e126:	4628      	mov	r0, r5
 800e128:	47a0      	blx	r4
 800e12a:	4603      	mov	r3, r0
 800e12c:	e023      	b.n	800e176 <_ZN6tflite16MicroInterpreter6outputEj+0xba>
  }
  if (output_tensor_ == nullptr) {
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e134:	2b00      	cmp	r3, #0
 800e136:	d11b      	bne.n	800e170 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>
    // TODO(b/162311891): Drop these allocations when the interpreter supports
    // handling buffers from TfLiteEvalTensor.
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, outputs().Get(index));
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	681c      	ldr	r4, [r3, #0]
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	685e      	ldr	r6, [r3, #4]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e14c:	607b      	str	r3, [r7, #4]
        model_, eval_tensors_, outputs().Get(index));
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f7ff fbfa 	bl	800d948 <_ZNK6tflite16MicroInterpreter7outputsEv>
 800e154:	4603      	mov	r3, r0
 800e156:	68b9      	ldr	r1, [r7, #8]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7f6 fd53 	bl	8004c04 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800e15e:	4603      	mov	r3, r0
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	4631      	mov	r1, r6
 800e164:	4628      	mov	r0, r5
 800e166:	47a0      	blx	r4
 800e168:	4602      	mov	r2, r0
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
  return output_tensor_;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
}
 800e176:	4618      	mov	r0, r3
 800e178:	371c      	adds	r7, #28
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e17e:	bf00      	nop
 800e180:	0801e024 	.word	0x0801e024
 800e184:	0801e050 	.word	0x0801e050

0800e188 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
  }
  return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                   index);
}

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800e188:	b590      	push	{r4, r7, lr}
 800e18a:	b089      	sub	sp, #36	; 0x24
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 800e190:	2300      	movs	r3, #0
 800e192:	61fb      	str	r3, [r7, #28]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fc ff74 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fe fe17 	bl	800cdd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	bf34      	ite	cc
 800e1ae:	2301      	movcc	r3, #1
 800e1b0:	2300      	movcs	r3, #0
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d053      	beq.n	800e260 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd8>
    auto* tensor = subgraph_->tensors()->Get(i);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fc ff62 	bl	800b086 <_ZNK6tflite8SubGraph7tensorsEv>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	69f9      	ldr	r1, [r7, #28]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe fe12 	bl	800cdf0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800e1cc:	6178      	str	r0, [r7, #20]
    if (tensor->is_variable()) {
 800e1ce:	6978      	ldr	r0, [r7, #20]
 800e1d0:	f7fc ff0c 	bl	800afec <_ZNK6tflite6Tensor11is_variableEv>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d03e      	beq.n	800e258 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd0>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800e1de:	69fa      	ldr	r2, [r7, #28]
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	005b      	lsls	r3, r3, #1
 800e1e4:	4413      	add	r3, r2
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	440b      	add	r3, r1
 800e1ea:	f107 020c 	add.w	r2, r7, #12
 800e1ee:	4611      	mov	r1, r2
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fc fe2a 	bl	800ae4a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	74fb      	strb	r3, [r7, #19]
 800e1fa:	7cfb      	ldrb	r3, [r7, #19]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x7c>
 800e200:	7cfb      	ldrb	r3, [r7, #19]
 800e202:	e02e      	b.n	800e262 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xda>
          TfLiteEvalTensorByteLength(&eval_tensors_[i], &buffer_size));

      int value = 0;
 800e204:	2300      	movs	r3, #0
 800e206:	61bb      	str	r3, [r7, #24]
      if (tensor->type() == tflite::TensorType_INT8) {
 800e208:	6978      	ldr	r0, [r7, #20]
 800e20a:	f7fc fd0d 	bl	800ac28 <_ZNK6tflite6Tensor4typeEv>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b09      	cmp	r3, #9
 800e212:	bf0c      	ite	eq
 800e214:	2301      	moveq	r3, #1
 800e216:	2300      	movne	r3, #0
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00e      	beq.n	800e23c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xb4>
        value = tensor->quantization()->zero_point()->Get(0);
 800e21e:	6978      	ldr	r0, [r7, #20]
 800e220:	f7fc fed6 	bl	800afd0 <_ZNK6tflite6Tensor12quantizationEv>
 800e224:	4603      	mov	r3, r0
 800e226:	4618      	mov	r0, r3
 800e228:	f7fc fea6 	bl	800af78 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2100      	movs	r1, #0
 800e230:	4618      	mov	r0, r3
 800e232:	f7fe fda7 	bl	800cd84 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800e236:	4603      	mov	r3, r0
 800e238:	460c      	mov	r4, r1
 800e23a:	61bb      	str	r3, [r7, #24]
      }
      memset(eval_tensors_[i].data.raw, value, buffer_size);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800e240:	69fa      	ldr	r2, [r7, #28]
 800e242:	4613      	mov	r3, r2
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	4413      	add	r3, r2
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	440b      	add	r3, r1
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	69b9      	ldr	r1, [r7, #24]
 800e252:	4618      	mov	r0, r3
 800e254:	f00a feda 	bl	801900c <memset>
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	3301      	adds	r3, #1
 800e25c:	61fb      	str	r3, [r7, #28]
 800e25e:	e799      	b.n	800e194 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xc>
    }
  }

  return kTfLiteOk;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3724      	adds	r7, #36	; 0x24
 800e266:	46bd      	mov	sp, r7
 800e268:	bd90      	pop	{r4, r7, pc}

0800e26a <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800e26a:	b480      	push	{r7}
 800e26c:	b087      	sub	sp, #28
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	3b01      	subs	r3, #1
 800e27c:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800e27e:	697a      	ldr	r2, [r7, #20]
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	429a      	cmp	r2, r3
 800e284:	d20e      	bcs.n	800e2a4 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	1c5a      	adds	r2, r3, #1
 800e290:	617a      	str	r2, [r7, #20]
 800e292:	693a      	ldr	r2, [r7, #16]
 800e294:	7812      	ldrb	r2, [r2, #0]
 800e296:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	1e5a      	subs	r2, r3, #1
 800e29c:	613a      	str	r2, [r7, #16]
 800e29e:	7bfa      	ldrb	r2, [r7, #15]
 800e2a0:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800e2a2:	e7ec      	b.n	800e27e <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800e2a4:	687b      	ldr	r3, [r7, #4]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	371c      	adds	r7, #28
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr

0800e2b2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800e2b2:	b480      	push	{r7}
 800e2b4:	b087      	sub	sp, #28
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	60f8      	str	r0, [r7, #12]
 800e2ba:	60b9      	str	r1, [r7, #8]
 800e2bc:	607a      	str	r2, [r7, #4]
  char* current = main;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d003      	beq.n	800e2d2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800e2d0:	e7f7      	b.n	800e2c2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	4413      	add	r3, r2
 800e2da:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00e      	beq.n	800e302 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800e2e4:	697a      	ldr	r2, [r7, #20]
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d20a      	bcs.n	800e302 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	781a      	ldrb	r2, [r3, #0]
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	701a      	strb	r2, [r3, #0]
    ++current;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	617b      	str	r3, [r7, #20]
    ++to_append;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800e300:	e7ec      	b.n	800e2dc <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	2200      	movs	r2, #0
 800e306:	701a      	strb	r2, [r3, #0]
  return current;
 800e308:	697b      	ldr	r3, [r7, #20]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	371c      	adds	r7, #28
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr

0800e316 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800e316:	b580      	push	{r7, lr}
 800e318:	b088      	sub	sp, #32
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	60f8      	str	r0, [r7, #12]
 800e31e:	60b9      	str	r1, [r7, #8]
 800e320:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e32e:	fb02 f201 	mul.w	r2, r2, r1
 800e332:	1a9b      	subs	r3, r3, r2
 800e334:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	2b09      	cmp	r3, #9
 800e33a:	dc04      	bgt.n	800e346 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	3330      	adds	r3, #48	; 0x30
 800e342:	77fb      	strb	r3, [r7, #31]
 800e344:	e003      	b.n	800e34e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	3357      	adds	r3, #87	; 0x57
 800e34c:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	1c5a      	adds	r2, r3, #1
 800e352:	60ba      	str	r2, [r7, #8]
 800e354:	7ffa      	ldrb	r2, [r7, #31]
 800e356:	701a      	strb	r2, [r3, #0]
    i /= base;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	68fa      	ldr	r2, [r7, #12]
 800e35c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e360:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d000      	beq.n	800e36a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800e368:	e7dd      	b.n	800e326 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	2200      	movs	r2, #0
 800e36e:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800e370:	68b9      	ldr	r1, [r7, #8]
 800e372:	69b8      	ldr	r0, [r7, #24]
 800e374:	f7ff ff79 	bl	800e26a <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800e378:	68bb      	ldr	r3, [r7, #8]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3720      	adds	r7, #32
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800e382:	b580      	push	{r7, lr}
 800e384:	b084      	sub	sp, #16
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2b00      	cmp	r3, #0
 800e394:	da07      	bge.n	800e3a6 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	1c5a      	adds	r2, r3, #1
 800e39a:	603a      	str	r2, [r7, #0]
 800e39c:	222d      	movs	r2, #45	; 0x2d
 800e39e:	701a      	strb	r2, [r3, #0]
    u = -u;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	425b      	negs	r3, r3
 800e3a4:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800e3a6:	220a      	movs	r2, #10
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f7ff ffb3 	bl	800e316 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800e3b0:	4603      	mov	r3, r0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b090      	sub	sp, #64	; 0x40
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	60f8      	str	r0, [r7, #12]
 800e3c2:	60b9      	str	r1, [r7, #8]
 800e3c4:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800e3c6:	f107 0310 	add.w	r3, r7, #16
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7ff ffd8 	bl	800e382 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800e3d2:	f107 0310 	add.w	r3, r7, #16
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	68b9      	ldr	r1, [r7, #8]
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f7ff ff69 	bl	800e2b2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800e3e0:	4603      	mov	r3, r0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3740      	adds	r7, #64	; 0x40
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b090      	sub	sp, #64	; 0x40
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	60f8      	str	r0, [r7, #12]
 800e3f2:	60b9      	str	r1, [r7, #8]
 800e3f4:	607a      	str	r2, [r7, #4]
 800e3f6:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800e3f8:	f107 0310 	add.w	r3, r7, #16
 800e3fc:	683a      	ldr	r2, [r7, #0]
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7ff ff88 	bl	800e316 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800e406:	f107 0310 	add.w	r3, r7, #16
 800e40a:	461a      	mov	r2, r3
 800e40c:	68b9      	ldr	r1, [r7, #8]
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f7ff ff4f 	bl	800e2b2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800e414:	4603      	mov	r3, r0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3740      	adds	r7, #64	; 0x40
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
	...

0800e420 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800e420:	b590      	push	{r4, r7, lr}
 800e422:	b09b      	sub	sp, #108	; 0x6c
 800e424:	af00      	add	r7, sp, #0
 800e426:	ed87 0a01 	vstr	s0, [r7, #4]
 800e42a:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	332f      	adds	r3, #47	; 0x2f
 800e434:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800e436:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e43a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800e43c:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800e440:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800e442:	2317      	movs	r3, #23
 800e444:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800e446:	237f      	movs	r3, #127	; 0x7f
 800e448:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800e44a:	4b6a      	ldr	r3, [pc, #424]	; (800e5f4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800e44c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	0ddb      	lsrs	r3, r3, #23
 800e456:	b2db      	uxtb	r3, r3
 800e458:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800e45a:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e462:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	2b00      	cmp	r3, #0
 800e468:	da05      	bge.n	800e476 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 800e46a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e46c:	222d      	movs	r2, #45	; 0x2d
 800e46e:	701a      	strb	r2, [r3, #0]
    current += 1;
 800e470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e472:	3301      	adds	r3, #1
 800e474:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800e476:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e478:	2200      	movs	r2, #0
 800e47a:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800e47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47e:	2b80      	cmp	r3, #128	; 0x80
 800e480:	d118      	bne.n	800e4b4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800e482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10a      	bne.n	800e49e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 800e488:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e48a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	4a5a      	ldr	r2, [pc, #360]	; (800e5f8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800e490:	4619      	mov	r1, r3
 800e492:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e494:	f7ff ff0d 	bl	800e2b2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800e498:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800e49a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e49c:	e0a5      	b.n	800e5ea <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800e49e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e4a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4a2:	1ad3      	subs	r3, r2, r3
 800e4a4:	4a55      	ldr	r2, [pc, #340]	; (800e5fc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e4aa:	f7ff ff02 	bl	800e2b2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800e4ae:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800e4b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4b2:	e09a      	b.n	800e5ea <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800e4b4:	230d      	movs	r3, #13
 800e4b6:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800e4b8:	4b51      	ldr	r3, [pc, #324]	; (800e600 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800e4ba:	f107 040c 	add.w	r4, r7, #12
 800e4be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e4c0:	c407      	stmia	r4!, {r0, r1, r2}
 800e4c2:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800e4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c6:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4ce:	2b0c      	cmp	r3, #12
 800e4d0:	dc0f      	bgt.n	800e4f2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800e4d2:	f107 020c 	add.w	r2, r7, #12
 800e4d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4d8:	4413      	add	r3, r2
 800e4da:	f993 3000 	ldrsb.w	r3, [r3]
 800e4de:	461a      	mov	r2, r3
 800e4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e2:	40d3      	lsrs	r3, r2
 800e4e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e4e6:	4413      	add	r3, r2
 800e4e8:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800e4ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4f0:	e7ec      	b.n	800e4cc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800e4f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4f4:	2231      	movs	r2, #49	; 0x31
 800e4f6:	701a      	strb	r2, [r3, #0]
  current += 1;
 800e4f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800e4fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e500:	222e      	movs	r2, #46	; 0x2e
 800e502:	701a      	strb	r2, [r3, #0]
  current += 1;
 800e504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e506:	3301      	adds	r3, #1
 800e508:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800e50a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e50c:	2200      	movs	r2, #0
 800e50e:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800e510:	2307      	movs	r3, #7
 800e512:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800e514:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	2b07      	cmp	r3, #7
 800e51c:	dc01      	bgt.n	800e522 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800e51e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e520:	e063      	b.n	800e5ea <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800e522:	2301      	movs	r3, #1
 800e524:	65bb      	str	r3, [r7, #88]	; 0x58
 800e526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e528:	2b06      	cmp	r3, #6
 800e52a:	dc08      	bgt.n	800e53e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 800e52c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e52e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e530:	4413      	add	r3, r2
 800e532:	2230      	movs	r2, #48	; 0x30
 800e534:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800e536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e538:	3301      	adds	r3, #1
 800e53a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e53c:	e7f3      	b.n	800e526 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800e53e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e540:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800e542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e546:	1ad1      	subs	r1, r2, r3
 800e548:	230a      	movs	r3, #10
 800e54a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e54c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e54e:	f7ff ff4c 	bl	800e3ea <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800e552:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800e554:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	f1c3 0307 	rsb	r3, r3, #7
 800e562:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800e564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e566:	2230      	movs	r2, #48	; 0x30
 800e568:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 800e56a:	6a3b      	ldr	r3, [r7, #32]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d018      	beq.n	800e5a2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800e570:	2300      	movs	r3, #0
 800e572:	657b      	str	r3, [r7, #84]	; 0x54
 800e574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e578:	429a      	cmp	r2, r3
 800e57a:	da0f      	bge.n	800e59c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 800e57c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e57e:	3b01      	subs	r3, #1
 800e580:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800e582:	6a3b      	ldr	r3, [r7, #32]
 800e584:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e586:	4413      	add	r3, r2
 800e588:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e58a:	7812      	ldrb	r2, [r2, #0]
 800e58c:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800e58e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e590:	2230      	movs	r2, #48	; 0x30
 800e592:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800e594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e596:	3301      	adds	r3, #1
 800e598:	657b      	str	r3, [r7, #84]	; 0x54
 800e59a:	e7eb      	b.n	800e574 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 800e59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e59e:	3307      	adds	r3, #7
 800e5a0:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800e5a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	2b30      	cmp	r3, #48	; 0x30
 800e5aa:	d108      	bne.n	800e5be <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 800e5ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5ae:	3b01      	subs	r3, #1
 800e5b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d203      	bcs.n	800e5be <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800e5b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800e5bc:	e7f1      	b.n	800e5a2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800e5be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800e5c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e5c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	4a0e      	ldr	r2, [pc, #56]	; (800e604 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e5d0:	f7ff fe6f 	bl	800e2b2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800e5d4:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800e5d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e5d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5de:	4619      	mov	r1, r3
 800e5e0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e5e2:	f7ff feea 	bl	800e3ba <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800e5e6:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800e5e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	376c      	adds	r7, #108	; 0x6c
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd90      	pop	{r4, r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	007fffff 	.word	0x007fffff
 800e5f8:	0801e120 	.word	0x0801e120
 800e5fc:	0801e124 	.word	0x0801e124
 800e600:	0801e12c 	.word	0x0801e12c
 800e604:	0801e128 	.word	0x0801e128

0800e608 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800e612:	6879      	ldr	r1, [r7, #4]
 800e614:	6838      	ldr	r0, [r7, #0]
 800e616:	f7ff feb4 	bl	800e382 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800e61a:	4603      	mov	r3, r0
 800e61c:	461a      	mov	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	1ad3      	subs	r3, r2, r3
}
 800e622:	4618      	mov	r0, r3
 800e624:	3708      	adds	r7, #8
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b082      	sub	sp, #8
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
 800e632:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800e634:	220a      	movs	r2, #10
 800e636:	6879      	ldr	r1, [r7, #4]
 800e638:	6838      	ldr	r0, [r7, #0]
 800e63a:	f7ff fe6c 	bl	800e316 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800e63e:	4603      	mov	r3, r0
 800e640:	461a      	mov	r2, r3
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	1ad3      	subs	r3, r2, r3
}
 800e646:	4618      	mov	r0, r3
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800e64e:	b580      	push	{r7, lr}
 800e650:	b082      	sub	sp, #8
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
 800e656:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800e658:	2210      	movs	r2, #16
 800e65a:	6879      	ldr	r1, [r7, #4]
 800e65c:	6838      	ldr	r0, [r7, #0]
 800e65e:	f7ff fe5a 	bl	800e316 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800e662:	4603      	mov	r3, r0
 800e664:	461a      	mov	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	1ad3      	subs	r3, r2, r3
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800e672:	b580      	push	{r7, lr}
 800e674:	b082      	sub	sp, #8
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
 800e67a:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	ed97 0a00 	vldr	s0, [r7]
 800e684:	f7ff fecc 	bl	800e420 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800e688:	4603      	mov	r3, r0
 800e68a:	461a      	mov	r2, r3
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	1ad3      	subs	r3, r2, r3
}
 800e690:	4618      	mov	r0, r3
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800e698:	b5b0      	push	{r4, r5, r7, lr}
 800e69a:	b08a      	sub	sp, #40	; 0x28
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
 800e6a4:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800e6b4:	6a3b      	ldr	r3, [r7, #32]
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f000 8109 	beq.w	800e8d0 <MicroVsnprintf+0x238>
 800e6be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	f280 8104 	bge.w	800e8d0 <MicroVsnprintf+0x238>
    if (*current == '%') {
 800e6c8:	6a3b      	ldr	r3, [r7, #32]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	2b25      	cmp	r3, #37	; 0x25
 800e6ce:	f040 80f3 	bne.w	800e8b8 <MicroVsnprintf+0x220>
      current++;
 800e6d2:	6a3b      	ldr	r3, [r7, #32]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	2b66      	cmp	r3, #102	; 0x66
 800e6de:	f000 8083 	beq.w	800e7e8 <MicroVsnprintf+0x150>
 800e6e2:	2b66      	cmp	r3, #102	; 0x66
 800e6e4:	dc05      	bgt.n	800e6f2 <MicroVsnprintf+0x5a>
 800e6e6:	2b25      	cmp	r3, #37	; 0x25
 800e6e8:	f000 80b4 	beq.w	800e854 <MicroVsnprintf+0x1bc>
 800e6ec:	2b64      	cmp	r3, #100	; 0x64
 800e6ee:	d008      	beq.n	800e702 <MicroVsnprintf+0x6a>
 800e6f0:	e0ed      	b.n	800e8ce <MicroVsnprintf+0x236>
 800e6f2:	2b75      	cmp	r3, #117	; 0x75
 800e6f4:	d026      	beq.n	800e744 <MicroVsnprintf+0xac>
 800e6f6:	2b78      	cmp	r3, #120	; 0x78
 800e6f8:	d045      	beq.n	800e786 <MicroVsnprintf+0xee>
 800e6fa:	2b73      	cmp	r3, #115	; 0x73
 800e6fc:	f000 80b6 	beq.w	800e86c <MicroVsnprintf+0x1d4>
 800e700:	e0e5      	b.n	800e8ce <MicroVsnprintf+0x236>
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800e702:	69ba      	ldr	r2, [r7, #24]
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e706:	1ad3      	subs	r3, r2, r3
 800e708:	2b0a      	cmp	r3, #10
 800e70a:	dc09      	bgt.n	800e720 <MicroVsnprintf+0x88>
            output[output_index++] = '\0';
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	1c5a      	adds	r2, r3, #1
 800e710:	627a      	str	r2, [r7, #36]	; 0x24
 800e712:	461a      	mov	r2, r3
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	4413      	add	r3, r2
 800e718:	2200      	movs	r2, #0
 800e71a:	701a      	strb	r2, [r3, #0]
            return output_index;
 800e71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71e:	e0e0      	b.n	800e8e2 <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	18d0      	adds	r0, r2, r3
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	1d1a      	adds	r2, r3, #4
 800e72a:	603a      	str	r2, [r7, #0]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4619      	mov	r1, r3
 800e730:	f7ff ff6a 	bl	800e608 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800e734:	4602      	mov	r2, r0
          output_index +=
 800e736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e738:	4413      	add	r3, r2
 800e73a:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800e73c:	6a3b      	ldr	r3, [r7, #32]
 800e73e:	3301      	adds	r3, #1
 800e740:	623b      	str	r3, [r7, #32]
          break;
 800e742:	e0c4      	b.n	800e8ce <MicroVsnprintf+0x236>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800e744:	69ba      	ldr	r2, [r7, #24]
 800e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	2b0a      	cmp	r3, #10
 800e74c:	dc09      	bgt.n	800e762 <MicroVsnprintf+0xca>
            output[output_index++] = '\0';
 800e74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e750:	1c5a      	adds	r2, r3, #1
 800e752:	627a      	str	r2, [r7, #36]	; 0x24
 800e754:	461a      	mov	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	4413      	add	r3, r2
 800e75a:	2200      	movs	r2, #0
 800e75c:	701a      	strb	r2, [r3, #0]
            return output_index;
 800e75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e760:	e0bf      	b.n	800e8e2 <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	68fa      	ldr	r2, [r7, #12]
 800e766:	18d0      	adds	r0, r2, r3
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	1d1a      	adds	r2, r3, #4
 800e76c:	603a      	str	r2, [r7, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4619      	mov	r1, r3
 800e772:	f7ff ff5a 	bl	800e62a <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800e776:	4602      	mov	r2, r0
          output_index +=
 800e778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77a:	4413      	add	r3, r2
 800e77c:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800e77e:	6a3b      	ldr	r3, [r7, #32]
 800e780:	3301      	adds	r3, #1
 800e782:	623b      	str	r3, [r7, #32]
          break;
 800e784:	e0a3      	b.n	800e8ce <MicroVsnprintf+0x236>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800e786:	69ba      	ldr	r2, [r7, #24]
 800e788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78a:	1ad3      	subs	r3, r2, r3
 800e78c:	2b09      	cmp	r3, #9
 800e78e:	dc09      	bgt.n	800e7a4 <MicroVsnprintf+0x10c>
            output[output_index++] = '\0';
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	1c5a      	adds	r2, r3, #1
 800e794:	627a      	str	r2, [r7, #36]	; 0x24
 800e796:	461a      	mov	r2, r3
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	4413      	add	r3, r2
 800e79c:	2200      	movs	r2, #0
 800e79e:	701a      	strb	r2, [r3, #0]
            return output_index;
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	e09e      	b.n	800e8e2 <MicroVsnprintf+0x24a>
          }
          output[output_index++] = '0';
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	1c5a      	adds	r2, r3, #1
 800e7a8:	627a      	str	r2, [r7, #36]	; 0x24
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	2230      	movs	r2, #48	; 0x30
 800e7b2:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	1c5a      	adds	r2, r3, #1
 800e7b8:	627a      	str	r2, [r7, #36]	; 0x24
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	4413      	add	r3, r2
 800e7c0:	2278      	movs	r2, #120	; 0x78
 800e7c2:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	68fa      	ldr	r2, [r7, #12]
 800e7c8:	18d0      	adds	r0, r2, r3
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	1d1a      	adds	r2, r3, #4
 800e7ce:	603a      	str	r2, [r7, #0]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	f7ff ff3b 	bl	800e64e <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800e7d8:	4602      	mov	r2, r0
          output_index +=
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	4413      	add	r3, r2
 800e7de:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800e7e0:	6a3b      	ldr	r3, [r7, #32]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	623b      	str	r3, [r7, #32]
          break;
 800e7e6:	e072      	b.n	800e8ce <MicroVsnprintf+0x236>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800e7e8:	69ba      	ldr	r2, [r7, #24]
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	1ad3      	subs	r3, r2, r3
 800e7ee:	ee07 3a90 	vmov	s15, r3
 800e7f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7f6:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800e7fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e802:	d509      	bpl.n	800e818 <MicroVsnprintf+0x180>
            output[output_index++] = '\0';
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	627a      	str	r2, [r7, #36]	; 0x24
 800e80a:	461a      	mov	r2, r3
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	4413      	add	r3, r2
 800e810:	2200      	movs	r2, #0
 800e812:	701a      	strb	r2, [r3, #0]
            return output_index;
 800e814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e816:	e064      	b.n	800e8e2 <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800e818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	18d5      	adds	r5, r2, r3
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	3307      	adds	r3, #7
 800e822:	f023 0307 	bic.w	r3, r3, #7
 800e826:	f103 0208 	add.w	r2, r3, #8
 800e82a:	603a      	str	r2, [r7, #0]
 800e82c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e830:	4618      	mov	r0, r3
 800e832:	4621      	mov	r1, r4
 800e834:	f7f2 f9c8 	bl	8000bc8 <__aeabi_d2f>
 800e838:	4603      	mov	r3, r0
 800e83a:	ee00 3a10 	vmov	s0, r3
 800e83e:	4628      	mov	r0, r5
 800e840:	f7ff ff17 	bl	800e672 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800e844:	4602      	mov	r2, r0
          output_index +=
 800e846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e848:	4413      	add	r3, r2
 800e84a:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800e84c:	6a3b      	ldr	r3, [r7, #32]
 800e84e:	3301      	adds	r3, #1
 800e850:	623b      	str	r3, [r7, #32]
          break;
 800e852:	e03c      	b.n	800e8ce <MicroVsnprintf+0x236>
        case '%':
          output[output_index++] = *current++;
 800e854:	6a3b      	ldr	r3, [r7, #32]
 800e856:	1c5a      	adds	r2, r3, #1
 800e858:	623a      	str	r2, [r7, #32]
 800e85a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e85c:	1c51      	adds	r1, r2, #1
 800e85e:	6279      	str	r1, [r7, #36]	; 0x24
 800e860:	4611      	mov	r1, r2
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	440a      	add	r2, r1
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	7013      	strb	r3, [r2, #0]
          break;
 800e86a:	e030      	b.n	800e8ce <MicroVsnprintf+0x236>
        case 's':
          char* string = va_arg(args, char*);
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	1d1a      	adds	r2, r3, #4
 800e870:	603a      	str	r2, [r7, #0]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800e876:	2300      	movs	r3, #0
 800e878:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800e87a:	69fa      	ldr	r2, [r7, #28]
 800e87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87e:	4413      	add	r3, r2
 800e880:	69ba      	ldr	r2, [r7, #24]
 800e882:	429a      	cmp	r2, r3
 800e884:	dd14      	ble.n	800e8b0 <MicroVsnprintf+0x218>
                 string[string_idx] != '\0') {
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	697a      	ldr	r2, [r7, #20]
 800e88a:	4413      	add	r3, r2
 800e88c:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d00e      	beq.n	800e8b0 <MicroVsnprintf+0x218>
            output[output_index++] = string[string_idx++];
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	1c5a      	adds	r2, r3, #1
 800e896:	61fa      	str	r2, [r7, #28]
 800e898:	461a      	mov	r2, r3
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	441a      	add	r2, r3
 800e89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a0:	1c59      	adds	r1, r3, #1
 800e8a2:	6279      	str	r1, [r7, #36]	; 0x24
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	440b      	add	r3, r1
 800e8aa:	7812      	ldrb	r2, [r2, #0]
 800e8ac:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800e8ae:	e7e4      	b.n	800e87a <MicroVsnprintf+0x1e2>
          }
          current++;
 800e8b0:	6a3b      	ldr	r3, [r7, #32]
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	623b      	str	r3, [r7, #32]
 800e8b6:	e6fd      	b.n	800e6b4 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 800e8b8:	6a3b      	ldr	r3, [r7, #32]
 800e8ba:	1c5a      	adds	r2, r3, #1
 800e8bc:	623a      	str	r2, [r7, #32]
 800e8be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8c0:	1c51      	adds	r1, r2, #1
 800e8c2:	6279      	str	r1, [r7, #36]	; 0x24
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	440a      	add	r2, r1
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800e8ce:	e6f1      	b.n	800e6b4 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	1c5a      	adds	r2, r3, #1
 800e8d4:	627a      	str	r2, [r7, #36]	; 0x24
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	4413      	add	r3, r2
 800e8dc:	2200      	movs	r2, #0
 800e8de:	701a      	strb	r2, [r3, #0]
  return output_index;
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3728      	adds	r7, #40	; 0x28
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bdb0      	pop	{r4, r5, r7, pc}

0800e8ea <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "common.h"
#include "op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 800e8ea:	b480      	push	{r7}
 800e8ec:	b085      	sub	sp, #20
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
  int result = 1;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	60bb      	str	r3, [r7, #8]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	68ba      	ldr	r2, [r7, #8]
 800e900:	429a      	cmp	r2, r3
 800e902:	da0c      	bge.n	800e91e <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	4413      	add	r3, r2
 800e90c:	685a      	ldr	r2, [r3, #4]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	fb02 f303 	mul.w	r3, r2, r3
 800e914:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	3301      	adds	r3, #1
 800e91a:	60bb      	str	r3, [r7, #8]
 800e91c:	e7ed      	b.n	800e8fa <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 800e91e:	68fb      	ldr	r3, [r7, #12]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3714      	adds	r7, #20
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <NoiseReductionApply>:
==============================================================================*/
#include "noise_reduction.h"

#include <string.h>

void NoiseReductionApply(struct NoiseReductionState* state, uint32_t* signal) {
 800e92c:	b4f0      	push	{r4, r5, r6, r7}
 800e92e:	b08a      	sub	sp, #40	; 0x28
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < state->num_channels; ++i) {
 800e936:	2300      	movs	r3, #0
 800e938:	627b      	str	r3, [r7, #36]	; 0x24
 800e93a:	e08d      	b.n	800ea58 <NoiseReductionApply+0x12c>
    const uint32_t smoothing =
        ((i & 1) == 0) ? state->even_smoothing : state->odd_smoothing;
 800e93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93e:	f003 0301 	and.w	r3, r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	d102      	bne.n	800e94c <NoiseReductionApply+0x20>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	889b      	ldrh	r3, [r3, #4]
 800e94a:	e001      	b.n	800e950 <NoiseReductionApply+0x24>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	88db      	ldrh	r3, [r3, #6]
    const uint32_t smoothing =
 800e950:	61fb      	str	r3, [r7, #28]
    const uint32_t one_minus_smoothing = (1 << kNoiseReductionBits) - smoothing;
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 800e958:	61bb      	str	r3, [r7, #24]

    // Update the estimate of the noise.
    const uint32_t signal_scaled_up = signal[i] << state->smoothing_bits;
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	683a      	ldr	r2, [r7, #0]
 800e960:	4413      	add	r3, r2
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	fa02 f303 	lsl.w	r3, r2, r3
 800e96c:	617b      	str	r3, [r7, #20]
    uint32_t estimate =
        (((uint64_t)signal_scaled_up * smoothing) +
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	4619      	mov	r1, r3
 800e972:	f04f 0200 	mov.w	r2, #0
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	f04f 0400 	mov.w	r4, #0
 800e97c:	fb03 f502 	mul.w	r5, r3, r2
 800e980:	fb01 f004 	mul.w	r0, r1, r4
 800e984:	4428      	add	r0, r5
 800e986:	fba1 5603 	umull	r5, r6, r1, r3
 800e98a:	1983      	adds	r3, r0, r6
 800e98c:	461e      	mov	r6, r3
         ((uint64_t)state->estimate[i] * one_minus_smoothing)) >>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	691a      	ldr	r2, [r3, #16]
 800e992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	4413      	add	r3, r2
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4619      	mov	r1, r3
 800e99c:	f04f 0200 	mov.w	r2, #0
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	f04f 0400 	mov.w	r4, #0
 800e9a6:	fb03 fc02 	mul.w	ip, r3, r2
 800e9aa:	fb01 f004 	mul.w	r0, r1, r4
 800e9ae:	4460      	add	r0, ip
 800e9b0:	fba1 3403 	umull	r3, r4, r1, r3
 800e9b4:	1902      	adds	r2, r0, r4
 800e9b6:	4614      	mov	r4, r2
        (((uint64_t)signal_scaled_up * smoothing) +
 800e9b8:	18e9      	adds	r1, r5, r3
 800e9ba:	eb46 0204 	adc.w	r2, r6, r4
         ((uint64_t)state->estimate[i] * one_minus_smoothing)) >>
 800e9be:	f04f 0300 	mov.w	r3, #0
 800e9c2:	f04f 0400 	mov.w	r4, #0
 800e9c6:	0b8b      	lsrs	r3, r1, #14
 800e9c8:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800e9cc:	0b94      	lsrs	r4, r2, #14
    uint32_t estimate =
 800e9ce:	623b      	str	r3, [r7, #32]
        kNoiseReductionBits;
    state->estimate[i] = estimate;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	691a      	ldr	r2, [r3, #16]
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	4413      	add	r3, r2
 800e9da:	6a3a      	ldr	r2, [r7, #32]
 800e9dc:	601a      	str	r2, [r3, #0]

    // Make sure that we can't get a negative value for the signal - estimate.
    if (estimate > signal_scaled_up) {
 800e9de:	6a3a      	ldr	r2, [r7, #32]
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d901      	bls.n	800e9ea <NoiseReductionApply+0xbe>
      estimate = signal_scaled_up;
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	623b      	str	r3, [r7, #32]
    }

    const uint32_t floor =
        ((uint64_t)signal[i] * state->min_signal_remaining) >>
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	683a      	ldr	r2, [r7, #0]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	f04f 0200 	mov.w	r2, #0
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	891b      	ldrh	r3, [r3, #8]
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	f04f 0400 	mov.w	r4, #0
 800ea04:	fb03 f502 	mul.w	r5, r3, r2
 800ea08:	fb01 f004 	mul.w	r0, r1, r4
 800ea0c:	4428      	add	r0, r5
 800ea0e:	fba1 3403 	umull	r3, r4, r1, r3
 800ea12:	1902      	adds	r2, r0, r4
 800ea14:	4614      	mov	r4, r2
 800ea16:	f04f 0100 	mov.w	r1, #0
 800ea1a:	f04f 0200 	mov.w	r2, #0
 800ea1e:	0b99      	lsrs	r1, r3, #14
 800ea20:	ea41 4184 	orr.w	r1, r1, r4, lsl #18
 800ea24:	0ba2      	lsrs	r2, r4, #14
    const uint32_t floor =
 800ea26:	460b      	mov	r3, r1
 800ea28:	613b      	str	r3, [r7, #16]
        kNoiseReductionBits;
    const uint32_t subtracted =
        (signal_scaled_up - estimate) >> state->smoothing_bits;
 800ea2a:	697a      	ldr	r2, [r7, #20]
 800ea2c:	6a3b      	ldr	r3, [r7, #32]
 800ea2e:	1ad2      	subs	r2, r2, r3
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
    const uint32_t subtracted =
 800ea34:	fa22 f303 	lsr.w	r3, r2, r3
 800ea38:	60fb      	str	r3, [r7, #12]
    const uint32_t output = subtracted > floor ? subtracted : floor;
 800ea3a:	693a      	ldr	r2, [r7, #16]
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	bf38      	it	cc
 800ea42:	4613      	movcc	r3, r2
 800ea44:	60bb      	str	r3, [r7, #8]
    signal[i] = output;
 800ea46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	683a      	ldr	r2, [r7, #0]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	601a      	str	r2, [r3, #0]
  for (i = 0; i < state->num_channels; ++i) {
 800ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea54:	3301      	adds	r3, #1
 800ea56:	627b      	str	r3, [r7, #36]	; 0x24
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	f6ff af6c 	blt.w	800e93c <NoiseReductionApply+0x10>
  }
}
 800ea64:	bf00      	nop
 800ea66:	3728      	adds	r7, #40	; 0x28
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bcf0      	pop	{r4, r5, r6, r7}
 800ea6c:	4770      	bx	lr

0800ea6e <NoiseReductionReset>:

void NoiseReductionReset(struct NoiseReductionState* state) {
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b082      	sub	sp, #8
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
  memset(state->estimate, 0, sizeof(*state->estimate) * state->num_channels);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6918      	ldr	r0, [r3, #16]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	009b      	lsls	r3, r3, #2
 800ea80:	461a      	mov	r2, r3
 800ea82:	2100      	movs	r1, #0
 800ea84:	f00a fac2 	bl	801900c <memset>
}
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <NoiseReductionPopulateState>:
  config->min_signal_remaining = 0.05;
}

int NoiseReductionPopulateState(const struct NoiseReductionConfig* config,
                                struct NoiseReductionState* state,
                                int num_channels) {
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
  state->smoothing_bits = config->smoothing_bits;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	601a      	str	r2, [r3, #0]
  state->odd_smoothing = config->odd_smoothing * (1 << kNoiseReductionBits);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	edd3 7a02 	vldr	s15, [r3, #8]
 800eaaa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800eb38 <NoiseReductionPopulateState+0xa8>
 800eaae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eab6:	ee17 3a90 	vmov	r3, s15
 800eaba:	b29a      	uxth	r2, r3
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	80da      	strh	r2, [r3, #6]
  state->even_smoothing = config->even_smoothing * (1 << kNoiseReductionBits);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	edd3 7a01 	vldr	s15, [r3, #4]
 800eac6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800eb38 <NoiseReductionPopulateState+0xa8>
 800eaca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ead2:	ee17 3a90 	vmov	r3, s15
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	809a      	strh	r2, [r3, #4]
  state->min_signal_remaining =
      config->min_signal_remaining * (1 << kNoiseReductionBits);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	edd3 7a03 	vldr	s15, [r3, #12]
 800eae2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800eb38 <NoiseReductionPopulateState+0xa8>
 800eae6:	ee67 7a87 	vmul.f32	s15, s15, s14
  state->min_signal_remaining =
 800eaea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eaee:	ee17 3a90 	vmov	r3, s15
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	811a      	strh	r2, [r3, #8]
  state->num_channels = num_channels;
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	60da      	str	r2, [r3, #12]
  state->estimate = calloc(state->num_channels, sizeof(*state->estimate));
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	2104      	movs	r1, #4
 800eb04:	4618      	mov	r0, r3
 800eb06:	f00a f931 	bl	8018d6c <calloc>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	611a      	str	r2, [r3, #16]
  if (state->estimate == NULL) {
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	691b      	ldr	r3, [r3, #16]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d109      	bne.n	800eb2e <NoiseReductionPopulateState+0x9e>
    fprintf(stderr, "Failed to alloc estimate buffer\n");
 800eb1a:	4b08      	ldr	r3, [pc, #32]	; (800eb3c <NoiseReductionPopulateState+0xac>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	2220      	movs	r2, #32
 800eb22:	2101      	movs	r1, #1
 800eb24:	4806      	ldr	r0, [pc, #24]	; (800eb40 <NoiseReductionPopulateState+0xb0>)
 800eb26:	f00a fa0b 	bl	8018f40 <fwrite>
    return 0;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	e000      	b.n	800eb30 <NoiseReductionPopulateState+0xa0>
  }
  return 1;
 800eb2e:	2301      	movs	r3, #1
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	46800000 	.word	0x46800000
 800eb3c:	20000018 	.word	0x20000018
 800eb40:	0801e13c 	.word	0x0801e13c

0800eb44 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2106      	movs	r1, #6
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7fe f844 	bl	800cbde <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800eb56:	4603      	mov	r3, r0
  }
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3708      	adds	r7, #8
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	2108      	movs	r1, #8
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7f5 ffca 	bl	8004b08 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800eb74:	4603      	mov	r3, r0
  }
 800eb76:	4618      	mov	r0, r3
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
	...

0800eb80 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b088      	sub	sp, #32
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	607a      	str	r2, [r7, #4]
 800eb8c:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2200      	movs	r2, #0
 800eb96:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f000 fdfe 	bl	800f79a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 800eba2:	68f8      	ldr	r0, [r7, #12]
 800eba4:	f7ff ffdc 	bl	800eb60 <_ZNK6tflite12OperatorCode7versionEv>
 800eba8:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 800ebaa:	7fbb      	ldrb	r3, [r7, #30]
 800ebac:	2b83      	cmp	r3, #131	; 0x83
 800ebae:	d908      	bls.n	800ebc2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 800ebb0:	7fbb      	ldrb	r3, [r7, #30]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	492a      	ldr	r1, [pc, #168]	; (800ec60 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f7f4 f9fe 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	77fb      	strb	r3, [r7, #31]
 800ebc0:	e048      	b.n	800ec54 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800ebc2:	7fbb      	ldrb	r3, [r7, #30]
 800ebc4:	2b20      	cmp	r3, #32
 800ebc6:	d01a      	beq.n	800ebfe <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	7fb9      	ldrb	r1, [r7, #30]
 800ebd0:	69ba      	ldr	r2, [r7, #24]
 800ebd2:	68b8      	ldr	r0, [r7, #8]
 800ebd4:	4798      	blx	r3
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d137      	bne.n	800ec54 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 800ebe4:	7fbb      	ldrb	r3, [r7, #30]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fc f992 	bl	800af10 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800ebec:	4602      	mov	r2, r0
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	491c      	ldr	r1, [pc, #112]	; (800ec64 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f7f4 f9e0 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	77fb      	strb	r3, [r7, #31]
 800ebfc:	e02a      	b.n	800ec54 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f7ff ffa0 	bl	800eb44 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	bf0c      	ite	eq
 800ec0a:	2301      	moveq	r3, #1
 800ec0c:	2300      	movne	r3, #0
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d006      	beq.n	800ec22 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 800ec14:	4914      	ldr	r1, [pc, #80]	; (800ec68 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f7f4 f9ce 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	77fb      	strb	r3, [r7, #31]
 800ec20:	e018      	b.n	800ec54 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	f7ff ff8e 	bl	800eb44 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fc f959 	bl	800aee2 <_ZNK11flatbuffers6String5c_strEv>
 800ec30:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	3304      	adds	r3, #4
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	69ba      	ldr	r2, [r7, #24]
 800ec3c:	6979      	ldr	r1, [r7, #20]
 800ec3e:	68b8      	ldr	r0, [r7, #8]
 800ec40:	4798      	blx	r3
 800ec42:	4602      	mov	r2, r0
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d101      	bne.n	800ec54 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800ec50:	2301      	movs	r3, #1
 800ec52:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800ec54:	7ffb      	ldrb	r3, [r7, #31]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3720      	adds	r7, #32
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	0801e788 	.word	0x0801e788
 800ec64:	0801e7dc 	.word	0x0801e7dc
 800ec68:	0801e814 	.word	0x0801e814

0800ec6c <CountLeadingZeros32>:
static inline int CountLeadingZeros32(uint32_t n) {
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  if (n == 0) {
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d101      	bne.n	800ec7e <CountLeadingZeros32+0x12>
    return 32;
 800ec7a:	2320      	movs	r3, #32
 800ec7c:	e002      	b.n	800ec84 <CountLeadingZeros32+0x18>
  return __builtin_clz(n);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	fab3 f383 	clz	r3, r3
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <MostSignificantBit32>:
static inline int MostSignificantBit32(uint32_t n) {
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  return 32 - CountLeadingZeros32(n);
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7ff ffe7 	bl	800ec6c <CountLeadingZeros32>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	f1c3 0320 	rsb	r3, r3, #32
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <WideDynamicFunction>:
==============================================================================*/
#include "pcan_gain_control.h"

#include "bits.h"

int16_t WideDynamicFunction(const uint32_t x, const int16_t* lut) {
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
  if (x <= 2) {
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d806      	bhi.n	800ecca <WideDynamicFunction+0x1e>
    return lut[x];
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	005b      	lsls	r3, r3, #1
 800ecc0:	683a      	ldr	r2, [r7, #0]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecc8:	e04e      	b.n	800ed68 <WideDynamicFunction+0xbc>
  }

  const int16_t interval = MostSignificantBit32(x);
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f7ff ffe0 	bl	800ec90 <MostSignificantBit32>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	81fb      	strh	r3, [r7, #14]
  lut += 4 * interval - 6;
 800ecd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ecd8:	00db      	lsls	r3, r3, #3
 800ecda:	3b0c      	subs	r3, #12
 800ecdc:	683a      	ldr	r2, [r7, #0]
 800ecde:	4413      	add	r3, r2
 800ece0:	603b      	str	r3, [r7, #0]

  const int16_t frac =
 800ece2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ece6:	2b0a      	cmp	r3, #10
 800ece8:	dc0b      	bgt.n	800ed02 <WideDynamicFunction+0x56>
      ((interval < 11) ? (x << (11 - interval)) : (x >> (interval - 11))) &
 800ecea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ecee:	f1c3 030b 	rsb	r3, r3, #11
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	fa02 f303 	lsl.w	r3, r2, r3
 800ecf8:	b21b      	sxth	r3, r3
  const int16_t frac =
 800ecfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecfe:	b21b      	sxth	r3, r3
 800ed00:	e009      	b.n	800ed16 <WideDynamicFunction+0x6a>
      ((interval < 11) ? (x << (11 - interval)) : (x >> (interval - 11))) &
 800ed02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ed06:	3b0b      	subs	r3, #11
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ed0e:	b21b      	sxth	r3, r3
  const int16_t frac =
 800ed10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed14:	b21b      	sxth	r3, r3
 800ed16:	81bb      	strh	r3, [r7, #12]
      0x3FF;

  int32_t result = ((int32_t)lut[2] * frac) >> 5;
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	3304      	adds	r3, #4
 800ed1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed20:	461a      	mov	r2, r3
 800ed22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ed26:	fb03 f302 	mul.w	r3, r3, r2
 800ed2a:	115b      	asrs	r3, r3, #5
 800ed2c:	60bb      	str	r3, [r7, #8]
  result += (int32_t)((uint32_t)lut[1] << 5);
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	3302      	adds	r3, #2
 800ed32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed36:	015b      	lsls	r3, r3, #5
 800ed38:	461a      	mov	r2, r3
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	60bb      	str	r3, [r7, #8]
  result *= frac;
 800ed40:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	fb02 f303 	mul.w	r3, r2, r3
 800ed4a:	60bb      	str	r3, [r7, #8]
  result = (result + (1 << 14)) >> 15;
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ed52:	13db      	asrs	r3, r3, #15
 800ed54:	60bb      	str	r3, [r7, #8]
  result += lut[0];
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	4413      	add	r3, r2
 800ed62:	60bb      	str	r3, [r7, #8]
  return (int16_t)result;
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	b21b      	sxth	r3, r3
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <PcanShrink>:

uint32_t PcanShrink(const uint32_t x) {
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  if (x < (2 << kPcanSnrBits)) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed7e:	d205      	bcs.n	800ed8c <PcanShrink+0x1c>
    return (x * x) >> (2 + 2 * kPcanSnrBits - kPcanOutputBits);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	fb02 f303 	mul.w	r3, r2, r3
 800ed88:	0d1b      	lsrs	r3, r3, #20
 800ed8a:	e002      	b.n	800ed92 <PcanShrink+0x22>
  } else {
    return (x >> (kPcanSnrBits - kPcanOutputBits)) - (1 << kPcanOutputBits);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	099b      	lsrs	r3, r3, #6
 800ed90:	3b40      	subs	r3, #64	; 0x40
  }
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	370c      	adds	r7, #12
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <PcanGainControlApply>:

void PcanGainControlApply(struct PcanGainControlState* state,
                          uint32_t* signal) {
 800ed9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eda0:	b087      	sub	sp, #28
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < state->num_channels; ++i) {
 800eda8:	2300      	movs	r3, #0
 800edaa:	617b      	str	r3, [r7, #20]
 800edac:	e040      	b.n	800ee30 <PcanGainControlApply+0x92>
    const uint32_t gain =
        WideDynamicFunction(state->noise_estimate[i], state->gain_lut);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	685a      	ldr	r2, [r3, #4]
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	4413      	add	r3, r2
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	4619      	mov	r1, r3
 800edc0:	4610      	mov	r0, r2
 800edc2:	f7ff ff73 	bl	800ecac <WideDynamicFunction>
 800edc6:	4603      	mov	r3, r0
    const uint32_t gain =
 800edc8:	613b      	str	r3, [r7, #16]
    const uint32_t snr = ((uint64_t)signal[i] * gain) >> state->snr_shift;
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	009b      	lsls	r3, r3, #2
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	4413      	add	r3, r2
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f04f 0100 	mov.w	r1, #0
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	461a      	mov	r2, r3
 800edde:	f04f 0300 	mov.w	r3, #0
 800ede2:	fb02 fc01 	mul.w	ip, r2, r1
 800ede6:	fb00 f603 	mul.w	r6, r0, r3
 800edea:	4466      	add	r6, ip
 800edec:	fba0 2302 	umull	r2, r3, r0, r2
 800edf0:	18f1      	adds	r1, r6, r3
 800edf2:	460b      	mov	r3, r1
 800edf4:	6879      	ldr	r1, [r7, #4]
 800edf6:	6909      	ldr	r1, [r1, #16]
 800edf8:	f1c1 0620 	rsb	r6, r1, #32
 800edfc:	f1a1 0020 	sub.w	r0, r1, #32
 800ee00:	fa22 f401 	lsr.w	r4, r2, r1
 800ee04:	fa03 f606 	lsl.w	r6, r3, r6
 800ee08:	4334      	orrs	r4, r6
 800ee0a:	fa23 f000 	lsr.w	r0, r3, r0
 800ee0e:	4304      	orrs	r4, r0
 800ee10:	fa23 f501 	lsr.w	r5, r3, r1
 800ee14:	4623      	mov	r3, r4
 800ee16:	60fb      	str	r3, [r7, #12]
    signal[i] = PcanShrink(snr);
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	683a      	ldr	r2, [r7, #0]
 800ee1e:	18d6      	adds	r6, r2, r3
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f7ff ffa5 	bl	800ed70 <PcanShrink>
 800ee26:	4603      	mov	r3, r0
 800ee28:	6033      	str	r3, [r6, #0]
  for (i = 0; i < state->num_channels; ++i) {
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	617b      	str	r3, [r7, #20]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	697a      	ldr	r2, [r7, #20]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	dbb9      	blt.n	800edae <PcanGainControlApply+0x10>
  }
}
 800ee3a:	bf00      	nop
 800ee3c:	371c      	adds	r7, #28
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ee44 <PcanGainLookupFunction>:
  config->offset = 80.0;
  config->gain_bits = 21;
}

int16_t PcanGainLookupFunction(const struct PcanGainControlConfig* config,
                               int32_t input_bits, uint32_t x) {
 800ee44:	b580      	push	{r7, lr}
 800ee46:	ed2d 8b02 	vpush	{d8}
 800ee4a:	b086      	sub	sp, #24
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	607a      	str	r2, [r7, #4]
  const float x_as_float = ((float)x) / ((uint32_t)1 << input_bits);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	ee07 3a90 	vmov	s15, r3
 800ee5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee5e:	2201      	movs	r2, #1
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	fa02 f303 	lsl.w	r3, r2, r3
 800ee66:	ee07 3a90 	vmov	s15, r3
 800ee6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ee6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee72:	edc7 7a05 	vstr	s15, [r7, #20]
  const float gain_as_float =
      ((uint32_t)1 << config->gain_bits) *
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee80:	ee07 3a90 	vmov	s15, r3
 800ee84:	eeb8 8a67 	vcvt.f32.u32	s16, s15
      powf(x_as_float + config->offset, -config->strength);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ee8e:	edd7 7a05 	vldr	s15, [r7, #20]
 800ee92:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	edd3 7a01 	vldr	s15, [r3, #4]
 800ee9c:	eef1 7a67 	vneg.f32	s15, s15
 800eea0:	eef0 0a67 	vmov.f32	s1, s15
 800eea4:	eeb0 0a47 	vmov.f32	s0, s14
 800eea8:	f008 f960 	bl	801716c <powf>
 800eeac:	eef0 7a40 	vmov.f32	s15, s0
  const float gain_as_float =
 800eeb0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800eeb4:	edc7 7a04 	vstr	s15, [r7, #16]

  if (gain_as_float > kint16max) {
 800eeb8:	edd7 7a04 	vldr	s15, [r7, #16]
 800eebc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800eef4 <PcanGainLookupFunction+0xb0>
 800eec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec8:	dd02      	ble.n	800eed0 <PcanGainLookupFunction+0x8c>
    return kint16max;
 800eeca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800eece:	e00a      	b.n	800eee6 <PcanGainLookupFunction+0xa2>
  }
  return (int16_t)(gain_as_float + 0.5f);
 800eed0:	edd7 7a04 	vldr	s15, [r7, #16]
 800eed4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eedc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eee0:	ee17 3a90 	vmov	r3, s15
 800eee4:	b21b      	sxth	r3, r3
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3718      	adds	r7, #24
 800eeea:	46bd      	mov	sp, r7
 800eeec:	ecbd 8b02 	vpop	{d8}
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	46fffe00 	.word	0x46fffe00

0800eef8 <PcanGainControlPopulateState>:
int PcanGainControlPopulateState(const struct PcanGainControlConfig* config,
                                 struct PcanGainControlState* state,
                                 uint32_t* noise_estimate,
                                 const int num_channels,
                                 const uint16_t smoothing_bits,
                                 const int32_t input_correction_bits) {
 800eef8:	b590      	push	{r4, r7, lr}
 800eefa:	b091      	sub	sp, #68	; 0x44
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
 800ef04:	603b      	str	r3, [r7, #0]
  state->enable_pcan = config->enable_pcan;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	601a      	str	r2, [r3, #0]
  if (!state->enable_pcan) {
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d101      	bne.n	800ef1a <PcanGainControlPopulateState+0x22>
    return 1;
 800ef16:	2301      	movs	r3, #1
 800ef18:	e0a8      	b.n	800f06c <PcanGainControlPopulateState+0x174>
  }
  state->noise_estimate = noise_estimate;
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	605a      	str	r2, [r3, #4]
  state->num_channels = num_channels;
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	683a      	ldr	r2, [r7, #0]
 800ef24:	609a      	str	r2, [r3, #8]
  state->gain_lut = malloc(kWideDynamicFunctionLUTSize * sizeof(int16_t));
 800ef26:	20fa      	movs	r0, #250	; 0xfa
 800ef28:	f00a f83c 	bl	8018fa4 <malloc>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	461a      	mov	r2, r3
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	60da      	str	r2, [r3, #12]
  if (state->gain_lut == NULL) {
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d109      	bne.n	800ef50 <PcanGainControlPopulateState+0x58>
    fprintf(stderr, "Failed to allocate gain LUT\n");
 800ef3c:	4b4d      	ldr	r3, [pc, #308]	; (800f074 <PcanGainControlPopulateState+0x17c>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	221c      	movs	r2, #28
 800ef44:	2101      	movs	r1, #1
 800ef46:	484c      	ldr	r0, [pc, #304]	; (800f078 <PcanGainControlPopulateState+0x180>)
 800ef48:	f009 fffa 	bl	8018f40 <fwrite>
    return 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	e08d      	b.n	800f06c <PcanGainControlPopulateState+0x174>
  }
  state->snr_shift = config->gain_bits - input_correction_bits - kPcanSnrBits;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	68da      	ldr	r2, [r3, #12]
 800ef54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef56:	1ad3      	subs	r3, r2, r3
 800ef58:	f1a3 020c 	sub.w	r2, r3, #12
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	611a      	str	r2, [r3, #16]

  const int32_t input_bits = smoothing_bits - input_correction_bits;
 800ef60:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800ef64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef66:	1ad3      	subs	r3, r2, r3
 800ef68:	63bb      	str	r3, [r7, #56]	; 0x38
  state->gain_lut[0] = PcanGainLookupFunction(config, input_bits, 0);
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	68dc      	ldr	r4, [r3, #12]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef72:	68f8      	ldr	r0, [r7, #12]
 800ef74:	f7ff ff66 	bl	800ee44 <PcanGainLookupFunction>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	8023      	strh	r3, [r4, #0]
  state->gain_lut[1] = PcanGainLookupFunction(config, input_bits, 1);
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	1c9c      	adds	r4, r3, #2
 800ef82:	2201      	movs	r2, #1
 800ef84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f7ff ff5c 	bl	800ee44 <PcanGainLookupFunction>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	8023      	strh	r3, [r4, #0]
  state->gain_lut -= 6;
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	f1a3 020c 	sub.w	r2, r3, #12
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	60da      	str	r2, [r3, #12]
  int interval;
  for (interval = 2; interval <= kWideDynamicFunctionBits; ++interval) {
 800ef9c:	2302      	movs	r3, #2
 800ef9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efa0:	e05a      	b.n	800f058 <PcanGainControlPopulateState+0x160>
    const uint32_t x0 = (uint32_t)1 << (interval - 1);
 800efa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efa4:	3b01      	subs	r3, #1
 800efa6:	2201      	movs	r2, #1
 800efa8:	fa02 f303 	lsl.w	r3, r2, r3
 800efac:	637b      	str	r3, [r7, #52]	; 0x34
    const uint32_t x1 = x0 + (x0 >> 1);
 800efae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb0:	085b      	lsrs	r3, r3, #1
 800efb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efb4:	4413      	add	r3, r2
 800efb6:	633b      	str	r3, [r7, #48]	; 0x30
    const uint32_t x2 =
        (interval == kWideDynamicFunctionBits) ? x0 + (x0 - 1) : 2 * x0;
 800efb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efba:	2b20      	cmp	r3, #32
 800efbc:	d103      	bne.n	800efc6 <PcanGainControlPopulateState+0xce>
 800efbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	3b01      	subs	r3, #1
 800efc4:	e001      	b.n	800efca <PcanGainControlPopulateState+0xd2>
 800efc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc8:	005b      	lsls	r3, r3, #1
    const uint32_t x2 =
 800efca:	62fb      	str	r3, [r7, #44]	; 0x2c

    const int16_t y0 = PcanGainLookupFunction(config, input_bits, x0);
 800efcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	f7ff ff37 	bl	800ee44 <PcanGainLookupFunction>
 800efd6:	4603      	mov	r3, r0
 800efd8:	857b      	strh	r3, [r7, #42]	; 0x2a
    const int16_t y1 = PcanGainLookupFunction(config, input_bits, x1);
 800efda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f7ff ff30 	bl	800ee44 <PcanGainLookupFunction>
 800efe4:	4603      	mov	r3, r0
 800efe6:	853b      	strh	r3, [r7, #40]	; 0x28
    const int16_t y2 = PcanGainLookupFunction(config, input_bits, x2);
 800efe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f7ff ff29 	bl	800ee44 <PcanGainLookupFunction>
 800eff2:	4603      	mov	r3, r0
 800eff4:	84fb      	strh	r3, [r7, #38]	; 0x26

    const int32_t diff1 = (int32_t)y1 - y0;
 800eff6:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800effa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	623b      	str	r3, [r7, #32]
    const int32_t diff2 = (int32_t)y2 - y0;
 800f002:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f006:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	61fb      	str	r3, [r7, #28]
    const int32_t a1 = 4 * diff1 - diff2;
 800f00e:	6a3b      	ldr	r3, [r7, #32]
 800f010:	009a      	lsls	r2, r3, #2
 800f012:	69fb      	ldr	r3, [r7, #28]
 800f014:	1ad3      	subs	r3, r2, r3
 800f016:	61bb      	str	r3, [r7, #24]
    const int32_t a2 = diff2 - a1;
 800f018:	69fa      	ldr	r2, [r7, #28]
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	1ad3      	subs	r3, r2, r3
 800f01e:	617b      	str	r3, [r7, #20]

    state->gain_lut[4 * interval] = y0;
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f026:	00d2      	lsls	r2, r2, #3
 800f028:	4413      	add	r3, r2
 800f02a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800f02c:	801a      	strh	r2, [r3, #0]
    state->gain_lut[4 * interval + 1] = (int16_t)a1;
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	68da      	ldr	r2, [r3, #12]
 800f032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f034:	00db      	lsls	r3, r3, #3
 800f036:	3302      	adds	r3, #2
 800f038:	4413      	add	r3, r2
 800f03a:	69ba      	ldr	r2, [r7, #24]
 800f03c:	b212      	sxth	r2, r2
 800f03e:	801a      	strh	r2, [r3, #0]
    state->gain_lut[4 * interval + 2] = (int16_t)a2;
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	68da      	ldr	r2, [r3, #12]
 800f044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f046:	00db      	lsls	r3, r3, #3
 800f048:	3304      	adds	r3, #4
 800f04a:	4413      	add	r3, r2
 800f04c:	697a      	ldr	r2, [r7, #20]
 800f04e:	b212      	sxth	r2, r2
 800f050:	801a      	strh	r2, [r3, #0]
  for (interval = 2; interval <= kWideDynamicFunctionBits; ++interval) {
 800f052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f054:	3301      	adds	r3, #1
 800f056:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f05a:	2b20      	cmp	r3, #32
 800f05c:	dda1      	ble.n	800efa2 <PcanGainControlPopulateState+0xaa>
  }
  state->gain_lut += 6;
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	68db      	ldr	r3, [r3, #12]
 800f062:	f103 020c 	add.w	r2, r3, #12
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	60da      	str	r2, [r3, #12]
  return 1;
 800f06a:	2301      	movs	r3, #1
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3744      	adds	r7, #68	; 0x44
 800f070:	46bd      	mov	sp, r7
 800f072:	bd90      	pop	{r4, r7, pc}
 800f074:	20000018 	.word	0x20000018
 800f078:	0801e84c 	.word	0x0801e84c

0800f07c <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800f07c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f080:	b088      	sub	sp, #32
 800f082:	af00      	add	r7, sp, #0
 800f084:	ed87 0b02 	vstr	d0, [r7, #8]
 800f088:	6078      	str	r0, [r7, #4]
 800f08a:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800f08c:	f04f 0200 	mov.w	r2, #0
 800f090:	f04f 0300 	mov.w	r3, #0
 800f094:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f098:	f7f1 fd26 	bl	8000ae8 <__aeabi_dcmpeq>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d006      	beq.n	800f0b0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	601a      	str	r2, [r3, #0]
 800f0ae:	e06a      	b.n	800f186 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800f0b0:	6838      	ldr	r0, [r7, #0]
 800f0b2:	ed97 0b02 	vldr	d0, [r7, #8]
 800f0b6:	f007 fc9b 	bl	80169f0 <frexp>
 800f0ba:	ed87 0b06 	vstr	d0, [r7, #24]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800f0be:	f04f 0200 	mov.w	r2, #0
 800f0c2:	4b33      	ldr	r3, [pc, #204]	; (800f190 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 800f0c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f0c8:	f7f1 faa6 	bl	8000618 <__aeabi_dmul>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	460c      	mov	r4, r1
 800f0d0:	ec44 3b17 	vmov	d7, r3, r4
 800f0d4:	eeb0 0a47 	vmov.f32	s0, s14
 800f0d8:	eef0 0a67 	vmov.f32	s1, s15
 800f0dc:	f000 f951 	bl	800f382 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800f0e0:	ec54 3b10 	vmov	r3, r4, d0
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	f7f1 fdd6 	bl	8000c98 <__aeabi_d2lz>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	460c      	mov	r4, r1
 800f0f0:	e9c7 3404 	strd	r3, r4, [r7, #16]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800f0f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f0f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f0fc:	f04f 0200 	mov.w	r2, #0
 800f100:	4299      	cmp	r1, r3
 800f102:	eb72 0304 	sbcs.w	r3, r2, r4
 800f106:	da01      	bge.n	800f10c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>
 800f108:	f009 fe05 	bl	8018d16 <abort>
  if (q_fixed == (1ll << 31)) {
 800f10c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f110:	2c00      	cmp	r4, #0
 800f112:	bf08      	it	eq
 800f114:	f1b3 4f00 	cmpeq.w	r3, #2147483648	; 0x80000000
 800f118:	d114      	bne.n	800f144 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 800f11a:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 800f11e:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800f122:	4611      	mov	r1, r2
 800f124:	f04f 0200 	mov.w	r2, #0
 800f128:	eb1b 0301 	adds.w	r3, fp, r1
 800f12c:	eb4c 0402 	adc.w	r4, ip, r2
 800f130:	1064      	asrs	r4, r4, #1
 800f132:	ea4f 0333 	mov.w	r3, r3, rrx
 800f136:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ++*shift;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800f144:	f7f2 f85c 	bl	8001200 <_ZNSt14numeric_limitsIlE3maxEv>
 800f148:	4603      	mov	r3, r0
 800f14a:	4619      	mov	r1, r3
 800f14c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800f150:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f154:	4299      	cmp	r1, r3
 800f156:	eb72 0304 	sbcs.w	r3, r2, r4
 800f15a:	da01      	bge.n	800f160 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 800f15c:	f009 fddb 	bl	8018d16 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f113 0f1f 	cmn.w	r3, #31
 800f168:	da08      	bge.n	800f17c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	2200      	movs	r2, #0
 800f16e:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800f170:	f04f 0300 	mov.w	r3, #0
 800f174:	f04f 0400 	mov.w	r4, #0
 800f178:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800f17c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f180:	461a      	mov	r2, r3
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	601a      	str	r2, [r3, #0]
}
 800f186:	3720      	adds	r7, #32
 800f188:	46bd      	mov	sp, r7
 800f18a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800f18e:	bf00      	nop
 800f190:	41e00000 	.word	0x41e00000

0800f194 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	ed87 0b02 	vstr	d0, [r7, #8]
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800f1a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f1a6:	f04f 0200 	mov.w	r2, #0
 800f1aa:	4b0e      	ldr	r3, [pc, #56]	; (800f1e4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x50>)
 800f1ac:	f7f1 fcc4 	bl	8000b38 <__aeabi_dcmpgt>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800f1b6:	f009 fdae 	bl	8018d16 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800f1ba:	ed97 7b02 	vldr	d7, [r7, #8]
 800f1be:	6839      	ldr	r1, [r7, #0]
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	eeb0 0a47 	vmov.f32	s0, s14
 800f1c6:	eef0 0a67 	vmov.f32	s1, s15
 800f1ca:	f7ff ff57 	bl	800f07c <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	da01      	bge.n	800f1da <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x46>
 800f1d6:	f009 fd9e 	bl	8018d16 <abort>
}
 800f1da:	bf00      	nop
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	3ff00000 	.word	0x3ff00000

0800f1e8 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800f1e8:	b590      	push	{r4, r7, lr}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f1fe:	461a      	mov	r2, r3
 800f200:	4623      	mov	r3, r4
 800f202:	f7f1 fc7b 	bl	8000afc <__aeabi_dcmplt>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <_ZSt3minIdERKT_S2_S2_+0x28>
	return __b;
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	e000      	b.n	800f212 <_ZSt3minIdERKT_S2_S2_+0x2a>
      return __a;
 800f210:	687b      	ldr	r3, [r7, #4]
    }
 800f212:	4618      	mov	r0, r3
 800f214:	370c      	adds	r7, #12
 800f216:	46bd      	mov	sp, r7
 800f218:	bd90      	pop	{r4, r7, pc}
 800f21a:	0000      	movs	r0, r0
 800f21c:	0000      	movs	r0, r0
	...

0800f220 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800f220:	b5b0      	push	{r4, r5, r7, lr}
 800f222:	b08e      	sub	sp, #56	; 0x38
 800f224:	af00      	add	r7, sp, #0
 800f226:	ed87 0b06 	vstr	d0, [r7, #24]
 800f22a:	ed87 1b04 	vstr	d1, [r7, #16]
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800f234:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f238:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f23c:	f7f1 f9ec 	bl	8000618 <__aeabi_dmul>
 800f240:	4603      	mov	r3, r0
 800f242:	460c      	mov	r4, r1
 800f244:	4625      	mov	r5, r4
 800f246:	461c      	mov	r4, r3
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f1c3 031f 	rsb	r3, r3, #31
 800f24e:	2201      	movs	r2, #1
 800f250:	fa02 f303 	lsl.w	r3, r2, r3
 800f254:	4618      	mov	r0, r3
 800f256:	f7f1 f975 	bl	8000544 <__aeabi_i2d>
 800f25a:	4602      	mov	r2, r0
 800f25c:	460b      	mov	r3, r1
 800f25e:	4620      	mov	r0, r4
 800f260:	4629      	mov	r1, r5
 800f262:	f7f1 f9d9 	bl	8000618 <__aeabi_dmul>
 800f266:	4603      	mov	r3, r0
 800f268:	460c      	mov	r4, r1
 800f26a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800f26e:	a40e      	add	r4, pc, #56	; (adr r4, 800f2a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800f270:	e9d4 3400 	ldrd	r3, r4, [r4]
 800f274:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800f278:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f27c:	f107 0320 	add.w	r3, r7, #32
 800f280:	4611      	mov	r1, r2
 800f282:	4618      	mov	r0, r3
 800f284:	f7ff ffb0 	bl	800f1e8 <_ZSt3minIdERKT_S2_S2_>
 800f288:	4603      	mov	r3, r0
 800f28a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f28e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800f292:	6879      	ldr	r1, [r7, #4]
 800f294:	68b8      	ldr	r0, [r7, #8]
 800f296:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800f29a:	f7ff ff7b 	bl	800f194 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800f29e:	bf00      	nop
 800f2a0:	3738      	adds	r7, #56	; 0x38
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	ffc00000 	.word	0xffc00000
 800f2ac:	41dfffff 	.word	0x41dfffff

0800f2b0 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800f2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b4:	b087      	sub	sp, #28
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	60f8      	str	r0, [r7, #12]
 800f2ba:	60b9      	str	r1, [r7, #8]
 800f2bc:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800f2be:	2201      	movs	r2, #1
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2c6:	3b01      	subs	r3, #1
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7f1 f93b 	bl	8000544 <__aeabi_i2d>
 800f2ce:	4682      	mov	sl, r0
 800f2d0:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	1ad1      	subs	r1, r2, r3
 800f2d8:	f04f 0201 	mov.w	r2, #1
 800f2dc:	f04f 0300 	mov.w	r3, #0
 800f2e0:	f1a1 0620 	sub.w	r6, r1, #32
 800f2e4:	f1c1 0020 	rsb	r0, r1, #32
 800f2e8:	fa03 f901 	lsl.w	r9, r3, r1
 800f2ec:	fa02 f606 	lsl.w	r6, r2, r6
 800f2f0:	ea49 0906 	orr.w	r9, r9, r6
 800f2f4:	fa22 f000 	lsr.w	r0, r2, r0
 800f2f8:	ea49 0900 	orr.w	r9, r9, r0
 800f2fc:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800f300:	4640      	mov	r0, r8
 800f302:	4649      	mov	r1, r9
 800f304:	f7f1 f95a 	bl	80005bc <__aeabi_l2d>
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	4650      	mov	r0, sl
 800f30e:	4659      	mov	r1, fp
 800f310:	f7f1 f982 	bl	8000618 <__aeabi_dmul>
 800f314:	4602      	mov	r2, r0
 800f316:	460b      	mov	r3, r1
 800f318:	4690      	mov	r8, r2
 800f31a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800f31c:	f04f 0201 	mov.w	r2, #1
 800f320:	f04f 0300 	mov.w	r3, #0
 800f324:	68b9      	ldr	r1, [r7, #8]
 800f326:	f1a1 0620 	sub.w	r6, r1, #32
 800f32a:	f1c1 0020 	rsb	r0, r1, #32
 800f32e:	fa03 f501 	lsl.w	r5, r3, r1
 800f332:	fa02 f606 	lsl.w	r6, r2, r6
 800f336:	4335      	orrs	r5, r6
 800f338:	fa22 f000 	lsr.w	r0, r2, r0
 800f33c:	4305      	orrs	r5, r0
 800f33e:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800f342:	4620      	mov	r0, r4
 800f344:	4629      	mov	r1, r5
 800f346:	f7f1 f939 	bl	80005bc <__aeabi_l2d>
 800f34a:	4603      	mov	r3, r0
 800f34c:	460c      	mov	r4, r1
  const double max_input_rescaled =
 800f34e:	461a      	mov	r2, r3
 800f350:	4623      	mov	r3, r4
 800f352:	4640      	mov	r0, r8
 800f354:	4649      	mov	r1, r9
 800f356:	f7f1 fa89 	bl	800086c <__aeabi_ddiv>
 800f35a:	4603      	mov	r3, r0
 800f35c:	460c      	mov	r4, r1
 800f35e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800f362:	ed97 0b04 	vldr	d0, [r7, #16]
 800f366:	f007 fabf 	bl	80168e8 <floor>
 800f36a:	ec54 3b10 	vmov	r3, r4, d0
 800f36e:	4618      	mov	r0, r3
 800f370:	4621      	mov	r1, r4
 800f372:	f7f1 fc01 	bl	8000b78 <__aeabi_d2iz>
 800f376:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800f378:	4618      	mov	r0, r3
 800f37a:	371c      	adds	r7, #28
 800f37c:	46bd      	mov	sp, r7
 800f37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f382 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
 800f382:	b580      	push	{r7, lr}
 800f384:	b082      	sub	sp, #8
 800f386:	af00      	add	r7, sp, #0
 800f388:	ed87 0b00 	vstr	d0, [r7]
 800f38c:	ed97 0b00 	vldr	d0, [r7]
 800f390:	f007 fd5e 	bl	8016e50 <round>
 800f394:	eeb0 7a40 	vmov.f32	s14, s0
 800f398:	eef0 7a60 	vmov.f32	s15, s1
 800f39c:	eeb0 0a47 	vmov.f32	s0, s14
 800f3a0:	eef0 0a67 	vmov.f32	s1, s15
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800f3aa:	b480      	push	{r7}
 800f3ac:	b083      	sub	sp, #12
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800f3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3c6:	b08f      	sub	sp, #60	; 0x3c
 800f3c8:	af04      	add	r7, sp, #16
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	6839      	ldr	r1, [r7, #0]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7f8 fac6 	bl	8007966 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800f3da:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, input != nullptr);
 800f3dc:	6a3b      	ldr	r3, [r7, #32]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d10a      	bne.n	800f3f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x34>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	695c      	ldr	r4, [r3, #20]
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	4b62      	ldr	r3, [pc, #392]	; (800f574 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	2323      	movs	r3, #35	; 0x23
 800f3ee:	4a62      	ldr	r2, [pc, #392]	; (800f578 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800f3f0:	4962      	ldr	r1, [pc, #392]	; (800f57c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800f3f2:	47a0      	blx	r4
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e0b9      	b.n	800f56c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7f8 fac1 	bl	8007986 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800f404:	61f8      	str	r0, [r7, #28]
  TF_LITE_ENSURE(context, output != nullptr);
 800f406:	69fb      	ldr	r3, [r7, #28]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d10a      	bne.n	800f422 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5e>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	695c      	ldr	r4, [r3, #20]
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	4b5b      	ldr	r3, [pc, #364]	; (800f580 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 800f414:	9300      	str	r3, [sp, #0]
 800f416:	2325      	movs	r3, #37	; 0x25
 800f418:	4a57      	ldr	r2, [pc, #348]	; (800f578 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800f41a:	4958      	ldr	r1, [pc, #352]	; (800f57c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800f41c:	47a0      	blx	r4
 800f41e:	2301      	movs	r3, #1
 800f420:	e0a4      	b.n	800f56c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 800f422:	6a38      	ldr	r0, [r7, #32]
 800f424:	f7f8 fa12 	bl	800784c <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800f428:	4603      	mov	r3, r0
 800f42a:	460c      	mov	r4, r1
 800f42c:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	689b      	ldr	r3, [r3, #8]
 800f432:	61bb      	str	r3, [r7, #24]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800f434:	6838      	ldr	r0, [r7, #0]
 800f436:	f7f2 fc45 	bl	8001cc4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800f43a:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d109      	bne.n	800f454 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800f444:	2b01      	cmp	r3, #1
 800f446:	d105      	bne.n	800f454 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d101      	bne.n	800f454 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800f450:	2301      	movs	r3, #1
 800f452:	e000      	b.n	800f456 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x92>
 800f454:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800f456:	2b00      	cmp	r3, #0
 800f458:	d002      	beq.n	800f460 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9c>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	2200      	movs	r2, #0
 800f45e:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 800f460:	2301      	movs	r3, #1
 800f462:	60fb      	str	r3, [r7, #12]
  int stretch_dim = -1;
 800f464:	f04f 33ff 	mov.w	r3, #4294967295
 800f468:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < output_shape->size; ++i) {
 800f46a:	2300      	movs	r3, #0
 800f46c:	627b      	str	r3, [r7, #36]	; 0x24
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f474:	429a      	cmp	r2, r3
 800f476:	da2b      	bge.n	800f4d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10c>
    int value = output_shape->data[i];
 800f478:	69ba      	ldr	r2, [r7, #24]
 800f47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	4413      	add	r3, r2
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	617b      	str	r3, [r7, #20]
    if (value == -1) {
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f48a:	d118      	bne.n	800f4be <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfa>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f492:	d011      	beq.n	800f4b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf4>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	695c      	ldr	r4, [r3, #20]
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	f04f 32ff 	mov.w	r2, #4294967295
 800f4a0:	9203      	str	r2, [sp, #12]
 800f4a2:	9302      	str	r3, [sp, #8]
 800f4a4:	4b37      	ldr	r3, [pc, #220]	; (800f584 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 800f4a6:	9301      	str	r3, [sp, #4]
 800f4a8:	4b37      	ldr	r3, [pc, #220]	; (800f588 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	233a      	movs	r3, #58	; 0x3a
 800f4ae:	4a32      	ldr	r2, [pc, #200]	; (800f578 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800f4b0:	4936      	ldr	r1, [pc, #216]	; (800f58c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800f4b2:	47a0      	blx	r4
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	e059      	b.n	800f56c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
      stretch_dim = i;
 800f4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ba:	60bb      	str	r3, [r7, #8]
 800f4bc:	e004      	b.n	800f4c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x104>
    } else {
      num_output_elements *= value;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	697a      	ldr	r2, [r7, #20]
 800f4c2:	fb02 f303 	mul.w	r3, r2, r3
 800f4c6:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < output_shape->size; ++i) {
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	627b      	str	r3, [r7, #36]	; 0x24
 800f4ce:	e7ce      	b.n	800f46e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xaa>
    }
  }
  if (stretch_dim != -1) {
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d6:	d011      	beq.n	800f4fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800f4d8:	6939      	ldr	r1, [r7, #16]
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	fb91 f2f2 	sdiv	r2, r1, r2
 800f4e2:	69b9      	ldr	r1, [r7, #24]
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	440b      	add	r3, r1
 800f4e8:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	69ba      	ldr	r2, [r7, #24]
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	4413      	add	r3, r2
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	68fa      	ldr	r2, [r7, #12]
 800f4f6:	fb02 f303 	mul.w	r3, r2, r3
 800f4fa:	60fb      	str	r3, [r7, #12]
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800f4fc:	6a3b      	ldr	r3, [r7, #32]
 800f4fe:	781a      	ldrb	r2, [r3, #0]
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	429a      	cmp	r2, r3
 800f506:	d01b      	beq.n	800f540 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	695c      	ldr	r4, [r3, #20]
 800f50c:	687d      	ldr	r5, [r7, #4]
 800f50e:	6a3b      	ldr	r3, [r7, #32]
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	4618      	mov	r0, r3
 800f514:	f7f1 fdde 	bl	80010d4 <TfLiteTypeGetName>
 800f518:	4606      	mov	r6, r0
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	4618      	mov	r0, r3
 800f520:	f7f1 fdd8 	bl	80010d4 <TfLiteTypeGetName>
 800f524:	4603      	mov	r3, r0
 800f526:	9303      	str	r3, [sp, #12]
 800f528:	9602      	str	r6, [sp, #8]
 800f52a:	4b19      	ldr	r3, [pc, #100]	; (800f590 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 800f52c:	9301      	str	r3, [sp, #4]
 800f52e:	4b19      	ldr	r3, [pc, #100]	; (800f594 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 800f530:	9300      	str	r3, [sp, #0]
 800f532:	2345      	movs	r3, #69	; 0x45
 800f534:	4a10      	ldr	r2, [pc, #64]	; (800f578 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800f536:	4918      	ldr	r1, [pc, #96]	; (800f598 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 800f538:	4628      	mov	r0, r5
 800f53a:	47a0      	blx	r4
 800f53c:	2301      	movs	r3, #1
 800f53e:	e015      	b.n	800f56c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 800f540:	693a      	ldr	r2, [r7, #16]
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	429a      	cmp	r2, r3
 800f546:	d010      	beq.n	800f56a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a6>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	695c      	ldr	r4, [r3, #20]
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	9203      	str	r2, [sp, #12]
 800f554:	9302      	str	r3, [sp, #8]
 800f556:	4b11      	ldr	r3, [pc, #68]	; (800f59c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 800f558:	9301      	str	r3, [sp, #4]
 800f55a:	4b11      	ldr	r3, [pc, #68]	; (800f5a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1dc>)
 800f55c:	9300      	str	r3, [sp, #0]
 800f55e:	2346      	movs	r3, #70	; 0x46
 800f560:	4a05      	ldr	r2, [pc, #20]	; (800f578 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800f562:	490a      	ldr	r1, [pc, #40]	; (800f58c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800f564:	47a0      	blx	r4
 800f566:	2301      	movs	r3, #1
 800f568:	e000      	b.n	800f56c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a8>
  return kTfLiteOk;
 800f56a:	2300      	movs	r3, #0
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	372c      	adds	r7, #44	; 0x2c
 800f570:	46bd      	mov	sp, r7
 800f572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f574:	0801e8b0 	.word	0x0801e8b0
 800f578:	0801e880 	.word	0x0801e880
 800f57c:	0801e898 	.word	0x0801e898
 800f580:	0801e8c4 	.word	0x0801e8c4
 800f584:	0801e8f4 	.word	0x0801e8f4
 800f588:	0801e8f8 	.word	0x0801e8f8
 800f58c:	0801e8d8 	.word	0x0801e8d8
 800f590:	0801e920 	.word	0x0801e920
 800f594:	0801e930 	.word	0x0801e930
 800f598:	0801e904 	.word	0x0801e904
 800f59c:	0801e93c 	.word	0x0801e93c
 800f5a0:	0801e950 	.word	0x0801e950

0800f5a4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800f5a4:	b5b0      	push	{r4, r5, r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af04      	add	r7, sp, #16
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800f5ae:	6838      	ldr	r0, [r7, #0]
 800f5b0:	f7f2 fb88 	bl	8001cc4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d007      	beq.n	800f5ca <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800f5ba:	6838      	ldr	r0, [r7, #0]
 800f5bc:	f7f2 fb82 	bl	8001cc4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b02      	cmp	r3, #2
 800f5c4:	d001      	beq.n	800f5ca <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	e000      	b.n	800f5cc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00a      	beq.n	800f5e6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	695c      	ldr	r4, [r3, #20]
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	4b29      	ldr	r3, [pc, #164]	; (800f67c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800f5d8:	9300      	str	r3, [sp, #0]
 800f5da:	234b      	movs	r3, #75	; 0x4b
 800f5dc:	4a28      	ldr	r2, [pc, #160]	; (800f680 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800f5de:	4929      	ldr	r1, [pc, #164]	; (800f684 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800f5e0:	47a0      	blx	r4
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	e045      	b.n	800f672 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800f5e6:	6838      	ldr	r0, [r7, #0]
 800f5e8:	f7ff fedf 	bl	800f3aa <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	bf14      	ite	ne
 800f5f2:	2301      	movne	r3, #1
 800f5f4:	2300      	moveq	r3, #0
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d014      	beq.n	800f626 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x82>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	695c      	ldr	r4, [r3, #20]
 800f600:	687d      	ldr	r5, [r7, #4]
 800f602:	6838      	ldr	r0, [r7, #0]
 800f604:	f7ff fed1 	bl	800f3aa <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800f608:	4602      	mov	r2, r0
 800f60a:	2301      	movs	r3, #1
 800f60c:	9303      	str	r3, [sp, #12]
 800f60e:	9202      	str	r2, [sp, #8]
 800f610:	4b1d      	ldr	r3, [pc, #116]	; (800f688 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800f612:	9301      	str	r3, [sp, #4]
 800f614:	4b1d      	ldr	r3, [pc, #116]	; (800f68c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	234c      	movs	r3, #76	; 0x4c
 800f61a:	4a19      	ldr	r2, [pc, #100]	; (800f680 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800f61c:	491c      	ldr	r1, [pc, #112]	; (800f690 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800f61e:	4628      	mov	r0, r5
 800f620:	47a0      	blx	r4
 800f622:	2301      	movs	r3, #1
 800f624:	e025      	b.n	800f672 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6839      	ldr	r1, [r7, #0]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7ff feca 	bl	800f3c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	bf14      	ite	ne
 800f636:	2301      	movne	r3, #1
 800f638:	2300      	moveq	r3, #0
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d017      	beq.n	800f670 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	695c      	ldr	r4, [r3, #20]
 800f644:	687d      	ldr	r5, [r7, #4]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6839      	ldr	r1, [r7, #0]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7ff feba 	bl	800f3c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800f650:	4603      	mov	r3, r0
 800f652:	461a      	mov	r2, r3
 800f654:	2300      	movs	r3, #0
 800f656:	9303      	str	r3, [sp, #12]
 800f658:	9202      	str	r2, [sp, #8]
 800f65a:	4b0e      	ldr	r3, [pc, #56]	; (800f694 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 800f65c:	9301      	str	r3, [sp, #4]
 800f65e:	4b0e      	ldr	r3, [pc, #56]	; (800f698 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	234d      	movs	r3, #77	; 0x4d
 800f664:	4a06      	ldr	r2, [pc, #24]	; (800f680 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800f666:	490a      	ldr	r1, [pc, #40]	; (800f690 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800f668:	4628      	mov	r0, r5
 800f66a:	47a0      	blx	r4
 800f66c:	2301      	movs	r3, #1
 800f66e:	e000      	b.n	800f672 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xce>
  return kTfLiteOk;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bdb0      	pop	{r4, r5, r7, pc}
 800f67a:	bf00      	nop
 800f67c:	0801e964 	.word	0x0801e964
 800f680:	0801e880 	.word	0x0801e880
 800f684:	0801e898 	.word	0x0801e898
 800f688:	0801e994 	.word	0x0801e994
 800f68c:	0801e998 	.word	0x0801e998
 800f690:	0801e8d8 	.word	0x0801e8d8
 800f694:	0801e9ac 	.word	0x0801e9ac
 800f698:	0801e9b8 	.word	0x0801e9b8

0800f69c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b088      	sub	sp, #32
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	6839      	ldr	r1, [r7, #0]
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7f2 fbdd 	bl	8001e6a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800f6b0:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7f2 fbe7 	bl	8001e8a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800f6bc:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	7a1b      	ldrb	r3, [r3, #8]
 800f6c2:	f107 020c 	add.w	r2, r7, #12
 800f6c6:	4611      	mov	r1, r2
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fb fb03 	bl	800acd4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	74fb      	strb	r3, [r7, #19]
 800f6d2:	7cfb      	ldrb	r3, [r7, #19]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d001      	beq.n	800f6dc <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 800f6d8:	7cfb      	ldrb	r3, [r7, #19]
 800f6da:	e024      	b.n	800f726 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff f902 	bl	800e8ea <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	fb02 f303 	mul.w	r3, r2, r3
 800f6ee:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d013      	beq.n	800f724 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	61fb      	str	r3, [r7, #28]
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	69fa      	ldr	r2, [r7, #28]
 800f704:	429a      	cmp	r2, r3
 800f706:	d20d      	bcs.n	800f724 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	441a      	add	r2, r3
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	6819      	ldr	r1, [r3, #0]
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	440b      	add	r3, r1
 800f718:	7812      	ldrb	r2, [r2, #0]
 800f71a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	3301      	adds	r3, #1
 800f720:	61fb      	str	r3, [r7, #28]
 800f722:	e7ed      	b.n	800f700 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3720      	adds	r7, #32
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
	...

0800f730 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 800f730:	b4b0      	push	{r4, r5, r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4a07      	ldr	r2, [pc, #28]	; (800f758 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 800f73c:	461c      	mov	r4, r3
 800f73e:	4615      	mov	r5, r2
 800f740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f744:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	bcb0      	pop	{r4, r5, r7}
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	0801e9d8 	.word	0x0801e9d8

0800f75c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	2104      	movs	r1, #4
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7f5 f9fa 	bl	8004b64 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800f770:	4603      	mov	r3, r0
  }
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 800f77a:	b580      	push	{r7, lr}
 800f77c:	b082      	sub	sp, #8
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2200      	movs	r2, #0
 800f786:	210a      	movs	r1, #10
 800f788:	4618      	mov	r0, r3
 800f78a:	f7f5 f9bd 	bl	8004b08 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800f78e:	4603      	mov	r3, r0
 800f790:	b2db      	uxtb	r3, r3
  }
 800f792:	4618      	mov	r0, r3
 800f794:	3708      	adds	r7, #8
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 800f79a:	b580      	push	{r7, lr}
 800f79c:	b084      	sub	sp, #16
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d101      	bne.n	800f7ac <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 800f7a8:	f009 fab5 	bl	8018d16 <abort>

  return std::max(
      op_code->builtin_code(),
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f7ff ffe4 	bl	800f77a <_ZNK6tflite12OperatorCode12builtin_codeEv>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f7ff ffd0 	bl	800f75c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	73fb      	strb	r3, [r7, #15]
 800f7c2:	f107 020f 	add.w	r2, r7, #15
 800f7c6:	f107 030e 	add.w	r3, r7, #14
 800f7ca:	4611      	mov	r1, r2
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f000 f806 	bl	800f7de <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	781b      	ldrb	r3, [r3, #0]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 800f7de:	b480      	push	{r7}
 800f7e0:	b083      	sub	sp, #12
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
 800f7e6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	781a      	ldrb	r2, [r3, #0]
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d201      	bcs.n	800f7f8 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	e000      	b.n	800f7fa <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 800f7f8:	687b      	ldr	r3, [r7, #4]
    }
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	370c      	adds	r7, #12
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr
	...

0800f808 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "compatibility - Copy.h"
#include "memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
 800f814:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 800f816:	4a0e      	ldr	r2, [pc, #56]	; (800f850 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	601a      	str	r2, [r3, #0]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	68ba      	ldr	r2, [r7, #8]
 800f820:	605a      	str	r2, [r3, #4]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	609a      	str	r2, [r3, #8]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	683a      	ldr	r2, [r7, #0]
 800f82c:	60da      	str	r2, [r3, #12]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	611a      	str	r2, [r3, #16]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	683a      	ldr	r2, [r7, #0]
 800f838:	615a      	str	r2, [r3, #20]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	689a      	ldr	r2, [r3, #8]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	619a      	str	r2, [r3, #24]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	4618      	mov	r0, r3
 800f846:	3714      	adds	r7, #20
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr
 800f850:	080264d0 	.word	0x080264d0

0800f854 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
 800f860:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	4413      	add	r3, r2
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	68b9      	ldr	r1, [r7, #8]
 800f86c:	68f8      	ldr	r0, [r7, #12]
 800f86e:	f7ff ffcb 	bl	800f808 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	4618      	mov	r0, r3
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800f87c:	b480      	push	{r7}
 800f87e:	b083      	sub	sp, #12
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
 800f886:	4a11      	ldr	r2, [pc, #68]	; (800f8cc <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	601a      	str	r2, [r3, #0]
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	685a      	ldr	r2, [r3, #4]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	605a      	str	r2, [r3, #4]
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	689a      	ldr	r2, [r3, #8]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	609a      	str	r2, [r3, #8]
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	68da      	ldr	r2, [r3, #12]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	60da      	str	r2, [r3, #12]
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	691a      	ldr	r2, [r3, #16]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	611a      	str	r2, [r3, #16]
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	695a      	ldr	r2, [r3, #20]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	615a      	str	r2, [r3, #20]
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	699a      	ldr	r2, [r3, #24]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	619a      	str	r2, [r3, #24]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	370c      	adds	r7, #12
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop
 800f8cc:	080264d0 	.word	0x080264d0

0800f8d0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800f8d0:	b590      	push	{r4, r7, lr}
 800f8d2:	b08d      	sub	sp, #52	; 0x34
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	60f8      	str	r0, [r7, #12]
 800f8d8:	60b9      	str	r1, [r7, #8]
 800f8da:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d101      	bne.n	800f8e6 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800f8e2:	f009 fa18 	bl	8018d16 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d101      	bne.n	800f8f0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 800f8ec:	f009 fa13 	bl	8018d16 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800f8f0:	f107 0010 	add.w	r0, r7, #16
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	68f9      	ldr	r1, [r7, #12]
 800f8fa:	f7ff ffab 	bl	800f854 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
 800f8fe:	f107 0310 	add.w	r3, r7, #16
 800f902:	2204      	movs	r2, #4
 800f904:	211c      	movs	r1, #28
 800f906:	4618      	mov	r0, r3
 800f908:	f000 f87e 	bl	800fa08 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 800f90c:	62f8      	str	r0, [r7, #44]	; 0x2c
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800f90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f910:	4619      	mov	r1, r3
 800f912:	201c      	movs	r0, #28
 800f914:	f7f4 fb90 	bl	8004038 <_ZnwjPv>
 800f918:	4604      	mov	r4, r0
 800f91a:	2c00      	cmp	r4, #0
 800f91c:	d005      	beq.n	800f92a <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x5a>
 800f91e:	f107 0310 	add.w	r3, r7, #16
 800f922:	4619      	mov	r1, r3
 800f924:	4620      	mov	r0, r4
 800f926:	f7ff ffa9 	bl	800f87c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800f92a:	f107 0310 	add.w	r3, r7, #16
 800f92e:	4618      	mov	r0, r3
 800f930:	f000 f806 	bl	800f940 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800f934:	4623      	mov	r3, r4
}
 800f936:	4618      	mov	r0, r3
 800f938:	3734      	adds	r7, #52	; 0x34
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd90      	pop	{r4, r7, pc}
	...

0800f940 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	4a04      	ldr	r2, [pc, #16]	; (800f95c <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4618      	mov	r0, r3
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr
 800f95c:	080264d0 	.word	0x080264d0

0800f960 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f7ff ffe9 	bl	800f940 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800f96e:	211c      	movs	r1, #28
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f006 ff34 	bl	80167de <_ZdlPvj>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4618      	mov	r0, r3
 800f97a:	3708      	adds	r7, #8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 800f980:	b580      	push	{r7, lr}
 800f982:	b088      	sub	sp, #32
 800f984:	af02      	add	r7, sp, #8
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	691a      	ldr	r2, [r3, #16]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	699b      	ldr	r3, [r3, #24]
 800f994:	429a      	cmp	r2, r3
 800f996:	d007      	beq.n	800f9a8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	4918      	ldr	r1, [pc, #96]	; (800fa00 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7f3 fb0a 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	e027      	b.n	800f9f8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x78>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	6879      	ldr	r1, [r7, #4]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fb f94a 	bl	800ac48 <_ZN6tflite14AlignPointerUpEPhj>
 800f9b4:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	695b      	ldr	r3, [r3, #20]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	1ad3      	subs	r3, r2, r3
 800f9c0:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800f9c2:	693a      	ldr	r2, [r7, #16]
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d20c      	bcs.n	800f9e4 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x64>
    TF_LITE_REPORT_ERROR(
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	6858      	ldr	r0, [r3, #4]
 800f9ce:	68ba      	ldr	r2, [r7, #8]
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	1ad3      	subs	r3, r2, r3
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	68ba      	ldr	r2, [r7, #8]
 800f9da:	490a      	ldr	r1, [pc, #40]	; (800fa04 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 800f9dc:	f7f3 faec 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	e009      	b.n	800f9f8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x78>
  }
  head_ = aligned_result + size;
 800f9e4:	697a      	ldr	r2, [r7, #20]
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	441a      	add	r2, r3
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	691a      	ldr	r2, [r3, #16]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800f9f6:	2300      	movs	r3, #0
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3718      	adds	r7, #24
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	0801ea0c 	.word	0x0801ea0c
 800fa04:	0801ea64 	.word	0x0801ea64

0800fa08 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b088      	sub	sp, #32
 800fa0c:	af02      	add	r7, sp, #8
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	695a      	ldr	r2, [r3, #20]
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	425b      	negs	r3, r3
 800fa1c:	4413      	add	r3, r2
 800fa1e:	6879      	ldr	r1, [r7, #4]
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fb f92a 	bl	800ac7a <_ZN6tflite16AlignPointerDownEPhj>
 800fa26:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	691b      	ldr	r3, [r3, #16]
 800fa2c:	697a      	ldr	r2, [r7, #20]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d213      	bcs.n	800fa5a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x52>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	691b      	ldr	r3, [r3, #16]
 800fa36:	461a      	mov	r2, r3
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	1ad3      	subs	r3, r2, r3
 800fa3c:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6858      	ldr	r0, [r3, #4]
 800fa42:	68ba      	ldr	r2, [r7, #8]
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	1ad2      	subs	r2, r2, r3
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	68ba      	ldr	r2, [r7, #8]
 800fa50:	4906      	ldr	r1, [pc, #24]	; (800fa6c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x64>)
 800fa52:	f7f3 fab1 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 800fa56:	2300      	movs	r3, #0
 800fa58:	e003      	b.n	800fa62 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x5a>
  }
  tail_ = aligned_result;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	697a      	ldr	r2, [r7, #20]
 800fa5e:	615a      	str	r2, [r3, #20]
  return aligned_result;
 800fa60:	697b      	ldr	r3, [r7, #20]
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3718      	adds	r7, #24
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	0801eaa8 	.word	0x0801eaa8

0800fa70 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b088      	sub	sp, #32
 800fa74:	af02      	add	r7, sp, #8
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	699b      	ldr	r3, [r3, #24]
 800fa80:	6879      	ldr	r1, [r7, #4]
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fb f8e0 	bl	800ac48 <_ZN6tflite14AlignPointerUpEPhj>
 800fa88:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	695b      	ldr	r3, [r3, #20]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800fa96:	693a      	ldr	r2, [r7, #16]
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d20c      	bcs.n	800fab8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x48>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6858      	ldr	r0, [r3, #4]
 800faa2:	68ba      	ldr	r2, [r7, #8]
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	4907      	ldr	r1, [pc, #28]	; (800facc <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 800fab0:	f7f3 fa82 	bl	8002fb8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 800fab4:	2300      	movs	r3, #0
 800fab6:	e005      	b.n	800fac4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x54>
  }
  temp_ = aligned_result + size;
 800fab8:	697a      	ldr	r2, [r7, #20]
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	441a      	add	r2, r3
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	619a      	str	r2, [r3, #24]
  return aligned_result;
 800fac2:	697b      	ldr	r3, [r7, #20]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3718      	adds	r7, #24
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	0801eaf4 	.word	0x0801eaf4

0800fad0 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	691a      	ldr	r2, [r3, #16]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	619a      	str	r2, [r3, #24]
 800fae0:	bf00      	nop
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	4618      	mov	r0, r3
 800fafa:	370c      	adds	r7, #12
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	699b      	ldr	r3, [r3, #24]
 800fb12:	6839      	ldr	r1, [r7, #0]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fb f897 	bl	800ac48 <_ZN6tflite14AlignPointerUpEPhj>
 800fb1a:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	695b      	ldr	r3, [r3, #20]
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7fb f8a9 	bl	800ac7a <_ZN6tflite16AlignPointerDownEPhj>
 800fb28:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	1ad3      	subs	r3, r2, r3
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3710      	adds	r7, #16
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	ed87 0a01 	vstr	s0, [r7, #4]
 800fb42:	ed97 0a01 	vldr	s0, [r7, #4]
 800fb46:	f007 fa97 	bl	8017078 <expf>
 800fb4a:	eef0 7a40 	vmov.f32	s15, s0
 800fb4e:	eeb0 0a67 	vmov.f32	s0, s15
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800fb58:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800fb5c:	b08b      	sub	sp, #44	; 0x2c
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800fb6a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b64 = b;
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800fb74:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t sum = a64 + b64;
 800fb78:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fb7c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800fb80:	eb13 0b01 	adds.w	fp, r3, r1
 800fb84:	eb44 0c02 	adc.w	ip, r4, r2
 800fb88:	e9c7 bc04 	strd	fp, ip, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800fb8c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	f174 0300 	sbcs.w	r3, r4, #0
 800fb96:	db04      	blt.n	800fba2 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4a>
 800fb98:	f04f 0301 	mov.w	r3, #1
 800fb9c:	f04f 0400 	mov.w	r4, #0
 800fba0:	e003      	b.n	800fbaa <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x52>
 800fba2:	f04f 33ff 	mov.w	r3, #4294967295
 800fba6:	f04f 34ff 	mov.w	r4, #4294967295
 800fbaa:	e9c7 3402 	strd	r3, r4, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800fbae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fbb2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800fbb6:	eb13 0b01 	adds.w	fp, r3, r1
 800fbba:	eb44 0c02 	adc.w	ip, r4, r2
 800fbbe:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800fbc2:	4611      	mov	r1, r2
 800fbc4:	f04f 0200 	mov.w	r2, #0
 800fbc8:	eb1b 0301 	adds.w	r3, fp, r1
 800fbcc:	eb4c 0402 	adc.w	r4, ip, r2
 800fbd0:	1064      	asrs	r4, r4, #1
 800fbd2:	ea4f 0333 	mov.w	r3, r3, rrx
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	372c      	adds	r7, #44	; 0x2c
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800fbe0:	4770      	bx	lr

0800fbe2 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800fbe2:	b480      	push	{r7}
 800fbe4:	b083      	sub	sp, #12
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	da01      	bge.n	800fc00 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	e000      	b.n	800fc02 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 800fc00:	687b      	ldr	r3, [r7, #4]
    }
 800fc02:	4618      	mov	r0, r3
 800fc04:	370c      	adds	r7, #12
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr

0800fc0e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800fc0e:	b590      	push	{r4, r7, lr}
 800fc10:	b087      	sub	sp, #28
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	60f8      	str	r0, [r7, #12]
 800fc16:	60b9      	str	r1, [r7, #8]
 800fc18:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800fc1a:	68f8      	ldr	r0, [r7, #12]
 800fc1c:	f7f1 fbae 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fc20:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800fc22:	2300      	movs	r3, #0
 800fc24:	617b      	str	r3, [r7, #20]
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	da15      	bge.n	800fc5a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 800fc2e:	697a      	ldr	r2, [r7, #20]
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d00d      	beq.n	800fc52 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800fc36:	6979      	ldr	r1, [r7, #20]
 800fc38:	68f8      	ldr	r0, [r7, #12]
 800fc3a:	f7f1 fbab 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fc3e:	4604      	mov	r4, r0
 800fc40:	6979      	ldr	r1, [r7, #20]
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f7f1 fba6 	bl	8001394 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	429c      	cmp	r4, r3
 800fc4c:	d001      	beq.n	800fc52 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 800fc4e:	f009 f862 	bl	8018d16 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	3301      	adds	r3, #1
 800fc56:	617b      	str	r3, [r7, #20]
 800fc58:	e7e5      	b.n	800fc26 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800fc5a:	68b9      	ldr	r1, [r7, #8]
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f7f6 fa1d 	bl	800609c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800fc62:	4603      	mov	r3, r0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	371c      	adds	r7, #28
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd90      	pop	{r4, r7, pc}

0800fc6c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	fa02 f303 	lsl.w	r3, r2, r3
                                           quantized_multiplier);
 800fc80:	68b9      	ldr	r1, [r7, #8]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7f1 faf4 	bl	8001270 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800fc88:	4603      	mov	r3, r0
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
	...

0800fc94 <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
 800fc94:	b580      	push	{r7, lr}
 800fc96:	ed2d 8b02 	vpush	{d8}
 800fc9a:	b094      	sub	sp, #80	; 0x50
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6178      	str	r0, [r7, #20]
 800fca0:	ed87 0a04 	vstr	s0, [r7, #16]
 800fca4:	edc7 0a03 	vstr	s1, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
 800fcac:	ed97 7a03 	vldr	s14, [r7, #12]
 800fcb0:	edd7 7a04 	vldr	s15, [r7, #16]
 800fcb4:	ee77 6a67 	vsub.f32	s13, s14, s15
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	3b01      	subs	r3, #1
 800fcbc:	ee07 3a90 	vmov	s15, r3
 800fcc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fcc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcc8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 800fccc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fcd0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fcd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fcd8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 800fcdc:	2300      	movs	r3, #0
 800fcde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	3b01      	subs	r3, #1
 800fce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fce6:	429a      	cmp	r2, r3
 800fce8:	f280 80c0 	bge.w	800fe6c <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 800fcec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcee:	ee07 3a90 	vmov	s15, r3
 800fcf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fcf6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800fcfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fcfe:	edd7 7a04 	vldr	s15, [r7, #16]
 800fd02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	eeb0 0a67 	vmov.f32	s0, s15
 800fd0c:	4798      	blx	r3
 800fd0e:	eeb0 7a40 	vmov.f32	s14, s0
 800fd12:	eddf 7a74 	vldr	s15, [pc, #464]	; 800fee4 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800fd16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd1a:	eeb0 0a67 	vmov.f32	s0, s15
 800fd1e:	f7f8 f9d9 	bl	80080d4 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800fd22:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800fd26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd28:	3301      	adds	r3, #1
 800fd2a:	ee07 3a90 	vmov	s15, r3
 800fd2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fd32:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800fd36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd3a:	edd7 7a04 	vldr	s15, [r7, #16]
 800fd3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	eeb0 0a67 	vmov.f32	s0, s15
 800fd48:	4798      	blx	r3
 800fd4a:	eeb0 7a40 	vmov.f32	s14, s0
 800fd4e:	eddf 7a65 	vldr	s15, [pc, #404]	; 800fee4 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800fd52:	ee27 8a27 	vmul.f32	s16, s14, s15
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 800fd56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd58:	ee07 3a90 	vmov	s15, r3
 800fd5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fd60:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800fd64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd68:	edd7 7a04 	vldr	s15, [r7, #16]
 800fd6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	eeb0 0a67 	vmov.f32	s0, s15
 800fd76:	4798      	blx	r3
 800fd78:	eeb0 7a40 	vmov.f32	s14, s0
 800fd7c:	eddf 7a59 	vldr	s15, [pc, #356]	; 800fee4 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800fd80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd84:	eeb0 0a67 	vmov.f32	s0, s15
 800fd88:	f7f8 f9a4 	bl	80080d4 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800fd8c:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800fd90:	ee78 7a27 	vadd.f32	s15, s16, s15
 800fd94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fd98:	eec7 6a87 	vdiv.f32	s13, s15, s14
                    2.0f);
 800fd9c:	eeb0 0a66 	vmov.f32	s0, s13
 800fda0:	f7f8 f998 	bl	80080d4 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800fda4:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 800fda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdaa:	ee07 3a90 	vmov	s15, r3
 800fdae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fdb2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800fdb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fdba:	edd7 7a04 	vldr	s15, [r7, #16]
 800fdbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fdc2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fdc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	eeb0 0a67 	vmov.f32	s0, s15
 800fdd0:	4798      	blx	r3
 800fdd2:	eeb0 7a40 	vmov.f32	s14, s0
 800fdd6:	eddf 7a43 	vldr	s15, [pc, #268]	; 800fee4 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800fdda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdde:	eeb0 0a67 	vmov.f32	s0, s15
 800fde2:	f7f8 f977 	bl	80080d4 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800fde6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 800fdea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800fdee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800fdf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fdf6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 800fdfa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fdfe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fe02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800fe06:	eeb0 0a66 	vmov.f32	s0, s13
 800fe0a:	f7f8 f963 	bl	80080d4 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800fe0e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min(std::max(sample_val - bias, -32768.0f), 32767.0f);
 800fe12:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fe16:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fe1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe1e:	edc7 7a06 	vstr	s15, [r7, #24]
 800fe22:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800fe26:	61fb      	str	r3, [r7, #28]
 800fe28:	f107 021c 	add.w	r2, r7, #28
 800fe2c:	f107 0318 	add.w	r3, r7, #24
 800fe30:	4611      	mov	r1, r2
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7f2 fd16 	bl	8002864 <_ZSt3maxIfERKT_S2_S2_>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	4b2b      	ldr	r3, [pc, #172]	; (800fee8 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800fe3c:	623b      	str	r3, [r7, #32]
 800fe3e:	f107 0320 	add.w	r3, r7, #32
 800fe42:	4619      	mov	r1, r3
 800fe44:	4610      	mov	r0, r2
 800fe46:	f7f2 fdb9 	bl	80029bc <_ZSt3minIfERKT_S2_S2_>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	edd3 7a00 	vldr	s15, [r3]
 800fe50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe52:	005b      	lsls	r3, r3, #1
 800fe54:	68ba      	ldr	r2, [r7, #8]
 800fe56:	4413      	add	r3, r2
 800fe58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe5c:	ee17 2a90 	vmov	r2, s15
 800fe60:	b212      	sxth	r2, r2
 800fe62:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 800fe64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe66:	3301      	adds	r3, #1
 800fe68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe6a:	e739      	b.n	800fce0 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
  }
  table[num - 1] = std::min(
      std::max(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	ed97 0a03 	vldr	s0, [r7, #12]
 800fe72:	4798      	blx	r3
 800fe74:	eeb0 7a40 	vmov.f32	s14, s0
 800fe78:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800fee4 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800fe7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe80:	eeb0 0a67 	vmov.f32	s0, s15
 800fe84:	f7f8 f926 	bl	80080d4 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800fe88:	eef0 7a40 	vmov.f32	s15, s0
 800fe8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800fe90:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800fe94:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fe9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe9e:	4611      	mov	r1, r2
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7f2 fcdf 	bl	8002864 <_ZSt3maxIfERKT_S2_S2_>
 800fea6:	4602      	mov	r2, r0
 800fea8:	4b0f      	ldr	r3, [pc, #60]	; (800fee8 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800feaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800feb0:	4619      	mov	r1, r3
 800feb2:	4610      	mov	r0, r2
 800feb4:	f7f2 fd82 	bl	80029bc <_ZSt3minIfERKT_S2_S2_>
 800feb8:	4603      	mov	r3, r0
  table[num - 1] = std::min(
 800feba:	edd3 7a00 	vldr	s15, [r3]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fec4:	3b01      	subs	r3, #1
 800fec6:	005b      	lsls	r3, r3, #1
 800fec8:	68ba      	ldr	r2, [r7, #8]
 800feca:	4413      	add	r3, r2
 800fecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fed0:	ee17 2a90 	vmov	r2, s15
 800fed4:	b212      	sxth	r2, r2
 800fed6:	801a      	strh	r2, [r3, #0]
}
 800fed8:	bf00      	nop
 800feda:	3750      	adds	r7, #80	; 0x50
 800fedc:	46bd      	mov	sp, r7
 800fede:	ecbd 8b02 	vpop	{d8}
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	47000000 	.word	0x47000000
 800fee8:	46fffe00 	.word	0x46fffe00

0800feec <_ZN6tflite26generic_int16_table_lookupEsPKs>:

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 800feec:	b580      	push	{r7, lr}
 800feee:	b086      	sub	sp, #24
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	4603      	mov	r3, r0
 800fef4:	6039      	str	r1, [r7, #0]
 800fef6:	80fb      	strh	r3, [r7, #6]
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 800fef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fefc:	11db      	asrs	r3, r3, #7
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ff04:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 800ff06:	8afb      	ldrh	r3, [r7, #22]
 800ff08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff0c:	d306      	bcc.n	800ff1c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x30>
 800ff0e:	4b1b      	ldr	r3, [pc, #108]	; (800ff7c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 800ff10:	4a1b      	ldr	r2, [pc, #108]	; (800ff80 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 800ff12:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800ff16:	481b      	ldr	r0, [pc, #108]	; (800ff84 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 800ff18:	f008 ff04 	bl	8018d24 <__assert_func>
  int16_t offset = value & 0x7f;
 800ff1c:	88fb      	ldrh	r3, [r7, #6]
 800ff1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff22:	82bb      	strh	r3, [r7, #20]

  // base and slope are Q0.15
  int16_t base = lut[index];
 800ff24:	8afb      	ldrh	r3, [r7, #22]
 800ff26:	005b      	lsls	r3, r3, #1
 800ff28:	683a      	ldr	r2, [r7, #0]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	881b      	ldrh	r3, [r3, #0]
 800ff2e:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 800ff30:	8afb      	ldrh	r3, [r7, #22]
 800ff32:	3301      	adds	r3, #1
 800ff34:	005b      	lsls	r3, r3, #1
 800ff36:	683a      	ldr	r2, [r7, #0]
 800ff38:	4413      	add	r3, r2
 800ff3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	8afb      	ldrh	r3, [r7, #22]
 800ff42:	005b      	lsls	r3, r3, #1
 800ff44:	6839      	ldr	r1, [r7, #0]
 800ff46:	440b      	add	r3, r1
 800ff48:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	1ad3      	subs	r3, r2, r3
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	823b      	strh	r3, [r7, #16]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 800ff54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ff58:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800ff5c:	fb02 f303 	mul.w	r3, r2, r3
 800ff60:	3340      	adds	r3, #64	; 0x40
 800ff62:	11db      	asrs	r3, r3, #7
 800ff64:	60fb      	str	r3, [r7, #12]

  // Q0.15 + Q0.15
  return base + delta;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	8a7b      	ldrh	r3, [r7, #18]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	b21b      	sxth	r3, r3
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3718      	adds	r7, #24
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	0801eb40 	.word	0x0801eb40
 800ff80:	08026568 	.word	0x08026568
 800ff84:	0801eb6c 	.word	0x0801eb6c

0800ff88 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b088      	sub	sp, #32
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	4618      	mov	r0, r3
 800ff98:	f001 f81c 	bl	8010fd4 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800ff9c:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800ff9e:	68ba      	ldr	r2, [r7, #8]
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	1ad2      	subs	r2, r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800ffa8:	68fa      	ldr	r2, [r7, #12]
 800ffaa:	69fb      	ldr	r3, [r7, #28]
 800ffac:	fa02 f303 	lsl.w	r3, r2, r3
 800ffb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 800ffb4:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 800ffb6:	69b8      	ldr	r0, [r7, #24]
 800ffb8:	f001 f81e 	bl	8010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f001 f82c 	bl	801101c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 800ffc8:	f107 0314 	add.w	r3, r7, #20
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f001 f885 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	681b      	ldr	r3, [r3, #0]
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3720      	adds	r7, #32
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}

0800ffde <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800ffde:	b590      	push	{r4, r7, lr}
 800ffe0:	ed2d 8b02 	vpush	{d8}
 800ffe4:	b08f      	sub	sp, #60	; 0x3c
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	60f8      	str	r0, [r7, #12]
 800ffea:	60b9      	str	r1, [r7, #8]
 800ffec:	607a      	str	r2, [r7, #4]
 800ffee:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800fff0:	68b8      	ldr	r0, [r7, #8]
 800fff2:	f7f1 f9c3 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fff6:	4603      	mov	r3, r0
 800fff8:	3b01      	subs	r3, #1
 800fffa:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800fffc:	683a      	ldr	r2, [r7, #0]
 800fffe:	6a39      	ldr	r1, [r7, #32]
 8010000:	68b8      	ldr	r0, [r7, #8]
 8010002:	f7ff fe04 	bl	800fc0e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8010006:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8010008:	6a3b      	ldr	r3, [r7, #32]
 801000a:	683a      	ldr	r2, [r7, #0]
 801000c:	6a39      	ldr	r1, [r7, #32]
 801000e:	68b8      	ldr	r0, [r7, #8]
 8010010:	f7f1 fa7f 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010014:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8010016:	2300      	movs	r3, #0
 8010018:	637b      	str	r3, [r7, #52]	; 0x34
 801001a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	429a      	cmp	r2, r3
 8010020:	f280 8087 	bge.w	8010132 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8010024:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8010028:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801002a:	2300      	movs	r3, #0
 801002c:	633b      	str	r3, [r7, #48]	; 0x30
 801002e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	429a      	cmp	r2, r3
 8010034:	da15      	bge.n	8010062 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 8010036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010038:	69ba      	ldr	r2, [r7, #24]
 801003a:	fb02 f203 	mul.w	r2, r2, r3
 801003e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010040:	4413      	add	r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	441a      	add	r2, r3
 8010048:	f107 0310 	add.w	r3, r7, #16
 801004c:	4611      	mov	r1, r2
 801004e:	4618      	mov	r0, r3
 8010050:	f7f2 fc08 	bl	8002864 <_ZSt3maxIfERKT_S2_S2_>
 8010054:	4603      	mov	r3, r0
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801005a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005c:	3301      	adds	r3, #1
 801005e:	633b      	str	r3, [r7, #48]	; 0x30
 8010060:	e7e5      	b.n	801002e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 8010062:	f04f 0300 	mov.w	r3, #0
 8010066:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8010068:	2300      	movs	r3, #0
 801006a:	62bb      	str	r3, [r7, #40]	; 0x28
 801006c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	429a      	cmp	r2, r3
 8010072:	da36      	bge.n	80100e2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8010074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010076:	69ba      	ldr	r2, [r7, #24]
 8010078:	fb02 f203 	mul.w	r2, r2, r3
 801007c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007e:	4413      	add	r3, r2
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	4413      	add	r3, r2
 8010086:	ed93 7a00 	vldr	s14, [r3]
 801008a:	edd7 7a04 	vldr	s15, [r7, #16]
 801008e:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010098:	4618      	mov	r0, r3
 801009a:	4621      	mov	r1, r4
 801009c:	f7f0 fd94 	bl	8000bc8 <__aeabi_d2f>
 80100a0:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 80100a4:	ee68 7a27 	vmul.f32	s15, s16, s15
                                   static_cast<float>(params.beta));
 80100a8:	eeb0 0a67 	vmov.f32	s0, s15
 80100ac:	f7ff fd44 	bl	800fb38 <_ZSt3expf>
 80100b0:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 80100b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100b6:	69ba      	ldr	r2, [r7, #24]
 80100b8:	fb02 f203 	mul.w	r2, r2, r3
 80100bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100be:	4413      	add	r3, r2
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100c4:	4413      	add	r3, r2
 80100c6:	697a      	ldr	r2, [r7, #20]
 80100c8:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 80100ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80100ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80100d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80100da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100dc:	3301      	adds	r3, #1
 80100de:	62bb      	str	r3, [r7, #40]	; 0x28
 80100e0:	e7c4      	b.n	801006c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 80100e2:	2300      	movs	r3, #0
 80100e4:	627b      	str	r3, [r7, #36]	; 0x24
 80100e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100e8:	69bb      	ldr	r3, [r7, #24]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	da1d      	bge.n	801012a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 80100ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f0:	69ba      	ldr	r2, [r7, #24]
 80100f2:	fb02 f203 	mul.w	r2, r2, r3
 80100f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f8:	4413      	add	r3, r2
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100fe:	4413      	add	r3, r2
 8010100:	edd3 6a00 	vldr	s13, [r3]
 8010104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010106:	69ba      	ldr	r2, [r7, #24]
 8010108:	fb02 f203 	mul.w	r2, r2, r3
 801010c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010e:	4413      	add	r3, r2
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010114:	4413      	add	r3, r2
 8010116:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801011a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801011e:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8010122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010124:	3301      	adds	r3, #1
 8010126:	627b      	str	r3, [r7, #36]	; 0x24
 8010128:	e7dd      	b.n	80100e6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 801012a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012c:	3301      	adds	r3, #1
 801012e:	637b      	str	r3, [r7, #52]	; 0x34
 8010130:	e773      	b.n	801001a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 8010132:	bf00      	nop
 8010134:	373c      	adds	r7, #60	; 0x3c
 8010136:	46bd      	mov	sp, r7
 8010138:	ecbd 8b02 	vpop	{d8}
 801013c:	bd90      	pop	{r4, r7, pc}
	...

08010140 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 8010140:	b580      	push	{r7, lr}
 8010142:	b08a      	sub	sp, #40	; 0x28
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]
 801014c:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801014e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	fb02 f203 	mul.w	r2, r2, r3
 8010156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010158:	4413      	add	r3, r2
 801015a:	005b      	lsls	r3, r3, #1
 801015c:	68ba      	ldr	r2, [r7, #8]
 801015e:	4413      	add	r3, r2
 8010160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010164:	461a      	mov	r2, r3
 8010166:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801016a:	1ad3      	subs	r3, r2, r3
 801016c:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	6899      	ldr	r1, [r3, #8]
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	461a      	mov	r2, r3
 8010178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801017a:	f7f1 f9f9 	bl	8001570 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801017e:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8010180:	6a3b      	ldr	r3, [r7, #32]
 8010182:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8010186:	337f      	adds	r3, #127	; 0x7f
 8010188:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
               static_cast<int32_t>(32767));
 801018a:	4b12      	ldr	r3, [pc, #72]	; (80101d4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 801018c:	617b      	str	r3, [r7, #20]
 801018e:	f107 0214 	add.w	r2, r7, #20
 8010192:	f107 0310 	add.w	r3, r7, #16
 8010196:	4611      	mov	r1, r2
 8010198:	4618      	mov	r0, r3
 801019a:	f7f1 f855 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 801019e:	4602      	mov	r2, r0
 80101a0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80101a4:	61bb      	str	r3, [r7, #24]
 80101a6:	f107 0318 	add.w	r3, r7, #24
 80101aa:	4619      	mov	r1, r3
 80101ac:	4610      	mov	r0, r2
 80101ae:	f7f2 fb45 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 80101b2:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 80101b4:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 80101b6:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80101bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80101c0:	4611      	mov	r1, r2
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7ff fe92 	bl	800feec <_ZN6tflite26generic_int16_table_lookupEsPKs>
 80101c8:	4603      	mov	r3, r0
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3728      	adds	r7, #40	; 0x28
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	ffff8000 	.word	0xffff8000

080101d8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 80101d8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80101dc:	b09e      	sub	sp, #120	; 0x78
 80101de:	af02      	add	r7, sp, #8
 80101e0:	60f8      	str	r0, [r7, #12]
 80101e2:	60b9      	str	r1, [r7, #8]
 80101e4:	607a      	str	r2, [r7, #4]
 80101e6:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80101e8:	68b8      	ldr	r0, [r7, #8]
 80101ea:	f7f1 f8c7 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80101ee:	4603      	mov	r3, r0
 80101f0:	3b01      	subs	r3, #1
 80101f2:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80101f4:	683a      	ldr	r2, [r7, #0]
 80101f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101f8:	68b8      	ldr	r0, [r7, #8]
 80101fa:	f7ff fd08 	bl	800fc0e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80101fe:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8010200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010206:	68b8      	ldr	r0, [r7, #8]
 8010208:	f7f1 f983 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801020c:	6538      	str	r0, [r7, #80]	; 0x50

  for (int i = 0; i < outer_size; ++i) {
 801020e:	2300      	movs	r3, #0
 8010210:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010212:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010216:	429a      	cmp	r2, r3
 8010218:	f280 8114 	bge.w	8010444 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26c>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801021c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010220:	83fb      	strh	r3, [r7, #30]
    for (int c = 0; c < depth; ++c) {
 8010222:	2300      	movs	r3, #0
 8010224:	66bb      	str	r3, [r7, #104]	; 0x68
 8010226:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801022a:	429a      	cmp	r2, r3
 801022c:	da16      	bge.n	801025c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801022e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010232:	fb02 f203 	mul.w	r2, r2, r3
 8010236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010238:	4413      	add	r3, r2
 801023a:	005b      	lsls	r3, r3, #1
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	441a      	add	r2, r3
 8010240:	f107 031e 	add.w	r3, r7, #30
 8010244:	4611      	mov	r1, r2
 8010246:	4618      	mov	r0, r3
 8010248:	f7ff fccb 	bl	800fbe2 <_ZSt3maxIsERKT_S2_S2_>
 801024c:	4603      	mov	r3, r0
 801024e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010252:	83fb      	strh	r3, [r7, #30]
    for (int c = 0; c < depth; ++c) {
 8010254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010256:	3301      	adds	r3, #1
 8010258:	66bb      	str	r3, [r7, #104]	; 0x68
 801025a:	e7e4      	b.n	8010226 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801025c:	2300      	movs	r3, #0
 801025e:	667b      	str	r3, [r7, #100]	; 0x64
    int16_t* exp_results_Q015 = output_data + i * depth;
 8010260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010262:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010264:	fb02 f303 	mul.w	r3, r2, r3
 8010268:	005b      	lsls	r3, r3, #1
 801026a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801026e:	4413      	add	r3, r2
 8010270:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (int c = 0; c < depth; ++c) {
 8010272:	2300      	movs	r3, #0
 8010274:	663b      	str	r3, [r7, #96]	; 0x60
 8010276:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801027a:	429a      	cmp	r2, r3
 801027c:	da1f      	bge.n	80102be <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801027e:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
      exp_results_Q015[c] =
 8010282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010284:	005b      	lsls	r3, r3, #1
 8010286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010288:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801028a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801028c:	9301      	str	r3, [sp, #4]
 801028e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010290:	9300      	str	r3, [sp, #0]
 8010292:	460b      	mov	r3, r1
 8010294:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010296:	6879      	ldr	r1, [r7, #4]
 8010298:	68f8      	ldr	r0, [r7, #12]
 801029a:	f7ff ff51 	bl	8010140 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801029e:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 80102a0:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 80102a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102a4:	005b      	lsls	r3, r3, #1
 80102a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80102a8:	4413      	add	r3, r2
 80102aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80102ae:	461a      	mov	r2, r3
 80102b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102b2:	4413      	add	r3, r2
 80102b4:	667b      	str	r3, [r7, #100]	; 0x64
    for (int c = 0; c < depth; ++c) {
 80102b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102b8:	3301      	adds	r3, #1
 80102ba:	663b      	str	r3, [r7, #96]	; 0x60
 80102bc:	e7db      	b.n	8010276 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 80102be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102c0:	4618      	mov	r0, r3
 80102c2:	f000 fe87 	bl	8010fd4 <_ZN6tflite17CountLeadingZerosImEEiT_>
 80102c6:	4603      	mov	r3, r0
 80102c8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 80102cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102ce:	461a      	mov	r2, r3
 80102d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80102d4:	f897 104b 	ldrb.w	r1, [r7, #75]	; 0x4b
 80102d8:	3901      	subs	r1, #1
 80102da:	f1a1 0620 	sub.w	r6, r1, #32
 80102de:	f1c1 0020 	rsb	r0, r1, #32
 80102e2:	fa03 f501 	lsl.w	r5, r3, r1
 80102e6:	fa02 f606 	lsl.w	r6, r2, r6
 80102ea:	4335      	orrs	r5, r6
 80102ec:	fa22 f000 	lsr.w	r0, r2, r0
 80102f0:	4305      	orrs	r5, r0
 80102f2:	fa02 f401 	lsl.w	r4, r2, r1
 80102f6:	f514 5000 	adds.w	r0, r4, #8192	; 0x2000
 80102fa:	f145 0100 	adc.w	r1, r5, #0
         (1 << 13)) >>
 80102fe:	f04f 0200 	mov.w	r2, #0
 8010302:	f04f 0300 	mov.w	r3, #0
 8010306:	0b82      	lsrs	r2, r0, #14
 8010308:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801030c:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 801030e:	4613      	mov	r3, r2
 8010310:	647b      	str	r3, [r7, #68]	; 0x44
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 8010312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010314:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 8010318:	61bb      	str	r3, [r7, #24]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
                 static_cast<int32_t>(32767)));
 801031a:	4b4d      	ldr	r3, [pc, #308]	; (8010450 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x278>)
 801031c:	623b      	str	r3, [r7, #32]
 801031e:	f107 0220 	add.w	r2, r7, #32
 8010322:	f107 0318 	add.w	r3, r7, #24
 8010326:	4611      	mov	r1, r2
 8010328:	4618      	mov	r0, r3
 801032a:	f7f0 ff8d 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 801032e:	4602      	mov	r2, r0
 8010330:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010334:	627b      	str	r3, [r7, #36]	; 0x24
 8010336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801033a:	4619      	mov	r1, r3
 801033c:	4610      	mov	r0, r2
 801033e:	f7f2 fa7d 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 8010342:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8010344:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8010346:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010352:	4611      	mov	r1, r2
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff fdc9 	bl	800feec <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801035a:	4603      	mov	r3, r0
 801035c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 8010360:	2300      	movs	r3, #0
 8010362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010364:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010368:	429a      	cmp	r2, r3
 801036a:	da67      	bge.n	801043c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x264>
      uint8_t right_shift = 31 - headroom_plus_one;
 801036c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010370:	f1c3 031f 	rsb	r3, r3, #31
 8010374:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      int64_t round = 1 << (right_shift - 1);
 8010378:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801037c:	3b01      	subs	r3, #1
 801037e:	2201      	movs	r2, #1
 8010380:	fa02 f303 	lsl.w	r3, r2, r3
 8010384:	461a      	mov	r2, r3
 8010386:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801038a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801038e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010390:	005b      	lsls	r3, r3, #1
 8010392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010394:	4413      	add	r3, r2
 8010396:	f9b3 3000 	ldrsh.w	r3, [r3]
 801039a:	b218      	sxth	r0, r3
 801039c:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80103a0:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80103a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80103a8:	fb02 fc01 	mul.w	ip, r2, r1
 80103ac:	fb00 f603 	mul.w	r6, r0, r3
 80103b0:	4466      	add	r6, ip
 80103b2:	fba0 2302 	umull	r2, r3, r0, r2
 80103b6:	18f1      	adds	r1, r6, r3
 80103b8:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80103ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80103be:	eb12 0b00 	adds.w	fp, r2, r0
 80103c2:	eb43 0c01 	adc.w	ip, r3, r1
                        round) >>
 80103c6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80103ca:	f1c1 0620 	rsb	r6, r1, #32
 80103ce:	f1b1 0020 	subs.w	r0, r1, #32
 80103d2:	fa2b f801 	lsr.w	r8, fp, r1
 80103d6:	fa0c f606 	lsl.w	r6, ip, r6
 80103da:	ea48 0806 	orr.w	r8, r8, r6
 80103de:	d403      	bmi.n	80103e8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x210>
 80103e0:	fa4c f000 	asr.w	r0, ip, r0
 80103e4:	ea48 0800 	orr.w	r8, r8, r0
 80103e8:	fa4c f901 	asr.w	r9, ip, r1
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80103ec:	4643      	mov	r3, r8
 80103ee:	617b      	str	r3, [r7, #20]
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
                   static_cast<int32_t>(32767)));
 80103f0:	2300      	movs	r3, #0
 80103f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80103f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80103f8:	f107 0314 	add.w	r3, r7, #20
 80103fc:	4611      	mov	r1, r2
 80103fe:	4618      	mov	r0, r3
 8010400:	f7f0 ff22 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 8010404:	4602      	mov	r2, r0
 8010406:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801040a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801040c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010410:	4619      	mov	r1, r3
 8010412:	4610      	mov	r0, r2
 8010414:	f7f2 fa12 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 8010418:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 801041a:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801041c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801041e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010420:	fb02 f203 	mul.w	r2, r2, r3
 8010424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010426:	4413      	add	r3, r2
 8010428:	005b      	lsls	r3, r3, #1
 801042a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801042e:	4413      	add	r3, r2
 8010430:	b20a      	sxth	r2, r1
 8010432:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 8010434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010436:	3301      	adds	r3, #1
 8010438:	65fb      	str	r3, [r7, #92]	; 0x5c
 801043a:	e793      	b.n	8010364 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x18c>
  for (int i = 0; i < outer_size; ++i) {
 801043c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801043e:	3301      	adds	r3, #1
 8010440:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010442:	e6e6      	b.n	8010212 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 8010444:	bf00      	nop
 8010446:	3770      	adds	r7, #112	; 0x70
 8010448:	46bd      	mov	sp, r7
 801044a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 801044e:	bf00      	nop
 8010450:	ffff8000 	.word	0xffff8000
 8010454:	00000000 	.word	0x00000000

08010458 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8010458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801045c:	b091      	sub	sp, #68	; 0x44
 801045e:	af06      	add	r7, sp, #24
 8010460:	60f8      	str	r0, [r7, #12]
 8010462:	60b9      	str	r1, [r7, #8]
 8010464:	607a      	str	r2, [r7, #4]
 8010466:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8 ||
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	2b03      	cmp	r3, #3
 801046e:	d008      	beq.n	8010482 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a>
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	2b09      	cmp	r3, #9
 8010476:	d004      	beq.n	8010482 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a>
      input->type == kTfLiteInt16) {
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8 ||
 801047c:	2b07      	cmp	r3, #7
 801047e:	f040 81f1 	bne.w	8010864 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x40c>
    if (input->type == kTfLiteUInt8) {
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	2b03      	cmp	r3, #3
 8010488:	d134      	bne.n	80104f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9c>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	2b03      	cmp	r3, #3
 8010490:	d019      	beq.n	80104c6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x6e>
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	695c      	ldr	r4, [r3, #20]
 8010496:	68fd      	ldr	r5, [r7, #12]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	4618      	mov	r0, r3
 801049e:	f7f0 fe19 	bl	80010d4 <TfLiteTypeGetName>
 80104a2:	4606      	mov	r6, r0
 80104a4:	2003      	movs	r0, #3
 80104a6:	f7f0 fe15 	bl	80010d4 <TfLiteTypeGetName>
 80104aa:	4603      	mov	r3, r0
 80104ac:	9303      	str	r3, [sp, #12]
 80104ae:	9602      	str	r6, [sp, #8]
 80104b0:	4ba1      	ldr	r3, [pc, #644]	; (8010738 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 80104b2:	9301      	str	r3, [sp, #4]
 80104b4:	4ba1      	ldr	r3, [pc, #644]	; (801073c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 80104b6:	9300      	str	r3, [sp, #0]
 80104b8:	2329      	movs	r3, #41	; 0x29
 80104ba:	4aa1      	ldr	r2, [pc, #644]	; (8010740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 80104bc:	49a1      	ldr	r1, [pc, #644]	; (8010744 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 80104be:	4628      	mov	r0, r5
 80104c0:	47a0      	blx	r4
 80104c2:	2301      	movs	r3, #1
 80104c4:	e215      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	691b      	ldr	r3, [r3, #16]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	f000 8164 	beq.w	8010798 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	695c      	ldr	r4, [r3, #20]
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	691b      	ldr	r3, [r3, #16]
 80104da:	2200      	movs	r2, #0
 80104dc:	9203      	str	r2, [sp, #12]
 80104de:	9302      	str	r3, [sp, #8]
 80104e0:	4b99      	ldr	r3, [pc, #612]	; (8010748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 80104e2:	9301      	str	r3, [sp, #4]
 80104e4:	4b99      	ldr	r3, [pc, #612]	; (801074c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 80104e6:	9300      	str	r3, [sp, #0]
 80104e8:	232a      	movs	r3, #42	; 0x2a
 80104ea:	4a95      	ldr	r2, [pc, #596]	; (8010740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 80104ec:	4998      	ldr	r1, [pc, #608]	; (8010750 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 80104ee:	47a0      	blx	r4
 80104f0:	2301      	movs	r3, #1
 80104f2:	e1fe      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
    } else if (input->type == kTfLiteInt16) {
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	2b07      	cmp	r3, #7
 80104fa:	d157      	bne.n	80105ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x154>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	691b      	ldr	r3, [r3, #16]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d011      	beq.n	8010528 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd0>
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	695c      	ldr	r4, [r3, #20]
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	691b      	ldr	r3, [r3, #16]
 801050e:	2200      	movs	r2, #0
 8010510:	9203      	str	r2, [sp, #12]
 8010512:	9302      	str	r3, [sp, #8]
 8010514:	4b8c      	ldr	r3, [pc, #560]	; (8010748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8010516:	9301      	str	r3, [sp, #4]
 8010518:	4b8c      	ldr	r3, [pc, #560]	; (801074c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801051a:	9300      	str	r3, [sp, #0]
 801051c:	232c      	movs	r3, #44	; 0x2c
 801051e:	4a88      	ldr	r2, [pc, #544]	; (8010740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8010520:	498b      	ldr	r1, [pc, #556]	; (8010750 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8010522:	47a0      	blx	r4
 8010524:	2301      	movs	r3, #1
 8010526:	e1e4      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	edd3 7a03 	vldr	s15, [r3, #12]
 801052e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8010754 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 8010532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801053a:	dd07      	ble.n	801054c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	edd3 7a03 	vldr	s15, [r3, #12]
 8010542:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8010754 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 8010546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801054a:	e006      	b.n	801055a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x102>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	edd3 7a03 	vldr	s15, [r3, #12]
 8010552:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8010754 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 8010556:	ee77 7a67 	vsub.f32	s15, s14, s15
 801055a:	edc7 7a08 	vstr	s15, [r7, #32]
 801055e:	edd7 7a08 	vldr	s15, [r7, #32]
 8010562:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8010758 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8010566:	eef4 7ac7 	vcmpe.f32	s15, s14
 801056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056e:	f340 8113 	ble.w	8010798 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	695d      	ldr	r5, [r3, #20]
 8010576:	68fe      	ldr	r6, [r7, #12]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	4618      	mov	r0, r3
 801057e:	f7ef fff3 	bl	8000568 <__aeabi_f2d>
 8010582:	460a      	mov	r2, r1
 8010584:	4601      	mov	r1, r0
 8010586:	f04f 0300 	mov.w	r3, #0
 801058a:	f04f 547c 	mov.w	r4, #1056964608	; 0x3f000000
 801058e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010592:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010596:	4b71      	ldr	r3, [pc, #452]	; (801075c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
 8010598:	9301      	str	r3, [sp, #4]
 801059a:	4b71      	ldr	r3, [pc, #452]	; (8010760 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 801059c:	9300      	str	r3, [sp, #0]
 801059e:	232e      	movs	r3, #46	; 0x2e
 80105a0:	4a67      	ldr	r2, [pc, #412]	; (8010740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 80105a2:	4970      	ldr	r1, [pc, #448]	; (8010764 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 80105a4:	4630      	mov	r0, r6
 80105a6:	47a8      	blx	r5
 80105a8:	2301      	movs	r3, #1
 80105aa:	e1a2      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	2b09      	cmp	r3, #9
 80105b2:	d019      	beq.n	80105e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x190>
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	695c      	ldr	r4, [r3, #20]
 80105b8:	68fd      	ldr	r5, [r7, #12]
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	4618      	mov	r0, r3
 80105c0:	f7f0 fd88 	bl	80010d4 <TfLiteTypeGetName>
 80105c4:	4606      	mov	r6, r0
 80105c6:	2009      	movs	r0, #9
 80105c8:	f7f0 fd84 	bl	80010d4 <TfLiteTypeGetName>
 80105cc:	4603      	mov	r3, r0
 80105ce:	9303      	str	r3, [sp, #12]
 80105d0:	9602      	str	r6, [sp, #8]
 80105d2:	4b65      	ldr	r3, [pc, #404]	; (8010768 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 80105d4:	9301      	str	r3, [sp, #4]
 80105d6:	4b65      	ldr	r3, [pc, #404]	; (801076c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 80105d8:	9300      	str	r3, [sp, #0]
 80105da:	2330      	movs	r3, #48	; 0x30
 80105dc:	4a58      	ldr	r2, [pc, #352]	; (8010740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 80105de:	4959      	ldr	r1, [pc, #356]	; (8010744 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 80105e0:	4628      	mov	r0, r5
 80105e2:	47a0      	blx	r4
 80105e4:	2301      	movs	r3, #1
 80105e6:	e184      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
      if (output->type == kTfLiteInt16) {
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	2b07      	cmp	r3, #7
 80105ee:	d157      	bne.n	80106a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x248>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	691b      	ldr	r3, [r3, #16]
 80105f4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80105f8:	d011      	beq.n	801061e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	695c      	ldr	r4, [r3, #20]
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	4a5a      	ldr	r2, [pc, #360]	; (8010770 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
 8010606:	9203      	str	r2, [sp, #12]
 8010608:	9302      	str	r3, [sp, #8]
 801060a:	4b5a      	ldr	r3, [pc, #360]	; (8010774 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 801060c:	9301      	str	r3, [sp, #4]
 801060e:	4b4f      	ldr	r3, [pc, #316]	; (801074c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8010610:	9300      	str	r3, [sp, #0]
 8010612:	2332      	movs	r3, #50	; 0x32
 8010614:	4a4a      	ldr	r2, [pc, #296]	; (8010740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8010616:	494e      	ldr	r1, [pc, #312]	; (8010750 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8010618:	47a0      	blx	r4
 801061a:	2301      	movs	r3, #1
 801061c:	e169      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	edd3 7a03 	vldr	s15, [r3, #12]
 8010624:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8010778 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 8010628:	eef4 7ac7 	vcmpe.f32	s15, s14
 801062c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010630:	dd07      	ble.n	8010642 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ea>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	edd3 7a03 	vldr	s15, [r3, #12]
 8010638:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8010778 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 801063c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010640:	e006      	b.n	8010650 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1f8>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	edd3 7a03 	vldr	s15, [r3, #12]
 8010648:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8010778 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 801064c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010650:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8010654:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010658:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801077c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
 801065c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010664:	f340 8098 	ble.w	8010798 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	695d      	ldr	r5, [r3, #20]
 801066c:	68fe      	ldr	r6, [r7, #12]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	4618      	mov	r0, r3
 8010674:	f7ef ff78 	bl	8000568 <__aeabi_f2d>
 8010678:	460a      	mov	r2, r1
 801067a:	4601      	mov	r1, r0
 801067c:	f04f 0300 	mov.w	r3, #0
 8010680:	4c3f      	ldr	r4, [pc, #252]	; (8010780 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
 8010682:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010686:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801068a:	4b3e      	ldr	r3, [pc, #248]	; (8010784 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
 801068c:	9301      	str	r3, [sp, #4]
 801068e:	4b34      	ldr	r3, [pc, #208]	; (8010760 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8010690:	9300      	str	r3, [sp, #0]
 8010692:	2334      	movs	r3, #52	; 0x34
 8010694:	4a2a      	ldr	r2, [pc, #168]	; (8010740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8010696:	4933      	ldr	r1, [pc, #204]	; (8010764 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 8010698:	4630      	mov	r0, r6
 801069a:	47a8      	blx	r5
 801069c:	2301      	movs	r3, #1
 801069e:	e128      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	2b09      	cmp	r3, #9
 80106a6:	d019      	beq.n	80106dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x284>
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	695c      	ldr	r4, [r3, #20]
 80106ac:	68fd      	ldr	r5, [r7, #12]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7f0 fd0e 	bl	80010d4 <TfLiteTypeGetName>
 80106b8:	4606      	mov	r6, r0
 80106ba:	2009      	movs	r0, #9
 80106bc:	f7f0 fd0a 	bl	80010d4 <TfLiteTypeGetName>
 80106c0:	4603      	mov	r3, r0
 80106c2:	9303      	str	r3, [sp, #12]
 80106c4:	9602      	str	r6, [sp, #8]
 80106c6:	4b28      	ldr	r3, [pc, #160]	; (8010768 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 80106c8:	9301      	str	r3, [sp, #4]
 80106ca:	4b1c      	ldr	r3, [pc, #112]	; (801073c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	2336      	movs	r3, #54	; 0x36
 80106d0:	4a1b      	ldr	r2, [pc, #108]	; (8010740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 80106d2:	491c      	ldr	r1, [pc, #112]	; (8010744 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 80106d4:	4628      	mov	r0, r5
 80106d6:	47a0      	blx	r4
 80106d8:	2301      	movs	r3, #1
 80106da:	e10a      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	691b      	ldr	r3, [r3, #16]
 80106e0:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80106e4:	d012      	beq.n	801070c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	695c      	ldr	r4, [r3, #20]
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	691b      	ldr	r3, [r3, #16]
 80106f0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80106f4:	9203      	str	r2, [sp, #12]
 80106f6:	9302      	str	r3, [sp, #8]
 80106f8:	4b23      	ldr	r3, [pc, #140]	; (8010788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
 80106fa:	9301      	str	r3, [sp, #4]
 80106fc:	4b13      	ldr	r3, [pc, #76]	; (801074c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	2337      	movs	r3, #55	; 0x37
 8010702:	4a0f      	ldr	r2, [pc, #60]	; (8010740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8010704:	4912      	ldr	r1, [pc, #72]	; (8010750 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8010706:	47a0      	blx	r4
 8010708:	2301      	movs	r3, #1
 801070a:	e0f2      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	edd3 7a03 	vldr	s15, [r3, #12]
 8010712:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 801078c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x334>
 8010716:	eef4 7a47 	vcmp.f32	s15, s14
 801071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071e:	d03b      	beq.n	8010798 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	695c      	ldr	r4, [r3, #20]
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	4b1a      	ldr	r3, [pc, #104]	; (8010790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x338>)
 8010728:	9300      	str	r3, [sp, #0]
 801072a:	2338      	movs	r3, #56	; 0x38
 801072c:	4a04      	ldr	r2, [pc, #16]	; (8010740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801072e:	4919      	ldr	r1, [pc, #100]	; (8010794 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x33c>)
 8010730:	47a0      	blx	r4
 8010732:	2301      	movs	r3, #1
 8010734:	e0dd      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
 8010736:	bf00      	nop
 8010738:	0801ebbc 	.word	0x0801ebbc
 801073c:	0801ebcc 	.word	0x0801ebcc
 8010740:	0801eb88 	.word	0x0801eb88
 8010744:	0801eba0 	.word	0x0801eba0
 8010748:	0801ebf8 	.word	0x0801ebf8
 801074c:	0801ebfc 	.word	0x0801ebfc
 8010750:	0801ebdc 	.word	0x0801ebdc
 8010754:	38000000 	.word	0x38000000
 8010758:	3303126f 	.word	0x3303126f
 801075c:	0801ec38 	.word	0x0801ec38
 8010760:	0801ec44 	.word	0x0801ec44
 8010764:	0801ec18 	.word	0x0801ec18
 8010768:	0801ec5c 	.word	0x0801ec5c
 801076c:	0801ec68 	.word	0x0801ec68
 8010770:	ffff8000 	.word	0xffff8000
 8010774:	0801ec74 	.word	0x0801ec74
 8010778:	37800000 	.word	0x37800000
 801077c:	3283126f 	.word	0x3283126f
 8010780:	3ef00000 	.word	0x3ef00000
 8010784:	0801ec7c 	.word	0x0801ec7c
 8010788:	0801ec88 	.word	0x0801ec88
 801078c:	3b800000 	.word	0x3b800000
 8010790:	0801eca8 	.word	0x0801eca8
 8010794:	0801ec90 	.word	0x0801ec90
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	2b07      	cmp	r3, #7
 801079e:	d12c      	bne.n	80107fa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a2>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	68db      	ldr	r3, [r3, #12]
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7ef fedf 	bl	8000568 <__aeabi_f2d>
 80107aa:	4604      	mov	r4, r0
 80107ac:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7ef fed8 	bl	8000568 <__aeabi_f2d>
 80107b8:	4602      	mov	r2, r0
 80107ba:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 80107bc:	4620      	mov	r0, r4
 80107be:	4629      	mov	r1, r5
 80107c0:	f7ef ff2a 	bl	8000618 <__aeabi_dmul>
 80107c4:	4603      	mov	r3, r0
 80107c6:	460c      	mov	r4, r1
 80107c8:	4618      	mov	r0, r3
 80107ca:	4621      	mov	r1, r4
      double input_scale_beta_rescale =
 80107cc:	a351      	add	r3, pc, #324	; (adr r3, 8010914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4bc>)
 80107ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d2:	f7f0 f84b 	bl	800086c <__aeabi_ddiv>
 80107d6:	4603      	mov	r3, r0
 80107d8:	460c      	mov	r4, r1
 80107da:	e9c7 3406 	strd	r3, r4, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 80107de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107e0:	3308      	adds	r3, #8
 80107e2:	f107 0214 	add.w	r2, r7, #20
 80107e6:	4611      	mov	r1, r2
 80107e8:	4618      	mov	r0, r3
 80107ea:	ed97 0b06 	vldr	d0, [r7, #24]
 80107ee:	f7fe fc45 	bl	800f07c <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 80107f2:	697a      	ldr	r2, [r7, #20]
 80107f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107f6:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 80107f8:	e07a      	b.n	80108f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x498>
          static_cast<double>(params->beta),
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 80107fe:	4618      	mov	r0, r3
 8010800:	f7ef feb2 	bl	8000568 <__aeabi_f2d>
 8010804:	4680      	mov	r8, r0
 8010806:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 801080c:	4618      	mov	r0, r3
 801080e:	f7ef feab 	bl	8000568 <__aeabi_f2d>
 8010812:	4682      	mov	sl, r0
 8010814:	468b      	mov	fp, r1
 8010816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010818:	3308      	adds	r3, #8
 801081a:	f107 0210 	add.w	r2, r7, #16
 801081e:	4619      	mov	r1, r3
 8010820:	2005      	movs	r0, #5
 8010822:	ec4b ab11 	vmov	d1, sl, fp
 8010826:	ec49 8b10 	vmov	d0, r8, r9
 801082a:	f7fe fcf9 	bl	800f220 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 801082e:	693a      	ldr	r2, [r7, #16]
 8010830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010832:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 8010834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010836:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8010838:	221f      	movs	r2, #31
 801083a:	4619      	mov	r1, r3
 801083c:	2005      	movs	r0, #5
 801083e:	f7fe fd37 	bl	800f2b0 <_ZN6tflite20CalculateInputRadiusEiii>
 8010842:	4603      	mov	r3, r0
 8010844:	4618      	mov	r0, r3
 8010846:	f7ef fe7d 	bl	8000544 <__aeabi_i2d>
 801084a:	4602      	mov	r2, r0
 801084c:	460b      	mov	r3, r1
 801084e:	4614      	mov	r4, r2
 8010850:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 8010854:	4620      	mov	r0, r4
 8010856:	4629      	mov	r1, r5
 8010858:	f7f0 f98e 	bl	8000b78 <__aeabi_d2iz>
 801085c:	4602      	mov	r2, r0
 801085e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010860:	619a      	str	r2, [r3, #24]
    }
 8010862:	e045      	b.n	80108f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x498>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	2b01      	cmp	r3, #1
 801086a:	d019      	beq.n	80108a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x448>
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	695c      	ldr	r4, [r3, #20]
 8010870:	68fd      	ldr	r5, [r7, #12]
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	4618      	mov	r0, r3
 8010878:	f7f0 fc2c 	bl	80010d4 <TfLiteTypeGetName>
 801087c:	4606      	mov	r6, r0
 801087e:	2001      	movs	r0, #1
 8010880:	f7f0 fc28 	bl	80010d4 <TfLiteTypeGetName>
 8010884:	4603      	mov	r3, r0
 8010886:	9303      	str	r3, [sp, #12]
 8010888:	9602      	str	r6, [sp, #8]
 801088a:	4b1d      	ldr	r3, [pc, #116]	; (8010900 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4a8>)
 801088c:	9301      	str	r3, [sp, #4]
 801088e:	4b1d      	ldr	r3, [pc, #116]	; (8010904 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4ac>)
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	2355      	movs	r3, #85	; 0x55
 8010894:	4a1c      	ldr	r2, [pc, #112]	; (8010908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b0>)
 8010896:	491d      	ldr	r1, [pc, #116]	; (801090c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b4>)
 8010898:	4628      	mov	r0, r5
 801089a:	47a0      	blx	r4
 801089c:	2301      	movs	r3, #1
 801089e:	e028      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d019      	beq.n	80108dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x484>
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	695c      	ldr	r4, [r3, #20]
 80108ac:	68fd      	ldr	r5, [r7, #12]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7f0 fc0e 	bl	80010d4 <TfLiteTypeGetName>
 80108b8:	4606      	mov	r6, r0
 80108ba:	2001      	movs	r0, #1
 80108bc:	f7f0 fc0a 	bl	80010d4 <TfLiteTypeGetName>
 80108c0:	4603      	mov	r3, r0
 80108c2:	9303      	str	r3, [sp, #12]
 80108c4:	9602      	str	r6, [sp, #8]
 80108c6:	4b0e      	ldr	r3, [pc, #56]	; (8010900 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4a8>)
 80108c8:	9301      	str	r3, [sp, #4]
 80108ca:	4b11      	ldr	r3, [pc, #68]	; (8010910 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b8>)
 80108cc:	9300      	str	r3, [sp, #0]
 80108ce:	2356      	movs	r3, #86	; 0x56
 80108d0:	4a0d      	ldr	r2, [pc, #52]	; (8010908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b0>)
 80108d2:	490e      	ldr	r1, [pc, #56]	; (801090c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4b4>)
 80108d4:	4628      	mov	r0, r5
 80108d6:	47a0      	blx	r4
 80108d8:	2301      	movs	r3, #1
 80108da:	e00a      	b.n	80108f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x49a>
    op_data->beta = static_cast<double>(params->beta);
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ef fe41 	bl	8000568 <__aeabi_f2d>
 80108e6:	4603      	mov	r3, r0
 80108e8:	460c      	mov	r4, r1
 80108ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108ec:	e9c2 3400 	strd	r3, r4, [r2]
  }
  return kTfLiteOk;
 80108f0:	2300      	movs	r3, #0
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	372c      	adds	r7, #44	; 0x2c
 80108f6:	46bd      	mov	sp, r7
 80108f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108fc:	f3af 8000 	nop.w
 8010900:	0801eccc 	.word	0x0801eccc
 8010904:	0801ec68 	.word	0x0801ec68
 8010908:	0801eb88 	.word	0x0801eb88
 801090c:	0801eba0 	.word	0x0801eba0
 8010910:	0801ebcc 	.word	0x0801ebcc
 8010914:	00140014 	.word	0x00140014
 8010918:	3f240014 	.word	0x3f240014

0801091c <_ZN6tflite12_GLOBAL__N_112SoftmaxFloatEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                  const SoftmaxParams& op_data) {
 801091c:	b590      	push	{r4, r7, lr}
 801091e:	b093      	sub	sp, #76	; 0x4c
 8010920:	af02      	add	r7, sp, #8
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 8010928:	f107 0310 	add.w	r3, r7, #16
 801092c:	68f9      	ldr	r1, [r7, #12]
 801092e:	4618      	mov	r0, r3
 8010930:	f7f6 ff05 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8010934:	68f8      	ldr	r0, [r7, #12]
 8010936:	f7f2 fa55 	bl	8002de4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801093a:	4604      	mov	r4, r0
                                 tflite::micro::GetTensorData<float>(input),
                                 tflite::micro::GetTensorShape(output),
 801093c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010940:	68b9      	ldr	r1, [r7, #8]
 8010942:	4618      	mov	r0, r3
 8010944:	f7f6 fefb 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 8010948:	68b8      	ldr	r0, [r7, #8]
 801094a:	f7f2 fa5a 	bl	8002e02 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801094e:	4602      	mov	r2, r0
 8010950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010954:	f107 0110 	add.w	r1, r7, #16
 8010958:	9200      	str	r2, [sp, #0]
 801095a:	4622      	mov	r2, r4
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f7ff fb3e 	bl	800ffde <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                                 tflite::micro::GetTensorShape(output),
 8010962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010966:	4618      	mov	r0, r3
 8010968:	f7f0 fcf2 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 801096c:	f107 0310 	add.w	r3, r7, #16
 8010970:	4618      	mov	r0, r3
 8010972:	f7f0 fced 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
                                 tflite::micro::GetTensorData<float>(output));
}
 8010976:	bf00      	nop
 8010978:	3744      	adds	r7, #68	; 0x44
 801097a:	46bd      	mov	sp, r7
 801097c:	bd90      	pop	{r4, r7, pc}

0801097e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 801097e:	b590      	push	{r4, r7, lr}
 8010980:	b0b7      	sub	sp, #220	; 0xdc
 8010982:	af02      	add	r7, sp, #8
 8010984:	60f8      	str	r0, [r7, #12]
 8010986:	60b9      	str	r1, [r7, #8]
 8010988:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	7a1b      	ldrb	r3, [r3, #8]
 801098e:	2b03      	cmp	r3, #3
 8010990:	d127      	bne.n	80109e2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 8010992:	f107 0310 	add.w	r3, r7, #16
 8010996:	68f9      	ldr	r1, [r7, #12]
 8010998:	4618      	mov	r0, r3
 801099a:	f7f6 fed0 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f7f2 fa6f 	bl	8002e82 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80109a4:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 80109a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80109aa:	68b9      	ldr	r1, [r7, #8]
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7f6 fec6 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 80109b2:	68b8      	ldr	r0, [r7, #8]
 80109b4:	f7f2 fa74 	bl	8002ea0 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80109b8:	4602      	mov	r2, r0
 80109ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80109be:	f107 0110 	add.w	r1, r7, #16
 80109c2:	9200      	str	r2, [sp, #0]
 80109c4:	4622      	mov	r2, r4
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 fbb4 	bl	8011134 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 80109cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7f0 fcbd 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 80109d6:	f107 0310 	add.w	r3, r7, #16
 80109da:	4618      	mov	r0, r3
 80109dc:	f7f0 fcb8 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 80109e0:	e07e      	b.n	8010ae0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x162>
  } else if (input->type == kTfLiteInt8) {
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	7a1b      	ldrb	r3, [r3, #8]
 80109e6:	2b09      	cmp	r3, #9
 80109e8:	d153      	bne.n	8010a92 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x114>
    if (output->type == kTfLiteInt16) {
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	7a1b      	ldrb	r3, [r3, #8]
 80109ee:	2b07      	cmp	r3, #7
 80109f0:	d127      	bne.n	8010a42 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xc4>
          op_data, tflite::micro::GetTensorShape(input),
 80109f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80109f6:	68f9      	ldr	r1, [r7, #12]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7f6 fea0 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f7f2 fa10 	bl	8002e24 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8010a04:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 8010a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a0a:	68b9      	ldr	r1, [r7, #8]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7f6 fe96 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8010a12:	68b8      	ldr	r0, [r7, #8]
 8010a14:	f7f6 fa2e 	bl	8006e74 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8010a18:	4602      	mov	r2, r0
 8010a1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a1e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010a22:	9200      	str	r2, [sp, #0]
 8010a24:	4622      	mov	r2, r4
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 fc9f 	bl	801136a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 8010a2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7f0 fc8d 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8010a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7f0 fc88 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8010a40:	e04e      	b.n	8010ae0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x162>
          op_data, tflite::micro::GetTensorShape(input),
 8010a42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010a46:	68f9      	ldr	r1, [r7, #12]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7f6 fe78 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	f7f2 f9e8 	bl	8002e24 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8010a54:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 8010a56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010a5a:	68b9      	ldr	r1, [r7, #8]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7f6 fe6e 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8010a62:	68b8      	ldr	r0, [r7, #8]
 8010a64:	f7f2 f9fc 	bl	8002e60 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8010a68:	4602      	mov	r2, r0
 8010a6a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010a6e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8010a72:	9200      	str	r2, [sp, #0]
 8010a74:	4622      	mov	r2, r4
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 fd95 	bl	80115a6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 8010a7c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7f0 fc65 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8010a86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7f0 fc60 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8010a90:	e026      	b.n	8010ae0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x162>
        op_data, tflite::micro::GetTensorShape(input),
 8010a92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010a96:	68f9      	ldr	r1, [r7, #12]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7f6 fe50 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8010a9e:	68f8      	ldr	r0, [r7, #12]
 8010aa0:	f000 fe9f 	bl	80117e2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8010aa4:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 8010aa6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010aaa:	68b9      	ldr	r1, [r7, #8]
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7f6 fe46 	bl	800773e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8010ab2:	68b8      	ldr	r0, [r7, #8]
 8010ab4:	f7f6 f9de 	bl	8006e74 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8010ab8:	4602      	mov	r2, r0
 8010aba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010abe:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8010ac2:	9200      	str	r2, [sp, #0]
 8010ac4:	4622      	mov	r2, r4
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f7ff fb86 	bl	80101d8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8010acc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7f0 fc3d 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8010ad6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7f0 fc38 	bl	8001350 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8010ae0:	bf00      	nop
 8010ae2:	37d4      	adds	r7, #212	; 0xd4
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd90      	pop	{r4, r7, pc}

08010ae8 <_ZN6tflite12_GLOBAL__N_111SoftmaxInitEP13TfLiteContextPKcj>:

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b084      	sub	sp, #16
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d101      	bne.n	8010b00 <_ZN6tflite12_GLOBAL__N_111SoftmaxInitEP13TfLiteContextPKcj+0x18>
 8010afc:	f008 f90b 	bl	8018d16 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b04:	2138      	movs	r1, #56	; 0x38
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	4798      	blx	r3
 8010b0a:	4603      	mov	r3, r0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3710      	adds	r7, #16
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	ed87 0a00 	vstr	s0, [r7]
 8010b20:	ed97 0a00 	vldr	s0, [r7]
 8010b24:	f7ff f808 	bl	800fb38 <_ZSt3expf>
 8010b28:	eef0 7a40 	vmov.f32	s15, s0
 8010b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b082      	sub	sp, #8
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	ed87 0a01 	vstr	s0, [r7, #4]
 8010b40:	ed97 0a01 	vldr	s0, [r7, #4]
 8010b44:	2000      	movs	r0, #0
 8010b46:	f7ff ffe5 	bl	8010b14 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 8010b4a:	eef0 7a40 	vmov.f32	s15, s0
 8010b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	4b03      	ldr	r3, [pc, #12]	; (8010b70 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 8010b62:	4618      	mov	r0, r3
 8010b64:	370c      	adds	r7, #12
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr
 8010b6e:	bf00      	nop
 8010b70:	08010b37 	.word	0x08010b37

08010b74 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8010b74:	b480      	push	{r7}
 8010b76:	b083      	sub	sp, #12
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	ed87 0a00 	vstr	s0, [r7]
 8010b80:	edd7 7a00 	vldr	s15, [r7]
 8010b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010b88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010b90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010b94:	eef0 7a66 	vmov.f32	s15, s13
 8010b98:	eeb0 0a67 	vmov.f32	s0, s15
 8010b9c:	370c      	adds	r7, #12
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba4:	4770      	bx	lr

08010ba6 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b082      	sub	sp, #8
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8010bb0:	ed97 0a01 	vldr	s0, [r7, #4]
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	f7ff ffdd 	bl	8010b74 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 8010bba:	eef0 7a40 	vmov.f32	s15, s0
 8010bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8010bc2:	3708      	adds	r7, #8
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	4b03      	ldr	r3, [pc, #12]	; (8010be0 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	370c      	adds	r7, #12
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr
 8010bde:	bf00      	nop
 8010be0:	08010ba7 	.word	0x08010ba7

08010be4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8010be4:	b5b0      	push	{r4, r5, r7, lr}
 8010be6:	b08e      	sub	sp, #56	; 0x38
 8010be8:	af04      	add	r7, sp, #16
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8010bee:	6838      	ldr	r0, [r7, #0]
 8010bf0:	f7f1 f868 	bl	8001cc4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	bf14      	ite	ne
 8010bfa:	2301      	movne	r3, #1
 8010bfc:	2300      	moveq	r3, #0
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d014      	beq.n	8010c2e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	695c      	ldr	r4, [r3, #20]
 8010c08:	687d      	ldr	r5, [r7, #4]
 8010c0a:	6838      	ldr	r0, [r7, #0]
 8010c0c:	f7f1 f85a 	bl	8001cc4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8010c10:	4602      	mov	r2, r0
 8010c12:	2301      	movs	r3, #1
 8010c14:	9303      	str	r3, [sp, #12]
 8010c16:	9202      	str	r2, [sp, #8]
 8010c18:	4b80      	ldr	r3, [pc, #512]	; (8010e1c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8010c1a:	9301      	str	r3, [sp, #4]
 8010c1c:	4b80      	ldr	r3, [pc, #512]	; (8010e20 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	238a      	movs	r3, #138	; 0x8a
 8010c22:	4a80      	ldr	r2, [pc, #512]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010c24:	4980      	ldr	r1, [pc, #512]	; (8010e28 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8010c26:	4628      	mov	r0, r5
 8010c28:	47a0      	blx	r4
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e14e      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8010c2e:	6838      	ldr	r0, [r7, #0]
 8010c30:	f7fe fbbb 	bl	800f3aa <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8010c34:	4603      	mov	r3, r0
 8010c36:	2b01      	cmp	r3, #1
 8010c38:	bf14      	ite	ne
 8010c3a:	2301      	movne	r3, #1
 8010c3c:	2300      	moveq	r3, #0
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d014      	beq.n	8010c6e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	695c      	ldr	r4, [r3, #20]
 8010c48:	687d      	ldr	r5, [r7, #4]
 8010c4a:	6838      	ldr	r0, [r7, #0]
 8010c4c:	f7fe fbad 	bl	800f3aa <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8010c50:	4602      	mov	r2, r0
 8010c52:	2301      	movs	r3, #1
 8010c54:	9303      	str	r3, [sp, #12]
 8010c56:	9202      	str	r2, [sp, #8]
 8010c58:	4b70      	ldr	r3, [pc, #448]	; (8010e1c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8010c5a:	9301      	str	r3, [sp, #4]
 8010c5c:	4b73      	ldr	r3, [pc, #460]	; (8010e2c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	238b      	movs	r3, #139	; 0x8b
 8010c62:	4a70      	ldr	r2, [pc, #448]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010c64:	4970      	ldr	r1, [pc, #448]	; (8010e28 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8010c66:	4628      	mov	r0, r5
 8010c68:	47a0      	blx	r4
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e12e      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2200      	movs	r2, #0
 8010c72:	6839      	ldr	r1, [r7, #0]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7f6 fe76 	bl	8007966 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010c7a:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d10a      	bne.n	8010c98 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	695c      	ldr	r4, [r3, #20]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	4b69      	ldr	r3, [pc, #420]	; (8010e30 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8010c8a:	9300      	str	r3, [sp, #0]
 8010c8c:	238d      	movs	r3, #141	; 0x8d
 8010c8e:	4a65      	ldr	r2, [pc, #404]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010c90:	4968      	ldr	r1, [pc, #416]	; (8010e34 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8010c92:	47a0      	blx	r4
 8010c94:	2301      	movs	r3, #1
 8010c96:	e119      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8010c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c9a:	f7f6 fd96 	bl	80077ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	bfd4      	ite	le
 8010ca4:	2301      	movle	r3, #1
 8010ca6:	2300      	movgt	r3, #0
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00a      	beq.n	8010cc4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	695c      	ldr	r4, [r3, #20]
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	4b60      	ldr	r3, [pc, #384]	; (8010e38 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8010cb6:	9300      	str	r3, [sp, #0]
 8010cb8:	238e      	movs	r3, #142	; 0x8e
 8010cba:	4a5a      	ldr	r2, [pc, #360]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010cbc:	495d      	ldr	r1, [pc, #372]	; (8010e34 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8010cbe:	47a0      	blx	r4
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	e103      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TfLiteTensor* output = GetOutput(context, node, 0);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	6839      	ldr	r1, [r7, #0]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7f6 fe5b 	bl	8007986 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8010cd0:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d10a      	bne.n	8010cee <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10a>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	695c      	ldr	r4, [r3, #20]
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	4b57      	ldr	r3, [pc, #348]	; (8010e3c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8010ce0:	9300      	str	r3, [sp, #0]
 8010ce2:	2390      	movs	r3, #144	; 0x90
 8010ce4:	4a4f      	ldr	r2, [pc, #316]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010ce6:	4953      	ldr	r1, [pc, #332]	; (8010e34 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8010ce8:	47a0      	blx	r4
 8010cea:	2301      	movs	r3, #1
 8010cec:	e0ee      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	691b      	ldr	r3, [r3, #16]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d10a      	bne.n	8010d0c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x128>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	695c      	ldr	r4, [r3, #20]
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	4b50      	ldr	r3, [pc, #320]	; (8010e40 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8010cfe:	9300      	str	r3, [sp, #0]
 8010d00:	2392      	movs	r3, #146	; 0x92
 8010d02:	4a48      	ldr	r2, [pc, #288]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010d04:	494b      	ldr	r1, [pc, #300]	; (8010e34 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8010d06:	47a0      	blx	r4
 8010d08:	2301      	movs	r3, #1
 8010d0a:	e0df      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	691b      	ldr	r3, [r3, #16]
 8010d10:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 8010d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d14:	781b      	ldrb	r3, [r3, #0]
 8010d16:	2b07      	cmp	r3, #7
 8010d18:	d131      	bne.n	8010d7e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19a>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d1e:	687a      	ldr	r2, [r7, #4]
        context, sizeof(int16_t) * kInt16LUTArraySize);
 8010d20:	f240 4102 	movw	r1, #1026	; 0x402
 8010d24:	4610      	mov	r0, r2
 8010d26:	4798      	blx	r3
 8010d28:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 8010d2a:	69bb      	ldr	r3, [r7, #24]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d10a      	bne.n	8010d46 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x162>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	695c      	ldr	r4, [r3, #20]
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	4b43      	ldr	r3, [pc, #268]	; (8010e44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8010d38:	9300      	str	r3, [sp, #0]
 8010d3a:	2398      	movs	r3, #152	; 0x98
 8010d3c:	4a39      	ldr	r2, [pc, #228]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010d3e:	493d      	ldr	r1, [pc, #244]	; (8010e34 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8010d40:	47a0      	blx	r4
 8010d42:	2301      	movs	r3, #1
 8010d44:	e0c2      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 8010d46:	69fb      	ldr	r3, [r7, #28]
 8010d48:	69ba      	ldr	r2, [r7, #24]
 8010d4a:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d50:	687a      	ldr	r2, [r7, #4]
        context, sizeof(int16_t) * kInt16LUTArraySize);
 8010d52:	f240 4102 	movw	r1, #1026	; 0x402
 8010d56:	4610      	mov	r0, r2
 8010d58:	4798      	blx	r3
 8010d5a:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d10a      	bne.n	8010d78 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x194>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	695c      	ldr	r4, [r3, #20]
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	4b37      	ldr	r3, [pc, #220]	; (8010e48 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8010d6a:	9300      	str	r3, [sp, #0]
 8010d6c:	239c      	movs	r3, #156	; 0x9c
 8010d6e:	4a2d      	ldr	r2, [pc, #180]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010d70:	4930      	ldr	r1, [pc, #192]	; (8010e34 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8010d72:	47a0      	blx	r4
 8010d74:	2301      	movs	r3, #1
 8010d76:	e0a9      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
    op_data->one_over_one_plus_x_lut =
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	697a      	ldr	r2, [r7, #20]
 8010d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 8010d7e:	6a3b      	ldr	r3, [r7, #32]
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	2b07      	cmp	r3, #7
 8010d84:	d116      	bne.n	8010db4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1d0>
    TF_LITE_ENSURE(context, input->type == kTfLiteInt8 ||
 8010d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	2b09      	cmp	r3, #9
 8010d8c:	d02c      	beq.n	8010de8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 8010d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	2b03      	cmp	r3, #3
 8010d94:	d028      	beq.n	8010de8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 8010d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	2b07      	cmp	r3, #7
 8010d9c:	d024      	beq.n	8010de8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	695c      	ldr	r4, [r3, #20]
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	4b29      	ldr	r3, [pc, #164]	; (8010e4c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	23a4      	movs	r3, #164	; 0xa4
 8010daa:	4a1e      	ldr	r2, [pc, #120]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010dac:	4921      	ldr	r1, [pc, #132]	; (8010e34 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8010dae:	47a0      	blx	r4
 8010db0:	2301      	movs	r3, #1
 8010db2:	e08b      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8010db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db6:	781a      	ldrb	r2, [r3, #0]
 8010db8:	6a3b      	ldr	r3, [r7, #32]
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d013      	beq.n	8010de8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x204>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	695c      	ldr	r4, [r3, #20]
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	461a      	mov	r2, r3
 8010dcc:	6a3b      	ldr	r3, [r7, #32]
 8010dce:	781b      	ldrb	r3, [r3, #0]
 8010dd0:	9303      	str	r3, [sp, #12]
 8010dd2:	9202      	str	r2, [sp, #8]
 8010dd4:	4b1e      	ldr	r3, [pc, #120]	; (8010e50 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 8010dd6:	9301      	str	r3, [sp, #4]
 8010dd8:	4b1e      	ldr	r3, [pc, #120]	; (8010e54 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	23a6      	movs	r3, #166	; 0xa6
 8010dde:	4a11      	ldr	r2, [pc, #68]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010de0:	4911      	ldr	r1, [pc, #68]	; (8010e28 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8010de2:	47a0      	blx	r4
 8010de4:	2301      	movs	r3, #1
 8010de6:	e071      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
  if (input->type == kTfLiteInt16) {
 8010de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	2b07      	cmp	r3, #7
 8010dee:	d161      	bne.n	8010eb4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8010df0:	6a3b      	ldr	r3, [r7, #32]
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d035      	beq.n	8010e64 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	695c      	ldr	r4, [r3, #20]
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	6a3b      	ldr	r3, [r7, #32]
 8010e00:	691b      	ldr	r3, [r3, #16]
 8010e02:	2200      	movs	r2, #0
 8010e04:	9203      	str	r2, [sp, #12]
 8010e06:	9302      	str	r3, [sp, #8]
 8010e08:	4b13      	ldr	r3, [pc, #76]	; (8010e58 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 8010e0a:	9301      	str	r3, [sp, #4]
 8010e0c:	4b13      	ldr	r3, [pc, #76]	; (8010e5c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	23ab      	movs	r3, #171	; 0xab
 8010e12:	4a04      	ldr	r2, [pc, #16]	; (8010e24 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8010e14:	4904      	ldr	r1, [pc, #16]	; (8010e28 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8010e16:	47a0      	blx	r4
 8010e18:	2301      	movs	r3, #1
 8010e1a:	e057      	b.n	8010ecc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>
 8010e1c:	0801ecdc 	.word	0x0801ecdc
 8010e20:	0801ece0 	.word	0x0801ece0
 8010e24:	0801eb88 	.word	0x0801eb88
 8010e28:	0801ebdc 	.word	0x0801ebdc
 8010e2c:	0801ecf0 	.word	0x0801ecf0
 8010e30:	0801ed04 	.word	0x0801ed04
 8010e34:	0801ec90 	.word	0x0801ec90
 8010e38:	0801ed18 	.word	0x0801ed18
 8010e3c:	0801ed34 	.word	0x0801ed34
 8010e40:	0801ed48 	.word	0x0801ed48
 8010e44:	0801ed64 	.word	0x0801ed64
 8010e48:	0801ed7c 	.word	0x0801ed7c
 8010e4c:	0801eda0 	.word	0x0801eda0
 8010e50:	0801ebcc 	.word	0x0801ebcc
 8010e54:	0801ec68 	.word	0x0801ec68
 8010e58:	0801ebf8 	.word	0x0801ebf8
 8010e5c:	0801ebfc 	.word	0x0801ebfc
 8010e60:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8010e64:	f107 0308 	add.w	r3, r7, #8
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7ff fe75 	bl	8010b58 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 8010e6e:	69fb      	ldr	r3, [r7, #28]
 8010e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e72:	f240 2201 	movw	r2, #513	; 0x201
 8010e76:	4619      	mov	r1, r3
 8010e78:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 8010e60 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>
 8010e7c:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8010e80:	f7fe ff08 	bl	800fc94 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8010e84:	f107 030c 	add.w	r3, r7, #12
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ff fe9d 	bl	8010bc8 <_ZZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e92:	f240 2201 	movw	r2, #513	; 0x201
 8010e96:	4619      	mov	r1, r3
 8010e98:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8010e9c:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8010e60 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>
 8010ea0:	f7fe fef8 	bl	800fc94 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8010ea4:	6a3b      	ldr	r3, [r7, #32]
 8010ea6:	691a      	ldr	r2, [r3, #16]
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8010eac:	6a3b      	ldr	r3, [r7, #32]
 8010eae:	68da      	ldr	r2, [r3, #12]
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	695b      	ldr	r3, [r3, #20]
 8010eb8:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	9300      	str	r3, [sp, #0]
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	6a3a      	ldr	r2, [r7, #32]
 8010ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ec6:	f7ff fac7 	bl	8010458 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8010eca:	4603      	mov	r3, r0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3728      	adds	r7, #40	; 0x28
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bdb0      	pop	{r4, r5, r7, pc}

08010ed4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8010ed4:	b5b0      	push	{r4, r5, r7, lr}
 8010ed6:	b092      	sub	sp, #72	; 0x48
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	6839      	ldr	r1, [r7, #0]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7f0 ffc0 	bl	8001e6a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8010eea:	6478      	str	r0, [r7, #68]	; 0x44
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	6839      	ldr	r1, [r7, #0]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7f0 ffc9 	bl	8001e8a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8010ef8:	6438      	str	r0, [r7, #64]	; 0x40

  TFLITE_DCHECK(node->user_data != nullptr);
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	691b      	ldr	r3, [r3, #16]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d101      	bne.n	8010f06 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x32>
 8010f02:	f007 ff08 	bl	8018d16 <abort>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	691b      	ldr	r3, [r3, #16]
 8010f0a:	f107 0408 	add.w	r4, r7, #8
 8010f0e:	461d      	mov	r5, r3
 8010f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010f20:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 8010f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f26:	7a1b      	ldrb	r3, [r3, #8]
 8010f28:	3b01      	subs	r3, #1
 8010f2a:	2b08      	cmp	r3, #8
 8010f2c:	d826      	bhi.n	8010f7c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
 8010f2e:	a201      	add	r2, pc, #4	; (adr r2, 8010f34 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x60>)
 8010f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f34:	08010f59 	.word	0x08010f59
 8010f38:	08010f7d 	.word	0x08010f7d
 8010f3c:	08010f6b 	.word	0x08010f6b
 8010f40:	08010f7d 	.word	0x08010f7d
 8010f44:	08010f7d 	.word	0x08010f7d
 8010f48:	08010f7d 	.word	0x08010f7d
 8010f4c:	08010f6b 	.word	0x08010f6b
 8010f50:	08010f7d 	.word	0x08010f7d
 8010f54:	08010f6b 	.word	0x08010f6b
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 8010f58:	f107 0308 	add.w	r3, r7, #8
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f62:	f7ff fcdb 	bl	801091c <_ZN6tflite12_GLOBAL__N_112SoftmaxFloatEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8010f66:	2300      	movs	r3, #0
 8010f68:	e017      	b.n	8010f9a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc6>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, op_data);
 8010f6a:	f107 0308 	add.w	r3, r7, #8
 8010f6e:	461a      	mov	r2, r3
 8010f70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f72:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f74:	f7ff fd03 	bl	801097e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	e00e      	b.n	8010f9a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc6>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	695c      	ldr	r4, [r3, #20]
 8010f80:	687d      	ldr	r5, [r7, #4]
 8010f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f84:	7a1b      	ldrb	r3, [r3, #8]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7f0 f8a4 	bl	80010d4 <TfLiteTypeGetName>
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f90:	7a1b      	ldrb	r3, [r3, #8]
 8010f92:	4904      	ldr	r1, [pc, #16]	; (8010fa4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd0>)
 8010f94:	4628      	mov	r0, r5
 8010f96:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8010f98:	2301      	movs	r3, #1
  }
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3748      	adds	r7, #72	; 0x48
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	0801edfc 	.word	0x0801edfc

08010fa8 <_ZN6tflite16Register_SOFTMAXEv>:
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8010fa8:	b4b0      	push	{r4, r5, r7}
 8010faa:	b083      	sub	sp, #12
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	4a07      	ldr	r2, [pc, #28]	; (8010fd0 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8010fb4:	461c      	mov	r4, r3
 8010fb6:	4615      	mov	r5, r2
 8010fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010fbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bcb0      	pop	{r4, r5, r7}
 8010fcc:	4770      	bx	lr
 8010fce:	bf00      	nop
 8010fd0:	0801ee18 	.word	0x0801ee18

08010fd4 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d003      	beq.n	8010fea <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8010fe8:	e000      	b.n	8010fec <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8010fea:	2320      	movs	r3, #32
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 8011000:	f107 030c 	add.w	r3, r7, #12
 8011004:	4618      	mov	r0, r3
 8011006:	f000 f869 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801100a:	4602      	mov	r2, r0
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6013      	str	r3, [r2, #0]
    return retval;
 8011010:	68fb      	ldr	r3, [r7, #12]
  }
 8011012:	4618      	mov	r0, r3
 8011014:	3710      	adds	r7, #16
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
	...

0801101c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 801101c:	b580      	push	{r7, lr}
 801101e:	b08a      	sub	sp, #40	; 0x28
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8011024:	f000 fbec 	bl	8011800 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8011028:	4603      	mov	r3, r0
 801102a:	4619      	mov	r1, r3
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 fbf2 	bl	8011816 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011032:	4603      	mov	r3, r0
 8011034:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8011036:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 801103a:	f000 fc1e 	bl	801187a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801103e:	4603      	mov	r3, r0
  const F2 constant_48_over_17 =
 8011040:	4618      	mov	r0, r3
 8011042:	f000 fc06 	bl	8011852 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8011046:	4603      	mov	r3, r0
 8011048:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 801104a:	4823      	ldr	r0, [pc, #140]	; (80110d8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801104c:	f000 fc15 	bl	801187a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8011050:	4603      	mov	r3, r0
  const F2 constant_neg_32_over_17 =
 8011052:	4618      	mov	r0, r3
 8011054:	f000 fbfd 	bl	8011852 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8011058:	4603      	mov	r3, r0
 801105a:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 801105c:	69b9      	ldr	r1, [r7, #24]
 801105e:	6a38      	ldr	r0, [r7, #32]
 8011060:	f000 fc18 	bl	8011894 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011064:	4603      	mov	r3, r0
 8011066:	4619      	mov	r1, r3
 8011068:	69f8      	ldr	r0, [r7, #28]
 801106a:	f000 fc35 	bl	80118d8 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801106e:	4603      	mov	r3, r0
 8011070:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8011072:	2300      	movs	r3, #0
 8011074:	627b      	str	r3, [r7, #36]	; 0x24
 8011076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011078:	2b02      	cmp	r3, #2
 801107a:	dc21      	bgt.n	80110c0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 801107c:	6979      	ldr	r1, [r7, #20]
 801107e:	6a38      	ldr	r0, [r7, #32]
 8011080:	f000 fc08 	bl	8011894 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011084:	4603      	mov	r3, r0
 8011086:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8011088:	f000 fc44 	bl	8011914 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 801108c:	4603      	mov	r3, r0
    F2 one_minus_half_denominator_times_x =
 801108e:	6939      	ldr	r1, [r7, #16]
 8011090:	4618      	mov	r0, r3
 8011092:	f000 fc48 	bl	8011926 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011096:	4603      	mov	r3, r0
 8011098:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801109a:	68f9      	ldr	r1, [r7, #12]
 801109c:	6978      	ldr	r0, [r7, #20]
 801109e:	f000 fc60 	bl	8011962 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80110a2:	4603      	mov	r3, r0
 80110a4:	4618      	mov	r0, r3
 80110a6:	f000 fc7e 	bl	80119a6 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80110aa:	4603      	mov	r3, r0
 80110ac:	4619      	mov	r1, r3
 80110ae:	6978      	ldr	r0, [r7, #20]
 80110b0:	f000 fc12 	bl	80118d8 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80110b4:	4603      	mov	r3, r0
 80110b6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 80110b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ba:	3301      	adds	r3, #1
 80110bc:	627b      	str	r3, [r7, #36]	; 0x24
 80110be:	e7da      	b.n	8011076 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 80110c0:	6978      	ldr	r0, [r7, #20]
 80110c2:	f000 fc8a 	bl	80119da <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 80110c6:	4603      	mov	r3, r0
 80110c8:	4618      	mov	r0, r3
 80110ca:	f000 fc9c 	bl	8011a06 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80110ce:	4603      	mov	r3, r0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3728      	adds	r7, #40	; 0x28
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	c3c3c3c4 	.word	0xc3c3c3c4

080110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	4618      	mov	r0, r3
 80110e8:	370c      	adds	r7, #12
 80110ea:	46bd      	mov	sp, r7
 80110ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f0:	4770      	bx	lr

080110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80110f2:	b590      	push	{r4, r7, lr}
 80110f4:	b085      	sub	sp, #20
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80110fa:	f107 030c 	add.w	r3, r7, #12
 80110fe:	4618      	mov	r0, r3
 8011100:	f7ff ffec 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011104:	4604      	mov	r4, r0
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f7f1 fedb 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801110c:	4603      	mov	r3, r0
 801110e:	6023      	str	r3, [r4, #0]
    return retval;
 8011110:	68fb      	ldr	r3, [r7, #12]
  }
 8011112:	4618      	mov	r0, r3
 8011114:	3714      	adds	r7, #20
 8011116:	46bd      	mov	sp, r7
 8011118:	bd90      	pop	{r4, r7, pc}

0801111a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801111a:	b580      	push	{r7, lr}
 801111c:	b082      	sub	sp, #8
 801111e:	af00      	add	r7, sp, #0
 8011120:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8011122:	2100      	movs	r1, #0
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f7f1 fbd7 	bl	80028d8 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 801112a:	4603      	mov	r3, r0
}
 801112c:	4618      	mov	r0, r3
 801112e:	3708      	adds	r7, #8
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8011134:	b590      	push	{r4, r7, lr}
 8011136:	b09f      	sub	sp, #124	; 0x7c
 8011138:	af00      	add	r7, sp, #0
 801113a:	60f8      	str	r0, [r7, #12]
 801113c:	60b9      	str	r1, [r7, #8]
 801113e:	607a      	str	r2, [r7, #4]
 8011140:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	689b      	ldr	r3, [r3, #8]
 8011146:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	699b      	ldr	r3, [r3, #24]
 8011152:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8011154:	68b8      	ldr	r0, [r7, #8]
 8011156:	f7f0 f911 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801115a:	4603      	mov	r3, r0
 801115c:	3b01      	subs	r3, #1
 801115e:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 8011160:	683a      	ldr	r2, [r7, #0]
 8011162:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011164:	68b8      	ldr	r0, [r7, #8]
 8011166:	f7fe fd52 	bl	800fc0e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801116a:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 801116c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801116e:	683a      	ldr	r2, [r7, #0]
 8011170:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011172:	68b8      	ldr	r0, [r7, #8]
 8011174:	f7f0 f9cd 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011178:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801117a:	2300      	movs	r3, #0
 801117c:	677b      	str	r3, [r7, #116]	; 0x74
 801117e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011182:	429a      	cmp	r2, r3
 8011184:	f280 80ed 	bge.w	8011362 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8011188:	2300      	movs	r3, #0
 801118a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801118e:	2300      	movs	r3, #0
 8011190:	673b      	str	r3, [r7, #112]	; 0x70
 8011192:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011196:	429a      	cmp	r2, r3
 8011198:	da16      	bge.n	80111c8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801119a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801119c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801119e:	fb02 f203 	mul.w	r2, r2, r3
 80111a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80111a4:	4413      	add	r3, r2
 80111a6:	461a      	mov	r2, r3
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	441a      	add	r2, r3
 80111ac:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80111b0:	4611      	mov	r1, r2
 80111b2:	4618      	mov	r0, r3
 80111b4:	f000 fc5b 	bl	8011a6e <_ZSt3maxIhERKT_S2_S2_>
 80111b8:	4603      	mov	r3, r0
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80111c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80111c2:	3301      	adds	r3, #1
 80111c4:	673b      	str	r3, [r7, #112]	; 0x70
 80111c6:	e7e4      	b.n	8011192 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80111c8:	f000 fc65 	bl	8011a96 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80111cc:	4603      	mov	r3, r0
 80111ce:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80111d0:	2300      	movs	r3, #0
 80111d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80111d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80111d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111d8:	429a      	cmp	r2, r3
 80111da:	da2f      	bge.n	801123c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80111dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80111de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111e0:	fb02 f203 	mul.w	r2, r2, r3
 80111e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80111e6:	4413      	add	r3, r2
 80111e8:	461a      	mov	r2, r3
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4413      	add	r3, r2
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	461a      	mov	r2, r3
 80111f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80111f6:	1ad3      	subs	r3, r2, r3
 80111f8:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 80111fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80111fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111fe:	429a      	cmp	r2, r3
 8011200:	db18      	blt.n	8011234 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32_t input_diff_rescaled =
 8011202:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011204:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011206:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011208:	f7fe fd30 	bl	800fc6c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801120c:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 801120e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011210:	f000 fc49 	bl	8011aa6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8011214:	4603      	mov	r3, r0
 8011216:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8011218:	69f8      	ldr	r0, [r7, #28]
 801121a:	f000 fc73 	bl	8011b04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801121e:	4603      	mov	r3, r0
 8011220:	4618      	mov	r0, r3
 8011222:	f000 fdb7 	bl	8011d94 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8011226:	4603      	mov	r3, r0
 8011228:	4619      	mov	r1, r3
 801122a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801122c:	f000 fc4c 	bl	8011ac8 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011230:	4603      	mov	r3, r0
 8011232:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8011234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011236:	3301      	adds	r3, #1
 8011238:	66fb      	str	r3, [r7, #108]	; 0x6c
 801123a:	e7cb      	b.n	80111d4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801123c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011240:	4618      	mov	r0, r3
 8011242:	f000 fdc1 	bl	8011dc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8011246:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801124e:	210c      	movs	r1, #12
 8011250:	4618      	mov	r0, r3
 8011252:	f7fe fe99 	bl	800ff88 <_ZN6tflite13GetReciprocalEliPi>
 8011256:	4603      	mov	r3, r0
 8011258:	4618      	mov	r0, r3
 801125a:	f7ff fecd 	bl	8010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801125e:	4603      	mov	r3, r0
 8011260:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8011262:	2300      	movs	r3, #0
 8011264:	66bb      	str	r3, [r7, #104]	; 0x68
 8011266:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801126a:	429a      	cmp	r2, r3
 801126c:	da75      	bge.n	801135a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801126e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011270:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011272:	fb02 f203 	mul.w	r2, r2, r3
 8011276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011278:	4413      	add	r3, r2
 801127a:	461a      	mov	r2, r3
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4413      	add	r3, r2
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	461a      	mov	r2, r3
 8011284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8011288:	1ad3      	subs	r3, r2, r3
 801128a:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801128c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801128e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011290:	429a      	cmp	r2, r3
 8011292:	db50      	blt.n	8011336 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32_t input_diff_rescaled =
 8011294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011296:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011298:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801129a:	f7fe fce7 	bl	800fc6c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801129e:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 80112a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80112a2:	f000 fc00 	bl	8011aa6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80112a6:	4603      	mov	r3, r0
 80112a8:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 80112aa:	69b8      	ldr	r0, [r7, #24]
 80112ac:	f000 fc2a 	bl	8011b04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80112b0:	4603      	mov	r3, r0
 80112b2:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 80112b4:	6979      	ldr	r1, [r7, #20]
 80112b6:	6a38      	ldr	r0, [r7, #32]
 80112b8:	f000 fd91 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80112bc:	4603      	mov	r3, r0
 80112be:	633b      	str	r3, [r7, #48]	; 0x30
 80112c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7ff ff09 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80112ca:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 80112cc:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 80112ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 80112d0:	3217      	adds	r2, #23
 80112d2:	4611      	mov	r1, r2
 80112d4:	4618      	mov	r0, r3
 80112d6:	f000 fda5 	bl	8011e24 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>
 80112da:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 80112dc:	f7f6 fa51 	bl	8007782 <_ZNSt14numeric_limitsIhE3minEv>
 80112e0:	4603      	mov	r3, r0
 80112e2:	461a      	mov	r2, r3
            unsat_output +
 80112e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112e6:	4413      	add	r3, r2
        const int32_t shifted_output =
 80112e8:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 80112ea:	f7f6 fa52 	bl	8007792 <_ZNSt14numeric_limitsIhE3maxEv>
 80112ee:	4603      	mov	r3, r0
 80112f0:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 80112f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80112f6:	f107 0310 	add.w	r3, r7, #16
 80112fa:	4611      	mov	r1, r2
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f1 fa9d 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 8011302:	4604      	mov	r4, r0
 8011304:	f7f6 fa3d 	bl	8007782 <_ZNSt14numeric_limitsIhE3minEv>
 8011308:	4603      	mov	r3, r0
 801130a:	63bb      	str	r3, [r7, #56]	; 0x38
 801130c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011310:	4619      	mov	r1, r3
 8011312:	4620      	mov	r0, r4
 8011314:	f7ef ff98 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 8011318:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801131a:	6819      	ldr	r1, [r3, #0]
 801131c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801131e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011320:	fb02 f203 	mul.w	r2, r2, r3
 8011324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011326:	4413      	add	r3, r2
 8011328:	461a      	mov	r2, r3
 801132a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801132e:	4413      	add	r3, r2
 8011330:	b2ca      	uxtb	r2, r1
 8011332:	701a      	strb	r2, [r3, #0]
 8011334:	e00d      	b.n	8011352 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8011336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011338:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801133a:	fb02 f203 	mul.w	r2, r2, r3
 801133e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011340:	4413      	add	r3, r2
 8011342:	461a      	mov	r2, r3
 8011344:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011348:	189c      	adds	r4, r3, r2
 801134a:	f7f6 fa1a 	bl	8007782 <_ZNSt14numeric_limitsIhE3minEv>
 801134e:	4603      	mov	r3, r0
 8011350:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8011352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011354:	3301      	adds	r3, #1
 8011356:	66bb      	str	r3, [r7, #104]	; 0x68
 8011358:	e785      	b.n	8011266 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801135a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801135c:	3301      	adds	r3, #1
 801135e:	677b      	str	r3, [r7, #116]	; 0x74
 8011360:	e70d      	b.n	801117e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8011362:	bf00      	nop
 8011364:	377c      	adds	r7, #124	; 0x7c
 8011366:	46bd      	mov	sp, r7
 8011368:	bd90      	pop	{r4, r7, pc}

0801136a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801136a:	b590      	push	{r4, r7, lr}
 801136c:	b09f      	sub	sp, #124	; 0x7c
 801136e:	af00      	add	r7, sp, #0
 8011370:	60f8      	str	r0, [r7, #12]
 8011372:	60b9      	str	r1, [r7, #8]
 8011374:	607a      	str	r2, [r7, #4]
 8011376:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	689b      	ldr	r3, [r3, #8]
 801137c:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	699b      	ldr	r3, [r3, #24]
 8011388:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801138a:	68b8      	ldr	r0, [r7, #8]
 801138c:	f7ef fff6 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011390:	4603      	mov	r3, r0
 8011392:	3b01      	subs	r3, #1
 8011394:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 8011396:	683a      	ldr	r2, [r7, #0]
 8011398:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801139a:	68b8      	ldr	r0, [r7, #8]
 801139c:	f7fe fc37 	bl	800fc0e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80113a0:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 80113a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80113a4:	683a      	ldr	r2, [r7, #0]
 80113a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80113a8:	68b8      	ldr	r0, [r7, #8]
 80113aa:	f7f0 f8b2 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80113ae:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 80113b0:	2300      	movs	r3, #0
 80113b2:	677b      	str	r3, [r7, #116]	; 0x74
 80113b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80113b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113b8:	429a      	cmp	r2, r3
 80113ba:	f280 80f0 	bge.w	801159e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80113be:	2380      	movs	r3, #128	; 0x80
 80113c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80113c4:	2300      	movs	r3, #0
 80113c6:	673b      	str	r3, [r7, #112]	; 0x70
 80113c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80113ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113cc:	429a      	cmp	r2, r3
 80113ce:	da17      	bge.n	8011400 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80113d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80113d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80113d4:	fb02 f203 	mul.w	r2, r2, r3
 80113d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80113da:	4413      	add	r3, r2
 80113dc:	461a      	mov	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	441a      	add	r2, r3
 80113e2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80113e6:	4611      	mov	r1, r2
 80113e8:	4618      	mov	r0, r3
 80113ea:	f000 fd83 	bl	8011ef4 <_ZSt3maxIaERKT_S2_S2_>
 80113ee:	4603      	mov	r3, r0
 80113f0:	f993 3000 	ldrsb.w	r3, [r3]
 80113f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80113f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80113fa:	3301      	adds	r3, #1
 80113fc:	673b      	str	r3, [r7, #112]	; 0x70
 80113fe:	e7e3      	b.n	80113c8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8011400:	f000 fb49 	bl	8011a96 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8011404:	4603      	mov	r3, r0
 8011406:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8011408:	2300      	movs	r3, #0
 801140a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801140c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801140e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011410:	429a      	cmp	r2, r3
 8011412:	da30      	bge.n	8011476 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8011414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011416:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011418:	fb02 f203 	mul.w	r2, r2, r3
 801141c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801141e:	4413      	add	r3, r2
 8011420:	461a      	mov	r2, r3
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	4413      	add	r3, r2
 8011426:	f993 3000 	ldrsb.w	r3, [r3]
 801142a:	461a      	mov	r2, r3
 801142c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8011434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011438:	429a      	cmp	r2, r3
 801143a:	db18      	blt.n	801146e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32_t input_diff_rescaled =
 801143c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801143e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011440:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011442:	f7fe fc13 	bl	800fc6c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8011446:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 8011448:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801144a:	f000 fb2c 	bl	8011aa6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801144e:	4603      	mov	r3, r0
 8011450:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8011452:	69f8      	ldr	r0, [r7, #28]
 8011454:	f000 fb56 	bl	8011b04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8011458:	4603      	mov	r3, r0
 801145a:	4618      	mov	r0, r3
 801145c:	f000 fc9a 	bl	8011d94 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8011460:	4603      	mov	r3, r0
 8011462:	4619      	mov	r1, r3
 8011464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011466:	f000 fb2f 	bl	8011ac8 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801146a:	4603      	mov	r3, r0
 801146c:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801146e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011470:	3301      	adds	r3, #1
 8011472:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011474:	e7ca      	b.n	801140c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8011476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801147a:	4618      	mov	r0, r3
 801147c:	f000 fca4 	bl	8011dc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8011480:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011488:	210c      	movs	r1, #12
 801148a:	4618      	mov	r0, r3
 801148c:	f7fe fd7c 	bl	800ff88 <_ZN6tflite13GetReciprocalEliPi>
 8011490:	4603      	mov	r3, r0
 8011492:	4618      	mov	r0, r3
 8011494:	f7ff fdb0 	bl	8010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8011498:	4603      	mov	r3, r0
 801149a:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801149c:	2300      	movs	r3, #0
 801149e:	66bb      	str	r3, [r7, #104]	; 0x68
 80114a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80114a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114a4:	429a      	cmp	r2, r3
 80114a6:	da76      	bge.n	8011596 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80114a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80114aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114ac:	fb02 f203 	mul.w	r2, r2, r3
 80114b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80114b2:	4413      	add	r3, r2
 80114b4:	461a      	mov	r2, r3
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	4413      	add	r3, r2
 80114ba:	f993 3000 	ldrsb.w	r3, [r3]
 80114be:	461a      	mov	r2, r3
 80114c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80114c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114cc:	429a      	cmp	r2, r3
 80114ce:	db50      	blt.n	8011572 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32_t input_diff_rescaled =
 80114d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114d2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80114d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80114d6:	f7fe fbc9 	bl	800fc6c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80114da:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 80114dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80114de:	f000 fae2 	bl	8011aa6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80114e2:	4603      	mov	r3, r0
 80114e4:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 80114e6:	69b8      	ldr	r0, [r7, #24]
 80114e8:	f000 fb0c 	bl	8011b04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80114ec:	4603      	mov	r3, r0
 80114ee:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 80114f0:	6979      	ldr	r1, [r7, #20]
 80114f2:	6a38      	ldr	r0, [r7, #32]
 80114f4:	f000 fc73 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80114f8:	4603      	mov	r3, r0
 80114fa:	633b      	str	r3, [r7, #48]	; 0x30
 80114fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011500:	4618      	mov	r0, r3
 8011502:	f7ff fdeb 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011506:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8011508:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801150a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801150c:	320f      	adds	r2, #15
 801150e:	4611      	mov	r1, r2
 8011510:	4618      	mov	r0, r3
 8011512:	f000 fc87 	bl	8011e24 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>
 8011516:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8011518:	f7f6 f944 	bl	80077a4 <_ZNSt14numeric_limitsIsE3minEv>
 801151c:	4603      	mov	r3, r0
 801151e:	461a      	mov	r2, r3
            unsat_output +
 8011520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011522:	4413      	add	r3, r2
        const int32_t shifted_output =
 8011524:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8011526:	f7f6 f947 	bl	80077b8 <_ZNSt14numeric_limitsIsE3maxEv>
 801152a:	4603      	mov	r3, r0
 801152c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801152e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011532:	f107 0310 	add.w	r3, r7, #16
 8011536:	4611      	mov	r1, r2
 8011538:	4618      	mov	r0, r3
 801153a:	f7f1 f97f 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 801153e:	4604      	mov	r4, r0
 8011540:	f7f6 f930 	bl	80077a4 <_ZNSt14numeric_limitsIsE3minEv>
 8011544:	4603      	mov	r3, r0
 8011546:	63bb      	str	r3, [r7, #56]	; 0x38
 8011548:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801154c:	4619      	mov	r1, r3
 801154e:	4620      	mov	r0, r4
 8011550:	f7ef fe7a 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 8011554:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8011556:	6819      	ldr	r1, [r3, #0]
 8011558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801155a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801155c:	fb02 f203 	mul.w	r2, r2, r3
 8011560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011562:	4413      	add	r3, r2
 8011564:	005b      	lsls	r3, r3, #1
 8011566:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801156a:	4413      	add	r3, r2
 801156c:	b20a      	sxth	r2, r1
 801156e:	801a      	strh	r2, [r3, #0]
 8011570:	e00d      	b.n	801158e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8011572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011574:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011576:	fb02 f203 	mul.w	r2, r2, r3
 801157a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801157c:	4413      	add	r3, r2
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011584:	18d4      	adds	r4, r2, r3
 8011586:	f7f6 f90d 	bl	80077a4 <_ZNSt14numeric_limitsIsE3minEv>
 801158a:	4603      	mov	r3, r0
 801158c:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801158e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011590:	3301      	adds	r3, #1
 8011592:	66bb      	str	r3, [r7, #104]	; 0x68
 8011594:	e784      	b.n	80114a0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8011596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011598:	3301      	adds	r3, #1
 801159a:	677b      	str	r3, [r7, #116]	; 0x74
 801159c:	e70a      	b.n	80113b4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801159e:	bf00      	nop
 80115a0:	377c      	adds	r7, #124	; 0x7c
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd90      	pop	{r4, r7, pc}

080115a6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 80115a6:	b590      	push	{r4, r7, lr}
 80115a8:	b09f      	sub	sp, #124	; 0x7c
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	60f8      	str	r0, [r7, #12]
 80115ae:	60b9      	str	r1, [r7, #8]
 80115b0:	607a      	str	r2, [r7, #4]
 80115b2:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	689b      	ldr	r3, [r3, #8]
 80115b8:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	699b      	ldr	r3, [r3, #24]
 80115c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80115c6:	68b8      	ldr	r0, [r7, #8]
 80115c8:	f7ef fed8 	bl	800137c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80115cc:	4603      	mov	r3, r0
 80115ce:	3b01      	subs	r3, #1
 80115d0:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 80115d2:	683a      	ldr	r2, [r7, #0]
 80115d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80115d6:	68b8      	ldr	r0, [r7, #8]
 80115d8:	f7fe fb19 	bl	800fc0e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80115dc:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 80115de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80115e0:	683a      	ldr	r2, [r7, #0]
 80115e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80115e4:	68b8      	ldr	r0, [r7, #8]
 80115e6:	f7ef ff94 	bl	8001512 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80115ea:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 80115ec:	2300      	movs	r3, #0
 80115ee:	677b      	str	r3, [r7, #116]	; 0x74
 80115f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80115f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115f4:	429a      	cmp	r2, r3
 80115f6:	f280 80f0 	bge.w	80117da <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80115fa:	2380      	movs	r3, #128	; 0x80
 80115fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8011600:	2300      	movs	r3, #0
 8011602:	673b      	str	r3, [r7, #112]	; 0x70
 8011604:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011608:	429a      	cmp	r2, r3
 801160a:	da17      	bge.n	801163c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801160c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801160e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011610:	fb02 f203 	mul.w	r2, r2, r3
 8011614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011616:	4413      	add	r3, r2
 8011618:	461a      	mov	r2, r3
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	441a      	add	r2, r3
 801161e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8011622:	4611      	mov	r1, r2
 8011624:	4618      	mov	r0, r3
 8011626:	f000 fc65 	bl	8011ef4 <_ZSt3maxIaERKT_S2_S2_>
 801162a:	4603      	mov	r3, r0
 801162c:	f993 3000 	ldrsb.w	r3, [r3]
 8011630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8011634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011636:	3301      	adds	r3, #1
 8011638:	673b      	str	r3, [r7, #112]	; 0x70
 801163a:	e7e3      	b.n	8011604 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801163c:	f000 fa2b 	bl	8011a96 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8011640:	4603      	mov	r3, r0
 8011642:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8011644:	2300      	movs	r3, #0
 8011646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801164a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801164c:	429a      	cmp	r2, r3
 801164e:	da30      	bge.n	80116b2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8011650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011652:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011654:	fb02 f203 	mul.w	r2, r2, r3
 8011658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801165a:	4413      	add	r3, r2
 801165c:	461a      	mov	r2, r3
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4413      	add	r3, r2
 8011662:	f993 3000 	ldrsb.w	r3, [r3]
 8011666:	461a      	mov	r2, r3
 8011668:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801166c:	1ad3      	subs	r3, r2, r3
 801166e:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8011670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011674:	429a      	cmp	r2, r3
 8011676:	db18      	blt.n	80116aa <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32_t input_diff_rescaled =
 8011678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801167a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801167c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801167e:	f7fe faf5 	bl	800fc6c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8011682:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 8011684:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011686:	f000 fa0e 	bl	8011aa6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801168a:	4603      	mov	r3, r0
 801168c:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801168e:	69f8      	ldr	r0, [r7, #28]
 8011690:	f000 fa38 	bl	8011b04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8011694:	4603      	mov	r3, r0
 8011696:	4618      	mov	r0, r3
 8011698:	f000 fb7c 	bl	8011d94 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801169c:	4603      	mov	r3, r0
 801169e:	4619      	mov	r1, r3
 80116a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116a2:	f000 fa11 	bl	8011ac8 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80116a6:	4603      	mov	r3, r0
 80116a8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80116aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116ac:	3301      	adds	r3, #1
 80116ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80116b0:	e7ca      	b.n	8011648 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 80116b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80116b6:	4618      	mov	r0, r3
 80116b8:	f000 fb86 	bl	8011dc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80116bc:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80116c4:	210c      	movs	r1, #12
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fe fc5e 	bl	800ff88 <_ZN6tflite13GetReciprocalEliPi>
 80116cc:	4603      	mov	r3, r0
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7ff fc92 	bl	8010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80116d4:	4603      	mov	r3, r0
 80116d6:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 80116d8:	2300      	movs	r3, #0
 80116da:	66bb      	str	r3, [r7, #104]	; 0x68
 80116dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80116de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116e0:	429a      	cmp	r2, r3
 80116e2:	da76      	bge.n	80117d2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80116e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80116e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80116e8:	fb02 f203 	mul.w	r2, r2, r3
 80116ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116ee:	4413      	add	r3, r2
 80116f0:	461a      	mov	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4413      	add	r3, r2
 80116f6:	f993 3000 	ldrsb.w	r3, [r3]
 80116fa:	461a      	mov	r2, r3
 80116fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8011700:	1ad3      	subs	r3, r2, r3
 8011702:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8011704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011708:	429a      	cmp	r2, r3
 801170a:	db50      	blt.n	80117ae <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32_t input_diff_rescaled =
 801170c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801170e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011710:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011712:	f7fe faab 	bl	800fc6c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8011716:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 8011718:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801171a:	f000 f9c4 	bl	8011aa6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801171e:	4603      	mov	r3, r0
 8011720:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8011722:	69b8      	ldr	r0, [r7, #24]
 8011724:	f000 f9ee 	bl	8011b04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8011728:	4603      	mov	r3, r0
 801172a:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801172c:	6979      	ldr	r1, [r7, #20]
 801172e:	6a38      	ldr	r0, [r7, #32]
 8011730:	f000 fb55 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011734:	4603      	mov	r3, r0
 8011736:	633b      	str	r3, [r7, #48]	; 0x30
 8011738:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801173c:	4618      	mov	r0, r3
 801173e:	f7ff fccd 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011742:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8011744:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8011746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8011748:	3217      	adds	r2, #23
 801174a:	4611      	mov	r1, r2
 801174c:	4618      	mov	r0, r3
 801174e:	f000 fb69 	bl	8011e24 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>
 8011752:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8011754:	f7ef fd3a 	bl	80011cc <_ZNSt14numeric_limitsIaE3minEv>
 8011758:	4603      	mov	r3, r0
 801175a:	461a      	mov	r2, r3
            unsat_output +
 801175c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801175e:	4413      	add	r3, r2
        const int32_t shifted_output =
 8011760:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8011762:	f7ef fd3c 	bl	80011de <_ZNSt14numeric_limitsIaE3maxEv>
 8011766:	4603      	mov	r3, r0
 8011768:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801176a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801176e:	f107 0310 	add.w	r3, r7, #16
 8011772:	4611      	mov	r1, r2
 8011774:	4618      	mov	r0, r3
 8011776:	f7f1 f861 	bl	800283c <_ZSt3minIlERKT_S2_S2_>
 801177a:	4604      	mov	r4, r0
 801177c:	f7ef fd26 	bl	80011cc <_ZNSt14numeric_limitsIaE3minEv>
 8011780:	4603      	mov	r3, r0
 8011782:	63bb      	str	r3, [r7, #56]	; 0x38
 8011784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011788:	4619      	mov	r1, r3
 801178a:	4620      	mov	r0, r4
 801178c:	f7ef fd5c 	bl	8001248 <_ZSt3maxIlERKT_S2_S2_>
 8011790:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8011792:	6819      	ldr	r1, [r3, #0]
 8011794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011796:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011798:	fb02 f203 	mul.w	r2, r2, r3
 801179c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801179e:	4413      	add	r3, r2
 80117a0:	461a      	mov	r2, r3
 80117a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80117a6:	4413      	add	r3, r2
 80117a8:	b24a      	sxtb	r2, r1
 80117aa:	701a      	strb	r2, [r3, #0]
 80117ac:	e00d      	b.n	80117ca <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 80117ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80117b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117b2:	fb02 f203 	mul.w	r2, r2, r3
 80117b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117b8:	4413      	add	r3, r2
 80117ba:	461a      	mov	r2, r3
 80117bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80117c0:	189c      	adds	r4, r3, r2
 80117c2:	f7ef fd03 	bl	80011cc <_ZNSt14numeric_limitsIaE3minEv>
 80117c6:	4603      	mov	r3, r0
 80117c8:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80117ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117cc:	3301      	adds	r3, #1
 80117ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80117d0:	e784      	b.n	80116dc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 80117d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80117d4:	3301      	adds	r3, #1
 80117d6:	677b      	str	r3, [r7, #116]	; 0x74
 80117d8:	e70a      	b.n	80115f0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 80117da:	bf00      	nop
 80117dc:	377c      	adds	r7, #124	; 0x7c
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd90      	pop	{r4, r7, pc}

080117e2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80117e2:	b580      	push	{r7, lr}
 80117e4:	b082      	sub	sp, #8
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d101      	bne.n	80117f4 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 80117f0:	f007 fa91 	bl	8018d16 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3708      	adds	r7, #8
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}

08011800 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8011800:	b580      	push	{r7, lr}
 8011802:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8011804:	f000 fb8c 	bl	8011f20 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8011808:	4603      	mov	r3, r0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 801180a:	4618      	mov	r0, r3
 801180c:	f7ff fc71 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011810:	4603      	mov	r3, r0
  }
 8011812:	4618      	mov	r0, r3
 8011814:	bd80      	pop	{r7, pc}

08011816 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8011816:	b590      	push	{r4, r7, lr}
 8011818:	b083      	sub	sp, #12
 801181a:	af00      	add	r7, sp, #0
 801181c:	6078      	str	r0, [r7, #4]
 801181e:	6039      	str	r1, [r7, #0]
 8011820:	1d3b      	adds	r3, r7, #4
 8011822:	4618      	mov	r0, r3
 8011824:	f7ff fc5a 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011828:	4603      	mov	r3, r0
 801182a:	681c      	ldr	r4, [r3, #0]
 801182c:	463b      	mov	r3, r7
 801182e:	4618      	mov	r0, r3
 8011830:	f7ff fc54 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011834:	4603      	mov	r3, r0
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	4619      	mov	r1, r3
 801183a:	4620      	mov	r0, r4
 801183c:	f7fe f98c 	bl	800fb58 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 8011840:	4603      	mov	r3, r0
 8011842:	4618      	mov	r0, r3
 8011844:	f7ff fbd8 	bl	8010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8011848:	4603      	mov	r3, r0
 801184a:	4618      	mov	r0, r3
 801184c:	370c      	adds	r7, #12
 801184e:	46bd      	mov	sp, r7
 8011850:	bd90      	pop	{r4, r7, pc}

08011852 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8011852:	b590      	push	{r4, r7, lr}
 8011854:	b085      	sub	sp, #20
 8011856:	af00      	add	r7, sp, #0
 8011858:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801185a:	f107 030c 	add.w	r3, r7, #12
 801185e:	4618      	mov	r0, r3
 8011860:	f000 fb65 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8011864:	4604      	mov	r4, r0
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f7f1 fb2b 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801186c:	4603      	mov	r3, r0
 801186e:	6023      	str	r3, [r4, #0]
    return retval;
 8011870:	68fb      	ldr	r3, [r7, #12]
  }
 8011872:	4618      	mov	r0, r3
 8011874:	3714      	adds	r7, #20
 8011876:	46bd      	mov	sp, r7
 8011878:	bd90      	pop	{r4, r7, pc}

0801187a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801187a:	b580      	push	{r7, lr}
 801187c:	b082      	sub	sp, #8
 801187e:	af00      	add	r7, sp, #0
 8011880:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8011882:	2100      	movs	r1, #0
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f7f1 f827 	bl	80028d8 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 801188a:	4603      	mov	r3, r0
}
 801188c:	4618      	mov	r0, r3
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8011894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011896:	b085      	sub	sp, #20
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801189e:	1d3b      	adds	r3, r7, #4
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7ff fc1b 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80118a6:	4603      	mov	r3, r0
 80118a8:	681d      	ldr	r5, [r3, #0]
 80118aa:	463b      	mov	r3, r7
 80118ac:	4618      	mov	r0, r3
 80118ae:	f000 fb3e 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80118b2:	4603      	mov	r3, r0
 80118b4:	681e      	ldr	r6, [r3, #0]
 80118b6:	f107 030c 	add.w	r3, r7, #12
 80118ba:	4618      	mov	r0, r3
 80118bc:	f000 fb37 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80118c0:	4604      	mov	r4, r0
 80118c2:	4631      	mov	r1, r6
 80118c4:	4628      	mov	r0, r5
 80118c6:	f7ef fcd3 	bl	8001270 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80118ca:	4603      	mov	r3, r0
 80118cc:	6023      	str	r3, [r4, #0]
  return c;
 80118ce:	68fb      	ldr	r3, [r7, #12]
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3714      	adds	r7, #20
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118d8 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80118d8:	b590      	push	{r4, r7, lr}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
 80118e2:	1d3b      	adds	r3, r7, #4
 80118e4:	4618      	mov	r0, r3
 80118e6:	f000 fb22 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80118ea:	4603      	mov	r3, r0
 80118ec:	681c      	ldr	r4, [r3, #0]
 80118ee:	463b      	mov	r3, r7
 80118f0:	4618      	mov	r0, r3
 80118f2:	f000 fb1c 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80118f6:	4603      	mov	r3, r0
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	4619      	mov	r1, r3
 80118fc:	4620      	mov	r0, r4
 80118fe:	f7f1 fb1c 	bl	8002f3a <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8011902:	4603      	mov	r3, r0
 8011904:	4618      	mov	r0, r3
 8011906:	f000 fb1d 	bl	8011f44 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801190a:	4603      	mov	r3, r0
 801190c:	4618      	mov	r0, r3
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	bd90      	pop	{r4, r7, pc}

08011914 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 8011914:	b580      	push	{r7, lr}
 8011916:	af00      	add	r7, sp, #0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 8011918:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801191c:	f7ff ff99 	bl	8011852 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8011920:	4603      	mov	r3, r0
  }
 8011922:	4618      	mov	r0, r3
 8011924:	bd80      	pop	{r7, pc}

08011926 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8011926:	b590      	push	{r4, r7, lr}
 8011928:	b083      	sub	sp, #12
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
 801192e:	6039      	str	r1, [r7, #0]
 8011930:	1d3b      	adds	r3, r7, #4
 8011932:	4618      	mov	r0, r3
 8011934:	f000 fafb 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8011938:	4603      	mov	r3, r0
 801193a:	681c      	ldr	r4, [r3, #0]
 801193c:	463b      	mov	r3, r7
 801193e:	4618      	mov	r0, r3
 8011940:	f000 faf5 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8011944:	4603      	mov	r3, r0
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	4619      	mov	r1, r3
 801194a:	4620      	mov	r0, r4
 801194c:	f000 f881 	bl	8011a52 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8011950:	4603      	mov	r3, r0
 8011952:	4618      	mov	r0, r3
 8011954:	f000 faf6 	bl	8011f44 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8011958:	4603      	mov	r3, r0
 801195a:	4618      	mov	r0, r3
 801195c:	370c      	adds	r7, #12
 801195e:	46bd      	mov	sp, r7
 8011960:	bd90      	pop	{r4, r7, pc}

08011962 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8011962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011964:	b085      	sub	sp, #20
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
 801196a:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801196c:	1d3b      	adds	r3, r7, #4
 801196e:	4618      	mov	r0, r3
 8011970:	f000 fadd 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8011974:	4603      	mov	r3, r0
 8011976:	681d      	ldr	r5, [r3, #0]
 8011978:	463b      	mov	r3, r7
 801197a:	4618      	mov	r0, r3
 801197c:	f000 fad7 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8011980:	4603      	mov	r3, r0
 8011982:	681e      	ldr	r6, [r3, #0]
 8011984:	f107 030c 	add.w	r3, r7, #12
 8011988:	4618      	mov	r0, r3
 801198a:	f000 faec 	bl	8011f66 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801198e:	4604      	mov	r4, r0
 8011990:	4631      	mov	r1, r6
 8011992:	4628      	mov	r0, r5
 8011994:	f7ef fc6c 	bl	8001270 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8011998:	4603      	mov	r3, r0
 801199a:	6023      	str	r3, [r4, #0]
  return c;
 801199c:	68fb      	ldr	r3, [r7, #12]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3714      	adds	r7, #20
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119a6 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80119a6:	b5b0      	push	{r4, r5, r7, lr}
 80119a8:	b084      	sub	sp, #16
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80119ae:	1d3b      	adds	r3, r7, #4
 80119b0:	4618      	mov	r0, r3
 80119b2:	f000 fad8 	bl	8011f66 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80119b6:	4603      	mov	r3, r0
 80119b8:	681d      	ldr	r5, [r3, #0]
 80119ba:	f107 030c 	add.w	r3, r7, #12
 80119be:	4618      	mov	r0, r3
 80119c0:	f000 fab5 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80119c4:	4604      	mov	r4, r0
 80119c6:	4628      	mov	r0, r5
 80119c8:	f000 fad8 	bl	8011f7c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 80119cc:	4603      	mov	r3, r0
 80119ce:	6023      	str	r3, [r4, #0]
  return result;
 80119d0:	68fb      	ldr	r3, [r7, #12]
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3710      	adds	r7, #16
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bdb0      	pop	{r4, r5, r7, pc}

080119da <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 80119da:	b590      	push	{r4, r7, lr}
 80119dc:	b085      	sub	sp, #20
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 80119e2:	1d3b      	adds	r3, r7, #4
 80119e4:	4618      	mov	r0, r3
 80119e6:	f000 faa2 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80119ea:	4604      	mov	r4, r0
 80119ec:	f107 030c 	add.w	r3, r7, #12
 80119f0:	4618      	mov	r0, r3
 80119f2:	f000 facf 	bl	8011f94 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80119f6:	4602      	mov	r2, r0
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	6013      	str	r3, [r2, #0]
  return c;
 80119fc:	68fb      	ldr	r3, [r7, #12]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3714      	adds	r7, #20
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd90      	pop	{r4, r7, pc}

08011a06 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8011a06:	b5b0      	push	{r4, r5, r7, lr}
 8011a08:	b084      	sub	sp, #16
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8011a0e:	1d3b      	adds	r3, r7, #4
 8011a10:	4618      	mov	r0, r3
 8011a12:	f000 fabf 	bl	8011f94 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8011a16:	4603      	mov	r3, r0
 8011a18:	681d      	ldr	r5, [r3, #0]
 8011a1a:	f107 030c 	add.w	r3, r7, #12
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7ff fb5c 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011a24:	4604      	mov	r4, r0
 8011a26:	4628      	mov	r0, r5
 8011a28:	f000 fabf 	bl	8011faa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	6023      	str	r3, [r4, #0]
  return result;
 8011a30:	68fb      	ldr	r3, [r7, #12]
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3710      	adds	r7, #16
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bdb0      	pop	{r4, r5, r7, pc}

08011a3a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b082      	sub	sp, #8
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 fabd 	bl	8011fc2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8011a48:	4603      	mov	r3, r0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3708      	adds	r7, #8
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8011a52:	b480      	push	{r7}
 8011a54:	b083      	sub	sp, #12
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
 8011a5a:	6039      	str	r1, [r7, #0]
  return a - b;
 8011a5c:	687a      	ldr	r2, [r7, #4]
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	1ad3      	subs	r3, r2, r3
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	370c      	adds	r7, #12
 8011a66:	46bd      	mov	sp, r7
 8011a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6c:	4770      	bx	lr

08011a6e <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8011a6e:	b480      	push	{r7}
 8011a70:	b083      	sub	sp, #12
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	6078      	str	r0, [r7, #4]
 8011a76:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	781a      	ldrb	r2, [r3, #0]
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d201      	bcs.n	8011a88 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	e000      	b.n	8011a8a <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 8011a88:	687b      	ldr	r3, [r7, #4]
    }
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	370c      	adds	r7, #12
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr

08011a96 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8011a96:	b580      	push	{r7, lr}
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	2000      	movs	r0, #0
 8011a9c:	f000 fa9e 	bl	8011fdc <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	bd80      	pop	{r7, pc}

08011aa6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8011aa6:	b580      	push	{r7, lr}
 8011aa8:	b084      	sub	sp, #16
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8011aae:	f107 030c 	add.w	r3, r7, #12
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f000 faa6 	bl	8012004 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8011ab8:	4602      	mov	r2, r0
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6013      	str	r3, [r2, #0]
    return retval;
 8011abe:	68fb      	ldr	r3, [r7, #12]
  }
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3710      	adds	r7, #16
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8011ac8:	b590      	push	{r4, r7, lr}
 8011aca:	b083      	sub	sp, #12
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
 8011ad2:	1d3b      	adds	r3, r7, #4
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f000 f977 	bl	8011dc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8011ada:	4603      	mov	r3, r0
 8011adc:	681c      	ldr	r4, [r3, #0]
 8011ade:	463b      	mov	r3, r7
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f000 f971 	bl	8011dc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	4619      	mov	r1, r3
 8011aec:	4620      	mov	r0, r4
 8011aee:	f7f1 fa24 	bl	8002f3a <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8011af2:	4603      	mov	r3, r0
 8011af4:	4618      	mov	r0, r3
 8011af6:	f000 fa90 	bl	801201a <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8011afa:	4603      	mov	r3, r0
 8011afc:	4618      	mov	r0, r3
 8011afe:	370c      	adds	r7, #12
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd90      	pop	{r4, r7, pc}

08011b04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8011b04:	b590      	push	{r4, r7, lr}
 8011b06:	b091      	sub	sp, #68	; 0x44
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8011b0c:	f000 fa96 	bl	801203c <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8011b10:	4603      	mov	r3, r0
 8011b12:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8011b14:	2001      	movs	r0, #1
 8011b16:	f000 fa9a 	bl	801204e <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011b20:	f000 faa9 	bl	8012076 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011b24:	4603      	mov	r3, r0
 8011b26:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8011b28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f000 fac1 	bl	80120b2 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011b30:	4603      	mov	r3, r0
 8011b32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011b34:	4618      	mov	r0, r3
 8011b36:	f000 fa9e 	bl	8012076 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8011b3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b40:	f000 fad5 	bl	80120ee <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8011b44:	4603      	mov	r3, r0
 8011b46:	4618      	mov	r0, r3
 8011b48:	f000 faec 	bl	8012124 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8011b50:	6879      	ldr	r1, [r7, #4]
 8011b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b54:	f000 fa8f 	bl	8012076 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011b60:	4618      	mov	r0, r3
 8011b62:	f000 fa4f 	bl	8012004 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8011b66:	4603      	mov	r3, r0
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);  // exp(-1/4)
 8011b6c:	4883      	ldr	r0, [pc, #524]	; (8011d7c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8011b6e:	f7ff fad4 	bl	801111a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011b72:	4603      	mov	r3, r0
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7ff fabc 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8011b7e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8011b82:	f7f1 f99e 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011b86:	4603      	mov	r3, r0
 8011b88:	4619      	mov	r1, r3
 8011b8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b8c:	f7f1 f9a4 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011b90:	4603      	mov	r3, r0
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7f1 f9f3 	bl	8002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011b98:	4604      	mov	r4, r0
 8011b9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b9e:	f000 f91e 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	4620      	mov	r0, r4
 8011baa:	f000 fb1d 	bl	80121e8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);  // exp(-1/2)
 8011bb2:	4873      	ldr	r0, [pc, #460]	; (8011d80 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8011bb4:	f7ff fab1 	bl	801111a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7ff fa99 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	623b      	str	r3, [r7, #32]
 8011bc4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8011bc8:	f7f1 f97b 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	4619      	mov	r1, r3
 8011bd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011bd2:	f7f1 f981 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7f1 f9d0 	bl	8002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011bde:	4604      	mov	r4, r0
 8011be0:	6a39      	ldr	r1, [r7, #32]
 8011be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011be4:	f000 f8fb 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011be8:	4603      	mov	r3, r0
 8011bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bec:	4619      	mov	r1, r3
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f000 fafa 	bl	80121e8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);   // exp(-1)
 8011bf8:	4862      	ldr	r0, [pc, #392]	; (8011d84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8011bfa:	f7ff fa8e 	bl	801111a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7ff fa76 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011c06:	4603      	mov	r3, r0
 8011c08:	61fb      	str	r3, [r7, #28]
 8011c0a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011c0e:	f7f1 f958 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011c12:	4603      	mov	r3, r0
 8011c14:	4619      	mov	r1, r3
 8011c16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011c18:	f7f1 f95e 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7f1 f9ad 	bl	8002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011c24:	4604      	mov	r4, r0
 8011c26:	69f9      	ldr	r1, [r7, #28]
 8011c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c2a:	f000 f8d8 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c32:	4619      	mov	r1, r3
 8011c34:	4620      	mov	r0, r4
 8011c36:	f000 fad7 	bl	80121e8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);   // exp(-2)
 8011c3e:	4852      	ldr	r0, [pc, #328]	; (8011d88 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8011c40:	f7ff fa6b 	bl	801111a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011c44:	4603      	mov	r3, r0
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7ff fa53 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	61bb      	str	r3, [r7, #24]
 8011c50:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8011c54:	f7f1 f935 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011c5e:	f7f1 f93b 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011c62:	4603      	mov	r3, r0
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7f1 f98a 	bl	8002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	69b9      	ldr	r1, [r7, #24]
 8011c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c70:	f000 f8b5 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011c74:	4603      	mov	r3, r0
 8011c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c78:	4619      	mov	r1, r3
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f000 fab4 	bl	80121e8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011c80:	4603      	mov	r3, r0
 8011c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);    // exp(-4)
 8011c84:	4841      	ldr	r0, [pc, #260]	; (8011d8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8011c86:	f7ff fa48 	bl	801111a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7ff fa30 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011c92:	4603      	mov	r3, r0
 8011c94:	617b      	str	r3, [r7, #20]
 8011c96:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8011c9a:	f7f1 f912 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ca4:	f7f1 f918 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7f1 f967 	bl	8002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011cb0:	4604      	mov	r4, r0
 8011cb2:	6979      	ldr	r1, [r7, #20]
 8011cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cb6:	f000 f892 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	f000 fa91 	bl	80121e8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);      // exp(-8)
 8011cca:	4831      	ldr	r0, [pc, #196]	; (8011d90 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8011ccc:	f7ff fa25 	bl	801111a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7ff fa0d 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	613b      	str	r3, [r7, #16]
 8011cdc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8011ce0:	f7f1 f8ef 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011cea:	f7f1 f8f5 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7f1 f944 	bl	8002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	6939      	ldr	r1, [r7, #16]
 8011cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cfc:	f000 f86f 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011d00:	4603      	mov	r3, r0
 8011d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d04:	4619      	mov	r1, r3
 8011d06:	4620      	mov	r0, r4
 8011d08:	f000 fa6e 	bl	80121e8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);         // exp(-16)
 8011d10:	20f2      	movs	r0, #242	; 0xf2
 8011d12:	f7ff fa02 	bl	801111a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011d16:	4603      	mov	r3, r0
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7ff f9ea 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	60fb      	str	r3, [r7, #12]
 8011d22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011d26:	f7f1 f8cc 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011d30:	f7f1 f8d2 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011d34:	4603      	mov	r3, r0
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7f1 f921 	bl	8002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011d3c:	4604      	mov	r4, r0
 8011d3e:	68f9      	ldr	r1, [r7, #12]
 8011d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d42:	f000 f84c 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011d46:	4603      	mov	r3, r0
 8011d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f000 fa4b 	bl	80121e8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011d52:	4603      	mov	r3, r0
 8011d54:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 fa67 	bl	801222a <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	f7ff fd4f 	bl	8011800 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8011d62:	4603      	mov	r3, r0
 8011d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d66:	4619      	mov	r1, r3
 8011d68:	4620      	mov	r0, r4
 8011d6a:	f000 fa3d 	bl	80121e8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8011d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3744      	adds	r7, #68	; 0x44
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd90      	pop	{r4, r7, pc}
 8011d7c:	63afbe7b 	.word	0x63afbe7b
 8011d80:	4da2cbf2 	.word	0x4da2cbf2
 8011d84:	2f16ac6c 	.word	0x2f16ac6c
 8011d88:	1152aaa4 	.word	0x1152aaa4
 8011d8c:	02582ab7 	.word	0x02582ab7
 8011d90:	000afe11 	.word	0x000afe11

08011d94 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8011d94:	b5b0      	push	{r4, r5, r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8011d9c:	1d3b      	adds	r3, r7, #4
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7ff f99c 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011da4:	4603      	mov	r3, r0
 8011da6:	681d      	ldr	r5, [r3, #0]
 8011da8:	f107 030c 	add.w	r3, r7, #12
 8011dac:	4618      	mov	r0, r3
 8011dae:	f000 f80b 	bl	8011dc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8011db2:	4604      	mov	r4, r0
 8011db4:	4628      	mov	r0, r5
 8011db6:	f000 fa4a 	bl	801224e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	6023      	str	r3, [r4, #0]
  return result;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3710      	adds	r7, #16
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bdb0      	pop	{r4, r5, r7, pc}

08011dc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	370c      	adds	r7, #12
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ddc:	4770      	bx	lr

08011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8011dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011de0:	b085      	sub	sp, #20
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
 8011de6:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8011de8:	1d3b      	adds	r3, r7, #4
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7ff f976 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011df0:	4603      	mov	r3, r0
 8011df2:	681d      	ldr	r5, [r3, #0]
 8011df4:	463b      	mov	r3, r7
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7ff f970 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	681e      	ldr	r6, [r3, #0]
 8011e00:	f107 030c 	add.w	r3, r7, #12
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7ff f969 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	4631      	mov	r1, r6
 8011e0e:	4628      	mov	r0, r5
 8011e10:	f7ef fa2e 	bl	8001270 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8011e14:	4603      	mov	r3, r0
 8011e16:	6023      	str	r3, [r4, #0]
  return c;
 8011e18:	68fb      	ldr	r3, [r7, #12]
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3714      	adds	r7, #20
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011e24 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_>:
inline IntegerType RoundingDivideByPOT(IntegerType x, ExponentType exponent) {
 8011e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e26:	b089      	sub	sp, #36	; 0x24
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	6039      	str	r1, [r7, #0]
  assert(exponent <= 31);
 8011e2e:	683a      	ldr	r2, [r7, #0]
 8011e30:	2a1f      	cmp	r2, #31
 8011e32:	d906      	bls.n	8011e42 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0x1e>
 8011e34:	4b2c      	ldr	r3, [pc, #176]	; (8011ee8 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0xc4>)
 8011e36:	4a2d      	ldr	r2, [pc, #180]	; (8011eec <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0xc8>)
 8011e38:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8011e3c:	482c      	ldr	r0, [pc, #176]	; (8011ef0 <_ZN8gemmlowp19RoundingDivideByPOTIljEET_S1_T0_+0xcc>)
 8011e3e:	f006 ff71 	bl	8018d24 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8011e42:	f04f 0101 	mov.w	r1, #1
 8011e46:	f04f 0200 	mov.w	r2, #0
 8011e4a:	6838      	ldr	r0, [r7, #0]
 8011e4c:	f1a0 0620 	sub.w	r6, r0, #32
 8011e50:	f1c0 0520 	rsb	r5, r0, #32
 8011e54:	fa02 f400 	lsl.w	r4, r2, r0
 8011e58:	fa01 f606 	lsl.w	r6, r1, r6
 8011e5c:	4334      	orrs	r4, r6
 8011e5e:	fa21 f505 	lsr.w	r5, r1, r5
 8011e62:	432c      	orrs	r4, r5
 8011e64:	fa01 f300 	lsl.w	r3, r1, r0
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7f1 f829 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011e70:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8011e72:	2000      	movs	r0, #0
 8011e74:	f7f1 f825 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011e78:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8011e7a:	2001      	movs	r0, #1
 8011e7c:	f7f1 f821 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011e80:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8011e82:	69f9      	ldr	r1, [r7, #28]
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f7f1 f827 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011e8a:	6138      	str	r0, [r7, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8011e8c:	2101      	movs	r1, #1
 8011e8e:	69f8      	ldr	r0, [r7, #28]
 8011e90:	f7f1 f830 	bl	8002ef4 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8011e94:	4604      	mov	r4, r0
 8011e96:	69b9      	ldr	r1, [r7, #24]
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7f1 f83a 	bl	8002f12 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	6979      	ldr	r1, [r7, #20]
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7f1 f818 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011ea8:	4603      	mov	r3, r0
  const IntegerType threshold =
 8011eaa:	4619      	mov	r1, r3
 8011eac:	4620      	mov	r0, r4
 8011eae:	f7f1 f844 	bl	8002f3a <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8011eb2:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f7f1 f81b 	bl	8002ef4 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	68f9      	ldr	r1, [r7, #12]
 8011ec2:	6938      	ldr	r0, [r7, #16]
 8011ec4:	f7f1 f847 	bl	8002f56 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	6979      	ldr	r1, [r7, #20]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7f1 f803 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011ed2:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	f7f1 f82f 	bl	8002f3a <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8011edc:	4603      	mov	r3, r0
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3724      	adds	r7, #36	; 0x24
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	0801ee64 	.word	0x0801ee64
 8011eec:	080264e8 	.word	0x080264e8
 8011ef0:	0801ee48 	.word	0x0801ee48

08011ef4 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8011ef4:	b480      	push	{r7}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f993 2000 	ldrsb.w	r2, [r3]
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	f993 3000 	ldrsb.w	r3, [r3]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	da01      	bge.n	8011f12 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	e000      	b.n	8011f14 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8011f12:	687b      	ldr	r3, [r7, #4]
    }
 8011f14:	4618      	mov	r0, r3
 8011f16:	370c      	adds	r7, #12
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr

08011f20 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8011f20:	b580      	push	{r7, lr}
 8011f22:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8011f24:	f7ef f96c 	bl	8001200 <_ZNSt14numeric_limitsIlE3maxEv>
 8011f28:	4603      	mov	r3, r0
  }
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	bd80      	pop	{r7, pc}

08011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8011f2e:	b480      	push	{r7}
 8011f30:	b083      	sub	sp, #12
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	4618      	mov	r0, r3
 8011f3a:	370c      	adds	r7, #12
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f42:	4770      	bx	lr

08011f44 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8011f4c:	f107 030c 	add.w	r3, r7, #12
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7ff ffec 	bl	8011f2e <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8011f56:	4602      	mov	r2, r0
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6013      	str	r3, [r2, #0]
    return retval;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
  }
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}

08011f66 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8011f66:	b480      	push	{r7}
 8011f68:	b083      	sub	sp, #12
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	6078      	str	r0, [r7, #4]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	370c      	adds	r7, #12
 8011f74:	46bd      	mov	sp, r7
 8011f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7a:	4770      	bx	lr

08011f7c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f000 f96f 	bl	8012268 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8011f8a:	4603      	mov	r3, r0
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3708      	adds	r7, #8
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8011f94:	b480      	push	{r7}
 8011f96:	b083      	sub	sp, #12
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b082      	sub	sp, #8
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f99a 	bl	80122ec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8011fb8:	4603      	mov	r3, r0
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b082      	sub	sp, #8
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8011fca:	2101      	movs	r1, #1
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7f0 fc83 	bl	80028d8 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 8011fd2:	4603      	mov	r3, r0
  }
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3708      	adds	r7, #8
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}

08011fdc <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8011fdc:	b590      	push	{r4, r7, lr}
 8011fde:	b085      	sub	sp, #20
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8011fe4:	f107 030c 	add.w	r3, r7, #12
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7ff feed 	bl	8011dc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8011fee:	4604      	mov	r4, r0
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7f0 ff66 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	6023      	str	r3, [r4, #0]
    return retval;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
  }
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3714      	adds	r7, #20
 8012000:	46bd      	mov	sp, r7
 8012002:	bd90      	pop	{r4, r7, pc}

08012004 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8012004:	b480      	push	{r7}
 8012006:	b083      	sub	sp, #12
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	4618      	mov	r0, r3
 8012010:	370c      	adds	r7, #12
 8012012:	46bd      	mov	sp, r7
 8012014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012018:	4770      	bx	lr

0801201a <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801201a:	b580      	push	{r7, lr}
 801201c:	b084      	sub	sp, #16
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8012022:	f107 030c 	add.w	r3, r7, #12
 8012026:	4618      	mov	r0, r3
 8012028:	f7ff fece 	bl	8011dc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801202c:	4602      	mov	r2, r0
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6013      	str	r3, [r2, #0]
    return retval;
 8012032:	68fb      	ldr	r3, [r7, #12]
  }
 8012034:	4618      	mov	r0, r3
 8012036:	3710      	adds	r7, #16
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 801203c:	b580      	push	{r7, lr}
 801203e:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8012040:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8012044:	f000 f803 	bl	801204e <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8012048:	4603      	mov	r3, r0
  }
 801204a:	4618      	mov	r0, r3
 801204c:	bd80      	pop	{r7, pc}

0801204e <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801204e:	b590      	push	{r4, r7, lr}
 8012050:	b085      	sub	sp, #20
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8012056:	f107 030c 	add.w	r3, r7, #12
 801205a:	4618      	mov	r0, r3
 801205c:	f7ff ffd2 	bl	8012004 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012060:	4604      	mov	r4, r0
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f7f0 ff2d 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012068:	4603      	mov	r3, r0
 801206a:	6023      	str	r3, [r4, #0]
    return retval;
 801206c:	68fb      	ldr	r3, [r7, #12]
  }
 801206e:	4618      	mov	r0, r3
 8012070:	3714      	adds	r7, #20
 8012072:	46bd      	mov	sp, r7
 8012074:	bd90      	pop	{r4, r7, pc}

08012076 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8012076:	b590      	push	{r4, r7, lr}
 8012078:	b083      	sub	sp, #12
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
 801207e:	6039      	str	r1, [r7, #0]
 8012080:	1d3b      	adds	r3, r7, #4
 8012082:	4618      	mov	r0, r3
 8012084:	f7ff ffbe 	bl	8012004 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012088:	4603      	mov	r3, r0
 801208a:	681c      	ldr	r4, [r3, #0]
 801208c:	463b      	mov	r3, r7
 801208e:	4618      	mov	r0, r3
 8012090:	f7ff ffb8 	bl	8012004 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012094:	4603      	mov	r3, r0
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	4619      	mov	r1, r3
 801209a:	4620      	mov	r0, r4
 801209c:	f7ff fcd9 	bl	8011a52 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 80120a0:	4603      	mov	r3, r0
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7ff fcff 	bl	8011aa6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80120a8:	4603      	mov	r3, r0
 80120aa:	4618      	mov	r0, r3
 80120ac:	370c      	adds	r7, #12
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd90      	pop	{r4, r7, pc}

080120b2 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 80120b2:	b590      	push	{r4, r7, lr}
 80120b4:	b083      	sub	sp, #12
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	6078      	str	r0, [r7, #4]
 80120ba:	6039      	str	r1, [r7, #0]
 80120bc:	1d3b      	adds	r3, r7, #4
 80120be:	4618      	mov	r0, r3
 80120c0:	f7ff ffa0 	bl	8012004 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80120c4:	4603      	mov	r3, r0
 80120c6:	681c      	ldr	r4, [r3, #0]
 80120c8:	463b      	mov	r3, r7
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7ff ff9a 	bl	8012004 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80120d0:	4603      	mov	r3, r0
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	4619      	mov	r1, r3
 80120d6:	4620      	mov	r0, r4
 80120d8:	f7f0 fefe 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80120dc:	4603      	mov	r3, r0
 80120de:	4618      	mov	r0, r3
 80120e0:	f7ff fce1 	bl	8011aa6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80120e4:	4603      	mov	r3, r0
 80120e6:	4618      	mov	r0, r3
 80120e8:	370c      	adds	r7, #12
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd90      	pop	{r4, r7, pc}

080120ee <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80120ee:	b5b0      	push	{r4, r5, r7, lr}
 80120f0:	b084      	sub	sp, #16
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80120f6:	1d3b      	adds	r3, r7, #4
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7ff ff83 	bl	8012004 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80120fe:	4603      	mov	r3, r0
 8012100:	681d      	ldr	r5, [r3, #0]
 8012102:	f107 030c 	add.w	r3, r7, #12
 8012106:	4618      	mov	r0, r3
 8012108:	f7fe ffe8 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801210c:	4604      	mov	r4, r0
 801210e:	4628      	mov	r0, r5
 8012110:	f000 f98e 	bl	8012430 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 8012114:	4603      	mov	r3, r0
 8012116:	6023      	str	r3, [r4, #0]
  return result;
 8012118:	68fb      	ldr	r3, [r7, #12]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3710      	adds	r7, #16
 801211e:	46bd      	mov	sp, r7
 8012120:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012124 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8012124:	b580      	push	{r7, lr}
 8012126:	b08a      	sub	sp, #40	; 0x28
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 801212c:	482c      	ldr	r0, [pc, #176]	; (80121e0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801212e:	f7fe fff4 	bl	801111a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012132:	4603      	mov	r3, r0
  const F constant_term =
 8012134:	4618      	mov	r0, r3
 8012136:	f7fe ffdc 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801213a:	4603      	mov	r3, r0
 801213c:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801213e:	4829      	ldr	r0, [pc, #164]	; (80121e4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8012140:	f7fe ffeb 	bl	801111a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012144:	4603      	mov	r3, r0
  const F constant_1_over_3 =
 8012146:	4618      	mov	r0, r3
 8012148:	f7fe ffd3 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801214c:	4603      	mov	r3, r0
 801214e:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8012150:	f000 f97a 	bl	8012448 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8012154:	4603      	mov	r3, r0
 8012156:	4619      	mov	r1, r3
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f000 f97e 	bl	801245a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801215e:	4603      	mov	r3, r0
 8012160:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8012162:	69f9      	ldr	r1, [r7, #28]
 8012164:	69f8      	ldr	r0, [r7, #28]
 8012166:	f7ff fe3a 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801216a:	4603      	mov	r3, r0
 801216c:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801216e:	69f9      	ldr	r1, [r7, #28]
 8012170:	69b8      	ldr	r0, [r7, #24]
 8012172:	f7ff fe34 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012176:	4603      	mov	r3, r0
 8012178:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 801217a:	69b9      	ldr	r1, [r7, #24]
 801217c:	69b8      	ldr	r0, [r7, #24]
 801217e:	f7ff fe2e 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012182:	4603      	mov	r3, r0
 8012184:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8012186:	6938      	ldr	r0, [r7, #16]
 8012188:	f000 f985 	bl	8012496 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801218c:	4603      	mov	r3, r0
 801218e:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8012190:	6979      	ldr	r1, [r7, #20]
 8012192:	68f8      	ldr	r0, [r7, #12]
 8012194:	f000 f961 	bl	801245a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012198:	4603      	mov	r3, r0
 801219a:	6a39      	ldr	r1, [r7, #32]
 801219c:	4618      	mov	r0, r3
 801219e:	f7ff fe1e 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80121a2:	4603      	mov	r3, r0
 80121a4:	69b9      	ldr	r1, [r7, #24]
 80121a6:	4618      	mov	r0, r3
 80121a8:	f000 f957 	bl	801245a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80121ac:	4603      	mov	r3, r0
  F x4_over_24_plus_x3_over_6_plus_x2_over_2 =
 80121ae:	4618      	mov	r0, r3
 80121b0:	f000 f987 	bl	80124c2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 80121b4:	4603      	mov	r3, r0
 80121b6:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 80121b8:	68b9      	ldr	r1, [r7, #8]
 80121ba:	69f8      	ldr	r0, [r7, #28]
 80121bc:	f000 f94d 	bl	801245a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80121c0:	4603      	mov	r3, r0
 80121c2:	4619      	mov	r1, r3
 80121c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121c6:	f7ff fe0a 	bl	8011dde <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80121ca:	4603      	mov	r3, r0
      constant_term * (x + x4_over_24_plus_x3_over_6_plus_x2_over_2));
 80121cc:	4619      	mov	r1, r3
 80121ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121d0:	f000 f98d 	bl	80124ee <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80121d4:	4603      	mov	r3, r0
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3728      	adds	r7, #40	; 0x28
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	70f5a894 	.word	0x70f5a894
 80121e4:	2aaaaaab 	.word	0x2aaaaaab

080121e8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 80121e8:	b590      	push	{r4, r7, lr}
 80121ea:	b085      	sub	sp, #20
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	60b9      	str	r1, [r7, #8]
 80121f2:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 80121f4:	f107 0308 	add.w	r3, r7, #8
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fe ff6f 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80121fe:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8012200:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8012202:	1d3b      	adds	r3, r7, #4
 8012204:	4618      	mov	r0, r3
 8012206:	f7fe ff69 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801220a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	461a      	mov	r2, r3
 8012210:	4621      	mov	r1, r4
 8012212:	68f8      	ldr	r0, [r7, #12]
 8012214:	f000 f8ef 	bl	80123f6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012218:	4603      	mov	r3, r0
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801221a:	4618      	mov	r0, r3
 801221c:	f7fe feec 	bl	8010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012220:	4603      	mov	r3, r0
}
 8012222:	4618      	mov	r0, r3
 8012224:	3714      	adds	r7, #20
 8012226:	46bd      	mov	sp, r7
 8012228:	bd90      	pop	{r4, r7, pc}

0801222a <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801222a:	b580      	push	{r7, lr}
 801222c:	b082      	sub	sp, #8
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
 8012232:	1d3b      	adds	r3, r7, #4
 8012234:	4618      	mov	r0, r3
 8012236:	f7ff fee5 	bl	8012004 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801223a:	4603      	mov	r3, r0
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	4618      	mov	r0, r3
 8012240:	f000 f973 	bl	801252a <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8012244:	4603      	mov	r3, r0
 8012246:	4618      	mov	r0, r3
 8012248:	3708      	adds	r7, #8
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}

0801224e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801224e:	b580      	push	{r7, lr}
 8012250:	b082      	sub	sp, #8
 8012252:	af00      	add	r7, sp, #0
 8012254:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f000 f979 	bl	801254e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801225c:	4603      	mov	r3, r0
}
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
	...

08012268 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012268:	b580      	push	{r7, lr}
 801226a:	b08a      	sub	sp, #40	; 0x28
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8012270:	f7ee ffbd 	bl	80011ee <_ZNSt14numeric_limitsIlE3minEv>
 8012274:	4603      	mov	r3, r0
    const IntegerType min =
 8012276:	4618      	mov	r0, r3
 8012278:	f7f0 fe23 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801227c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801227e:	f7ee ffbf 	bl	8001200 <_ZNSt14numeric_limitsIlE3maxEv>
 8012282:	4603      	mov	r3, r0
    const IntegerType max =
 8012284:	4618      	mov	r0, r3
 8012286:	f7f0 fe1c 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801228a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801228c:	2320      	movs	r3, #32
 801228e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8012290:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012294:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8012296:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801229a:	f7f0 fe12 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801229e:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 80122a0:	4619      	mov	r1, r3
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f7f0 fe57 	bl	8002f56 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80122a8:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80122aa:	480f      	ldr	r0, [pc, #60]	; (80122e8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 80122ac:	f7f0 fe09 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80122b0:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 80122b2:	4619      	mov	r1, r3
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f7f0 fe2c 	bl	8002f12 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80122ba:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80122bc:	2102      	movs	r1, #2
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 f856 	bl	8012370 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>
 80122c4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80122c6:	68fa      	ldr	r2, [r7, #12]
 80122c8:	6a39      	ldr	r1, [r7, #32]
 80122ca:	6978      	ldr	r0, [r7, #20]
 80122cc:	f000 f893 	bl	80123f6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80122d0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80122d2:	68fa      	ldr	r2, [r7, #12]
 80122d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80122d6:	6938      	ldr	r0, [r7, #16]
 80122d8:	f000 f88d 	bl	80123f6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80122dc:	60f8      	str	r0, [r7, #12]
    return result;
 80122de:	68fb      	ldr	r3, [r7, #12]
  }
 80122e0:	4618      	mov	r0, r3
 80122e2:	3728      	adds	r7, #40	; 0x28
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	e0000001 	.word	0xe0000001

080122ec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b08a      	sub	sp, #40	; 0x28
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80122f4:	f7ee ff7b 	bl	80011ee <_ZNSt14numeric_limitsIlE3minEv>
 80122f8:	4603      	mov	r3, r0
    const IntegerType min =
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7f0 fde1 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012300:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8012302:	f7ee ff7d 	bl	8001200 <_ZNSt14numeric_limitsIlE3maxEv>
 8012306:	4603      	mov	r3, r0
    const IntegerType max =
 8012308:	4618      	mov	r0, r3
 801230a:	f7f0 fdda 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801230e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8012310:	2320      	movs	r3, #32
 8012312:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8012314:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012318:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801231a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801231e:	f7f0 fdd0 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012322:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 8012324:	4619      	mov	r1, r3
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7f0 fe15 	bl	8002f56 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801232c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801232e:	480f      	ldr	r0, [pc, #60]	; (801236c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8012330:	f7f0 fdc7 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012334:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 8012336:	4619      	mov	r1, r3
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f7f0 fdea 	bl	8002f12 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801233e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8012340:	2101      	movs	r1, #1
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f000 f814 	bl	8012370 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>
 8012348:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801234a:	68fa      	ldr	r2, [r7, #12]
 801234c:	6a39      	ldr	r1, [r7, #32]
 801234e:	6978      	ldr	r0, [r7, #20]
 8012350:	f000 f851 	bl	80123f6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012354:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8012356:	68fa      	ldr	r2, [r7, #12]
 8012358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801235a:	6938      	ldr	r0, [r7, #16]
 801235c:	f000 f84b 	bl	80123f6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012360:	60f8      	str	r0, [r7, #12]
    return result;
 8012362:	68fb      	ldr	r3, [r7, #12]
  }
 8012364:	4618      	mov	r0, r3
 8012366:	3728      	adds	r7, #40	; 0x28
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}
 801236c:	c0000001 	.word	0xc0000001

08012370 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>:
tIntegerType ShiftLeft(tIntegerType a, OffsetType offset) {
 8012370:	b490      	push	{r4, r7}
 8012372:	b088      	sub	sp, #32
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8012380:	e9c7 3406 	strd	r3, r4, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8012384:	2201      	movs	r2, #1
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	fa02 f303 	lsl.w	r3, r2, r3
 801238c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8012390:	69fa      	ldr	r2, [r7, #28]
 8012392:	fb03 f102 	mul.w	r1, r3, r2
 8012396:	69ba      	ldr	r2, [r7, #24]
 8012398:	fb04 f202 	mul.w	r2, r4, r2
 801239c:	440a      	add	r2, r1
 801239e:	69b9      	ldr	r1, [r7, #24]
 80123a0:	fba1 3403 	umull	r3, r4, r1, r3
 80123a4:	4422      	add	r2, r4
 80123a6:	4614      	mov	r4, r2
 80123a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80123ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 80123b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80123b4:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 80123b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80123ba:	60bb      	str	r3, [r7, #8]
             ? min
 80123bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80123c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80123c4:	f174 33ff 	sbcs.w	r3, r4, #4294967295
 80123c8:	db0e      	blt.n	80123e8 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x78>
             : wide_shifted > max ? max
 80123ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80123ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80123d2:	f04f 0200 	mov.w	r2, #0
 80123d6:	4299      	cmp	r1, r3
 80123d8:	eb72 0304 	sbcs.w	r3, r2, r4
 80123dc:	db01      	blt.n	80123e2 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x72>
 80123de:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 80123e0:	e004      	b.n	80123ec <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x7c>
             : wide_shifted > max ? max
 80123e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 80123e6:	e001      	b.n	80123ec <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_+0x7c>
             ? min
 80123e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3720      	adds	r7, #32
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bc90      	pop	{r4, r7}
 80123f4:	4770      	bx	lr

080123f6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 80123f6:	b590      	push	{r4, r7, lr}
 80123f8:	b085      	sub	sp, #20
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	60f8      	str	r0, [r7, #12]
 80123fe:	60b9      	str	r1, [r7, #8]
 8012400:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 8012402:	68b9      	ldr	r1, [r7, #8]
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	f7f0 fd67 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801240a:	4604      	mov	r4, r0
 801240c:	68f8      	ldr	r0, [r7, #12]
 801240e:	f7f0 fdc7 	bl	8002fa0 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8012412:	4603      	mov	r3, r0
 8012414:	6879      	ldr	r1, [r7, #4]
 8012416:	4618      	mov	r0, r3
 8012418:	f7f0 fd5e 	bl	8002ed8 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801241c:	4603      	mov	r3, r0
 801241e:	4619      	mov	r1, r3
 8012420:	4620      	mov	r0, r4
 8012422:	f000 f8a1 	bl	8012568 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8012426:	4603      	mov	r3, r0
}
 8012428:	4618      	mov	r0, r3
 801242a:	3714      	adds	r7, #20
 801242c:	46bd      	mov	sp, r7
 801242e:	bd90      	pop	{r4, r7, pc}

08012430 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f000 f8a3 	bl	8012584 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801243e:	4603      	mov	r3, r0
}
 8012440:	4618      	mov	r0, r3
 8012442:	3708      	adds	r7, #8
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8012448:	b580      	push	{r7, lr}
 801244a:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801244c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8012450:	f7fe fe4f 	bl	80110f2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012454:	4603      	mov	r3, r0
  }
 8012456:	4618      	mov	r0, r3
 8012458:	bd80      	pop	{r7, pc}

0801245a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801245a:	b590      	push	{r4, r7, lr}
 801245c:	b083      	sub	sp, #12
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
 8012462:	6039      	str	r1, [r7, #0]
 8012464:	1d3b      	adds	r3, r7, #4
 8012466:	4618      	mov	r0, r3
 8012468:	f7fe fe38 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801246c:	4603      	mov	r3, r0
 801246e:	681c      	ldr	r4, [r3, #0]
 8012470:	463b      	mov	r3, r7
 8012472:	4618      	mov	r0, r3
 8012474:	f7fe fe32 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012478:	4603      	mov	r3, r0
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4619      	mov	r1, r3
 801247e:	4620      	mov	r0, r4
 8012480:	f7f0 fd5b 	bl	8002f3a <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012484:	4603      	mov	r3, r0
 8012486:	4618      	mov	r0, r3
 8012488:	f7fe fdb6 	bl	8010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801248c:	4603      	mov	r3, r0
 801248e:	4618      	mov	r0, r3
 8012490:	370c      	adds	r7, #12
 8012492:	46bd      	mov	sp, r7
 8012494:	bd90      	pop	{r4, r7, pc}

08012496 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8012496:	b580      	push	{r7, lr}
 8012498:	b082      	sub	sp, #8
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801249e:	1d3b      	adds	r3, r7, #4
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fe fe1b 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80124a6:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4618      	mov	r0, r3
 80124ac:	f000 f8ac 	bl	8012608 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 80124b0:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7fe fda0 	bl	8010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80124b8:	4603      	mov	r3, r0
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3708      	adds	r7, #8
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b082      	sub	sp, #8
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80124ca:	1d3b      	adds	r3, r7, #4
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fe fe05 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80124d2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7ff faaf 	bl	8011a3a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 80124dc:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fe fd8a 	bl	8010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80124e4:	4603      	mov	r3, r0
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3708      	adds	r7, #8
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 80124ee:	b590      	push	{r4, r7, lr}
 80124f0:	b083      	sub	sp, #12
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
 80124f6:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 80124f8:	1d3b      	adds	r3, r7, #4
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fe fdee 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012500:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8012502:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8012504:	463b      	mov	r3, r7
 8012506:	4618      	mov	r0, r3
 8012508:	f7fe fde8 	bl	80110dc <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801250c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4619      	mov	r1, r3
 8012512:	4620      	mov	r0, r4
 8012514:	f000 f884 	bl	8012620 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8012518:	4603      	mov	r3, r0
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801251a:	4618      	mov	r0, r3
 801251c:	f7fe fd6c 	bl	8010ff8 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012520:	4603      	mov	r3, r0
}
 8012522:	4618      	mov	r0, r3
 8012524:	370c      	adds	r7, #12
 8012526:	46bd      	mov	sp, r7
 8012528:	bd90      	pop	{r4, r7, pc}

0801252a <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 801252a:	b580      	push	{r7, lr}
 801252c:	b082      	sub	sp, #8
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2b00      	cmp	r3, #0
 8012536:	bf0c      	ite	eq
 8012538:	2301      	moveq	r3, #1
 801253a:	2300      	movne	r3, #0
 801253c:	b2db      	uxtb	r3, r3
 801253e:	4618      	mov	r0, r3
 8012540:	f7f0 fd1d 	bl	8002f7e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012544:	4603      	mov	r3, r0
}
 8012546:	4618      	mov	r0, r3
 8012548:	3708      	adds	r7, #8
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}

0801254e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801254e:	b580      	push	{r7, lr}
 8012550:	b082      	sub	sp, #8
 8012552:	af00      	add	r7, sp, #0
 8012554:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8012556:	210c      	movs	r1, #12
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f7f0 f9bd 	bl	80028d8 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 801255e:	4603      	mov	r3, r0
  }
 8012560:	4618      	mov	r0, r3
 8012562:	3708      	adds	r7, #8
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 8012568:	b480      	push	{r7}
 801256a:	b083      	sub	sp, #12
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	4053      	eors	r3, r2
}
 8012578:	4618      	mov	r0, r3
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012584:	b580      	push	{r7, lr}
 8012586:	b08a      	sub	sp, #40	; 0x28
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801258c:	f7ee fe2f 	bl	80011ee <_ZNSt14numeric_limitsIlE3minEv>
 8012590:	4603      	mov	r3, r0
    const IntegerType min =
 8012592:	4618      	mov	r0, r3
 8012594:	f7f0 fc95 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012598:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801259a:	f7ee fe31 	bl	8001200 <_ZNSt14numeric_limitsIlE3maxEv>
 801259e:	4603      	mov	r3, r0
    const IntegerType max =
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7f0 fc8e 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80125a6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80125a8:	2320      	movs	r3, #32
 80125aa:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80125ac:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80125b0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80125b2:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 80125b6:	f7f0 fc84 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80125ba:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 80125bc:	4619      	mov	r1, r3
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f7f0 fcc9 	bl	8002f56 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80125c4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80125c6:	480f      	ldr	r0, [pc, #60]	; (8012604 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 80125c8:	f7f0 fc7b 	bl	8002ec2 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80125cc:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 80125ce:	4619      	mov	r1, r3
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7f0 fc9e 	bl	8002f12 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80125d6:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80125d8:	2105      	movs	r1, #5
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f7ff fec8 	bl	8012370 <_ZN8gemmlowp9ShiftLeftIliEET_S1_T0_>
 80125e0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80125e2:	68fa      	ldr	r2, [r7, #12]
 80125e4:	6a39      	ldr	r1, [r7, #32]
 80125e6:	6978      	ldr	r0, [r7, #20]
 80125e8:	f7ff ff05 	bl	80123f6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80125ec:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80125ee:	68fa      	ldr	r2, [r7, #12]
 80125f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80125f2:	6938      	ldr	r0, [r7, #16]
 80125f4:	f7ff feff 	bl	80123f6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80125f8:	60f8      	str	r0, [r7, #12]
    return result;
 80125fa:	68fb      	ldr	r3, [r7, #12]
  }
 80125fc:	4618      	mov	r0, r3
 80125fe:	3728      	adds	r7, #40	; 0x28
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}
 8012604:	fc000001 	.word	0xfc000001

08012608 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f000 f813 	bl	801263c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8012616:	4603      	mov	r3, r0
}
 8012618:	4618      	mov	r0, r3
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
                                                                             b);
 801262a:	6839      	ldr	r1, [r7, #0]
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f000 f812 	bl	8012656 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8012632:	4603      	mov	r3, r0
}
 8012634:	4618      	mov	r0, r3
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8012644:	2102      	movs	r1, #2
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f7f0 f946 	bl	80028d8 <_ZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_>
 801264c:	4603      	mov	r3, r0
  }
 801264e:	4618      	mov	r0, r3
 8012650:	3708      	adds	r7, #8
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}

08012656 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8012656:	b580      	push	{r7, lr}
 8012658:	b082      	sub	sp, #8
 801265a:	af00      	add	r7, sp, #0
 801265c:	6078      	str	r0, [r7, #4]
 801265e:	6039      	str	r1, [r7, #0]
 8012660:	6839      	ldr	r1, [r7, #0]
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f7f0 fc69 	bl	8002f3a <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012668:	4603      	mov	r3, r0
 801266a:	4618      	mov	r0, r3
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
	...

08012674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801267a:	4b0f      	ldr	r3, [pc, #60]	; (80126b8 <HAL_MspInit+0x44>)
 801267c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801267e:	4a0e      	ldr	r2, [pc, #56]	; (80126b8 <HAL_MspInit+0x44>)
 8012680:	f043 0301 	orr.w	r3, r3, #1
 8012684:	6613      	str	r3, [r2, #96]	; 0x60
 8012686:	4b0c      	ldr	r3, [pc, #48]	; (80126b8 <HAL_MspInit+0x44>)
 8012688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801268a:	f003 0301 	and.w	r3, r3, #1
 801268e:	607b      	str	r3, [r7, #4]
 8012690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012692:	4b09      	ldr	r3, [pc, #36]	; (80126b8 <HAL_MspInit+0x44>)
 8012694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012696:	4a08      	ldr	r2, [pc, #32]	; (80126b8 <HAL_MspInit+0x44>)
 8012698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801269c:	6593      	str	r3, [r2, #88]	; 0x58
 801269e:	4b06      	ldr	r3, [pc, #24]	; (80126b8 <HAL_MspInit+0x44>)
 80126a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126a6:	603b      	str	r3, [r7, #0]
 80126a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80126aa:	bf00      	nop
 80126ac:	370c      	adds	r7, #12
 80126ae:	46bd      	mov	sp, r7
 80126b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b4:	4770      	bx	lr
 80126b6:	bf00      	nop
 80126b8:	40021000 	.word	0x40021000

080126bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b08a      	sub	sp, #40	; 0x28
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80126c4:	f107 0314 	add.w	r3, r7, #20
 80126c8:	2200      	movs	r2, #0
 80126ca:	601a      	str	r2, [r3, #0]
 80126cc:	605a      	str	r2, [r3, #4]
 80126ce:	609a      	str	r2, [r3, #8]
 80126d0:	60da      	str	r2, [r3, #12]
 80126d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	4a15      	ldr	r2, [pc, #84]	; (8012730 <HAL_ADC_MspInit+0x74>)
 80126da:	4293      	cmp	r3, r2
 80126dc:	d124      	bne.n	8012728 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80126de:	4b15      	ldr	r3, [pc, #84]	; (8012734 <HAL_ADC_MspInit+0x78>)
 80126e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126e2:	4a14      	ldr	r2, [pc, #80]	; (8012734 <HAL_ADC_MspInit+0x78>)
 80126e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80126e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80126ea:	4b12      	ldr	r3, [pc, #72]	; (8012734 <HAL_ADC_MspInit+0x78>)
 80126ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80126f2:	613b      	str	r3, [r7, #16]
 80126f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80126f6:	4b0f      	ldr	r3, [pc, #60]	; (8012734 <HAL_ADC_MspInit+0x78>)
 80126f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126fa:	4a0e      	ldr	r2, [pc, #56]	; (8012734 <HAL_ADC_MspInit+0x78>)
 80126fc:	f043 0301 	orr.w	r3, r3, #1
 8012700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012702:	4b0c      	ldr	r3, [pc, #48]	; (8012734 <HAL_ADC_MspInit+0x78>)
 8012704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012706:	f003 0301 	and.w	r3, r3, #1
 801270a:	60fb      	str	r3, [r7, #12]
 801270c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 801270e:	2380      	movs	r3, #128	; 0x80
 8012710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8012712:	230b      	movs	r3, #11
 8012714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012716:	2300      	movs	r3, #0
 8012718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801271a:	f107 0314 	add.w	r3, r7, #20
 801271e:	4619      	mov	r1, r3
 8012720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012724:	f001 fe32 	bl	801438c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8012728:	bf00      	nop
 801272a:	3728      	adds	r7, #40	; 0x28
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	50040000 	.word	0x50040000
 8012734:	40021000 	.word	0x40021000

08012738 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8012738:	b480      	push	{r7}
 801273a:	b085      	sub	sp, #20
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a0a      	ldr	r2, [pc, #40]	; (8012770 <HAL_CRC_MspInit+0x38>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d10b      	bne.n	8012762 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 801274a:	4b0a      	ldr	r3, [pc, #40]	; (8012774 <HAL_CRC_MspInit+0x3c>)
 801274c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801274e:	4a09      	ldr	r2, [pc, #36]	; (8012774 <HAL_CRC_MspInit+0x3c>)
 8012750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012754:	6493      	str	r3, [r2, #72]	; 0x48
 8012756:	4b07      	ldr	r3, [pc, #28]	; (8012774 <HAL_CRC_MspInit+0x3c>)
 8012758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801275e:	60fb      	str	r3, [r7, #12]
 8012760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8012762:	bf00      	nop
 8012764:	3714      	adds	r7, #20
 8012766:	46bd      	mov	sp, r7
 8012768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276c:	4770      	bx	lr
 801276e:	bf00      	nop
 8012770:	40023000 	.word	0x40023000
 8012774:	40021000 	.word	0x40021000

08012778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8012778:	b480      	push	{r7}
 801277a:	b085      	sub	sp, #20
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4a13      	ldr	r2, [pc, #76]	; (80127d4 <HAL_TIM_Base_MspInit+0x5c>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d10c      	bne.n	80127a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801278a:	4b13      	ldr	r3, [pc, #76]	; (80127d8 <HAL_TIM_Base_MspInit+0x60>)
 801278c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801278e:	4a12      	ldr	r2, [pc, #72]	; (80127d8 <HAL_TIM_Base_MspInit+0x60>)
 8012790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012794:	6613      	str	r3, [r2, #96]	; 0x60
 8012796:	4b10      	ldr	r3, [pc, #64]	; (80127d8 <HAL_TIM_Base_MspInit+0x60>)
 8012798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801279a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801279e:	60fb      	str	r3, [r7, #12]
 80127a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80127a2:	e010      	b.n	80127c6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	4a0c      	ldr	r2, [pc, #48]	; (80127dc <HAL_TIM_Base_MspInit+0x64>)
 80127aa:	4293      	cmp	r3, r2
 80127ac:	d10b      	bne.n	80127c6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80127ae:	4b0a      	ldr	r3, [pc, #40]	; (80127d8 <HAL_TIM_Base_MspInit+0x60>)
 80127b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80127b2:	4a09      	ldr	r2, [pc, #36]	; (80127d8 <HAL_TIM_Base_MspInit+0x60>)
 80127b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80127b8:	6613      	str	r3, [r2, #96]	; 0x60
 80127ba:	4b07      	ldr	r3, [pc, #28]	; (80127d8 <HAL_TIM_Base_MspInit+0x60>)
 80127bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80127be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80127c2:	60bb      	str	r3, [r7, #8]
 80127c4:	68bb      	ldr	r3, [r7, #8]
}
 80127c6:	bf00      	nop
 80127c8:	3714      	adds	r7, #20
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr
 80127d2:	bf00      	nop
 80127d4:	40012c00 	.word	0x40012c00
 80127d8:	40021000 	.word	0x40021000
 80127dc:	40014400 	.word	0x40014400

080127e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b08a      	sub	sp, #40	; 0x28
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80127e8:	f107 0314 	add.w	r3, r7, #20
 80127ec:	2200      	movs	r2, #0
 80127ee:	601a      	str	r2, [r3, #0]
 80127f0:	605a      	str	r2, [r3, #4]
 80127f2:	609a      	str	r2, [r3, #8]
 80127f4:	60da      	str	r2, [r3, #12]
 80127f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4a20      	ldr	r2, [pc, #128]	; (8012880 <HAL_UART_MspInit+0xa0>)
 80127fe:	4293      	cmp	r3, r2
 8012800:	d13a      	bne.n	8012878 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8012802:	4b20      	ldr	r3, [pc, #128]	; (8012884 <HAL_UART_MspInit+0xa4>)
 8012804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012806:	4a1f      	ldr	r2, [pc, #124]	; (8012884 <HAL_UART_MspInit+0xa4>)
 8012808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801280c:	6593      	str	r3, [r2, #88]	; 0x58
 801280e:	4b1d      	ldr	r3, [pc, #116]	; (8012884 <HAL_UART_MspInit+0xa4>)
 8012810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012816:	613b      	str	r3, [r7, #16]
 8012818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801281a:	4b1a      	ldr	r3, [pc, #104]	; (8012884 <HAL_UART_MspInit+0xa4>)
 801281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801281e:	4a19      	ldr	r2, [pc, #100]	; (8012884 <HAL_UART_MspInit+0xa4>)
 8012820:	f043 0301 	orr.w	r3, r3, #1
 8012824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012826:	4b17      	ldr	r3, [pc, #92]	; (8012884 <HAL_UART_MspInit+0xa4>)
 8012828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801282a:	f003 0301 	and.w	r3, r3, #1
 801282e:	60fb      	str	r3, [r7, #12]
 8012830:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8012832:	2304      	movs	r3, #4
 8012834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012836:	2302      	movs	r3, #2
 8012838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801283a:	2300      	movs	r3, #0
 801283c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801283e:	2303      	movs	r3, #3
 8012840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012842:	2307      	movs	r3, #7
 8012844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012846:	f107 0314 	add.w	r3, r7, #20
 801284a:	4619      	mov	r1, r3
 801284c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012850:	f001 fd9c 	bl	801438c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8012854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801285a:	2302      	movs	r3, #2
 801285c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801285e:	2300      	movs	r3, #0
 8012860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012862:	2303      	movs	r3, #3
 8012864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8012866:	2303      	movs	r3, #3
 8012868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801286a:	f107 0314 	add.w	r3, r7, #20
 801286e:	4619      	mov	r1, r3
 8012870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012874:	f001 fd8a 	bl	801438c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8012878:	bf00      	nop
 801287a:	3728      	adds	r7, #40	; 0x28
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	40004400 	.word	0x40004400
 8012884:	40021000 	.word	0x40021000

08012888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012888:	b480      	push	{r7}
 801288a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801288c:	bf00      	nop
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr

08012896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012896:	b480      	push	{r7}
 8012898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801289a:	e7fe      	b.n	801289a <HardFault_Handler+0x4>

0801289c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801289c:	b480      	push	{r7}
 801289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80128a0:	e7fe      	b.n	80128a0 <MemManage_Handler+0x4>

080128a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80128a2:	b480      	push	{r7}
 80128a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80128a6:	e7fe      	b.n	80128a6 <BusFault_Handler+0x4>

080128a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80128a8:	b480      	push	{r7}
 80128aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80128ac:	e7fe      	b.n	80128ac <UsageFault_Handler+0x4>

080128ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80128ae:	b480      	push	{r7}
 80128b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80128b2:	bf00      	nop
 80128b4:	46bd      	mov	sp, r7
 80128b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ba:	4770      	bx	lr

080128bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80128bc:	b480      	push	{r7}
 80128be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80128c0:	bf00      	nop
 80128c2:	46bd      	mov	sp, r7
 80128c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c8:	4770      	bx	lr

080128ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80128ca:	b480      	push	{r7}
 80128cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80128ce:	bf00      	nop
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr

080128d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80128dc:	f000 fb28 	bl	8012f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80128e0:	bf00      	nop
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80128e4:	b480      	push	{r7}
 80128e6:	af00      	add	r7, sp, #0
	return 1;
 80128e8:	2301      	movs	r3, #1
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr

080128f4 <_kill>:

int _kill(int pid, int sig)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80128fe:	f006 fa3d 	bl	8018d7c <__errno>
 8012902:	4602      	mov	r2, r0
 8012904:	2316      	movs	r3, #22
 8012906:	6013      	str	r3, [r2, #0]
	return -1;
 8012908:	f04f 33ff 	mov.w	r3, #4294967295
}
 801290c:	4618      	mov	r0, r3
 801290e:	3708      	adds	r7, #8
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <_exit>:

void _exit (int status)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801291c:	f04f 31ff 	mov.w	r1, #4294967295
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f7ff ffe7 	bl	80128f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8012926:	e7fe      	b.n	8012926 <_exit+0x12>

08012928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b086      	sub	sp, #24
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012934:	2300      	movs	r3, #0
 8012936:	617b      	str	r3, [r7, #20]
 8012938:	e00a      	b.n	8012950 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801293a:	f3af 8000 	nop.w
 801293e:	4601      	mov	r1, r0
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	1c5a      	adds	r2, r3, #1
 8012944:	60ba      	str	r2, [r7, #8]
 8012946:	b2ca      	uxtb	r2, r1
 8012948:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	3301      	adds	r3, #1
 801294e:	617b      	str	r3, [r7, #20]
 8012950:	697a      	ldr	r2, [r7, #20]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	429a      	cmp	r2, r3
 8012956:	dbf0      	blt.n	801293a <_read+0x12>
	}

return len;
 8012958:	687b      	ldr	r3, [r7, #4]
}
 801295a:	4618      	mov	r0, r3
 801295c:	3718      	adds	r7, #24
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b086      	sub	sp, #24
 8012966:	af00      	add	r7, sp, #0
 8012968:	60f8      	str	r0, [r7, #12]
 801296a:	60b9      	str	r1, [r7, #8]
 801296c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801296e:	2300      	movs	r3, #0
 8012970:	617b      	str	r3, [r7, #20]
 8012972:	e009      	b.n	8012988 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	1c5a      	adds	r2, r3, #1
 8012978:	60ba      	str	r2, [r7, #8]
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	4618      	mov	r0, r3
 801297e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	3301      	adds	r3, #1
 8012986:	617b      	str	r3, [r7, #20]
 8012988:	697a      	ldr	r2, [r7, #20]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	429a      	cmp	r2, r3
 801298e:	dbf1      	blt.n	8012974 <_write+0x12>
	}
	return len;
 8012990:	687b      	ldr	r3, [r7, #4]
}
 8012992:	4618      	mov	r0, r3
 8012994:	3718      	adds	r7, #24
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}

0801299a <_close>:

int _close(int file)
{
 801299a:	b480      	push	{r7}
 801299c:	b083      	sub	sp, #12
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
	return -1;
 80129a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	370c      	adds	r7, #12
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr

080129b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80129b2:	b480      	push	{r7}
 80129b4:	b083      	sub	sp, #12
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
 80129ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80129c2:	605a      	str	r2, [r3, #4]
	return 0;
 80129c4:	2300      	movs	r3, #0
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	370c      	adds	r7, #12
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr

080129d2 <_isatty>:

int _isatty(int file)
{
 80129d2:	b480      	push	{r7}
 80129d4:	b083      	sub	sp, #12
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	6078      	str	r0, [r7, #4]
	return 1;
 80129da:	2301      	movs	r3, #1
}
 80129dc:	4618      	mov	r0, r3
 80129de:	370c      	adds	r7, #12
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr

080129e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80129e8:	b480      	push	{r7}
 80129ea:	b085      	sub	sp, #20
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	607a      	str	r2, [r7, #4]
	return 0;
 80129f4:	2300      	movs	r3, #0
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3714      	adds	r7, #20
 80129fa:	46bd      	mov	sp, r7
 80129fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a00:	4770      	bx	lr
	...

08012a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b086      	sub	sp, #24
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012a0c:	4a14      	ldr	r2, [pc, #80]	; (8012a60 <_sbrk+0x5c>)
 8012a0e:	4b15      	ldr	r3, [pc, #84]	; (8012a64 <_sbrk+0x60>)
 8012a10:	1ad3      	subs	r3, r2, r3
 8012a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012a18:	4b13      	ldr	r3, [pc, #76]	; (8012a68 <_sbrk+0x64>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d102      	bne.n	8012a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012a20:	4b11      	ldr	r3, [pc, #68]	; (8012a68 <_sbrk+0x64>)
 8012a22:	4a12      	ldr	r2, [pc, #72]	; (8012a6c <_sbrk+0x68>)
 8012a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012a26:	4b10      	ldr	r3, [pc, #64]	; (8012a68 <_sbrk+0x64>)
 8012a28:	681a      	ldr	r2, [r3, #0]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4413      	add	r3, r2
 8012a2e:	693a      	ldr	r2, [r7, #16]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d207      	bcs.n	8012a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012a34:	f006 f9a2 	bl	8018d7c <__errno>
 8012a38:	4602      	mov	r2, r0
 8012a3a:	230c      	movs	r3, #12
 8012a3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8012a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a42:	e009      	b.n	8012a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012a44:	4b08      	ldr	r3, [pc, #32]	; (8012a68 <_sbrk+0x64>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012a4a:	4b07      	ldr	r3, [pc, #28]	; (8012a68 <_sbrk+0x64>)
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	4413      	add	r3, r2
 8012a52:	4a05      	ldr	r2, [pc, #20]	; (8012a68 <_sbrk+0x64>)
 8012a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012a56:	68fb      	ldr	r3, [r7, #12]
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3718      	adds	r7, #24
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	20010000 	.word	0x20010000
 8012a64:	00000800 	.word	0x00000800
 8012a68:	20008544 	.word	0x20008544
 8012a6c:	200085f0 	.word	0x200085f0

08012a70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8012a70:	b480      	push	{r7}
 8012a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012a74:	4b17      	ldr	r3, [pc, #92]	; (8012ad4 <SystemInit+0x64>)
 8012a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a7a:	4a16      	ldr	r2, [pc, #88]	; (8012ad4 <SystemInit+0x64>)
 8012a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8012a84:	4b14      	ldr	r3, [pc, #80]	; (8012ad8 <SystemInit+0x68>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	4a13      	ldr	r2, [pc, #76]	; (8012ad8 <SystemInit+0x68>)
 8012a8a:	f043 0301 	orr.w	r3, r3, #1
 8012a8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8012a90:	4b11      	ldr	r3, [pc, #68]	; (8012ad8 <SystemInit+0x68>)
 8012a92:	2200      	movs	r2, #0
 8012a94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8012a96:	4b10      	ldr	r3, [pc, #64]	; (8012ad8 <SystemInit+0x68>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	4a0f      	ldr	r2, [pc, #60]	; (8012ad8 <SystemInit+0x68>)
 8012a9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8012aa0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8012aa4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8012aa6:	4b0c      	ldr	r3, [pc, #48]	; (8012ad8 <SystemInit+0x68>)
 8012aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012aac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8012aae:	4b0a      	ldr	r3, [pc, #40]	; (8012ad8 <SystemInit+0x68>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	4a09      	ldr	r2, [pc, #36]	; (8012ad8 <SystemInit+0x68>)
 8012ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012ab8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8012aba:	4b07      	ldr	r3, [pc, #28]	; (8012ad8 <SystemInit+0x68>)
 8012abc:	2200      	movs	r2, #0
 8012abe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012ac0:	4b04      	ldr	r3, [pc, #16]	; (8012ad4 <SystemInit+0x64>)
 8012ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012ac6:	609a      	str	r2, [r3, #8]
#endif
}
 8012ac8:	bf00      	nop
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	e000ed00 	.word	0xe000ed00
 8012ad8:	40021000 	.word	0x40021000

08012adc <WindowProcessSamples>:
#include "window.h"

#include <string.h>

int WindowProcessSamples(struct WindowState* state, const int16_t* samples,
                         size_t num_samples, size_t* num_samples_read) {
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b08c      	sub	sp, #48	; 0x30
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	60f8      	str	r0, [r7, #12]
 8012ae4:	60b9      	str	r1, [r7, #8]
 8012ae6:	607a      	str	r2, [r7, #4]
 8012ae8:	603b      	str	r3, [r7, #0]
  const int size = state->size;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	617b      	str	r3, [r7, #20]

  // Copy samples from the samples buffer over to our local input.
  size_t max_samples_to_copy = state->size - state->input_used;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	691b      	ldr	r3, [r3, #16]
 8012af8:	1ad3      	subs	r3, r2, r3
 8012afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (max_samples_to_copy > num_samples) {
 8012afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d901      	bls.n	8012b08 <WindowProcessSamples+0x2c>
    max_samples_to_copy = num_samples;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  memcpy(state->input + state->input_used, samples,
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	68da      	ldr	r2, [r3, #12]
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	691b      	ldr	r3, [r3, #16]
 8012b10:	005b      	lsls	r3, r3, #1
 8012b12:	18d0      	adds	r0, r2, r3
 8012b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b16:	005b      	lsls	r3, r3, #1
 8012b18:	461a      	mov	r2, r3
 8012b1a:	68b9      	ldr	r1, [r7, #8]
 8012b1c:	f006 fa52 	bl	8018fc4 <memcpy>
         max_samples_to_copy * sizeof(*samples));
  *num_samples_read = max_samples_to_copy;
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b24:	601a      	str	r2, [r3, #0]
  state->input_used += max_samples_to_copy;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	691a      	ldr	r2, [r3, #16]
 8012b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2c:	441a      	add	r2, r3
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	611a      	str	r2, [r3, #16]

  if (state->input_used < state->size) {
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	691a      	ldr	r2, [r3, #16]
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d201      	bcs.n	8012b42 <WindowProcessSamples+0x66>
    // We don't have enough samples to compute a window.
    return 0;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e054      	b.n	8012bec <WindowProcessSamples+0x110>
  }

  // Apply the window to the input.
  const int16_t* coefficients = state->coefficients;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	62bb      	str	r3, [r7, #40]	; 0x28
  const int16_t* input = state->input;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	627b      	str	r3, [r7, #36]	; 0x24
  int16_t* output = state->output;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	695b      	ldr	r3, [r3, #20]
 8012b52:	623b      	str	r3, [r7, #32]
  int i;
  int16_t max_abs_output_value = 0;
 8012b54:	2300      	movs	r3, #0
 8012b56:	837b      	strh	r3, [r7, #26]
  for (i = 0; i < size; ++i) {
 8012b58:	2300      	movs	r3, #0
 8012b5a:	61fb      	str	r3, [r7, #28]
 8012b5c:	e026      	b.n	8012bac <WindowProcessSamples+0xd0>
    int16_t new_value =
        (((int32_t)*input++) * *coefficients++) >> kFrontendWindowBits;
 8012b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b60:	1c9a      	adds	r2, r3, #2
 8012b62:	627a      	str	r2, [r7, #36]	; 0x24
 8012b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b68:	4619      	mov	r1, r3
 8012b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b6c:	1c9a      	adds	r2, r3, #2
 8012b6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8012b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b74:	fb03 f301 	mul.w	r3, r3, r1
 8012b78:	131b      	asrs	r3, r3, #12
    int16_t new_value =
 8012b7a:	833b      	strh	r3, [r7, #24]
    *output++ = new_value;
 8012b7c:	6a3b      	ldr	r3, [r7, #32]
 8012b7e:	1c9a      	adds	r2, r3, #2
 8012b80:	623a      	str	r2, [r7, #32]
 8012b82:	8b3a      	ldrh	r2, [r7, #24]
 8012b84:	801a      	strh	r2, [r3, #0]
    if (new_value < 0) {
 8012b86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	da03      	bge.n	8012b96 <WindowProcessSamples+0xba>
      new_value = -new_value;
 8012b8e:	8b3b      	ldrh	r3, [r7, #24]
 8012b90:	425b      	negs	r3, r3
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	833b      	strh	r3, [r7, #24]
    }
    if (new_value > max_abs_output_value) {
 8012b96:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8012b9a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	dd01      	ble.n	8012ba6 <WindowProcessSamples+0xca>
      max_abs_output_value = new_value;
 8012ba2:	8b3b      	ldrh	r3, [r7, #24]
 8012ba4:	837b      	strh	r3, [r7, #26]
  for (i = 0; i < size; ++i) {
 8012ba6:	69fb      	ldr	r3, [r7, #28]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	61fb      	str	r3, [r7, #28]
 8012bac:	69fa      	ldr	r2, [r7, #28]
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	dbd4      	blt.n	8012b5e <WindowProcessSamples+0x82>
    }
  }
  // Shuffle the input down by the step size, and update how much we have used.
  memmove(state->input, state->input + state->step,
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	68d8      	ldr	r0, [r3, #12]
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	68da      	ldr	r2, [r3, #12]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	689b      	ldr	r3, [r3, #8]
 8012bc0:	005b      	lsls	r3, r3, #1
 8012bc2:	18d1      	adds	r1, r2, r3
          sizeof(*state->input) * (state->size - state->step));
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	681a      	ldr	r2, [r3, #0]
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	689b      	ldr	r3, [r3, #8]
 8012bcc:	1ad3      	subs	r3, r2, r3
  memmove(state->input, state->input + state->step,
 8012bce:	005b      	lsls	r3, r3, #1
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	f006 fa02 	bl	8018fda <memmove>
  state->input_used -= state->step;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	691a      	ldr	r2, [r3, #16]
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	689b      	ldr	r3, [r3, #8]
 8012bde:	1ad2      	subs	r2, r2, r3
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	611a      	str	r2, [r3, #16]
  state->max_abs_output_value = max_abs_output_value;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	8b7a      	ldrh	r2, [r7, #26]
 8012be8:	831a      	strh	r2, [r3, #24]

  // Indicate that the output buffer is valid for the next stage.
  return 1;
 8012bea:	2301      	movs	r3, #1
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3730      	adds	r7, #48	; 0x30
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <WindowReset>:

void WindowReset(struct WindowState* state) {
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
  memset(state->input, 0, state->size * sizeof(*state->input));
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	68d8      	ldr	r0, [r3, #12]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	005b      	lsls	r3, r3, #1
 8012c06:	461a      	mov	r2, r3
 8012c08:	2100      	movs	r1, #0
 8012c0a:	f006 f9ff 	bl	801900c <memset>
  memset(state->output, 0, state->size * sizeof(*state->output));
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6958      	ldr	r0, [r3, #20]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	005b      	lsls	r3, r3, #1
 8012c18:	461a      	mov	r2, r3
 8012c1a:	2100      	movs	r1, #0
 8012c1c:	f006 f9f6 	bl	801900c <memset>
  state->input_used = 0;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2200      	movs	r2, #0
 8012c24:	611a      	str	r2, [r3, #16]
  state->max_abs_output_value = 0;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	831a      	strh	r2, [r3, #24]
}
 8012c2c:	bf00      	nop
 8012c2e:	3708      	adds	r7, #8
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	0000      	movs	r0, r0
	...

08012c38 <WindowPopulateState>:
  config->size_ms = 25;
  config->step_size_ms = 10;
}

int WindowPopulateState(const struct WindowConfig* config,
                        struct WindowState* state, int sample_rate) {
 8012c38:	b5b0      	push	{r4, r5, r7, lr}
 8012c3a:	b088      	sub	sp, #32
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	60b9      	str	r1, [r7, #8]
 8012c42:	607a      	str	r2, [r7, #4]
  state->size = config->size_ms * sample_rate / 1000;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	687a      	ldr	r2, [r7, #4]
 8012c4a:	fb02 f303 	mul.w	r3, r2, r3
 8012c4e:	4a72      	ldr	r2, [pc, #456]	; (8012e18 <WindowPopulateState+0x1e0>)
 8012c50:	fba2 2303 	umull	r2, r3, r2, r3
 8012c54:	099a      	lsrs	r2, r3, #6
 8012c56:	68bb      	ldr	r3, [r7, #8]
 8012c58:	601a      	str	r2, [r3, #0]
  state->step = config->step_size_ms * sample_rate / 1000;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	687a      	ldr	r2, [r7, #4]
 8012c60:	fb02 f303 	mul.w	r3, r2, r3
 8012c64:	4a6c      	ldr	r2, [pc, #432]	; (8012e18 <WindowPopulateState+0x1e0>)
 8012c66:	fba2 2303 	umull	r2, r3, r2, r3
 8012c6a:	099a      	lsrs	r2, r3, #6
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	609a      	str	r2, [r3, #8]

  state->coefficients = malloc(state->size * sizeof(*state->coefficients));
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	005b      	lsls	r3, r3, #1
 8012c76:	4618      	mov	r0, r3
 8012c78:	f006 f994 	bl	8018fa4 <malloc>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	461a      	mov	r2, r3
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	605a      	str	r2, [r3, #4]
  if (state->coefficients == NULL) {
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d109      	bne.n	8012ca0 <WindowPopulateState+0x68>
    fprintf(stderr, "Failed to allocate window coefficients\n");
 8012c8c:	4b63      	ldr	r3, [pc, #396]	; (8012e1c <WindowPopulateState+0x1e4>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	68db      	ldr	r3, [r3, #12]
 8012c92:	2227      	movs	r2, #39	; 0x27
 8012c94:	2101      	movs	r1, #1
 8012c96:	4862      	ldr	r0, [pc, #392]	; (8012e20 <WindowPopulateState+0x1e8>)
 8012c98:	f006 f952 	bl	8018f40 <fwrite>
    return 0;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	e0b3      	b.n	8012e08 <WindowPopulateState+0x1d0>
  }

  // Populate the window values.
  const float arg = M_PI * 2.0 / ((float)state->size);
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	ee07 3a90 	vmov	s15, r3
 8012ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cac:	ee17 0a90 	vmov	r0, s15
 8012cb0:	f7ed fc5a 	bl	8000568 <__aeabi_f2d>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	460c      	mov	r4, r1
 8012cb8:	461a      	mov	r2, r3
 8012cba:	4623      	mov	r3, r4
 8012cbc:	a154      	add	r1, pc, #336	; (adr r1, 8012e10 <WindowPopulateState+0x1d8>)
 8012cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cc2:	f7ed fdd3 	bl	800086c <__aeabi_ddiv>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	460c      	mov	r4, r1
 8012cca:	4618      	mov	r0, r3
 8012ccc:	4621      	mov	r1, r4
 8012cce:	f7ed ff7b 	bl	8000bc8 <__aeabi_d2f>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	61bb      	str	r3, [r7, #24]
  int i;
  for (i = 0; i < state->size; ++i) {
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	61fb      	str	r3, [r7, #28]
 8012cda:	e05c      	b.n	8012d96 <WindowPopulateState+0x15e>
    float float_value = 0.5 - (0.5 * cos(arg * (i + 0.5)));
 8012cdc:	69b8      	ldr	r0, [r7, #24]
 8012cde:	f7ed fc43 	bl	8000568 <__aeabi_f2d>
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	460d      	mov	r5, r1
 8012ce6:	69f8      	ldr	r0, [r7, #28]
 8012ce8:	f7ed fc2c 	bl	8000544 <__aeabi_i2d>
 8012cec:	f04f 0200 	mov.w	r2, #0
 8012cf0:	4b4c      	ldr	r3, [pc, #304]	; (8012e24 <WindowPopulateState+0x1ec>)
 8012cf2:	f7ed fadb 	bl	80002ac <__adddf3>
 8012cf6:	4602      	mov	r2, r0
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	4629      	mov	r1, r5
 8012cfe:	f7ed fc8b 	bl	8000618 <__aeabi_dmul>
 8012d02:	4603      	mov	r3, r0
 8012d04:	460c      	mov	r4, r1
 8012d06:	ec44 3b17 	vmov	d7, r3, r4
 8012d0a:	eeb0 0a47 	vmov.f32	s0, s14
 8012d0e:	eef0 0a67 	vmov.f32	s1, s15
 8012d12:	f003 fda5 	bl	8016860 <cos>
 8012d16:	ec51 0b10 	vmov	r0, r1, d0
 8012d1a:	f04f 0200 	mov.w	r2, #0
 8012d1e:	4b41      	ldr	r3, [pc, #260]	; (8012e24 <WindowPopulateState+0x1ec>)
 8012d20:	f7ed fc7a 	bl	8000618 <__aeabi_dmul>
 8012d24:	4603      	mov	r3, r0
 8012d26:	460c      	mov	r4, r1
 8012d28:	461a      	mov	r2, r3
 8012d2a:	4623      	mov	r3, r4
 8012d2c:	f04f 0000 	mov.w	r0, #0
 8012d30:	493c      	ldr	r1, [pc, #240]	; (8012e24 <WindowPopulateState+0x1ec>)
 8012d32:	f7ed fab9 	bl	80002a8 <__aeabi_dsub>
 8012d36:	4603      	mov	r3, r0
 8012d38:	460c      	mov	r4, r1
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	4621      	mov	r1, r4
 8012d3e:	f7ed ff43 	bl	8000bc8 <__aeabi_d2f>
 8012d42:	4603      	mov	r3, r0
 8012d44:	617b      	str	r3, [r7, #20]
    // Scale it to fixed point and round it.
    state->coefficients[i] =
        floor(float_value * (1 << kFrontendWindowBits) + 0.5);
 8012d46:	edd7 7a05 	vldr	s15, [r7, #20]
 8012d4a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012e28 <WindowPopulateState+0x1f0>
 8012d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d52:	ee17 0a90 	vmov	r0, s15
 8012d56:	f7ed fc07 	bl	8000568 <__aeabi_f2d>
 8012d5a:	f04f 0200 	mov.w	r2, #0
 8012d5e:	4b31      	ldr	r3, [pc, #196]	; (8012e24 <WindowPopulateState+0x1ec>)
 8012d60:	f7ed faa4 	bl	80002ac <__adddf3>
 8012d64:	4603      	mov	r3, r0
 8012d66:	460c      	mov	r4, r1
 8012d68:	ec44 3b17 	vmov	d7, r3, r4
 8012d6c:	eeb0 0a47 	vmov.f32	s0, s14
 8012d70:	eef0 0a67 	vmov.f32	s1, s15
 8012d74:	f003 fdb8 	bl	80168e8 <floor>
 8012d78:	ec51 0b10 	vmov	r0, r1, d0
    state->coefficients[i] =
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	685a      	ldr	r2, [r3, #4]
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	005b      	lsls	r3, r3, #1
 8012d84:	18d4      	adds	r4, r2, r3
 8012d86:	f7ed fef7 	bl	8000b78 <__aeabi_d2iz>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	b21b      	sxth	r3, r3
 8012d8e:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < state->size; ++i) {
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	3301      	adds	r3, #1
 8012d94:	61fb      	str	r3, [r7, #28]
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	681a      	ldr	r2, [r3, #0]
 8012d9a:	69fb      	ldr	r3, [r7, #28]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d89d      	bhi.n	8012cdc <WindowPopulateState+0xa4>
  }

  state->input_used = 0;
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	2200      	movs	r2, #0
 8012da4:	611a      	str	r2, [r3, #16]
  state->input = malloc(state->size * sizeof(*state->input));
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	005b      	lsls	r3, r3, #1
 8012dac:	4618      	mov	r0, r3
 8012dae:	f006 f8f9 	bl	8018fa4 <malloc>
 8012db2:	4603      	mov	r3, r0
 8012db4:	461a      	mov	r2, r3
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	60da      	str	r2, [r3, #12]
  if (state->input == NULL) {
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	68db      	ldr	r3, [r3, #12]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d109      	bne.n	8012dd6 <WindowPopulateState+0x19e>
    fprintf(stderr, "Failed to allocate window input\n");
 8012dc2:	4b16      	ldr	r3, [pc, #88]	; (8012e1c <WindowPopulateState+0x1e4>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	68db      	ldr	r3, [r3, #12]
 8012dc8:	2220      	movs	r2, #32
 8012dca:	2101      	movs	r1, #1
 8012dcc:	4817      	ldr	r0, [pc, #92]	; (8012e2c <WindowPopulateState+0x1f4>)
 8012dce:	f006 f8b7 	bl	8018f40 <fwrite>
    return 0;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	e018      	b.n	8012e08 <WindowPopulateState+0x1d0>
  }

  state->output = malloc(state->size * sizeof(*state->output));
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	005b      	lsls	r3, r3, #1
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f006 f8e1 	bl	8018fa4 <malloc>
 8012de2:	4603      	mov	r3, r0
 8012de4:	461a      	mov	r2, r3
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	615a      	str	r2, [r3, #20]
  if (state->output == NULL) {
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	695b      	ldr	r3, [r3, #20]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d109      	bne.n	8012e06 <WindowPopulateState+0x1ce>
    fprintf(stderr, "Failed to allocate window output\n");
 8012df2:	4b0a      	ldr	r3, [pc, #40]	; (8012e1c <WindowPopulateState+0x1e4>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	2221      	movs	r2, #33	; 0x21
 8012dfa:	2101      	movs	r1, #1
 8012dfc:	480c      	ldr	r0, [pc, #48]	; (8012e30 <WindowPopulateState+0x1f8>)
 8012dfe:	f006 f89f 	bl	8018f40 <fwrite>
    return 0;
 8012e02:	2300      	movs	r3, #0
 8012e04:	e000      	b.n	8012e08 <WindowPopulateState+0x1d0>
  }

  return 1;
 8012e06:	2301      	movs	r3, #1
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3720      	adds	r7, #32
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8012e10:	54442d18 	.word	0x54442d18
 8012e14:	401921fb 	.word	0x401921fb
 8012e18:	10624dd3 	.word	0x10624dd3
 8012e1c:	20000018 	.word	0x20000018
 8012e20:	0801ee74 	.word	0x0801ee74
 8012e24:	3fe00000 	.word	0x3fe00000
 8012e28:	45800000 	.word	0x45800000
 8012e2c:	0801ee9c 	.word	0x0801ee9c
 8012e30:	0801eec0 	.word	0x0801eec0

08012e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8012e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012e6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8012e38:	f7ff fe1a 	bl	8012a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8012e3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8012e3e:	e003      	b.n	8012e48 <LoopCopyDataInit>

08012e40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8012e40:	4b0b      	ldr	r3, [pc, #44]	; (8012e70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8012e42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8012e44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8012e46:	3104      	adds	r1, #4

08012e48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8012e48:	480a      	ldr	r0, [pc, #40]	; (8012e74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8012e4a:	4b0b      	ldr	r3, [pc, #44]	; (8012e78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8012e4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8012e4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8012e50:	d3f6      	bcc.n	8012e40 <CopyDataInit>
	ldr	r2, =_sbss
 8012e52:	4a0a      	ldr	r2, [pc, #40]	; (8012e7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8012e54:	e002      	b.n	8012e5c <LoopFillZerobss>

08012e56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8012e56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8012e58:	f842 3b04 	str.w	r3, [r2], #4

08012e5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8012e5c:	4b08      	ldr	r3, [pc, #32]	; (8012e80 <LoopForever+0x16>)
	cmp	r2, r3
 8012e5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8012e60:	d3f9      	bcc.n	8012e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012e62:	f006 f87b 	bl	8018f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8012e66:	f7f6 ff43 	bl	8009cf0 <main>

08012e6a <LoopForever>:

LoopForever:
    b LoopForever
 8012e6a:	e7fe      	b.n	8012e6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8012e6c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8012e70:	080272d0 	.word	0x080272d0
	ldr	r0, =_sdata
 8012e74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8012e78:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8012e7c:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8012e80:	200085ec 	.word	0x200085ec

08012e84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8012e84:	e7fe      	b.n	8012e84 <ADC1_IRQHandler>

08012e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012e86:	b580      	push	{r7, lr}
 8012e88:	b082      	sub	sp, #8
 8012e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012e90:	2003      	movs	r0, #3
 8012e92:	f001 f95d 	bl	8014150 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012e96:	2000      	movs	r0, #0
 8012e98:	f000 f80e 	bl	8012eb8 <HAL_InitTick>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d002      	beq.n	8012ea8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	71fb      	strb	r3, [r7, #7]
 8012ea6:	e001      	b.n	8012eac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8012ea8:	f7ff fbe4 	bl	8012674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8012eac:	79fb      	ldrb	r3, [r7, #7]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3708      	adds	r7, #8
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
	...

08012eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8012ec4:	4b17      	ldr	r3, [pc, #92]	; (8012f24 <HAL_InitTick+0x6c>)
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d023      	beq.n	8012f14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8012ecc:	4b16      	ldr	r3, [pc, #88]	; (8012f28 <HAL_InitTick+0x70>)
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	4b14      	ldr	r3, [pc, #80]	; (8012f24 <HAL_InitTick+0x6c>)
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8012ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f001 f95b 	bl	801419e <HAL_SYSTICK_Config>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d10f      	bne.n	8012f0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2b0f      	cmp	r3, #15
 8012ef2:	d809      	bhi.n	8012f08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	6879      	ldr	r1, [r7, #4]
 8012ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8012efc:	f001 f933 	bl	8014166 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012f00:	4a0a      	ldr	r2, [pc, #40]	; (8012f2c <HAL_InitTick+0x74>)
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6013      	str	r3, [r2, #0]
 8012f06:	e007      	b.n	8012f18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8012f08:	2301      	movs	r3, #1
 8012f0a:	73fb      	strb	r3, [r7, #15]
 8012f0c:	e004      	b.n	8012f18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8012f0e:	2301      	movs	r3, #1
 8012f10:	73fb      	strb	r3, [r7, #15]
 8012f12:	e001      	b.n	8012f18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8012f14:	2301      	movs	r3, #1
 8012f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8012f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3710      	adds	r7, #16
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop
 8012f24:	2000000c 	.word	0x2000000c
 8012f28:	20000004 	.word	0x20000004
 8012f2c:	20000008 	.word	0x20000008

08012f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012f30:	b480      	push	{r7}
 8012f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012f34:	4b06      	ldr	r3, [pc, #24]	; (8012f50 <HAL_IncTick+0x20>)
 8012f36:	781b      	ldrb	r3, [r3, #0]
 8012f38:	461a      	mov	r2, r3
 8012f3a:	4b06      	ldr	r3, [pc, #24]	; (8012f54 <HAL_IncTick+0x24>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	4413      	add	r3, r2
 8012f40:	4a04      	ldr	r2, [pc, #16]	; (8012f54 <HAL_IncTick+0x24>)
 8012f42:	6013      	str	r3, [r2, #0]
}
 8012f44:	bf00      	nop
 8012f46:	46bd      	mov	sp, r7
 8012f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4c:	4770      	bx	lr
 8012f4e:	bf00      	nop
 8012f50:	2000000c 	.word	0x2000000c
 8012f54:	200085e4 	.word	0x200085e4

08012f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012f58:	b480      	push	{r7}
 8012f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8012f5c:	4b03      	ldr	r3, [pc, #12]	; (8012f6c <HAL_GetTick+0x14>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	46bd      	mov	sp, r7
 8012f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f68:	4770      	bx	lr
 8012f6a:	bf00      	nop
 8012f6c:	200085e4 	.word	0x200085e4

08012f70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8012f70:	b480      	push	{r7}
 8012f72:	b083      	sub	sp, #12
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	689b      	ldr	r3, [r3, #8]
 8012f7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	431a      	orrs	r2, r3
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	609a      	str	r2, [r3, #8]
}
 8012f8a:	bf00      	nop
 8012f8c:	370c      	adds	r7, #12
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f94:	4770      	bx	lr

08012f96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8012f96:	b480      	push	{r7}
 8012f98:	b083      	sub	sp, #12
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
 8012f9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	689b      	ldr	r3, [r3, #8]
 8012fa4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	431a      	orrs	r2, r3
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	609a      	str	r2, [r3, #8]
}
 8012fb0:	bf00      	nop
 8012fb2:	370c      	adds	r7, #12
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr

08012fbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b083      	sub	sp, #12
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	689b      	ldr	r3, [r3, #8]
 8012fc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	370c      	adds	r7, #12
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr

08012fd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8012fd8:	b480      	push	{r7}
 8012fda:	b087      	sub	sp, #28
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	60b9      	str	r1, [r7, #8]
 8012fe2:	607a      	str	r2, [r7, #4]
 8012fe4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	3360      	adds	r3, #96	; 0x60
 8012fea:	461a      	mov	r2, r3
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	4413      	add	r3, r2
 8012ff2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	681a      	ldr	r2, [r3, #0]
 8012ff8:	4b08      	ldr	r3, [pc, #32]	; (801301c <LL_ADC_SetOffset+0x44>)
 8012ffa:	4013      	ands	r3, r2
 8012ffc:	687a      	ldr	r2, [r7, #4]
 8012ffe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8013002:	683a      	ldr	r2, [r7, #0]
 8013004:	430a      	orrs	r2, r1
 8013006:	4313      	orrs	r3, r2
 8013008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8013010:	bf00      	nop
 8013012:	371c      	adds	r7, #28
 8013014:	46bd      	mov	sp, r7
 8013016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301a:	4770      	bx	lr
 801301c:	03fff000 	.word	0x03fff000

08013020 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8013020:	b480      	push	{r7}
 8013022:	b085      	sub	sp, #20
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	3360      	adds	r3, #96	; 0x60
 801302e:	461a      	mov	r2, r3
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	009b      	lsls	r3, r3, #2
 8013034:	4413      	add	r3, r2
 8013036:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8013040:	4618      	mov	r0, r3
 8013042:	3714      	adds	r7, #20
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr

0801304c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 801304c:	b480      	push	{r7}
 801304e:	b087      	sub	sp, #28
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	3360      	adds	r3, #96	; 0x60
 801305c:	461a      	mov	r2, r3
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	009b      	lsls	r3, r3, #2
 8013062:	4413      	add	r3, r2
 8013064:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	431a      	orrs	r2, r3
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8013076:	bf00      	nop
 8013078:	371c      	adds	r7, #28
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr

08013082 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8013082:	b480      	push	{r7}
 8013084:	b083      	sub	sp, #12
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	68db      	ldr	r3, [r3, #12]
 801308e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013092:	2b00      	cmp	r3, #0
 8013094:	d101      	bne.n	801309a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8013096:	2301      	movs	r3, #1
 8013098:	e000      	b.n	801309c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 801309a:	2300      	movs	r3, #0
}
 801309c:	4618      	mov	r0, r3
 801309e:	370c      	adds	r7, #12
 80130a0:	46bd      	mov	sp, r7
 80130a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a6:	4770      	bx	lr

080130a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80130a8:	b480      	push	{r7}
 80130aa:	b087      	sub	sp, #28
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	60f8      	str	r0, [r7, #12]
 80130b0:	60b9      	str	r1, [r7, #8]
 80130b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	3330      	adds	r3, #48	; 0x30
 80130b8:	461a      	mov	r2, r3
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	0a1b      	lsrs	r3, r3, #8
 80130be:	009b      	lsls	r3, r3, #2
 80130c0:	f003 030c 	and.w	r3, r3, #12
 80130c4:	4413      	add	r3, r2
 80130c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	f003 031f 	and.w	r3, r3, #31
 80130d2:	211f      	movs	r1, #31
 80130d4:	fa01 f303 	lsl.w	r3, r1, r3
 80130d8:	43db      	mvns	r3, r3
 80130da:	401a      	ands	r2, r3
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	0e9b      	lsrs	r3, r3, #26
 80130e0:	f003 011f 	and.w	r1, r3, #31
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	f003 031f 	and.w	r3, r3, #31
 80130ea:	fa01 f303 	lsl.w	r3, r1, r3
 80130ee:	431a      	orrs	r2, r3
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80130f4:	bf00      	nop
 80130f6:	371c      	adds	r7, #28
 80130f8:	46bd      	mov	sp, r7
 80130fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fe:	4770      	bx	lr

08013100 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8013100:	b480      	push	{r7}
 8013102:	b087      	sub	sp, #28
 8013104:	af00      	add	r7, sp, #0
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	3314      	adds	r3, #20
 8013110:	461a      	mov	r2, r3
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	0e5b      	lsrs	r3, r3, #25
 8013116:	009b      	lsls	r3, r3, #2
 8013118:	f003 0304 	and.w	r3, r3, #4
 801311c:	4413      	add	r3, r2
 801311e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	681a      	ldr	r2, [r3, #0]
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	0d1b      	lsrs	r3, r3, #20
 8013128:	f003 031f 	and.w	r3, r3, #31
 801312c:	2107      	movs	r1, #7
 801312e:	fa01 f303 	lsl.w	r3, r1, r3
 8013132:	43db      	mvns	r3, r3
 8013134:	401a      	ands	r2, r3
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	0d1b      	lsrs	r3, r3, #20
 801313a:	f003 031f 	and.w	r3, r3, #31
 801313e:	6879      	ldr	r1, [r7, #4]
 8013140:	fa01 f303 	lsl.w	r3, r1, r3
 8013144:	431a      	orrs	r2, r3
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801314a:	bf00      	nop
 801314c:	371c      	adds	r7, #28
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr
	...

08013158 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8013158:	b480      	push	{r7}
 801315a:	b085      	sub	sp, #20
 801315c:	af00      	add	r7, sp, #0
 801315e:	60f8      	str	r0, [r7, #12]
 8013160:	60b9      	str	r1, [r7, #8]
 8013162:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013170:	43db      	mvns	r3, r3
 8013172:	401a      	ands	r2, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f003 0318 	and.w	r3, r3, #24
 801317a:	4908      	ldr	r1, [pc, #32]	; (801319c <LL_ADC_SetChannelSingleDiff+0x44>)
 801317c:	40d9      	lsrs	r1, r3
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	400b      	ands	r3, r1
 8013182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013186:	431a      	orrs	r2, r3
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 801318e:	bf00      	nop
 8013190:	3714      	adds	r7, #20
 8013192:	46bd      	mov	sp, r7
 8013194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013198:	4770      	bx	lr
 801319a:	bf00      	nop
 801319c:	0007ffff 	.word	0x0007ffff

080131a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80131a0:	b480      	push	{r7}
 80131a2:	b083      	sub	sp, #12
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	689b      	ldr	r3, [r3, #8]
 80131ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80131b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80131b4:	687a      	ldr	r2, [r7, #4]
 80131b6:	6093      	str	r3, [r2, #8]
}
 80131b8:	bf00      	nop
 80131ba:	370c      	adds	r7, #12
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr

080131c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80131c4:	b480      	push	{r7}
 80131c6:	b083      	sub	sp, #12
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	689b      	ldr	r3, [r3, #8]
 80131d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80131d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80131d8:	d101      	bne.n	80131de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80131da:	2301      	movs	r3, #1
 80131dc:	e000      	b.n	80131e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80131de:	2300      	movs	r3, #0
}
 80131e0:	4618      	mov	r0, r3
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr

080131ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80131ec:	b480      	push	{r7}
 80131ee:	b083      	sub	sp, #12
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	689b      	ldr	r3, [r3, #8]
 80131f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80131fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013200:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8013208:	bf00      	nop
 801320a:	370c      	adds	r7, #12
 801320c:	46bd      	mov	sp, r7
 801320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013212:	4770      	bx	lr

08013214 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8013214:	b480      	push	{r7}
 8013216:	b083      	sub	sp, #12
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	689b      	ldr	r3, [r3, #8]
 8013220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013228:	d101      	bne.n	801322e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801322a:	2301      	movs	r3, #1
 801322c:	e000      	b.n	8013230 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801322e:	2300      	movs	r3, #0
}
 8013230:	4618      	mov	r0, r3
 8013232:	370c      	adds	r7, #12
 8013234:	46bd      	mov	sp, r7
 8013236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323a:	4770      	bx	lr

0801323c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 801323c:	b480      	push	{r7}
 801323e:	b083      	sub	sp, #12
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801324c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013250:	f043 0201 	orr.w	r2, r3, #1
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8013258:	bf00      	nop
 801325a:	370c      	adds	r7, #12
 801325c:	46bd      	mov	sp, r7
 801325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013262:	4770      	bx	lr

08013264 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8013264:	b480      	push	{r7}
 8013266:	b083      	sub	sp, #12
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	689b      	ldr	r3, [r3, #8]
 8013270:	f003 0301 	and.w	r3, r3, #1
 8013274:	2b01      	cmp	r3, #1
 8013276:	d101      	bne.n	801327c <LL_ADC_IsEnabled+0x18>
 8013278:	2301      	movs	r3, #1
 801327a:	e000      	b.n	801327e <LL_ADC_IsEnabled+0x1a>
 801327c:	2300      	movs	r3, #0
}
 801327e:	4618      	mov	r0, r3
 8013280:	370c      	adds	r7, #12
 8013282:	46bd      	mov	sp, r7
 8013284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013288:	4770      	bx	lr

0801328a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 801328a:	b480      	push	{r7}
 801328c:	b083      	sub	sp, #12
 801328e:	af00      	add	r7, sp, #0
 8013290:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	689b      	ldr	r3, [r3, #8]
 8013296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801329a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801329e:	f043 0204 	orr.w	r2, r3, #4
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80132a6:	bf00      	nop
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr

080132b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80132b2:	b480      	push	{r7}
 80132b4:	b083      	sub	sp, #12
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	689b      	ldr	r3, [r3, #8]
 80132be:	f003 0304 	and.w	r3, r3, #4
 80132c2:	2b04      	cmp	r3, #4
 80132c4:	d101      	bne.n	80132ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80132c6:	2301      	movs	r3, #1
 80132c8:	e000      	b.n	80132cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80132ca:	2300      	movs	r3, #0
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	370c      	adds	r7, #12
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr

080132d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80132d8:	b480      	push	{r7}
 80132da:	b083      	sub	sp, #12
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	689b      	ldr	r3, [r3, #8]
 80132e4:	f003 0308 	and.w	r3, r3, #8
 80132e8:	2b08      	cmp	r3, #8
 80132ea:	d101      	bne.n	80132f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80132ec:	2301      	movs	r3, #1
 80132ee:	e000      	b.n	80132f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80132f0:	2300      	movs	r3, #0
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	370c      	adds	r7, #12
 80132f6:	46bd      	mov	sp, r7
 80132f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fc:	4770      	bx	lr
	...

08013300 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b088      	sub	sp, #32
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013308:	2300      	movs	r3, #0
 801330a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 801330c:	2300      	movs	r3, #0
 801330e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d101      	bne.n	801331a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8013316:	2301      	movs	r3, #1
 8013318:	e12a      	b.n	8013570 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	691b      	ldr	r3, [r3, #16]
 801331e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013324:	2b00      	cmp	r3, #0
 8013326:	d109      	bne.n	801333c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f7ff f9c7 	bl	80126bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2200      	movs	r2, #0
 8013332:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2200      	movs	r2, #0
 8013338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	4618      	mov	r0, r3
 8013342:	f7ff ff3f 	bl	80131c4 <LL_ADC_IsDeepPowerDownEnabled>
 8013346:	4603      	mov	r3, r0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d004      	beq.n	8013356 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	4618      	mov	r0, r3
 8013352:	f7ff ff25 	bl	80131a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	4618      	mov	r0, r3
 801335c:	f7ff ff5a 	bl	8013214 <LL_ADC_IsInternalRegulatorEnabled>
 8013360:	4603      	mov	r3, r0
 8013362:	2b00      	cmp	r3, #0
 8013364:	d113      	bne.n	801338e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	4618      	mov	r0, r3
 801336c:	f7ff ff3e 	bl	80131ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8013370:	4b81      	ldr	r3, [pc, #516]	; (8013578 <HAL_ADC_Init+0x278>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	099b      	lsrs	r3, r3, #6
 8013376:	4a81      	ldr	r2, [pc, #516]	; (801357c <HAL_ADC_Init+0x27c>)
 8013378:	fba2 2303 	umull	r2, r3, r2, r3
 801337c:	099b      	lsrs	r3, r3, #6
 801337e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8013380:	e002      	b.n	8013388 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	3b01      	subs	r3, #1
 8013386:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d1f9      	bne.n	8013382 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	4618      	mov	r0, r3
 8013394:	f7ff ff3e 	bl	8013214 <LL_ADC_IsInternalRegulatorEnabled>
 8013398:	4603      	mov	r3, r0
 801339a:	2b00      	cmp	r3, #0
 801339c:	d10d      	bne.n	80133ba <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133a2:	f043 0210 	orr.w	r2, r3, #16
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80133ae:	f043 0201 	orr.w	r2, r3, #1
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80133b6:	2301      	movs	r3, #1
 80133b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ff ff77 	bl	80132b2 <LL_ADC_REG_IsConversionOngoing>
 80133c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133ca:	f003 0310 	and.w	r3, r3, #16
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	f040 80c5 	bne.w	801355e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	f040 80c1 	bne.w	801355e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80133e4:	f043 0202 	orr.w	r2, r3, #2
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7ff ff37 	bl	8013264 <LL_ADC_IsEnabled>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d10b      	bne.n	8013414 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80133fc:	4860      	ldr	r0, [pc, #384]	; (8013580 <HAL_ADC_Init+0x280>)
 80133fe:	f7ff ff31 	bl	8013264 <LL_ADC_IsEnabled>
 8013402:	4603      	mov	r3, r0
 8013404:	2b00      	cmp	r3, #0
 8013406:	d105      	bne.n	8013414 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	685b      	ldr	r3, [r3, #4]
 801340c:	4619      	mov	r1, r3
 801340e:	485d      	ldr	r0, [pc, #372]	; (8013584 <HAL_ADC_Init+0x284>)
 8013410:	f7ff fdae 	bl	8012f70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	7e5b      	ldrb	r3, [r3, #25]
 8013418:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801341e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8013424:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 801342a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013432:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013434:	4313      	orrs	r3, r2
 8013436:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801343e:	2b01      	cmp	r3, #1
 8013440:	d106      	bne.n	8013450 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013446:	3b01      	subs	r3, #1
 8013448:	045b      	lsls	r3, r3, #17
 801344a:	69ba      	ldr	r2, [r7, #24]
 801344c:	4313      	orrs	r3, r2
 801344e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013454:	2b00      	cmp	r3, #0
 8013456:	d009      	beq.n	801346c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801345c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013464:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8013466:	69ba      	ldr	r2, [r7, #24]
 8013468:	4313      	orrs	r3, r2
 801346a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	68da      	ldr	r2, [r3, #12]
 8013472:	4b45      	ldr	r3, [pc, #276]	; (8013588 <HAL_ADC_Init+0x288>)
 8013474:	4013      	ands	r3, r2
 8013476:	687a      	ldr	r2, [r7, #4]
 8013478:	6812      	ldr	r2, [r2, #0]
 801347a:	69b9      	ldr	r1, [r7, #24]
 801347c:	430b      	orrs	r3, r1
 801347e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	4618      	mov	r0, r3
 8013486:	f7ff ff14 	bl	80132b2 <LL_ADC_REG_IsConversionOngoing>
 801348a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4618      	mov	r0, r3
 8013492:	f7ff ff21 	bl	80132d8 <LL_ADC_INJ_IsConversionOngoing>
 8013496:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d13d      	bne.n	801351a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d13a      	bne.n	801351a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80134a8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80134b0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80134b2:	4313      	orrs	r3, r2
 80134b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	68db      	ldr	r3, [r3, #12]
 80134bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80134c0:	f023 0302 	bic.w	r3, r3, #2
 80134c4:	687a      	ldr	r2, [r7, #4]
 80134c6:	6812      	ldr	r2, [r2, #0]
 80134c8:	69b9      	ldr	r1, [r7, #24]
 80134ca:	430b      	orrs	r3, r1
 80134cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80134d4:	2b01      	cmp	r3, #1
 80134d6:	d118      	bne.n	801350a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	691b      	ldr	r3, [r3, #16]
 80134de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80134e2:	f023 0304 	bic.w	r3, r3, #4
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80134ee:	4311      	orrs	r1, r2
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80134f4:	4311      	orrs	r1, r2
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80134fa:	430a      	orrs	r2, r1
 80134fc:	431a      	orrs	r2, r3
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	f042 0201 	orr.w	r2, r2, #1
 8013506:	611a      	str	r2, [r3, #16]
 8013508:	e007      	b.n	801351a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	691a      	ldr	r2, [r3, #16]
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f022 0201 	bic.w	r2, r2, #1
 8013518:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	691b      	ldr	r3, [r3, #16]
 801351e:	2b01      	cmp	r3, #1
 8013520:	d10c      	bne.n	801353c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013528:	f023 010f 	bic.w	r1, r3, #15
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	69db      	ldr	r3, [r3, #28]
 8013530:	1e5a      	subs	r2, r3, #1
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	430a      	orrs	r2, r1
 8013538:	631a      	str	r2, [r3, #48]	; 0x30
 801353a:	e007      	b.n	801354c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	f022 020f 	bic.w	r2, r2, #15
 801354a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013550:	f023 0303 	bic.w	r3, r3, #3
 8013554:	f043 0201 	orr.w	r2, r3, #1
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	655a      	str	r2, [r3, #84]	; 0x54
 801355c:	e007      	b.n	801356e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013562:	f043 0210 	orr.w	r2, r3, #16
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 801356a:	2301      	movs	r3, #1
 801356c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 801356e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013570:	4618      	mov	r0, r3
 8013572:	3720      	adds	r7, #32
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	20000004 	.word	0x20000004
 801357c:	053e2d63 	.word	0x053e2d63
 8013580:	50040000 	.word	0x50040000
 8013584:	50040300 	.word	0x50040300
 8013588:	fff0c007 	.word	0xfff0c007

0801358c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	4618      	mov	r0, r3
 801359a:	f7ff fe8a 	bl	80132b2 <LL_ADC_REG_IsConversionOngoing>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d14f      	bne.n	8013644 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80135aa:	2b01      	cmp	r3, #1
 80135ac:	d101      	bne.n	80135b2 <HAL_ADC_Start+0x26>
 80135ae:	2302      	movs	r3, #2
 80135b0:	e04b      	b.n	801364a <HAL_ADC_Start+0xbe>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2201      	movs	r2, #1
 80135b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f000 fcbc 	bl	8013f38 <ADC_Enable>
 80135c0:	4603      	mov	r3, r0
 80135c2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80135c4:	7bfb      	ldrb	r3, [r7, #15]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d137      	bne.n	801363a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80135d2:	f023 0301 	bic.w	r3, r3, #1
 80135d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80135e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80135ea:	d106      	bne.n	80135fa <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135f0:	f023 0206 	bic.w	r2, r3, #6
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	659a      	str	r2, [r3, #88]	; 0x58
 80135f8:	e002      	b.n	8013600 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	2200      	movs	r2, #0
 80135fe:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	221c      	movs	r2, #28
 8013606:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2200      	movs	r2, #0
 801360c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	68db      	ldr	r3, [r3, #12]
 8013616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801361a:	2b00      	cmp	r3, #0
 801361c:	d007      	beq.n	801362e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013622:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8013626:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff fe29 	bl	801328a <LL_ADC_REG_StartConversion>
 8013638:	e006      	b.n	8013648 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	2200      	movs	r2, #0
 801363e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8013642:	e001      	b.n	8013648 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8013644:	2302      	movs	r3, #2
 8013646:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8013648:	7bfb      	ldrb	r3, [r7, #15]
}
 801364a:	4618      	mov	r0, r3
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}

08013652 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8013652:	b580      	push	{r7, lr}
 8013654:	b086      	sub	sp, #24
 8013656:	af00      	add	r7, sp, #0
 8013658:	6078      	str	r0, [r7, #4]
 801365a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	695b      	ldr	r3, [r3, #20]
 8013660:	2b08      	cmp	r3, #8
 8013662:	d102      	bne.n	801366a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8013664:	2308      	movs	r3, #8
 8013666:	617b      	str	r3, [r7, #20]
 8013668:	e010      	b.n	801368c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	68db      	ldr	r3, [r3, #12]
 8013670:	f003 0301 	and.w	r3, r3, #1
 8013674:	2b00      	cmp	r3, #0
 8013676:	d007      	beq.n	8013688 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801367c:	f043 0220 	orr.w	r2, r3, #32
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8013684:	2301      	movs	r3, #1
 8013686:	e068      	b.n	801375a <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8013688:	2304      	movs	r3, #4
 801368a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801368c:	f7ff fc64 	bl	8012f58 <HAL_GetTick>
 8013690:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8013692:	e01a      	b.n	80136ca <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	f1b3 3fff 	cmp.w	r3, #4294967295
 801369a:	d016      	beq.n	80136ca <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 801369c:	f7ff fc5c 	bl	8012f58 <HAL_GetTick>
 80136a0:	4602      	mov	r2, r0
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	1ad3      	subs	r3, r2, r3
 80136a6:	683a      	ldr	r2, [r7, #0]
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d302      	bcc.n	80136b2 <HAL_ADC_PollForConversion+0x60>
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d10b      	bne.n	80136ca <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136b6:	f043 0204 	orr.w	r2, r3, #4
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2200      	movs	r2, #0
 80136c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80136c6:	2303      	movs	r3, #3
 80136c8:	e047      	b.n	801375a <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	681a      	ldr	r2, [r3, #0]
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	4013      	ands	r3, r2
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d0dd      	beq.n	8013694 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7ff fcca 	bl	8013082 <LL_ADC_REG_IsTriggerSourceSWStart>
 80136ee:	4603      	mov	r3, r0
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d01c      	beq.n	801372e <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	7e5b      	ldrb	r3, [r3, #25]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d118      	bne.n	801372e <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f003 0308 	and.w	r3, r3, #8
 8013706:	2b08      	cmp	r3, #8
 8013708:	d111      	bne.n	801372e <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801370e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801371a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801371e:	2b00      	cmp	r3, #0
 8013720:	d105      	bne.n	801372e <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013726:	f043 0201 	orr.w	r2, r3, #1
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	68db      	ldr	r3, [r3, #12]
 8013734:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	2b08      	cmp	r3, #8
 801373a:	d104      	bne.n	8013746 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2208      	movs	r2, #8
 8013742:	601a      	str	r2, [r3, #0]
 8013744:	e008      	b.n	8013758 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801374c:	2b00      	cmp	r3, #0
 801374e:	d103      	bne.n	8013758 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	220c      	movs	r2, #12
 8013756:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8013758:	2300      	movs	r3, #0
}
 801375a:	4618      	mov	r0, r3
 801375c:	3718      	adds	r7, #24
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}

08013762 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8013762:	b480      	push	{r7}
 8013764:	b083      	sub	sp, #12
 8013766:	af00      	add	r7, sp, #0
 8013768:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8013770:	4618      	mov	r0, r3
 8013772:	370c      	adds	r7, #12
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr

0801377c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b0b6      	sub	sp, #216	; 0xd8
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013786:	2300      	movs	r3, #0
 8013788:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801378c:	2300      	movs	r3, #0
 801378e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013796:	2b01      	cmp	r3, #1
 8013798:	d101      	bne.n	801379e <HAL_ADC_ConfigChannel+0x22>
 801379a:	2302      	movs	r3, #2
 801379c:	e3b8      	b.n	8013f10 <HAL_ADC_ConfigChannel+0x794>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2201      	movs	r2, #1
 80137a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7ff fd81 	bl	80132b2 <LL_ADC_REG_IsConversionOngoing>
 80137b0:	4603      	mov	r3, r0
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	f040 839d 	bne.w	8013ef2 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	2b05      	cmp	r3, #5
 80137be:	d824      	bhi.n	801380a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	3b02      	subs	r3, #2
 80137c6:	2b03      	cmp	r3, #3
 80137c8:	d81b      	bhi.n	8013802 <HAL_ADC_ConfigChannel+0x86>
 80137ca:	a201      	add	r2, pc, #4	; (adr r2, 80137d0 <HAL_ADC_ConfigChannel+0x54>)
 80137cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137d0:	080137e1 	.word	0x080137e1
 80137d4:	080137e9 	.word	0x080137e9
 80137d8:	080137f1 	.word	0x080137f1
 80137dc:	080137f9 	.word	0x080137f9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	220c      	movs	r2, #12
 80137e4:	605a      	str	r2, [r3, #4]
          break;
 80137e6:	e011      	b.n	801380c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	2212      	movs	r2, #18
 80137ec:	605a      	str	r2, [r3, #4]
          break;
 80137ee:	e00d      	b.n	801380c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2218      	movs	r2, #24
 80137f4:	605a      	str	r2, [r3, #4]
          break;
 80137f6:	e009      	b.n	801380c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80137fe:	605a      	str	r2, [r3, #4]
          break;
 8013800:	e004      	b.n	801380c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	2206      	movs	r2, #6
 8013806:	605a      	str	r2, [r3, #4]
          break;
 8013808:	e000      	b.n	801380c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 801380a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6818      	ldr	r0, [r3, #0]
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	6859      	ldr	r1, [r3, #4]
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	461a      	mov	r2, r3
 801381a:	f7ff fc45 	bl	80130a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	4618      	mov	r0, r3
 8013824:	f7ff fd45 	bl	80132b2 <LL_ADC_REG_IsConversionOngoing>
 8013828:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	4618      	mov	r0, r3
 8013832:	f7ff fd51 	bl	80132d8 <LL_ADC_INJ_IsConversionOngoing>
 8013836:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801383a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801383e:	2b00      	cmp	r3, #0
 8013840:	f040 81a6 	bne.w	8013b90 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8013844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013848:	2b00      	cmp	r3, #0
 801384a:	f040 81a1 	bne.w	8013b90 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6818      	ldr	r0, [r3, #0]
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	6819      	ldr	r1, [r3, #0]
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	689b      	ldr	r3, [r3, #8]
 801385a:	461a      	mov	r2, r3
 801385c:	f7ff fc50 	bl	8013100 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	695a      	ldr	r2, [r3, #20]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	08db      	lsrs	r3, r3, #3
 801386c:	f003 0303 	and.w	r3, r3, #3
 8013870:	005b      	lsls	r3, r3, #1
 8013872:	fa02 f303 	lsl.w	r3, r2, r3
 8013876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	691b      	ldr	r3, [r3, #16]
 801387e:	2b04      	cmp	r3, #4
 8013880:	d00a      	beq.n	8013898 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6818      	ldr	r0, [r3, #0]
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	6919      	ldr	r1, [r3, #16]
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	681a      	ldr	r2, [r3, #0]
 801388e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013892:	f7ff fba1 	bl	8012fd8 <LL_ADC_SetOffset>
 8013896:	e17b      	b.n	8013b90 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	2100      	movs	r1, #0
 801389e:	4618      	mov	r0, r3
 80138a0:	f7ff fbbe 	bl	8013020 <LL_ADC_GetOffsetChannel>
 80138a4:	4603      	mov	r3, r0
 80138a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d10a      	bne.n	80138c4 <HAL_ADC_ConfigChannel+0x148>
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	2100      	movs	r1, #0
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7ff fbb3 	bl	8013020 <LL_ADC_GetOffsetChannel>
 80138ba:	4603      	mov	r3, r0
 80138bc:	0e9b      	lsrs	r3, r3, #26
 80138be:	f003 021f 	and.w	r2, r3, #31
 80138c2:	e01e      	b.n	8013902 <HAL_ADC_ConfigChannel+0x186>
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	2100      	movs	r1, #0
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7ff fba8 	bl	8013020 <LL_ADC_GetOffsetChannel>
 80138d0:	4603      	mov	r3, r0
 80138d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80138d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80138da:	fa93 f3a3 	rbit	r3, r3
 80138de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80138e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80138e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80138ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d101      	bne.n	80138f6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80138f2:	2320      	movs	r3, #32
 80138f4:	e004      	b.n	8013900 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80138f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80138fa:	fab3 f383 	clz	r3, r3
 80138fe:	b2db      	uxtb	r3, r3
 8013900:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801390a:	2b00      	cmp	r3, #0
 801390c:	d105      	bne.n	801391a <HAL_ADC_ConfigChannel+0x19e>
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	0e9b      	lsrs	r3, r3, #26
 8013914:	f003 031f 	and.w	r3, r3, #31
 8013918:	e018      	b.n	801394c <HAL_ADC_ConfigChannel+0x1d0>
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013922:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013926:	fa93 f3a3 	rbit	r3, r3
 801392a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801392e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8013936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801393a:	2b00      	cmp	r3, #0
 801393c:	d101      	bne.n	8013942 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 801393e:	2320      	movs	r3, #32
 8013940:	e004      	b.n	801394c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8013942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013946:	fab3 f383 	clz	r3, r3
 801394a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801394c:	429a      	cmp	r2, r3
 801394e:	d106      	bne.n	801395e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2200      	movs	r2, #0
 8013956:	2100      	movs	r1, #0
 8013958:	4618      	mov	r0, r3
 801395a:	f7ff fb77 	bl	801304c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	2101      	movs	r1, #1
 8013964:	4618      	mov	r0, r3
 8013966:	f7ff fb5b 	bl	8013020 <LL_ADC_GetOffsetChannel>
 801396a:	4603      	mov	r3, r0
 801396c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013970:	2b00      	cmp	r3, #0
 8013972:	d10a      	bne.n	801398a <HAL_ADC_ConfigChannel+0x20e>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	2101      	movs	r1, #1
 801397a:	4618      	mov	r0, r3
 801397c:	f7ff fb50 	bl	8013020 <LL_ADC_GetOffsetChannel>
 8013980:	4603      	mov	r3, r0
 8013982:	0e9b      	lsrs	r3, r3, #26
 8013984:	f003 021f 	and.w	r2, r3, #31
 8013988:	e01e      	b.n	80139c8 <HAL_ADC_ConfigChannel+0x24c>
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2101      	movs	r1, #1
 8013990:	4618      	mov	r0, r3
 8013992:	f7ff fb45 	bl	8013020 <LL_ADC_GetOffsetChannel>
 8013996:	4603      	mov	r3, r0
 8013998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801399c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80139a0:	fa93 f3a3 	rbit	r3, r3
 80139a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80139a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80139ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80139b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d101      	bne.n	80139bc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80139b8:	2320      	movs	r3, #32
 80139ba:	e004      	b.n	80139c6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80139bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80139c0:	fab3 f383 	clz	r3, r3
 80139c4:	b2db      	uxtb	r3, r3
 80139c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80139c8:	683b      	ldr	r3, [r7, #0]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d105      	bne.n	80139e0 <HAL_ADC_ConfigChannel+0x264>
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	0e9b      	lsrs	r3, r3, #26
 80139da:	f003 031f 	and.w	r3, r3, #31
 80139de:	e018      	b.n	8013a12 <HAL_ADC_ConfigChannel+0x296>
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80139e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80139ec:	fa93 f3a3 	rbit	r3, r3
 80139f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80139f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80139f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80139fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d101      	bne.n	8013a08 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8013a04:	2320      	movs	r3, #32
 8013a06:	e004      	b.n	8013a12 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8013a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013a0c:	fab3 f383 	clz	r3, r3
 8013a10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d106      	bne.n	8013a24 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	2101      	movs	r1, #1
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7ff fb14 	bl	801304c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	2102      	movs	r1, #2
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7ff faf8 	bl	8013020 <LL_ADC_GetOffsetChannel>
 8013a30:	4603      	mov	r3, r0
 8013a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d10a      	bne.n	8013a50 <HAL_ADC_ConfigChannel+0x2d4>
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2102      	movs	r1, #2
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7ff faed 	bl	8013020 <LL_ADC_GetOffsetChannel>
 8013a46:	4603      	mov	r3, r0
 8013a48:	0e9b      	lsrs	r3, r3, #26
 8013a4a:	f003 021f 	and.w	r2, r3, #31
 8013a4e:	e01e      	b.n	8013a8e <HAL_ADC_ConfigChannel+0x312>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	2102      	movs	r1, #2
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7ff fae2 	bl	8013020 <LL_ADC_GetOffsetChannel>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a66:	fa93 f3a3 	rbit	r3, r3
 8013a6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8013a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013a72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8013a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d101      	bne.n	8013a82 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8013a7e:	2320      	movs	r3, #32
 8013a80:	e004      	b.n	8013a8c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8013a82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013a86:	fab3 f383 	clz	r3, r3
 8013a8a:	b2db      	uxtb	r3, r3
 8013a8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d105      	bne.n	8013aa6 <HAL_ADC_ConfigChannel+0x32a>
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	0e9b      	lsrs	r3, r3, #26
 8013aa0:	f003 031f 	and.w	r3, r3, #31
 8013aa4:	e016      	b.n	8013ad4 <HAL_ADC_ConfigChannel+0x358>
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013aae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013ab2:	fa93 f3a3 	rbit	r3, r3
 8013ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8013ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013aba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8013abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d101      	bne.n	8013aca <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8013ac6:	2320      	movs	r3, #32
 8013ac8:	e004      	b.n	8013ad4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8013aca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ace:	fab3 f383 	clz	r3, r3
 8013ad2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d106      	bne.n	8013ae6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	2200      	movs	r2, #0
 8013ade:	2102      	movs	r1, #2
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7ff fab3 	bl	801304c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2103      	movs	r1, #3
 8013aec:	4618      	mov	r0, r3
 8013aee:	f7ff fa97 	bl	8013020 <LL_ADC_GetOffsetChannel>
 8013af2:	4603      	mov	r3, r0
 8013af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d10a      	bne.n	8013b12 <HAL_ADC_ConfigChannel+0x396>
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2103      	movs	r1, #3
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7ff fa8c 	bl	8013020 <LL_ADC_GetOffsetChannel>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	0e9b      	lsrs	r3, r3, #26
 8013b0c:	f003 021f 	and.w	r2, r3, #31
 8013b10:	e017      	b.n	8013b42 <HAL_ADC_ConfigChannel+0x3c6>
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	2103      	movs	r1, #3
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7ff fa81 	bl	8013020 <LL_ADC_GetOffsetChannel>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b24:	fa93 f3a3 	rbit	r3, r3
 8013b28:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8013b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b2c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8013b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d101      	bne.n	8013b38 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8013b34:	2320      	movs	r3, #32
 8013b36:	e003      	b.n	8013b40 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8013b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b3a:	fab3 f383 	clz	r3, r3
 8013b3e:	b2db      	uxtb	r3, r3
 8013b40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d105      	bne.n	8013b5a <HAL_ADC_ConfigChannel+0x3de>
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	0e9b      	lsrs	r3, r3, #26
 8013b54:	f003 031f 	and.w	r3, r3, #31
 8013b58:	e011      	b.n	8013b7e <HAL_ADC_ConfigChannel+0x402>
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b62:	fa93 f3a3 	rbit	r3, r3
 8013b66:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8013b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8013b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d101      	bne.n	8013b76 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8013b72:	2320      	movs	r3, #32
 8013b74:	e003      	b.n	8013b7e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8013b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b78:	fab3 f383 	clz	r3, r3
 8013b7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d106      	bne.n	8013b90 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2200      	movs	r2, #0
 8013b88:	2103      	movs	r1, #3
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7ff fa5e 	bl	801304c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7ff fb65 	bl	8013264 <LL_ADC_IsEnabled>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f040 813f 	bne.w	8013e20 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6818      	ldr	r0, [r3, #0]
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	6819      	ldr	r1, [r3, #0]
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	68db      	ldr	r3, [r3, #12]
 8013bae:	461a      	mov	r2, r3
 8013bb0:	f7ff fad2 	bl	8013158 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	4a8e      	ldr	r2, [pc, #568]	; (8013df4 <HAL_ADC_ConfigChannel+0x678>)
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	f040 8130 	bne.w	8013e20 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d10b      	bne.n	8013be8 <HAL_ADC_ConfigChannel+0x46c>
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	0e9b      	lsrs	r3, r3, #26
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	f003 031f 	and.w	r3, r3, #31
 8013bdc:	2b09      	cmp	r3, #9
 8013bde:	bf94      	ite	ls
 8013be0:	2301      	movls	r3, #1
 8013be2:	2300      	movhi	r3, #0
 8013be4:	b2db      	uxtb	r3, r3
 8013be6:	e019      	b.n	8013c1c <HAL_ADC_ConfigChannel+0x4a0>
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013bf0:	fa93 f3a3 	rbit	r3, r3
 8013bf4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8013bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bf8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8013bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d101      	bne.n	8013c04 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8013c00:	2320      	movs	r3, #32
 8013c02:	e003      	b.n	8013c0c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8013c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c06:	fab3 f383 	clz	r3, r3
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	f003 031f 	and.w	r3, r3, #31
 8013c12:	2b09      	cmp	r3, #9
 8013c14:	bf94      	ite	ls
 8013c16:	2301      	movls	r3, #1
 8013c18:	2300      	movhi	r3, #0
 8013c1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d079      	beq.n	8013d14 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d107      	bne.n	8013c3c <HAL_ADC_ConfigChannel+0x4c0>
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	0e9b      	lsrs	r3, r3, #26
 8013c32:	3301      	adds	r3, #1
 8013c34:	069b      	lsls	r3, r3, #26
 8013c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013c3a:	e015      	b.n	8013c68 <HAL_ADC_ConfigChannel+0x4ec>
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c44:	fa93 f3a3 	rbit	r3, r3
 8013c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8013c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8013c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d101      	bne.n	8013c58 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8013c54:	2320      	movs	r3, #32
 8013c56:	e003      	b.n	8013c60 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8013c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c5a:	fab3 f383 	clz	r3, r3
 8013c5e:	b2db      	uxtb	r3, r3
 8013c60:	3301      	adds	r3, #1
 8013c62:	069b      	lsls	r3, r3, #26
 8013c64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d109      	bne.n	8013c88 <HAL_ADC_ConfigChannel+0x50c>
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	0e9b      	lsrs	r3, r3, #26
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	f003 031f 	and.w	r3, r3, #31
 8013c80:	2101      	movs	r1, #1
 8013c82:	fa01 f303 	lsl.w	r3, r1, r3
 8013c86:	e017      	b.n	8013cb8 <HAL_ADC_ConfigChannel+0x53c>
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c90:	fa93 f3a3 	rbit	r3, r3
 8013c94:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8013c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8013c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d101      	bne.n	8013ca4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8013ca0:	2320      	movs	r3, #32
 8013ca2:	e003      	b.n	8013cac <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8013ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ca6:	fab3 f383 	clz	r3, r3
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	3301      	adds	r3, #1
 8013cae:	f003 031f 	and.w	r3, r3, #31
 8013cb2:	2101      	movs	r1, #1
 8013cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8013cb8:	ea42 0103 	orr.w	r1, r2, r3
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d10a      	bne.n	8013cde <HAL_ADC_ConfigChannel+0x562>
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	0e9b      	lsrs	r3, r3, #26
 8013cce:	3301      	adds	r3, #1
 8013cd0:	f003 021f 	and.w	r2, r3, #31
 8013cd4:	4613      	mov	r3, r2
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	4413      	add	r3, r2
 8013cda:	051b      	lsls	r3, r3, #20
 8013cdc:	e018      	b.n	8013d10 <HAL_ADC_ConfigChannel+0x594>
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ce6:	fa93 f3a3 	rbit	r3, r3
 8013cea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8013cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8013cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d101      	bne.n	8013cfa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8013cf6:	2320      	movs	r3, #32
 8013cf8:	e003      	b.n	8013d02 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8013cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cfc:	fab3 f383 	clz	r3, r3
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	3301      	adds	r3, #1
 8013d04:	f003 021f 	and.w	r2, r3, #31
 8013d08:	4613      	mov	r3, r2
 8013d0a:	005b      	lsls	r3, r3, #1
 8013d0c:	4413      	add	r3, r2
 8013d0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013d10:	430b      	orrs	r3, r1
 8013d12:	e080      	b.n	8013e16 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d107      	bne.n	8013d30 <HAL_ADC_ConfigChannel+0x5b4>
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	0e9b      	lsrs	r3, r3, #26
 8013d26:	3301      	adds	r3, #1
 8013d28:	069b      	lsls	r3, r3, #26
 8013d2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013d2e:	e015      	b.n	8013d5c <HAL_ADC_ConfigChannel+0x5e0>
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d38:	fa93 f3a3 	rbit	r3, r3
 8013d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8013d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d40:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8013d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d101      	bne.n	8013d4c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8013d48:	2320      	movs	r3, #32
 8013d4a:	e003      	b.n	8013d54 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8013d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4e:	fab3 f383 	clz	r3, r3
 8013d52:	b2db      	uxtb	r3, r3
 8013d54:	3301      	adds	r3, #1
 8013d56:	069b      	lsls	r3, r3, #26
 8013d58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d109      	bne.n	8013d7c <HAL_ADC_ConfigChannel+0x600>
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	0e9b      	lsrs	r3, r3, #26
 8013d6e:	3301      	adds	r3, #1
 8013d70:	f003 031f 	and.w	r3, r3, #31
 8013d74:	2101      	movs	r1, #1
 8013d76:	fa01 f303 	lsl.w	r3, r1, r3
 8013d7a:	e017      	b.n	8013dac <HAL_ADC_ConfigChannel+0x630>
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d82:	6a3b      	ldr	r3, [r7, #32]
 8013d84:	fa93 f3a3 	rbit	r3, r3
 8013d88:	61fb      	str	r3, [r7, #28]
  return result;
 8013d8a:	69fb      	ldr	r3, [r7, #28]
 8013d8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d101      	bne.n	8013d98 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8013d94:	2320      	movs	r3, #32
 8013d96:	e003      	b.n	8013da0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8013d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9a:	fab3 f383 	clz	r3, r3
 8013d9e:	b2db      	uxtb	r3, r3
 8013da0:	3301      	adds	r3, #1
 8013da2:	f003 031f 	and.w	r3, r3, #31
 8013da6:	2101      	movs	r1, #1
 8013da8:	fa01 f303 	lsl.w	r3, r1, r3
 8013dac:	ea42 0103 	orr.w	r1, r2, r3
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d10d      	bne.n	8013dd8 <HAL_ADC_ConfigChannel+0x65c>
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	0e9b      	lsrs	r3, r3, #26
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	f003 021f 	and.w	r2, r3, #31
 8013dc8:	4613      	mov	r3, r2
 8013dca:	005b      	lsls	r3, r3, #1
 8013dcc:	4413      	add	r3, r2
 8013dce:	3b1e      	subs	r3, #30
 8013dd0:	051b      	lsls	r3, r3, #20
 8013dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013dd6:	e01d      	b.n	8013e14 <HAL_ADC_ConfigChannel+0x698>
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013dde:	697b      	ldr	r3, [r7, #20]
 8013de0:	fa93 f3a3 	rbit	r3, r3
 8013de4:	613b      	str	r3, [r7, #16]
  return result;
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013dea:	69bb      	ldr	r3, [r7, #24]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d103      	bne.n	8013df8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8013df0:	2320      	movs	r3, #32
 8013df2:	e005      	b.n	8013e00 <HAL_ADC_ConfigChannel+0x684>
 8013df4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8013df8:	69bb      	ldr	r3, [r7, #24]
 8013dfa:	fab3 f383 	clz	r3, r3
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	3301      	adds	r3, #1
 8013e02:	f003 021f 	and.w	r2, r3, #31
 8013e06:	4613      	mov	r3, r2
 8013e08:	005b      	lsls	r3, r3, #1
 8013e0a:	4413      	add	r3, r2
 8013e0c:	3b1e      	subs	r3, #30
 8013e0e:	051b      	lsls	r3, r3, #20
 8013e10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013e14:	430b      	orrs	r3, r1
 8013e16:	683a      	ldr	r2, [r7, #0]
 8013e18:	6892      	ldr	r2, [r2, #8]
 8013e1a:	4619      	mov	r1, r3
 8013e1c:	f7ff f970 	bl	8013100 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	4b3c      	ldr	r3, [pc, #240]	; (8013f18 <HAL_ADC_ConfigChannel+0x79c>)
 8013e26:	4013      	ands	r3, r2
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d06b      	beq.n	8013f04 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013e2c:	483b      	ldr	r0, [pc, #236]	; (8013f1c <HAL_ADC_ConfigChannel+0x7a0>)
 8013e2e:	f7ff f8c5 	bl	8012fbc <LL_ADC_GetCommonPathInternalCh>
 8013e32:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	4a39      	ldr	r2, [pc, #228]	; (8013f20 <HAL_ADC_ConfigChannel+0x7a4>)
 8013e3c:	4293      	cmp	r3, r2
 8013e3e:	d126      	bne.n	8013e8e <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8013e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d120      	bne.n	8013e8e <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	4a34      	ldr	r2, [pc, #208]	; (8013f24 <HAL_ADC_ConfigChannel+0x7a8>)
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d156      	bne.n	8013f04 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013e5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013e5e:	4619      	mov	r1, r3
 8013e60:	482e      	ldr	r0, [pc, #184]	; (8013f1c <HAL_ADC_ConfigChannel+0x7a0>)
 8013e62:	f7ff f898 	bl	8012f96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8013e66:	4b30      	ldr	r3, [pc, #192]	; (8013f28 <HAL_ADC_ConfigChannel+0x7ac>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	099b      	lsrs	r3, r3, #6
 8013e6c:	4a2f      	ldr	r2, [pc, #188]	; (8013f2c <HAL_ADC_ConfigChannel+0x7b0>)
 8013e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8013e72:	099a      	lsrs	r2, r3, #6
 8013e74:	4613      	mov	r3, r2
 8013e76:	005b      	lsls	r3, r3, #1
 8013e78:	4413      	add	r3, r2
 8013e7a:	009b      	lsls	r3, r3, #2
 8013e7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8013e7e:	e002      	b.n	8013e86 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	3b01      	subs	r3, #1
 8013e84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d1f9      	bne.n	8013e80 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013e8c:	e03a      	b.n	8013f04 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	4a27      	ldr	r2, [pc, #156]	; (8013f30 <HAL_ADC_ConfigChannel+0x7b4>)
 8013e94:	4293      	cmp	r3, r2
 8013e96:	d113      	bne.n	8013ec0 <HAL_ADC_ConfigChannel+0x744>
 8013e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d10d      	bne.n	8013ec0 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	4a1e      	ldr	r2, [pc, #120]	; (8013f24 <HAL_ADC_ConfigChannel+0x7a8>)
 8013eaa:	4293      	cmp	r3, r2
 8013eac:	d12a      	bne.n	8013f04 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013eb6:	4619      	mov	r1, r3
 8013eb8:	4818      	ldr	r0, [pc, #96]	; (8013f1c <HAL_ADC_ConfigChannel+0x7a0>)
 8013eba:	f7ff f86c 	bl	8012f96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013ebe:	e021      	b.n	8013f04 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	4a1b      	ldr	r2, [pc, #108]	; (8013f34 <HAL_ADC_ConfigChannel+0x7b8>)
 8013ec6:	4293      	cmp	r3, r2
 8013ec8:	d11c      	bne.n	8013f04 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8013eca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d116      	bne.n	8013f04 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	4a12      	ldr	r2, [pc, #72]	; (8013f24 <HAL_ADC_ConfigChannel+0x7a8>)
 8013edc:	4293      	cmp	r3, r2
 8013ede:	d111      	bne.n	8013f04 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013ee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013ee8:	4619      	mov	r1, r3
 8013eea:	480c      	ldr	r0, [pc, #48]	; (8013f1c <HAL_ADC_ConfigChannel+0x7a0>)
 8013eec:	f7ff f853 	bl	8012f96 <LL_ADC_SetCommonPathInternalCh>
 8013ef0:	e008      	b.n	8013f04 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ef6:	f043 0220 	orr.w	r2, r3, #32
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8013efe:	2301      	movs	r3, #1
 8013f00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2200      	movs	r2, #0
 8013f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8013f0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	37d8      	adds	r7, #216	; 0xd8
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}
 8013f18:	80080000 	.word	0x80080000
 8013f1c:	50040300 	.word	0x50040300
 8013f20:	c7520000 	.word	0xc7520000
 8013f24:	50040000 	.word	0x50040000
 8013f28:	20000004 	.word	0x20000004
 8013f2c:	053e2d63 	.word	0x053e2d63
 8013f30:	cb840000 	.word	0xcb840000
 8013f34:	80000001 	.word	0x80000001

08013f38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b084      	sub	sp, #16
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7ff f98d 	bl	8013264 <LL_ADC_IsEnabled>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d146      	bne.n	8013fde <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	689a      	ldr	r2, [r3, #8]
 8013f56:	4b24      	ldr	r3, [pc, #144]	; (8013fe8 <ADC_Enable+0xb0>)
 8013f58:	4013      	ands	r3, r2
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d00d      	beq.n	8013f7a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f62:	f043 0210 	orr.w	r2, r3, #16
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f6e:	f043 0201 	orr.w	r2, r3, #1
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8013f76:	2301      	movs	r3, #1
 8013f78:	e032      	b.n	8013fe0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7ff f95c 	bl	801323c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8013f84:	f7fe ffe8 	bl	8012f58 <HAL_GetTick>
 8013f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8013f8a:	e021      	b.n	8013fd0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7ff f967 	bl	8013264 <LL_ADC_IsEnabled>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d104      	bne.n	8013fa6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7ff f94b 	bl	801323c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8013fa6:	f7fe ffd7 	bl	8012f58 <HAL_GetTick>
 8013faa:	4602      	mov	r2, r0
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	1ad3      	subs	r3, r2, r3
 8013fb0:	2b02      	cmp	r3, #2
 8013fb2:	d90d      	bls.n	8013fd0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fb8:	f043 0210 	orr.w	r2, r3, #16
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fc4:	f043 0201 	orr.w	r2, r3, #1
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	e007      	b.n	8013fe0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	f003 0301 	and.w	r3, r3, #1
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	d1d6      	bne.n	8013f8c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8013fde:	2300      	movs	r3, #0
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3710      	adds	r7, #16
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}
 8013fe8:	8000003f 	.word	0x8000003f

08013fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013fec:	b480      	push	{r7}
 8013fee:	b085      	sub	sp, #20
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f003 0307 	and.w	r3, r3, #7
 8013ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013ffc:	4b0c      	ldr	r3, [pc, #48]	; (8014030 <__NVIC_SetPriorityGrouping+0x44>)
 8013ffe:	68db      	ldr	r3, [r3, #12]
 8014000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014002:	68ba      	ldr	r2, [r7, #8]
 8014004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8014008:	4013      	ands	r3, r2
 801400a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8014014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8014018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801401c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801401e:	4a04      	ldr	r2, [pc, #16]	; (8014030 <__NVIC_SetPriorityGrouping+0x44>)
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	60d3      	str	r3, [r2, #12]
}
 8014024:	bf00      	nop
 8014026:	3714      	adds	r7, #20
 8014028:	46bd      	mov	sp, r7
 801402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402e:	4770      	bx	lr
 8014030:	e000ed00 	.word	0xe000ed00

08014034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8014034:	b480      	push	{r7}
 8014036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014038:	4b04      	ldr	r3, [pc, #16]	; (801404c <__NVIC_GetPriorityGrouping+0x18>)
 801403a:	68db      	ldr	r3, [r3, #12]
 801403c:	0a1b      	lsrs	r3, r3, #8
 801403e:	f003 0307 	and.w	r3, r3, #7
}
 8014042:	4618      	mov	r0, r3
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr
 801404c:	e000ed00 	.word	0xe000ed00

08014050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
 8014056:	4603      	mov	r3, r0
 8014058:	6039      	str	r1, [r7, #0]
 801405a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801405c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014060:	2b00      	cmp	r3, #0
 8014062:	db0a      	blt.n	801407a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	b2da      	uxtb	r2, r3
 8014068:	490c      	ldr	r1, [pc, #48]	; (801409c <__NVIC_SetPriority+0x4c>)
 801406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801406e:	0112      	lsls	r2, r2, #4
 8014070:	b2d2      	uxtb	r2, r2
 8014072:	440b      	add	r3, r1
 8014074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8014078:	e00a      	b.n	8014090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	b2da      	uxtb	r2, r3
 801407e:	4908      	ldr	r1, [pc, #32]	; (80140a0 <__NVIC_SetPriority+0x50>)
 8014080:	79fb      	ldrb	r3, [r7, #7]
 8014082:	f003 030f 	and.w	r3, r3, #15
 8014086:	3b04      	subs	r3, #4
 8014088:	0112      	lsls	r2, r2, #4
 801408a:	b2d2      	uxtb	r2, r2
 801408c:	440b      	add	r3, r1
 801408e:	761a      	strb	r2, [r3, #24]
}
 8014090:	bf00      	nop
 8014092:	370c      	adds	r7, #12
 8014094:	46bd      	mov	sp, r7
 8014096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409a:	4770      	bx	lr
 801409c:	e000e100 	.word	0xe000e100
 80140a0:	e000ed00 	.word	0xe000ed00

080140a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80140a4:	b480      	push	{r7}
 80140a6:	b089      	sub	sp, #36	; 0x24
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	60f8      	str	r0, [r7, #12]
 80140ac:	60b9      	str	r1, [r7, #8]
 80140ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	f003 0307 	and.w	r3, r3, #7
 80140b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80140b8:	69fb      	ldr	r3, [r7, #28]
 80140ba:	f1c3 0307 	rsb	r3, r3, #7
 80140be:	2b04      	cmp	r3, #4
 80140c0:	bf28      	it	cs
 80140c2:	2304      	movcs	r3, #4
 80140c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80140c6:	69fb      	ldr	r3, [r7, #28]
 80140c8:	3304      	adds	r3, #4
 80140ca:	2b06      	cmp	r3, #6
 80140cc:	d902      	bls.n	80140d4 <NVIC_EncodePriority+0x30>
 80140ce:	69fb      	ldr	r3, [r7, #28]
 80140d0:	3b03      	subs	r3, #3
 80140d2:	e000      	b.n	80140d6 <NVIC_EncodePriority+0x32>
 80140d4:	2300      	movs	r3, #0
 80140d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80140d8:	f04f 32ff 	mov.w	r2, #4294967295
 80140dc:	69bb      	ldr	r3, [r7, #24]
 80140de:	fa02 f303 	lsl.w	r3, r2, r3
 80140e2:	43da      	mvns	r2, r3
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	401a      	ands	r2, r3
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80140ec:	f04f 31ff 	mov.w	r1, #4294967295
 80140f0:	697b      	ldr	r3, [r7, #20]
 80140f2:	fa01 f303 	lsl.w	r3, r1, r3
 80140f6:	43d9      	mvns	r1, r3
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80140fc:	4313      	orrs	r3, r2
         );
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3724      	adds	r7, #36	; 0x24
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr
	...

0801410c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	3b01      	subs	r3, #1
 8014118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801411c:	d301      	bcc.n	8014122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801411e:	2301      	movs	r3, #1
 8014120:	e00f      	b.n	8014142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8014122:	4a0a      	ldr	r2, [pc, #40]	; (801414c <SysTick_Config+0x40>)
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	3b01      	subs	r3, #1
 8014128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801412a:	210f      	movs	r1, #15
 801412c:	f04f 30ff 	mov.w	r0, #4294967295
 8014130:	f7ff ff8e 	bl	8014050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8014134:	4b05      	ldr	r3, [pc, #20]	; (801414c <SysTick_Config+0x40>)
 8014136:	2200      	movs	r2, #0
 8014138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801413a:	4b04      	ldr	r3, [pc, #16]	; (801414c <SysTick_Config+0x40>)
 801413c:	2207      	movs	r2, #7
 801413e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8014140:	2300      	movs	r3, #0
}
 8014142:	4618      	mov	r0, r3
 8014144:	3708      	adds	r7, #8
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	e000e010 	.word	0xe000e010

08014150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f7ff ff47 	bl	8013fec <__NVIC_SetPriorityGrouping>
}
 801415e:	bf00      	nop
 8014160:	3708      	adds	r7, #8
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}

08014166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014166:	b580      	push	{r7, lr}
 8014168:	b086      	sub	sp, #24
 801416a:	af00      	add	r7, sp, #0
 801416c:	4603      	mov	r3, r0
 801416e:	60b9      	str	r1, [r7, #8]
 8014170:	607a      	str	r2, [r7, #4]
 8014172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8014174:	2300      	movs	r3, #0
 8014176:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8014178:	f7ff ff5c 	bl	8014034 <__NVIC_GetPriorityGrouping>
 801417c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801417e:	687a      	ldr	r2, [r7, #4]
 8014180:	68b9      	ldr	r1, [r7, #8]
 8014182:	6978      	ldr	r0, [r7, #20]
 8014184:	f7ff ff8e 	bl	80140a4 <NVIC_EncodePriority>
 8014188:	4602      	mov	r2, r0
 801418a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801418e:	4611      	mov	r1, r2
 8014190:	4618      	mov	r0, r3
 8014192:	f7ff ff5d 	bl	8014050 <__NVIC_SetPriority>
}
 8014196:	bf00      	nop
 8014198:	3718      	adds	r7, #24
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}

0801419e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801419e:	b580      	push	{r7, lr}
 80141a0:	b082      	sub	sp, #8
 80141a2:	af00      	add	r7, sp, #0
 80141a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80141a6:	6878      	ldr	r0, [r7, #4]
 80141a8:	f7ff ffb0 	bl	801410c <SysTick_Config>
 80141ac:	4603      	mov	r3, r0
}
 80141ae:	4618      	mov	r0, r3
 80141b0:	3708      	adds	r7, #8
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}
	...

080141b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d101      	bne.n	80141ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80141c6:	2301      	movs	r3, #1
 80141c8:	e054      	b.n	8014274 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	7f5b      	ldrb	r3, [r3, #29]
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d105      	bne.n	80141e0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2200      	movs	r2, #0
 80141d8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f7fe faac 	bl	8012738 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2202      	movs	r2, #2
 80141e4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	791b      	ldrb	r3, [r3, #4]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d10c      	bne.n	8014208 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	4a22      	ldr	r2, [pc, #136]	; (801427c <HAL_CRC_Init+0xc4>)
 80141f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	689a      	ldr	r2, [r3, #8]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	f022 0218 	bic.w	r2, r2, #24
 8014204:	609a      	str	r2, [r3, #8]
 8014206:	e00c      	b.n	8014222 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	6899      	ldr	r1, [r3, #8]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	461a      	mov	r2, r3
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f000 f834 	bl	8014280 <HAL_CRCEx_Polynomial_Set>
 8014218:	4603      	mov	r3, r0
 801421a:	2b00      	cmp	r3, #0
 801421c:	d001      	beq.n	8014222 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 801421e:	2301      	movs	r3, #1
 8014220:	e028      	b.n	8014274 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	795b      	ldrb	r3, [r3, #5]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d105      	bne.n	8014236 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	f04f 32ff 	mov.w	r2, #4294967295
 8014232:	611a      	str	r2, [r3, #16]
 8014234:	e004      	b.n	8014240 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	687a      	ldr	r2, [r7, #4]
 801423c:	6912      	ldr	r2, [r2, #16]
 801423e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	689b      	ldr	r3, [r3, #8]
 8014246:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	695a      	ldr	r2, [r3, #20]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	430a      	orrs	r2, r1
 8014254:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	689b      	ldr	r3, [r3, #8]
 801425c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	699a      	ldr	r2, [r3, #24]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	430a      	orrs	r2, r1
 801426a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2201      	movs	r2, #1
 8014270:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8014272:	2300      	movs	r3, #0
}
 8014274:	4618      	mov	r0, r3
 8014276:	3708      	adds	r7, #8
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	04c11db7 	.word	0x04c11db7

08014280 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8014280:	b480      	push	{r7}
 8014282:	b087      	sub	sp, #28
 8014284:	af00      	add	r7, sp, #0
 8014286:	60f8      	str	r0, [r7, #12]
 8014288:	60b9      	str	r1, [r7, #8]
 801428a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801428c:	2300      	movs	r3, #0
 801428e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8014290:	231f      	movs	r3, #31
 8014292:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8014294:	bf00      	nop
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	1e5a      	subs	r2, r3, #1
 801429a:	613a      	str	r2, [r7, #16]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d009      	beq.n	80142b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80142a0:	693b      	ldr	r3, [r7, #16]
 80142a2:	f003 031f 	and.w	r3, r3, #31
 80142a6:	68ba      	ldr	r2, [r7, #8]
 80142a8:	fa22 f303 	lsr.w	r3, r2, r3
 80142ac:	f003 0301 	and.w	r3, r3, #1
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d0f0      	beq.n	8014296 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b18      	cmp	r3, #24
 80142b8:	d846      	bhi.n	8014348 <HAL_CRCEx_Polynomial_Set+0xc8>
 80142ba:	a201      	add	r2, pc, #4	; (adr r2, 80142c0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80142bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142c0:	0801434f 	.word	0x0801434f
 80142c4:	08014349 	.word	0x08014349
 80142c8:	08014349 	.word	0x08014349
 80142cc:	08014349 	.word	0x08014349
 80142d0:	08014349 	.word	0x08014349
 80142d4:	08014349 	.word	0x08014349
 80142d8:	08014349 	.word	0x08014349
 80142dc:	08014349 	.word	0x08014349
 80142e0:	0801433d 	.word	0x0801433d
 80142e4:	08014349 	.word	0x08014349
 80142e8:	08014349 	.word	0x08014349
 80142ec:	08014349 	.word	0x08014349
 80142f0:	08014349 	.word	0x08014349
 80142f4:	08014349 	.word	0x08014349
 80142f8:	08014349 	.word	0x08014349
 80142fc:	08014349 	.word	0x08014349
 8014300:	08014331 	.word	0x08014331
 8014304:	08014349 	.word	0x08014349
 8014308:	08014349 	.word	0x08014349
 801430c:	08014349 	.word	0x08014349
 8014310:	08014349 	.word	0x08014349
 8014314:	08014349 	.word	0x08014349
 8014318:	08014349 	.word	0x08014349
 801431c:	08014349 	.word	0x08014349
 8014320:	08014325 	.word	0x08014325
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	2b06      	cmp	r3, #6
 8014328:	d913      	bls.n	8014352 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 801432a:	2301      	movs	r3, #1
 801432c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801432e:	e010      	b.n	8014352 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8014330:	693b      	ldr	r3, [r7, #16]
 8014332:	2b07      	cmp	r3, #7
 8014334:	d90f      	bls.n	8014356 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8014336:	2301      	movs	r3, #1
 8014338:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801433a:	e00c      	b.n	8014356 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	2b0f      	cmp	r3, #15
 8014340:	d90b      	bls.n	801435a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8014342:	2301      	movs	r3, #1
 8014344:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8014346:	e008      	b.n	801435a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8014348:	2301      	movs	r3, #1
 801434a:	75fb      	strb	r3, [r7, #23]
      break;
 801434c:	e006      	b.n	801435c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801434e:	bf00      	nop
 8014350:	e004      	b.n	801435c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8014352:	bf00      	nop
 8014354:	e002      	b.n	801435c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8014356:	bf00      	nop
 8014358:	e000      	b.n	801435c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801435a:	bf00      	nop
  }
  if (status == HAL_OK)
 801435c:	7dfb      	ldrb	r3, [r7, #23]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d10d      	bne.n	801437e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	68ba      	ldr	r2, [r7, #8]
 8014368:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	689b      	ldr	r3, [r3, #8]
 8014370:	f023 0118 	bic.w	r1, r3, #24
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	687a      	ldr	r2, [r7, #4]
 801437a:	430a      	orrs	r2, r1
 801437c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 801437e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014380:	4618      	mov	r0, r3
 8014382:	371c      	adds	r7, #28
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr

0801438c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801438c:	b480      	push	{r7}
 801438e:	b087      	sub	sp, #28
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
 8014394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8014396:	2300      	movs	r3, #0
 8014398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801439a:	e148      	b.n	801462e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	2101      	movs	r1, #1
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	fa01 f303 	lsl.w	r3, r1, r3
 80143a8:	4013      	ands	r3, r2
 80143aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	f000 813a 	beq.w	8014628 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d00b      	beq.n	80143d4 <HAL_GPIO_Init+0x48>
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	685b      	ldr	r3, [r3, #4]
 80143c0:	2b02      	cmp	r3, #2
 80143c2:	d007      	beq.n	80143d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80143c8:	2b11      	cmp	r3, #17
 80143ca:	d003      	beq.n	80143d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80143cc:	683b      	ldr	r3, [r7, #0]
 80143ce:	685b      	ldr	r3, [r3, #4]
 80143d0:	2b12      	cmp	r3, #18
 80143d2:	d130      	bne.n	8014436 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	689b      	ldr	r3, [r3, #8]
 80143d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80143da:	697b      	ldr	r3, [r7, #20]
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	2203      	movs	r2, #3
 80143e0:	fa02 f303 	lsl.w	r3, r2, r3
 80143e4:	43db      	mvns	r3, r3
 80143e6:	693a      	ldr	r2, [r7, #16]
 80143e8:	4013      	ands	r3, r2
 80143ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	68da      	ldr	r2, [r3, #12]
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	005b      	lsls	r3, r3, #1
 80143f4:	fa02 f303 	lsl.w	r3, r2, r3
 80143f8:	693a      	ldr	r2, [r7, #16]
 80143fa:	4313      	orrs	r3, r2
 80143fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	693a      	ldr	r2, [r7, #16]
 8014402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	685b      	ldr	r3, [r3, #4]
 8014408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801440a:	2201      	movs	r2, #1
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	fa02 f303 	lsl.w	r3, r2, r3
 8014412:	43db      	mvns	r3, r3
 8014414:	693a      	ldr	r2, [r7, #16]
 8014416:	4013      	ands	r3, r2
 8014418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	091b      	lsrs	r3, r3, #4
 8014420:	f003 0201 	and.w	r2, r3, #1
 8014424:	697b      	ldr	r3, [r7, #20]
 8014426:	fa02 f303 	lsl.w	r3, r2, r3
 801442a:	693a      	ldr	r2, [r7, #16]
 801442c:	4313      	orrs	r3, r2
 801442e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	693a      	ldr	r2, [r7, #16]
 8014434:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	68db      	ldr	r3, [r3, #12]
 801443a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	005b      	lsls	r3, r3, #1
 8014440:	2203      	movs	r2, #3
 8014442:	fa02 f303 	lsl.w	r3, r2, r3
 8014446:	43db      	mvns	r3, r3
 8014448:	693a      	ldr	r2, [r7, #16]
 801444a:	4013      	ands	r3, r2
 801444c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	689a      	ldr	r2, [r3, #8]
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	005b      	lsls	r3, r3, #1
 8014456:	fa02 f303 	lsl.w	r3, r2, r3
 801445a:	693a      	ldr	r2, [r7, #16]
 801445c:	4313      	orrs	r3, r2
 801445e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	693a      	ldr	r2, [r7, #16]
 8014464:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	2b02      	cmp	r3, #2
 801446c:	d003      	beq.n	8014476 <HAL_GPIO_Init+0xea>
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	2b12      	cmp	r3, #18
 8014474:	d123      	bne.n	80144be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	08da      	lsrs	r2, r3, #3
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	3208      	adds	r2, #8
 801447e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014482:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8014484:	697b      	ldr	r3, [r7, #20]
 8014486:	f003 0307 	and.w	r3, r3, #7
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	220f      	movs	r2, #15
 801448e:	fa02 f303 	lsl.w	r3, r2, r3
 8014492:	43db      	mvns	r3, r3
 8014494:	693a      	ldr	r2, [r7, #16]
 8014496:	4013      	ands	r3, r2
 8014498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	691a      	ldr	r2, [r3, #16]
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	f003 0307 	and.w	r3, r3, #7
 80144a4:	009b      	lsls	r3, r3, #2
 80144a6:	fa02 f303 	lsl.w	r3, r2, r3
 80144aa:	693a      	ldr	r2, [r7, #16]
 80144ac:	4313      	orrs	r3, r2
 80144ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	08da      	lsrs	r2, r3, #3
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	3208      	adds	r2, #8
 80144b8:	6939      	ldr	r1, [r7, #16]
 80144ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80144c4:	697b      	ldr	r3, [r7, #20]
 80144c6:	005b      	lsls	r3, r3, #1
 80144c8:	2203      	movs	r2, #3
 80144ca:	fa02 f303 	lsl.w	r3, r2, r3
 80144ce:	43db      	mvns	r3, r3
 80144d0:	693a      	ldr	r2, [r7, #16]
 80144d2:	4013      	ands	r3, r2
 80144d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	f003 0203 	and.w	r2, r3, #3
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	005b      	lsls	r3, r3, #1
 80144e2:	fa02 f303 	lsl.w	r3, r2, r3
 80144e6:	693a      	ldr	r2, [r7, #16]
 80144e8:	4313      	orrs	r3, r2
 80144ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	693a      	ldr	r2, [r7, #16]
 80144f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	685b      	ldr	r3, [r3, #4]
 80144f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	f000 8094 	beq.w	8014628 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014500:	4b52      	ldr	r3, [pc, #328]	; (801464c <HAL_GPIO_Init+0x2c0>)
 8014502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014504:	4a51      	ldr	r2, [pc, #324]	; (801464c <HAL_GPIO_Init+0x2c0>)
 8014506:	f043 0301 	orr.w	r3, r3, #1
 801450a:	6613      	str	r3, [r2, #96]	; 0x60
 801450c:	4b4f      	ldr	r3, [pc, #316]	; (801464c <HAL_GPIO_Init+0x2c0>)
 801450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014510:	f003 0301 	and.w	r3, r3, #1
 8014514:	60bb      	str	r3, [r7, #8]
 8014516:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8014518:	4a4d      	ldr	r2, [pc, #308]	; (8014650 <HAL_GPIO_Init+0x2c4>)
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	089b      	lsrs	r3, r3, #2
 801451e:	3302      	adds	r3, #2
 8014520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014524:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	f003 0303 	and.w	r3, r3, #3
 801452c:	009b      	lsls	r3, r3, #2
 801452e:	220f      	movs	r2, #15
 8014530:	fa02 f303 	lsl.w	r3, r2, r3
 8014534:	43db      	mvns	r3, r3
 8014536:	693a      	ldr	r2, [r7, #16]
 8014538:	4013      	ands	r3, r2
 801453a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8014542:	d00d      	beq.n	8014560 <HAL_GPIO_Init+0x1d4>
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	4a43      	ldr	r2, [pc, #268]	; (8014654 <HAL_GPIO_Init+0x2c8>)
 8014548:	4293      	cmp	r3, r2
 801454a:	d007      	beq.n	801455c <HAL_GPIO_Init+0x1d0>
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	4a42      	ldr	r2, [pc, #264]	; (8014658 <HAL_GPIO_Init+0x2cc>)
 8014550:	4293      	cmp	r3, r2
 8014552:	d101      	bne.n	8014558 <HAL_GPIO_Init+0x1cc>
 8014554:	2302      	movs	r3, #2
 8014556:	e004      	b.n	8014562 <HAL_GPIO_Init+0x1d6>
 8014558:	2307      	movs	r3, #7
 801455a:	e002      	b.n	8014562 <HAL_GPIO_Init+0x1d6>
 801455c:	2301      	movs	r3, #1
 801455e:	e000      	b.n	8014562 <HAL_GPIO_Init+0x1d6>
 8014560:	2300      	movs	r3, #0
 8014562:	697a      	ldr	r2, [r7, #20]
 8014564:	f002 0203 	and.w	r2, r2, #3
 8014568:	0092      	lsls	r2, r2, #2
 801456a:	4093      	lsls	r3, r2
 801456c:	693a      	ldr	r2, [r7, #16]
 801456e:	4313      	orrs	r3, r2
 8014570:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8014572:	4937      	ldr	r1, [pc, #220]	; (8014650 <HAL_GPIO_Init+0x2c4>)
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	089b      	lsrs	r3, r3, #2
 8014578:	3302      	adds	r3, #2
 801457a:	693a      	ldr	r2, [r7, #16]
 801457c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8014580:	4b36      	ldr	r3, [pc, #216]	; (801465c <HAL_GPIO_Init+0x2d0>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	43db      	mvns	r3, r3
 801458a:	693a      	ldr	r2, [r7, #16]
 801458c:	4013      	ands	r3, r2
 801458e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	685b      	ldr	r3, [r3, #4]
 8014594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014598:	2b00      	cmp	r3, #0
 801459a:	d003      	beq.n	80145a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 801459c:	693a      	ldr	r2, [r7, #16]
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	4313      	orrs	r3, r2
 80145a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80145a4:	4a2d      	ldr	r2, [pc, #180]	; (801465c <HAL_GPIO_Init+0x2d0>)
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80145aa:	4b2c      	ldr	r3, [pc, #176]	; (801465c <HAL_GPIO_Init+0x2d0>)
 80145ac:	685b      	ldr	r3, [r3, #4]
 80145ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	43db      	mvns	r3, r3
 80145b4:	693a      	ldr	r2, [r7, #16]
 80145b6:	4013      	ands	r3, r2
 80145b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d003      	beq.n	80145ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80145c6:	693a      	ldr	r2, [r7, #16]
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	4313      	orrs	r3, r2
 80145cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80145ce:	4a23      	ldr	r2, [pc, #140]	; (801465c <HAL_GPIO_Init+0x2d0>)
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80145d4:	4b21      	ldr	r3, [pc, #132]	; (801465c <HAL_GPIO_Init+0x2d0>)
 80145d6:	689b      	ldr	r3, [r3, #8]
 80145d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	43db      	mvns	r3, r3
 80145de:	693a      	ldr	r2, [r7, #16]
 80145e0:	4013      	ands	r3, r2
 80145e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	685b      	ldr	r3, [r3, #4]
 80145e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d003      	beq.n	80145f8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80145f0:	693a      	ldr	r2, [r7, #16]
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	4313      	orrs	r3, r2
 80145f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80145f8:	4a18      	ldr	r2, [pc, #96]	; (801465c <HAL_GPIO_Init+0x2d0>)
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80145fe:	4b17      	ldr	r3, [pc, #92]	; (801465c <HAL_GPIO_Init+0x2d0>)
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	43db      	mvns	r3, r3
 8014608:	693a      	ldr	r2, [r7, #16]
 801460a:	4013      	ands	r3, r2
 801460c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014616:	2b00      	cmp	r3, #0
 8014618:	d003      	beq.n	8014622 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 801461a:	693a      	ldr	r2, [r7, #16]
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	4313      	orrs	r3, r2
 8014620:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8014622:	4a0e      	ldr	r2, [pc, #56]	; (801465c <HAL_GPIO_Init+0x2d0>)
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	3301      	adds	r3, #1
 801462c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	681a      	ldr	r2, [r3, #0]
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	fa22 f303 	lsr.w	r3, r2, r3
 8014638:	2b00      	cmp	r3, #0
 801463a:	f47f aeaf 	bne.w	801439c <HAL_GPIO_Init+0x10>
  }
}
 801463e:	bf00      	nop
 8014640:	371c      	adds	r7, #28
 8014642:	46bd      	mov	sp, r7
 8014644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014648:	4770      	bx	lr
 801464a:	bf00      	nop
 801464c:	40021000 	.word	0x40021000
 8014650:	40010000 	.word	0x40010000
 8014654:	48000400 	.word	0x48000400
 8014658:	48000800 	.word	0x48000800
 801465c:	40010400 	.word	0x40010400

08014660 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8014660:	b480      	push	{r7}
 8014662:	b085      	sub	sp, #20
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
 8014668:	460b      	mov	r3, r1
 801466a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	691a      	ldr	r2, [r3, #16]
 8014670:	887b      	ldrh	r3, [r7, #2]
 8014672:	4013      	ands	r3, r2
 8014674:	2b00      	cmp	r3, #0
 8014676:	d002      	beq.n	801467e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8014678:	2301      	movs	r3, #1
 801467a:	73fb      	strb	r3, [r7, #15]
 801467c:	e001      	b.n	8014682 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801467e:	2300      	movs	r3, #0
 8014680:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8014682:	7bfb      	ldrb	r3, [r7, #15]
}
 8014684:	4618      	mov	r0, r3
 8014686:	3714      	adds	r7, #20
 8014688:	46bd      	mov	sp, r7
 801468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468e:	4770      	bx	lr

08014690 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014690:	b480      	push	{r7}
 8014692:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014694:	4b05      	ldr	r3, [pc, #20]	; (80146ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	4a04      	ldr	r2, [pc, #16]	; (80146ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 801469a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801469e:	6013      	str	r3, [r2, #0]
}
 80146a0:	bf00      	nop
 80146a2:	46bd      	mov	sp, r7
 80146a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a8:	4770      	bx	lr
 80146aa:	bf00      	nop
 80146ac:	40007000 	.word	0x40007000

080146b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80146b0:	b480      	push	{r7}
 80146b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80146b4:	4b04      	ldr	r3, [pc, #16]	; (80146c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80146bc:	4618      	mov	r0, r3
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr
 80146c6:	bf00      	nop
 80146c8:	40007000 	.word	0x40007000

080146cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80146cc:	b480      	push	{r7}
 80146ce:	b085      	sub	sp, #20
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146da:	d130      	bne.n	801473e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80146dc:	4b23      	ldr	r3, [pc, #140]	; (801476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80146e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146e8:	d038      	beq.n	801475c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80146ea:	4b20      	ldr	r3, [pc, #128]	; (801476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80146f2:	4a1e      	ldr	r2, [pc, #120]	; (801476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80146f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80146f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80146fa:	4b1d      	ldr	r3, [pc, #116]	; (8014770 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	2232      	movs	r2, #50	; 0x32
 8014700:	fb02 f303 	mul.w	r3, r2, r3
 8014704:	4a1b      	ldr	r2, [pc, #108]	; (8014774 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8014706:	fba2 2303 	umull	r2, r3, r2, r3
 801470a:	0c9b      	lsrs	r3, r3, #18
 801470c:	3301      	adds	r3, #1
 801470e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014710:	e002      	b.n	8014718 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	3b01      	subs	r3, #1
 8014716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014718:	4b14      	ldr	r3, [pc, #80]	; (801476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801471a:	695b      	ldr	r3, [r3, #20]
 801471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014724:	d102      	bne.n	801472c <HAL_PWREx_ControlVoltageScaling+0x60>
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d1f2      	bne.n	8014712 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801472c:	4b0f      	ldr	r3, [pc, #60]	; (801476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801472e:	695b      	ldr	r3, [r3, #20]
 8014730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014738:	d110      	bne.n	801475c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 801473a:	2303      	movs	r3, #3
 801473c:	e00f      	b.n	801475e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 801473e:	4b0b      	ldr	r3, [pc, #44]	; (801476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801474a:	d007      	beq.n	801475c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801474c:	4b07      	ldr	r3, [pc, #28]	; (801476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8014754:	4a05      	ldr	r2, [pc, #20]	; (801476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801475a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 801475c:	2300      	movs	r3, #0
}
 801475e:	4618      	mov	r0, r3
 8014760:	3714      	adds	r7, #20
 8014762:	46bd      	mov	sp, r7
 8014764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014768:	4770      	bx	lr
 801476a:	bf00      	nop
 801476c:	40007000 	.word	0x40007000
 8014770:	20000004 	.word	0x20000004
 8014774:	431bde83 	.word	0x431bde83

08014778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b088      	sub	sp, #32
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d102      	bne.n	801478c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014786:	2301      	movs	r3, #1
 8014788:	f000 bc11 	b.w	8014fae <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801478c:	4ba0      	ldr	r3, [pc, #640]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 801478e:	689b      	ldr	r3, [r3, #8]
 8014790:	f003 030c 	and.w	r3, r3, #12
 8014794:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014796:	4b9e      	ldr	r3, [pc, #632]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	f003 0303 	and.w	r3, r3, #3
 801479e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	f003 0310 	and.w	r3, r3, #16
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	f000 80e4 	beq.w	8014976 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80147ae:	69bb      	ldr	r3, [r7, #24]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d007      	beq.n	80147c4 <HAL_RCC_OscConfig+0x4c>
 80147b4:	69bb      	ldr	r3, [r7, #24]
 80147b6:	2b0c      	cmp	r3, #12
 80147b8:	f040 808b 	bne.w	80148d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	2b01      	cmp	r3, #1
 80147c0:	f040 8087 	bne.w	80148d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80147c4:	4b92      	ldr	r3, [pc, #584]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	f003 0302 	and.w	r3, r3, #2
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d005      	beq.n	80147dc <HAL_RCC_OscConfig+0x64>
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	699b      	ldr	r3, [r3, #24]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d101      	bne.n	80147dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80147d8:	2301      	movs	r3, #1
 80147da:	e3e8      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	6a1a      	ldr	r2, [r3, #32]
 80147e0:	4b8b      	ldr	r3, [pc, #556]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	f003 0308 	and.w	r3, r3, #8
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d004      	beq.n	80147f6 <HAL_RCC_OscConfig+0x7e>
 80147ec:	4b88      	ldr	r3, [pc, #544]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80147f4:	e005      	b.n	8014802 <HAL_RCC_OscConfig+0x8a>
 80147f6:	4b86      	ldr	r3, [pc, #536]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80147f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80147fc:	091b      	lsrs	r3, r3, #4
 80147fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014802:	4293      	cmp	r3, r2
 8014804:	d223      	bcs.n	801484e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	6a1b      	ldr	r3, [r3, #32]
 801480a:	4618      	mov	r0, r3
 801480c:	f000 fd78 	bl	8015300 <RCC_SetFlashLatencyFromMSIRange>
 8014810:	4603      	mov	r3, r0
 8014812:	2b00      	cmp	r3, #0
 8014814:	d001      	beq.n	801481a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8014816:	2301      	movs	r3, #1
 8014818:	e3c9      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801481a:	4b7d      	ldr	r3, [pc, #500]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	4a7c      	ldr	r2, [pc, #496]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014820:	f043 0308 	orr.w	r3, r3, #8
 8014824:	6013      	str	r3, [r2, #0]
 8014826:	4b7a      	ldr	r3, [pc, #488]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	6a1b      	ldr	r3, [r3, #32]
 8014832:	4977      	ldr	r1, [pc, #476]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014834:	4313      	orrs	r3, r2
 8014836:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014838:	4b75      	ldr	r3, [pc, #468]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 801483a:	685b      	ldr	r3, [r3, #4]
 801483c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	69db      	ldr	r3, [r3, #28]
 8014844:	021b      	lsls	r3, r3, #8
 8014846:	4972      	ldr	r1, [pc, #456]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014848:	4313      	orrs	r3, r2
 801484a:	604b      	str	r3, [r1, #4]
 801484c:	e025      	b.n	801489a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801484e:	4b70      	ldr	r3, [pc, #448]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	4a6f      	ldr	r2, [pc, #444]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014854:	f043 0308 	orr.w	r3, r3, #8
 8014858:	6013      	str	r3, [r2, #0]
 801485a:	4b6d      	ldr	r3, [pc, #436]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6a1b      	ldr	r3, [r3, #32]
 8014866:	496a      	ldr	r1, [pc, #424]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014868:	4313      	orrs	r3, r2
 801486a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801486c:	4b68      	ldr	r3, [pc, #416]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 801486e:	685b      	ldr	r3, [r3, #4]
 8014870:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	69db      	ldr	r3, [r3, #28]
 8014878:	021b      	lsls	r3, r3, #8
 801487a:	4965      	ldr	r1, [pc, #404]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 801487c:	4313      	orrs	r3, r2
 801487e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014880:	69bb      	ldr	r3, [r7, #24]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d109      	bne.n	801489a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	6a1b      	ldr	r3, [r3, #32]
 801488a:	4618      	mov	r0, r3
 801488c:	f000 fd38 	bl	8015300 <RCC_SetFlashLatencyFromMSIRange>
 8014890:	4603      	mov	r3, r0
 8014892:	2b00      	cmp	r3, #0
 8014894:	d001      	beq.n	801489a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8014896:	2301      	movs	r3, #1
 8014898:	e389      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801489a:	f000 fc6f 	bl	801517c <HAL_RCC_GetSysClockFreq>
 801489e:	4601      	mov	r1, r0
 80148a0:	4b5b      	ldr	r3, [pc, #364]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80148a2:	689b      	ldr	r3, [r3, #8]
 80148a4:	091b      	lsrs	r3, r3, #4
 80148a6:	f003 030f 	and.w	r3, r3, #15
 80148aa:	4a5a      	ldr	r2, [pc, #360]	; (8014a14 <HAL_RCC_OscConfig+0x29c>)
 80148ac:	5cd3      	ldrb	r3, [r2, r3]
 80148ae:	f003 031f 	and.w	r3, r3, #31
 80148b2:	fa21 f303 	lsr.w	r3, r1, r3
 80148b6:	4a58      	ldr	r2, [pc, #352]	; (8014a18 <HAL_RCC_OscConfig+0x2a0>)
 80148b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80148ba:	4b58      	ldr	r3, [pc, #352]	; (8014a1c <HAL_RCC_OscConfig+0x2a4>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	4618      	mov	r0, r3
 80148c0:	f7fe fafa 	bl	8012eb8 <HAL_InitTick>
 80148c4:	4603      	mov	r3, r0
 80148c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80148c8:	7bfb      	ldrb	r3, [r7, #15]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d052      	beq.n	8014974 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80148ce:	7bfb      	ldrb	r3, [r7, #15]
 80148d0:	e36d      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	699b      	ldr	r3, [r3, #24]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d032      	beq.n	8014940 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80148da:	4b4d      	ldr	r3, [pc, #308]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	4a4c      	ldr	r2, [pc, #304]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80148e0:	f043 0301 	orr.w	r3, r3, #1
 80148e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80148e6:	f7fe fb37 	bl	8012f58 <HAL_GetTick>
 80148ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80148ec:	e008      	b.n	8014900 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80148ee:	f7fe fb33 	bl	8012f58 <HAL_GetTick>
 80148f2:	4602      	mov	r2, r0
 80148f4:	693b      	ldr	r3, [r7, #16]
 80148f6:	1ad3      	subs	r3, r2, r3
 80148f8:	2b02      	cmp	r3, #2
 80148fa:	d901      	bls.n	8014900 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80148fc:	2303      	movs	r3, #3
 80148fe:	e356      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8014900:	4b43      	ldr	r3, [pc, #268]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	f003 0302 	and.w	r3, r3, #2
 8014908:	2b00      	cmp	r3, #0
 801490a:	d0f0      	beq.n	80148ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801490c:	4b40      	ldr	r3, [pc, #256]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	4a3f      	ldr	r2, [pc, #252]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014912:	f043 0308 	orr.w	r3, r3, #8
 8014916:	6013      	str	r3, [r2, #0]
 8014918:	4b3d      	ldr	r3, [pc, #244]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6a1b      	ldr	r3, [r3, #32]
 8014924:	493a      	ldr	r1, [pc, #232]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014926:	4313      	orrs	r3, r2
 8014928:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801492a:	4b39      	ldr	r3, [pc, #228]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	69db      	ldr	r3, [r3, #28]
 8014936:	021b      	lsls	r3, r3, #8
 8014938:	4935      	ldr	r1, [pc, #212]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 801493a:	4313      	orrs	r3, r2
 801493c:	604b      	str	r3, [r1, #4]
 801493e:	e01a      	b.n	8014976 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8014940:	4b33      	ldr	r3, [pc, #204]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	4a32      	ldr	r2, [pc, #200]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014946:	f023 0301 	bic.w	r3, r3, #1
 801494a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801494c:	f7fe fb04 	bl	8012f58 <HAL_GetTick>
 8014950:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8014952:	e008      	b.n	8014966 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014954:	f7fe fb00 	bl	8012f58 <HAL_GetTick>
 8014958:	4602      	mov	r2, r0
 801495a:	693b      	ldr	r3, [r7, #16]
 801495c:	1ad3      	subs	r3, r2, r3
 801495e:	2b02      	cmp	r3, #2
 8014960:	d901      	bls.n	8014966 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8014962:	2303      	movs	r3, #3
 8014964:	e323      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8014966:	4b2a      	ldr	r3, [pc, #168]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	f003 0302 	and.w	r3, r3, #2
 801496e:	2b00      	cmp	r3, #0
 8014970:	d1f0      	bne.n	8014954 <HAL_RCC_OscConfig+0x1dc>
 8014972:	e000      	b.n	8014976 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8014974:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	f003 0301 	and.w	r3, r3, #1
 801497e:	2b00      	cmp	r3, #0
 8014980:	d073      	beq.n	8014a6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8014982:	69bb      	ldr	r3, [r7, #24]
 8014984:	2b08      	cmp	r3, #8
 8014986:	d005      	beq.n	8014994 <HAL_RCC_OscConfig+0x21c>
 8014988:	69bb      	ldr	r3, [r7, #24]
 801498a:	2b0c      	cmp	r3, #12
 801498c:	d10e      	bne.n	80149ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	2b03      	cmp	r3, #3
 8014992:	d10b      	bne.n	80149ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014994:	4b1e      	ldr	r3, [pc, #120]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801499c:	2b00      	cmp	r3, #0
 801499e:	d063      	beq.n	8014a68 <HAL_RCC_OscConfig+0x2f0>
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d15f      	bne.n	8014a68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80149a8:	2301      	movs	r3, #1
 80149aa:	e300      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80149b4:	d106      	bne.n	80149c4 <HAL_RCC_OscConfig+0x24c>
 80149b6:	4b16      	ldr	r3, [pc, #88]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	4a15      	ldr	r2, [pc, #84]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80149bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80149c0:	6013      	str	r3, [r2, #0]
 80149c2:	e01d      	b.n	8014a00 <HAL_RCC_OscConfig+0x288>
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80149cc:	d10c      	bne.n	80149e8 <HAL_RCC_OscConfig+0x270>
 80149ce:	4b10      	ldr	r3, [pc, #64]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	4a0f      	ldr	r2, [pc, #60]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80149d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80149d8:	6013      	str	r3, [r2, #0]
 80149da:	4b0d      	ldr	r3, [pc, #52]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	4a0c      	ldr	r2, [pc, #48]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80149e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80149e4:	6013      	str	r3, [r2, #0]
 80149e6:	e00b      	b.n	8014a00 <HAL_RCC_OscConfig+0x288>
 80149e8:	4b09      	ldr	r3, [pc, #36]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	4a08      	ldr	r2, [pc, #32]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80149ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80149f2:	6013      	str	r3, [r2, #0]
 80149f4:	4b06      	ldr	r3, [pc, #24]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	4a05      	ldr	r2, [pc, #20]	; (8014a10 <HAL_RCC_OscConfig+0x298>)
 80149fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80149fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	685b      	ldr	r3, [r3, #4]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d01b      	beq.n	8014a40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a08:	f7fe faa6 	bl	8012f58 <HAL_GetTick>
 8014a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014a0e:	e010      	b.n	8014a32 <HAL_RCC_OscConfig+0x2ba>
 8014a10:	40021000 	.word	0x40021000
 8014a14:	080265ac 	.word	0x080265ac
 8014a18:	20000004 	.word	0x20000004
 8014a1c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014a20:	f7fe fa9a 	bl	8012f58 <HAL_GetTick>
 8014a24:	4602      	mov	r2, r0
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	1ad3      	subs	r3, r2, r3
 8014a2a:	2b64      	cmp	r3, #100	; 0x64
 8014a2c:	d901      	bls.n	8014a32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8014a2e:	2303      	movs	r3, #3
 8014a30:	e2bd      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014a32:	4baf      	ldr	r3, [pc, #700]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d0f0      	beq.n	8014a20 <HAL_RCC_OscConfig+0x2a8>
 8014a3e:	e014      	b.n	8014a6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a40:	f7fe fa8a 	bl	8012f58 <HAL_GetTick>
 8014a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8014a46:	e008      	b.n	8014a5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014a48:	f7fe fa86 	bl	8012f58 <HAL_GetTick>
 8014a4c:	4602      	mov	r2, r0
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	1ad3      	subs	r3, r2, r3
 8014a52:	2b64      	cmp	r3, #100	; 0x64
 8014a54:	d901      	bls.n	8014a5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8014a56:	2303      	movs	r3, #3
 8014a58:	e2a9      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8014a5a:	4ba5      	ldr	r3, [pc, #660]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d1f0      	bne.n	8014a48 <HAL_RCC_OscConfig+0x2d0>
 8014a66:	e000      	b.n	8014a6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	f003 0302 	and.w	r3, r3, #2
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d060      	beq.n	8014b38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8014a76:	69bb      	ldr	r3, [r7, #24]
 8014a78:	2b04      	cmp	r3, #4
 8014a7a:	d005      	beq.n	8014a88 <HAL_RCC_OscConfig+0x310>
 8014a7c:	69bb      	ldr	r3, [r7, #24]
 8014a7e:	2b0c      	cmp	r3, #12
 8014a80:	d119      	bne.n	8014ab6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	2b02      	cmp	r3, #2
 8014a86:	d116      	bne.n	8014ab6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014a88:	4b99      	ldr	r3, [pc, #612]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d005      	beq.n	8014aa0 <HAL_RCC_OscConfig+0x328>
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	68db      	ldr	r3, [r3, #12]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d101      	bne.n	8014aa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8014a9c:	2301      	movs	r3, #1
 8014a9e:	e286      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014aa0:	4b93      	ldr	r3, [pc, #588]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014aa2:	685b      	ldr	r3, [r3, #4]
 8014aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	691b      	ldr	r3, [r3, #16]
 8014aac:	061b      	lsls	r3, r3, #24
 8014aae:	4990      	ldr	r1, [pc, #576]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014ab0:	4313      	orrs	r3, r2
 8014ab2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014ab4:	e040      	b.n	8014b38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	68db      	ldr	r3, [r3, #12]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d023      	beq.n	8014b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014abe:	4b8c      	ldr	r3, [pc, #560]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	4a8b      	ldr	r2, [pc, #556]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014aca:	f7fe fa45 	bl	8012f58 <HAL_GetTick>
 8014ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014ad0:	e008      	b.n	8014ae4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014ad2:	f7fe fa41 	bl	8012f58 <HAL_GetTick>
 8014ad6:	4602      	mov	r2, r0
 8014ad8:	693b      	ldr	r3, [r7, #16]
 8014ada:	1ad3      	subs	r3, r2, r3
 8014adc:	2b02      	cmp	r3, #2
 8014ade:	d901      	bls.n	8014ae4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8014ae0:	2303      	movs	r3, #3
 8014ae2:	e264      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014ae4:	4b82      	ldr	r3, [pc, #520]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d0f0      	beq.n	8014ad2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014af0:	4b7f      	ldr	r3, [pc, #508]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014af2:	685b      	ldr	r3, [r3, #4]
 8014af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	691b      	ldr	r3, [r3, #16]
 8014afc:	061b      	lsls	r3, r3, #24
 8014afe:	497c      	ldr	r1, [pc, #496]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014b00:	4313      	orrs	r3, r2
 8014b02:	604b      	str	r3, [r1, #4]
 8014b04:	e018      	b.n	8014b38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014b06:	4b7a      	ldr	r3, [pc, #488]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	4a79      	ldr	r2, [pc, #484]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014b12:	f7fe fa21 	bl	8012f58 <HAL_GetTick>
 8014b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014b18:	e008      	b.n	8014b2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014b1a:	f7fe fa1d 	bl	8012f58 <HAL_GetTick>
 8014b1e:	4602      	mov	r2, r0
 8014b20:	693b      	ldr	r3, [r7, #16]
 8014b22:	1ad3      	subs	r3, r2, r3
 8014b24:	2b02      	cmp	r3, #2
 8014b26:	d901      	bls.n	8014b2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8014b28:	2303      	movs	r3, #3
 8014b2a:	e240      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014b2c:	4b70      	ldr	r3, [pc, #448]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d1f0      	bne.n	8014b1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	f003 0308 	and.w	r3, r3, #8
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d03c      	beq.n	8014bbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	695b      	ldr	r3, [r3, #20]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d01c      	beq.n	8014b86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014b4c:	4b68      	ldr	r3, [pc, #416]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014b52:	4a67      	ldr	r2, [pc, #412]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014b54:	f043 0301 	orr.w	r3, r3, #1
 8014b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014b5c:	f7fe f9fc 	bl	8012f58 <HAL_GetTick>
 8014b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8014b62:	e008      	b.n	8014b76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014b64:	f7fe f9f8 	bl	8012f58 <HAL_GetTick>
 8014b68:	4602      	mov	r2, r0
 8014b6a:	693b      	ldr	r3, [r7, #16]
 8014b6c:	1ad3      	subs	r3, r2, r3
 8014b6e:	2b02      	cmp	r3, #2
 8014b70:	d901      	bls.n	8014b76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8014b72:	2303      	movs	r3, #3
 8014b74:	e21b      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8014b76:	4b5e      	ldr	r3, [pc, #376]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014b7c:	f003 0302 	and.w	r3, r3, #2
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d0ef      	beq.n	8014b64 <HAL_RCC_OscConfig+0x3ec>
 8014b84:	e01b      	b.n	8014bbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014b86:	4b5a      	ldr	r3, [pc, #360]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014b8c:	4a58      	ldr	r2, [pc, #352]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014b8e:	f023 0301 	bic.w	r3, r3, #1
 8014b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014b96:	f7fe f9df 	bl	8012f58 <HAL_GetTick>
 8014b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8014b9c:	e008      	b.n	8014bb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014b9e:	f7fe f9db 	bl	8012f58 <HAL_GetTick>
 8014ba2:	4602      	mov	r2, r0
 8014ba4:	693b      	ldr	r3, [r7, #16]
 8014ba6:	1ad3      	subs	r3, r2, r3
 8014ba8:	2b02      	cmp	r3, #2
 8014baa:	d901      	bls.n	8014bb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8014bac:	2303      	movs	r3, #3
 8014bae:	e1fe      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8014bb0:	4b4f      	ldr	r3, [pc, #316]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014bb6:	f003 0302 	and.w	r3, r3, #2
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d1ef      	bne.n	8014b9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	f003 0304 	and.w	r3, r3, #4
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	f000 80a6 	beq.w	8014d18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8014bd0:	4b47      	ldr	r3, [pc, #284]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d10d      	bne.n	8014bf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014bdc:	4b44      	ldr	r3, [pc, #272]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014be0:	4a43      	ldr	r2, [pc, #268]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014be6:	6593      	str	r3, [r2, #88]	; 0x58
 8014be8:	4b41      	ldr	r3, [pc, #260]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014bf0:	60bb      	str	r3, [r7, #8]
 8014bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014bf8:	4b3e      	ldr	r3, [pc, #248]	; (8014cf4 <HAL_RCC_OscConfig+0x57c>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d118      	bne.n	8014c36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014c04:	4b3b      	ldr	r3, [pc, #236]	; (8014cf4 <HAL_RCC_OscConfig+0x57c>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	4a3a      	ldr	r2, [pc, #232]	; (8014cf4 <HAL_RCC_OscConfig+0x57c>)
 8014c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014c10:	f7fe f9a2 	bl	8012f58 <HAL_GetTick>
 8014c14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014c16:	e008      	b.n	8014c2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014c18:	f7fe f99e 	bl	8012f58 <HAL_GetTick>
 8014c1c:	4602      	mov	r2, r0
 8014c1e:	693b      	ldr	r3, [r7, #16]
 8014c20:	1ad3      	subs	r3, r2, r3
 8014c22:	2b02      	cmp	r3, #2
 8014c24:	d901      	bls.n	8014c2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8014c26:	2303      	movs	r3, #3
 8014c28:	e1c1      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014c2a:	4b32      	ldr	r3, [pc, #200]	; (8014cf4 <HAL_RCC_OscConfig+0x57c>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d0f0      	beq.n	8014c18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	689b      	ldr	r3, [r3, #8]
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	d108      	bne.n	8014c50 <HAL_RCC_OscConfig+0x4d8>
 8014c3e:	4b2c      	ldr	r3, [pc, #176]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c44:	4a2a      	ldr	r2, [pc, #168]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014c46:	f043 0301 	orr.w	r3, r3, #1
 8014c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014c4e:	e024      	b.n	8014c9a <HAL_RCC_OscConfig+0x522>
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	689b      	ldr	r3, [r3, #8]
 8014c54:	2b05      	cmp	r3, #5
 8014c56:	d110      	bne.n	8014c7a <HAL_RCC_OscConfig+0x502>
 8014c58:	4b25      	ldr	r3, [pc, #148]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c5e:	4a24      	ldr	r2, [pc, #144]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014c60:	f043 0304 	orr.w	r3, r3, #4
 8014c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014c68:	4b21      	ldr	r3, [pc, #132]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c6e:	4a20      	ldr	r2, [pc, #128]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014c70:	f043 0301 	orr.w	r3, r3, #1
 8014c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014c78:	e00f      	b.n	8014c9a <HAL_RCC_OscConfig+0x522>
 8014c7a:	4b1d      	ldr	r3, [pc, #116]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c80:	4a1b      	ldr	r2, [pc, #108]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014c82:	f023 0301 	bic.w	r3, r3, #1
 8014c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014c8a:	4b19      	ldr	r3, [pc, #100]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c90:	4a17      	ldr	r2, [pc, #92]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014c92:	f023 0304 	bic.w	r3, r3, #4
 8014c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	689b      	ldr	r3, [r3, #8]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d016      	beq.n	8014cd0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014ca2:	f7fe f959 	bl	8012f58 <HAL_GetTick>
 8014ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014ca8:	e00a      	b.n	8014cc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014caa:	f7fe f955 	bl	8012f58 <HAL_GetTick>
 8014cae:	4602      	mov	r2, r0
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	1ad3      	subs	r3, r2, r3
 8014cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8014cb8:	4293      	cmp	r3, r2
 8014cba:	d901      	bls.n	8014cc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8014cbc:	2303      	movs	r3, #3
 8014cbe:	e176      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014cc0:	4b0b      	ldr	r3, [pc, #44]	; (8014cf0 <HAL_RCC_OscConfig+0x578>)
 8014cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014cc6:	f003 0302 	and.w	r3, r3, #2
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d0ed      	beq.n	8014caa <HAL_RCC_OscConfig+0x532>
 8014cce:	e01a      	b.n	8014d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014cd0:	f7fe f942 	bl	8012f58 <HAL_GetTick>
 8014cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8014cd6:	e00f      	b.n	8014cf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014cd8:	f7fe f93e 	bl	8012f58 <HAL_GetTick>
 8014cdc:	4602      	mov	r2, r0
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	1ad3      	subs	r3, r2, r3
 8014ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8014ce6:	4293      	cmp	r3, r2
 8014ce8:	d906      	bls.n	8014cf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8014cea:	2303      	movs	r3, #3
 8014cec:	e15f      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
 8014cee:	bf00      	nop
 8014cf0:	40021000 	.word	0x40021000
 8014cf4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8014cf8:	4baa      	ldr	r3, [pc, #680]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014cfe:	f003 0302 	and.w	r3, r3, #2
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d1e8      	bne.n	8014cd8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014d06:	7ffb      	ldrb	r3, [r7, #31]
 8014d08:	2b01      	cmp	r3, #1
 8014d0a:	d105      	bne.n	8014d18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014d0c:	4ba5      	ldr	r3, [pc, #660]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d10:	4aa4      	ldr	r2, [pc, #656]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014d16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	f003 0320 	and.w	r3, r3, #32
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d03c      	beq.n	8014d9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d01c      	beq.n	8014d66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014d2c:	4b9d      	ldr	r3, [pc, #628]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d32:	4a9c      	ldr	r2, [pc, #624]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014d34:	f043 0301 	orr.w	r3, r3, #1
 8014d38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014d3c:	f7fe f90c 	bl	8012f58 <HAL_GetTick>
 8014d40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8014d42:	e008      	b.n	8014d56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014d44:	f7fe f908 	bl	8012f58 <HAL_GetTick>
 8014d48:	4602      	mov	r2, r0
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	1ad3      	subs	r3, r2, r3
 8014d4e:	2b02      	cmp	r3, #2
 8014d50:	d901      	bls.n	8014d56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8014d52:	2303      	movs	r3, #3
 8014d54:	e12b      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8014d56:	4b93      	ldr	r3, [pc, #588]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d5c:	f003 0302 	and.w	r3, r3, #2
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d0ef      	beq.n	8014d44 <HAL_RCC_OscConfig+0x5cc>
 8014d64:	e01b      	b.n	8014d9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8014d66:	4b8f      	ldr	r3, [pc, #572]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d6c:	4a8d      	ldr	r2, [pc, #564]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014d6e:	f023 0301 	bic.w	r3, r3, #1
 8014d72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014d76:	f7fe f8ef 	bl	8012f58 <HAL_GetTick>
 8014d7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8014d7c:	e008      	b.n	8014d90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014d7e:	f7fe f8eb 	bl	8012f58 <HAL_GetTick>
 8014d82:	4602      	mov	r2, r0
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	1ad3      	subs	r3, r2, r3
 8014d88:	2b02      	cmp	r3, #2
 8014d8a:	d901      	bls.n	8014d90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8014d8c:	2303      	movs	r3, #3
 8014d8e:	e10e      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8014d90:	4b84      	ldr	r3, [pc, #528]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d96:	f003 0302 	and.w	r3, r3, #2
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d1ef      	bne.n	8014d7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	f000 8102 	beq.w	8014fac <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dac:	2b02      	cmp	r3, #2
 8014dae:	f040 80c5 	bne.w	8014f3c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8014db2:	4b7c      	ldr	r3, [pc, #496]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	f003 0203 	and.w	r2, r3, #3
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d12c      	bne.n	8014e20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d123      	bne.n	8014e20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014de2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d11b      	bne.n	8014e20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014df2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d113      	bne.n	8014e20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8014df8:	697b      	ldr	r3, [r7, #20]
 8014dfa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e02:	085b      	lsrs	r3, r3, #1
 8014e04:	3b01      	subs	r3, #1
 8014e06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d109      	bne.n	8014e20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e16:	085b      	lsrs	r3, r3, #1
 8014e18:	3b01      	subs	r3, #1
 8014e1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d067      	beq.n	8014ef0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8014e20:	69bb      	ldr	r3, [r7, #24]
 8014e22:	2b0c      	cmp	r3, #12
 8014e24:	d062      	beq.n	8014eec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8014e26:	4b5f      	ldr	r3, [pc, #380]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d001      	beq.n	8014e36 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8014e32:	2301      	movs	r3, #1
 8014e34:	e0bb      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8014e36:	4b5b      	ldr	r3, [pc, #364]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	4a5a      	ldr	r2, [pc, #360]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014e3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014e40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8014e42:	f7fe f889 	bl	8012f58 <HAL_GetTick>
 8014e46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014e48:	e008      	b.n	8014e5c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014e4a:	f7fe f885 	bl	8012f58 <HAL_GetTick>
 8014e4e:	4602      	mov	r2, r0
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	1ad3      	subs	r3, r2, r3
 8014e54:	2b02      	cmp	r3, #2
 8014e56:	d901      	bls.n	8014e5c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8014e58:	2303      	movs	r3, #3
 8014e5a:	e0a8      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014e5c:	4b51      	ldr	r3, [pc, #324]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d1f0      	bne.n	8014e4a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014e68:	4b4e      	ldr	r3, [pc, #312]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014e6a:	68da      	ldr	r2, [r3, #12]
 8014e6c:	4b4e      	ldr	r3, [pc, #312]	; (8014fa8 <HAL_RCC_OscConfig+0x830>)
 8014e6e:	4013      	ands	r3, r2
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014e74:	687a      	ldr	r2, [r7, #4]
 8014e76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014e78:	3a01      	subs	r2, #1
 8014e7a:	0112      	lsls	r2, r2, #4
 8014e7c:	4311      	orrs	r1, r2
 8014e7e:	687a      	ldr	r2, [r7, #4]
 8014e80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8014e82:	0212      	lsls	r2, r2, #8
 8014e84:	4311      	orrs	r1, r2
 8014e86:	687a      	ldr	r2, [r7, #4]
 8014e88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8014e8a:	0852      	lsrs	r2, r2, #1
 8014e8c:	3a01      	subs	r2, #1
 8014e8e:	0552      	lsls	r2, r2, #21
 8014e90:	4311      	orrs	r1, r2
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8014e96:	0852      	lsrs	r2, r2, #1
 8014e98:	3a01      	subs	r2, #1
 8014e9a:	0652      	lsls	r2, r2, #25
 8014e9c:	4311      	orrs	r1, r2
 8014e9e:	687a      	ldr	r2, [r7, #4]
 8014ea0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014ea2:	06d2      	lsls	r2, r2, #27
 8014ea4:	430a      	orrs	r2, r1
 8014ea6:	493f      	ldr	r1, [pc, #252]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014ea8:	4313      	orrs	r3, r2
 8014eaa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8014eac:	4b3d      	ldr	r3, [pc, #244]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	4a3c      	ldr	r2, [pc, #240]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014eb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014eb8:	4b3a      	ldr	r3, [pc, #232]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	4a39      	ldr	r2, [pc, #228]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014ec2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8014ec4:	f7fe f848 	bl	8012f58 <HAL_GetTick>
 8014ec8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014eca:	e008      	b.n	8014ede <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014ecc:	f7fe f844 	bl	8012f58 <HAL_GetTick>
 8014ed0:	4602      	mov	r2, r0
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	1ad3      	subs	r3, r2, r3
 8014ed6:	2b02      	cmp	r3, #2
 8014ed8:	d901      	bls.n	8014ede <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8014eda:	2303      	movs	r3, #3
 8014edc:	e067      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014ede:	4b31      	ldr	r3, [pc, #196]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d0f0      	beq.n	8014ecc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8014eea:	e05f      	b.n	8014fac <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8014eec:	2301      	movs	r3, #1
 8014eee:	e05e      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014ef0:	4b2c      	ldr	r3, [pc, #176]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d157      	bne.n	8014fac <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8014efc:	4b29      	ldr	r3, [pc, #164]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	4a28      	ldr	r2, [pc, #160]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014f06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014f08:	4b26      	ldr	r3, [pc, #152]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f0a:	68db      	ldr	r3, [r3, #12]
 8014f0c:	4a25      	ldr	r2, [pc, #148]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014f12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014f14:	f7fe f820 	bl	8012f58 <HAL_GetTick>
 8014f18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014f1a:	e008      	b.n	8014f2e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014f1c:	f7fe f81c 	bl	8012f58 <HAL_GetTick>
 8014f20:	4602      	mov	r2, r0
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	1ad3      	subs	r3, r2, r3
 8014f26:	2b02      	cmp	r3, #2
 8014f28:	d901      	bls.n	8014f2e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8014f2a:	2303      	movs	r3, #3
 8014f2c:	e03f      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014f2e:	4b1d      	ldr	r3, [pc, #116]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d0f0      	beq.n	8014f1c <HAL_RCC_OscConfig+0x7a4>
 8014f3a:	e037      	b.n	8014fac <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8014f3c:	69bb      	ldr	r3, [r7, #24]
 8014f3e:	2b0c      	cmp	r3, #12
 8014f40:	d02d      	beq.n	8014f9e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014f42:	4b18      	ldr	r3, [pc, #96]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	4a17      	ldr	r2, [pc, #92]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014f4c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8014f4e:	4b15      	ldr	r3, [pc, #84]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d105      	bne.n	8014f66 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8014f5a:	4b12      	ldr	r3, [pc, #72]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f5c:	68db      	ldr	r3, [r3, #12]
 8014f5e:	4a11      	ldr	r2, [pc, #68]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f60:	f023 0303 	bic.w	r3, r3, #3
 8014f64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8014f66:	4b0f      	ldr	r3, [pc, #60]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f68:	68db      	ldr	r3, [r3, #12]
 8014f6a:	4a0e      	ldr	r2, [pc, #56]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8014f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014f74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014f76:	f7fd ffef 	bl	8012f58 <HAL_GetTick>
 8014f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014f7c:	e008      	b.n	8014f90 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014f7e:	f7fd ffeb 	bl	8012f58 <HAL_GetTick>
 8014f82:	4602      	mov	r2, r0
 8014f84:	693b      	ldr	r3, [r7, #16]
 8014f86:	1ad3      	subs	r3, r2, r3
 8014f88:	2b02      	cmp	r3, #2
 8014f8a:	d901      	bls.n	8014f90 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8014f8c:	2303      	movs	r3, #3
 8014f8e:	e00e      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014f90:	4b04      	ldr	r3, [pc, #16]	; (8014fa4 <HAL_RCC_OscConfig+0x82c>)
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d1f0      	bne.n	8014f7e <HAL_RCC_OscConfig+0x806>
 8014f9c:	e006      	b.n	8014fac <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	e005      	b.n	8014fae <HAL_RCC_OscConfig+0x836>
 8014fa2:	bf00      	nop
 8014fa4:	40021000 	.word	0x40021000
 8014fa8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8014fac:	2300      	movs	r3, #0
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3720      	adds	r7, #32
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop

08014fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b084      	sub	sp, #16
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d101      	bne.n	8014fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014fc8:	2301      	movs	r3, #1
 8014fca:	e0c8      	b.n	801515e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014fcc:	4b66      	ldr	r3, [pc, #408]	; (8015168 <HAL_RCC_ClockConfig+0x1b0>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	f003 0307 	and.w	r3, r3, #7
 8014fd4:	683a      	ldr	r2, [r7, #0]
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d910      	bls.n	8014ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014fda:	4b63      	ldr	r3, [pc, #396]	; (8015168 <HAL_RCC_ClockConfig+0x1b0>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	f023 0207 	bic.w	r2, r3, #7
 8014fe2:	4961      	ldr	r1, [pc, #388]	; (8015168 <HAL_RCC_ClockConfig+0x1b0>)
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	4313      	orrs	r3, r2
 8014fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014fea:	4b5f      	ldr	r3, [pc, #380]	; (8015168 <HAL_RCC_ClockConfig+0x1b0>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	f003 0307 	and.w	r3, r3, #7
 8014ff2:	683a      	ldr	r2, [r7, #0]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d001      	beq.n	8014ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	e0b0      	b.n	801515e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	f003 0301 	and.w	r3, r3, #1
 8015004:	2b00      	cmp	r3, #0
 8015006:	d04c      	beq.n	80150a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	685b      	ldr	r3, [r3, #4]
 801500c:	2b03      	cmp	r3, #3
 801500e:	d107      	bne.n	8015020 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8015010:	4b56      	ldr	r3, [pc, #344]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015018:	2b00      	cmp	r3, #0
 801501a:	d121      	bne.n	8015060 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 801501c:	2301      	movs	r3, #1
 801501e:	e09e      	b.n	801515e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	2b02      	cmp	r3, #2
 8015026:	d107      	bne.n	8015038 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015028:	4b50      	ldr	r3, [pc, #320]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015030:	2b00      	cmp	r3, #0
 8015032:	d115      	bne.n	8015060 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8015034:	2301      	movs	r3, #1
 8015036:	e092      	b.n	801515e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d107      	bne.n	8015050 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015040:	4b4a      	ldr	r3, [pc, #296]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	f003 0302 	and.w	r3, r3, #2
 8015048:	2b00      	cmp	r3, #0
 801504a:	d109      	bne.n	8015060 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801504c:	2301      	movs	r3, #1
 801504e:	e086      	b.n	801515e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015050:	4b46      	ldr	r3, [pc, #280]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015058:	2b00      	cmp	r3, #0
 801505a:	d101      	bne.n	8015060 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801505c:	2301      	movs	r3, #1
 801505e:	e07e      	b.n	801515e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8015060:	4b42      	ldr	r3, [pc, #264]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 8015062:	689b      	ldr	r3, [r3, #8]
 8015064:	f023 0203 	bic.w	r2, r3, #3
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	685b      	ldr	r3, [r3, #4]
 801506c:	493f      	ldr	r1, [pc, #252]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 801506e:	4313      	orrs	r3, r2
 8015070:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015072:	f7fd ff71 	bl	8012f58 <HAL_GetTick>
 8015076:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015078:	e00a      	b.n	8015090 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801507a:	f7fd ff6d 	bl	8012f58 <HAL_GetTick>
 801507e:	4602      	mov	r2, r0
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	1ad3      	subs	r3, r2, r3
 8015084:	f241 3288 	movw	r2, #5000	; 0x1388
 8015088:	4293      	cmp	r3, r2
 801508a:	d901      	bls.n	8015090 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 801508c:	2303      	movs	r3, #3
 801508e:	e066      	b.n	801515e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015090:	4b36      	ldr	r3, [pc, #216]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 8015092:	689b      	ldr	r3, [r3, #8]
 8015094:	f003 020c 	and.w	r2, r3, #12
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	685b      	ldr	r3, [r3, #4]
 801509c:	009b      	lsls	r3, r3, #2
 801509e:	429a      	cmp	r2, r3
 80150a0:	d1eb      	bne.n	801507a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	f003 0302 	and.w	r3, r3, #2
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d008      	beq.n	80150c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80150ae:	4b2f      	ldr	r3, [pc, #188]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 80150b0:	689b      	ldr	r3, [r3, #8]
 80150b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	689b      	ldr	r3, [r3, #8]
 80150ba:	492c      	ldr	r1, [pc, #176]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 80150bc:	4313      	orrs	r3, r2
 80150be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80150c0:	4b29      	ldr	r3, [pc, #164]	; (8015168 <HAL_RCC_ClockConfig+0x1b0>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	f003 0307 	and.w	r3, r3, #7
 80150c8:	683a      	ldr	r2, [r7, #0]
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d210      	bcs.n	80150f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80150ce:	4b26      	ldr	r3, [pc, #152]	; (8015168 <HAL_RCC_ClockConfig+0x1b0>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	f023 0207 	bic.w	r2, r3, #7
 80150d6:	4924      	ldr	r1, [pc, #144]	; (8015168 <HAL_RCC_ClockConfig+0x1b0>)
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	4313      	orrs	r3, r2
 80150dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80150de:	4b22      	ldr	r3, [pc, #136]	; (8015168 <HAL_RCC_ClockConfig+0x1b0>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	f003 0307 	and.w	r3, r3, #7
 80150e6:	683a      	ldr	r2, [r7, #0]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d001      	beq.n	80150f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80150ec:	2301      	movs	r3, #1
 80150ee:	e036      	b.n	801515e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	f003 0304 	and.w	r3, r3, #4
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d008      	beq.n	801510e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80150fc:	4b1b      	ldr	r3, [pc, #108]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 80150fe:	689b      	ldr	r3, [r3, #8]
 8015100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	68db      	ldr	r3, [r3, #12]
 8015108:	4918      	ldr	r1, [pc, #96]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 801510a:	4313      	orrs	r3, r2
 801510c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	f003 0308 	and.w	r3, r3, #8
 8015116:	2b00      	cmp	r3, #0
 8015118:	d009      	beq.n	801512e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801511a:	4b14      	ldr	r3, [pc, #80]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 801511c:	689b      	ldr	r3, [r3, #8]
 801511e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	691b      	ldr	r3, [r3, #16]
 8015126:	00db      	lsls	r3, r3, #3
 8015128:	4910      	ldr	r1, [pc, #64]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 801512a:	4313      	orrs	r3, r2
 801512c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801512e:	f000 f825 	bl	801517c <HAL_RCC_GetSysClockFreq>
 8015132:	4601      	mov	r1, r0
 8015134:	4b0d      	ldr	r3, [pc, #52]	; (801516c <HAL_RCC_ClockConfig+0x1b4>)
 8015136:	689b      	ldr	r3, [r3, #8]
 8015138:	091b      	lsrs	r3, r3, #4
 801513a:	f003 030f 	and.w	r3, r3, #15
 801513e:	4a0c      	ldr	r2, [pc, #48]	; (8015170 <HAL_RCC_ClockConfig+0x1b8>)
 8015140:	5cd3      	ldrb	r3, [r2, r3]
 8015142:	f003 031f 	and.w	r3, r3, #31
 8015146:	fa21 f303 	lsr.w	r3, r1, r3
 801514a:	4a0a      	ldr	r2, [pc, #40]	; (8015174 <HAL_RCC_ClockConfig+0x1bc>)
 801514c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801514e:	4b0a      	ldr	r3, [pc, #40]	; (8015178 <HAL_RCC_ClockConfig+0x1c0>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	4618      	mov	r0, r3
 8015154:	f7fd feb0 	bl	8012eb8 <HAL_InitTick>
 8015158:	4603      	mov	r3, r0
 801515a:	72fb      	strb	r3, [r7, #11]

  return status;
 801515c:	7afb      	ldrb	r3, [r7, #11]
}
 801515e:	4618      	mov	r0, r3
 8015160:	3710      	adds	r7, #16
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	40022000 	.word	0x40022000
 801516c:	40021000 	.word	0x40021000
 8015170:	080265ac 	.word	0x080265ac
 8015174:	20000004 	.word	0x20000004
 8015178:	20000008 	.word	0x20000008

0801517c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801517c:	b480      	push	{r7}
 801517e:	b089      	sub	sp, #36	; 0x24
 8015180:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8015182:	2300      	movs	r3, #0
 8015184:	61fb      	str	r3, [r7, #28]
 8015186:	2300      	movs	r3, #0
 8015188:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801518a:	4b3d      	ldr	r3, [pc, #244]	; (8015280 <HAL_RCC_GetSysClockFreq+0x104>)
 801518c:	689b      	ldr	r3, [r3, #8]
 801518e:	f003 030c 	and.w	r3, r3, #12
 8015192:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015194:	4b3a      	ldr	r3, [pc, #232]	; (8015280 <HAL_RCC_GetSysClockFreq+0x104>)
 8015196:	68db      	ldr	r3, [r3, #12]
 8015198:	f003 0303 	and.w	r3, r3, #3
 801519c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801519e:	693b      	ldr	r3, [r7, #16]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d005      	beq.n	80151b0 <HAL_RCC_GetSysClockFreq+0x34>
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	2b0c      	cmp	r3, #12
 80151a8:	d121      	bne.n	80151ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	2b01      	cmp	r3, #1
 80151ae:	d11e      	bne.n	80151ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80151b0:	4b33      	ldr	r3, [pc, #204]	; (8015280 <HAL_RCC_GetSysClockFreq+0x104>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f003 0308 	and.w	r3, r3, #8
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d107      	bne.n	80151cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80151bc:	4b30      	ldr	r3, [pc, #192]	; (8015280 <HAL_RCC_GetSysClockFreq+0x104>)
 80151be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80151c2:	0a1b      	lsrs	r3, r3, #8
 80151c4:	f003 030f 	and.w	r3, r3, #15
 80151c8:	61fb      	str	r3, [r7, #28]
 80151ca:	e005      	b.n	80151d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80151cc:	4b2c      	ldr	r3, [pc, #176]	; (8015280 <HAL_RCC_GetSysClockFreq+0x104>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	091b      	lsrs	r3, r3, #4
 80151d2:	f003 030f 	and.w	r3, r3, #15
 80151d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80151d8:	4a2a      	ldr	r2, [pc, #168]	; (8015284 <HAL_RCC_GetSysClockFreq+0x108>)
 80151da:	69fb      	ldr	r3, [r7, #28]
 80151dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d10d      	bne.n	8015204 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80151e8:	69fb      	ldr	r3, [r7, #28]
 80151ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80151ec:	e00a      	b.n	8015204 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80151ee:	693b      	ldr	r3, [r7, #16]
 80151f0:	2b04      	cmp	r3, #4
 80151f2:	d102      	bne.n	80151fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80151f4:	4b24      	ldr	r3, [pc, #144]	; (8015288 <HAL_RCC_GetSysClockFreq+0x10c>)
 80151f6:	61bb      	str	r3, [r7, #24]
 80151f8:	e004      	b.n	8015204 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	2b08      	cmp	r3, #8
 80151fe:	d101      	bne.n	8015204 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8015200:	4b22      	ldr	r3, [pc, #136]	; (801528c <HAL_RCC_GetSysClockFreq+0x110>)
 8015202:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8015204:	693b      	ldr	r3, [r7, #16]
 8015206:	2b0c      	cmp	r3, #12
 8015208:	d133      	bne.n	8015272 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801520a:	4b1d      	ldr	r3, [pc, #116]	; (8015280 <HAL_RCC_GetSysClockFreq+0x104>)
 801520c:	68db      	ldr	r3, [r3, #12]
 801520e:	f003 0303 	and.w	r3, r3, #3
 8015212:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	2b02      	cmp	r3, #2
 8015218:	d002      	beq.n	8015220 <HAL_RCC_GetSysClockFreq+0xa4>
 801521a:	2b03      	cmp	r3, #3
 801521c:	d003      	beq.n	8015226 <HAL_RCC_GetSysClockFreq+0xaa>
 801521e:	e005      	b.n	801522c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8015220:	4b19      	ldr	r3, [pc, #100]	; (8015288 <HAL_RCC_GetSysClockFreq+0x10c>)
 8015222:	617b      	str	r3, [r7, #20]
      break;
 8015224:	e005      	b.n	8015232 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8015226:	4b19      	ldr	r3, [pc, #100]	; (801528c <HAL_RCC_GetSysClockFreq+0x110>)
 8015228:	617b      	str	r3, [r7, #20]
      break;
 801522a:	e002      	b.n	8015232 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801522c:	69fb      	ldr	r3, [r7, #28]
 801522e:	617b      	str	r3, [r7, #20]
      break;
 8015230:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8015232:	4b13      	ldr	r3, [pc, #76]	; (8015280 <HAL_RCC_GetSysClockFreq+0x104>)
 8015234:	68db      	ldr	r3, [r3, #12]
 8015236:	091b      	lsrs	r3, r3, #4
 8015238:	f003 0307 	and.w	r3, r3, #7
 801523c:	3301      	adds	r3, #1
 801523e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8015240:	4b0f      	ldr	r3, [pc, #60]	; (8015280 <HAL_RCC_GetSysClockFreq+0x104>)
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	0a1b      	lsrs	r3, r3, #8
 8015246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801524a:	697a      	ldr	r2, [r7, #20]
 801524c:	fb02 f203 	mul.w	r2, r2, r3
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	fbb2 f3f3 	udiv	r3, r2, r3
 8015256:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8015258:	4b09      	ldr	r3, [pc, #36]	; (8015280 <HAL_RCC_GetSysClockFreq+0x104>)
 801525a:	68db      	ldr	r3, [r3, #12]
 801525c:	0e5b      	lsrs	r3, r3, #25
 801525e:	f003 0303 	and.w	r3, r3, #3
 8015262:	3301      	adds	r3, #1
 8015264:	005b      	lsls	r3, r3, #1
 8015266:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8015268:	697a      	ldr	r2, [r7, #20]
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015270:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8015272:	69bb      	ldr	r3, [r7, #24]
}
 8015274:	4618      	mov	r0, r3
 8015276:	3724      	adds	r7, #36	; 0x24
 8015278:	46bd      	mov	sp, r7
 801527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527e:	4770      	bx	lr
 8015280:	40021000 	.word	0x40021000
 8015284:	080265c4 	.word	0x080265c4
 8015288:	00f42400 	.word	0x00f42400
 801528c:	007a1200 	.word	0x007a1200

08015290 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015290:	b480      	push	{r7}
 8015292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015294:	4b03      	ldr	r3, [pc, #12]	; (80152a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8015296:	681b      	ldr	r3, [r3, #0]
}
 8015298:	4618      	mov	r0, r3
 801529a:	46bd      	mov	sp, r7
 801529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a0:	4770      	bx	lr
 80152a2:	bf00      	nop
 80152a4:	20000004 	.word	0x20000004

080152a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80152ac:	f7ff fff0 	bl	8015290 <HAL_RCC_GetHCLKFreq>
 80152b0:	4601      	mov	r1, r0
 80152b2:	4b06      	ldr	r3, [pc, #24]	; (80152cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80152b4:	689b      	ldr	r3, [r3, #8]
 80152b6:	0a1b      	lsrs	r3, r3, #8
 80152b8:	f003 0307 	and.w	r3, r3, #7
 80152bc:	4a04      	ldr	r2, [pc, #16]	; (80152d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80152be:	5cd3      	ldrb	r3, [r2, r3]
 80152c0:	f003 031f 	and.w	r3, r3, #31
 80152c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	40021000 	.word	0x40021000
 80152d0:	080265bc 	.word	0x080265bc

080152d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80152d8:	f7ff ffda 	bl	8015290 <HAL_RCC_GetHCLKFreq>
 80152dc:	4601      	mov	r1, r0
 80152de:	4b06      	ldr	r3, [pc, #24]	; (80152f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80152e0:	689b      	ldr	r3, [r3, #8]
 80152e2:	0adb      	lsrs	r3, r3, #11
 80152e4:	f003 0307 	and.w	r3, r3, #7
 80152e8:	4a04      	ldr	r2, [pc, #16]	; (80152fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80152ea:	5cd3      	ldrb	r3, [r2, r3]
 80152ec:	f003 031f 	and.w	r3, r3, #31
 80152f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	40021000 	.word	0x40021000
 80152fc:	080265bc 	.word	0x080265bc

08015300 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b086      	sub	sp, #24
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8015308:	2300      	movs	r3, #0
 801530a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801530c:	4b2a      	ldr	r3, [pc, #168]	; (80153b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015314:	2b00      	cmp	r3, #0
 8015316:	d003      	beq.n	8015320 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8015318:	f7ff f9ca 	bl	80146b0 <HAL_PWREx_GetVoltageRange>
 801531c:	6178      	str	r0, [r7, #20]
 801531e:	e014      	b.n	801534a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8015320:	4b25      	ldr	r3, [pc, #148]	; (80153b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015324:	4a24      	ldr	r2, [pc, #144]	; (80153b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801532a:	6593      	str	r3, [r2, #88]	; 0x58
 801532c:	4b22      	ldr	r3, [pc, #136]	; (80153b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801532e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015334:	60fb      	str	r3, [r7, #12]
 8015336:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8015338:	f7ff f9ba 	bl	80146b0 <HAL_PWREx_GetVoltageRange>
 801533c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801533e:	4b1e      	ldr	r3, [pc, #120]	; (80153b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015342:	4a1d      	ldr	r2, [pc, #116]	; (80153b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015348:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015350:	d10b      	bne.n	801536a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2b80      	cmp	r3, #128	; 0x80
 8015356:	d919      	bls.n	801538c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2ba0      	cmp	r3, #160	; 0xa0
 801535c:	d902      	bls.n	8015364 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801535e:	2302      	movs	r3, #2
 8015360:	613b      	str	r3, [r7, #16]
 8015362:	e013      	b.n	801538c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8015364:	2301      	movs	r3, #1
 8015366:	613b      	str	r3, [r7, #16]
 8015368:	e010      	b.n	801538c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	2b80      	cmp	r3, #128	; 0x80
 801536e:	d902      	bls.n	8015376 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8015370:	2303      	movs	r3, #3
 8015372:	613b      	str	r3, [r7, #16]
 8015374:	e00a      	b.n	801538c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	2b80      	cmp	r3, #128	; 0x80
 801537a:	d102      	bne.n	8015382 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801537c:	2302      	movs	r3, #2
 801537e:	613b      	str	r3, [r7, #16]
 8015380:	e004      	b.n	801538c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2b70      	cmp	r3, #112	; 0x70
 8015386:	d101      	bne.n	801538c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8015388:	2301      	movs	r3, #1
 801538a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801538c:	4b0b      	ldr	r3, [pc, #44]	; (80153bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	f023 0207 	bic.w	r2, r3, #7
 8015394:	4909      	ldr	r1, [pc, #36]	; (80153bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8015396:	693b      	ldr	r3, [r7, #16]
 8015398:	4313      	orrs	r3, r2
 801539a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801539c:	4b07      	ldr	r3, [pc, #28]	; (80153bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	f003 0307 	and.w	r3, r3, #7
 80153a4:	693a      	ldr	r2, [r7, #16]
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d001      	beq.n	80153ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80153aa:	2301      	movs	r3, #1
 80153ac:	e000      	b.n	80153b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80153ae:	2300      	movs	r3, #0
}
 80153b0:	4618      	mov	r0, r3
 80153b2:	3718      	adds	r7, #24
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bd80      	pop	{r7, pc}
 80153b8:	40021000 	.word	0x40021000
 80153bc:	40022000 	.word	0x40022000

080153c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b086      	sub	sp, #24
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80153c8:	2300      	movs	r3, #0
 80153ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80153cc:	2300      	movs	r3, #0
 80153ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d02f      	beq.n	801543c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80153e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80153e4:	d005      	beq.n	80153f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80153e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80153ea:	d015      	beq.n	8015418 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d007      	beq.n	8015400 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80153f0:	e00f      	b.n	8015412 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80153f2:	4bac      	ldr	r3, [pc, #688]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80153f4:	68db      	ldr	r3, [r3, #12]
 80153f6:	4aab      	ldr	r2, [pc, #684]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80153f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80153fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80153fe:	e00c      	b.n	801541a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	3304      	adds	r3, #4
 8015404:	2100      	movs	r1, #0
 8015406:	4618      	mov	r0, r3
 8015408:	f000 f9dc 	bl	80157c4 <RCCEx_PLLSAI1_Config>
 801540c:	4603      	mov	r3, r0
 801540e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8015410:	e003      	b.n	801541a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015412:	2301      	movs	r3, #1
 8015414:	74fb      	strb	r3, [r7, #19]
      break;
 8015416:	e000      	b.n	801541a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8015418:	bf00      	nop
    }

    if(ret == HAL_OK)
 801541a:	7cfb      	ldrb	r3, [r7, #19]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d10b      	bne.n	8015438 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015420:	4ba0      	ldr	r3, [pc, #640]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015426:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801542e:	499d      	ldr	r1, [pc, #628]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015430:	4313      	orrs	r3, r2
 8015432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8015436:	e001      	b.n	801543c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015438:	7cfb      	ldrb	r3, [r7, #19]
 801543a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015444:	2b00      	cmp	r3, #0
 8015446:	f000 8099 	beq.w	801557c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 801544a:	2300      	movs	r3, #0
 801544c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801544e:	4b95      	ldr	r3, [pc, #596]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015456:	2b00      	cmp	r3, #0
 8015458:	d101      	bne.n	801545e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 801545a:	2301      	movs	r3, #1
 801545c:	e000      	b.n	8015460 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 801545e:	2300      	movs	r3, #0
 8015460:	2b00      	cmp	r3, #0
 8015462:	d00d      	beq.n	8015480 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015464:	4b8f      	ldr	r3, [pc, #572]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015468:	4a8e      	ldr	r2, [pc, #568]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801546a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801546e:	6593      	str	r3, [r2, #88]	; 0x58
 8015470:	4b8c      	ldr	r3, [pc, #560]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015478:	60bb      	str	r3, [r7, #8]
 801547a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801547c:	2301      	movs	r3, #1
 801547e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015480:	4b89      	ldr	r3, [pc, #548]	; (80156a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	4a88      	ldr	r2, [pc, #544]	; (80156a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8015486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801548a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801548c:	f7fd fd64 	bl	8012f58 <HAL_GetTick>
 8015490:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8015492:	e009      	b.n	80154a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015494:	f7fd fd60 	bl	8012f58 <HAL_GetTick>
 8015498:	4602      	mov	r2, r0
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	1ad3      	subs	r3, r2, r3
 801549e:	2b02      	cmp	r3, #2
 80154a0:	d902      	bls.n	80154a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80154a2:	2303      	movs	r3, #3
 80154a4:	74fb      	strb	r3, [r7, #19]
        break;
 80154a6:	e005      	b.n	80154b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80154a8:	4b7f      	ldr	r3, [pc, #508]	; (80156a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d0ef      	beq.n	8015494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80154b4:	7cfb      	ldrb	r3, [r7, #19]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d155      	bne.n	8015566 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80154ba:	4b7a      	ldr	r3, [pc, #488]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80154bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80154c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80154c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d01e      	beq.n	801550a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154d0:	697a      	ldr	r2, [r7, #20]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d019      	beq.n	801550a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80154d6:	4b73      	ldr	r3, [pc, #460]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80154d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80154dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80154e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80154e2:	4b70      	ldr	r3, [pc, #448]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80154e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80154e8:	4a6e      	ldr	r2, [pc, #440]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80154ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80154ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80154f2:	4b6c      	ldr	r3, [pc, #432]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80154f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80154f8:	4a6a      	ldr	r2, [pc, #424]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80154fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80154fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8015502:	4a68      	ldr	r2, [pc, #416]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015504:	697b      	ldr	r3, [r7, #20]
 8015506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	f003 0301 	and.w	r3, r3, #1
 8015510:	2b00      	cmp	r3, #0
 8015512:	d016      	beq.n	8015542 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015514:	f7fd fd20 	bl	8012f58 <HAL_GetTick>
 8015518:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801551a:	e00b      	b.n	8015534 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801551c:	f7fd fd1c 	bl	8012f58 <HAL_GetTick>
 8015520:	4602      	mov	r2, r0
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	1ad3      	subs	r3, r2, r3
 8015526:	f241 3288 	movw	r2, #5000	; 0x1388
 801552a:	4293      	cmp	r3, r2
 801552c:	d902      	bls.n	8015534 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 801552e:	2303      	movs	r3, #3
 8015530:	74fb      	strb	r3, [r7, #19]
            break;
 8015532:	e006      	b.n	8015542 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015534:	4b5b      	ldr	r3, [pc, #364]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801553a:	f003 0302 	and.w	r3, r3, #2
 801553e:	2b00      	cmp	r3, #0
 8015540:	d0ec      	beq.n	801551c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8015542:	7cfb      	ldrb	r3, [r7, #19]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d10b      	bne.n	8015560 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015548:	4b56      	ldr	r3, [pc, #344]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801554e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015556:	4953      	ldr	r1, [pc, #332]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015558:	4313      	orrs	r3, r2
 801555a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801555e:	e004      	b.n	801556a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015560:	7cfb      	ldrb	r3, [r7, #19]
 8015562:	74bb      	strb	r3, [r7, #18]
 8015564:	e001      	b.n	801556a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015566:	7cfb      	ldrb	r3, [r7, #19]
 8015568:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801556a:	7c7b      	ldrb	r3, [r7, #17]
 801556c:	2b01      	cmp	r3, #1
 801556e:	d105      	bne.n	801557c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015570:	4b4c      	ldr	r3, [pc, #304]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015574:	4a4b      	ldr	r2, [pc, #300]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801557a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	f003 0301 	and.w	r3, r3, #1
 8015584:	2b00      	cmp	r3, #0
 8015586:	d00a      	beq.n	801559e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015588:	4b46      	ldr	r3, [pc, #280]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801558e:	f023 0203 	bic.w	r2, r3, #3
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6a1b      	ldr	r3, [r3, #32]
 8015596:	4943      	ldr	r1, [pc, #268]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015598:	4313      	orrs	r3, r2
 801559a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	f003 0302 	and.w	r3, r3, #2
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d00a      	beq.n	80155c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80155aa:	4b3e      	ldr	r3, [pc, #248]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80155ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80155b0:	f023 020c 	bic.w	r2, r3, #12
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155b8:	493a      	ldr	r1, [pc, #232]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80155ba:	4313      	orrs	r3, r2
 80155bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	f003 0320 	and.w	r3, r3, #32
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d00a      	beq.n	80155e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80155cc:	4b35      	ldr	r3, [pc, #212]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80155ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80155d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155da:	4932      	ldr	r1, [pc, #200]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80155dc:	4313      	orrs	r3, r2
 80155de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d00a      	beq.n	8015604 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80155ee:	4b2d      	ldr	r3, [pc, #180]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80155f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80155f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155fc:	4929      	ldr	r1, [pc, #164]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80155fe:	4313      	orrs	r3, r2
 8015600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801560c:	2b00      	cmp	r3, #0
 801560e:	d00a      	beq.n	8015626 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8015610:	4b24      	ldr	r3, [pc, #144]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801561e:	4921      	ldr	r1, [pc, #132]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015620:	4313      	orrs	r3, r2
 8015622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801562e:	2b00      	cmp	r3, #0
 8015630:	d00a      	beq.n	8015648 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015632:	4b1c      	ldr	r3, [pc, #112]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015638:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015640:	4918      	ldr	r1, [pc, #96]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015642:	4313      	orrs	r3, r2
 8015644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015650:	2b00      	cmp	r3, #0
 8015652:	d00a      	beq.n	801566a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015654:	4b13      	ldr	r3, [pc, #76]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801565a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015662:	4910      	ldr	r1, [pc, #64]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015664:	4313      	orrs	r3, r2
 8015666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015672:	2b00      	cmp	r3, #0
 8015674:	d02c      	beq.n	80156d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015676:	4b0b      	ldr	r3, [pc, #44]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801567c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015684:	4907      	ldr	r1, [pc, #28]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015686:	4313      	orrs	r3, r2
 8015688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015694:	d10a      	bne.n	80156ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015696:	4b03      	ldr	r3, [pc, #12]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	4a02      	ldr	r2, [pc, #8]	; (80156a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801569c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80156a0:	60d3      	str	r3, [r2, #12]
 80156a2:	e015      	b.n	80156d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80156a4:	40021000 	.word	0x40021000
 80156a8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80156b4:	d10c      	bne.n	80156d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	3304      	adds	r3, #4
 80156ba:	2101      	movs	r1, #1
 80156bc:	4618      	mov	r0, r3
 80156be:	f000 f881 	bl	80157c4 <RCCEx_PLLSAI1_Config>
 80156c2:	4603      	mov	r3, r0
 80156c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80156c6:	7cfb      	ldrb	r3, [r7, #19]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d001      	beq.n	80156d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80156cc:	7cfb      	ldrb	r3, [r7, #19]
 80156ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d028      	beq.n	801572e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80156dc:	4b30      	ldr	r3, [pc, #192]	; (80157a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80156de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80156e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156ea:	492d      	ldr	r1, [pc, #180]	; (80157a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80156ec:	4313      	orrs	r3, r2
 80156ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80156fa:	d106      	bne.n	801570a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80156fc:	4b28      	ldr	r3, [pc, #160]	; (80157a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80156fe:	68db      	ldr	r3, [r3, #12]
 8015700:	4a27      	ldr	r2, [pc, #156]	; (80157a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015706:	60d3      	str	r3, [r2, #12]
 8015708:	e011      	b.n	801572e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801570e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015712:	d10c      	bne.n	801572e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	3304      	adds	r3, #4
 8015718:	2101      	movs	r1, #1
 801571a:	4618      	mov	r0, r3
 801571c:	f000 f852 	bl	80157c4 <RCCEx_PLLSAI1_Config>
 8015720:	4603      	mov	r3, r0
 8015722:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8015724:	7cfb      	ldrb	r3, [r7, #19]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d001      	beq.n	801572e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 801572a:	7cfb      	ldrb	r3, [r7, #19]
 801572c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015736:	2b00      	cmp	r3, #0
 8015738:	d01c      	beq.n	8015774 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801573a:	4b19      	ldr	r3, [pc, #100]	; (80157a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801573c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015740:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015748:	4915      	ldr	r1, [pc, #84]	; (80157a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801574a:	4313      	orrs	r3, r2
 801574c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015758:	d10c      	bne.n	8015774 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	3304      	adds	r3, #4
 801575e:	2102      	movs	r1, #2
 8015760:	4618      	mov	r0, r3
 8015762:	f000 f82f 	bl	80157c4 <RCCEx_PLLSAI1_Config>
 8015766:	4603      	mov	r3, r0
 8015768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801576a:	7cfb      	ldrb	r3, [r7, #19]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d001      	beq.n	8015774 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8015770:	7cfb      	ldrb	r3, [r7, #19]
 8015772:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801577c:	2b00      	cmp	r3, #0
 801577e:	d00a      	beq.n	8015796 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8015780:	4b07      	ldr	r3, [pc, #28]	; (80157a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015786:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801578e:	4904      	ldr	r1, [pc, #16]	; (80157a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015790:	4313      	orrs	r3, r2
 8015792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8015796:	7cbb      	ldrb	r3, [r7, #18]
}
 8015798:	4618      	mov	r0, r3
 801579a:	3718      	adds	r7, #24
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	40021000 	.word	0x40021000

080157a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80157a4:	b480      	push	{r7}
 80157a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80157a8:	4b05      	ldr	r3, [pc, #20]	; (80157c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	4a04      	ldr	r2, [pc, #16]	; (80157c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80157ae:	f043 0304 	orr.w	r3, r3, #4
 80157b2:	6013      	str	r3, [r2, #0]
}
 80157b4:	bf00      	nop
 80157b6:	46bd      	mov	sp, r7
 80157b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157bc:	4770      	bx	lr
 80157be:	bf00      	nop
 80157c0:	40021000 	.word	0x40021000

080157c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
 80157cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80157ce:	2300      	movs	r3, #0
 80157d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80157d2:	4b73      	ldr	r3, [pc, #460]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80157d4:	68db      	ldr	r3, [r3, #12]
 80157d6:	f003 0303 	and.w	r3, r3, #3
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d018      	beq.n	8015810 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80157de:	4b70      	ldr	r3, [pc, #448]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80157e0:	68db      	ldr	r3, [r3, #12]
 80157e2:	f003 0203 	and.w	r2, r3, #3
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d10d      	bne.n	801580a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	681b      	ldr	r3, [r3, #0]
       ||
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d009      	beq.n	801580a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80157f6:	4b6a      	ldr	r3, [pc, #424]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80157f8:	68db      	ldr	r3, [r3, #12]
 80157fa:	091b      	lsrs	r3, r3, #4
 80157fc:	f003 0307 	and.w	r3, r3, #7
 8015800:	1c5a      	adds	r2, r3, #1
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	685b      	ldr	r3, [r3, #4]
       ||
 8015806:	429a      	cmp	r2, r3
 8015808:	d044      	beq.n	8015894 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 801580a:	2301      	movs	r3, #1
 801580c:	73fb      	strb	r3, [r7, #15]
 801580e:	e041      	b.n	8015894 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	2b02      	cmp	r3, #2
 8015816:	d00c      	beq.n	8015832 <RCCEx_PLLSAI1_Config+0x6e>
 8015818:	2b03      	cmp	r3, #3
 801581a:	d013      	beq.n	8015844 <RCCEx_PLLSAI1_Config+0x80>
 801581c:	2b01      	cmp	r3, #1
 801581e:	d120      	bne.n	8015862 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8015820:	4b5f      	ldr	r3, [pc, #380]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	f003 0302 	and.w	r3, r3, #2
 8015828:	2b00      	cmp	r3, #0
 801582a:	d11d      	bne.n	8015868 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 801582c:	2301      	movs	r3, #1
 801582e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015830:	e01a      	b.n	8015868 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8015832:	4b5b      	ldr	r3, [pc, #364]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801583a:	2b00      	cmp	r3, #0
 801583c:	d116      	bne.n	801586c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 801583e:	2301      	movs	r3, #1
 8015840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015842:	e013      	b.n	801586c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8015844:	4b56      	ldr	r3, [pc, #344]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801584c:	2b00      	cmp	r3, #0
 801584e:	d10f      	bne.n	8015870 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8015850:	4b53      	ldr	r3, [pc, #332]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015858:	2b00      	cmp	r3, #0
 801585a:	d109      	bne.n	8015870 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 801585c:	2301      	movs	r3, #1
 801585e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015860:	e006      	b.n	8015870 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8015862:	2301      	movs	r3, #1
 8015864:	73fb      	strb	r3, [r7, #15]
      break;
 8015866:	e004      	b.n	8015872 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8015868:	bf00      	nop
 801586a:	e002      	b.n	8015872 <RCCEx_PLLSAI1_Config+0xae>
      break;
 801586c:	bf00      	nop
 801586e:	e000      	b.n	8015872 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8015870:	bf00      	nop
    }

    if(status == HAL_OK)
 8015872:	7bfb      	ldrb	r3, [r7, #15]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d10d      	bne.n	8015894 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8015878:	4b49      	ldr	r3, [pc, #292]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	6819      	ldr	r1, [r3, #0]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	685b      	ldr	r3, [r3, #4]
 8015888:	3b01      	subs	r3, #1
 801588a:	011b      	lsls	r3, r3, #4
 801588c:	430b      	orrs	r3, r1
 801588e:	4944      	ldr	r1, [pc, #272]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015890:	4313      	orrs	r3, r2
 8015892:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8015894:	7bfb      	ldrb	r3, [r7, #15]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d17c      	bne.n	8015994 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801589a:	4b41      	ldr	r3, [pc, #260]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	4a40      	ldr	r2, [pc, #256]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80158a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80158a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80158a6:	f7fd fb57 	bl	8012f58 <HAL_GetTick>
 80158aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80158ac:	e009      	b.n	80158c2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80158ae:	f7fd fb53 	bl	8012f58 <HAL_GetTick>
 80158b2:	4602      	mov	r2, r0
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	1ad3      	subs	r3, r2, r3
 80158b8:	2b02      	cmp	r3, #2
 80158ba:	d902      	bls.n	80158c2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80158bc:	2303      	movs	r3, #3
 80158be:	73fb      	strb	r3, [r7, #15]
        break;
 80158c0:	e005      	b.n	80158ce <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80158c2:	4b37      	ldr	r3, [pc, #220]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d1ef      	bne.n	80158ae <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80158ce:	7bfb      	ldrb	r3, [r7, #15]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d15f      	bne.n	8015994 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d110      	bne.n	80158fc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80158da:	4b31      	ldr	r3, [pc, #196]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80158dc:	691b      	ldr	r3, [r3, #16]
 80158de:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80158e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80158e6:	687a      	ldr	r2, [r7, #4]
 80158e8:	6892      	ldr	r2, [r2, #8]
 80158ea:	0211      	lsls	r1, r2, #8
 80158ec:	687a      	ldr	r2, [r7, #4]
 80158ee:	68d2      	ldr	r2, [r2, #12]
 80158f0:	06d2      	lsls	r2, r2, #27
 80158f2:	430a      	orrs	r2, r1
 80158f4:	492a      	ldr	r1, [pc, #168]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80158f6:	4313      	orrs	r3, r2
 80158f8:	610b      	str	r3, [r1, #16]
 80158fa:	e027      	b.n	801594c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d112      	bne.n	8015928 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8015902:	4b27      	ldr	r3, [pc, #156]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015904:	691b      	ldr	r3, [r3, #16]
 8015906:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 801590a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801590e:	687a      	ldr	r2, [r7, #4]
 8015910:	6892      	ldr	r2, [r2, #8]
 8015912:	0211      	lsls	r1, r2, #8
 8015914:	687a      	ldr	r2, [r7, #4]
 8015916:	6912      	ldr	r2, [r2, #16]
 8015918:	0852      	lsrs	r2, r2, #1
 801591a:	3a01      	subs	r2, #1
 801591c:	0552      	lsls	r2, r2, #21
 801591e:	430a      	orrs	r2, r1
 8015920:	491f      	ldr	r1, [pc, #124]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015922:	4313      	orrs	r3, r2
 8015924:	610b      	str	r3, [r1, #16]
 8015926:	e011      	b.n	801594c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8015928:	4b1d      	ldr	r3, [pc, #116]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 801592a:	691b      	ldr	r3, [r3, #16]
 801592c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8015930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8015934:	687a      	ldr	r2, [r7, #4]
 8015936:	6892      	ldr	r2, [r2, #8]
 8015938:	0211      	lsls	r1, r2, #8
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	6952      	ldr	r2, [r2, #20]
 801593e:	0852      	lsrs	r2, r2, #1
 8015940:	3a01      	subs	r2, #1
 8015942:	0652      	lsls	r2, r2, #25
 8015944:	430a      	orrs	r2, r1
 8015946:	4916      	ldr	r1, [pc, #88]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015948:	4313      	orrs	r3, r2
 801594a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801594c:	4b14      	ldr	r3, [pc, #80]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	4a13      	ldr	r2, [pc, #76]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015958:	f7fd fafe 	bl	8012f58 <HAL_GetTick>
 801595c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801595e:	e009      	b.n	8015974 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015960:	f7fd fafa 	bl	8012f58 <HAL_GetTick>
 8015964:	4602      	mov	r2, r0
 8015966:	68bb      	ldr	r3, [r7, #8]
 8015968:	1ad3      	subs	r3, r2, r3
 801596a:	2b02      	cmp	r3, #2
 801596c:	d902      	bls.n	8015974 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 801596e:	2303      	movs	r3, #3
 8015970:	73fb      	strb	r3, [r7, #15]
          break;
 8015972:	e005      	b.n	8015980 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8015974:	4b0a      	ldr	r3, [pc, #40]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801597c:	2b00      	cmp	r3, #0
 801597e:	d0ef      	beq.n	8015960 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8015980:	7bfb      	ldrb	r3, [r7, #15]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d106      	bne.n	8015994 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8015986:	4b06      	ldr	r3, [pc, #24]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015988:	691a      	ldr	r2, [r3, #16]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	699b      	ldr	r3, [r3, #24]
 801598e:	4904      	ldr	r1, [pc, #16]	; (80159a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8015990:	4313      	orrs	r3, r2
 8015992:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8015994:	7bfb      	ldrb	r3, [r7, #15]
}
 8015996:	4618      	mov	r0, r3
 8015998:	3710      	adds	r7, #16
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}
 801599e:	bf00      	nop
 80159a0:	40021000 	.word	0x40021000

080159a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d101      	bne.n	80159b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80159b2:	2301      	movs	r3, #1
 80159b4:	e049      	b.n	8015a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80159bc:	b2db      	uxtb	r3, r3
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d106      	bne.n	80159d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	2200      	movs	r2, #0
 80159c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f7fc fed4 	bl	8012778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2202      	movs	r2, #2
 80159d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681a      	ldr	r2, [r3, #0]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	3304      	adds	r3, #4
 80159e0:	4619      	mov	r1, r3
 80159e2:	4610      	mov	r0, r2
 80159e4:	f000 f93c 	bl	8015c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	2201      	movs	r2, #1
 80159ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2201      	movs	r2, #1
 80159f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2201      	movs	r2, #1
 80159fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	2201      	movs	r2, #1
 8015a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2201      	movs	r2, #1
 8015a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2201      	movs	r2, #1
 8015a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2201      	movs	r2, #1
 8015a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	2201      	movs	r2, #1
 8015a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2201      	movs	r2, #1
 8015a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2201      	movs	r2, #1
 8015a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2201      	movs	r2, #1
 8015a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2201      	movs	r2, #1
 8015a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015a48:	2300      	movs	r3, #0
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3708      	adds	r7, #8
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
	...

08015a54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015a54:	b480      	push	{r7}
 8015a56:	b085      	sub	sp, #20
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015a62:	b2db      	uxtb	r3, r3
 8015a64:	2b01      	cmp	r3, #1
 8015a66:	d001      	beq.n	8015a6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015a68:	2301      	movs	r3, #1
 8015a6a:	e033      	b.n	8015ad4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2202      	movs	r2, #2
 8015a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	4a19      	ldr	r2, [pc, #100]	; (8015ae0 <HAL_TIM_Base_Start+0x8c>)
 8015a7a:	4293      	cmp	r3, r2
 8015a7c:	d009      	beq.n	8015a92 <HAL_TIM_Base_Start+0x3e>
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015a86:	d004      	beq.n	8015a92 <HAL_TIM_Base_Start+0x3e>
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	4a15      	ldr	r2, [pc, #84]	; (8015ae4 <HAL_TIM_Base_Start+0x90>)
 8015a8e:	4293      	cmp	r3, r2
 8015a90:	d115      	bne.n	8015abe <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	689a      	ldr	r2, [r3, #8]
 8015a98:	4b13      	ldr	r3, [pc, #76]	; (8015ae8 <HAL_TIM_Base_Start+0x94>)
 8015a9a:	4013      	ands	r3, r2
 8015a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	2b06      	cmp	r3, #6
 8015aa2:	d015      	beq.n	8015ad0 <HAL_TIM_Base_Start+0x7c>
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015aaa:	d011      	beq.n	8015ad0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	f042 0201 	orr.w	r2, r2, #1
 8015aba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015abc:	e008      	b.n	8015ad0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	f042 0201 	orr.w	r2, r2, #1
 8015acc:	601a      	str	r2, [r3, #0]
 8015ace:	e000      	b.n	8015ad2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015ad0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015ad2:	2300      	movs	r3, #0
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	3714      	adds	r7, #20
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ade:	4770      	bx	lr
 8015ae0:	40012c00 	.word	0x40012c00
 8015ae4:	40014000 	.word	0x40014000
 8015ae8:	00010007 	.word	0x00010007

08015aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b084      	sub	sp, #16
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015afc:	2b01      	cmp	r3, #1
 8015afe:	d101      	bne.n	8015b04 <HAL_TIM_ConfigClockSource+0x18>
 8015b00:	2302      	movs	r3, #2
 8015b02:	e0a8      	b.n	8015c56 <HAL_TIM_ConfigClockSource+0x16a>
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2201      	movs	r2, #1
 8015b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2202      	movs	r2, #2
 8015b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	689b      	ldr	r3, [r3, #8]
 8015b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8015b26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015b2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	68fa      	ldr	r2, [r7, #12]
 8015b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	2b40      	cmp	r3, #64	; 0x40
 8015b3e:	d067      	beq.n	8015c10 <HAL_TIM_ConfigClockSource+0x124>
 8015b40:	2b40      	cmp	r3, #64	; 0x40
 8015b42:	d80b      	bhi.n	8015b5c <HAL_TIM_ConfigClockSource+0x70>
 8015b44:	2b10      	cmp	r3, #16
 8015b46:	d073      	beq.n	8015c30 <HAL_TIM_ConfigClockSource+0x144>
 8015b48:	2b10      	cmp	r3, #16
 8015b4a:	d802      	bhi.n	8015b52 <HAL_TIM_ConfigClockSource+0x66>
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d06f      	beq.n	8015c30 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8015b50:	e078      	b.n	8015c44 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8015b52:	2b20      	cmp	r3, #32
 8015b54:	d06c      	beq.n	8015c30 <HAL_TIM_ConfigClockSource+0x144>
 8015b56:	2b30      	cmp	r3, #48	; 0x30
 8015b58:	d06a      	beq.n	8015c30 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8015b5a:	e073      	b.n	8015c44 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8015b5c:	2b70      	cmp	r3, #112	; 0x70
 8015b5e:	d00d      	beq.n	8015b7c <HAL_TIM_ConfigClockSource+0x90>
 8015b60:	2b70      	cmp	r3, #112	; 0x70
 8015b62:	d804      	bhi.n	8015b6e <HAL_TIM_ConfigClockSource+0x82>
 8015b64:	2b50      	cmp	r3, #80	; 0x50
 8015b66:	d033      	beq.n	8015bd0 <HAL_TIM_ConfigClockSource+0xe4>
 8015b68:	2b60      	cmp	r3, #96	; 0x60
 8015b6a:	d041      	beq.n	8015bf0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8015b6c:	e06a      	b.n	8015c44 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8015b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b72:	d066      	beq.n	8015c42 <HAL_TIM_ConfigClockSource+0x156>
 8015b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015b78:	d017      	beq.n	8015baa <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8015b7a:	e063      	b.n	8015c44 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	6818      	ldr	r0, [r3, #0]
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	6899      	ldr	r1, [r3, #8]
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	685a      	ldr	r2, [r3, #4]
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	68db      	ldr	r3, [r3, #12]
 8015b8c:	f000 f946 	bl	8015e1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	689b      	ldr	r3, [r3, #8]
 8015b96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015b9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	68fa      	ldr	r2, [r7, #12]
 8015ba6:	609a      	str	r2, [r3, #8]
      break;
 8015ba8:	e04c      	b.n	8015c44 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	6818      	ldr	r0, [r3, #0]
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	6899      	ldr	r1, [r3, #8]
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	685a      	ldr	r2, [r3, #4]
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	68db      	ldr	r3, [r3, #12]
 8015bba:	f000 f92f 	bl	8015e1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	689a      	ldr	r2, [r3, #8]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015bcc:	609a      	str	r2, [r3, #8]
      break;
 8015bce:	e039      	b.n	8015c44 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	6818      	ldr	r0, [r3, #0]
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	6859      	ldr	r1, [r3, #4]
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	68db      	ldr	r3, [r3, #12]
 8015bdc:	461a      	mov	r2, r3
 8015bde:	f000 f8a3 	bl	8015d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2150      	movs	r1, #80	; 0x50
 8015be8:	4618      	mov	r0, r3
 8015bea:	f000 f8fc 	bl	8015de6 <TIM_ITRx_SetConfig>
      break;
 8015bee:	e029      	b.n	8015c44 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6818      	ldr	r0, [r3, #0]
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	6859      	ldr	r1, [r3, #4]
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	68db      	ldr	r3, [r3, #12]
 8015bfc:	461a      	mov	r2, r3
 8015bfe:	f000 f8c2 	bl	8015d86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	2160      	movs	r1, #96	; 0x60
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f000 f8ec 	bl	8015de6 <TIM_ITRx_SetConfig>
      break;
 8015c0e:	e019      	b.n	8015c44 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	6818      	ldr	r0, [r3, #0]
 8015c14:	683b      	ldr	r3, [r7, #0]
 8015c16:	6859      	ldr	r1, [r3, #4]
 8015c18:	683b      	ldr	r3, [r7, #0]
 8015c1a:	68db      	ldr	r3, [r3, #12]
 8015c1c:	461a      	mov	r2, r3
 8015c1e:	f000 f883 	bl	8015d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	2140      	movs	r1, #64	; 0x40
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f000 f8dc 	bl	8015de6 <TIM_ITRx_SetConfig>
      break;
 8015c2e:	e009      	b.n	8015c44 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	681a      	ldr	r2, [r3, #0]
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	4619      	mov	r1, r3
 8015c3a:	4610      	mov	r0, r2
 8015c3c:	f000 f8d3 	bl	8015de6 <TIM_ITRx_SetConfig>
        break;
 8015c40:	e000      	b.n	8015c44 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8015c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2201      	movs	r2, #1
 8015c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015c54:	2300      	movs	r3, #0
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3710      	adds	r7, #16
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
	...

08015c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015c60:	b480      	push	{r7}
 8015c62:	b085      	sub	sp, #20
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
 8015c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	4a2a      	ldr	r2, [pc, #168]	; (8015d1c <TIM_Base_SetConfig+0xbc>)
 8015c74:	4293      	cmp	r3, r2
 8015c76:	d003      	beq.n	8015c80 <TIM_Base_SetConfig+0x20>
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015c7e:	d108      	bne.n	8015c92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	685b      	ldr	r3, [r3, #4]
 8015c8c:	68fa      	ldr	r2, [r7, #12]
 8015c8e:	4313      	orrs	r3, r2
 8015c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	4a21      	ldr	r2, [pc, #132]	; (8015d1c <TIM_Base_SetConfig+0xbc>)
 8015c96:	4293      	cmp	r3, r2
 8015c98:	d00b      	beq.n	8015cb2 <TIM_Base_SetConfig+0x52>
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015ca0:	d007      	beq.n	8015cb2 <TIM_Base_SetConfig+0x52>
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	4a1e      	ldr	r2, [pc, #120]	; (8015d20 <TIM_Base_SetConfig+0xc0>)
 8015ca6:	4293      	cmp	r3, r2
 8015ca8:	d003      	beq.n	8015cb2 <TIM_Base_SetConfig+0x52>
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	4a1d      	ldr	r2, [pc, #116]	; (8015d24 <TIM_Base_SetConfig+0xc4>)
 8015cae:	4293      	cmp	r3, r2
 8015cb0:	d108      	bne.n	8015cc4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	68db      	ldr	r3, [r3, #12]
 8015cbe:	68fa      	ldr	r2, [r7, #12]
 8015cc0:	4313      	orrs	r3, r2
 8015cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	695b      	ldr	r3, [r3, #20]
 8015cce:	4313      	orrs	r3, r2
 8015cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	68fa      	ldr	r2, [r7, #12]
 8015cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	689a      	ldr	r2, [r3, #8]
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	681a      	ldr	r2, [r3, #0]
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	4a0c      	ldr	r2, [pc, #48]	; (8015d1c <TIM_Base_SetConfig+0xbc>)
 8015cec:	4293      	cmp	r3, r2
 8015cee:	d007      	beq.n	8015d00 <TIM_Base_SetConfig+0xa0>
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	4a0b      	ldr	r2, [pc, #44]	; (8015d20 <TIM_Base_SetConfig+0xc0>)
 8015cf4:	4293      	cmp	r3, r2
 8015cf6:	d003      	beq.n	8015d00 <TIM_Base_SetConfig+0xa0>
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	4a0a      	ldr	r2, [pc, #40]	; (8015d24 <TIM_Base_SetConfig+0xc4>)
 8015cfc:	4293      	cmp	r3, r2
 8015cfe:	d103      	bne.n	8015d08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	691a      	ldr	r2, [r3, #16]
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2201      	movs	r2, #1
 8015d0c:	615a      	str	r2, [r3, #20]
}
 8015d0e:	bf00      	nop
 8015d10:	3714      	adds	r7, #20
 8015d12:	46bd      	mov	sp, r7
 8015d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d18:	4770      	bx	lr
 8015d1a:	bf00      	nop
 8015d1c:	40012c00 	.word	0x40012c00
 8015d20:	40014000 	.word	0x40014000
 8015d24:	40014400 	.word	0x40014400

08015d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015d28:	b480      	push	{r7}
 8015d2a:	b087      	sub	sp, #28
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	60f8      	str	r0, [r7, #12]
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	6a1b      	ldr	r3, [r3, #32]
 8015d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	6a1b      	ldr	r3, [r3, #32]
 8015d3e:	f023 0201 	bic.w	r2, r3, #1
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	699b      	ldr	r3, [r3, #24]
 8015d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	011b      	lsls	r3, r3, #4
 8015d58:	693a      	ldr	r2, [r7, #16]
 8015d5a:	4313      	orrs	r3, r2
 8015d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	f023 030a 	bic.w	r3, r3, #10
 8015d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015d66:	697a      	ldr	r2, [r7, #20]
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	4313      	orrs	r3, r2
 8015d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	693a      	ldr	r2, [r7, #16]
 8015d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	697a      	ldr	r2, [r7, #20]
 8015d78:	621a      	str	r2, [r3, #32]
}
 8015d7a:	bf00      	nop
 8015d7c:	371c      	adds	r7, #28
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d84:	4770      	bx	lr

08015d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015d86:	b480      	push	{r7}
 8015d88:	b087      	sub	sp, #28
 8015d8a:	af00      	add	r7, sp, #0
 8015d8c:	60f8      	str	r0, [r7, #12]
 8015d8e:	60b9      	str	r1, [r7, #8]
 8015d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	6a1b      	ldr	r3, [r3, #32]
 8015d96:	f023 0210 	bic.w	r2, r3, #16
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	699b      	ldr	r3, [r3, #24]
 8015da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	6a1b      	ldr	r3, [r3, #32]
 8015da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015daa:	697b      	ldr	r3, [r7, #20]
 8015dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	031b      	lsls	r3, r3, #12
 8015db6:	697a      	ldr	r2, [r7, #20]
 8015db8:	4313      	orrs	r3, r2
 8015dba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015dbc:	693b      	ldr	r3, [r7, #16]
 8015dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015dc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	011b      	lsls	r3, r3, #4
 8015dc8:	693a      	ldr	r2, [r7, #16]
 8015dca:	4313      	orrs	r3, r2
 8015dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	697a      	ldr	r2, [r7, #20]
 8015dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	693a      	ldr	r2, [r7, #16]
 8015dd8:	621a      	str	r2, [r3, #32]
}
 8015dda:	bf00      	nop
 8015ddc:	371c      	adds	r7, #28
 8015dde:	46bd      	mov	sp, r7
 8015de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de4:	4770      	bx	lr

08015de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015de6:	b480      	push	{r7}
 8015de8:	b085      	sub	sp, #20
 8015dea:	af00      	add	r7, sp, #0
 8015dec:	6078      	str	r0, [r7, #4]
 8015dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	689b      	ldr	r3, [r3, #8]
 8015df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015dfe:	683a      	ldr	r2, [r7, #0]
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	4313      	orrs	r3, r2
 8015e04:	f043 0307 	orr.w	r3, r3, #7
 8015e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	68fa      	ldr	r2, [r7, #12]
 8015e0e:	609a      	str	r2, [r3, #8]
}
 8015e10:	bf00      	nop
 8015e12:	3714      	adds	r7, #20
 8015e14:	46bd      	mov	sp, r7
 8015e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1a:	4770      	bx	lr

08015e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015e1c:	b480      	push	{r7}
 8015e1e:	b087      	sub	sp, #28
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	60f8      	str	r0, [r7, #12]
 8015e24:	60b9      	str	r1, [r7, #8]
 8015e26:	607a      	str	r2, [r7, #4]
 8015e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	689b      	ldr	r3, [r3, #8]
 8015e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	021a      	lsls	r2, r3, #8
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	431a      	orrs	r2, r3
 8015e40:	68bb      	ldr	r3, [r7, #8]
 8015e42:	4313      	orrs	r3, r2
 8015e44:	697a      	ldr	r2, [r7, #20]
 8015e46:	4313      	orrs	r3, r2
 8015e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	697a      	ldr	r2, [r7, #20]
 8015e4e:	609a      	str	r2, [r3, #8]
}
 8015e50:	bf00      	nop
 8015e52:	371c      	adds	r7, #28
 8015e54:	46bd      	mov	sp, r7
 8015e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5a:	4770      	bx	lr

08015e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015e5c:	b480      	push	{r7}
 8015e5e:	b085      	sub	sp, #20
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015e6c:	2b01      	cmp	r3, #1
 8015e6e:	d101      	bne.n	8015e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015e70:	2302      	movs	r3, #2
 8015e72:	e04f      	b.n	8015f14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	2201      	movs	r2, #1
 8015e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2202      	movs	r2, #2
 8015e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	689b      	ldr	r3, [r3, #8]
 8015e92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	4a21      	ldr	r2, [pc, #132]	; (8015f20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8015e9a:	4293      	cmp	r3, r2
 8015e9c:	d108      	bne.n	8015eb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015ea4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	68fa      	ldr	r2, [r7, #12]
 8015eac:	4313      	orrs	r3, r2
 8015eae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	68fa      	ldr	r2, [r7, #12]
 8015ebe:	4313      	orrs	r3, r2
 8015ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	68fa      	ldr	r2, [r7, #12]
 8015ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	4a14      	ldr	r2, [pc, #80]	; (8015f20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8015ed0:	4293      	cmp	r3, r2
 8015ed2:	d009      	beq.n	8015ee8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015edc:	d004      	beq.n	8015ee8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4a10      	ldr	r2, [pc, #64]	; (8015f24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	d10c      	bne.n	8015f02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015eee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	689b      	ldr	r3, [r3, #8]
 8015ef4:	68ba      	ldr	r2, [r7, #8]
 8015ef6:	4313      	orrs	r3, r2
 8015ef8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	68ba      	ldr	r2, [r7, #8]
 8015f00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2201      	movs	r2, #1
 8015f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015f12:	2300      	movs	r3, #0
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3714      	adds	r7, #20
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1e:	4770      	bx	lr
 8015f20:	40012c00 	.word	0x40012c00
 8015f24:	40014000 	.word	0x40014000

08015f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d101      	bne.n	8015f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015f36:	2301      	movs	r3, #1
 8015f38:	e040      	b.n	8015fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d106      	bne.n	8015f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	2200      	movs	r2, #0
 8015f46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f7fc fc48 	bl	80127e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2224      	movs	r2, #36	; 0x24
 8015f54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	681a      	ldr	r2, [r3, #0]
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	f022 0201 	bic.w	r2, r2, #1
 8015f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f000 f8c0 	bl	80160ec <UART_SetConfig>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	2b01      	cmp	r3, #1
 8015f70:	d101      	bne.n	8015f76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8015f72:	2301      	movs	r3, #1
 8015f74:	e022      	b.n	8015fbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d002      	beq.n	8015f84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8015f7e:	6878      	ldr	r0, [r7, #4]
 8015f80:	f000 fac4 	bl	801650c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	685a      	ldr	r2, [r3, #4]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	689a      	ldr	r2, [r3, #8]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	681a      	ldr	r2, [r3, #0]
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	f042 0201 	orr.w	r2, r2, #1
 8015fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f000 fb4b 	bl	8016650 <UART_CheckIdleState>
 8015fba:	4603      	mov	r3, r0
}
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b08a      	sub	sp, #40	; 0x28
 8015fc8:	af02      	add	r7, sp, #8
 8015fca:	60f8      	str	r0, [r7, #12]
 8015fcc:	60b9      	str	r1, [r7, #8]
 8015fce:	603b      	str	r3, [r7, #0]
 8015fd0:	4613      	mov	r3, r2
 8015fd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fd8:	2b20      	cmp	r3, #32
 8015fda:	f040 8081 	bne.w	80160e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015fde:	68bb      	ldr	r3, [r7, #8]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d002      	beq.n	8015fea <HAL_UART_Transmit+0x26>
 8015fe4:	88fb      	ldrh	r3, [r7, #6]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d101      	bne.n	8015fee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8015fea:	2301      	movs	r3, #1
 8015fec:	e079      	b.n	80160e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8015ff4:	2b01      	cmp	r3, #1
 8015ff6:	d101      	bne.n	8015ffc <HAL_UART_Transmit+0x38>
 8015ff8:	2302      	movs	r3, #2
 8015ffa:	e072      	b.n	80160e2 <HAL_UART_Transmit+0x11e>
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2201      	movs	r2, #1
 8016000:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	2200      	movs	r2, #0
 8016008:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	2221      	movs	r2, #33	; 0x21
 801600e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8016010:	f7fc ffa2 	bl	8012f58 <HAL_GetTick>
 8016014:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	88fa      	ldrh	r2, [r7, #6]
 801601a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	88fa      	ldrh	r2, [r7, #6]
 8016022:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	689b      	ldr	r3, [r3, #8]
 801602a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801602e:	d108      	bne.n	8016042 <HAL_UART_Transmit+0x7e>
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	691b      	ldr	r3, [r3, #16]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d104      	bne.n	8016042 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8016038:	2300      	movs	r3, #0
 801603a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	61bb      	str	r3, [r7, #24]
 8016040:	e003      	b.n	801604a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8016042:	68bb      	ldr	r3, [r7, #8]
 8016044:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016046:	2300      	movs	r3, #0
 8016048:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	2200      	movs	r2, #0
 801604e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8016052:	e02d      	b.n	80160b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	9300      	str	r3, [sp, #0]
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	2200      	movs	r2, #0
 801605c:	2180      	movs	r1, #128	; 0x80
 801605e:	68f8      	ldr	r0, [r7, #12]
 8016060:	f000 fb3b 	bl	80166da <UART_WaitOnFlagUntilTimeout>
 8016064:	4603      	mov	r3, r0
 8016066:	2b00      	cmp	r3, #0
 8016068:	d001      	beq.n	801606e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 801606a:	2303      	movs	r3, #3
 801606c:	e039      	b.n	80160e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 801606e:	69fb      	ldr	r3, [r7, #28]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d10b      	bne.n	801608c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	881a      	ldrh	r2, [r3, #0]
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016080:	b292      	uxth	r2, r2
 8016082:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8016084:	69bb      	ldr	r3, [r7, #24]
 8016086:	3302      	adds	r3, #2
 8016088:	61bb      	str	r3, [r7, #24]
 801608a:	e008      	b.n	801609e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801608c:	69fb      	ldr	r3, [r7, #28]
 801608e:	781a      	ldrb	r2, [r3, #0]
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	b292      	uxth	r2, r2
 8016096:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8016098:	69fb      	ldr	r3, [r7, #28]
 801609a:	3301      	adds	r3, #1
 801609c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	3b01      	subs	r3, #1
 80160a8:	b29a      	uxth	r2, r3
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d1cb      	bne.n	8016054 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	9300      	str	r3, [sp, #0]
 80160c0:	697b      	ldr	r3, [r7, #20]
 80160c2:	2200      	movs	r2, #0
 80160c4:	2140      	movs	r1, #64	; 0x40
 80160c6:	68f8      	ldr	r0, [r7, #12]
 80160c8:	f000 fb07 	bl	80166da <UART_WaitOnFlagUntilTimeout>
 80160cc:	4603      	mov	r3, r0
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d001      	beq.n	80160d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80160d2:	2303      	movs	r3, #3
 80160d4:	e005      	b.n	80160e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2220      	movs	r2, #32
 80160da:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80160dc:	2300      	movs	r3, #0
 80160de:	e000      	b.n	80160e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80160e0:	2302      	movs	r3, #2
  }
}
 80160e2:	4618      	mov	r0, r3
 80160e4:	3720      	adds	r7, #32
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}
	...

080160ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80160ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80160f0:	b088      	sub	sp, #32
 80160f2:	af00      	add	r7, sp, #0
 80160f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80160f6:	2300      	movs	r3, #0
 80160f8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	689a      	ldr	r2, [r3, #8]
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	691b      	ldr	r3, [r3, #16]
 8016102:	431a      	orrs	r2, r3
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	695b      	ldr	r3, [r3, #20]
 8016108:	431a      	orrs	r2, r3
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	69db      	ldr	r3, [r3, #28]
 801610e:	4313      	orrs	r3, r2
 8016110:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	681a      	ldr	r2, [r3, #0]
 8016118:	4bb0      	ldr	r3, [pc, #704]	; (80163dc <UART_SetConfig+0x2f0>)
 801611a:	4013      	ands	r3, r2
 801611c:	687a      	ldr	r2, [r7, #4]
 801611e:	6812      	ldr	r2, [r2, #0]
 8016120:	69f9      	ldr	r1, [r7, #28]
 8016122:	430b      	orrs	r3, r1
 8016124:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	685b      	ldr	r3, [r3, #4]
 801612c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	68da      	ldr	r2, [r3, #12]
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	430a      	orrs	r2, r1
 801613a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	699b      	ldr	r3, [r3, #24]
 8016140:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	4aa6      	ldr	r2, [pc, #664]	; (80163e0 <UART_SetConfig+0x2f4>)
 8016148:	4293      	cmp	r3, r2
 801614a:	d004      	beq.n	8016156 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	6a1b      	ldr	r3, [r3, #32]
 8016150:	69fa      	ldr	r2, [r7, #28]
 8016152:	4313      	orrs	r3, r2
 8016154:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	689b      	ldr	r3, [r3, #8]
 801615c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	69fa      	ldr	r2, [r7, #28]
 8016166:	430a      	orrs	r2, r1
 8016168:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	4a9d      	ldr	r2, [pc, #628]	; (80163e4 <UART_SetConfig+0x2f8>)
 8016170:	4293      	cmp	r3, r2
 8016172:	d121      	bne.n	80161b8 <UART_SetConfig+0xcc>
 8016174:	4b9c      	ldr	r3, [pc, #624]	; (80163e8 <UART_SetConfig+0x2fc>)
 8016176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801617a:	f003 0303 	and.w	r3, r3, #3
 801617e:	2b03      	cmp	r3, #3
 8016180:	d816      	bhi.n	80161b0 <UART_SetConfig+0xc4>
 8016182:	a201      	add	r2, pc, #4	; (adr r2, 8016188 <UART_SetConfig+0x9c>)
 8016184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016188:	08016199 	.word	0x08016199
 801618c:	080161a5 	.word	0x080161a5
 8016190:	0801619f 	.word	0x0801619f
 8016194:	080161ab 	.word	0x080161ab
 8016198:	2301      	movs	r3, #1
 801619a:	76fb      	strb	r3, [r7, #27]
 801619c:	e072      	b.n	8016284 <UART_SetConfig+0x198>
 801619e:	2302      	movs	r3, #2
 80161a0:	76fb      	strb	r3, [r7, #27]
 80161a2:	e06f      	b.n	8016284 <UART_SetConfig+0x198>
 80161a4:	2304      	movs	r3, #4
 80161a6:	76fb      	strb	r3, [r7, #27]
 80161a8:	e06c      	b.n	8016284 <UART_SetConfig+0x198>
 80161aa:	2308      	movs	r3, #8
 80161ac:	76fb      	strb	r3, [r7, #27]
 80161ae:	e069      	b.n	8016284 <UART_SetConfig+0x198>
 80161b0:	2310      	movs	r3, #16
 80161b2:	76fb      	strb	r3, [r7, #27]
 80161b4:	bf00      	nop
 80161b6:	e065      	b.n	8016284 <UART_SetConfig+0x198>
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	4a8b      	ldr	r2, [pc, #556]	; (80163ec <UART_SetConfig+0x300>)
 80161be:	4293      	cmp	r3, r2
 80161c0:	d134      	bne.n	801622c <UART_SetConfig+0x140>
 80161c2:	4b89      	ldr	r3, [pc, #548]	; (80163e8 <UART_SetConfig+0x2fc>)
 80161c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80161c8:	f003 030c 	and.w	r3, r3, #12
 80161cc:	2b0c      	cmp	r3, #12
 80161ce:	d829      	bhi.n	8016224 <UART_SetConfig+0x138>
 80161d0:	a201      	add	r2, pc, #4	; (adr r2, 80161d8 <UART_SetConfig+0xec>)
 80161d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161d6:	bf00      	nop
 80161d8:	0801620d 	.word	0x0801620d
 80161dc:	08016225 	.word	0x08016225
 80161e0:	08016225 	.word	0x08016225
 80161e4:	08016225 	.word	0x08016225
 80161e8:	08016219 	.word	0x08016219
 80161ec:	08016225 	.word	0x08016225
 80161f0:	08016225 	.word	0x08016225
 80161f4:	08016225 	.word	0x08016225
 80161f8:	08016213 	.word	0x08016213
 80161fc:	08016225 	.word	0x08016225
 8016200:	08016225 	.word	0x08016225
 8016204:	08016225 	.word	0x08016225
 8016208:	0801621f 	.word	0x0801621f
 801620c:	2300      	movs	r3, #0
 801620e:	76fb      	strb	r3, [r7, #27]
 8016210:	e038      	b.n	8016284 <UART_SetConfig+0x198>
 8016212:	2302      	movs	r3, #2
 8016214:	76fb      	strb	r3, [r7, #27]
 8016216:	e035      	b.n	8016284 <UART_SetConfig+0x198>
 8016218:	2304      	movs	r3, #4
 801621a:	76fb      	strb	r3, [r7, #27]
 801621c:	e032      	b.n	8016284 <UART_SetConfig+0x198>
 801621e:	2308      	movs	r3, #8
 8016220:	76fb      	strb	r3, [r7, #27]
 8016222:	e02f      	b.n	8016284 <UART_SetConfig+0x198>
 8016224:	2310      	movs	r3, #16
 8016226:	76fb      	strb	r3, [r7, #27]
 8016228:	bf00      	nop
 801622a:	e02b      	b.n	8016284 <UART_SetConfig+0x198>
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	4a6b      	ldr	r2, [pc, #428]	; (80163e0 <UART_SetConfig+0x2f4>)
 8016232:	4293      	cmp	r3, r2
 8016234:	d124      	bne.n	8016280 <UART_SetConfig+0x194>
 8016236:	4b6c      	ldr	r3, [pc, #432]	; (80163e8 <UART_SetConfig+0x2fc>)
 8016238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801623c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8016240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016244:	d012      	beq.n	801626c <UART_SetConfig+0x180>
 8016246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801624a:	d802      	bhi.n	8016252 <UART_SetConfig+0x166>
 801624c:	2b00      	cmp	r3, #0
 801624e:	d007      	beq.n	8016260 <UART_SetConfig+0x174>
 8016250:	e012      	b.n	8016278 <UART_SetConfig+0x18c>
 8016252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016256:	d006      	beq.n	8016266 <UART_SetConfig+0x17a>
 8016258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801625c:	d009      	beq.n	8016272 <UART_SetConfig+0x186>
 801625e:	e00b      	b.n	8016278 <UART_SetConfig+0x18c>
 8016260:	2300      	movs	r3, #0
 8016262:	76fb      	strb	r3, [r7, #27]
 8016264:	e00e      	b.n	8016284 <UART_SetConfig+0x198>
 8016266:	2302      	movs	r3, #2
 8016268:	76fb      	strb	r3, [r7, #27]
 801626a:	e00b      	b.n	8016284 <UART_SetConfig+0x198>
 801626c:	2304      	movs	r3, #4
 801626e:	76fb      	strb	r3, [r7, #27]
 8016270:	e008      	b.n	8016284 <UART_SetConfig+0x198>
 8016272:	2308      	movs	r3, #8
 8016274:	76fb      	strb	r3, [r7, #27]
 8016276:	e005      	b.n	8016284 <UART_SetConfig+0x198>
 8016278:	2310      	movs	r3, #16
 801627a:	76fb      	strb	r3, [r7, #27]
 801627c:	bf00      	nop
 801627e:	e001      	b.n	8016284 <UART_SetConfig+0x198>
 8016280:	2310      	movs	r3, #16
 8016282:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	4a55      	ldr	r2, [pc, #340]	; (80163e0 <UART_SetConfig+0x2f4>)
 801628a:	4293      	cmp	r3, r2
 801628c:	d174      	bne.n	8016378 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801628e:	7efb      	ldrb	r3, [r7, #27]
 8016290:	2b08      	cmp	r3, #8
 8016292:	d824      	bhi.n	80162de <UART_SetConfig+0x1f2>
 8016294:	a201      	add	r2, pc, #4	; (adr r2, 801629c <UART_SetConfig+0x1b0>)
 8016296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801629a:	bf00      	nop
 801629c:	080162c1 	.word	0x080162c1
 80162a0:	080162df 	.word	0x080162df
 80162a4:	080162c9 	.word	0x080162c9
 80162a8:	080162df 	.word	0x080162df
 80162ac:	080162cf 	.word	0x080162cf
 80162b0:	080162df 	.word	0x080162df
 80162b4:	080162df 	.word	0x080162df
 80162b8:	080162df 	.word	0x080162df
 80162bc:	080162d7 	.word	0x080162d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80162c0:	f7fe fff2 	bl	80152a8 <HAL_RCC_GetPCLK1Freq>
 80162c4:	6178      	str	r0, [r7, #20]
        break;
 80162c6:	e00f      	b.n	80162e8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80162c8:	4b49      	ldr	r3, [pc, #292]	; (80163f0 <UART_SetConfig+0x304>)
 80162ca:	617b      	str	r3, [r7, #20]
        break;
 80162cc:	e00c      	b.n	80162e8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80162ce:	f7fe ff55 	bl	801517c <HAL_RCC_GetSysClockFreq>
 80162d2:	6178      	str	r0, [r7, #20]
        break;
 80162d4:	e008      	b.n	80162e8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80162d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80162da:	617b      	str	r3, [r7, #20]
        break;
 80162dc:	e004      	b.n	80162e8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80162de:	2300      	movs	r3, #0
 80162e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80162e2:	2301      	movs	r3, #1
 80162e4:	76bb      	strb	r3, [r7, #26]
        break;
 80162e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	f000 8100 	beq.w	80164f0 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	685a      	ldr	r2, [r3, #4]
 80162f4:	4613      	mov	r3, r2
 80162f6:	005b      	lsls	r3, r3, #1
 80162f8:	4413      	add	r3, r2
 80162fa:	697a      	ldr	r2, [r7, #20]
 80162fc:	429a      	cmp	r2, r3
 80162fe:	d305      	bcc.n	801630c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	685b      	ldr	r3, [r3, #4]
 8016304:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8016306:	697a      	ldr	r2, [r7, #20]
 8016308:	429a      	cmp	r2, r3
 801630a:	d902      	bls.n	8016312 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 801630c:	2301      	movs	r3, #1
 801630e:	76bb      	strb	r3, [r7, #26]
 8016310:	e0ee      	b.n	80164f0 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8016312:	697b      	ldr	r3, [r7, #20]
 8016314:	4619      	mov	r1, r3
 8016316:	f04f 0200 	mov.w	r2, #0
 801631a:	f04f 0300 	mov.w	r3, #0
 801631e:	f04f 0400 	mov.w	r4, #0
 8016322:	0214      	lsls	r4, r2, #8
 8016324:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8016328:	020b      	lsls	r3, r1, #8
 801632a:	687a      	ldr	r2, [r7, #4]
 801632c:	6852      	ldr	r2, [r2, #4]
 801632e:	0852      	lsrs	r2, r2, #1
 8016330:	4611      	mov	r1, r2
 8016332:	f04f 0200 	mov.w	r2, #0
 8016336:	eb13 0b01 	adds.w	fp, r3, r1
 801633a:	eb44 0c02 	adc.w	ip, r4, r2
 801633e:	4658      	mov	r0, fp
 8016340:	4661      	mov	r1, ip
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	685b      	ldr	r3, [r3, #4]
 8016346:	f04f 0400 	mov.w	r4, #0
 801634a:	461a      	mov	r2, r3
 801634c:	4623      	mov	r3, r4
 801634e:	f7ea fc8b 	bl	8000c68 <__aeabi_uldivmod>
 8016352:	4603      	mov	r3, r0
 8016354:	460c      	mov	r4, r1
 8016356:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016358:	693b      	ldr	r3, [r7, #16]
 801635a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801635e:	d308      	bcc.n	8016372 <UART_SetConfig+0x286>
 8016360:	693b      	ldr	r3, [r7, #16]
 8016362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016366:	d204      	bcs.n	8016372 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	693a      	ldr	r2, [r7, #16]
 801636e:	60da      	str	r2, [r3, #12]
 8016370:	e0be      	b.n	80164f0 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8016372:	2301      	movs	r3, #1
 8016374:	76bb      	strb	r3, [r7, #26]
 8016376:	e0bb      	b.n	80164f0 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	69db      	ldr	r3, [r3, #28]
 801637c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016380:	d169      	bne.n	8016456 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8016382:	7efb      	ldrb	r3, [r7, #27]
 8016384:	2b08      	cmp	r3, #8
 8016386:	d835      	bhi.n	80163f4 <UART_SetConfig+0x308>
 8016388:	a201      	add	r2, pc, #4	; (adr r2, 8016390 <UART_SetConfig+0x2a4>)
 801638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801638e:	bf00      	nop
 8016390:	080163b5 	.word	0x080163b5
 8016394:	080163bd 	.word	0x080163bd
 8016398:	080163c5 	.word	0x080163c5
 801639c:	080163f5 	.word	0x080163f5
 80163a0:	080163cb 	.word	0x080163cb
 80163a4:	080163f5 	.word	0x080163f5
 80163a8:	080163f5 	.word	0x080163f5
 80163ac:	080163f5 	.word	0x080163f5
 80163b0:	080163d3 	.word	0x080163d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80163b4:	f7fe ff78 	bl	80152a8 <HAL_RCC_GetPCLK1Freq>
 80163b8:	6178      	str	r0, [r7, #20]
        break;
 80163ba:	e020      	b.n	80163fe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80163bc:	f7fe ff8a 	bl	80152d4 <HAL_RCC_GetPCLK2Freq>
 80163c0:	6178      	str	r0, [r7, #20]
        break;
 80163c2:	e01c      	b.n	80163fe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80163c4:	4b0a      	ldr	r3, [pc, #40]	; (80163f0 <UART_SetConfig+0x304>)
 80163c6:	617b      	str	r3, [r7, #20]
        break;
 80163c8:	e019      	b.n	80163fe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80163ca:	f7fe fed7 	bl	801517c <HAL_RCC_GetSysClockFreq>
 80163ce:	6178      	str	r0, [r7, #20]
        break;
 80163d0:	e015      	b.n	80163fe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80163d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80163d6:	617b      	str	r3, [r7, #20]
        break;
 80163d8:	e011      	b.n	80163fe <UART_SetConfig+0x312>
 80163da:	bf00      	nop
 80163dc:	efff69f3 	.word	0xefff69f3
 80163e0:	40008000 	.word	0x40008000
 80163e4:	40013800 	.word	0x40013800
 80163e8:	40021000 	.word	0x40021000
 80163ec:	40004400 	.word	0x40004400
 80163f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80163f4:	2300      	movs	r3, #0
 80163f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80163f8:	2301      	movs	r3, #1
 80163fa:	76bb      	strb	r3, [r7, #26]
        break;
 80163fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80163fe:	697b      	ldr	r3, [r7, #20]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d075      	beq.n	80164f0 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8016404:	697b      	ldr	r3, [r7, #20]
 8016406:	005a      	lsls	r2, r3, #1
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	685b      	ldr	r3, [r3, #4]
 801640c:	085b      	lsrs	r3, r3, #1
 801640e:	441a      	add	r2, r3
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	fbb2 f3f3 	udiv	r3, r2, r3
 8016418:	b29b      	uxth	r3, r3
 801641a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801641c:	693b      	ldr	r3, [r7, #16]
 801641e:	2b0f      	cmp	r3, #15
 8016420:	d916      	bls.n	8016450 <UART_SetConfig+0x364>
 8016422:	693b      	ldr	r3, [r7, #16]
 8016424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016428:	d212      	bcs.n	8016450 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	b29b      	uxth	r3, r3
 801642e:	f023 030f 	bic.w	r3, r3, #15
 8016432:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	085b      	lsrs	r3, r3, #1
 8016438:	b29b      	uxth	r3, r3
 801643a:	f003 0307 	and.w	r3, r3, #7
 801643e:	b29a      	uxth	r2, r3
 8016440:	89fb      	ldrh	r3, [r7, #14]
 8016442:	4313      	orrs	r3, r2
 8016444:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	89fa      	ldrh	r2, [r7, #14]
 801644c:	60da      	str	r2, [r3, #12]
 801644e:	e04f      	b.n	80164f0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8016450:	2301      	movs	r3, #1
 8016452:	76bb      	strb	r3, [r7, #26]
 8016454:	e04c      	b.n	80164f0 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016456:	7efb      	ldrb	r3, [r7, #27]
 8016458:	2b08      	cmp	r3, #8
 801645a:	d828      	bhi.n	80164ae <UART_SetConfig+0x3c2>
 801645c:	a201      	add	r2, pc, #4	; (adr r2, 8016464 <UART_SetConfig+0x378>)
 801645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016462:	bf00      	nop
 8016464:	08016489 	.word	0x08016489
 8016468:	08016491 	.word	0x08016491
 801646c:	08016499 	.word	0x08016499
 8016470:	080164af 	.word	0x080164af
 8016474:	0801649f 	.word	0x0801649f
 8016478:	080164af 	.word	0x080164af
 801647c:	080164af 	.word	0x080164af
 8016480:	080164af 	.word	0x080164af
 8016484:	080164a7 	.word	0x080164a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016488:	f7fe ff0e 	bl	80152a8 <HAL_RCC_GetPCLK1Freq>
 801648c:	6178      	str	r0, [r7, #20]
        break;
 801648e:	e013      	b.n	80164b8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016490:	f7fe ff20 	bl	80152d4 <HAL_RCC_GetPCLK2Freq>
 8016494:	6178      	str	r0, [r7, #20]
        break;
 8016496:	e00f      	b.n	80164b8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016498:	4b1b      	ldr	r3, [pc, #108]	; (8016508 <UART_SetConfig+0x41c>)
 801649a:	617b      	str	r3, [r7, #20]
        break;
 801649c:	e00c      	b.n	80164b8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801649e:	f7fe fe6d 	bl	801517c <HAL_RCC_GetSysClockFreq>
 80164a2:	6178      	str	r0, [r7, #20]
        break;
 80164a4:	e008      	b.n	80164b8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80164a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80164aa:	617b      	str	r3, [r7, #20]
        break;
 80164ac:	e004      	b.n	80164b8 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 80164ae:	2300      	movs	r3, #0
 80164b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80164b2:	2301      	movs	r3, #1
 80164b4:	76bb      	strb	r3, [r7, #26]
        break;
 80164b6:	bf00      	nop
    }

    if (pclk != 0U)
 80164b8:	697b      	ldr	r3, [r7, #20]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d018      	beq.n	80164f0 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	685b      	ldr	r3, [r3, #4]
 80164c2:	085a      	lsrs	r2, r3, #1
 80164c4:	697b      	ldr	r3, [r7, #20]
 80164c6:	441a      	add	r2, r3
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	685b      	ldr	r3, [r3, #4]
 80164cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80164d0:	b29b      	uxth	r3, r3
 80164d2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80164d4:	693b      	ldr	r3, [r7, #16]
 80164d6:	2b0f      	cmp	r3, #15
 80164d8:	d908      	bls.n	80164ec <UART_SetConfig+0x400>
 80164da:	693b      	ldr	r3, [r7, #16]
 80164dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80164e0:	d204      	bcs.n	80164ec <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	693a      	ldr	r2, [r7, #16]
 80164e8:	60da      	str	r2, [r3, #12]
 80164ea:	e001      	b.n	80164f0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80164ec:	2301      	movs	r3, #1
 80164ee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2200      	movs	r2, #0
 80164f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2200      	movs	r2, #0
 80164fa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80164fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3720      	adds	r7, #32
 8016502:	46bd      	mov	sp, r7
 8016504:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8016508:	00f42400 	.word	0x00f42400

0801650c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801650c:	b480      	push	{r7}
 801650e:	b083      	sub	sp, #12
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016518:	f003 0301 	and.w	r3, r3, #1
 801651c:	2b00      	cmp	r3, #0
 801651e:	d00a      	beq.n	8016536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	685b      	ldr	r3, [r3, #4]
 8016526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	430a      	orrs	r2, r1
 8016534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801653a:	f003 0302 	and.w	r3, r3, #2
 801653e:	2b00      	cmp	r3, #0
 8016540:	d00a      	beq.n	8016558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	685b      	ldr	r3, [r3, #4]
 8016548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	430a      	orrs	r2, r1
 8016556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801655c:	f003 0304 	and.w	r3, r3, #4
 8016560:	2b00      	cmp	r3, #0
 8016562:	d00a      	beq.n	801657a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	685b      	ldr	r3, [r3, #4]
 801656a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	430a      	orrs	r2, r1
 8016578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801657e:	f003 0308 	and.w	r3, r3, #8
 8016582:	2b00      	cmp	r3, #0
 8016584:	d00a      	beq.n	801659c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	685b      	ldr	r3, [r3, #4]
 801658c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	430a      	orrs	r2, r1
 801659a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165a0:	f003 0310 	and.w	r3, r3, #16
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d00a      	beq.n	80165be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	689b      	ldr	r3, [r3, #8]
 80165ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	430a      	orrs	r2, r1
 80165bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165c2:	f003 0320 	and.w	r3, r3, #32
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d00a      	beq.n	80165e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	689b      	ldr	r3, [r3, #8]
 80165d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	430a      	orrs	r2, r1
 80165de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d01a      	beq.n	8016622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	685b      	ldr	r3, [r3, #4]
 80165f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	430a      	orrs	r2, r1
 8016600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801660a:	d10a      	bne.n	8016622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	685b      	ldr	r3, [r3, #4]
 8016612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	430a      	orrs	r2, r1
 8016620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801662a:	2b00      	cmp	r3, #0
 801662c:	d00a      	beq.n	8016644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	685b      	ldr	r3, [r3, #4]
 8016634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	430a      	orrs	r2, r1
 8016642:	605a      	str	r2, [r3, #4]
  }
}
 8016644:	bf00      	nop
 8016646:	370c      	adds	r7, #12
 8016648:	46bd      	mov	sp, r7
 801664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664e:	4770      	bx	lr

08016650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b086      	sub	sp, #24
 8016654:	af02      	add	r7, sp, #8
 8016656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2200      	movs	r2, #0
 801665c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801665e:	f7fc fc7b 	bl	8012f58 <HAL_GetTick>
 8016662:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	f003 0308 	and.w	r3, r3, #8
 801666e:	2b08      	cmp	r3, #8
 8016670:	d10e      	bne.n	8016690 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016676:	9300      	str	r3, [sp, #0]
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	2200      	movs	r2, #0
 801667c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016680:	6878      	ldr	r0, [r7, #4]
 8016682:	f000 f82a 	bl	80166da <UART_WaitOnFlagUntilTimeout>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d001      	beq.n	8016690 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801668c:	2303      	movs	r3, #3
 801668e:	e020      	b.n	80166d2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	f003 0304 	and.w	r3, r3, #4
 801669a:	2b04      	cmp	r3, #4
 801669c:	d10e      	bne.n	80166bc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801669e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80166a2:	9300      	str	r3, [sp, #0]
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	2200      	movs	r2, #0
 80166a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f000 f814 	bl	80166da <UART_WaitOnFlagUntilTimeout>
 80166b2:	4603      	mov	r3, r0
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d001      	beq.n	80166bc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80166b8:	2303      	movs	r3, #3
 80166ba:	e00a      	b.n	80166d2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2220      	movs	r2, #32
 80166c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2220      	movs	r2, #32
 80166c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2200      	movs	r2, #0
 80166cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80166d0:	2300      	movs	r3, #0
}
 80166d2:	4618      	mov	r0, r3
 80166d4:	3710      	adds	r7, #16
 80166d6:	46bd      	mov	sp, r7
 80166d8:	bd80      	pop	{r7, pc}

080166da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80166da:	b580      	push	{r7, lr}
 80166dc:	b084      	sub	sp, #16
 80166de:	af00      	add	r7, sp, #0
 80166e0:	60f8      	str	r0, [r7, #12]
 80166e2:	60b9      	str	r1, [r7, #8]
 80166e4:	603b      	str	r3, [r7, #0]
 80166e6:	4613      	mov	r3, r2
 80166e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80166ea:	e05d      	b.n	80167a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80166ec:	69bb      	ldr	r3, [r7, #24]
 80166ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166f2:	d059      	beq.n	80167a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80166f4:	f7fc fc30 	bl	8012f58 <HAL_GetTick>
 80166f8:	4602      	mov	r2, r0
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	1ad3      	subs	r3, r2, r3
 80166fe:	69ba      	ldr	r2, [r7, #24]
 8016700:	429a      	cmp	r2, r3
 8016702:	d302      	bcc.n	801670a <UART_WaitOnFlagUntilTimeout+0x30>
 8016704:	69bb      	ldr	r3, [r7, #24]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d11b      	bne.n	8016742 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	681a      	ldr	r2, [r3, #0]
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8016718:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	689a      	ldr	r2, [r3, #8]
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	f022 0201 	bic.w	r2, r2, #1
 8016728:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	2220      	movs	r2, #32
 801672e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	2220      	movs	r2, #32
 8016734:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	2200      	movs	r2, #0
 801673a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 801673e:	2303      	movs	r3, #3
 8016740:	e042      	b.n	80167c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	f003 0304 	and.w	r3, r3, #4
 801674c:	2b00      	cmp	r3, #0
 801674e:	d02b      	beq.n	80167a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	69db      	ldr	r3, [r3, #28]
 8016756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801675a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801675e:	d123      	bne.n	80167a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016768:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	681a      	ldr	r2, [r3, #0]
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8016778:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	689a      	ldr	r2, [r3, #8]
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	f022 0201 	bic.w	r2, r2, #1
 8016788:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	2220      	movs	r2, #32
 801678e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	2220      	movs	r2, #32
 8016794:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	2220      	movs	r2, #32
 801679a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	2200      	movs	r2, #0
 80167a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80167a4:	2303      	movs	r3, #3
 80167a6:	e00f      	b.n	80167c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	69da      	ldr	r2, [r3, #28]
 80167ae:	68bb      	ldr	r3, [r7, #8]
 80167b0:	4013      	ands	r3, r2
 80167b2:	68ba      	ldr	r2, [r7, #8]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	bf0c      	ite	eq
 80167b8:	2301      	moveq	r3, #1
 80167ba:	2300      	movne	r3, #0
 80167bc:	b2db      	uxtb	r3, r3
 80167be:	461a      	mov	r2, r3
 80167c0:	79fb      	ldrb	r3, [r7, #7]
 80167c2:	429a      	cmp	r2, r3
 80167c4:	d092      	beq.n	80166ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80167c6:	2300      	movs	r3, #0
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	3710      	adds	r7, #16
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <_ZdaPv>:
 80167d0:	f000 b830 	b.w	8016834 <_ZdlPv>

080167d4 <__cxa_pure_virtual>:
 80167d4:	b508      	push	{r3, lr}
 80167d6:	f000 f83b 	bl	8016850 <_ZSt9terminatev>

080167da <_Znaj>:
 80167da:	f000 b802 	b.w	80167e2 <_Znwj>

080167de <_ZdlPvj>:
 80167de:	f000 b829 	b.w	8016834 <_ZdlPv>

080167e2 <_Znwj>:
 80167e2:	b510      	push	{r4, lr}
 80167e4:	2800      	cmp	r0, #0
 80167e6:	bf14      	ite	ne
 80167e8:	4604      	movne	r4, r0
 80167ea:	2401      	moveq	r4, #1
 80167ec:	4620      	mov	r0, r4
 80167ee:	f002 fbd9 	bl	8018fa4 <malloc>
 80167f2:	b930      	cbnz	r0, 8016802 <_Znwj+0x20>
 80167f4:	f000 f816 	bl	8016824 <_ZSt15get_new_handlerv>
 80167f8:	b908      	cbnz	r0, 80167fe <_Znwj+0x1c>
 80167fa:	f002 fa8c 	bl	8018d16 <abort>
 80167fe:	4780      	blx	r0
 8016800:	e7f4      	b.n	80167ec <_Znwj+0xa>
 8016802:	bd10      	pop	{r4, pc}

08016804 <__cxa_guard_acquire>:
 8016804:	6803      	ldr	r3, [r0, #0]
 8016806:	07db      	lsls	r3, r3, #31
 8016808:	d406      	bmi.n	8016818 <__cxa_guard_acquire+0x14>
 801680a:	7843      	ldrb	r3, [r0, #1]
 801680c:	b103      	cbz	r3, 8016810 <__cxa_guard_acquire+0xc>
 801680e:	deff      	udf	#255	; 0xff
 8016810:	2301      	movs	r3, #1
 8016812:	7043      	strb	r3, [r0, #1]
 8016814:	4618      	mov	r0, r3
 8016816:	4770      	bx	lr
 8016818:	2000      	movs	r0, #0
 801681a:	4770      	bx	lr

0801681c <__cxa_guard_release>:
 801681c:	2301      	movs	r3, #1
 801681e:	6003      	str	r3, [r0, #0]
 8016820:	4770      	bx	lr
	...

08016824 <_ZSt15get_new_handlerv>:
 8016824:	4b02      	ldr	r3, [pc, #8]	; (8016830 <_ZSt15get_new_handlerv+0xc>)
 8016826:	6818      	ldr	r0, [r3, #0]
 8016828:	f3bf 8f5b 	dmb	ish
 801682c:	4770      	bx	lr
 801682e:	bf00      	nop
 8016830:	20008548 	.word	0x20008548

08016834 <_ZdlPv>:
 8016834:	f002 bbbe 	b.w	8018fb4 <free>

08016838 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8016838:	b508      	push	{r3, lr}
 801683a:	4780      	blx	r0
 801683c:	f002 fa6b 	bl	8018d16 <abort>

08016840 <_ZSt13get_terminatev>:
 8016840:	4b02      	ldr	r3, [pc, #8]	; (801684c <_ZSt13get_terminatev+0xc>)
 8016842:	6818      	ldr	r0, [r3, #0]
 8016844:	f3bf 8f5b 	dmb	ish
 8016848:	4770      	bx	lr
 801684a:	bf00      	nop
 801684c:	20000010 	.word	0x20000010

08016850 <_ZSt9terminatev>:
 8016850:	b508      	push	{r3, lr}
 8016852:	f7ff fff5 	bl	8016840 <_ZSt13get_terminatev>
 8016856:	f7ff ffef 	bl	8016838 <_ZN10__cxxabiv111__terminateEPFvvE>
 801685a:	0000      	movs	r0, r0
 801685c:	0000      	movs	r0, r0
	...

08016860 <cos>:
 8016860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016862:	ec51 0b10 	vmov	r0, r1, d0
 8016866:	4a1e      	ldr	r2, [pc, #120]	; (80168e0 <cos+0x80>)
 8016868:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801686c:	4293      	cmp	r3, r2
 801686e:	dc06      	bgt.n	801687e <cos+0x1e>
 8016870:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80168d8 <cos+0x78>
 8016874:	f001 fc1c 	bl	80180b0 <__kernel_cos>
 8016878:	ec51 0b10 	vmov	r0, r1, d0
 801687c:	e007      	b.n	801688e <cos+0x2e>
 801687e:	4a19      	ldr	r2, [pc, #100]	; (80168e4 <cos+0x84>)
 8016880:	4293      	cmp	r3, r2
 8016882:	dd09      	ble.n	8016898 <cos+0x38>
 8016884:	ee10 2a10 	vmov	r2, s0
 8016888:	460b      	mov	r3, r1
 801688a:	f7e9 fd0d 	bl	80002a8 <__aeabi_dsub>
 801688e:	ec41 0b10 	vmov	d0, r0, r1
 8016892:	b005      	add	sp, #20
 8016894:	f85d fb04 	ldr.w	pc, [sp], #4
 8016898:	4668      	mov	r0, sp
 801689a:	f000 fdcd 	bl	8017438 <__ieee754_rem_pio2>
 801689e:	f000 0003 	and.w	r0, r0, #3
 80168a2:	2801      	cmp	r0, #1
 80168a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80168a8:	ed9d 0b00 	vldr	d0, [sp]
 80168ac:	d007      	beq.n	80168be <cos+0x5e>
 80168ae:	2802      	cmp	r0, #2
 80168b0:	d00e      	beq.n	80168d0 <cos+0x70>
 80168b2:	2800      	cmp	r0, #0
 80168b4:	d0de      	beq.n	8016874 <cos+0x14>
 80168b6:	2001      	movs	r0, #1
 80168b8:	f002 f802 	bl	80188c0 <__kernel_sin>
 80168bc:	e7dc      	b.n	8016878 <cos+0x18>
 80168be:	f001 ffff 	bl	80188c0 <__kernel_sin>
 80168c2:	ec53 2b10 	vmov	r2, r3, d0
 80168c6:	ee10 0a10 	vmov	r0, s0
 80168ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80168ce:	e7de      	b.n	801688e <cos+0x2e>
 80168d0:	f001 fbee 	bl	80180b0 <__kernel_cos>
 80168d4:	e7f5      	b.n	80168c2 <cos+0x62>
 80168d6:	bf00      	nop
	...
 80168e0:	3fe921fb 	.word	0x3fe921fb
 80168e4:	7fefffff 	.word	0x7fefffff

080168e8 <floor>:
 80168e8:	ec51 0b10 	vmov	r0, r1, d0
 80168ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80168f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80168f8:	2e13      	cmp	r6, #19
 80168fa:	460c      	mov	r4, r1
 80168fc:	ee10 5a10 	vmov	r5, s0
 8016900:	4680      	mov	r8, r0
 8016902:	dc34      	bgt.n	801696e <floor+0x86>
 8016904:	2e00      	cmp	r6, #0
 8016906:	da16      	bge.n	8016936 <floor+0x4e>
 8016908:	a335      	add	r3, pc, #212	; (adr r3, 80169e0 <floor+0xf8>)
 801690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690e:	f7e9 fccd 	bl	80002ac <__adddf3>
 8016912:	2200      	movs	r2, #0
 8016914:	2300      	movs	r3, #0
 8016916:	f7ea f90f 	bl	8000b38 <__aeabi_dcmpgt>
 801691a:	b148      	cbz	r0, 8016930 <floor+0x48>
 801691c:	2c00      	cmp	r4, #0
 801691e:	da59      	bge.n	80169d4 <floor+0xec>
 8016920:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016924:	4a30      	ldr	r2, [pc, #192]	; (80169e8 <floor+0x100>)
 8016926:	432b      	orrs	r3, r5
 8016928:	2500      	movs	r5, #0
 801692a:	42ab      	cmp	r3, r5
 801692c:	bf18      	it	ne
 801692e:	4614      	movne	r4, r2
 8016930:	4621      	mov	r1, r4
 8016932:	4628      	mov	r0, r5
 8016934:	e025      	b.n	8016982 <floor+0x9a>
 8016936:	4f2d      	ldr	r7, [pc, #180]	; (80169ec <floor+0x104>)
 8016938:	4137      	asrs	r7, r6
 801693a:	ea01 0307 	and.w	r3, r1, r7
 801693e:	4303      	orrs	r3, r0
 8016940:	d01f      	beq.n	8016982 <floor+0x9a>
 8016942:	a327      	add	r3, pc, #156	; (adr r3, 80169e0 <floor+0xf8>)
 8016944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016948:	f7e9 fcb0 	bl	80002ac <__adddf3>
 801694c:	2200      	movs	r2, #0
 801694e:	2300      	movs	r3, #0
 8016950:	f7ea f8f2 	bl	8000b38 <__aeabi_dcmpgt>
 8016954:	2800      	cmp	r0, #0
 8016956:	d0eb      	beq.n	8016930 <floor+0x48>
 8016958:	2c00      	cmp	r4, #0
 801695a:	bfbe      	ittt	lt
 801695c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016960:	fa43 f606 	asrlt.w	r6, r3, r6
 8016964:	19a4      	addlt	r4, r4, r6
 8016966:	ea24 0407 	bic.w	r4, r4, r7
 801696a:	2500      	movs	r5, #0
 801696c:	e7e0      	b.n	8016930 <floor+0x48>
 801696e:	2e33      	cmp	r6, #51	; 0x33
 8016970:	dd0b      	ble.n	801698a <floor+0xa2>
 8016972:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016976:	d104      	bne.n	8016982 <floor+0x9a>
 8016978:	ee10 2a10 	vmov	r2, s0
 801697c:	460b      	mov	r3, r1
 801697e:	f7e9 fc95 	bl	80002ac <__adddf3>
 8016982:	ec41 0b10 	vmov	d0, r0, r1
 8016986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801698a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801698e:	f04f 33ff 	mov.w	r3, #4294967295
 8016992:	fa23 f707 	lsr.w	r7, r3, r7
 8016996:	4207      	tst	r7, r0
 8016998:	d0f3      	beq.n	8016982 <floor+0x9a>
 801699a:	a311      	add	r3, pc, #68	; (adr r3, 80169e0 <floor+0xf8>)
 801699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a0:	f7e9 fc84 	bl	80002ac <__adddf3>
 80169a4:	2200      	movs	r2, #0
 80169a6:	2300      	movs	r3, #0
 80169a8:	f7ea f8c6 	bl	8000b38 <__aeabi_dcmpgt>
 80169ac:	2800      	cmp	r0, #0
 80169ae:	d0bf      	beq.n	8016930 <floor+0x48>
 80169b0:	2c00      	cmp	r4, #0
 80169b2:	da02      	bge.n	80169ba <floor+0xd2>
 80169b4:	2e14      	cmp	r6, #20
 80169b6:	d103      	bne.n	80169c0 <floor+0xd8>
 80169b8:	3401      	adds	r4, #1
 80169ba:	ea25 0507 	bic.w	r5, r5, r7
 80169be:	e7b7      	b.n	8016930 <floor+0x48>
 80169c0:	2301      	movs	r3, #1
 80169c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80169c6:	fa03 f606 	lsl.w	r6, r3, r6
 80169ca:	4435      	add	r5, r6
 80169cc:	4545      	cmp	r5, r8
 80169ce:	bf38      	it	cc
 80169d0:	18e4      	addcc	r4, r4, r3
 80169d2:	e7f2      	b.n	80169ba <floor+0xd2>
 80169d4:	2500      	movs	r5, #0
 80169d6:	462c      	mov	r4, r5
 80169d8:	e7aa      	b.n	8016930 <floor+0x48>
 80169da:	bf00      	nop
 80169dc:	f3af 8000 	nop.w
 80169e0:	8800759c 	.word	0x8800759c
 80169e4:	7e37e43c 	.word	0x7e37e43c
 80169e8:	bff00000 	.word	0xbff00000
 80169ec:	000fffff 	.word	0x000fffff

080169f0 <frexp>:
 80169f0:	b570      	push	{r4, r5, r6, lr}
 80169f2:	2100      	movs	r1, #0
 80169f4:	ec55 4b10 	vmov	r4, r5, d0
 80169f8:	6001      	str	r1, [r0, #0]
 80169fa:	4916      	ldr	r1, [pc, #88]	; (8016a54 <frexp+0x64>)
 80169fc:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016a00:	428b      	cmp	r3, r1
 8016a02:	4606      	mov	r6, r0
 8016a04:	462a      	mov	r2, r5
 8016a06:	dc22      	bgt.n	8016a4e <frexp+0x5e>
 8016a08:	ee10 1a10 	vmov	r1, s0
 8016a0c:	4319      	orrs	r1, r3
 8016a0e:	d01e      	beq.n	8016a4e <frexp+0x5e>
 8016a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016a14:	da0d      	bge.n	8016a32 <frexp+0x42>
 8016a16:	2200      	movs	r2, #0
 8016a18:	4b0f      	ldr	r3, [pc, #60]	; (8016a58 <frexp+0x68>)
 8016a1a:	ee10 0a10 	vmov	r0, s0
 8016a1e:	4629      	mov	r1, r5
 8016a20:	f7e9 fdfa 	bl	8000618 <__aeabi_dmul>
 8016a24:	460a      	mov	r2, r1
 8016a26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016a2a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8016a2e:	4604      	mov	r4, r0
 8016a30:	6031      	str	r1, [r6, #0]
 8016a32:	6831      	ldr	r1, [r6, #0]
 8016a34:	151b      	asrs	r3, r3, #20
 8016a36:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016a3a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016a3e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8016a42:	440b      	add	r3, r1
 8016a44:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8016a48:	6033      	str	r3, [r6, #0]
 8016a4a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8016a4e:	ec45 4b10 	vmov	d0, r4, r5
 8016a52:	bd70      	pop	{r4, r5, r6, pc}
 8016a54:	7fefffff 	.word	0x7fefffff
 8016a58:	43500000 	.word	0x43500000
 8016a5c:	00000000 	.word	0x00000000

08016a60 <log1p>:
 8016a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a64:	4bcc      	ldr	r3, [pc, #816]	; (8016d98 <log1p+0x338>)
 8016a66:	ec5b ab10 	vmov	sl, fp, d0
 8016a6a:	459b      	cmp	fp, r3
 8016a6c:	b085      	sub	sp, #20
 8016a6e:	465f      	mov	r7, fp
 8016a70:	f300 81cd 	bgt.w	8016e0e <log1p+0x3ae>
 8016a74:	4bc9      	ldr	r3, [pc, #804]	; (8016d9c <log1p+0x33c>)
 8016a76:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 8016a7a:	429c      	cmp	r4, r3
 8016a7c:	dd1d      	ble.n	8016aba <log1p+0x5a>
 8016a7e:	2200      	movs	r2, #0
 8016a80:	4bc7      	ldr	r3, [pc, #796]	; (8016da0 <log1p+0x340>)
 8016a82:	ee10 0a10 	vmov	r0, s0
 8016a86:	4659      	mov	r1, fp
 8016a88:	f7ea f82e 	bl	8000ae8 <__aeabi_dcmpeq>
 8016a8c:	b160      	cbz	r0, 8016aa8 <log1p+0x48>
 8016a8e:	49c5      	ldr	r1, [pc, #788]	; (8016da4 <log1p+0x344>)
 8016a90:	2200      	movs	r2, #0
 8016a92:	2300      	movs	r3, #0
 8016a94:	2000      	movs	r0, #0
 8016a96:	f7e9 fee9 	bl	800086c <__aeabi_ddiv>
 8016a9a:	4682      	mov	sl, r0
 8016a9c:	468b      	mov	fp, r1
 8016a9e:	ec4b ab10 	vmov	d0, sl, fp
 8016aa2:	b005      	add	sp, #20
 8016aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aa8:	4652      	mov	r2, sl
 8016aaa:	465b      	mov	r3, fp
 8016aac:	4650      	mov	r0, sl
 8016aae:	4639      	mov	r1, r7
 8016ab0:	f7e9 fbfa 	bl	80002a8 <__aeabi_dsub>
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	460b      	mov	r3, r1
 8016ab8:	e7ed      	b.n	8016a96 <log1p+0x36>
 8016aba:	4bbb      	ldr	r3, [pc, #748]	; (8016da8 <log1p+0x348>)
 8016abc:	429c      	cmp	r4, r3
 8016abe:	dc1b      	bgt.n	8016af8 <log1p+0x98>
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	4bba      	ldr	r3, [pc, #744]	; (8016dac <log1p+0x34c>)
 8016ac4:	ee10 0a10 	vmov	r0, s0
 8016ac8:	4659      	mov	r1, fp
 8016aca:	f7e9 fbef 	bl	80002ac <__adddf3>
 8016ace:	2200      	movs	r2, #0
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	f7ea f831 	bl	8000b38 <__aeabi_dcmpgt>
 8016ad6:	b110      	cbz	r0, 8016ade <log1p+0x7e>
 8016ad8:	4bb5      	ldr	r3, [pc, #724]	; (8016db0 <log1p+0x350>)
 8016ada:	429c      	cmp	r4, r3
 8016adc:	dddf      	ble.n	8016a9e <log1p+0x3e>
 8016ade:	4652      	mov	r2, sl
 8016ae0:	465b      	mov	r3, fp
 8016ae2:	4650      	mov	r0, sl
 8016ae4:	4659      	mov	r1, fp
 8016ae6:	f7e9 fd97 	bl	8000618 <__aeabi_dmul>
 8016aea:	2200      	movs	r2, #0
 8016aec:	4bb1      	ldr	r3, [pc, #708]	; (8016db4 <log1p+0x354>)
 8016aee:	f7e9 fd93 	bl	8000618 <__aeabi_dmul>
 8016af2:	4602      	mov	r2, r0
 8016af4:	460b      	mov	r3, r1
 8016af6:	e09a      	b.n	8016c2e <log1p+0x1ce>
 8016af8:	4baf      	ldr	r3, [pc, #700]	; (8016db8 <log1p+0x358>)
 8016afa:	441f      	add	r7, r3
 8016afc:	429f      	cmp	r7, r3
 8016afe:	d87d      	bhi.n	8016bfc <log1p+0x19c>
 8016b00:	2200      	movs	r2, #0
 8016b02:	4bae      	ldr	r3, [pc, #696]	; (8016dbc <log1p+0x35c>)
 8016b04:	4650      	mov	r0, sl
 8016b06:	4659      	mov	r1, fp
 8016b08:	f7e9 fbd0 	bl	80002ac <__adddf3>
 8016b0c:	150e      	asrs	r6, r1, #20
 8016b0e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8016b12:	2e00      	cmp	r6, #0
 8016b14:	4604      	mov	r4, r0
 8016b16:	460d      	mov	r5, r1
 8016b18:	460f      	mov	r7, r1
 8016b1a:	dd66      	ble.n	8016bea <log1p+0x18a>
 8016b1c:	4652      	mov	r2, sl
 8016b1e:	465b      	mov	r3, fp
 8016b20:	f7e9 fbc2 	bl	80002a8 <__aeabi_dsub>
 8016b24:	460b      	mov	r3, r1
 8016b26:	49a5      	ldr	r1, [pc, #660]	; (8016dbc <log1p+0x35c>)
 8016b28:	4602      	mov	r2, r0
 8016b2a:	2000      	movs	r0, #0
 8016b2c:	f7e9 fbbc 	bl	80002a8 <__aeabi_dsub>
 8016b30:	4622      	mov	r2, r4
 8016b32:	462b      	mov	r3, r5
 8016b34:	f7e9 fe9a 	bl	800086c <__aeabi_ddiv>
 8016b38:	e9cd 0100 	strd	r0, r1, [sp]
 8016b3c:	4ba0      	ldr	r3, [pc, #640]	; (8016dc0 <log1p+0x360>)
 8016b3e:	f3c7 0713 	ubfx	r7, r7, #0, #20
 8016b42:	429f      	cmp	r7, r3
 8016b44:	bfcd      	iteet	gt
 8016b46:	f047 557f 	orrgt.w	r5, r7, #1069547520	; 0x3fc00000
 8016b4a:	f047 557f 	orrle.w	r5, r7, #1069547520	; 0x3fc00000
 8016b4e:	f445 1540 	orrle.w	r5, r5, #3145728	; 0x300000
 8016b52:	f445 1500 	orrgt.w	r5, r5, #2097152	; 0x200000
 8016b56:	bfc8      	it	gt
 8016b58:	f5c7 1780 	rsbgt	r7, r7, #1048576	; 0x100000
 8016b5c:	f04f 0200 	mov.w	r2, #0
 8016b60:	4b96      	ldr	r3, [pc, #600]	; (8016dbc <log1p+0x35c>)
 8016b62:	4620      	mov	r0, r4
 8016b64:	4629      	mov	r1, r5
 8016b66:	bfc4      	itt	gt
 8016b68:	3601      	addgt	r6, #1
 8016b6a:	10bf      	asrgt	r7, r7, #2
 8016b6c:	f7e9 fb9c 	bl	80002a8 <__aeabi_dsub>
 8016b70:	4682      	mov	sl, r0
 8016b72:	468b      	mov	fp, r1
 8016b74:	2200      	movs	r2, #0
 8016b76:	4b8f      	ldr	r3, [pc, #572]	; (8016db4 <log1p+0x354>)
 8016b78:	4650      	mov	r0, sl
 8016b7a:	4659      	mov	r1, fp
 8016b7c:	f7e9 fd4c 	bl	8000618 <__aeabi_dmul>
 8016b80:	4652      	mov	r2, sl
 8016b82:	465b      	mov	r3, fp
 8016b84:	f7e9 fd48 	bl	8000618 <__aeabi_dmul>
 8016b88:	2200      	movs	r2, #0
 8016b8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016b8e:	2f00      	cmp	r7, #0
 8016b90:	d178      	bne.n	8016c84 <log1p+0x224>
 8016b92:	2300      	movs	r3, #0
 8016b94:	4650      	mov	r0, sl
 8016b96:	4659      	mov	r1, fp
 8016b98:	f7e9 ffa6 	bl	8000ae8 <__aeabi_dcmpeq>
 8016b9c:	b388      	cbz	r0, 8016c02 <log1p+0x1a2>
 8016b9e:	2e00      	cmp	r6, #0
 8016ba0:	f000 8130 	beq.w	8016e04 <log1p+0x3a4>
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	f7e9 fccd 	bl	8000544 <__aeabi_i2d>
 8016baa:	a367      	add	r3, pc, #412	; (adr r3, 8016d48 <log1p+0x2e8>)
 8016bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bb0:	4606      	mov	r6, r0
 8016bb2:	460f      	mov	r7, r1
 8016bb4:	f7e9 fd30 	bl	8000618 <__aeabi_dmul>
 8016bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016bbc:	f7e9 fb76 	bl	80002ac <__adddf3>
 8016bc0:	a363      	add	r3, pc, #396	; (adr r3, 8016d50 <log1p+0x2f0>)
 8016bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bc6:	4604      	mov	r4, r0
 8016bc8:	460d      	mov	r5, r1
 8016bca:	4630      	mov	r0, r6
 8016bcc:	4639      	mov	r1, r7
 8016bce:	f7e9 fd23 	bl	8000618 <__aeabi_dmul>
 8016bd2:	4602      	mov	r2, r0
 8016bd4:	460b      	mov	r3, r1
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	4629      	mov	r1, r5
 8016bda:	e003      	b.n	8016be4 <log1p+0x184>
 8016bdc:	4652      	mov	r2, sl
 8016bde:	465b      	mov	r3, fp
 8016be0:	4650      	mov	r0, sl
 8016be2:	4659      	mov	r1, fp
 8016be4:	f7e9 fb62 	bl	80002ac <__adddf3>
 8016be8:	e757      	b.n	8016a9a <log1p+0x3a>
 8016bea:	2200      	movs	r2, #0
 8016bec:	4b73      	ldr	r3, [pc, #460]	; (8016dbc <log1p+0x35c>)
 8016bee:	f7e9 fb5b 	bl	80002a8 <__aeabi_dsub>
 8016bf2:	4602      	mov	r2, r0
 8016bf4:	460b      	mov	r3, r1
 8016bf6:	4650      	mov	r0, sl
 8016bf8:	4659      	mov	r1, fp
 8016bfa:	e797      	b.n	8016b2c <log1p+0xcc>
 8016bfc:	2701      	movs	r7, #1
 8016bfe:	2600      	movs	r6, #0
 8016c00:	e7b8      	b.n	8016b74 <log1p+0x114>
 8016c02:	a355      	add	r3, pc, #340	; (adr r3, 8016d58 <log1p+0x2f8>)
 8016c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c08:	4650      	mov	r0, sl
 8016c0a:	4659      	mov	r1, fp
 8016c0c:	f7e9 fd04 	bl	8000618 <__aeabi_dmul>
 8016c10:	4602      	mov	r2, r0
 8016c12:	460b      	mov	r3, r1
 8016c14:	2000      	movs	r0, #0
 8016c16:	4969      	ldr	r1, [pc, #420]	; (8016dbc <log1p+0x35c>)
 8016c18:	f7e9 fb46 	bl	80002a8 <__aeabi_dsub>
 8016c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c20:	f7e9 fcfa 	bl	8000618 <__aeabi_dmul>
 8016c24:	4604      	mov	r4, r0
 8016c26:	460d      	mov	r5, r1
 8016c28:	b936      	cbnz	r6, 8016c38 <log1p+0x1d8>
 8016c2a:	4602      	mov	r2, r0
 8016c2c:	460b      	mov	r3, r1
 8016c2e:	4650      	mov	r0, sl
 8016c30:	4659      	mov	r1, fp
 8016c32:	f7e9 fb39 	bl	80002a8 <__aeabi_dsub>
 8016c36:	e730      	b.n	8016a9a <log1p+0x3a>
 8016c38:	4630      	mov	r0, r6
 8016c3a:	f7e9 fc83 	bl	8000544 <__aeabi_i2d>
 8016c3e:	a344      	add	r3, pc, #272	; (adr r3, 8016d50 <log1p+0x2f0>)
 8016c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c44:	4680      	mov	r8, r0
 8016c46:	4689      	mov	r9, r1
 8016c48:	f7e9 fce6 	bl	8000618 <__aeabi_dmul>
 8016c4c:	a33e      	add	r3, pc, #248	; (adr r3, 8016d48 <log1p+0x2e8>)
 8016c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c52:	4606      	mov	r6, r0
 8016c54:	460f      	mov	r7, r1
 8016c56:	4640      	mov	r0, r8
 8016c58:	4649      	mov	r1, r9
 8016c5a:	f7e9 fcdd 	bl	8000618 <__aeabi_dmul>
 8016c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c62:	f7e9 fb23 	bl	80002ac <__adddf3>
 8016c66:	4602      	mov	r2, r0
 8016c68:	460b      	mov	r3, r1
 8016c6a:	4620      	mov	r0, r4
 8016c6c:	4629      	mov	r1, r5
 8016c6e:	f7e9 fb1b 	bl	80002a8 <__aeabi_dsub>
 8016c72:	4652      	mov	r2, sl
 8016c74:	465b      	mov	r3, fp
 8016c76:	f7e9 fb17 	bl	80002a8 <__aeabi_dsub>
 8016c7a:	4602      	mov	r2, r0
 8016c7c:	460b      	mov	r3, r1
 8016c7e:	4630      	mov	r0, r6
 8016c80:	4639      	mov	r1, r7
 8016c82:	e7d6      	b.n	8016c32 <log1p+0x1d2>
 8016c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016c88:	4650      	mov	r0, sl
 8016c8a:	4659      	mov	r1, fp
 8016c8c:	f7e9 fb0e 	bl	80002ac <__adddf3>
 8016c90:	4602      	mov	r2, r0
 8016c92:	460b      	mov	r3, r1
 8016c94:	4650      	mov	r0, sl
 8016c96:	4659      	mov	r1, fp
 8016c98:	f7e9 fde8 	bl	800086c <__aeabi_ddiv>
 8016c9c:	4602      	mov	r2, r0
 8016c9e:	460b      	mov	r3, r1
 8016ca0:	4680      	mov	r8, r0
 8016ca2:	4689      	mov	r9, r1
 8016ca4:	f7e9 fcb8 	bl	8000618 <__aeabi_dmul>
 8016ca8:	a32d      	add	r3, pc, #180	; (adr r3, 8016d60 <log1p+0x300>)
 8016caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cae:	4604      	mov	r4, r0
 8016cb0:	460d      	mov	r5, r1
 8016cb2:	f7e9 fcb1 	bl	8000618 <__aeabi_dmul>
 8016cb6:	a32c      	add	r3, pc, #176	; (adr r3, 8016d68 <log1p+0x308>)
 8016cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cbc:	f7e9 faf6 	bl	80002ac <__adddf3>
 8016cc0:	4622      	mov	r2, r4
 8016cc2:	462b      	mov	r3, r5
 8016cc4:	f7e9 fca8 	bl	8000618 <__aeabi_dmul>
 8016cc8:	a329      	add	r3, pc, #164	; (adr r3, 8016d70 <log1p+0x310>)
 8016cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cce:	f7e9 faed 	bl	80002ac <__adddf3>
 8016cd2:	4622      	mov	r2, r4
 8016cd4:	462b      	mov	r3, r5
 8016cd6:	f7e9 fc9f 	bl	8000618 <__aeabi_dmul>
 8016cda:	a327      	add	r3, pc, #156	; (adr r3, 8016d78 <log1p+0x318>)
 8016cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce0:	f7e9 fae4 	bl	80002ac <__adddf3>
 8016ce4:	4622      	mov	r2, r4
 8016ce6:	462b      	mov	r3, r5
 8016ce8:	f7e9 fc96 	bl	8000618 <__aeabi_dmul>
 8016cec:	a324      	add	r3, pc, #144	; (adr r3, 8016d80 <log1p+0x320>)
 8016cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cf2:	f7e9 fadb 	bl	80002ac <__adddf3>
 8016cf6:	4622      	mov	r2, r4
 8016cf8:	462b      	mov	r3, r5
 8016cfa:	f7e9 fc8d 	bl	8000618 <__aeabi_dmul>
 8016cfe:	a322      	add	r3, pc, #136	; (adr r3, 8016d88 <log1p+0x328>)
 8016d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d04:	f7e9 fad2 	bl	80002ac <__adddf3>
 8016d08:	4622      	mov	r2, r4
 8016d0a:	462b      	mov	r3, r5
 8016d0c:	f7e9 fc84 	bl	8000618 <__aeabi_dmul>
 8016d10:	a31f      	add	r3, pc, #124	; (adr r3, 8016d90 <log1p+0x330>)
 8016d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d16:	f7e9 fac9 	bl	80002ac <__adddf3>
 8016d1a:	4622      	mov	r2, r4
 8016d1c:	462b      	mov	r3, r5
 8016d1e:	f7e9 fc7b 	bl	8000618 <__aeabi_dmul>
 8016d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016d26:	f7e9 fac1 	bl	80002ac <__adddf3>
 8016d2a:	4642      	mov	r2, r8
 8016d2c:	464b      	mov	r3, r9
 8016d2e:	f7e9 fc73 	bl	8000618 <__aeabi_dmul>
 8016d32:	4604      	mov	r4, r0
 8016d34:	460d      	mov	r5, r1
 8016d36:	2e00      	cmp	r6, #0
 8016d38:	d144      	bne.n	8016dc4 <log1p+0x364>
 8016d3a:	4602      	mov	r2, r0
 8016d3c:	460b      	mov	r3, r1
 8016d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016d42:	f7e9 fab1 	bl	80002a8 <__aeabi_dsub>
 8016d46:	e6d4      	b.n	8016af2 <log1p+0x92>
 8016d48:	35793c76 	.word	0x35793c76
 8016d4c:	3dea39ef 	.word	0x3dea39ef
 8016d50:	fee00000 	.word	0xfee00000
 8016d54:	3fe62e42 	.word	0x3fe62e42
 8016d58:	55555555 	.word	0x55555555
 8016d5c:	3fe55555 	.word	0x3fe55555
 8016d60:	df3e5244 	.word	0xdf3e5244
 8016d64:	3fc2f112 	.word	0x3fc2f112
 8016d68:	d078c69f 	.word	0xd078c69f
 8016d6c:	3fc39a09 	.word	0x3fc39a09
 8016d70:	96cb03de 	.word	0x96cb03de
 8016d74:	3fc74664 	.word	0x3fc74664
 8016d78:	1d8e78af 	.word	0x1d8e78af
 8016d7c:	3fcc71c5 	.word	0x3fcc71c5
 8016d80:	94229359 	.word	0x94229359
 8016d84:	3fd24924 	.word	0x3fd24924
 8016d88:	9997fa04 	.word	0x9997fa04
 8016d8c:	3fd99999 	.word	0x3fd99999
 8016d90:	55555593 	.word	0x55555593
 8016d94:	3fe55555 	.word	0x3fe55555
 8016d98:	3fda8279 	.word	0x3fda8279
 8016d9c:	3fefffff 	.word	0x3fefffff
 8016da0:	bff00000 	.word	0xbff00000
 8016da4:	c3500000 	.word	0xc3500000
 8016da8:	3e1fffff 	.word	0x3e1fffff
 8016dac:	43500000 	.word	0x43500000
 8016db0:	3c8fffff 	.word	0x3c8fffff
 8016db4:	3fe00000 	.word	0x3fe00000
 8016db8:	402d413c 	.word	0x402d413c
 8016dbc:	3ff00000 	.word	0x3ff00000
 8016dc0:	0006a09d 	.word	0x0006a09d
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	f7e9 fbbd 	bl	8000544 <__aeabi_i2d>
 8016dca:	a31d      	add	r3, pc, #116	; (adr r3, 8016e40 <log1p+0x3e0>)
 8016dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd0:	4680      	mov	r8, r0
 8016dd2:	4689      	mov	r9, r1
 8016dd4:	f7e9 fc20 	bl	8000618 <__aeabi_dmul>
 8016dd8:	a31b      	add	r3, pc, #108	; (adr r3, 8016e48 <log1p+0x3e8>)
 8016dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dde:	4606      	mov	r6, r0
 8016de0:	460f      	mov	r7, r1
 8016de2:	4640      	mov	r0, r8
 8016de4:	4649      	mov	r1, r9
 8016de6:	f7e9 fc17 	bl	8000618 <__aeabi_dmul>
 8016dea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016dee:	f7e9 fa5d 	bl	80002ac <__adddf3>
 8016df2:	4622      	mov	r2, r4
 8016df4:	462b      	mov	r3, r5
 8016df6:	f7e9 fa59 	bl	80002ac <__adddf3>
 8016dfa:	4602      	mov	r2, r0
 8016dfc:	460b      	mov	r3, r1
 8016dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016e02:	e734      	b.n	8016c6e <log1p+0x20e>
 8016e04:	f04f 0a00 	mov.w	sl, #0
 8016e08:	f04f 0b00 	mov.w	fp, #0
 8016e0c:	e647      	b.n	8016a9e <log1p+0x3e>
 8016e0e:	4b0a      	ldr	r3, [pc, #40]	; (8016e38 <log1p+0x3d8>)
 8016e10:	459b      	cmp	fp, r3
 8016e12:	f73f aee3 	bgt.w	8016bdc <log1p+0x17c>
 8016e16:	4b09      	ldr	r3, [pc, #36]	; (8016e3c <log1p+0x3dc>)
 8016e18:	429f      	cmp	r7, r3
 8016e1a:	f77f ae71 	ble.w	8016b00 <log1p+0xa0>
 8016e1e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8016e30 <log1p+0x3d0>
 8016e22:	153e      	asrs	r6, r7, #20
 8016e24:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8016e28:	4654      	mov	r4, sl
 8016e2a:	ed8d 7b00 	vstr	d7, [sp]
 8016e2e:	e685      	b.n	8016b3c <log1p+0xdc>
	...
 8016e38:	7fefffff 	.word	0x7fefffff
 8016e3c:	433fffff 	.word	0x433fffff
 8016e40:	fee00000 	.word	0xfee00000
 8016e44:	3fe62e42 	.word	0x3fe62e42
 8016e48:	35793c76 	.word	0x35793c76
 8016e4c:	3dea39ef 	.word	0x3dea39ef

08016e50 <round>:
 8016e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e52:	ec57 6b10 	vmov	r6, r7, d0
 8016e56:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8016e5a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8016e5e:	2c13      	cmp	r4, #19
 8016e60:	463b      	mov	r3, r7
 8016e62:	463d      	mov	r5, r7
 8016e64:	dc17      	bgt.n	8016e96 <round+0x46>
 8016e66:	2c00      	cmp	r4, #0
 8016e68:	da09      	bge.n	8016e7e <round+0x2e>
 8016e6a:	3401      	adds	r4, #1
 8016e6c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8016e70:	d103      	bne.n	8016e7a <round+0x2a>
 8016e72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016e76:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016e7a:	2100      	movs	r1, #0
 8016e7c:	e02c      	b.n	8016ed8 <round+0x88>
 8016e7e:	4a18      	ldr	r2, [pc, #96]	; (8016ee0 <round+0x90>)
 8016e80:	4122      	asrs	r2, r4
 8016e82:	4217      	tst	r7, r2
 8016e84:	d100      	bne.n	8016e88 <round+0x38>
 8016e86:	b19e      	cbz	r6, 8016eb0 <round+0x60>
 8016e88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016e8c:	4123      	asrs	r3, r4
 8016e8e:	442b      	add	r3, r5
 8016e90:	ea23 0302 	bic.w	r3, r3, r2
 8016e94:	e7f1      	b.n	8016e7a <round+0x2a>
 8016e96:	2c33      	cmp	r4, #51	; 0x33
 8016e98:	dd0d      	ble.n	8016eb6 <round+0x66>
 8016e9a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8016e9e:	d107      	bne.n	8016eb0 <round+0x60>
 8016ea0:	4630      	mov	r0, r6
 8016ea2:	4639      	mov	r1, r7
 8016ea4:	ee10 2a10 	vmov	r2, s0
 8016ea8:	f7e9 fa00 	bl	80002ac <__adddf3>
 8016eac:	4606      	mov	r6, r0
 8016eae:	460f      	mov	r7, r1
 8016eb0:	ec47 6b10 	vmov	d0, r6, r7
 8016eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016eb6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8016eba:	f04f 30ff 	mov.w	r0, #4294967295
 8016ebe:	40d0      	lsrs	r0, r2
 8016ec0:	4206      	tst	r6, r0
 8016ec2:	d0f5      	beq.n	8016eb0 <round+0x60>
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8016eca:	fa02 f404 	lsl.w	r4, r2, r4
 8016ece:	1931      	adds	r1, r6, r4
 8016ed0:	bf28      	it	cs
 8016ed2:	189b      	addcs	r3, r3, r2
 8016ed4:	ea21 0100 	bic.w	r1, r1, r0
 8016ed8:	461f      	mov	r7, r3
 8016eda:	460e      	mov	r6, r1
 8016edc:	e7e8      	b.n	8016eb0 <round+0x60>
 8016ede:	bf00      	nop
 8016ee0:	000fffff 	.word	0x000fffff
 8016ee4:	00000000 	.word	0x00000000

08016ee8 <sin>:
 8016ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016eea:	ec51 0b10 	vmov	r0, r1, d0
 8016eee:	4a20      	ldr	r2, [pc, #128]	; (8016f70 <sin+0x88>)
 8016ef0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016ef4:	4293      	cmp	r3, r2
 8016ef6:	dc07      	bgt.n	8016f08 <sin+0x20>
 8016ef8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8016f68 <sin+0x80>
 8016efc:	2000      	movs	r0, #0
 8016efe:	f001 fcdf 	bl	80188c0 <__kernel_sin>
 8016f02:	ec51 0b10 	vmov	r0, r1, d0
 8016f06:	e007      	b.n	8016f18 <sin+0x30>
 8016f08:	4a1a      	ldr	r2, [pc, #104]	; (8016f74 <sin+0x8c>)
 8016f0a:	4293      	cmp	r3, r2
 8016f0c:	dd09      	ble.n	8016f22 <sin+0x3a>
 8016f0e:	ee10 2a10 	vmov	r2, s0
 8016f12:	460b      	mov	r3, r1
 8016f14:	f7e9 f9c8 	bl	80002a8 <__aeabi_dsub>
 8016f18:	ec41 0b10 	vmov	d0, r0, r1
 8016f1c:	b005      	add	sp, #20
 8016f1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f22:	4668      	mov	r0, sp
 8016f24:	f000 fa88 	bl	8017438 <__ieee754_rem_pio2>
 8016f28:	f000 0003 	and.w	r0, r0, #3
 8016f2c:	2801      	cmp	r0, #1
 8016f2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016f32:	ed9d 0b00 	vldr	d0, [sp]
 8016f36:	d004      	beq.n	8016f42 <sin+0x5a>
 8016f38:	2802      	cmp	r0, #2
 8016f3a:	d005      	beq.n	8016f48 <sin+0x60>
 8016f3c:	b970      	cbnz	r0, 8016f5c <sin+0x74>
 8016f3e:	2001      	movs	r0, #1
 8016f40:	e7dd      	b.n	8016efe <sin+0x16>
 8016f42:	f001 f8b5 	bl	80180b0 <__kernel_cos>
 8016f46:	e7dc      	b.n	8016f02 <sin+0x1a>
 8016f48:	2001      	movs	r0, #1
 8016f4a:	f001 fcb9 	bl	80188c0 <__kernel_sin>
 8016f4e:	ec53 2b10 	vmov	r2, r3, d0
 8016f52:	ee10 0a10 	vmov	r0, s0
 8016f56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016f5a:	e7dd      	b.n	8016f18 <sin+0x30>
 8016f5c:	f001 f8a8 	bl	80180b0 <__kernel_cos>
 8016f60:	e7f5      	b.n	8016f4e <sin+0x66>
 8016f62:	bf00      	nop
 8016f64:	f3af 8000 	nop.w
	...
 8016f70:	3fe921fb 	.word	0x3fe921fb
 8016f74:	7fefffff 	.word	0x7fefffff

08016f78 <roundf>:
 8016f78:	ee10 0a10 	vmov	r0, s0
 8016f7c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016f80:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8016f84:	2a16      	cmp	r2, #22
 8016f86:	dc15      	bgt.n	8016fb4 <roundf+0x3c>
 8016f88:	2a00      	cmp	r2, #0
 8016f8a:	da08      	bge.n	8016f9e <roundf+0x26>
 8016f8c:	3201      	adds	r2, #1
 8016f8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8016f92:	d101      	bne.n	8016f98 <roundf+0x20>
 8016f94:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8016f98:	ee00 3a10 	vmov	s0, r3
 8016f9c:	4770      	bx	lr
 8016f9e:	4908      	ldr	r1, [pc, #32]	; (8016fc0 <roundf+0x48>)
 8016fa0:	4111      	asrs	r1, r2
 8016fa2:	4208      	tst	r0, r1
 8016fa4:	d0fa      	beq.n	8016f9c <roundf+0x24>
 8016fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016faa:	4113      	asrs	r3, r2
 8016fac:	4403      	add	r3, r0
 8016fae:	ea23 0301 	bic.w	r3, r3, r1
 8016fb2:	e7f1      	b.n	8016f98 <roundf+0x20>
 8016fb4:	2a80      	cmp	r2, #128	; 0x80
 8016fb6:	d1f1      	bne.n	8016f9c <roundf+0x24>
 8016fb8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016fbc:	4770      	bx	lr
 8016fbe:	bf00      	nop
 8016fc0:	007fffff 	.word	0x007fffff

08016fc4 <sqrt>:
 8016fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016fc8:	ed2d 8b02 	vpush	{d8}
 8016fcc:	b08b      	sub	sp, #44	; 0x2c
 8016fce:	ec55 4b10 	vmov	r4, r5, d0
 8016fd2:	f000 fc23 	bl	801781c <__ieee754_sqrt>
 8016fd6:	4b26      	ldr	r3, [pc, #152]	; (8017070 <sqrt+0xac>)
 8016fd8:	eeb0 8a40 	vmov.f32	s16, s0
 8016fdc:	eef0 8a60 	vmov.f32	s17, s1
 8016fe0:	f993 6000 	ldrsb.w	r6, [r3]
 8016fe4:	1c73      	adds	r3, r6, #1
 8016fe6:	d02a      	beq.n	801703e <sqrt+0x7a>
 8016fe8:	4622      	mov	r2, r4
 8016fea:	462b      	mov	r3, r5
 8016fec:	4620      	mov	r0, r4
 8016fee:	4629      	mov	r1, r5
 8016ff0:	f7e9 fdac 	bl	8000b4c <__aeabi_dcmpun>
 8016ff4:	4607      	mov	r7, r0
 8016ff6:	bb10      	cbnz	r0, 801703e <sqrt+0x7a>
 8016ff8:	f04f 0800 	mov.w	r8, #0
 8016ffc:	f04f 0900 	mov.w	r9, #0
 8017000:	4642      	mov	r2, r8
 8017002:	464b      	mov	r3, r9
 8017004:	4620      	mov	r0, r4
 8017006:	4629      	mov	r1, r5
 8017008:	f7e9 fd78 	bl	8000afc <__aeabi_dcmplt>
 801700c:	b1b8      	cbz	r0, 801703e <sqrt+0x7a>
 801700e:	2301      	movs	r3, #1
 8017010:	9300      	str	r3, [sp, #0]
 8017012:	4b18      	ldr	r3, [pc, #96]	; (8017074 <sqrt+0xb0>)
 8017014:	9301      	str	r3, [sp, #4]
 8017016:	9708      	str	r7, [sp, #32]
 8017018:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801701c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8017020:	b9b6      	cbnz	r6, 8017050 <sqrt+0x8c>
 8017022:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8017026:	4668      	mov	r0, sp
 8017028:	f001 fd0d 	bl	8018a46 <matherr>
 801702c:	b1d0      	cbz	r0, 8017064 <sqrt+0xa0>
 801702e:	9b08      	ldr	r3, [sp, #32]
 8017030:	b11b      	cbz	r3, 801703a <sqrt+0x76>
 8017032:	f001 fea3 	bl	8018d7c <__errno>
 8017036:	9b08      	ldr	r3, [sp, #32]
 8017038:	6003      	str	r3, [r0, #0]
 801703a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801703e:	eeb0 0a48 	vmov.f32	s0, s16
 8017042:	eef0 0a68 	vmov.f32	s1, s17
 8017046:	b00b      	add	sp, #44	; 0x2c
 8017048:	ecbd 8b02 	vpop	{d8}
 801704c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017050:	4642      	mov	r2, r8
 8017052:	464b      	mov	r3, r9
 8017054:	4640      	mov	r0, r8
 8017056:	4649      	mov	r1, r9
 8017058:	f7e9 fc08 	bl	800086c <__aeabi_ddiv>
 801705c:	2e02      	cmp	r6, #2
 801705e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017062:	d1e0      	bne.n	8017026 <sqrt+0x62>
 8017064:	f001 fe8a 	bl	8018d7c <__errno>
 8017068:	2321      	movs	r3, #33	; 0x21
 801706a:	6003      	str	r3, [r0, #0]
 801706c:	e7df      	b.n	801702e <sqrt+0x6a>
 801706e:	bf00      	nop
 8017070:	20000014 	.word	0x20000014
 8017074:	08026d9c 	.word	0x08026d9c

08017078 <expf>:
 8017078:	b530      	push	{r4, r5, lr}
 801707a:	ed2d 8b02 	vpush	{d8}
 801707e:	4d35      	ldr	r5, [pc, #212]	; (8017154 <expf+0xdc>)
 8017080:	b08b      	sub	sp, #44	; 0x2c
 8017082:	eeb0 8a40 	vmov.f32	s16, s0
 8017086:	f000 fc79 	bl	801797c <__ieee754_expf>
 801708a:	f995 3000 	ldrsb.w	r3, [r5]
 801708e:	3301      	adds	r3, #1
 8017090:	ee10 4a10 	vmov	r4, s0
 8017094:	d030      	beq.n	80170f8 <expf+0x80>
 8017096:	eeb0 0a48 	vmov.f32	s0, s16
 801709a:	f001 fd56 	bl	8018b4a <finitef>
 801709e:	b358      	cbz	r0, 80170f8 <expf+0x80>
 80170a0:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8017158 <expf+0xe0>
 80170a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80170a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ac:	dd35      	ble.n	801711a <expf+0xa2>
 80170ae:	2303      	movs	r3, #3
 80170b0:	9300      	str	r3, [sp, #0]
 80170b2:	4b2a      	ldr	r3, [pc, #168]	; (801715c <expf+0xe4>)
 80170b4:	9301      	str	r3, [sp, #4]
 80170b6:	ee18 0a10 	vmov	r0, s16
 80170ba:	2300      	movs	r3, #0
 80170bc:	9308      	str	r3, [sp, #32]
 80170be:	f7e9 fa53 	bl	8000568 <__aeabi_f2d>
 80170c2:	f995 3000 	ldrsb.w	r3, [r5]
 80170c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80170ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80170ce:	b9cb      	cbnz	r3, 8017104 <expf+0x8c>
 80170d0:	4b23      	ldr	r3, [pc, #140]	; (8017160 <expf+0xe8>)
 80170d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80170d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80170da:	4668      	mov	r0, sp
 80170dc:	f001 fcb3 	bl	8018a46 <matherr>
 80170e0:	b1b0      	cbz	r0, 8017110 <expf+0x98>
 80170e2:	9b08      	ldr	r3, [sp, #32]
 80170e4:	b11b      	cbz	r3, 80170ee <expf+0x76>
 80170e6:	f001 fe49 	bl	8018d7c <__errno>
 80170ea:	9b08      	ldr	r3, [sp, #32]
 80170ec:	6003      	str	r3, [r0, #0]
 80170ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80170f2:	f7e9 fd69 	bl	8000bc8 <__aeabi_d2f>
 80170f6:	4604      	mov	r4, r0
 80170f8:	ee00 4a10 	vmov	s0, r4
 80170fc:	b00b      	add	sp, #44	; 0x2c
 80170fe:	ecbd 8b02 	vpop	{d8}
 8017102:	bd30      	pop	{r4, r5, pc}
 8017104:	4917      	ldr	r1, [pc, #92]	; (8017164 <expf+0xec>)
 8017106:	2000      	movs	r0, #0
 8017108:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801710c:	2b02      	cmp	r3, #2
 801710e:	d1e4      	bne.n	80170da <expf+0x62>
 8017110:	f001 fe34 	bl	8018d7c <__errno>
 8017114:	2322      	movs	r3, #34	; 0x22
 8017116:	6003      	str	r3, [r0, #0]
 8017118:	e7e3      	b.n	80170e2 <expf+0x6a>
 801711a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8017168 <expf+0xf0>
 801711e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017126:	d5e7      	bpl.n	80170f8 <expf+0x80>
 8017128:	2304      	movs	r3, #4
 801712a:	9300      	str	r3, [sp, #0]
 801712c:	4b0b      	ldr	r3, [pc, #44]	; (801715c <expf+0xe4>)
 801712e:	9301      	str	r3, [sp, #4]
 8017130:	ee18 0a10 	vmov	r0, s16
 8017134:	2300      	movs	r3, #0
 8017136:	9308      	str	r3, [sp, #32]
 8017138:	f7e9 fa16 	bl	8000568 <__aeabi_f2d>
 801713c:	2300      	movs	r3, #0
 801713e:	2200      	movs	r2, #0
 8017140:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017144:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801714c:	f995 3000 	ldrsb.w	r3, [r5]
 8017150:	e7dc      	b.n	801710c <expf+0x94>
 8017152:	bf00      	nop
 8017154:	20000014 	.word	0x20000014
 8017158:	42b17180 	.word	0x42b17180
 801715c:	08026da1 	.word	0x08026da1
 8017160:	47efffff 	.word	0x47efffff
 8017164:	7ff00000 	.word	0x7ff00000
 8017168:	c2cff1b5 	.word	0xc2cff1b5

0801716c <powf>:
 801716c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8017170:	ed2d 8b04 	vpush	{d8-d9}
 8017174:	4ca7      	ldr	r4, [pc, #668]	; (8017414 <powf+0x2a8>)
 8017176:	b08a      	sub	sp, #40	; 0x28
 8017178:	eef0 8a40 	vmov.f32	s17, s0
 801717c:	eeb0 8a60 	vmov.f32	s16, s1
 8017180:	f000 fcd0 	bl	8017b24 <__ieee754_powf>
 8017184:	f994 5000 	ldrsb.w	r5, [r4]
 8017188:	1c6b      	adds	r3, r5, #1
 801718a:	eeb0 9a40 	vmov.f32	s18, s0
 801718e:	4626      	mov	r6, r4
 8017190:	d05f      	beq.n	8017252 <powf+0xe6>
 8017192:	eeb4 8a48 	vcmp.f32	s16, s16
 8017196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801719a:	d65a      	bvs.n	8017252 <powf+0xe6>
 801719c:	eef4 8a68 	vcmp.f32	s17, s17
 80171a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171a4:	d721      	bvc.n	80171ea <powf+0x7e>
 80171a6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80171aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171ae:	d150      	bne.n	8017252 <powf+0xe6>
 80171b0:	2301      	movs	r3, #1
 80171b2:	9300      	str	r3, [sp, #0]
 80171b4:	4b98      	ldr	r3, [pc, #608]	; (8017418 <powf+0x2ac>)
 80171b6:	9301      	str	r3, [sp, #4]
 80171b8:	ee18 0a90 	vmov	r0, s17
 80171bc:	2300      	movs	r3, #0
 80171be:	9308      	str	r3, [sp, #32]
 80171c0:	f7e9 f9d2 	bl	8000568 <__aeabi_f2d>
 80171c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171c8:	ee18 0a10 	vmov	r0, s16
 80171cc:	f7e9 f9cc 	bl	8000568 <__aeabi_f2d>
 80171d0:	4b92      	ldr	r3, [pc, #584]	; (801741c <powf+0x2b0>)
 80171d2:	2200      	movs	r2, #0
 80171d4:	2d02      	cmp	r5, #2
 80171d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80171da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80171de:	d032      	beq.n	8017246 <powf+0xda>
 80171e0:	4668      	mov	r0, sp
 80171e2:	f001 fc30 	bl	8018a46 <matherr>
 80171e6:	bb40      	cbnz	r0, 801723a <powf+0xce>
 80171e8:	e065      	b.n	80172b6 <powf+0x14a>
 80171ea:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8017420 <powf+0x2b4>
 80171ee:	eef4 8a69 	vcmp.f32	s17, s19
 80171f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171f6:	d163      	bne.n	80172c0 <powf+0x154>
 80171f8:	eeb4 8a69 	vcmp.f32	s16, s19
 80171fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017200:	d12e      	bne.n	8017260 <powf+0xf4>
 8017202:	2301      	movs	r3, #1
 8017204:	9300      	str	r3, [sp, #0]
 8017206:	4b84      	ldr	r3, [pc, #528]	; (8017418 <powf+0x2ac>)
 8017208:	9301      	str	r3, [sp, #4]
 801720a:	ee18 0a90 	vmov	r0, s17
 801720e:	2300      	movs	r3, #0
 8017210:	9308      	str	r3, [sp, #32]
 8017212:	f7e9 f9a9 	bl	8000568 <__aeabi_f2d>
 8017216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801721a:	ee18 0a10 	vmov	r0, s16
 801721e:	f7e9 f9a3 	bl	8000568 <__aeabi_f2d>
 8017222:	2200      	movs	r2, #0
 8017224:	2300      	movs	r3, #0
 8017226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801722a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801722e:	2d00      	cmp	r5, #0
 8017230:	d0d6      	beq.n	80171e0 <powf+0x74>
 8017232:	4b7a      	ldr	r3, [pc, #488]	; (801741c <powf+0x2b0>)
 8017234:	2200      	movs	r2, #0
 8017236:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801723a:	9b08      	ldr	r3, [sp, #32]
 801723c:	b11b      	cbz	r3, 8017246 <powf+0xda>
 801723e:	f001 fd9d 	bl	8018d7c <__errno>
 8017242:	9b08      	ldr	r3, [sp, #32]
 8017244:	6003      	str	r3, [r0, #0]
 8017246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801724a:	f7e9 fcbd 	bl	8000bc8 <__aeabi_d2f>
 801724e:	ee09 0a10 	vmov	s18, r0
 8017252:	eeb0 0a49 	vmov.f32	s0, s18
 8017256:	b00a      	add	sp, #40	; 0x28
 8017258:	ecbd 8b04 	vpop	{d8-d9}
 801725c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8017260:	eeb0 0a48 	vmov.f32	s0, s16
 8017264:	f001 fc71 	bl	8018b4a <finitef>
 8017268:	2800      	cmp	r0, #0
 801726a:	d0f2      	beq.n	8017252 <powf+0xe6>
 801726c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017274:	d5ed      	bpl.n	8017252 <powf+0xe6>
 8017276:	2301      	movs	r3, #1
 8017278:	9300      	str	r3, [sp, #0]
 801727a:	4b67      	ldr	r3, [pc, #412]	; (8017418 <powf+0x2ac>)
 801727c:	9301      	str	r3, [sp, #4]
 801727e:	ee18 0a90 	vmov	r0, s17
 8017282:	2300      	movs	r3, #0
 8017284:	9308      	str	r3, [sp, #32]
 8017286:	f7e9 f96f 	bl	8000568 <__aeabi_f2d>
 801728a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801728e:	ee18 0a10 	vmov	r0, s16
 8017292:	f7e9 f969 	bl	8000568 <__aeabi_f2d>
 8017296:	f994 3000 	ldrsb.w	r3, [r4]
 801729a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801729e:	b923      	cbnz	r3, 80172aa <powf+0x13e>
 80172a0:	2200      	movs	r2, #0
 80172a2:	2300      	movs	r3, #0
 80172a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80172a8:	e79a      	b.n	80171e0 <powf+0x74>
 80172aa:	495e      	ldr	r1, [pc, #376]	; (8017424 <powf+0x2b8>)
 80172ac:	2000      	movs	r0, #0
 80172ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80172b2:	2b02      	cmp	r3, #2
 80172b4:	d194      	bne.n	80171e0 <powf+0x74>
 80172b6:	f001 fd61 	bl	8018d7c <__errno>
 80172ba:	2321      	movs	r3, #33	; 0x21
 80172bc:	6003      	str	r3, [r0, #0]
 80172be:	e7bc      	b.n	801723a <powf+0xce>
 80172c0:	f001 fc43 	bl	8018b4a <finitef>
 80172c4:	4605      	mov	r5, r0
 80172c6:	2800      	cmp	r0, #0
 80172c8:	d173      	bne.n	80173b2 <powf+0x246>
 80172ca:	eeb0 0a68 	vmov.f32	s0, s17
 80172ce:	f001 fc3c 	bl	8018b4a <finitef>
 80172d2:	2800      	cmp	r0, #0
 80172d4:	d06d      	beq.n	80173b2 <powf+0x246>
 80172d6:	eeb0 0a48 	vmov.f32	s0, s16
 80172da:	f001 fc36 	bl	8018b4a <finitef>
 80172de:	2800      	cmp	r0, #0
 80172e0:	d067      	beq.n	80173b2 <powf+0x246>
 80172e2:	ee18 0a90 	vmov	r0, s17
 80172e6:	f7e9 f93f 	bl	8000568 <__aeabi_f2d>
 80172ea:	4680      	mov	r8, r0
 80172ec:	ee18 0a10 	vmov	r0, s16
 80172f0:	4689      	mov	r9, r1
 80172f2:	f7e9 f939 	bl	8000568 <__aeabi_f2d>
 80172f6:	eeb4 9a49 	vcmp.f32	s18, s18
 80172fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172fe:	f994 4000 	ldrsb.w	r4, [r4]
 8017302:	4b45      	ldr	r3, [pc, #276]	; (8017418 <powf+0x2ac>)
 8017304:	d713      	bvc.n	801732e <powf+0x1c2>
 8017306:	2201      	movs	r2, #1
 8017308:	e9cd 2300 	strd	r2, r3, [sp]
 801730c:	9508      	str	r5, [sp, #32]
 801730e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017312:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017316:	2c00      	cmp	r4, #0
 8017318:	d0c2      	beq.n	80172a0 <powf+0x134>
 801731a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801731e:	ee17 0a90 	vmov	r0, s15
 8017322:	f7e9 f921 	bl	8000568 <__aeabi_f2d>
 8017326:	2c02      	cmp	r4, #2
 8017328:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801732c:	e7c2      	b.n	80172b4 <powf+0x148>
 801732e:	2203      	movs	r2, #3
 8017330:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017334:	e9cd 2300 	strd	r2, r3, [sp]
 8017338:	9508      	str	r5, [sp, #32]
 801733a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801733e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017342:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017346:	b9fc      	cbnz	r4, 8017388 <powf+0x21c>
 8017348:	4b37      	ldr	r3, [pc, #220]	; (8017428 <powf+0x2bc>)
 801734a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801734e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8017352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017356:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801735a:	d553      	bpl.n	8017404 <powf+0x298>
 801735c:	eeb0 0a48 	vmov.f32	s0, s16
 8017360:	f001 fc04 	bl	8018b6c <rintf>
 8017364:	eeb4 0a48 	vcmp.f32	s0, s16
 8017368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801736c:	d004      	beq.n	8017378 <powf+0x20c>
 801736e:	4b2f      	ldr	r3, [pc, #188]	; (801742c <powf+0x2c0>)
 8017370:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8017374:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017378:	f996 3000 	ldrsb.w	r3, [r6]
 801737c:	2b02      	cmp	r3, #2
 801737e:	d141      	bne.n	8017404 <powf+0x298>
 8017380:	f001 fcfc 	bl	8018d7c <__errno>
 8017384:	2322      	movs	r3, #34	; 0x22
 8017386:	e799      	b.n	80172bc <powf+0x150>
 8017388:	4b29      	ldr	r3, [pc, #164]	; (8017430 <powf+0x2c4>)
 801738a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801738e:	2200      	movs	r2, #0
 8017390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017394:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017398:	d5ee      	bpl.n	8017378 <powf+0x20c>
 801739a:	eeb0 0a48 	vmov.f32	s0, s16
 801739e:	f001 fbe5 	bl	8018b6c <rintf>
 80173a2:	eeb4 0a48 	vcmp.f32	s0, s16
 80173a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173aa:	d0e5      	beq.n	8017378 <powf+0x20c>
 80173ac:	2200      	movs	r2, #0
 80173ae:	4b1d      	ldr	r3, [pc, #116]	; (8017424 <powf+0x2b8>)
 80173b0:	e7e0      	b.n	8017374 <powf+0x208>
 80173b2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80173b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173ba:	f47f af4a 	bne.w	8017252 <powf+0xe6>
 80173be:	eeb0 0a68 	vmov.f32	s0, s17
 80173c2:	f001 fbc2 	bl	8018b4a <finitef>
 80173c6:	2800      	cmp	r0, #0
 80173c8:	f43f af43 	beq.w	8017252 <powf+0xe6>
 80173cc:	eeb0 0a48 	vmov.f32	s0, s16
 80173d0:	f001 fbbb 	bl	8018b4a <finitef>
 80173d4:	2800      	cmp	r0, #0
 80173d6:	f43f af3c 	beq.w	8017252 <powf+0xe6>
 80173da:	2304      	movs	r3, #4
 80173dc:	9300      	str	r3, [sp, #0]
 80173de:	4b0e      	ldr	r3, [pc, #56]	; (8017418 <powf+0x2ac>)
 80173e0:	9301      	str	r3, [sp, #4]
 80173e2:	ee18 0a90 	vmov	r0, s17
 80173e6:	2300      	movs	r3, #0
 80173e8:	9308      	str	r3, [sp, #32]
 80173ea:	f7e9 f8bd 	bl	8000568 <__aeabi_f2d>
 80173ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173f2:	ee18 0a10 	vmov	r0, s16
 80173f6:	f7e9 f8b7 	bl	8000568 <__aeabi_f2d>
 80173fa:	2200      	movs	r2, #0
 80173fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017400:	2300      	movs	r3, #0
 8017402:	e7b7      	b.n	8017374 <powf+0x208>
 8017404:	4668      	mov	r0, sp
 8017406:	f001 fb1e 	bl	8018a46 <matherr>
 801740a:	2800      	cmp	r0, #0
 801740c:	f47f af15 	bne.w	801723a <powf+0xce>
 8017410:	e7b6      	b.n	8017380 <powf+0x214>
 8017412:	bf00      	nop
 8017414:	20000014 	.word	0x20000014
 8017418:	08026da6 	.word	0x08026da6
 801741c:	3ff00000 	.word	0x3ff00000
 8017420:	00000000 	.word	0x00000000
 8017424:	fff00000 	.word	0xfff00000
 8017428:	47efffff 	.word	0x47efffff
 801742c:	c7efffff 	.word	0xc7efffff
 8017430:	7ff00000 	.word	0x7ff00000
 8017434:	00000000 	.word	0x00000000

08017438 <__ieee754_rem_pio2>:
 8017438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801743c:	ec57 6b10 	vmov	r6, r7, d0
 8017440:	4bc3      	ldr	r3, [pc, #780]	; (8017750 <__ieee754_rem_pio2+0x318>)
 8017442:	b08d      	sub	sp, #52	; 0x34
 8017444:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8017448:	4598      	cmp	r8, r3
 801744a:	4604      	mov	r4, r0
 801744c:	9704      	str	r7, [sp, #16]
 801744e:	dc07      	bgt.n	8017460 <__ieee754_rem_pio2+0x28>
 8017450:	2200      	movs	r2, #0
 8017452:	2300      	movs	r3, #0
 8017454:	ed84 0b00 	vstr	d0, [r4]
 8017458:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801745c:	2500      	movs	r5, #0
 801745e:	e027      	b.n	80174b0 <__ieee754_rem_pio2+0x78>
 8017460:	4bbc      	ldr	r3, [pc, #752]	; (8017754 <__ieee754_rem_pio2+0x31c>)
 8017462:	4598      	cmp	r8, r3
 8017464:	dc75      	bgt.n	8017552 <__ieee754_rem_pio2+0x11a>
 8017466:	9b04      	ldr	r3, [sp, #16]
 8017468:	4dbb      	ldr	r5, [pc, #748]	; (8017758 <__ieee754_rem_pio2+0x320>)
 801746a:	2b00      	cmp	r3, #0
 801746c:	ee10 0a10 	vmov	r0, s0
 8017470:	a3a9      	add	r3, pc, #676	; (adr r3, 8017718 <__ieee754_rem_pio2+0x2e0>)
 8017472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017476:	4639      	mov	r1, r7
 8017478:	dd36      	ble.n	80174e8 <__ieee754_rem_pio2+0xb0>
 801747a:	f7e8 ff15 	bl	80002a8 <__aeabi_dsub>
 801747e:	45a8      	cmp	r8, r5
 8017480:	4606      	mov	r6, r0
 8017482:	460f      	mov	r7, r1
 8017484:	d018      	beq.n	80174b8 <__ieee754_rem_pio2+0x80>
 8017486:	a3a6      	add	r3, pc, #664	; (adr r3, 8017720 <__ieee754_rem_pio2+0x2e8>)
 8017488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801748c:	f7e8 ff0c 	bl	80002a8 <__aeabi_dsub>
 8017490:	4602      	mov	r2, r0
 8017492:	460b      	mov	r3, r1
 8017494:	e9c4 2300 	strd	r2, r3, [r4]
 8017498:	4630      	mov	r0, r6
 801749a:	4639      	mov	r1, r7
 801749c:	f7e8 ff04 	bl	80002a8 <__aeabi_dsub>
 80174a0:	a39f      	add	r3, pc, #636	; (adr r3, 8017720 <__ieee754_rem_pio2+0x2e8>)
 80174a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a6:	f7e8 feff 	bl	80002a8 <__aeabi_dsub>
 80174aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80174ae:	2501      	movs	r5, #1
 80174b0:	4628      	mov	r0, r5
 80174b2:	b00d      	add	sp, #52	; 0x34
 80174b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174b8:	a39b      	add	r3, pc, #620	; (adr r3, 8017728 <__ieee754_rem_pio2+0x2f0>)
 80174ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174be:	f7e8 fef3 	bl	80002a8 <__aeabi_dsub>
 80174c2:	a39b      	add	r3, pc, #620	; (adr r3, 8017730 <__ieee754_rem_pio2+0x2f8>)
 80174c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174c8:	4606      	mov	r6, r0
 80174ca:	460f      	mov	r7, r1
 80174cc:	f7e8 feec 	bl	80002a8 <__aeabi_dsub>
 80174d0:	4602      	mov	r2, r0
 80174d2:	460b      	mov	r3, r1
 80174d4:	e9c4 2300 	strd	r2, r3, [r4]
 80174d8:	4630      	mov	r0, r6
 80174da:	4639      	mov	r1, r7
 80174dc:	f7e8 fee4 	bl	80002a8 <__aeabi_dsub>
 80174e0:	a393      	add	r3, pc, #588	; (adr r3, 8017730 <__ieee754_rem_pio2+0x2f8>)
 80174e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e6:	e7de      	b.n	80174a6 <__ieee754_rem_pio2+0x6e>
 80174e8:	f7e8 fee0 	bl	80002ac <__adddf3>
 80174ec:	45a8      	cmp	r8, r5
 80174ee:	4606      	mov	r6, r0
 80174f0:	460f      	mov	r7, r1
 80174f2:	d016      	beq.n	8017522 <__ieee754_rem_pio2+0xea>
 80174f4:	a38a      	add	r3, pc, #552	; (adr r3, 8017720 <__ieee754_rem_pio2+0x2e8>)
 80174f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174fa:	f7e8 fed7 	bl	80002ac <__adddf3>
 80174fe:	4602      	mov	r2, r0
 8017500:	460b      	mov	r3, r1
 8017502:	e9c4 2300 	strd	r2, r3, [r4]
 8017506:	4630      	mov	r0, r6
 8017508:	4639      	mov	r1, r7
 801750a:	f7e8 fecd 	bl	80002a8 <__aeabi_dsub>
 801750e:	a384      	add	r3, pc, #528	; (adr r3, 8017720 <__ieee754_rem_pio2+0x2e8>)
 8017510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017514:	f7e8 feca 	bl	80002ac <__adddf3>
 8017518:	f04f 35ff 	mov.w	r5, #4294967295
 801751c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017520:	e7c6      	b.n	80174b0 <__ieee754_rem_pio2+0x78>
 8017522:	a381      	add	r3, pc, #516	; (adr r3, 8017728 <__ieee754_rem_pio2+0x2f0>)
 8017524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017528:	f7e8 fec0 	bl	80002ac <__adddf3>
 801752c:	a380      	add	r3, pc, #512	; (adr r3, 8017730 <__ieee754_rem_pio2+0x2f8>)
 801752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017532:	4606      	mov	r6, r0
 8017534:	460f      	mov	r7, r1
 8017536:	f7e8 feb9 	bl	80002ac <__adddf3>
 801753a:	4602      	mov	r2, r0
 801753c:	460b      	mov	r3, r1
 801753e:	e9c4 2300 	strd	r2, r3, [r4]
 8017542:	4630      	mov	r0, r6
 8017544:	4639      	mov	r1, r7
 8017546:	f7e8 feaf 	bl	80002a8 <__aeabi_dsub>
 801754a:	a379      	add	r3, pc, #484	; (adr r3, 8017730 <__ieee754_rem_pio2+0x2f8>)
 801754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017550:	e7e0      	b.n	8017514 <__ieee754_rem_pio2+0xdc>
 8017552:	4b82      	ldr	r3, [pc, #520]	; (801775c <__ieee754_rem_pio2+0x324>)
 8017554:	4598      	cmp	r8, r3
 8017556:	f300 80d0 	bgt.w	80176fa <__ieee754_rem_pio2+0x2c2>
 801755a:	f001 fa6b 	bl	8018a34 <fabs>
 801755e:	ec57 6b10 	vmov	r6, r7, d0
 8017562:	ee10 0a10 	vmov	r0, s0
 8017566:	a374      	add	r3, pc, #464	; (adr r3, 8017738 <__ieee754_rem_pio2+0x300>)
 8017568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801756c:	4639      	mov	r1, r7
 801756e:	f7e9 f853 	bl	8000618 <__aeabi_dmul>
 8017572:	2200      	movs	r2, #0
 8017574:	4b7a      	ldr	r3, [pc, #488]	; (8017760 <__ieee754_rem_pio2+0x328>)
 8017576:	f7e8 fe99 	bl	80002ac <__adddf3>
 801757a:	f7e9 fafd 	bl	8000b78 <__aeabi_d2iz>
 801757e:	4605      	mov	r5, r0
 8017580:	f7e8 ffe0 	bl	8000544 <__aeabi_i2d>
 8017584:	a364      	add	r3, pc, #400	; (adr r3, 8017718 <__ieee754_rem_pio2+0x2e0>)
 8017586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801758a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801758e:	f7e9 f843 	bl	8000618 <__aeabi_dmul>
 8017592:	4602      	mov	r2, r0
 8017594:	460b      	mov	r3, r1
 8017596:	4630      	mov	r0, r6
 8017598:	4639      	mov	r1, r7
 801759a:	f7e8 fe85 	bl	80002a8 <__aeabi_dsub>
 801759e:	a360      	add	r3, pc, #384	; (adr r3, 8017720 <__ieee754_rem_pio2+0x2e8>)
 80175a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175a4:	4682      	mov	sl, r0
 80175a6:	468b      	mov	fp, r1
 80175a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80175ac:	f7e9 f834 	bl	8000618 <__aeabi_dmul>
 80175b0:	2d1f      	cmp	r5, #31
 80175b2:	4606      	mov	r6, r0
 80175b4:	460f      	mov	r7, r1
 80175b6:	dc0c      	bgt.n	80175d2 <__ieee754_rem_pio2+0x19a>
 80175b8:	1e6a      	subs	r2, r5, #1
 80175ba:	4b6a      	ldr	r3, [pc, #424]	; (8017764 <__ieee754_rem_pio2+0x32c>)
 80175bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175c0:	4543      	cmp	r3, r8
 80175c2:	d006      	beq.n	80175d2 <__ieee754_rem_pio2+0x19a>
 80175c4:	4632      	mov	r2, r6
 80175c6:	463b      	mov	r3, r7
 80175c8:	4650      	mov	r0, sl
 80175ca:	4659      	mov	r1, fp
 80175cc:	f7e8 fe6c 	bl	80002a8 <__aeabi_dsub>
 80175d0:	e00e      	b.n	80175f0 <__ieee754_rem_pio2+0x1b8>
 80175d2:	4632      	mov	r2, r6
 80175d4:	463b      	mov	r3, r7
 80175d6:	4650      	mov	r0, sl
 80175d8:	4659      	mov	r1, fp
 80175da:	f7e8 fe65 	bl	80002a8 <__aeabi_dsub>
 80175de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80175e2:	9305      	str	r3, [sp, #20]
 80175e4:	9a05      	ldr	r2, [sp, #20]
 80175e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80175ea:	1ad3      	subs	r3, r2, r3
 80175ec:	2b10      	cmp	r3, #16
 80175ee:	dc02      	bgt.n	80175f6 <__ieee754_rem_pio2+0x1be>
 80175f0:	e9c4 0100 	strd	r0, r1, [r4]
 80175f4:	e039      	b.n	801766a <__ieee754_rem_pio2+0x232>
 80175f6:	a34c      	add	r3, pc, #304	; (adr r3, 8017728 <__ieee754_rem_pio2+0x2f0>)
 80175f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017600:	f7e9 f80a 	bl	8000618 <__aeabi_dmul>
 8017604:	4606      	mov	r6, r0
 8017606:	460f      	mov	r7, r1
 8017608:	4602      	mov	r2, r0
 801760a:	460b      	mov	r3, r1
 801760c:	4650      	mov	r0, sl
 801760e:	4659      	mov	r1, fp
 8017610:	f7e8 fe4a 	bl	80002a8 <__aeabi_dsub>
 8017614:	4602      	mov	r2, r0
 8017616:	460b      	mov	r3, r1
 8017618:	4680      	mov	r8, r0
 801761a:	4689      	mov	r9, r1
 801761c:	4650      	mov	r0, sl
 801761e:	4659      	mov	r1, fp
 8017620:	f7e8 fe42 	bl	80002a8 <__aeabi_dsub>
 8017624:	4632      	mov	r2, r6
 8017626:	463b      	mov	r3, r7
 8017628:	f7e8 fe3e 	bl	80002a8 <__aeabi_dsub>
 801762c:	a340      	add	r3, pc, #256	; (adr r3, 8017730 <__ieee754_rem_pio2+0x2f8>)
 801762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017632:	4606      	mov	r6, r0
 8017634:	460f      	mov	r7, r1
 8017636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801763a:	f7e8 ffed 	bl	8000618 <__aeabi_dmul>
 801763e:	4632      	mov	r2, r6
 8017640:	463b      	mov	r3, r7
 8017642:	f7e8 fe31 	bl	80002a8 <__aeabi_dsub>
 8017646:	4602      	mov	r2, r0
 8017648:	460b      	mov	r3, r1
 801764a:	4606      	mov	r6, r0
 801764c:	460f      	mov	r7, r1
 801764e:	4640      	mov	r0, r8
 8017650:	4649      	mov	r1, r9
 8017652:	f7e8 fe29 	bl	80002a8 <__aeabi_dsub>
 8017656:	9a05      	ldr	r2, [sp, #20]
 8017658:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801765c:	1ad3      	subs	r3, r2, r3
 801765e:	2b31      	cmp	r3, #49	; 0x31
 8017660:	dc20      	bgt.n	80176a4 <__ieee754_rem_pio2+0x26c>
 8017662:	e9c4 0100 	strd	r0, r1, [r4]
 8017666:	46c2      	mov	sl, r8
 8017668:	46cb      	mov	fp, r9
 801766a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801766e:	4650      	mov	r0, sl
 8017670:	4642      	mov	r2, r8
 8017672:	464b      	mov	r3, r9
 8017674:	4659      	mov	r1, fp
 8017676:	f7e8 fe17 	bl	80002a8 <__aeabi_dsub>
 801767a:	463b      	mov	r3, r7
 801767c:	4632      	mov	r2, r6
 801767e:	f7e8 fe13 	bl	80002a8 <__aeabi_dsub>
 8017682:	9b04      	ldr	r3, [sp, #16]
 8017684:	2b00      	cmp	r3, #0
 8017686:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801768a:	f6bf af11 	bge.w	80174b0 <__ieee754_rem_pio2+0x78>
 801768e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017692:	6063      	str	r3, [r4, #4]
 8017694:	f8c4 8000 	str.w	r8, [r4]
 8017698:	60a0      	str	r0, [r4, #8]
 801769a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801769e:	60e3      	str	r3, [r4, #12]
 80176a0:	426d      	negs	r5, r5
 80176a2:	e705      	b.n	80174b0 <__ieee754_rem_pio2+0x78>
 80176a4:	a326      	add	r3, pc, #152	; (adr r3, 8017740 <__ieee754_rem_pio2+0x308>)
 80176a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80176ae:	f7e8 ffb3 	bl	8000618 <__aeabi_dmul>
 80176b2:	4606      	mov	r6, r0
 80176b4:	460f      	mov	r7, r1
 80176b6:	4602      	mov	r2, r0
 80176b8:	460b      	mov	r3, r1
 80176ba:	4640      	mov	r0, r8
 80176bc:	4649      	mov	r1, r9
 80176be:	f7e8 fdf3 	bl	80002a8 <__aeabi_dsub>
 80176c2:	4602      	mov	r2, r0
 80176c4:	460b      	mov	r3, r1
 80176c6:	4682      	mov	sl, r0
 80176c8:	468b      	mov	fp, r1
 80176ca:	4640      	mov	r0, r8
 80176cc:	4649      	mov	r1, r9
 80176ce:	f7e8 fdeb 	bl	80002a8 <__aeabi_dsub>
 80176d2:	4632      	mov	r2, r6
 80176d4:	463b      	mov	r3, r7
 80176d6:	f7e8 fde7 	bl	80002a8 <__aeabi_dsub>
 80176da:	a31b      	add	r3, pc, #108	; (adr r3, 8017748 <__ieee754_rem_pio2+0x310>)
 80176dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176e0:	4606      	mov	r6, r0
 80176e2:	460f      	mov	r7, r1
 80176e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80176e8:	f7e8 ff96 	bl	8000618 <__aeabi_dmul>
 80176ec:	4632      	mov	r2, r6
 80176ee:	463b      	mov	r3, r7
 80176f0:	f7e8 fdda 	bl	80002a8 <__aeabi_dsub>
 80176f4:	4606      	mov	r6, r0
 80176f6:	460f      	mov	r7, r1
 80176f8:	e764      	b.n	80175c4 <__ieee754_rem_pio2+0x18c>
 80176fa:	4b1b      	ldr	r3, [pc, #108]	; (8017768 <__ieee754_rem_pio2+0x330>)
 80176fc:	4598      	cmp	r8, r3
 80176fe:	dd35      	ble.n	801776c <__ieee754_rem_pio2+0x334>
 8017700:	ee10 2a10 	vmov	r2, s0
 8017704:	463b      	mov	r3, r7
 8017706:	4630      	mov	r0, r6
 8017708:	4639      	mov	r1, r7
 801770a:	f7e8 fdcd 	bl	80002a8 <__aeabi_dsub>
 801770e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017712:	e9c4 0100 	strd	r0, r1, [r4]
 8017716:	e6a1      	b.n	801745c <__ieee754_rem_pio2+0x24>
 8017718:	54400000 	.word	0x54400000
 801771c:	3ff921fb 	.word	0x3ff921fb
 8017720:	1a626331 	.word	0x1a626331
 8017724:	3dd0b461 	.word	0x3dd0b461
 8017728:	1a600000 	.word	0x1a600000
 801772c:	3dd0b461 	.word	0x3dd0b461
 8017730:	2e037073 	.word	0x2e037073
 8017734:	3ba3198a 	.word	0x3ba3198a
 8017738:	6dc9c883 	.word	0x6dc9c883
 801773c:	3fe45f30 	.word	0x3fe45f30
 8017740:	2e000000 	.word	0x2e000000
 8017744:	3ba3198a 	.word	0x3ba3198a
 8017748:	252049c1 	.word	0x252049c1
 801774c:	397b839a 	.word	0x397b839a
 8017750:	3fe921fb 	.word	0x3fe921fb
 8017754:	4002d97b 	.word	0x4002d97b
 8017758:	3ff921fb 	.word	0x3ff921fb
 801775c:	413921fb 	.word	0x413921fb
 8017760:	3fe00000 	.word	0x3fe00000
 8017764:	08026dac 	.word	0x08026dac
 8017768:	7fefffff 	.word	0x7fefffff
 801776c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8017770:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8017774:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8017778:	4630      	mov	r0, r6
 801777a:	460f      	mov	r7, r1
 801777c:	f7e9 f9fc 	bl	8000b78 <__aeabi_d2iz>
 8017780:	f7e8 fee0 	bl	8000544 <__aeabi_i2d>
 8017784:	4602      	mov	r2, r0
 8017786:	460b      	mov	r3, r1
 8017788:	4630      	mov	r0, r6
 801778a:	4639      	mov	r1, r7
 801778c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017790:	f7e8 fd8a 	bl	80002a8 <__aeabi_dsub>
 8017794:	2200      	movs	r2, #0
 8017796:	4b1f      	ldr	r3, [pc, #124]	; (8017814 <__ieee754_rem_pio2+0x3dc>)
 8017798:	f7e8 ff3e 	bl	8000618 <__aeabi_dmul>
 801779c:	460f      	mov	r7, r1
 801779e:	4606      	mov	r6, r0
 80177a0:	f7e9 f9ea 	bl	8000b78 <__aeabi_d2iz>
 80177a4:	f7e8 fece 	bl	8000544 <__aeabi_i2d>
 80177a8:	4602      	mov	r2, r0
 80177aa:	460b      	mov	r3, r1
 80177ac:	4630      	mov	r0, r6
 80177ae:	4639      	mov	r1, r7
 80177b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80177b4:	f7e8 fd78 	bl	80002a8 <__aeabi_dsub>
 80177b8:	2200      	movs	r2, #0
 80177ba:	4b16      	ldr	r3, [pc, #88]	; (8017814 <__ieee754_rem_pio2+0x3dc>)
 80177bc:	f7e8 ff2c 	bl	8000618 <__aeabi_dmul>
 80177c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80177c4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80177c8:	f04f 0803 	mov.w	r8, #3
 80177cc:	2600      	movs	r6, #0
 80177ce:	2700      	movs	r7, #0
 80177d0:	4632      	mov	r2, r6
 80177d2:	463b      	mov	r3, r7
 80177d4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80177d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80177dc:	f7e9 f984 	bl	8000ae8 <__aeabi_dcmpeq>
 80177e0:	b9b0      	cbnz	r0, 8017810 <__ieee754_rem_pio2+0x3d8>
 80177e2:	4b0d      	ldr	r3, [pc, #52]	; (8017818 <__ieee754_rem_pio2+0x3e0>)
 80177e4:	9301      	str	r3, [sp, #4]
 80177e6:	2302      	movs	r3, #2
 80177e8:	9300      	str	r3, [sp, #0]
 80177ea:	462a      	mov	r2, r5
 80177ec:	4643      	mov	r3, r8
 80177ee:	4621      	mov	r1, r4
 80177f0:	a806      	add	r0, sp, #24
 80177f2:	f000 fd25 	bl	8018240 <__kernel_rem_pio2>
 80177f6:	9b04      	ldr	r3, [sp, #16]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	4605      	mov	r5, r0
 80177fc:	f6bf ae58 	bge.w	80174b0 <__ieee754_rem_pio2+0x78>
 8017800:	6863      	ldr	r3, [r4, #4]
 8017802:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017806:	6063      	str	r3, [r4, #4]
 8017808:	68e3      	ldr	r3, [r4, #12]
 801780a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801780e:	e746      	b.n	801769e <__ieee754_rem_pio2+0x266>
 8017810:	46d0      	mov	r8, sl
 8017812:	e7dd      	b.n	80177d0 <__ieee754_rem_pio2+0x398>
 8017814:	41700000 	.word	0x41700000
 8017818:	08026e2c 	.word	0x08026e2c

0801781c <__ieee754_sqrt>:
 801781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017820:	4955      	ldr	r1, [pc, #340]	; (8017978 <__ieee754_sqrt+0x15c>)
 8017822:	ec55 4b10 	vmov	r4, r5, d0
 8017826:	43a9      	bics	r1, r5
 8017828:	462b      	mov	r3, r5
 801782a:	462a      	mov	r2, r5
 801782c:	d112      	bne.n	8017854 <__ieee754_sqrt+0x38>
 801782e:	ee10 2a10 	vmov	r2, s0
 8017832:	ee10 0a10 	vmov	r0, s0
 8017836:	4629      	mov	r1, r5
 8017838:	f7e8 feee 	bl	8000618 <__aeabi_dmul>
 801783c:	4602      	mov	r2, r0
 801783e:	460b      	mov	r3, r1
 8017840:	4620      	mov	r0, r4
 8017842:	4629      	mov	r1, r5
 8017844:	f7e8 fd32 	bl	80002ac <__adddf3>
 8017848:	4604      	mov	r4, r0
 801784a:	460d      	mov	r5, r1
 801784c:	ec45 4b10 	vmov	d0, r4, r5
 8017850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017854:	2d00      	cmp	r5, #0
 8017856:	ee10 0a10 	vmov	r0, s0
 801785a:	4621      	mov	r1, r4
 801785c:	dc0f      	bgt.n	801787e <__ieee754_sqrt+0x62>
 801785e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017862:	4330      	orrs	r0, r6
 8017864:	d0f2      	beq.n	801784c <__ieee754_sqrt+0x30>
 8017866:	b155      	cbz	r5, 801787e <__ieee754_sqrt+0x62>
 8017868:	ee10 2a10 	vmov	r2, s0
 801786c:	4620      	mov	r0, r4
 801786e:	4629      	mov	r1, r5
 8017870:	f7e8 fd1a 	bl	80002a8 <__aeabi_dsub>
 8017874:	4602      	mov	r2, r0
 8017876:	460b      	mov	r3, r1
 8017878:	f7e8 fff8 	bl	800086c <__aeabi_ddiv>
 801787c:	e7e4      	b.n	8017848 <__ieee754_sqrt+0x2c>
 801787e:	151b      	asrs	r3, r3, #20
 8017880:	d073      	beq.n	801796a <__ieee754_sqrt+0x14e>
 8017882:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017886:	07dd      	lsls	r5, r3, #31
 8017888:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801788c:	bf48      	it	mi
 801788e:	0fc8      	lsrmi	r0, r1, #31
 8017890:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8017894:	bf44      	itt	mi
 8017896:	0049      	lslmi	r1, r1, #1
 8017898:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801789c:	2500      	movs	r5, #0
 801789e:	1058      	asrs	r0, r3, #1
 80178a0:	0fcb      	lsrs	r3, r1, #31
 80178a2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80178a6:	0049      	lsls	r1, r1, #1
 80178a8:	2316      	movs	r3, #22
 80178aa:	462c      	mov	r4, r5
 80178ac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80178b0:	19a7      	adds	r7, r4, r6
 80178b2:	4297      	cmp	r7, r2
 80178b4:	bfde      	ittt	le
 80178b6:	19bc      	addle	r4, r7, r6
 80178b8:	1bd2      	suble	r2, r2, r7
 80178ba:	19ad      	addle	r5, r5, r6
 80178bc:	0fcf      	lsrs	r7, r1, #31
 80178be:	3b01      	subs	r3, #1
 80178c0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80178c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80178c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80178cc:	d1f0      	bne.n	80178b0 <__ieee754_sqrt+0x94>
 80178ce:	f04f 0c20 	mov.w	ip, #32
 80178d2:	469e      	mov	lr, r3
 80178d4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80178d8:	42a2      	cmp	r2, r4
 80178da:	eb06 070e 	add.w	r7, r6, lr
 80178de:	dc02      	bgt.n	80178e6 <__ieee754_sqrt+0xca>
 80178e0:	d112      	bne.n	8017908 <__ieee754_sqrt+0xec>
 80178e2:	428f      	cmp	r7, r1
 80178e4:	d810      	bhi.n	8017908 <__ieee754_sqrt+0xec>
 80178e6:	2f00      	cmp	r7, #0
 80178e8:	eb07 0e06 	add.w	lr, r7, r6
 80178ec:	da42      	bge.n	8017974 <__ieee754_sqrt+0x158>
 80178ee:	f1be 0f00 	cmp.w	lr, #0
 80178f2:	db3f      	blt.n	8017974 <__ieee754_sqrt+0x158>
 80178f4:	f104 0801 	add.w	r8, r4, #1
 80178f8:	1b12      	subs	r2, r2, r4
 80178fa:	428f      	cmp	r7, r1
 80178fc:	bf88      	it	hi
 80178fe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017902:	1bc9      	subs	r1, r1, r7
 8017904:	4433      	add	r3, r6
 8017906:	4644      	mov	r4, r8
 8017908:	0052      	lsls	r2, r2, #1
 801790a:	f1bc 0c01 	subs.w	ip, ip, #1
 801790e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8017912:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017916:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801791a:	d1dd      	bne.n	80178d8 <__ieee754_sqrt+0xbc>
 801791c:	430a      	orrs	r2, r1
 801791e:	d006      	beq.n	801792e <__ieee754_sqrt+0x112>
 8017920:	1c5c      	adds	r4, r3, #1
 8017922:	bf13      	iteet	ne
 8017924:	3301      	addne	r3, #1
 8017926:	3501      	addeq	r5, #1
 8017928:	4663      	moveq	r3, ip
 801792a:	f023 0301 	bicne.w	r3, r3, #1
 801792e:	106a      	asrs	r2, r5, #1
 8017930:	085b      	lsrs	r3, r3, #1
 8017932:	07e9      	lsls	r1, r5, #31
 8017934:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017938:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801793c:	bf48      	it	mi
 801793e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8017942:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8017946:	461c      	mov	r4, r3
 8017948:	e780      	b.n	801784c <__ieee754_sqrt+0x30>
 801794a:	0aca      	lsrs	r2, r1, #11
 801794c:	3815      	subs	r0, #21
 801794e:	0549      	lsls	r1, r1, #21
 8017950:	2a00      	cmp	r2, #0
 8017952:	d0fa      	beq.n	801794a <__ieee754_sqrt+0x12e>
 8017954:	02d6      	lsls	r6, r2, #11
 8017956:	d50a      	bpl.n	801796e <__ieee754_sqrt+0x152>
 8017958:	f1c3 0420 	rsb	r4, r3, #32
 801795c:	fa21 f404 	lsr.w	r4, r1, r4
 8017960:	1e5d      	subs	r5, r3, #1
 8017962:	4099      	lsls	r1, r3
 8017964:	4322      	orrs	r2, r4
 8017966:	1b43      	subs	r3, r0, r5
 8017968:	e78b      	b.n	8017882 <__ieee754_sqrt+0x66>
 801796a:	4618      	mov	r0, r3
 801796c:	e7f0      	b.n	8017950 <__ieee754_sqrt+0x134>
 801796e:	0052      	lsls	r2, r2, #1
 8017970:	3301      	adds	r3, #1
 8017972:	e7ef      	b.n	8017954 <__ieee754_sqrt+0x138>
 8017974:	46a0      	mov	r8, r4
 8017976:	e7bf      	b.n	80178f8 <__ieee754_sqrt+0xdc>
 8017978:	7ff00000 	.word	0x7ff00000

0801797c <__ieee754_expf>:
 801797c:	ee10 2a10 	vmov	r2, s0
 8017980:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8017984:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017988:	d902      	bls.n	8017990 <__ieee754_expf+0x14>
 801798a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801798e:	4770      	bx	lr
 8017990:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8017994:	d106      	bne.n	80179a4 <__ieee754_expf+0x28>
 8017996:	eddf 7a51 	vldr	s15, [pc, #324]	; 8017adc <__ieee754_expf+0x160>
 801799a:	2b00      	cmp	r3, #0
 801799c:	bf18      	it	ne
 801799e:	eeb0 0a67 	vmovne.f32	s0, s15
 80179a2:	4770      	bx	lr
 80179a4:	484e      	ldr	r0, [pc, #312]	; (8017ae0 <__ieee754_expf+0x164>)
 80179a6:	4282      	cmp	r2, r0
 80179a8:	dd04      	ble.n	80179b4 <__ieee754_expf+0x38>
 80179aa:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8017ae4 <__ieee754_expf+0x168>
 80179ae:	ee20 0a00 	vmul.f32	s0, s0, s0
 80179b2:	4770      	bx	lr
 80179b4:	2a00      	cmp	r2, #0
 80179b6:	da03      	bge.n	80179c0 <__ieee754_expf+0x44>
 80179b8:	4a4b      	ldr	r2, [pc, #300]	; (8017ae8 <__ieee754_expf+0x16c>)
 80179ba:	4291      	cmp	r1, r2
 80179bc:	f200 808a 	bhi.w	8017ad4 <__ieee754_expf+0x158>
 80179c0:	4a4a      	ldr	r2, [pc, #296]	; (8017aec <__ieee754_expf+0x170>)
 80179c2:	4291      	cmp	r1, r2
 80179c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80179c8:	d954      	bls.n	8017a74 <__ieee754_expf+0xf8>
 80179ca:	4a49      	ldr	r2, [pc, #292]	; (8017af0 <__ieee754_expf+0x174>)
 80179cc:	4291      	cmp	r1, r2
 80179ce:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80179d2:	d836      	bhi.n	8017a42 <__ieee754_expf+0xc6>
 80179d4:	4947      	ldr	r1, [pc, #284]	; (8017af4 <__ieee754_expf+0x178>)
 80179d6:	4411      	add	r1, r2
 80179d8:	ed91 7a00 	vldr	s14, [r1]
 80179dc:	4946      	ldr	r1, [pc, #280]	; (8017af8 <__ieee754_expf+0x17c>)
 80179de:	440a      	add	r2, r1
 80179e0:	edd2 7a00 	vldr	s15, [r2]
 80179e4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80179e8:	f1c3 0201 	rsb	r2, r3, #1
 80179ec:	1ad2      	subs	r2, r2, r3
 80179ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 80179f2:	ee60 6a00 	vmul.f32	s13, s0, s0
 80179f6:	eddf 5a41 	vldr	s11, [pc, #260]	; 8017afc <__ieee754_expf+0x180>
 80179fa:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8017b00 <__ieee754_expf+0x184>
 80179fe:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8017a02:	eddf 5a40 	vldr	s11, [pc, #256]	; 8017b04 <__ieee754_expf+0x188>
 8017a06:	eee5 5a26 	vfma.f32	s11, s10, s13
 8017a0a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8017b08 <__ieee754_expf+0x18c>
 8017a0e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8017a12:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8017b0c <__ieee754_expf+0x190>
 8017a16:	eee5 5a26 	vfma.f32	s11, s10, s13
 8017a1a:	eeb0 5a40 	vmov.f32	s10, s0
 8017a1e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8017a22:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8017a26:	eef0 6a45 	vmov.f32	s13, s10
 8017a2a:	ee20 5a05 	vmul.f32	s10, s0, s10
 8017a2e:	bb92      	cbnz	r2, 8017a96 <__ieee754_expf+0x11a>
 8017a30:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8017a34:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8017a38:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017a3c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8017a40:	4770      	bx	lr
 8017a42:	4b33      	ldr	r3, [pc, #204]	; (8017b10 <__ieee754_expf+0x194>)
 8017a44:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8017b14 <__ieee754_expf+0x198>
 8017a48:	4413      	add	r3, r2
 8017a4a:	edd3 7a00 	vldr	s15, [r3]
 8017a4e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017a52:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8017b18 <__ieee754_expf+0x19c>
 8017a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a5a:	ee17 2a90 	vmov	r2, s15
 8017a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a62:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017a66:	eeb0 7a40 	vmov.f32	s14, s0
 8017a6a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8017b1c <__ieee754_expf+0x1a0>
 8017a6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017a72:	e7bc      	b.n	80179ee <__ieee754_expf+0x72>
 8017a74:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8017a78:	d20b      	bcs.n	8017a92 <__ieee754_expf+0x116>
 8017a7a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8017ae4 <__ieee754_expf+0x168>
 8017a7e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8017a82:	eef4 6ac6 	vcmpe.f32	s13, s12
 8017a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a8a:	dd02      	ble.n	8017a92 <__ieee754_expf+0x116>
 8017a8c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8017a90:	4770      	bx	lr
 8017a92:	2200      	movs	r2, #0
 8017a94:	e7ad      	b.n	80179f2 <__ieee754_expf+0x76>
 8017a96:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8017a9a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8017a9e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8017aa2:	bfb8      	it	lt
 8017aa4:	3264      	addlt	r2, #100	; 0x64
 8017aa6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017aaa:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8017aae:	ee76 7a40 	vsub.f32	s15, s12, s0
 8017ab2:	ee17 3a90 	vmov	r3, s15
 8017ab6:	bfab      	itete	ge
 8017ab8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8017abc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8017ac0:	ee00 3a10 	vmovge	s0, r3
 8017ac4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8017b20 <__ieee754_expf+0x1a4>
 8017ac8:	bfbc      	itt	lt
 8017aca:	ee00 3a10 	vmovlt	s0, r3
 8017ace:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8017ad2:	4770      	bx	lr
 8017ad4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017adc <__ieee754_expf+0x160>
 8017ad8:	4770      	bx	lr
 8017ada:	bf00      	nop
 8017adc:	00000000 	.word	0x00000000
 8017ae0:	42b17217 	.word	0x42b17217
 8017ae4:	7149f2ca 	.word	0x7149f2ca
 8017ae8:	42cff1b5 	.word	0x42cff1b5
 8017aec:	3eb17218 	.word	0x3eb17218
 8017af0:	3f851591 	.word	0x3f851591
 8017af4:	08026f3c 	.word	0x08026f3c
 8017af8:	08026f44 	.word	0x08026f44
 8017afc:	3331bb4c 	.word	0x3331bb4c
 8017b00:	b5ddea0e 	.word	0xb5ddea0e
 8017b04:	388ab355 	.word	0x388ab355
 8017b08:	bb360b61 	.word	0xbb360b61
 8017b0c:	3e2aaaab 	.word	0x3e2aaaab
 8017b10:	08026f34 	.word	0x08026f34
 8017b14:	3fb8aa3b 	.word	0x3fb8aa3b
 8017b18:	3f317180 	.word	0x3f317180
 8017b1c:	3717f7d1 	.word	0x3717f7d1
 8017b20:	0d800000 	.word	0x0d800000

08017b24 <__ieee754_powf>:
 8017b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b28:	ee10 5a90 	vmov	r5, s1
 8017b2c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8017b30:	ed2d 8b02 	vpush	{d8}
 8017b34:	eeb0 8a40 	vmov.f32	s16, s0
 8017b38:	eef0 8a60 	vmov.f32	s17, s1
 8017b3c:	f000 8293 	beq.w	8018066 <__ieee754_powf+0x542>
 8017b40:	ee10 8a10 	vmov	r8, s0
 8017b44:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8017b48:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8017b4c:	dc06      	bgt.n	8017b5c <__ieee754_powf+0x38>
 8017b4e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8017b52:	dd0a      	ble.n	8017b6a <__ieee754_powf+0x46>
 8017b54:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8017b58:	f000 8285 	beq.w	8018066 <__ieee754_powf+0x542>
 8017b5c:	ecbd 8b02 	vpop	{d8}
 8017b60:	48d9      	ldr	r0, [pc, #868]	; (8017ec8 <__ieee754_powf+0x3a4>)
 8017b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b66:	f000 bffb 	b.w	8018b60 <nanf>
 8017b6a:	f1b8 0f00 	cmp.w	r8, #0
 8017b6e:	da1d      	bge.n	8017bac <__ieee754_powf+0x88>
 8017b70:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8017b74:	da2c      	bge.n	8017bd0 <__ieee754_powf+0xac>
 8017b76:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8017b7a:	db30      	blt.n	8017bde <__ieee754_powf+0xba>
 8017b7c:	15fb      	asrs	r3, r7, #23
 8017b7e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8017b82:	fa47 f603 	asr.w	r6, r7, r3
 8017b86:	fa06 f303 	lsl.w	r3, r6, r3
 8017b8a:	42bb      	cmp	r3, r7
 8017b8c:	d127      	bne.n	8017bde <__ieee754_powf+0xba>
 8017b8e:	f006 0601 	and.w	r6, r6, #1
 8017b92:	f1c6 0602 	rsb	r6, r6, #2
 8017b96:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8017b9a:	d122      	bne.n	8017be2 <__ieee754_powf+0xbe>
 8017b9c:	2d00      	cmp	r5, #0
 8017b9e:	f280 8268 	bge.w	8018072 <__ieee754_powf+0x54e>
 8017ba2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017ba6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8017baa:	e00d      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8017bac:	2600      	movs	r6, #0
 8017bae:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8017bb2:	d1f0      	bne.n	8017b96 <__ieee754_powf+0x72>
 8017bb4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8017bb8:	f000 8255 	beq.w	8018066 <__ieee754_powf+0x542>
 8017bbc:	dd0a      	ble.n	8017bd4 <__ieee754_powf+0xb0>
 8017bbe:	2d00      	cmp	r5, #0
 8017bc0:	f280 8254 	bge.w	801806c <__ieee754_powf+0x548>
 8017bc4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8017ecc <__ieee754_powf+0x3a8>
 8017bc8:	ecbd 8b02 	vpop	{d8}
 8017bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bd0:	2602      	movs	r6, #2
 8017bd2:	e7ec      	b.n	8017bae <__ieee754_powf+0x8a>
 8017bd4:	2d00      	cmp	r5, #0
 8017bd6:	daf5      	bge.n	8017bc4 <__ieee754_powf+0xa0>
 8017bd8:	eeb1 0a68 	vneg.f32	s0, s17
 8017bdc:	e7f4      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8017bde:	2600      	movs	r6, #0
 8017be0:	e7d9      	b.n	8017b96 <__ieee754_powf+0x72>
 8017be2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8017be6:	d102      	bne.n	8017bee <__ieee754_powf+0xca>
 8017be8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8017bec:	e7ec      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8017bee:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8017bf2:	eeb0 0a48 	vmov.f32	s0, s16
 8017bf6:	d108      	bne.n	8017c0a <__ieee754_powf+0xe6>
 8017bf8:	f1b8 0f00 	cmp.w	r8, #0
 8017bfc:	db05      	blt.n	8017c0a <__ieee754_powf+0xe6>
 8017bfe:	ecbd 8b02 	vpop	{d8}
 8017c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c06:	f000 ba4d 	b.w	80180a4 <__ieee754_sqrtf>
 8017c0a:	f000 ff97 	bl	8018b3c <fabsf>
 8017c0e:	b124      	cbz	r4, 8017c1a <__ieee754_powf+0xf6>
 8017c10:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8017c14:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8017c18:	d117      	bne.n	8017c4a <__ieee754_powf+0x126>
 8017c1a:	2d00      	cmp	r5, #0
 8017c1c:	bfbc      	itt	lt
 8017c1e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8017c22:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8017c26:	f1b8 0f00 	cmp.w	r8, #0
 8017c2a:	dacd      	bge.n	8017bc8 <__ieee754_powf+0xa4>
 8017c2c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8017c30:	ea54 0306 	orrs.w	r3, r4, r6
 8017c34:	d104      	bne.n	8017c40 <__ieee754_powf+0x11c>
 8017c36:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017c3a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8017c3e:	e7c3      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8017c40:	2e01      	cmp	r6, #1
 8017c42:	d1c1      	bne.n	8017bc8 <__ieee754_powf+0xa4>
 8017c44:	eeb1 0a40 	vneg.f32	s0, s0
 8017c48:	e7be      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8017c4a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8017c4e:	3801      	subs	r0, #1
 8017c50:	ea56 0300 	orrs.w	r3, r6, r0
 8017c54:	d104      	bne.n	8017c60 <__ieee754_powf+0x13c>
 8017c56:	ee38 8a48 	vsub.f32	s16, s16, s16
 8017c5a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8017c5e:	e7b3      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8017c60:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8017c64:	dd6d      	ble.n	8017d42 <__ieee754_powf+0x21e>
 8017c66:	4b9a      	ldr	r3, [pc, #616]	; (8017ed0 <__ieee754_powf+0x3ac>)
 8017c68:	429c      	cmp	r4, r3
 8017c6a:	dc06      	bgt.n	8017c7a <__ieee754_powf+0x156>
 8017c6c:	2d00      	cmp	r5, #0
 8017c6e:	daa9      	bge.n	8017bc4 <__ieee754_powf+0xa0>
 8017c70:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8017ed4 <__ieee754_powf+0x3b0>
 8017c74:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017c78:	e7a6      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8017c7a:	4b97      	ldr	r3, [pc, #604]	; (8017ed8 <__ieee754_powf+0x3b4>)
 8017c7c:	429c      	cmp	r4, r3
 8017c7e:	dd02      	ble.n	8017c86 <__ieee754_powf+0x162>
 8017c80:	2d00      	cmp	r5, #0
 8017c82:	dcf5      	bgt.n	8017c70 <__ieee754_powf+0x14c>
 8017c84:	e79e      	b.n	8017bc4 <__ieee754_powf+0xa0>
 8017c86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017c8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017c8e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8017edc <__ieee754_powf+0x3b8>
 8017c92:	eef1 6a40 	vneg.f32	s13, s0
 8017c96:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8017c9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017c9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017ca2:	eee7 7a40 	vfms.f32	s15, s14, s0
 8017ca6:	ee60 0a00 	vmul.f32	s1, s0, s0
 8017caa:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8017ee0 <__ieee754_powf+0x3bc>
 8017cae:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8017cb2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8017ee4 <__ieee754_powf+0x3c0>
 8017cb6:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8017cba:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017cbe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8017ee8 <__ieee754_powf+0x3c4>
 8017cc2:	eeb0 6a67 	vmov.f32	s12, s15
 8017cc6:	eea0 6a07 	vfma.f32	s12, s0, s14
 8017cca:	ee16 3a10 	vmov	r3, s12
 8017cce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8017cd2:	f023 030f 	bic.w	r3, r3, #15
 8017cd6:	ee00 3a90 	vmov	s1, r3
 8017cda:	eee6 0a87 	vfma.f32	s1, s13, s14
 8017cde:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017ce2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8017ce6:	f025 050f 	bic.w	r5, r5, #15
 8017cea:	ee07 5a10 	vmov	s14, r5
 8017cee:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8017cf2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8017cf6:	ee07 3a90 	vmov	s15, r3
 8017cfa:	eee7 0a27 	vfma.f32	s1, s14, s15
 8017cfe:	3e01      	subs	r6, #1
 8017d00:	ea56 0200 	orrs.w	r2, r6, r0
 8017d04:	ee07 5a10 	vmov	s14, r5
 8017d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017d0c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8017d10:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8017d14:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8017d18:	ee17 4a10 	vmov	r4, s14
 8017d1c:	bf08      	it	eq
 8017d1e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8017d22:	2c00      	cmp	r4, #0
 8017d24:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017d28:	f340 8184 	ble.w	8018034 <__ieee754_powf+0x510>
 8017d2c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8017d30:	f340 80fc 	ble.w	8017f2c <__ieee754_powf+0x408>
 8017d34:	eddf 7a67 	vldr	s15, [pc, #412]	; 8017ed4 <__ieee754_powf+0x3b0>
 8017d38:	ee28 0a27 	vmul.f32	s0, s16, s15
 8017d3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017d40:	e742      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8017d42:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8017d46:	bfbf      	itttt	lt
 8017d48:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8017eec <__ieee754_powf+0x3c8>
 8017d4c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8017d50:	f06f 0217 	mvnlt.w	r2, #23
 8017d54:	ee17 4a90 	vmovlt	r4, s15
 8017d58:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8017d5c:	bfa8      	it	ge
 8017d5e:	2200      	movge	r2, #0
 8017d60:	3b7f      	subs	r3, #127	; 0x7f
 8017d62:	4413      	add	r3, r2
 8017d64:	4a62      	ldr	r2, [pc, #392]	; (8017ef0 <__ieee754_powf+0x3cc>)
 8017d66:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8017d6a:	4294      	cmp	r4, r2
 8017d6c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8017d70:	dd06      	ble.n	8017d80 <__ieee754_powf+0x25c>
 8017d72:	4a60      	ldr	r2, [pc, #384]	; (8017ef4 <__ieee754_powf+0x3d0>)
 8017d74:	4294      	cmp	r4, r2
 8017d76:	f340 80a5 	ble.w	8017ec4 <__ieee754_powf+0x3a0>
 8017d7a:	3301      	adds	r3, #1
 8017d7c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8017d80:	2400      	movs	r4, #0
 8017d82:	4a5d      	ldr	r2, [pc, #372]	; (8017ef8 <__ieee754_powf+0x3d4>)
 8017d84:	00a7      	lsls	r7, r4, #2
 8017d86:	443a      	add	r2, r7
 8017d88:	ee07 1a90 	vmov	s15, r1
 8017d8c:	ed92 7a00 	vldr	s14, [r2]
 8017d90:	4a5a      	ldr	r2, [pc, #360]	; (8017efc <__ieee754_powf+0x3d8>)
 8017d92:	ee37 6a27 	vadd.f32	s12, s14, s15
 8017d96:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8017d9a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8017d9e:	1049      	asrs	r1, r1, #1
 8017da0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8017da4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8017da8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8017dac:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8017db0:	ee06 1a10 	vmov	s12, r1
 8017db4:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8017db8:	ee14 ca90 	vmov	ip, s9
 8017dbc:	ea02 0c0c 	and.w	ip, r2, ip
 8017dc0:	ee05 ca10 	vmov	s10, ip
 8017dc4:	eeb1 4a45 	vneg.f32	s8, s10
 8017dc8:	eee4 5a06 	vfma.f32	s11, s8, s12
 8017dcc:	ee36 6a47 	vsub.f32	s12, s12, s14
 8017dd0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8017f00 <__ieee754_powf+0x3dc>
 8017dd4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017dd8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8017ddc:	eee4 5a06 	vfma.f32	s11, s8, s12
 8017de0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8017de4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8017de8:	eddf 5a46 	vldr	s11, [pc, #280]	; 8017f04 <__ieee754_powf+0x3e0>
 8017dec:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8017df0:	eddf 5a45 	vldr	s11, [pc, #276]	; 8017f08 <__ieee754_powf+0x3e4>
 8017df4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8017df8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8017edc <__ieee754_powf+0x3b8>
 8017dfc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017e00:	eddf 5a42 	vldr	s11, [pc, #264]	; 8017f0c <__ieee754_powf+0x3e8>
 8017e04:	eee7 5a27 	vfma.f32	s11, s14, s15
 8017e08:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8017f10 <__ieee754_powf+0x3ec>
 8017e0c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8017e10:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017e14:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017e18:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8017e1c:	eef0 7a65 	vmov.f32	s15, s11
 8017e20:	eee3 6a87 	vfma.f32	s13, s7, s14
 8017e24:	eee5 7a05 	vfma.f32	s15, s10, s10
 8017e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017e2c:	ee17 1a90 	vmov	r1, s15
 8017e30:	4011      	ands	r1, r2
 8017e32:	ee07 1a90 	vmov	s15, r1
 8017e36:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8017e3a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8017f14 <__ieee754_powf+0x3f0>
 8017e3e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8017e42:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8017e46:	ee27 7a24 	vmul.f32	s14, s14, s9
 8017e4a:	eea7 7a86 	vfma.f32	s14, s15, s12
 8017e4e:	eeb0 6a47 	vmov.f32	s12, s14
 8017e52:	eea5 6a27 	vfma.f32	s12, s10, s15
 8017e56:	ee16 1a10 	vmov	r1, s12
 8017e5a:	4011      	ands	r1, r2
 8017e5c:	ee06 1a90 	vmov	s13, r1
 8017e60:	eee4 6a27 	vfma.f32	s13, s8, s15
 8017e64:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8017f18 <__ieee754_powf+0x3f4>
 8017e68:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017e6c:	ee06 1a10 	vmov	s12, r1
 8017e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017e74:	eddf 7a29 	vldr	s15, [pc, #164]	; 8017f1c <__ieee754_powf+0x3f8>
 8017e78:	4929      	ldr	r1, [pc, #164]	; (8017f20 <__ieee754_powf+0x3fc>)
 8017e7a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017e7e:	4439      	add	r1, r7
 8017e80:	edd1 7a00 	vldr	s15, [r1]
 8017e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017e88:	ee07 3a90 	vmov	s15, r3
 8017e8c:	eef0 0a47 	vmov.f32	s1, s14
 8017e90:	4b24      	ldr	r3, [pc, #144]	; (8017f24 <__ieee754_powf+0x400>)
 8017e92:	eee6 0a25 	vfma.f32	s1, s12, s11
 8017e96:	443b      	add	r3, r7
 8017e98:	ed93 5a00 	vldr	s10, [r3]
 8017e9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017ea0:	ee70 0a85 	vadd.f32	s1, s1, s10
 8017ea4:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8017ea8:	ee17 3a90 	vmov	r3, s15
 8017eac:	4013      	ands	r3, r2
 8017eae:	ee07 3a90 	vmov	s15, r3
 8017eb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017eb6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8017eba:	eee6 7a65 	vfms.f32	s15, s12, s11
 8017ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ec2:	e70e      	b.n	8017ce2 <__ieee754_powf+0x1be>
 8017ec4:	2401      	movs	r4, #1
 8017ec6:	e75c      	b.n	8017d82 <__ieee754_powf+0x25e>
 8017ec8:	08026ffb 	.word	0x08026ffb
 8017ecc:	00000000 	.word	0x00000000
 8017ed0:	3f7ffff7 	.word	0x3f7ffff7
 8017ed4:	7149f2ca 	.word	0x7149f2ca
 8017ed8:	3f800007 	.word	0x3f800007
 8017edc:	3eaaaaab 	.word	0x3eaaaaab
 8017ee0:	36eca570 	.word	0x36eca570
 8017ee4:	3fb8aa3b 	.word	0x3fb8aa3b
 8017ee8:	3fb8aa00 	.word	0x3fb8aa00
 8017eec:	4b800000 	.word	0x4b800000
 8017ef0:	001cc471 	.word	0x001cc471
 8017ef4:	005db3d6 	.word	0x005db3d6
 8017ef8:	08026f4c 	.word	0x08026f4c
 8017efc:	fffff000 	.word	0xfffff000
 8017f00:	3e6c3255 	.word	0x3e6c3255
 8017f04:	3e53f142 	.word	0x3e53f142
 8017f08:	3e8ba305 	.word	0x3e8ba305
 8017f0c:	3edb6db7 	.word	0x3edb6db7
 8017f10:	3f19999a 	.word	0x3f19999a
 8017f14:	3f763800 	.word	0x3f763800
 8017f18:	3f76384f 	.word	0x3f76384f
 8017f1c:	369dc3a0 	.word	0x369dc3a0
 8017f20:	08026f5c 	.word	0x08026f5c
 8017f24:	08026f54 	.word	0x08026f54
 8017f28:	3338aa3c 	.word	0x3338aa3c
 8017f2c:	f040 8092 	bne.w	8018054 <__ieee754_powf+0x530>
 8017f30:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8017f28 <__ieee754_powf+0x404>
 8017f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017f38:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8017f3c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f44:	f73f aef6 	bgt.w	8017d34 <__ieee754_powf+0x210>
 8017f48:	15db      	asrs	r3, r3, #23
 8017f4a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8017f4e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8017f52:	4103      	asrs	r3, r0
 8017f54:	4423      	add	r3, r4
 8017f56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017f5a:	4947      	ldr	r1, [pc, #284]	; (8018078 <__ieee754_powf+0x554>)
 8017f5c:	3a7f      	subs	r2, #127	; 0x7f
 8017f5e:	4111      	asrs	r1, r2
 8017f60:	ea23 0101 	bic.w	r1, r3, r1
 8017f64:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8017f68:	ee07 1a10 	vmov	s14, r1
 8017f6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8017f70:	f1c2 0217 	rsb	r2, r2, #23
 8017f74:	4110      	asrs	r0, r2
 8017f76:	2c00      	cmp	r4, #0
 8017f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017f7c:	bfb8      	it	lt
 8017f7e:	4240      	neglt	r0, r0
 8017f80:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8017f84:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801807c <__ieee754_powf+0x558>
 8017f88:	ee17 3a10 	vmov	r3, s14
 8017f8c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8017f90:	f023 030f 	bic.w	r3, r3, #15
 8017f94:	ee07 3a10 	vmov	s14, r3
 8017f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017f9c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8017fa0:	eddf 7a37 	vldr	s15, [pc, #220]	; 8018080 <__ieee754_powf+0x55c>
 8017fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017fa8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8017fac:	eddf 6a35 	vldr	s13, [pc, #212]	; 8018084 <__ieee754_powf+0x560>
 8017fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8017fb4:	eea7 0a26 	vfma.f32	s0, s14, s13
 8017fb8:	eeb0 6a40 	vmov.f32	s12, s0
 8017fbc:	eea7 6a66 	vfms.f32	s12, s14, s13
 8017fc0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017fc4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017fc8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8018088 <__ieee754_powf+0x564>
 8017fcc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801808c <__ieee754_powf+0x568>
 8017fd0:	eea7 6a26 	vfma.f32	s12, s14, s13
 8017fd4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8018090 <__ieee754_powf+0x56c>
 8017fd8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017fdc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8018094 <__ieee754_powf+0x570>
 8017fe0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017fe4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8018098 <__ieee754_powf+0x574>
 8017fe8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017fec:	eeb0 6a40 	vmov.f32	s12, s0
 8017ff0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8017ff4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017ff8:	eeb0 7a46 	vmov.f32	s14, s12
 8017ffc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8018000:	ee20 6a06 	vmul.f32	s12, s0, s12
 8018004:	eee0 7a27 	vfma.f32	s15, s0, s15
 8018008:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801800c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018010:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018014:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018018:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801801c:	ee10 3a10 	vmov	r3, s0
 8018020:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8018024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018028:	da1a      	bge.n	8018060 <__ieee754_powf+0x53c>
 801802a:	f000 fdf9 	bl	8018c20 <scalbnf>
 801802e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018032:	e5c9      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8018034:	4a19      	ldr	r2, [pc, #100]	; (801809c <__ieee754_powf+0x578>)
 8018036:	4293      	cmp	r3, r2
 8018038:	dd02      	ble.n	8018040 <__ieee754_powf+0x51c>
 801803a:	eddf 7a19 	vldr	s15, [pc, #100]	; 80180a0 <__ieee754_powf+0x57c>
 801803e:	e67b      	b.n	8017d38 <__ieee754_powf+0x214>
 8018040:	d108      	bne.n	8018054 <__ieee754_powf+0x530>
 8018042:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018046:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801804a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801804e:	f6ff af7b 	blt.w	8017f48 <__ieee754_powf+0x424>
 8018052:	e7f2      	b.n	801803a <__ieee754_powf+0x516>
 8018054:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8018058:	f73f af76 	bgt.w	8017f48 <__ieee754_powf+0x424>
 801805c:	2000      	movs	r0, #0
 801805e:	e78f      	b.n	8017f80 <__ieee754_powf+0x45c>
 8018060:	ee00 3a10 	vmov	s0, r3
 8018064:	e7e3      	b.n	801802e <__ieee754_powf+0x50a>
 8018066:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801806a:	e5ad      	b.n	8017bc8 <__ieee754_powf+0xa4>
 801806c:	eeb0 0a68 	vmov.f32	s0, s17
 8018070:	e5aa      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8018072:	eeb0 0a48 	vmov.f32	s0, s16
 8018076:	e5a7      	b.n	8017bc8 <__ieee754_powf+0xa4>
 8018078:	007fffff 	.word	0x007fffff
 801807c:	3f317218 	.word	0x3f317218
 8018080:	35bfbe8c 	.word	0x35bfbe8c
 8018084:	3f317200 	.word	0x3f317200
 8018088:	3331bb4c 	.word	0x3331bb4c
 801808c:	b5ddea0e 	.word	0xb5ddea0e
 8018090:	388ab355 	.word	0x388ab355
 8018094:	bb360b61 	.word	0xbb360b61
 8018098:	3e2aaaab 	.word	0x3e2aaaab
 801809c:	43160000 	.word	0x43160000
 80180a0:	0da24260 	.word	0x0da24260

080180a4 <__ieee754_sqrtf>:
 80180a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80180a8:	4770      	bx	lr
 80180aa:	0000      	movs	r0, r0
 80180ac:	0000      	movs	r0, r0
	...

080180b0 <__kernel_cos>:
 80180b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b4:	ec59 8b10 	vmov	r8, r9, d0
 80180b8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80180bc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80180c0:	ed2d 8b02 	vpush	{d8}
 80180c4:	eeb0 8a41 	vmov.f32	s16, s2
 80180c8:	eef0 8a61 	vmov.f32	s17, s3
 80180cc:	da07      	bge.n	80180de <__kernel_cos+0x2e>
 80180ce:	ee10 0a10 	vmov	r0, s0
 80180d2:	4649      	mov	r1, r9
 80180d4:	f7e8 fd50 	bl	8000b78 <__aeabi_d2iz>
 80180d8:	2800      	cmp	r0, #0
 80180da:	f000 8089 	beq.w	80181f0 <__kernel_cos+0x140>
 80180de:	4642      	mov	r2, r8
 80180e0:	464b      	mov	r3, r9
 80180e2:	4640      	mov	r0, r8
 80180e4:	4649      	mov	r1, r9
 80180e6:	f7e8 fa97 	bl	8000618 <__aeabi_dmul>
 80180ea:	2200      	movs	r2, #0
 80180ec:	4b4e      	ldr	r3, [pc, #312]	; (8018228 <__kernel_cos+0x178>)
 80180ee:	4604      	mov	r4, r0
 80180f0:	460d      	mov	r5, r1
 80180f2:	f7e8 fa91 	bl	8000618 <__aeabi_dmul>
 80180f6:	a340      	add	r3, pc, #256	; (adr r3, 80181f8 <__kernel_cos+0x148>)
 80180f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180fc:	4682      	mov	sl, r0
 80180fe:	468b      	mov	fp, r1
 8018100:	4620      	mov	r0, r4
 8018102:	4629      	mov	r1, r5
 8018104:	f7e8 fa88 	bl	8000618 <__aeabi_dmul>
 8018108:	a33d      	add	r3, pc, #244	; (adr r3, 8018200 <__kernel_cos+0x150>)
 801810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801810e:	f7e8 f8cd 	bl	80002ac <__adddf3>
 8018112:	4622      	mov	r2, r4
 8018114:	462b      	mov	r3, r5
 8018116:	f7e8 fa7f 	bl	8000618 <__aeabi_dmul>
 801811a:	a33b      	add	r3, pc, #236	; (adr r3, 8018208 <__kernel_cos+0x158>)
 801811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018120:	f7e8 f8c2 	bl	80002a8 <__aeabi_dsub>
 8018124:	4622      	mov	r2, r4
 8018126:	462b      	mov	r3, r5
 8018128:	f7e8 fa76 	bl	8000618 <__aeabi_dmul>
 801812c:	a338      	add	r3, pc, #224	; (adr r3, 8018210 <__kernel_cos+0x160>)
 801812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018132:	f7e8 f8bb 	bl	80002ac <__adddf3>
 8018136:	4622      	mov	r2, r4
 8018138:	462b      	mov	r3, r5
 801813a:	f7e8 fa6d 	bl	8000618 <__aeabi_dmul>
 801813e:	a336      	add	r3, pc, #216	; (adr r3, 8018218 <__kernel_cos+0x168>)
 8018140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018144:	f7e8 f8b0 	bl	80002a8 <__aeabi_dsub>
 8018148:	4622      	mov	r2, r4
 801814a:	462b      	mov	r3, r5
 801814c:	f7e8 fa64 	bl	8000618 <__aeabi_dmul>
 8018150:	a333      	add	r3, pc, #204	; (adr r3, 8018220 <__kernel_cos+0x170>)
 8018152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018156:	f7e8 f8a9 	bl	80002ac <__adddf3>
 801815a:	4622      	mov	r2, r4
 801815c:	462b      	mov	r3, r5
 801815e:	f7e8 fa5b 	bl	8000618 <__aeabi_dmul>
 8018162:	4622      	mov	r2, r4
 8018164:	462b      	mov	r3, r5
 8018166:	f7e8 fa57 	bl	8000618 <__aeabi_dmul>
 801816a:	ec53 2b18 	vmov	r2, r3, d8
 801816e:	4604      	mov	r4, r0
 8018170:	460d      	mov	r5, r1
 8018172:	4640      	mov	r0, r8
 8018174:	4649      	mov	r1, r9
 8018176:	f7e8 fa4f 	bl	8000618 <__aeabi_dmul>
 801817a:	460b      	mov	r3, r1
 801817c:	4602      	mov	r2, r0
 801817e:	4629      	mov	r1, r5
 8018180:	4620      	mov	r0, r4
 8018182:	f7e8 f891 	bl	80002a8 <__aeabi_dsub>
 8018186:	4b29      	ldr	r3, [pc, #164]	; (801822c <__kernel_cos+0x17c>)
 8018188:	429e      	cmp	r6, r3
 801818a:	4680      	mov	r8, r0
 801818c:	4689      	mov	r9, r1
 801818e:	dc11      	bgt.n	80181b4 <__kernel_cos+0x104>
 8018190:	4602      	mov	r2, r0
 8018192:	460b      	mov	r3, r1
 8018194:	4650      	mov	r0, sl
 8018196:	4659      	mov	r1, fp
 8018198:	f7e8 f886 	bl	80002a8 <__aeabi_dsub>
 801819c:	460b      	mov	r3, r1
 801819e:	4924      	ldr	r1, [pc, #144]	; (8018230 <__kernel_cos+0x180>)
 80181a0:	4602      	mov	r2, r0
 80181a2:	2000      	movs	r0, #0
 80181a4:	f7e8 f880 	bl	80002a8 <__aeabi_dsub>
 80181a8:	ecbd 8b02 	vpop	{d8}
 80181ac:	ec41 0b10 	vmov	d0, r0, r1
 80181b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181b4:	4b1f      	ldr	r3, [pc, #124]	; (8018234 <__kernel_cos+0x184>)
 80181b6:	491e      	ldr	r1, [pc, #120]	; (8018230 <__kernel_cos+0x180>)
 80181b8:	429e      	cmp	r6, r3
 80181ba:	bfcc      	ite	gt
 80181bc:	4d1e      	ldrgt	r5, [pc, #120]	; (8018238 <__kernel_cos+0x188>)
 80181be:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80181c2:	2400      	movs	r4, #0
 80181c4:	4622      	mov	r2, r4
 80181c6:	462b      	mov	r3, r5
 80181c8:	2000      	movs	r0, #0
 80181ca:	f7e8 f86d 	bl	80002a8 <__aeabi_dsub>
 80181ce:	4622      	mov	r2, r4
 80181d0:	4606      	mov	r6, r0
 80181d2:	460f      	mov	r7, r1
 80181d4:	462b      	mov	r3, r5
 80181d6:	4650      	mov	r0, sl
 80181d8:	4659      	mov	r1, fp
 80181da:	f7e8 f865 	bl	80002a8 <__aeabi_dsub>
 80181de:	4642      	mov	r2, r8
 80181e0:	464b      	mov	r3, r9
 80181e2:	f7e8 f861 	bl	80002a8 <__aeabi_dsub>
 80181e6:	4602      	mov	r2, r0
 80181e8:	460b      	mov	r3, r1
 80181ea:	4630      	mov	r0, r6
 80181ec:	4639      	mov	r1, r7
 80181ee:	e7d9      	b.n	80181a4 <__kernel_cos+0xf4>
 80181f0:	2000      	movs	r0, #0
 80181f2:	490f      	ldr	r1, [pc, #60]	; (8018230 <__kernel_cos+0x180>)
 80181f4:	e7d8      	b.n	80181a8 <__kernel_cos+0xf8>
 80181f6:	bf00      	nop
 80181f8:	be8838d4 	.word	0xbe8838d4
 80181fc:	bda8fae9 	.word	0xbda8fae9
 8018200:	bdb4b1c4 	.word	0xbdb4b1c4
 8018204:	3e21ee9e 	.word	0x3e21ee9e
 8018208:	809c52ad 	.word	0x809c52ad
 801820c:	3e927e4f 	.word	0x3e927e4f
 8018210:	19cb1590 	.word	0x19cb1590
 8018214:	3efa01a0 	.word	0x3efa01a0
 8018218:	16c15177 	.word	0x16c15177
 801821c:	3f56c16c 	.word	0x3f56c16c
 8018220:	5555554c 	.word	0x5555554c
 8018224:	3fa55555 	.word	0x3fa55555
 8018228:	3fe00000 	.word	0x3fe00000
 801822c:	3fd33332 	.word	0x3fd33332
 8018230:	3ff00000 	.word	0x3ff00000
 8018234:	3fe90000 	.word	0x3fe90000
 8018238:	3fd20000 	.word	0x3fd20000
 801823c:	00000000 	.word	0x00000000

08018240 <__kernel_rem_pio2>:
 8018240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018244:	ed2d 8b02 	vpush	{d8}
 8018248:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801824c:	1ed4      	subs	r4, r2, #3
 801824e:	9308      	str	r3, [sp, #32]
 8018250:	9101      	str	r1, [sp, #4]
 8018252:	4bc5      	ldr	r3, [pc, #788]	; (8018568 <__kernel_rem_pio2+0x328>)
 8018254:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8018256:	9009      	str	r0, [sp, #36]	; 0x24
 8018258:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801825c:	9304      	str	r3, [sp, #16]
 801825e:	9b08      	ldr	r3, [sp, #32]
 8018260:	3b01      	subs	r3, #1
 8018262:	9307      	str	r3, [sp, #28]
 8018264:	2318      	movs	r3, #24
 8018266:	fb94 f4f3 	sdiv	r4, r4, r3
 801826a:	f06f 0317 	mvn.w	r3, #23
 801826e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8018272:	fb04 3303 	mla	r3, r4, r3, r3
 8018276:	eb03 0a02 	add.w	sl, r3, r2
 801827a:	9b04      	ldr	r3, [sp, #16]
 801827c:	9a07      	ldr	r2, [sp, #28]
 801827e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8018558 <__kernel_rem_pio2+0x318>
 8018282:	eb03 0802 	add.w	r8, r3, r2
 8018286:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018288:	1aa7      	subs	r7, r4, r2
 801828a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801828e:	ae22      	add	r6, sp, #136	; 0x88
 8018290:	2500      	movs	r5, #0
 8018292:	4545      	cmp	r5, r8
 8018294:	dd13      	ble.n	80182be <__kernel_rem_pio2+0x7e>
 8018296:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8018558 <__kernel_rem_pio2+0x318>
 801829a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801829e:	2600      	movs	r6, #0
 80182a0:	9b04      	ldr	r3, [sp, #16]
 80182a2:	429e      	cmp	r6, r3
 80182a4:	dc32      	bgt.n	801830c <__kernel_rem_pio2+0xcc>
 80182a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182a8:	9302      	str	r3, [sp, #8]
 80182aa:	9b08      	ldr	r3, [sp, #32]
 80182ac:	199d      	adds	r5, r3, r6
 80182ae:	ab22      	add	r3, sp, #136	; 0x88
 80182b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80182b4:	9306      	str	r3, [sp, #24]
 80182b6:	ec59 8b18 	vmov	r8, r9, d8
 80182ba:	2700      	movs	r7, #0
 80182bc:	e01f      	b.n	80182fe <__kernel_rem_pio2+0xbe>
 80182be:	42ef      	cmn	r7, r5
 80182c0:	d407      	bmi.n	80182d2 <__kernel_rem_pio2+0x92>
 80182c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80182c6:	f7e8 f93d 	bl	8000544 <__aeabi_i2d>
 80182ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80182ce:	3501      	adds	r5, #1
 80182d0:	e7df      	b.n	8018292 <__kernel_rem_pio2+0x52>
 80182d2:	ec51 0b18 	vmov	r0, r1, d8
 80182d6:	e7f8      	b.n	80182ca <__kernel_rem_pio2+0x8a>
 80182d8:	9906      	ldr	r1, [sp, #24]
 80182da:	9d02      	ldr	r5, [sp, #8]
 80182dc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80182e0:	9106      	str	r1, [sp, #24]
 80182e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80182e6:	9502      	str	r5, [sp, #8]
 80182e8:	f7e8 f996 	bl	8000618 <__aeabi_dmul>
 80182ec:	4602      	mov	r2, r0
 80182ee:	460b      	mov	r3, r1
 80182f0:	4640      	mov	r0, r8
 80182f2:	4649      	mov	r1, r9
 80182f4:	f7e7 ffda 	bl	80002ac <__adddf3>
 80182f8:	3701      	adds	r7, #1
 80182fa:	4680      	mov	r8, r0
 80182fc:	4689      	mov	r9, r1
 80182fe:	9b07      	ldr	r3, [sp, #28]
 8018300:	429f      	cmp	r7, r3
 8018302:	dde9      	ble.n	80182d8 <__kernel_rem_pio2+0x98>
 8018304:	e8eb 8902 	strd	r8, r9, [fp], #8
 8018308:	3601      	adds	r6, #1
 801830a:	e7c9      	b.n	80182a0 <__kernel_rem_pio2+0x60>
 801830c:	9b04      	ldr	r3, [sp, #16]
 801830e:	aa0e      	add	r2, sp, #56	; 0x38
 8018310:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018314:	930c      	str	r3, [sp, #48]	; 0x30
 8018316:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018318:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801831c:	9c04      	ldr	r4, [sp, #16]
 801831e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018320:	ab9a      	add	r3, sp, #616	; 0x268
 8018322:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8018326:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801832a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801832e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8018332:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8018336:	ab9a      	add	r3, sp, #616	; 0x268
 8018338:	445b      	add	r3, fp
 801833a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801833e:	2500      	movs	r5, #0
 8018340:	1b63      	subs	r3, r4, r5
 8018342:	2b00      	cmp	r3, #0
 8018344:	dc78      	bgt.n	8018438 <__kernel_rem_pio2+0x1f8>
 8018346:	4650      	mov	r0, sl
 8018348:	ec49 8b10 	vmov	d0, r8, r9
 801834c:	f000 fb80 	bl	8018a50 <scalbn>
 8018350:	ec57 6b10 	vmov	r6, r7, d0
 8018354:	2200      	movs	r2, #0
 8018356:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801835a:	ee10 0a10 	vmov	r0, s0
 801835e:	4639      	mov	r1, r7
 8018360:	f7e8 f95a 	bl	8000618 <__aeabi_dmul>
 8018364:	ec41 0b10 	vmov	d0, r0, r1
 8018368:	f7fe fabe 	bl	80168e8 <floor>
 801836c:	2200      	movs	r2, #0
 801836e:	ec51 0b10 	vmov	r0, r1, d0
 8018372:	4b7e      	ldr	r3, [pc, #504]	; (801856c <__kernel_rem_pio2+0x32c>)
 8018374:	f7e8 f950 	bl	8000618 <__aeabi_dmul>
 8018378:	4602      	mov	r2, r0
 801837a:	460b      	mov	r3, r1
 801837c:	4630      	mov	r0, r6
 801837e:	4639      	mov	r1, r7
 8018380:	f7e7 ff92 	bl	80002a8 <__aeabi_dsub>
 8018384:	460f      	mov	r7, r1
 8018386:	4606      	mov	r6, r0
 8018388:	f7e8 fbf6 	bl	8000b78 <__aeabi_d2iz>
 801838c:	9006      	str	r0, [sp, #24]
 801838e:	f7e8 f8d9 	bl	8000544 <__aeabi_i2d>
 8018392:	4602      	mov	r2, r0
 8018394:	460b      	mov	r3, r1
 8018396:	4630      	mov	r0, r6
 8018398:	4639      	mov	r1, r7
 801839a:	f7e7 ff85 	bl	80002a8 <__aeabi_dsub>
 801839e:	f1ba 0f00 	cmp.w	sl, #0
 80183a2:	4606      	mov	r6, r0
 80183a4:	460f      	mov	r7, r1
 80183a6:	dd6c      	ble.n	8018482 <__kernel_rem_pio2+0x242>
 80183a8:	1e62      	subs	r2, r4, #1
 80183aa:	ab0e      	add	r3, sp, #56	; 0x38
 80183ac:	f1ca 0118 	rsb	r1, sl, #24
 80183b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80183b4:	9d06      	ldr	r5, [sp, #24]
 80183b6:	fa40 f301 	asr.w	r3, r0, r1
 80183ba:	441d      	add	r5, r3
 80183bc:	408b      	lsls	r3, r1
 80183be:	1ac0      	subs	r0, r0, r3
 80183c0:	ab0e      	add	r3, sp, #56	; 0x38
 80183c2:	9506      	str	r5, [sp, #24]
 80183c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80183c8:	f1ca 0317 	rsb	r3, sl, #23
 80183cc:	fa40 f303 	asr.w	r3, r0, r3
 80183d0:	9302      	str	r3, [sp, #8]
 80183d2:	9b02      	ldr	r3, [sp, #8]
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	dd62      	ble.n	801849e <__kernel_rem_pio2+0x25e>
 80183d8:	9b06      	ldr	r3, [sp, #24]
 80183da:	2200      	movs	r2, #0
 80183dc:	3301      	adds	r3, #1
 80183de:	9306      	str	r3, [sp, #24]
 80183e0:	4615      	mov	r5, r2
 80183e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80183e6:	4294      	cmp	r4, r2
 80183e8:	f300 8095 	bgt.w	8018516 <__kernel_rem_pio2+0x2d6>
 80183ec:	f1ba 0f00 	cmp.w	sl, #0
 80183f0:	dd07      	ble.n	8018402 <__kernel_rem_pio2+0x1c2>
 80183f2:	f1ba 0f01 	cmp.w	sl, #1
 80183f6:	f000 80a2 	beq.w	801853e <__kernel_rem_pio2+0x2fe>
 80183fa:	f1ba 0f02 	cmp.w	sl, #2
 80183fe:	f000 80c1 	beq.w	8018584 <__kernel_rem_pio2+0x344>
 8018402:	9b02      	ldr	r3, [sp, #8]
 8018404:	2b02      	cmp	r3, #2
 8018406:	d14a      	bne.n	801849e <__kernel_rem_pio2+0x25e>
 8018408:	4632      	mov	r2, r6
 801840a:	463b      	mov	r3, r7
 801840c:	2000      	movs	r0, #0
 801840e:	4958      	ldr	r1, [pc, #352]	; (8018570 <__kernel_rem_pio2+0x330>)
 8018410:	f7e7 ff4a 	bl	80002a8 <__aeabi_dsub>
 8018414:	4606      	mov	r6, r0
 8018416:	460f      	mov	r7, r1
 8018418:	2d00      	cmp	r5, #0
 801841a:	d040      	beq.n	801849e <__kernel_rem_pio2+0x25e>
 801841c:	4650      	mov	r0, sl
 801841e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8018560 <__kernel_rem_pio2+0x320>
 8018422:	f000 fb15 	bl	8018a50 <scalbn>
 8018426:	4630      	mov	r0, r6
 8018428:	4639      	mov	r1, r7
 801842a:	ec53 2b10 	vmov	r2, r3, d0
 801842e:	f7e7 ff3b 	bl	80002a8 <__aeabi_dsub>
 8018432:	4606      	mov	r6, r0
 8018434:	460f      	mov	r7, r1
 8018436:	e032      	b.n	801849e <__kernel_rem_pio2+0x25e>
 8018438:	2200      	movs	r2, #0
 801843a:	4b4e      	ldr	r3, [pc, #312]	; (8018574 <__kernel_rem_pio2+0x334>)
 801843c:	4640      	mov	r0, r8
 801843e:	4649      	mov	r1, r9
 8018440:	f7e8 f8ea 	bl	8000618 <__aeabi_dmul>
 8018444:	f7e8 fb98 	bl	8000b78 <__aeabi_d2iz>
 8018448:	f7e8 f87c 	bl	8000544 <__aeabi_i2d>
 801844c:	2200      	movs	r2, #0
 801844e:	4b4a      	ldr	r3, [pc, #296]	; (8018578 <__kernel_rem_pio2+0x338>)
 8018450:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018454:	f7e8 f8e0 	bl	8000618 <__aeabi_dmul>
 8018458:	4602      	mov	r2, r0
 801845a:	460b      	mov	r3, r1
 801845c:	4640      	mov	r0, r8
 801845e:	4649      	mov	r1, r9
 8018460:	f7e7 ff22 	bl	80002a8 <__aeabi_dsub>
 8018464:	f7e8 fb88 	bl	8000b78 <__aeabi_d2iz>
 8018468:	ab0e      	add	r3, sp, #56	; 0x38
 801846a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801846e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8018472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018476:	f7e7 ff19 	bl	80002ac <__adddf3>
 801847a:	3501      	adds	r5, #1
 801847c:	4680      	mov	r8, r0
 801847e:	4689      	mov	r9, r1
 8018480:	e75e      	b.n	8018340 <__kernel_rem_pio2+0x100>
 8018482:	d105      	bne.n	8018490 <__kernel_rem_pio2+0x250>
 8018484:	1e63      	subs	r3, r4, #1
 8018486:	aa0e      	add	r2, sp, #56	; 0x38
 8018488:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801848c:	15c3      	asrs	r3, r0, #23
 801848e:	e79f      	b.n	80183d0 <__kernel_rem_pio2+0x190>
 8018490:	2200      	movs	r2, #0
 8018492:	4b3a      	ldr	r3, [pc, #232]	; (801857c <__kernel_rem_pio2+0x33c>)
 8018494:	f7e8 fb46 	bl	8000b24 <__aeabi_dcmpge>
 8018498:	2800      	cmp	r0, #0
 801849a:	d139      	bne.n	8018510 <__kernel_rem_pio2+0x2d0>
 801849c:	9002      	str	r0, [sp, #8]
 801849e:	2200      	movs	r2, #0
 80184a0:	2300      	movs	r3, #0
 80184a2:	4630      	mov	r0, r6
 80184a4:	4639      	mov	r1, r7
 80184a6:	f7e8 fb1f 	bl	8000ae8 <__aeabi_dcmpeq>
 80184aa:	2800      	cmp	r0, #0
 80184ac:	f000 80c7 	beq.w	801863e <__kernel_rem_pio2+0x3fe>
 80184b0:	1e65      	subs	r5, r4, #1
 80184b2:	462b      	mov	r3, r5
 80184b4:	2200      	movs	r2, #0
 80184b6:	9904      	ldr	r1, [sp, #16]
 80184b8:	428b      	cmp	r3, r1
 80184ba:	da6a      	bge.n	8018592 <__kernel_rem_pio2+0x352>
 80184bc:	2a00      	cmp	r2, #0
 80184be:	f000 8088 	beq.w	80185d2 <__kernel_rem_pio2+0x392>
 80184c2:	ab0e      	add	r3, sp, #56	; 0x38
 80184c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80184c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	f000 80b4 	beq.w	801863a <__kernel_rem_pio2+0x3fa>
 80184d2:	4650      	mov	r0, sl
 80184d4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8018560 <__kernel_rem_pio2+0x320>
 80184d8:	f000 faba 	bl	8018a50 <scalbn>
 80184dc:	00ec      	lsls	r4, r5, #3
 80184de:	ab72      	add	r3, sp, #456	; 0x1c8
 80184e0:	191e      	adds	r6, r3, r4
 80184e2:	ec59 8b10 	vmov	r8, r9, d0
 80184e6:	f106 0a08 	add.w	sl, r6, #8
 80184ea:	462f      	mov	r7, r5
 80184ec:	2f00      	cmp	r7, #0
 80184ee:	f280 80df 	bge.w	80186b0 <__kernel_rem_pio2+0x470>
 80184f2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8018558 <__kernel_rem_pio2+0x318>
 80184f6:	f04f 0a00 	mov.w	sl, #0
 80184fa:	eba5 030a 	sub.w	r3, r5, sl
 80184fe:	2b00      	cmp	r3, #0
 8018500:	f2c0 810a 	blt.w	8018718 <__kernel_rem_pio2+0x4d8>
 8018504:	f8df b078 	ldr.w	fp, [pc, #120]	; 8018580 <__kernel_rem_pio2+0x340>
 8018508:	ec59 8b18 	vmov	r8, r9, d8
 801850c:	2700      	movs	r7, #0
 801850e:	e0f5      	b.n	80186fc <__kernel_rem_pio2+0x4bc>
 8018510:	2302      	movs	r3, #2
 8018512:	9302      	str	r3, [sp, #8]
 8018514:	e760      	b.n	80183d8 <__kernel_rem_pio2+0x198>
 8018516:	ab0e      	add	r3, sp, #56	; 0x38
 8018518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801851c:	b94d      	cbnz	r5, 8018532 <__kernel_rem_pio2+0x2f2>
 801851e:	b12b      	cbz	r3, 801852c <__kernel_rem_pio2+0x2ec>
 8018520:	a80e      	add	r0, sp, #56	; 0x38
 8018522:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8018526:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801852a:	2301      	movs	r3, #1
 801852c:	3201      	adds	r2, #1
 801852e:	461d      	mov	r5, r3
 8018530:	e759      	b.n	80183e6 <__kernel_rem_pio2+0x1a6>
 8018532:	a80e      	add	r0, sp, #56	; 0x38
 8018534:	1acb      	subs	r3, r1, r3
 8018536:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801853a:	462b      	mov	r3, r5
 801853c:	e7f6      	b.n	801852c <__kernel_rem_pio2+0x2ec>
 801853e:	1e62      	subs	r2, r4, #1
 8018540:	ab0e      	add	r3, sp, #56	; 0x38
 8018542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018546:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801854a:	a90e      	add	r1, sp, #56	; 0x38
 801854c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018550:	e757      	b.n	8018402 <__kernel_rem_pio2+0x1c2>
 8018552:	bf00      	nop
 8018554:	f3af 8000 	nop.w
	...
 8018564:	3ff00000 	.word	0x3ff00000
 8018568:	08026fa8 	.word	0x08026fa8
 801856c:	40200000 	.word	0x40200000
 8018570:	3ff00000 	.word	0x3ff00000
 8018574:	3e700000 	.word	0x3e700000
 8018578:	41700000 	.word	0x41700000
 801857c:	3fe00000 	.word	0x3fe00000
 8018580:	08026f68 	.word	0x08026f68
 8018584:	1e62      	subs	r2, r4, #1
 8018586:	ab0e      	add	r3, sp, #56	; 0x38
 8018588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801858c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018590:	e7db      	b.n	801854a <__kernel_rem_pio2+0x30a>
 8018592:	a90e      	add	r1, sp, #56	; 0x38
 8018594:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018598:	3b01      	subs	r3, #1
 801859a:	430a      	orrs	r2, r1
 801859c:	e78b      	b.n	80184b6 <__kernel_rem_pio2+0x276>
 801859e:	3301      	adds	r3, #1
 80185a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80185a4:	2900      	cmp	r1, #0
 80185a6:	d0fa      	beq.n	801859e <__kernel_rem_pio2+0x35e>
 80185a8:	9a08      	ldr	r2, [sp, #32]
 80185aa:	4422      	add	r2, r4
 80185ac:	00d2      	lsls	r2, r2, #3
 80185ae:	a922      	add	r1, sp, #136	; 0x88
 80185b0:	18e3      	adds	r3, r4, r3
 80185b2:	9206      	str	r2, [sp, #24]
 80185b4:	440a      	add	r2, r1
 80185b6:	9302      	str	r3, [sp, #8]
 80185b8:	f10b 0108 	add.w	r1, fp, #8
 80185bc:	f102 0308 	add.w	r3, r2, #8
 80185c0:	1c66      	adds	r6, r4, #1
 80185c2:	910a      	str	r1, [sp, #40]	; 0x28
 80185c4:	2500      	movs	r5, #0
 80185c6:	930d      	str	r3, [sp, #52]	; 0x34
 80185c8:	9b02      	ldr	r3, [sp, #8]
 80185ca:	42b3      	cmp	r3, r6
 80185cc:	da04      	bge.n	80185d8 <__kernel_rem_pio2+0x398>
 80185ce:	461c      	mov	r4, r3
 80185d0:	e6a6      	b.n	8018320 <__kernel_rem_pio2+0xe0>
 80185d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80185d4:	2301      	movs	r3, #1
 80185d6:	e7e3      	b.n	80185a0 <__kernel_rem_pio2+0x360>
 80185d8:	9b06      	ldr	r3, [sp, #24]
 80185da:	18ef      	adds	r7, r5, r3
 80185dc:	ab22      	add	r3, sp, #136	; 0x88
 80185de:	441f      	add	r7, r3
 80185e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80185e6:	f7e7 ffad 	bl	8000544 <__aeabi_i2d>
 80185ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185ec:	461c      	mov	r4, r3
 80185ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80185f0:	e9c7 0100 	strd	r0, r1, [r7]
 80185f4:	eb03 0b05 	add.w	fp, r3, r5
 80185f8:	2700      	movs	r7, #0
 80185fa:	f04f 0800 	mov.w	r8, #0
 80185fe:	f04f 0900 	mov.w	r9, #0
 8018602:	9b07      	ldr	r3, [sp, #28]
 8018604:	429f      	cmp	r7, r3
 8018606:	dd08      	ble.n	801861a <__kernel_rem_pio2+0x3da>
 8018608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801860a:	aa72      	add	r2, sp, #456	; 0x1c8
 801860c:	18eb      	adds	r3, r5, r3
 801860e:	4413      	add	r3, r2
 8018610:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8018614:	3601      	adds	r6, #1
 8018616:	3508      	adds	r5, #8
 8018618:	e7d6      	b.n	80185c8 <__kernel_rem_pio2+0x388>
 801861a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801861e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8018622:	f7e7 fff9 	bl	8000618 <__aeabi_dmul>
 8018626:	4602      	mov	r2, r0
 8018628:	460b      	mov	r3, r1
 801862a:	4640      	mov	r0, r8
 801862c:	4649      	mov	r1, r9
 801862e:	f7e7 fe3d 	bl	80002ac <__adddf3>
 8018632:	3701      	adds	r7, #1
 8018634:	4680      	mov	r8, r0
 8018636:	4689      	mov	r9, r1
 8018638:	e7e3      	b.n	8018602 <__kernel_rem_pio2+0x3c2>
 801863a:	3d01      	subs	r5, #1
 801863c:	e741      	b.n	80184c2 <__kernel_rem_pio2+0x282>
 801863e:	f1ca 0000 	rsb	r0, sl, #0
 8018642:	ec47 6b10 	vmov	d0, r6, r7
 8018646:	f000 fa03 	bl	8018a50 <scalbn>
 801864a:	ec57 6b10 	vmov	r6, r7, d0
 801864e:	2200      	movs	r2, #0
 8018650:	4b99      	ldr	r3, [pc, #612]	; (80188b8 <__kernel_rem_pio2+0x678>)
 8018652:	ee10 0a10 	vmov	r0, s0
 8018656:	4639      	mov	r1, r7
 8018658:	f7e8 fa64 	bl	8000b24 <__aeabi_dcmpge>
 801865c:	b1f8      	cbz	r0, 801869e <__kernel_rem_pio2+0x45e>
 801865e:	2200      	movs	r2, #0
 8018660:	4b96      	ldr	r3, [pc, #600]	; (80188bc <__kernel_rem_pio2+0x67c>)
 8018662:	4630      	mov	r0, r6
 8018664:	4639      	mov	r1, r7
 8018666:	f7e7 ffd7 	bl	8000618 <__aeabi_dmul>
 801866a:	f7e8 fa85 	bl	8000b78 <__aeabi_d2iz>
 801866e:	4680      	mov	r8, r0
 8018670:	f7e7 ff68 	bl	8000544 <__aeabi_i2d>
 8018674:	2200      	movs	r2, #0
 8018676:	4b90      	ldr	r3, [pc, #576]	; (80188b8 <__kernel_rem_pio2+0x678>)
 8018678:	f7e7 ffce 	bl	8000618 <__aeabi_dmul>
 801867c:	460b      	mov	r3, r1
 801867e:	4602      	mov	r2, r0
 8018680:	4639      	mov	r1, r7
 8018682:	4630      	mov	r0, r6
 8018684:	f7e7 fe10 	bl	80002a8 <__aeabi_dsub>
 8018688:	f7e8 fa76 	bl	8000b78 <__aeabi_d2iz>
 801868c:	1c65      	adds	r5, r4, #1
 801868e:	ab0e      	add	r3, sp, #56	; 0x38
 8018690:	f10a 0a18 	add.w	sl, sl, #24
 8018694:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018698:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801869c:	e719      	b.n	80184d2 <__kernel_rem_pio2+0x292>
 801869e:	4630      	mov	r0, r6
 80186a0:	4639      	mov	r1, r7
 80186a2:	f7e8 fa69 	bl	8000b78 <__aeabi_d2iz>
 80186a6:	ab0e      	add	r3, sp, #56	; 0x38
 80186a8:	4625      	mov	r5, r4
 80186aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80186ae:	e710      	b.n	80184d2 <__kernel_rem_pio2+0x292>
 80186b0:	ab0e      	add	r3, sp, #56	; 0x38
 80186b2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80186b6:	f7e7 ff45 	bl	8000544 <__aeabi_i2d>
 80186ba:	4642      	mov	r2, r8
 80186bc:	464b      	mov	r3, r9
 80186be:	f7e7 ffab 	bl	8000618 <__aeabi_dmul>
 80186c2:	2200      	movs	r2, #0
 80186c4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80186c8:	4b7c      	ldr	r3, [pc, #496]	; (80188bc <__kernel_rem_pio2+0x67c>)
 80186ca:	4640      	mov	r0, r8
 80186cc:	4649      	mov	r1, r9
 80186ce:	f7e7 ffa3 	bl	8000618 <__aeabi_dmul>
 80186d2:	3f01      	subs	r7, #1
 80186d4:	4680      	mov	r8, r0
 80186d6:	4689      	mov	r9, r1
 80186d8:	e708      	b.n	80184ec <__kernel_rem_pio2+0x2ac>
 80186da:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80186de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186e2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80186e6:	f7e7 ff97 	bl	8000618 <__aeabi_dmul>
 80186ea:	4602      	mov	r2, r0
 80186ec:	460b      	mov	r3, r1
 80186ee:	4640      	mov	r0, r8
 80186f0:	4649      	mov	r1, r9
 80186f2:	f7e7 fddb 	bl	80002ac <__adddf3>
 80186f6:	3701      	adds	r7, #1
 80186f8:	4680      	mov	r8, r0
 80186fa:	4689      	mov	r9, r1
 80186fc:	9b04      	ldr	r3, [sp, #16]
 80186fe:	429f      	cmp	r7, r3
 8018700:	dc01      	bgt.n	8018706 <__kernel_rem_pio2+0x4c6>
 8018702:	45ba      	cmp	sl, r7
 8018704:	dae9      	bge.n	80186da <__kernel_rem_pio2+0x49a>
 8018706:	ab4a      	add	r3, sp, #296	; 0x128
 8018708:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801870c:	e9c3 8900 	strd	r8, r9, [r3]
 8018710:	f10a 0a01 	add.w	sl, sl, #1
 8018714:	3e08      	subs	r6, #8
 8018716:	e6f0      	b.n	80184fa <__kernel_rem_pio2+0x2ba>
 8018718:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801871a:	2b03      	cmp	r3, #3
 801871c:	d85b      	bhi.n	80187d6 <__kernel_rem_pio2+0x596>
 801871e:	e8df f003 	tbb	[pc, r3]
 8018722:	264a      	.short	0x264a
 8018724:	0226      	.short	0x0226
 8018726:	ab9a      	add	r3, sp, #616	; 0x268
 8018728:	441c      	add	r4, r3
 801872a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801872e:	46a2      	mov	sl, r4
 8018730:	46ab      	mov	fp, r5
 8018732:	f1bb 0f00 	cmp.w	fp, #0
 8018736:	dc6c      	bgt.n	8018812 <__kernel_rem_pio2+0x5d2>
 8018738:	46a2      	mov	sl, r4
 801873a:	46ab      	mov	fp, r5
 801873c:	f1bb 0f01 	cmp.w	fp, #1
 8018740:	f300 8086 	bgt.w	8018850 <__kernel_rem_pio2+0x610>
 8018744:	2000      	movs	r0, #0
 8018746:	2100      	movs	r1, #0
 8018748:	2d01      	cmp	r5, #1
 801874a:	f300 80a0 	bgt.w	801888e <__kernel_rem_pio2+0x64e>
 801874e:	9b02      	ldr	r3, [sp, #8]
 8018750:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8018754:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8018758:	2b00      	cmp	r3, #0
 801875a:	f040 809e 	bne.w	801889a <__kernel_rem_pio2+0x65a>
 801875e:	9b01      	ldr	r3, [sp, #4]
 8018760:	e9c3 7800 	strd	r7, r8, [r3]
 8018764:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8018768:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801876c:	e033      	b.n	80187d6 <__kernel_rem_pio2+0x596>
 801876e:	3408      	adds	r4, #8
 8018770:	ab4a      	add	r3, sp, #296	; 0x128
 8018772:	441c      	add	r4, r3
 8018774:	462e      	mov	r6, r5
 8018776:	2000      	movs	r0, #0
 8018778:	2100      	movs	r1, #0
 801877a:	2e00      	cmp	r6, #0
 801877c:	da3a      	bge.n	80187f4 <__kernel_rem_pio2+0x5b4>
 801877e:	9b02      	ldr	r3, [sp, #8]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d03d      	beq.n	8018800 <__kernel_rem_pio2+0x5c0>
 8018784:	4602      	mov	r2, r0
 8018786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801878a:	9c01      	ldr	r4, [sp, #4]
 801878c:	e9c4 2300 	strd	r2, r3, [r4]
 8018790:	4602      	mov	r2, r0
 8018792:	460b      	mov	r3, r1
 8018794:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8018798:	f7e7 fd86 	bl	80002a8 <__aeabi_dsub>
 801879c:	ae4c      	add	r6, sp, #304	; 0x130
 801879e:	2401      	movs	r4, #1
 80187a0:	42a5      	cmp	r5, r4
 80187a2:	da30      	bge.n	8018806 <__kernel_rem_pio2+0x5c6>
 80187a4:	9b02      	ldr	r3, [sp, #8]
 80187a6:	b113      	cbz	r3, 80187ae <__kernel_rem_pio2+0x56e>
 80187a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80187ac:	4619      	mov	r1, r3
 80187ae:	9b01      	ldr	r3, [sp, #4]
 80187b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80187b4:	e00f      	b.n	80187d6 <__kernel_rem_pio2+0x596>
 80187b6:	ab9a      	add	r3, sp, #616	; 0x268
 80187b8:	441c      	add	r4, r3
 80187ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80187be:	2000      	movs	r0, #0
 80187c0:	2100      	movs	r1, #0
 80187c2:	2d00      	cmp	r5, #0
 80187c4:	da10      	bge.n	80187e8 <__kernel_rem_pio2+0x5a8>
 80187c6:	9b02      	ldr	r3, [sp, #8]
 80187c8:	b113      	cbz	r3, 80187d0 <__kernel_rem_pio2+0x590>
 80187ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80187ce:	4619      	mov	r1, r3
 80187d0:	9b01      	ldr	r3, [sp, #4]
 80187d2:	e9c3 0100 	strd	r0, r1, [r3]
 80187d6:	9b06      	ldr	r3, [sp, #24]
 80187d8:	f003 0007 	and.w	r0, r3, #7
 80187dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80187e0:	ecbd 8b02 	vpop	{d8}
 80187e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80187ec:	f7e7 fd5e 	bl	80002ac <__adddf3>
 80187f0:	3d01      	subs	r5, #1
 80187f2:	e7e6      	b.n	80187c2 <__kernel_rem_pio2+0x582>
 80187f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80187f8:	f7e7 fd58 	bl	80002ac <__adddf3>
 80187fc:	3e01      	subs	r6, #1
 80187fe:	e7bc      	b.n	801877a <__kernel_rem_pio2+0x53a>
 8018800:	4602      	mov	r2, r0
 8018802:	460b      	mov	r3, r1
 8018804:	e7c1      	b.n	801878a <__kernel_rem_pio2+0x54a>
 8018806:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801880a:	f7e7 fd4f 	bl	80002ac <__adddf3>
 801880e:	3401      	adds	r4, #1
 8018810:	e7c6      	b.n	80187a0 <__kernel_rem_pio2+0x560>
 8018812:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8018816:	ed3a 7b02 	vldmdb	sl!, {d7}
 801881a:	4640      	mov	r0, r8
 801881c:	ec53 2b17 	vmov	r2, r3, d7
 8018820:	4649      	mov	r1, r9
 8018822:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018826:	f7e7 fd41 	bl	80002ac <__adddf3>
 801882a:	4602      	mov	r2, r0
 801882c:	460b      	mov	r3, r1
 801882e:	4606      	mov	r6, r0
 8018830:	460f      	mov	r7, r1
 8018832:	4640      	mov	r0, r8
 8018834:	4649      	mov	r1, r9
 8018836:	f7e7 fd37 	bl	80002a8 <__aeabi_dsub>
 801883a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801883e:	f7e7 fd35 	bl	80002ac <__adddf3>
 8018842:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018846:	e9ca 0100 	strd	r0, r1, [sl]
 801884a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801884e:	e770      	b.n	8018732 <__kernel_rem_pio2+0x4f2>
 8018850:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8018854:	ed3a 7b02 	vldmdb	sl!, {d7}
 8018858:	4630      	mov	r0, r6
 801885a:	ec53 2b17 	vmov	r2, r3, d7
 801885e:	4639      	mov	r1, r7
 8018860:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018864:	f7e7 fd22 	bl	80002ac <__adddf3>
 8018868:	4602      	mov	r2, r0
 801886a:	460b      	mov	r3, r1
 801886c:	4680      	mov	r8, r0
 801886e:	4689      	mov	r9, r1
 8018870:	4630      	mov	r0, r6
 8018872:	4639      	mov	r1, r7
 8018874:	f7e7 fd18 	bl	80002a8 <__aeabi_dsub>
 8018878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801887c:	f7e7 fd16 	bl	80002ac <__adddf3>
 8018880:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018884:	e9ca 0100 	strd	r0, r1, [sl]
 8018888:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801888c:	e756      	b.n	801873c <__kernel_rem_pio2+0x4fc>
 801888e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018892:	f7e7 fd0b 	bl	80002ac <__adddf3>
 8018896:	3d01      	subs	r5, #1
 8018898:	e756      	b.n	8018748 <__kernel_rem_pio2+0x508>
 801889a:	9b01      	ldr	r3, [sp, #4]
 801889c:	9a01      	ldr	r2, [sp, #4]
 801889e:	601f      	str	r7, [r3, #0]
 80188a0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80188a4:	605c      	str	r4, [r3, #4]
 80188a6:	609d      	str	r5, [r3, #8]
 80188a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80188ac:	60d3      	str	r3, [r2, #12]
 80188ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80188b2:	6110      	str	r0, [r2, #16]
 80188b4:	6153      	str	r3, [r2, #20]
 80188b6:	e78e      	b.n	80187d6 <__kernel_rem_pio2+0x596>
 80188b8:	41700000 	.word	0x41700000
 80188bc:	3e700000 	.word	0x3e700000

080188c0 <__kernel_sin>:
 80188c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188c4:	ec55 4b10 	vmov	r4, r5, d0
 80188c8:	b085      	sub	sp, #20
 80188ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80188ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80188d2:	ed8d 1b00 	vstr	d1, [sp]
 80188d6:	9002      	str	r0, [sp, #8]
 80188d8:	da06      	bge.n	80188e8 <__kernel_sin+0x28>
 80188da:	ee10 0a10 	vmov	r0, s0
 80188de:	4629      	mov	r1, r5
 80188e0:	f7e8 f94a 	bl	8000b78 <__aeabi_d2iz>
 80188e4:	2800      	cmp	r0, #0
 80188e6:	d051      	beq.n	801898c <__kernel_sin+0xcc>
 80188e8:	4622      	mov	r2, r4
 80188ea:	462b      	mov	r3, r5
 80188ec:	4620      	mov	r0, r4
 80188ee:	4629      	mov	r1, r5
 80188f0:	f7e7 fe92 	bl	8000618 <__aeabi_dmul>
 80188f4:	4682      	mov	sl, r0
 80188f6:	468b      	mov	fp, r1
 80188f8:	4602      	mov	r2, r0
 80188fa:	460b      	mov	r3, r1
 80188fc:	4620      	mov	r0, r4
 80188fe:	4629      	mov	r1, r5
 8018900:	f7e7 fe8a 	bl	8000618 <__aeabi_dmul>
 8018904:	a341      	add	r3, pc, #260	; (adr r3, 8018a0c <__kernel_sin+0x14c>)
 8018906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801890a:	4680      	mov	r8, r0
 801890c:	4689      	mov	r9, r1
 801890e:	4650      	mov	r0, sl
 8018910:	4659      	mov	r1, fp
 8018912:	f7e7 fe81 	bl	8000618 <__aeabi_dmul>
 8018916:	a33f      	add	r3, pc, #252	; (adr r3, 8018a14 <__kernel_sin+0x154>)
 8018918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801891c:	f7e7 fcc4 	bl	80002a8 <__aeabi_dsub>
 8018920:	4652      	mov	r2, sl
 8018922:	465b      	mov	r3, fp
 8018924:	f7e7 fe78 	bl	8000618 <__aeabi_dmul>
 8018928:	a33c      	add	r3, pc, #240	; (adr r3, 8018a1c <__kernel_sin+0x15c>)
 801892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801892e:	f7e7 fcbd 	bl	80002ac <__adddf3>
 8018932:	4652      	mov	r2, sl
 8018934:	465b      	mov	r3, fp
 8018936:	f7e7 fe6f 	bl	8000618 <__aeabi_dmul>
 801893a:	a33a      	add	r3, pc, #232	; (adr r3, 8018a24 <__kernel_sin+0x164>)
 801893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018940:	f7e7 fcb2 	bl	80002a8 <__aeabi_dsub>
 8018944:	4652      	mov	r2, sl
 8018946:	465b      	mov	r3, fp
 8018948:	f7e7 fe66 	bl	8000618 <__aeabi_dmul>
 801894c:	a337      	add	r3, pc, #220	; (adr r3, 8018a2c <__kernel_sin+0x16c>)
 801894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018952:	f7e7 fcab 	bl	80002ac <__adddf3>
 8018956:	9b02      	ldr	r3, [sp, #8]
 8018958:	4606      	mov	r6, r0
 801895a:	460f      	mov	r7, r1
 801895c:	b9db      	cbnz	r3, 8018996 <__kernel_sin+0xd6>
 801895e:	4602      	mov	r2, r0
 8018960:	460b      	mov	r3, r1
 8018962:	4650      	mov	r0, sl
 8018964:	4659      	mov	r1, fp
 8018966:	f7e7 fe57 	bl	8000618 <__aeabi_dmul>
 801896a:	a325      	add	r3, pc, #148	; (adr r3, 8018a00 <__kernel_sin+0x140>)
 801896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018970:	f7e7 fc9a 	bl	80002a8 <__aeabi_dsub>
 8018974:	4642      	mov	r2, r8
 8018976:	464b      	mov	r3, r9
 8018978:	f7e7 fe4e 	bl	8000618 <__aeabi_dmul>
 801897c:	4602      	mov	r2, r0
 801897e:	460b      	mov	r3, r1
 8018980:	4620      	mov	r0, r4
 8018982:	4629      	mov	r1, r5
 8018984:	f7e7 fc92 	bl	80002ac <__adddf3>
 8018988:	4604      	mov	r4, r0
 801898a:	460d      	mov	r5, r1
 801898c:	ec45 4b10 	vmov	d0, r4, r5
 8018990:	b005      	add	sp, #20
 8018992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018996:	2200      	movs	r2, #0
 8018998:	4b1b      	ldr	r3, [pc, #108]	; (8018a08 <__kernel_sin+0x148>)
 801899a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801899e:	f7e7 fe3b 	bl	8000618 <__aeabi_dmul>
 80189a2:	4632      	mov	r2, r6
 80189a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189a8:	463b      	mov	r3, r7
 80189aa:	4640      	mov	r0, r8
 80189ac:	4649      	mov	r1, r9
 80189ae:	f7e7 fe33 	bl	8000618 <__aeabi_dmul>
 80189b2:	4602      	mov	r2, r0
 80189b4:	460b      	mov	r3, r1
 80189b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80189ba:	f7e7 fc75 	bl	80002a8 <__aeabi_dsub>
 80189be:	4652      	mov	r2, sl
 80189c0:	465b      	mov	r3, fp
 80189c2:	f7e7 fe29 	bl	8000618 <__aeabi_dmul>
 80189c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80189ca:	f7e7 fc6d 	bl	80002a8 <__aeabi_dsub>
 80189ce:	a30c      	add	r3, pc, #48	; (adr r3, 8018a00 <__kernel_sin+0x140>)
 80189d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189d4:	4606      	mov	r6, r0
 80189d6:	460f      	mov	r7, r1
 80189d8:	4640      	mov	r0, r8
 80189da:	4649      	mov	r1, r9
 80189dc:	f7e7 fe1c 	bl	8000618 <__aeabi_dmul>
 80189e0:	4602      	mov	r2, r0
 80189e2:	460b      	mov	r3, r1
 80189e4:	4630      	mov	r0, r6
 80189e6:	4639      	mov	r1, r7
 80189e8:	f7e7 fc60 	bl	80002ac <__adddf3>
 80189ec:	4602      	mov	r2, r0
 80189ee:	460b      	mov	r3, r1
 80189f0:	4620      	mov	r0, r4
 80189f2:	4629      	mov	r1, r5
 80189f4:	f7e7 fc58 	bl	80002a8 <__aeabi_dsub>
 80189f8:	e7c6      	b.n	8018988 <__kernel_sin+0xc8>
 80189fa:	bf00      	nop
 80189fc:	f3af 8000 	nop.w
 8018a00:	55555549 	.word	0x55555549
 8018a04:	3fc55555 	.word	0x3fc55555
 8018a08:	3fe00000 	.word	0x3fe00000
 8018a0c:	5acfd57c 	.word	0x5acfd57c
 8018a10:	3de5d93a 	.word	0x3de5d93a
 8018a14:	8a2b9ceb 	.word	0x8a2b9ceb
 8018a18:	3e5ae5e6 	.word	0x3e5ae5e6
 8018a1c:	57b1fe7d 	.word	0x57b1fe7d
 8018a20:	3ec71de3 	.word	0x3ec71de3
 8018a24:	19c161d5 	.word	0x19c161d5
 8018a28:	3f2a01a0 	.word	0x3f2a01a0
 8018a2c:	1110f8a6 	.word	0x1110f8a6
 8018a30:	3f811111 	.word	0x3f811111

08018a34 <fabs>:
 8018a34:	ec51 0b10 	vmov	r0, r1, d0
 8018a38:	ee10 2a10 	vmov	r2, s0
 8018a3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018a40:	ec43 2b10 	vmov	d0, r2, r3
 8018a44:	4770      	bx	lr

08018a46 <matherr>:
 8018a46:	2000      	movs	r0, #0
 8018a48:	4770      	bx	lr
 8018a4a:	0000      	movs	r0, r0
 8018a4c:	0000      	movs	r0, r0
	...

08018a50 <scalbn>:
 8018a50:	b570      	push	{r4, r5, r6, lr}
 8018a52:	ec55 4b10 	vmov	r4, r5, d0
 8018a56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8018a5a:	4606      	mov	r6, r0
 8018a5c:	462b      	mov	r3, r5
 8018a5e:	b9aa      	cbnz	r2, 8018a8c <scalbn+0x3c>
 8018a60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018a64:	4323      	orrs	r3, r4
 8018a66:	d03b      	beq.n	8018ae0 <scalbn+0x90>
 8018a68:	4b31      	ldr	r3, [pc, #196]	; (8018b30 <scalbn+0xe0>)
 8018a6a:	4629      	mov	r1, r5
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	ee10 0a10 	vmov	r0, s0
 8018a72:	f7e7 fdd1 	bl	8000618 <__aeabi_dmul>
 8018a76:	4b2f      	ldr	r3, [pc, #188]	; (8018b34 <scalbn+0xe4>)
 8018a78:	429e      	cmp	r6, r3
 8018a7a:	4604      	mov	r4, r0
 8018a7c:	460d      	mov	r5, r1
 8018a7e:	da12      	bge.n	8018aa6 <scalbn+0x56>
 8018a80:	a327      	add	r3, pc, #156	; (adr r3, 8018b20 <scalbn+0xd0>)
 8018a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a86:	f7e7 fdc7 	bl	8000618 <__aeabi_dmul>
 8018a8a:	e009      	b.n	8018aa0 <scalbn+0x50>
 8018a8c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8018a90:	428a      	cmp	r2, r1
 8018a92:	d10c      	bne.n	8018aae <scalbn+0x5e>
 8018a94:	ee10 2a10 	vmov	r2, s0
 8018a98:	4620      	mov	r0, r4
 8018a9a:	4629      	mov	r1, r5
 8018a9c:	f7e7 fc06 	bl	80002ac <__adddf3>
 8018aa0:	4604      	mov	r4, r0
 8018aa2:	460d      	mov	r5, r1
 8018aa4:	e01c      	b.n	8018ae0 <scalbn+0x90>
 8018aa6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018aaa:	460b      	mov	r3, r1
 8018aac:	3a36      	subs	r2, #54	; 0x36
 8018aae:	4432      	add	r2, r6
 8018ab0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018ab4:	428a      	cmp	r2, r1
 8018ab6:	dd0b      	ble.n	8018ad0 <scalbn+0x80>
 8018ab8:	ec45 4b11 	vmov	d1, r4, r5
 8018abc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8018b28 <scalbn+0xd8>
 8018ac0:	f000 f90e 	bl	8018ce0 <copysign>
 8018ac4:	a318      	add	r3, pc, #96	; (adr r3, 8018b28 <scalbn+0xd8>)
 8018ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aca:	ec51 0b10 	vmov	r0, r1, d0
 8018ace:	e7da      	b.n	8018a86 <scalbn+0x36>
 8018ad0:	2a00      	cmp	r2, #0
 8018ad2:	dd08      	ble.n	8018ae6 <scalbn+0x96>
 8018ad4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018ad8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018adc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018ae0:	ec45 4b10 	vmov	d0, r4, r5
 8018ae4:	bd70      	pop	{r4, r5, r6, pc}
 8018ae6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018aea:	da0d      	bge.n	8018b08 <scalbn+0xb8>
 8018aec:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018af0:	429e      	cmp	r6, r3
 8018af2:	ec45 4b11 	vmov	d1, r4, r5
 8018af6:	dce1      	bgt.n	8018abc <scalbn+0x6c>
 8018af8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8018b20 <scalbn+0xd0>
 8018afc:	f000 f8f0 	bl	8018ce0 <copysign>
 8018b00:	a307      	add	r3, pc, #28	; (adr r3, 8018b20 <scalbn+0xd0>)
 8018b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b06:	e7e0      	b.n	8018aca <scalbn+0x7a>
 8018b08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018b0c:	3236      	adds	r2, #54	; 0x36
 8018b0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018b12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018b16:	4620      	mov	r0, r4
 8018b18:	4629      	mov	r1, r5
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	4b06      	ldr	r3, [pc, #24]	; (8018b38 <scalbn+0xe8>)
 8018b1e:	e7b2      	b.n	8018a86 <scalbn+0x36>
 8018b20:	c2f8f359 	.word	0xc2f8f359
 8018b24:	01a56e1f 	.word	0x01a56e1f
 8018b28:	8800759c 	.word	0x8800759c
 8018b2c:	7e37e43c 	.word	0x7e37e43c
 8018b30:	43500000 	.word	0x43500000
 8018b34:	ffff3cb0 	.word	0xffff3cb0
 8018b38:	3c900000 	.word	0x3c900000

08018b3c <fabsf>:
 8018b3c:	ee10 3a10 	vmov	r3, s0
 8018b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018b44:	ee00 3a10 	vmov	s0, r3
 8018b48:	4770      	bx	lr

08018b4a <finitef>:
 8018b4a:	ee10 3a10 	vmov	r3, s0
 8018b4e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8018b52:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8018b56:	bfac      	ite	ge
 8018b58:	2000      	movge	r0, #0
 8018b5a:	2001      	movlt	r0, #1
 8018b5c:	4770      	bx	lr
	...

08018b60 <nanf>:
 8018b60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018b68 <nanf+0x8>
 8018b64:	4770      	bx	lr
 8018b66:	bf00      	nop
 8018b68:	7fc00000 	.word	0x7fc00000

08018b6c <rintf>:
 8018b6c:	b513      	push	{r0, r1, r4, lr}
 8018b6e:	ee10 1a10 	vmov	r1, s0
 8018b72:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018b76:	0ddc      	lsrs	r4, r3, #23
 8018b78:	3c7f      	subs	r4, #127	; 0x7f
 8018b7a:	2c16      	cmp	r4, #22
 8018b7c:	dc46      	bgt.n	8018c0c <rintf+0xa0>
 8018b7e:	b32b      	cbz	r3, 8018bcc <rintf+0x60>
 8018b80:	2c00      	cmp	r4, #0
 8018b82:	ee10 2a10 	vmov	r2, s0
 8018b86:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8018b8a:	da21      	bge.n	8018bd0 <rintf+0x64>
 8018b8c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8018b90:	425b      	negs	r3, r3
 8018b92:	4a21      	ldr	r2, [pc, #132]	; (8018c18 <rintf+0xac>)
 8018b94:	0a5b      	lsrs	r3, r3, #9
 8018b96:	0d09      	lsrs	r1, r1, #20
 8018b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018b9c:	0509      	lsls	r1, r1, #20
 8018b9e:	430b      	orrs	r3, r1
 8018ba0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8018ba4:	ee07 3a90 	vmov	s15, r3
 8018ba8:	edd2 6a00 	vldr	s13, [r2]
 8018bac:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8018bb0:	ed8d 7a01 	vstr	s14, [sp, #4]
 8018bb4:	eddd 7a01 	vldr	s15, [sp, #4]
 8018bb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018bbc:	ee17 3a90 	vmov	r3, s15
 8018bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018bc4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8018bc8:	ee00 3a10 	vmov	s0, r3
 8018bcc:	b002      	add	sp, #8
 8018bce:	bd10      	pop	{r4, pc}
 8018bd0:	4b12      	ldr	r3, [pc, #72]	; (8018c1c <rintf+0xb0>)
 8018bd2:	4123      	asrs	r3, r4
 8018bd4:	4219      	tst	r1, r3
 8018bd6:	d0f9      	beq.n	8018bcc <rintf+0x60>
 8018bd8:	085b      	lsrs	r3, r3, #1
 8018bda:	4219      	tst	r1, r3
 8018bdc:	d006      	beq.n	8018bec <rintf+0x80>
 8018bde:	ea21 0203 	bic.w	r2, r1, r3
 8018be2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8018be6:	fa43 f404 	asr.w	r4, r3, r4
 8018bea:	4322      	orrs	r2, r4
 8018bec:	4b0a      	ldr	r3, [pc, #40]	; (8018c18 <rintf+0xac>)
 8018bee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018bf2:	ed90 7a00 	vldr	s14, [r0]
 8018bf6:	ee07 2a90 	vmov	s15, r2
 8018bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018bfe:	edcd 7a01 	vstr	s15, [sp, #4]
 8018c02:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018c06:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018c0a:	e7df      	b.n	8018bcc <rintf+0x60>
 8018c0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018c10:	d3dc      	bcc.n	8018bcc <rintf+0x60>
 8018c12:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018c16:	e7d9      	b.n	8018bcc <rintf+0x60>
 8018c18:	08026fb8 	.word	0x08026fb8
 8018c1c:	007fffff 	.word	0x007fffff

08018c20 <scalbnf>:
 8018c20:	b508      	push	{r3, lr}
 8018c22:	ee10 2a10 	vmov	r2, s0
 8018c26:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8018c2a:	ed2d 8b02 	vpush	{d8}
 8018c2e:	eef0 0a40 	vmov.f32	s1, s0
 8018c32:	d004      	beq.n	8018c3e <scalbnf+0x1e>
 8018c34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018c38:	d306      	bcc.n	8018c48 <scalbnf+0x28>
 8018c3a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8018c3e:	ecbd 8b02 	vpop	{d8}
 8018c42:	eeb0 0a60 	vmov.f32	s0, s1
 8018c46:	bd08      	pop	{r3, pc}
 8018c48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018c4c:	d21c      	bcs.n	8018c88 <scalbnf+0x68>
 8018c4e:	4b1f      	ldr	r3, [pc, #124]	; (8018ccc <scalbnf+0xac>)
 8018c50:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8018cd0 <scalbnf+0xb0>
 8018c54:	4298      	cmp	r0, r3
 8018c56:	ee60 0a27 	vmul.f32	s1, s0, s15
 8018c5a:	db10      	blt.n	8018c7e <scalbnf+0x5e>
 8018c5c:	ee10 2a90 	vmov	r2, s1
 8018c60:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8018c64:	3b19      	subs	r3, #25
 8018c66:	4403      	add	r3, r0
 8018c68:	2bfe      	cmp	r3, #254	; 0xfe
 8018c6a:	dd0f      	ble.n	8018c8c <scalbnf+0x6c>
 8018c6c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8018cd4 <scalbnf+0xb4>
 8018c70:	eeb0 0a48 	vmov.f32	s0, s16
 8018c74:	f000 f843 	bl	8018cfe <copysignf>
 8018c78:	ee60 0a08 	vmul.f32	s1, s0, s16
 8018c7c:	e7df      	b.n	8018c3e <scalbnf+0x1e>
 8018c7e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8018cd8 <scalbnf+0xb8>
 8018c82:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8018c86:	e7da      	b.n	8018c3e <scalbnf+0x1e>
 8018c88:	0ddb      	lsrs	r3, r3, #23
 8018c8a:	e7ec      	b.n	8018c66 <scalbnf+0x46>
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	dd06      	ble.n	8018c9e <scalbnf+0x7e>
 8018c90:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8018c94:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8018c98:	ee00 3a90 	vmov	s1, r3
 8018c9c:	e7cf      	b.n	8018c3e <scalbnf+0x1e>
 8018c9e:	f113 0f16 	cmn.w	r3, #22
 8018ca2:	da06      	bge.n	8018cb2 <scalbnf+0x92>
 8018ca4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018ca8:	4298      	cmp	r0, r3
 8018caa:	dcdf      	bgt.n	8018c6c <scalbnf+0x4c>
 8018cac:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8018cd8 <scalbnf+0xb8>
 8018cb0:	e7de      	b.n	8018c70 <scalbnf+0x50>
 8018cb2:	3319      	adds	r3, #25
 8018cb4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8018cb8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8018cbc:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018cdc <scalbnf+0xbc>
 8018cc0:	ee07 3a10 	vmov	s14, r3
 8018cc4:	ee67 0a27 	vmul.f32	s1, s14, s15
 8018cc8:	e7b9      	b.n	8018c3e <scalbnf+0x1e>
 8018cca:	bf00      	nop
 8018ccc:	ffff3cb0 	.word	0xffff3cb0
 8018cd0:	4c000000 	.word	0x4c000000
 8018cd4:	7149f2ca 	.word	0x7149f2ca
 8018cd8:	0da24260 	.word	0x0da24260
 8018cdc:	33000000 	.word	0x33000000

08018ce0 <copysign>:
 8018ce0:	ec51 0b10 	vmov	r0, r1, d0
 8018ce4:	ee11 0a90 	vmov	r0, s3
 8018ce8:	ee10 2a10 	vmov	r2, s0
 8018cec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018cf0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8018cf4:	ea41 0300 	orr.w	r3, r1, r0
 8018cf8:	ec43 2b10 	vmov	d0, r2, r3
 8018cfc:	4770      	bx	lr

08018cfe <copysignf>:
 8018cfe:	ee10 3a10 	vmov	r3, s0
 8018d02:	ee10 2a90 	vmov	r2, s1
 8018d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d0a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8018d0e:	4313      	orrs	r3, r2
 8018d10:	ee00 3a10 	vmov	s0, r3
 8018d14:	4770      	bx	lr

08018d16 <abort>:
 8018d16:	b508      	push	{r3, lr}
 8018d18:	2006      	movs	r0, #6
 8018d1a:	f001 f83f 	bl	8019d9c <raise>
 8018d1e:	2001      	movs	r0, #1
 8018d20:	f7f9 fdf8 	bl	8012914 <_exit>

08018d24 <__assert_func>:
 8018d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018d26:	461c      	mov	r4, r3
 8018d28:	4b09      	ldr	r3, [pc, #36]	; (8018d50 <__assert_func+0x2c>)
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	4605      	mov	r5, r0
 8018d2e:	68d8      	ldr	r0, [r3, #12]
 8018d30:	b152      	cbz	r2, 8018d48 <__assert_func+0x24>
 8018d32:	4b08      	ldr	r3, [pc, #32]	; (8018d54 <__assert_func+0x30>)
 8018d34:	9100      	str	r1, [sp, #0]
 8018d36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8018d3a:	4907      	ldr	r1, [pc, #28]	; (8018d58 <__assert_func+0x34>)
 8018d3c:	462b      	mov	r3, r5
 8018d3e:	4622      	mov	r2, r4
 8018d40:	f000 f822 	bl	8018d88 <fiprintf>
 8018d44:	f7ff ffe7 	bl	8018d16 <abort>
 8018d48:	4b04      	ldr	r3, [pc, #16]	; (8018d5c <__assert_func+0x38>)
 8018d4a:	461a      	mov	r2, r3
 8018d4c:	e7f2      	b.n	8018d34 <__assert_func+0x10>
 8018d4e:	bf00      	nop
 8018d50:	20000018 	.word	0x20000018
 8018d54:	08026fc0 	.word	0x08026fc0
 8018d58:	08026fcd 	.word	0x08026fcd
 8018d5c:	08026ffb 	.word	0x08026ffb

08018d60 <atexit>:
 8018d60:	2300      	movs	r3, #0
 8018d62:	4601      	mov	r1, r0
 8018d64:	461a      	mov	r2, r3
 8018d66:	4618      	mov	r0, r3
 8018d68:	f001 b926 	b.w	8019fb8 <__register_exitproc>

08018d6c <calloc>:
 8018d6c:	4b02      	ldr	r3, [pc, #8]	; (8018d78 <calloc+0xc>)
 8018d6e:	460a      	mov	r2, r1
 8018d70:	4601      	mov	r1, r0
 8018d72:	6818      	ldr	r0, [r3, #0]
 8018d74:	f000 b952 	b.w	801901c <_calloc_r>
 8018d78:	20000018 	.word	0x20000018

08018d7c <__errno>:
 8018d7c:	4b01      	ldr	r3, [pc, #4]	; (8018d84 <__errno+0x8>)
 8018d7e:	6818      	ldr	r0, [r3, #0]
 8018d80:	4770      	bx	lr
 8018d82:	bf00      	nop
 8018d84:	20000018 	.word	0x20000018

08018d88 <fiprintf>:
 8018d88:	b40e      	push	{r1, r2, r3}
 8018d8a:	b503      	push	{r0, r1, lr}
 8018d8c:	4601      	mov	r1, r0
 8018d8e:	ab03      	add	r3, sp, #12
 8018d90:	4805      	ldr	r0, [pc, #20]	; (8018da8 <fiprintf+0x20>)
 8018d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d96:	6800      	ldr	r0, [r0, #0]
 8018d98:	9301      	str	r3, [sp, #4]
 8018d9a:	f000 fa1f 	bl	80191dc <_vfiprintf_r>
 8018d9e:	b002      	add	sp, #8
 8018da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8018da4:	b003      	add	sp, #12
 8018da6:	4770      	bx	lr
 8018da8:	20000018 	.word	0x20000018

08018dac <_fputc_r>:
 8018dac:	b570      	push	{r4, r5, r6, lr}
 8018dae:	460e      	mov	r6, r1
 8018db0:	4614      	mov	r4, r2
 8018db2:	4605      	mov	r5, r0
 8018db4:	b118      	cbz	r0, 8018dbe <_fputc_r+0x12>
 8018db6:	6983      	ldr	r3, [r0, #24]
 8018db8:	b90b      	cbnz	r3, 8018dbe <_fputc_r+0x12>
 8018dba:	f002 f895 	bl	801aee8 <__sinit>
 8018dbe:	4b0a      	ldr	r3, [pc, #40]	; (8018de8 <_fputc_r+0x3c>)
 8018dc0:	429c      	cmp	r4, r3
 8018dc2:	d107      	bne.n	8018dd4 <_fputc_r+0x28>
 8018dc4:	686c      	ldr	r4, [r5, #4]
 8018dc6:	4622      	mov	r2, r4
 8018dc8:	4631      	mov	r1, r6
 8018dca:	4628      	mov	r0, r5
 8018dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018dd0:	f000 bf76 	b.w	8019cc0 <_putc_r>
 8018dd4:	4b05      	ldr	r3, [pc, #20]	; (8018dec <_fputc_r+0x40>)
 8018dd6:	429c      	cmp	r4, r3
 8018dd8:	d101      	bne.n	8018dde <_fputc_r+0x32>
 8018dda:	68ac      	ldr	r4, [r5, #8]
 8018ddc:	e7f3      	b.n	8018dc6 <_fputc_r+0x1a>
 8018dde:	4b04      	ldr	r3, [pc, #16]	; (8018df0 <_fputc_r+0x44>)
 8018de0:	429c      	cmp	r4, r3
 8018de2:	bf08      	it	eq
 8018de4:	68ec      	ldreq	r4, [r5, #12]
 8018de6:	e7ee      	b.n	8018dc6 <_fputc_r+0x1a>
 8018de8:	08027074 	.word	0x08027074
 8018dec:	08027094 	.word	0x08027094
 8018df0:	08027054 	.word	0x08027054

08018df4 <fputc>:
 8018df4:	4b02      	ldr	r3, [pc, #8]	; (8018e00 <fputc+0xc>)
 8018df6:	460a      	mov	r2, r1
 8018df8:	4601      	mov	r1, r0
 8018dfa:	6818      	ldr	r0, [r3, #0]
 8018dfc:	f7ff bfd6 	b.w	8018dac <_fputc_r>
 8018e00:	20000018 	.word	0x20000018

08018e04 <_fputs_r>:
 8018e04:	b570      	push	{r4, r5, r6, lr}
 8018e06:	460e      	mov	r6, r1
 8018e08:	4614      	mov	r4, r2
 8018e0a:	4605      	mov	r5, r0
 8018e0c:	b118      	cbz	r0, 8018e16 <_fputs_r+0x12>
 8018e0e:	6983      	ldr	r3, [r0, #24]
 8018e10:	b90b      	cbnz	r3, 8018e16 <_fputs_r+0x12>
 8018e12:	f002 f869 	bl	801aee8 <__sinit>
 8018e16:	4b1c      	ldr	r3, [pc, #112]	; (8018e88 <_fputs_r+0x84>)
 8018e18:	429c      	cmp	r4, r3
 8018e1a:	d10b      	bne.n	8018e34 <_fputs_r+0x30>
 8018e1c:	686c      	ldr	r4, [r5, #4]
 8018e1e:	89a3      	ldrh	r3, [r4, #12]
 8018e20:	071b      	lsls	r3, r3, #28
 8018e22:	d511      	bpl.n	8018e48 <_fputs_r+0x44>
 8018e24:	6923      	ldr	r3, [r4, #16]
 8018e26:	b17b      	cbz	r3, 8018e48 <_fputs_r+0x44>
 8018e28:	3e01      	subs	r6, #1
 8018e2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018e2e:	b9a1      	cbnz	r1, 8018e5a <_fputs_r+0x56>
 8018e30:	4608      	mov	r0, r1
 8018e32:	e011      	b.n	8018e58 <_fputs_r+0x54>
 8018e34:	4b15      	ldr	r3, [pc, #84]	; (8018e8c <_fputs_r+0x88>)
 8018e36:	429c      	cmp	r4, r3
 8018e38:	d101      	bne.n	8018e3e <_fputs_r+0x3a>
 8018e3a:	68ac      	ldr	r4, [r5, #8]
 8018e3c:	e7ef      	b.n	8018e1e <_fputs_r+0x1a>
 8018e3e:	4b14      	ldr	r3, [pc, #80]	; (8018e90 <_fputs_r+0x8c>)
 8018e40:	429c      	cmp	r4, r3
 8018e42:	bf08      	it	eq
 8018e44:	68ec      	ldreq	r4, [r5, #12]
 8018e46:	e7ea      	b.n	8018e1e <_fputs_r+0x1a>
 8018e48:	4621      	mov	r1, r4
 8018e4a:	4628      	mov	r0, r5
 8018e4c:	f001 f846 	bl	8019edc <__swsetup_r>
 8018e50:	2800      	cmp	r0, #0
 8018e52:	d0e9      	beq.n	8018e28 <_fputs_r+0x24>
 8018e54:	f04f 30ff 	mov.w	r0, #4294967295
 8018e58:	bd70      	pop	{r4, r5, r6, pc}
 8018e5a:	68a3      	ldr	r3, [r4, #8]
 8018e5c:	3b01      	subs	r3, #1
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	60a3      	str	r3, [r4, #8]
 8018e62:	da04      	bge.n	8018e6e <_fputs_r+0x6a>
 8018e64:	69a2      	ldr	r2, [r4, #24]
 8018e66:	4293      	cmp	r3, r2
 8018e68:	db06      	blt.n	8018e78 <_fputs_r+0x74>
 8018e6a:	290a      	cmp	r1, #10
 8018e6c:	d004      	beq.n	8018e78 <_fputs_r+0x74>
 8018e6e:	6823      	ldr	r3, [r4, #0]
 8018e70:	1c5a      	adds	r2, r3, #1
 8018e72:	6022      	str	r2, [r4, #0]
 8018e74:	7019      	strb	r1, [r3, #0]
 8018e76:	e7d8      	b.n	8018e2a <_fputs_r+0x26>
 8018e78:	4622      	mov	r2, r4
 8018e7a:	4628      	mov	r0, r5
 8018e7c:	f000 ffdc 	bl	8019e38 <__swbuf_r>
 8018e80:	3001      	adds	r0, #1
 8018e82:	d1d2      	bne.n	8018e2a <_fputs_r+0x26>
 8018e84:	e7e6      	b.n	8018e54 <_fputs_r+0x50>
 8018e86:	bf00      	nop
 8018e88:	08027074 	.word	0x08027074
 8018e8c:	08027094 	.word	0x08027094
 8018e90:	08027054 	.word	0x08027054

08018e94 <fputs>:
 8018e94:	4b02      	ldr	r3, [pc, #8]	; (8018ea0 <fputs+0xc>)
 8018e96:	460a      	mov	r2, r1
 8018e98:	4601      	mov	r1, r0
 8018e9a:	6818      	ldr	r0, [r3, #0]
 8018e9c:	f7ff bfb2 	b.w	8018e04 <_fputs_r>
 8018ea0:	20000018 	.word	0x20000018

08018ea4 <_fwrite_r>:
 8018ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ea8:	9c08      	ldr	r4, [sp, #32]
 8018eaa:	4689      	mov	r9, r1
 8018eac:	4617      	mov	r7, r2
 8018eae:	fb02 f803 	mul.w	r8, r2, r3
 8018eb2:	4606      	mov	r6, r0
 8018eb4:	b118      	cbz	r0, 8018ebe <_fwrite_r+0x1a>
 8018eb6:	6983      	ldr	r3, [r0, #24]
 8018eb8:	b90b      	cbnz	r3, 8018ebe <_fwrite_r+0x1a>
 8018eba:	f002 f815 	bl	801aee8 <__sinit>
 8018ebe:	4b1d      	ldr	r3, [pc, #116]	; (8018f34 <_fwrite_r+0x90>)
 8018ec0:	429c      	cmp	r4, r3
 8018ec2:	d11a      	bne.n	8018efa <_fwrite_r+0x56>
 8018ec4:	6874      	ldr	r4, [r6, #4]
 8018ec6:	89a3      	ldrh	r3, [r4, #12]
 8018ec8:	071b      	lsls	r3, r3, #28
 8018eca:	d520      	bpl.n	8018f0e <_fwrite_r+0x6a>
 8018ecc:	6923      	ldr	r3, [r4, #16]
 8018ece:	b1f3      	cbz	r3, 8018f0e <_fwrite_r+0x6a>
 8018ed0:	2500      	movs	r5, #0
 8018ed2:	4545      	cmp	r5, r8
 8018ed4:	d029      	beq.n	8018f2a <_fwrite_r+0x86>
 8018ed6:	68a3      	ldr	r3, [r4, #8]
 8018ed8:	f819 1005 	ldrb.w	r1, [r9, r5]
 8018edc:	3b01      	subs	r3, #1
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	60a3      	str	r3, [r4, #8]
 8018ee2:	da04      	bge.n	8018eee <_fwrite_r+0x4a>
 8018ee4:	69a2      	ldr	r2, [r4, #24]
 8018ee6:	4293      	cmp	r3, r2
 8018ee8:	db19      	blt.n	8018f1e <_fwrite_r+0x7a>
 8018eea:	290a      	cmp	r1, #10
 8018eec:	d017      	beq.n	8018f1e <_fwrite_r+0x7a>
 8018eee:	6823      	ldr	r3, [r4, #0]
 8018ef0:	1c5a      	adds	r2, r3, #1
 8018ef2:	6022      	str	r2, [r4, #0]
 8018ef4:	7019      	strb	r1, [r3, #0]
 8018ef6:	3501      	adds	r5, #1
 8018ef8:	e7eb      	b.n	8018ed2 <_fwrite_r+0x2e>
 8018efa:	4b0f      	ldr	r3, [pc, #60]	; (8018f38 <_fwrite_r+0x94>)
 8018efc:	429c      	cmp	r4, r3
 8018efe:	d101      	bne.n	8018f04 <_fwrite_r+0x60>
 8018f00:	68b4      	ldr	r4, [r6, #8]
 8018f02:	e7e0      	b.n	8018ec6 <_fwrite_r+0x22>
 8018f04:	4b0d      	ldr	r3, [pc, #52]	; (8018f3c <_fwrite_r+0x98>)
 8018f06:	429c      	cmp	r4, r3
 8018f08:	bf08      	it	eq
 8018f0a:	68f4      	ldreq	r4, [r6, #12]
 8018f0c:	e7db      	b.n	8018ec6 <_fwrite_r+0x22>
 8018f0e:	4621      	mov	r1, r4
 8018f10:	4630      	mov	r0, r6
 8018f12:	f000 ffe3 	bl	8019edc <__swsetup_r>
 8018f16:	2800      	cmp	r0, #0
 8018f18:	d0da      	beq.n	8018ed0 <_fwrite_r+0x2c>
 8018f1a:	2500      	movs	r5, #0
 8018f1c:	e005      	b.n	8018f2a <_fwrite_r+0x86>
 8018f1e:	4622      	mov	r2, r4
 8018f20:	4630      	mov	r0, r6
 8018f22:	f000 ff89 	bl	8019e38 <__swbuf_r>
 8018f26:	3001      	adds	r0, #1
 8018f28:	d1e5      	bne.n	8018ef6 <_fwrite_r+0x52>
 8018f2a:	fbb5 f0f7 	udiv	r0, r5, r7
 8018f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f32:	bf00      	nop
 8018f34:	08027074 	.word	0x08027074
 8018f38:	08027094 	.word	0x08027094
 8018f3c:	08027054 	.word	0x08027054

08018f40 <fwrite>:
 8018f40:	b507      	push	{r0, r1, r2, lr}
 8018f42:	9300      	str	r3, [sp, #0]
 8018f44:	4613      	mov	r3, r2
 8018f46:	460a      	mov	r2, r1
 8018f48:	4601      	mov	r1, r0
 8018f4a:	4803      	ldr	r0, [pc, #12]	; (8018f58 <fwrite+0x18>)
 8018f4c:	6800      	ldr	r0, [r0, #0]
 8018f4e:	f7ff ffa9 	bl	8018ea4 <_fwrite_r>
 8018f52:	b003      	add	sp, #12
 8018f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f58:	20000018 	.word	0x20000018

08018f5c <__libc_init_array>:
 8018f5c:	b570      	push	{r4, r5, r6, lr}
 8018f5e:	4e0d      	ldr	r6, [pc, #52]	; (8018f94 <__libc_init_array+0x38>)
 8018f60:	4c0d      	ldr	r4, [pc, #52]	; (8018f98 <__libc_init_array+0x3c>)
 8018f62:	1ba4      	subs	r4, r4, r6
 8018f64:	10a4      	asrs	r4, r4, #2
 8018f66:	2500      	movs	r5, #0
 8018f68:	42a5      	cmp	r5, r4
 8018f6a:	d109      	bne.n	8018f80 <__libc_init_array+0x24>
 8018f6c:	4e0b      	ldr	r6, [pc, #44]	; (8018f9c <__libc_init_array+0x40>)
 8018f6e:	4c0c      	ldr	r4, [pc, #48]	; (8018fa0 <__libc_init_array+0x44>)
 8018f70:	f002 fde0 	bl	801bb34 <_init>
 8018f74:	1ba4      	subs	r4, r4, r6
 8018f76:	10a4      	asrs	r4, r4, #2
 8018f78:	2500      	movs	r5, #0
 8018f7a:	42a5      	cmp	r5, r4
 8018f7c:	d105      	bne.n	8018f8a <__libc_init_array+0x2e>
 8018f7e:	bd70      	pop	{r4, r5, r6, pc}
 8018f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018f84:	4798      	blx	r3
 8018f86:	3501      	adds	r5, #1
 8018f88:	e7ee      	b.n	8018f68 <__libc_init_array+0xc>
 8018f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018f8e:	4798      	blx	r3
 8018f90:	3501      	adds	r5, #1
 8018f92:	e7f2      	b.n	8018f7a <__libc_init_array+0x1e>
 8018f94:	080272c8 	.word	0x080272c8
 8018f98:	080272c8 	.word	0x080272c8
 8018f9c:	080272c8 	.word	0x080272c8
 8018fa0:	080272cc 	.word	0x080272cc

08018fa4 <malloc>:
 8018fa4:	4b02      	ldr	r3, [pc, #8]	; (8018fb0 <malloc+0xc>)
 8018fa6:	4601      	mov	r1, r0
 8018fa8:	6818      	ldr	r0, [r3, #0]
 8018faa:	f000 b893 	b.w	80190d4 <_malloc_r>
 8018fae:	bf00      	nop
 8018fb0:	20000018 	.word	0x20000018

08018fb4 <free>:
 8018fb4:	4b02      	ldr	r3, [pc, #8]	; (8018fc0 <free+0xc>)
 8018fb6:	4601      	mov	r1, r0
 8018fb8:	6818      	ldr	r0, [r3, #0]
 8018fba:	f000 b83d 	b.w	8019038 <_free_r>
 8018fbe:	bf00      	nop
 8018fc0:	20000018 	.word	0x20000018

08018fc4 <memcpy>:
 8018fc4:	b510      	push	{r4, lr}
 8018fc6:	1e43      	subs	r3, r0, #1
 8018fc8:	440a      	add	r2, r1
 8018fca:	4291      	cmp	r1, r2
 8018fcc:	d100      	bne.n	8018fd0 <memcpy+0xc>
 8018fce:	bd10      	pop	{r4, pc}
 8018fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018fd8:	e7f7      	b.n	8018fca <memcpy+0x6>

08018fda <memmove>:
 8018fda:	4288      	cmp	r0, r1
 8018fdc:	b510      	push	{r4, lr}
 8018fde:	eb01 0302 	add.w	r3, r1, r2
 8018fe2:	d807      	bhi.n	8018ff4 <memmove+0x1a>
 8018fe4:	1e42      	subs	r2, r0, #1
 8018fe6:	4299      	cmp	r1, r3
 8018fe8:	d00a      	beq.n	8019000 <memmove+0x26>
 8018fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018fee:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018ff2:	e7f8      	b.n	8018fe6 <memmove+0xc>
 8018ff4:	4283      	cmp	r3, r0
 8018ff6:	d9f5      	bls.n	8018fe4 <memmove+0xa>
 8018ff8:	1881      	adds	r1, r0, r2
 8018ffa:	1ad2      	subs	r2, r2, r3
 8018ffc:	42d3      	cmn	r3, r2
 8018ffe:	d100      	bne.n	8019002 <memmove+0x28>
 8019000:	bd10      	pop	{r4, pc}
 8019002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019006:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801900a:	e7f7      	b.n	8018ffc <memmove+0x22>

0801900c <memset>:
 801900c:	4402      	add	r2, r0
 801900e:	4603      	mov	r3, r0
 8019010:	4293      	cmp	r3, r2
 8019012:	d100      	bne.n	8019016 <memset+0xa>
 8019014:	4770      	bx	lr
 8019016:	f803 1b01 	strb.w	r1, [r3], #1
 801901a:	e7f9      	b.n	8019010 <memset+0x4>

0801901c <_calloc_r>:
 801901c:	b538      	push	{r3, r4, r5, lr}
 801901e:	fb02 f401 	mul.w	r4, r2, r1
 8019022:	4621      	mov	r1, r4
 8019024:	f000 f856 	bl	80190d4 <_malloc_r>
 8019028:	4605      	mov	r5, r0
 801902a:	b118      	cbz	r0, 8019034 <_calloc_r+0x18>
 801902c:	4622      	mov	r2, r4
 801902e:	2100      	movs	r1, #0
 8019030:	f7ff ffec 	bl	801900c <memset>
 8019034:	4628      	mov	r0, r5
 8019036:	bd38      	pop	{r3, r4, r5, pc}

08019038 <_free_r>:
 8019038:	b538      	push	{r3, r4, r5, lr}
 801903a:	4605      	mov	r5, r0
 801903c:	2900      	cmp	r1, #0
 801903e:	d045      	beq.n	80190cc <_free_r+0x94>
 8019040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019044:	1f0c      	subs	r4, r1, #4
 8019046:	2b00      	cmp	r3, #0
 8019048:	bfb8      	it	lt
 801904a:	18e4      	addlt	r4, r4, r3
 801904c:	f002 f848 	bl	801b0e0 <__malloc_lock>
 8019050:	4a1f      	ldr	r2, [pc, #124]	; (80190d0 <_free_r+0x98>)
 8019052:	6813      	ldr	r3, [r2, #0]
 8019054:	4610      	mov	r0, r2
 8019056:	b933      	cbnz	r3, 8019066 <_free_r+0x2e>
 8019058:	6063      	str	r3, [r4, #4]
 801905a:	6014      	str	r4, [r2, #0]
 801905c:	4628      	mov	r0, r5
 801905e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019062:	f002 b83e 	b.w	801b0e2 <__malloc_unlock>
 8019066:	42a3      	cmp	r3, r4
 8019068:	d90c      	bls.n	8019084 <_free_r+0x4c>
 801906a:	6821      	ldr	r1, [r4, #0]
 801906c:	1862      	adds	r2, r4, r1
 801906e:	4293      	cmp	r3, r2
 8019070:	bf04      	itt	eq
 8019072:	681a      	ldreq	r2, [r3, #0]
 8019074:	685b      	ldreq	r3, [r3, #4]
 8019076:	6063      	str	r3, [r4, #4]
 8019078:	bf04      	itt	eq
 801907a:	1852      	addeq	r2, r2, r1
 801907c:	6022      	streq	r2, [r4, #0]
 801907e:	6004      	str	r4, [r0, #0]
 8019080:	e7ec      	b.n	801905c <_free_r+0x24>
 8019082:	4613      	mov	r3, r2
 8019084:	685a      	ldr	r2, [r3, #4]
 8019086:	b10a      	cbz	r2, 801908c <_free_r+0x54>
 8019088:	42a2      	cmp	r2, r4
 801908a:	d9fa      	bls.n	8019082 <_free_r+0x4a>
 801908c:	6819      	ldr	r1, [r3, #0]
 801908e:	1858      	adds	r0, r3, r1
 8019090:	42a0      	cmp	r0, r4
 8019092:	d10b      	bne.n	80190ac <_free_r+0x74>
 8019094:	6820      	ldr	r0, [r4, #0]
 8019096:	4401      	add	r1, r0
 8019098:	1858      	adds	r0, r3, r1
 801909a:	4282      	cmp	r2, r0
 801909c:	6019      	str	r1, [r3, #0]
 801909e:	d1dd      	bne.n	801905c <_free_r+0x24>
 80190a0:	6810      	ldr	r0, [r2, #0]
 80190a2:	6852      	ldr	r2, [r2, #4]
 80190a4:	605a      	str	r2, [r3, #4]
 80190a6:	4401      	add	r1, r0
 80190a8:	6019      	str	r1, [r3, #0]
 80190aa:	e7d7      	b.n	801905c <_free_r+0x24>
 80190ac:	d902      	bls.n	80190b4 <_free_r+0x7c>
 80190ae:	230c      	movs	r3, #12
 80190b0:	602b      	str	r3, [r5, #0]
 80190b2:	e7d3      	b.n	801905c <_free_r+0x24>
 80190b4:	6820      	ldr	r0, [r4, #0]
 80190b6:	1821      	adds	r1, r4, r0
 80190b8:	428a      	cmp	r2, r1
 80190ba:	bf04      	itt	eq
 80190bc:	6811      	ldreq	r1, [r2, #0]
 80190be:	6852      	ldreq	r2, [r2, #4]
 80190c0:	6062      	str	r2, [r4, #4]
 80190c2:	bf04      	itt	eq
 80190c4:	1809      	addeq	r1, r1, r0
 80190c6:	6021      	streq	r1, [r4, #0]
 80190c8:	605c      	str	r4, [r3, #4]
 80190ca:	e7c7      	b.n	801905c <_free_r+0x24>
 80190cc:	bd38      	pop	{r3, r4, r5, pc}
 80190ce:	bf00      	nop
 80190d0:	2000854c 	.word	0x2000854c

080190d4 <_malloc_r>:
 80190d4:	b570      	push	{r4, r5, r6, lr}
 80190d6:	1ccd      	adds	r5, r1, #3
 80190d8:	f025 0503 	bic.w	r5, r5, #3
 80190dc:	3508      	adds	r5, #8
 80190de:	2d0c      	cmp	r5, #12
 80190e0:	bf38      	it	cc
 80190e2:	250c      	movcc	r5, #12
 80190e4:	2d00      	cmp	r5, #0
 80190e6:	4606      	mov	r6, r0
 80190e8:	db01      	blt.n	80190ee <_malloc_r+0x1a>
 80190ea:	42a9      	cmp	r1, r5
 80190ec:	d903      	bls.n	80190f6 <_malloc_r+0x22>
 80190ee:	230c      	movs	r3, #12
 80190f0:	6033      	str	r3, [r6, #0]
 80190f2:	2000      	movs	r0, #0
 80190f4:	bd70      	pop	{r4, r5, r6, pc}
 80190f6:	f001 fff3 	bl	801b0e0 <__malloc_lock>
 80190fa:	4a21      	ldr	r2, [pc, #132]	; (8019180 <_malloc_r+0xac>)
 80190fc:	6814      	ldr	r4, [r2, #0]
 80190fe:	4621      	mov	r1, r4
 8019100:	b991      	cbnz	r1, 8019128 <_malloc_r+0x54>
 8019102:	4c20      	ldr	r4, [pc, #128]	; (8019184 <_malloc_r+0xb0>)
 8019104:	6823      	ldr	r3, [r4, #0]
 8019106:	b91b      	cbnz	r3, 8019110 <_malloc_r+0x3c>
 8019108:	4630      	mov	r0, r6
 801910a:	f000 fe0f 	bl	8019d2c <_sbrk_r>
 801910e:	6020      	str	r0, [r4, #0]
 8019110:	4629      	mov	r1, r5
 8019112:	4630      	mov	r0, r6
 8019114:	f000 fe0a 	bl	8019d2c <_sbrk_r>
 8019118:	1c43      	adds	r3, r0, #1
 801911a:	d124      	bne.n	8019166 <_malloc_r+0x92>
 801911c:	230c      	movs	r3, #12
 801911e:	6033      	str	r3, [r6, #0]
 8019120:	4630      	mov	r0, r6
 8019122:	f001 ffde 	bl	801b0e2 <__malloc_unlock>
 8019126:	e7e4      	b.n	80190f2 <_malloc_r+0x1e>
 8019128:	680b      	ldr	r3, [r1, #0]
 801912a:	1b5b      	subs	r3, r3, r5
 801912c:	d418      	bmi.n	8019160 <_malloc_r+0x8c>
 801912e:	2b0b      	cmp	r3, #11
 8019130:	d90f      	bls.n	8019152 <_malloc_r+0x7e>
 8019132:	600b      	str	r3, [r1, #0]
 8019134:	50cd      	str	r5, [r1, r3]
 8019136:	18cc      	adds	r4, r1, r3
 8019138:	4630      	mov	r0, r6
 801913a:	f001 ffd2 	bl	801b0e2 <__malloc_unlock>
 801913e:	f104 000b 	add.w	r0, r4, #11
 8019142:	1d23      	adds	r3, r4, #4
 8019144:	f020 0007 	bic.w	r0, r0, #7
 8019148:	1ac3      	subs	r3, r0, r3
 801914a:	d0d3      	beq.n	80190f4 <_malloc_r+0x20>
 801914c:	425a      	negs	r2, r3
 801914e:	50e2      	str	r2, [r4, r3]
 8019150:	e7d0      	b.n	80190f4 <_malloc_r+0x20>
 8019152:	428c      	cmp	r4, r1
 8019154:	684b      	ldr	r3, [r1, #4]
 8019156:	bf16      	itet	ne
 8019158:	6063      	strne	r3, [r4, #4]
 801915a:	6013      	streq	r3, [r2, #0]
 801915c:	460c      	movne	r4, r1
 801915e:	e7eb      	b.n	8019138 <_malloc_r+0x64>
 8019160:	460c      	mov	r4, r1
 8019162:	6849      	ldr	r1, [r1, #4]
 8019164:	e7cc      	b.n	8019100 <_malloc_r+0x2c>
 8019166:	1cc4      	adds	r4, r0, #3
 8019168:	f024 0403 	bic.w	r4, r4, #3
 801916c:	42a0      	cmp	r0, r4
 801916e:	d005      	beq.n	801917c <_malloc_r+0xa8>
 8019170:	1a21      	subs	r1, r4, r0
 8019172:	4630      	mov	r0, r6
 8019174:	f000 fdda 	bl	8019d2c <_sbrk_r>
 8019178:	3001      	adds	r0, #1
 801917a:	d0cf      	beq.n	801911c <_malloc_r+0x48>
 801917c:	6025      	str	r5, [r4, #0]
 801917e:	e7db      	b.n	8019138 <_malloc_r+0x64>
 8019180:	2000854c 	.word	0x2000854c
 8019184:	20008550 	.word	0x20008550

08019188 <__sfputc_r>:
 8019188:	6893      	ldr	r3, [r2, #8]
 801918a:	3b01      	subs	r3, #1
 801918c:	2b00      	cmp	r3, #0
 801918e:	b410      	push	{r4}
 8019190:	6093      	str	r3, [r2, #8]
 8019192:	da08      	bge.n	80191a6 <__sfputc_r+0x1e>
 8019194:	6994      	ldr	r4, [r2, #24]
 8019196:	42a3      	cmp	r3, r4
 8019198:	db01      	blt.n	801919e <__sfputc_r+0x16>
 801919a:	290a      	cmp	r1, #10
 801919c:	d103      	bne.n	80191a6 <__sfputc_r+0x1e>
 801919e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191a2:	f000 be49 	b.w	8019e38 <__swbuf_r>
 80191a6:	6813      	ldr	r3, [r2, #0]
 80191a8:	1c58      	adds	r0, r3, #1
 80191aa:	6010      	str	r0, [r2, #0]
 80191ac:	7019      	strb	r1, [r3, #0]
 80191ae:	4608      	mov	r0, r1
 80191b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191b4:	4770      	bx	lr

080191b6 <__sfputs_r>:
 80191b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191b8:	4606      	mov	r6, r0
 80191ba:	460f      	mov	r7, r1
 80191bc:	4614      	mov	r4, r2
 80191be:	18d5      	adds	r5, r2, r3
 80191c0:	42ac      	cmp	r4, r5
 80191c2:	d101      	bne.n	80191c8 <__sfputs_r+0x12>
 80191c4:	2000      	movs	r0, #0
 80191c6:	e007      	b.n	80191d8 <__sfputs_r+0x22>
 80191c8:	463a      	mov	r2, r7
 80191ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191ce:	4630      	mov	r0, r6
 80191d0:	f7ff ffda 	bl	8019188 <__sfputc_r>
 80191d4:	1c43      	adds	r3, r0, #1
 80191d6:	d1f3      	bne.n	80191c0 <__sfputs_r+0xa>
 80191d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080191dc <_vfiprintf_r>:
 80191dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191e0:	460c      	mov	r4, r1
 80191e2:	b09d      	sub	sp, #116	; 0x74
 80191e4:	4617      	mov	r7, r2
 80191e6:	461d      	mov	r5, r3
 80191e8:	4606      	mov	r6, r0
 80191ea:	b118      	cbz	r0, 80191f4 <_vfiprintf_r+0x18>
 80191ec:	6983      	ldr	r3, [r0, #24]
 80191ee:	b90b      	cbnz	r3, 80191f4 <_vfiprintf_r+0x18>
 80191f0:	f001 fe7a 	bl	801aee8 <__sinit>
 80191f4:	4b7c      	ldr	r3, [pc, #496]	; (80193e8 <_vfiprintf_r+0x20c>)
 80191f6:	429c      	cmp	r4, r3
 80191f8:	d158      	bne.n	80192ac <_vfiprintf_r+0xd0>
 80191fa:	6874      	ldr	r4, [r6, #4]
 80191fc:	89a3      	ldrh	r3, [r4, #12]
 80191fe:	0718      	lsls	r0, r3, #28
 8019200:	d55e      	bpl.n	80192c0 <_vfiprintf_r+0xe4>
 8019202:	6923      	ldr	r3, [r4, #16]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d05b      	beq.n	80192c0 <_vfiprintf_r+0xe4>
 8019208:	2300      	movs	r3, #0
 801920a:	9309      	str	r3, [sp, #36]	; 0x24
 801920c:	2320      	movs	r3, #32
 801920e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019212:	2330      	movs	r3, #48	; 0x30
 8019214:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019218:	9503      	str	r5, [sp, #12]
 801921a:	f04f 0b01 	mov.w	fp, #1
 801921e:	46b8      	mov	r8, r7
 8019220:	4645      	mov	r5, r8
 8019222:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019226:	b10b      	cbz	r3, 801922c <_vfiprintf_r+0x50>
 8019228:	2b25      	cmp	r3, #37	; 0x25
 801922a:	d154      	bne.n	80192d6 <_vfiprintf_r+0xfa>
 801922c:	ebb8 0a07 	subs.w	sl, r8, r7
 8019230:	d00b      	beq.n	801924a <_vfiprintf_r+0x6e>
 8019232:	4653      	mov	r3, sl
 8019234:	463a      	mov	r2, r7
 8019236:	4621      	mov	r1, r4
 8019238:	4630      	mov	r0, r6
 801923a:	f7ff ffbc 	bl	80191b6 <__sfputs_r>
 801923e:	3001      	adds	r0, #1
 8019240:	f000 80c2 	beq.w	80193c8 <_vfiprintf_r+0x1ec>
 8019244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019246:	4453      	add	r3, sl
 8019248:	9309      	str	r3, [sp, #36]	; 0x24
 801924a:	f898 3000 	ldrb.w	r3, [r8]
 801924e:	2b00      	cmp	r3, #0
 8019250:	f000 80ba 	beq.w	80193c8 <_vfiprintf_r+0x1ec>
 8019254:	2300      	movs	r3, #0
 8019256:	f04f 32ff 	mov.w	r2, #4294967295
 801925a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801925e:	9304      	str	r3, [sp, #16]
 8019260:	9307      	str	r3, [sp, #28]
 8019262:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019266:	931a      	str	r3, [sp, #104]	; 0x68
 8019268:	46a8      	mov	r8, r5
 801926a:	2205      	movs	r2, #5
 801926c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019270:	485e      	ldr	r0, [pc, #376]	; (80193ec <_vfiprintf_r+0x210>)
 8019272:	f7e6 ffc5 	bl	8000200 <memchr>
 8019276:	9b04      	ldr	r3, [sp, #16]
 8019278:	bb78      	cbnz	r0, 80192da <_vfiprintf_r+0xfe>
 801927a:	06d9      	lsls	r1, r3, #27
 801927c:	bf44      	itt	mi
 801927e:	2220      	movmi	r2, #32
 8019280:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019284:	071a      	lsls	r2, r3, #28
 8019286:	bf44      	itt	mi
 8019288:	222b      	movmi	r2, #43	; 0x2b
 801928a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801928e:	782a      	ldrb	r2, [r5, #0]
 8019290:	2a2a      	cmp	r2, #42	; 0x2a
 8019292:	d02a      	beq.n	80192ea <_vfiprintf_r+0x10e>
 8019294:	9a07      	ldr	r2, [sp, #28]
 8019296:	46a8      	mov	r8, r5
 8019298:	2000      	movs	r0, #0
 801929a:	250a      	movs	r5, #10
 801929c:	4641      	mov	r1, r8
 801929e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80192a2:	3b30      	subs	r3, #48	; 0x30
 80192a4:	2b09      	cmp	r3, #9
 80192a6:	d969      	bls.n	801937c <_vfiprintf_r+0x1a0>
 80192a8:	b360      	cbz	r0, 8019304 <_vfiprintf_r+0x128>
 80192aa:	e024      	b.n	80192f6 <_vfiprintf_r+0x11a>
 80192ac:	4b50      	ldr	r3, [pc, #320]	; (80193f0 <_vfiprintf_r+0x214>)
 80192ae:	429c      	cmp	r4, r3
 80192b0:	d101      	bne.n	80192b6 <_vfiprintf_r+0xda>
 80192b2:	68b4      	ldr	r4, [r6, #8]
 80192b4:	e7a2      	b.n	80191fc <_vfiprintf_r+0x20>
 80192b6:	4b4f      	ldr	r3, [pc, #316]	; (80193f4 <_vfiprintf_r+0x218>)
 80192b8:	429c      	cmp	r4, r3
 80192ba:	bf08      	it	eq
 80192bc:	68f4      	ldreq	r4, [r6, #12]
 80192be:	e79d      	b.n	80191fc <_vfiprintf_r+0x20>
 80192c0:	4621      	mov	r1, r4
 80192c2:	4630      	mov	r0, r6
 80192c4:	f000 fe0a 	bl	8019edc <__swsetup_r>
 80192c8:	2800      	cmp	r0, #0
 80192ca:	d09d      	beq.n	8019208 <_vfiprintf_r+0x2c>
 80192cc:	f04f 30ff 	mov.w	r0, #4294967295
 80192d0:	b01d      	add	sp, #116	; 0x74
 80192d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192d6:	46a8      	mov	r8, r5
 80192d8:	e7a2      	b.n	8019220 <_vfiprintf_r+0x44>
 80192da:	4a44      	ldr	r2, [pc, #272]	; (80193ec <_vfiprintf_r+0x210>)
 80192dc:	1a80      	subs	r0, r0, r2
 80192de:	fa0b f000 	lsl.w	r0, fp, r0
 80192e2:	4318      	orrs	r0, r3
 80192e4:	9004      	str	r0, [sp, #16]
 80192e6:	4645      	mov	r5, r8
 80192e8:	e7be      	b.n	8019268 <_vfiprintf_r+0x8c>
 80192ea:	9a03      	ldr	r2, [sp, #12]
 80192ec:	1d11      	adds	r1, r2, #4
 80192ee:	6812      	ldr	r2, [r2, #0]
 80192f0:	9103      	str	r1, [sp, #12]
 80192f2:	2a00      	cmp	r2, #0
 80192f4:	db01      	blt.n	80192fa <_vfiprintf_r+0x11e>
 80192f6:	9207      	str	r2, [sp, #28]
 80192f8:	e004      	b.n	8019304 <_vfiprintf_r+0x128>
 80192fa:	4252      	negs	r2, r2
 80192fc:	f043 0302 	orr.w	r3, r3, #2
 8019300:	9207      	str	r2, [sp, #28]
 8019302:	9304      	str	r3, [sp, #16]
 8019304:	f898 3000 	ldrb.w	r3, [r8]
 8019308:	2b2e      	cmp	r3, #46	; 0x2e
 801930a:	d10e      	bne.n	801932a <_vfiprintf_r+0x14e>
 801930c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019310:	2b2a      	cmp	r3, #42	; 0x2a
 8019312:	d138      	bne.n	8019386 <_vfiprintf_r+0x1aa>
 8019314:	9b03      	ldr	r3, [sp, #12]
 8019316:	1d1a      	adds	r2, r3, #4
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	9203      	str	r2, [sp, #12]
 801931c:	2b00      	cmp	r3, #0
 801931e:	bfb8      	it	lt
 8019320:	f04f 33ff 	movlt.w	r3, #4294967295
 8019324:	f108 0802 	add.w	r8, r8, #2
 8019328:	9305      	str	r3, [sp, #20]
 801932a:	4d33      	ldr	r5, [pc, #204]	; (80193f8 <_vfiprintf_r+0x21c>)
 801932c:	f898 1000 	ldrb.w	r1, [r8]
 8019330:	2203      	movs	r2, #3
 8019332:	4628      	mov	r0, r5
 8019334:	f7e6 ff64 	bl	8000200 <memchr>
 8019338:	b140      	cbz	r0, 801934c <_vfiprintf_r+0x170>
 801933a:	2340      	movs	r3, #64	; 0x40
 801933c:	1b40      	subs	r0, r0, r5
 801933e:	fa03 f000 	lsl.w	r0, r3, r0
 8019342:	9b04      	ldr	r3, [sp, #16]
 8019344:	4303      	orrs	r3, r0
 8019346:	f108 0801 	add.w	r8, r8, #1
 801934a:	9304      	str	r3, [sp, #16]
 801934c:	f898 1000 	ldrb.w	r1, [r8]
 8019350:	482a      	ldr	r0, [pc, #168]	; (80193fc <_vfiprintf_r+0x220>)
 8019352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019356:	2206      	movs	r2, #6
 8019358:	f108 0701 	add.w	r7, r8, #1
 801935c:	f7e6 ff50 	bl	8000200 <memchr>
 8019360:	2800      	cmp	r0, #0
 8019362:	d037      	beq.n	80193d4 <_vfiprintf_r+0x1f8>
 8019364:	4b26      	ldr	r3, [pc, #152]	; (8019400 <_vfiprintf_r+0x224>)
 8019366:	bb1b      	cbnz	r3, 80193b0 <_vfiprintf_r+0x1d4>
 8019368:	9b03      	ldr	r3, [sp, #12]
 801936a:	3307      	adds	r3, #7
 801936c:	f023 0307 	bic.w	r3, r3, #7
 8019370:	3308      	adds	r3, #8
 8019372:	9303      	str	r3, [sp, #12]
 8019374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019376:	444b      	add	r3, r9
 8019378:	9309      	str	r3, [sp, #36]	; 0x24
 801937a:	e750      	b.n	801921e <_vfiprintf_r+0x42>
 801937c:	fb05 3202 	mla	r2, r5, r2, r3
 8019380:	2001      	movs	r0, #1
 8019382:	4688      	mov	r8, r1
 8019384:	e78a      	b.n	801929c <_vfiprintf_r+0xc0>
 8019386:	2300      	movs	r3, #0
 8019388:	f108 0801 	add.w	r8, r8, #1
 801938c:	9305      	str	r3, [sp, #20]
 801938e:	4619      	mov	r1, r3
 8019390:	250a      	movs	r5, #10
 8019392:	4640      	mov	r0, r8
 8019394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019398:	3a30      	subs	r2, #48	; 0x30
 801939a:	2a09      	cmp	r2, #9
 801939c:	d903      	bls.n	80193a6 <_vfiprintf_r+0x1ca>
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d0c3      	beq.n	801932a <_vfiprintf_r+0x14e>
 80193a2:	9105      	str	r1, [sp, #20]
 80193a4:	e7c1      	b.n	801932a <_vfiprintf_r+0x14e>
 80193a6:	fb05 2101 	mla	r1, r5, r1, r2
 80193aa:	2301      	movs	r3, #1
 80193ac:	4680      	mov	r8, r0
 80193ae:	e7f0      	b.n	8019392 <_vfiprintf_r+0x1b6>
 80193b0:	ab03      	add	r3, sp, #12
 80193b2:	9300      	str	r3, [sp, #0]
 80193b4:	4622      	mov	r2, r4
 80193b6:	4b13      	ldr	r3, [pc, #76]	; (8019404 <_vfiprintf_r+0x228>)
 80193b8:	a904      	add	r1, sp, #16
 80193ba:	4630      	mov	r0, r6
 80193bc:	f000 f8b8 	bl	8019530 <_printf_float>
 80193c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80193c4:	4681      	mov	r9, r0
 80193c6:	d1d5      	bne.n	8019374 <_vfiprintf_r+0x198>
 80193c8:	89a3      	ldrh	r3, [r4, #12]
 80193ca:	065b      	lsls	r3, r3, #25
 80193cc:	f53f af7e 	bmi.w	80192cc <_vfiprintf_r+0xf0>
 80193d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80193d2:	e77d      	b.n	80192d0 <_vfiprintf_r+0xf4>
 80193d4:	ab03      	add	r3, sp, #12
 80193d6:	9300      	str	r3, [sp, #0]
 80193d8:	4622      	mov	r2, r4
 80193da:	4b0a      	ldr	r3, [pc, #40]	; (8019404 <_vfiprintf_r+0x228>)
 80193dc:	a904      	add	r1, sp, #16
 80193de:	4630      	mov	r0, r6
 80193e0:	f000 fb5c 	bl	8019a9c <_printf_i>
 80193e4:	e7ec      	b.n	80193c0 <_vfiprintf_r+0x1e4>
 80193e6:	bf00      	nop
 80193e8:	08027074 	.word	0x08027074
 80193ec:	08027000 	.word	0x08027000
 80193f0:	08027094 	.word	0x08027094
 80193f4:	08027054 	.word	0x08027054
 80193f8:	08027006 	.word	0x08027006
 80193fc:	0802700a 	.word	0x0802700a
 8019400:	08019531 	.word	0x08019531
 8019404:	080191b7 	.word	0x080191b7

08019408 <__cvt>:
 8019408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801940c:	ec55 4b10 	vmov	r4, r5, d0
 8019410:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8019412:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019416:	2d00      	cmp	r5, #0
 8019418:	460e      	mov	r6, r1
 801941a:	4691      	mov	r9, r2
 801941c:	4619      	mov	r1, r3
 801941e:	bfb8      	it	lt
 8019420:	4622      	movlt	r2, r4
 8019422:	462b      	mov	r3, r5
 8019424:	f027 0720 	bic.w	r7, r7, #32
 8019428:	bfbb      	ittet	lt
 801942a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801942e:	461d      	movlt	r5, r3
 8019430:	2300      	movge	r3, #0
 8019432:	232d      	movlt	r3, #45	; 0x2d
 8019434:	bfb8      	it	lt
 8019436:	4614      	movlt	r4, r2
 8019438:	2f46      	cmp	r7, #70	; 0x46
 801943a:	700b      	strb	r3, [r1, #0]
 801943c:	d004      	beq.n	8019448 <__cvt+0x40>
 801943e:	2f45      	cmp	r7, #69	; 0x45
 8019440:	d100      	bne.n	8019444 <__cvt+0x3c>
 8019442:	3601      	adds	r6, #1
 8019444:	2102      	movs	r1, #2
 8019446:	e000      	b.n	801944a <__cvt+0x42>
 8019448:	2103      	movs	r1, #3
 801944a:	ab03      	add	r3, sp, #12
 801944c:	9301      	str	r3, [sp, #4]
 801944e:	ab02      	add	r3, sp, #8
 8019450:	9300      	str	r3, [sp, #0]
 8019452:	4632      	mov	r2, r6
 8019454:	4653      	mov	r3, sl
 8019456:	ec45 4b10 	vmov	d0, r4, r5
 801945a:	f000 fe9d 	bl	801a198 <_dtoa_r>
 801945e:	2f47      	cmp	r7, #71	; 0x47
 8019460:	4680      	mov	r8, r0
 8019462:	d102      	bne.n	801946a <__cvt+0x62>
 8019464:	f019 0f01 	tst.w	r9, #1
 8019468:	d026      	beq.n	80194b8 <__cvt+0xb0>
 801946a:	2f46      	cmp	r7, #70	; 0x46
 801946c:	eb08 0906 	add.w	r9, r8, r6
 8019470:	d111      	bne.n	8019496 <__cvt+0x8e>
 8019472:	f898 3000 	ldrb.w	r3, [r8]
 8019476:	2b30      	cmp	r3, #48	; 0x30
 8019478:	d10a      	bne.n	8019490 <__cvt+0x88>
 801947a:	2200      	movs	r2, #0
 801947c:	2300      	movs	r3, #0
 801947e:	4620      	mov	r0, r4
 8019480:	4629      	mov	r1, r5
 8019482:	f7e7 fb31 	bl	8000ae8 <__aeabi_dcmpeq>
 8019486:	b918      	cbnz	r0, 8019490 <__cvt+0x88>
 8019488:	f1c6 0601 	rsb	r6, r6, #1
 801948c:	f8ca 6000 	str.w	r6, [sl]
 8019490:	f8da 3000 	ldr.w	r3, [sl]
 8019494:	4499      	add	r9, r3
 8019496:	2200      	movs	r2, #0
 8019498:	2300      	movs	r3, #0
 801949a:	4620      	mov	r0, r4
 801949c:	4629      	mov	r1, r5
 801949e:	f7e7 fb23 	bl	8000ae8 <__aeabi_dcmpeq>
 80194a2:	b938      	cbnz	r0, 80194b4 <__cvt+0xac>
 80194a4:	2230      	movs	r2, #48	; 0x30
 80194a6:	9b03      	ldr	r3, [sp, #12]
 80194a8:	454b      	cmp	r3, r9
 80194aa:	d205      	bcs.n	80194b8 <__cvt+0xb0>
 80194ac:	1c59      	adds	r1, r3, #1
 80194ae:	9103      	str	r1, [sp, #12]
 80194b0:	701a      	strb	r2, [r3, #0]
 80194b2:	e7f8      	b.n	80194a6 <__cvt+0x9e>
 80194b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80194b8:	9b03      	ldr	r3, [sp, #12]
 80194ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80194bc:	eba3 0308 	sub.w	r3, r3, r8
 80194c0:	4640      	mov	r0, r8
 80194c2:	6013      	str	r3, [r2, #0]
 80194c4:	b004      	add	sp, #16
 80194c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080194ca <__exponent>:
 80194ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80194cc:	2900      	cmp	r1, #0
 80194ce:	4604      	mov	r4, r0
 80194d0:	bfba      	itte	lt
 80194d2:	4249      	neglt	r1, r1
 80194d4:	232d      	movlt	r3, #45	; 0x2d
 80194d6:	232b      	movge	r3, #43	; 0x2b
 80194d8:	2909      	cmp	r1, #9
 80194da:	f804 2b02 	strb.w	r2, [r4], #2
 80194de:	7043      	strb	r3, [r0, #1]
 80194e0:	dd20      	ble.n	8019524 <__exponent+0x5a>
 80194e2:	f10d 0307 	add.w	r3, sp, #7
 80194e6:	461f      	mov	r7, r3
 80194e8:	260a      	movs	r6, #10
 80194ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80194ee:	fb06 1115 	mls	r1, r6, r5, r1
 80194f2:	3130      	adds	r1, #48	; 0x30
 80194f4:	2d09      	cmp	r5, #9
 80194f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80194fa:	f103 32ff 	add.w	r2, r3, #4294967295
 80194fe:	4629      	mov	r1, r5
 8019500:	dc09      	bgt.n	8019516 <__exponent+0x4c>
 8019502:	3130      	adds	r1, #48	; 0x30
 8019504:	3b02      	subs	r3, #2
 8019506:	f802 1c01 	strb.w	r1, [r2, #-1]
 801950a:	42bb      	cmp	r3, r7
 801950c:	4622      	mov	r2, r4
 801950e:	d304      	bcc.n	801951a <__exponent+0x50>
 8019510:	1a10      	subs	r0, r2, r0
 8019512:	b003      	add	sp, #12
 8019514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019516:	4613      	mov	r3, r2
 8019518:	e7e7      	b.n	80194ea <__exponent+0x20>
 801951a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801951e:	f804 2b01 	strb.w	r2, [r4], #1
 8019522:	e7f2      	b.n	801950a <__exponent+0x40>
 8019524:	2330      	movs	r3, #48	; 0x30
 8019526:	4419      	add	r1, r3
 8019528:	7083      	strb	r3, [r0, #2]
 801952a:	1d02      	adds	r2, r0, #4
 801952c:	70c1      	strb	r1, [r0, #3]
 801952e:	e7ef      	b.n	8019510 <__exponent+0x46>

08019530 <_printf_float>:
 8019530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019534:	b08d      	sub	sp, #52	; 0x34
 8019536:	460c      	mov	r4, r1
 8019538:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801953c:	4616      	mov	r6, r2
 801953e:	461f      	mov	r7, r3
 8019540:	4605      	mov	r5, r0
 8019542:	f001 fd5b 	bl	801affc <_localeconv_r>
 8019546:	6803      	ldr	r3, [r0, #0]
 8019548:	9304      	str	r3, [sp, #16]
 801954a:	4618      	mov	r0, r3
 801954c:	f7e6 fe4a 	bl	80001e4 <strlen>
 8019550:	2300      	movs	r3, #0
 8019552:	930a      	str	r3, [sp, #40]	; 0x28
 8019554:	f8d8 3000 	ldr.w	r3, [r8]
 8019558:	9005      	str	r0, [sp, #20]
 801955a:	3307      	adds	r3, #7
 801955c:	f023 0307 	bic.w	r3, r3, #7
 8019560:	f103 0208 	add.w	r2, r3, #8
 8019564:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019568:	f8d4 b000 	ldr.w	fp, [r4]
 801956c:	f8c8 2000 	str.w	r2, [r8]
 8019570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019574:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019578:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801957c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019580:	9307      	str	r3, [sp, #28]
 8019582:	f8cd 8018 	str.w	r8, [sp, #24]
 8019586:	f04f 32ff 	mov.w	r2, #4294967295
 801958a:	4ba7      	ldr	r3, [pc, #668]	; (8019828 <_printf_float+0x2f8>)
 801958c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019590:	f7e7 fadc 	bl	8000b4c <__aeabi_dcmpun>
 8019594:	bb70      	cbnz	r0, 80195f4 <_printf_float+0xc4>
 8019596:	f04f 32ff 	mov.w	r2, #4294967295
 801959a:	4ba3      	ldr	r3, [pc, #652]	; (8019828 <_printf_float+0x2f8>)
 801959c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80195a0:	f7e7 fab6 	bl	8000b10 <__aeabi_dcmple>
 80195a4:	bb30      	cbnz	r0, 80195f4 <_printf_float+0xc4>
 80195a6:	2200      	movs	r2, #0
 80195a8:	2300      	movs	r3, #0
 80195aa:	4640      	mov	r0, r8
 80195ac:	4649      	mov	r1, r9
 80195ae:	f7e7 faa5 	bl	8000afc <__aeabi_dcmplt>
 80195b2:	b110      	cbz	r0, 80195ba <_printf_float+0x8a>
 80195b4:	232d      	movs	r3, #45	; 0x2d
 80195b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195ba:	4a9c      	ldr	r2, [pc, #624]	; (801982c <_printf_float+0x2fc>)
 80195bc:	4b9c      	ldr	r3, [pc, #624]	; (8019830 <_printf_float+0x300>)
 80195be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80195c2:	bf8c      	ite	hi
 80195c4:	4690      	movhi	r8, r2
 80195c6:	4698      	movls	r8, r3
 80195c8:	2303      	movs	r3, #3
 80195ca:	f02b 0204 	bic.w	r2, fp, #4
 80195ce:	6123      	str	r3, [r4, #16]
 80195d0:	6022      	str	r2, [r4, #0]
 80195d2:	f04f 0900 	mov.w	r9, #0
 80195d6:	9700      	str	r7, [sp, #0]
 80195d8:	4633      	mov	r3, r6
 80195da:	aa0b      	add	r2, sp, #44	; 0x2c
 80195dc:	4621      	mov	r1, r4
 80195de:	4628      	mov	r0, r5
 80195e0:	f000 f9e6 	bl	80199b0 <_printf_common>
 80195e4:	3001      	adds	r0, #1
 80195e6:	f040 808d 	bne.w	8019704 <_printf_float+0x1d4>
 80195ea:	f04f 30ff 	mov.w	r0, #4294967295
 80195ee:	b00d      	add	sp, #52	; 0x34
 80195f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195f4:	4642      	mov	r2, r8
 80195f6:	464b      	mov	r3, r9
 80195f8:	4640      	mov	r0, r8
 80195fa:	4649      	mov	r1, r9
 80195fc:	f7e7 faa6 	bl	8000b4c <__aeabi_dcmpun>
 8019600:	b110      	cbz	r0, 8019608 <_printf_float+0xd8>
 8019602:	4a8c      	ldr	r2, [pc, #560]	; (8019834 <_printf_float+0x304>)
 8019604:	4b8c      	ldr	r3, [pc, #560]	; (8019838 <_printf_float+0x308>)
 8019606:	e7da      	b.n	80195be <_printf_float+0x8e>
 8019608:	6861      	ldr	r1, [r4, #4]
 801960a:	1c4b      	adds	r3, r1, #1
 801960c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8019610:	a80a      	add	r0, sp, #40	; 0x28
 8019612:	d13e      	bne.n	8019692 <_printf_float+0x162>
 8019614:	2306      	movs	r3, #6
 8019616:	6063      	str	r3, [r4, #4]
 8019618:	2300      	movs	r3, #0
 801961a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801961e:	ab09      	add	r3, sp, #36	; 0x24
 8019620:	9300      	str	r3, [sp, #0]
 8019622:	ec49 8b10 	vmov	d0, r8, r9
 8019626:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801962a:	6022      	str	r2, [r4, #0]
 801962c:	f8cd a004 	str.w	sl, [sp, #4]
 8019630:	6861      	ldr	r1, [r4, #4]
 8019632:	4628      	mov	r0, r5
 8019634:	f7ff fee8 	bl	8019408 <__cvt>
 8019638:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801963c:	2b47      	cmp	r3, #71	; 0x47
 801963e:	4680      	mov	r8, r0
 8019640:	d109      	bne.n	8019656 <_printf_float+0x126>
 8019642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019644:	1cd8      	adds	r0, r3, #3
 8019646:	db02      	blt.n	801964e <_printf_float+0x11e>
 8019648:	6862      	ldr	r2, [r4, #4]
 801964a:	4293      	cmp	r3, r2
 801964c:	dd47      	ble.n	80196de <_printf_float+0x1ae>
 801964e:	f1aa 0a02 	sub.w	sl, sl, #2
 8019652:	fa5f fa8a 	uxtb.w	sl, sl
 8019656:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801965a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801965c:	d824      	bhi.n	80196a8 <_printf_float+0x178>
 801965e:	3901      	subs	r1, #1
 8019660:	4652      	mov	r2, sl
 8019662:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019666:	9109      	str	r1, [sp, #36]	; 0x24
 8019668:	f7ff ff2f 	bl	80194ca <__exponent>
 801966c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801966e:	1813      	adds	r3, r2, r0
 8019670:	2a01      	cmp	r2, #1
 8019672:	4681      	mov	r9, r0
 8019674:	6123      	str	r3, [r4, #16]
 8019676:	dc02      	bgt.n	801967e <_printf_float+0x14e>
 8019678:	6822      	ldr	r2, [r4, #0]
 801967a:	07d1      	lsls	r1, r2, #31
 801967c:	d501      	bpl.n	8019682 <_printf_float+0x152>
 801967e:	3301      	adds	r3, #1
 8019680:	6123      	str	r3, [r4, #16]
 8019682:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019686:	2b00      	cmp	r3, #0
 8019688:	d0a5      	beq.n	80195d6 <_printf_float+0xa6>
 801968a:	232d      	movs	r3, #45	; 0x2d
 801968c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019690:	e7a1      	b.n	80195d6 <_printf_float+0xa6>
 8019692:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8019696:	f000 8177 	beq.w	8019988 <_printf_float+0x458>
 801969a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801969e:	d1bb      	bne.n	8019618 <_printf_float+0xe8>
 80196a0:	2900      	cmp	r1, #0
 80196a2:	d1b9      	bne.n	8019618 <_printf_float+0xe8>
 80196a4:	2301      	movs	r3, #1
 80196a6:	e7b6      	b.n	8019616 <_printf_float+0xe6>
 80196a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80196ac:	d119      	bne.n	80196e2 <_printf_float+0x1b2>
 80196ae:	2900      	cmp	r1, #0
 80196b0:	6863      	ldr	r3, [r4, #4]
 80196b2:	dd0c      	ble.n	80196ce <_printf_float+0x19e>
 80196b4:	6121      	str	r1, [r4, #16]
 80196b6:	b913      	cbnz	r3, 80196be <_printf_float+0x18e>
 80196b8:	6822      	ldr	r2, [r4, #0]
 80196ba:	07d2      	lsls	r2, r2, #31
 80196bc:	d502      	bpl.n	80196c4 <_printf_float+0x194>
 80196be:	3301      	adds	r3, #1
 80196c0:	440b      	add	r3, r1
 80196c2:	6123      	str	r3, [r4, #16]
 80196c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80196c8:	f04f 0900 	mov.w	r9, #0
 80196cc:	e7d9      	b.n	8019682 <_printf_float+0x152>
 80196ce:	b913      	cbnz	r3, 80196d6 <_printf_float+0x1a6>
 80196d0:	6822      	ldr	r2, [r4, #0]
 80196d2:	07d0      	lsls	r0, r2, #31
 80196d4:	d501      	bpl.n	80196da <_printf_float+0x1aa>
 80196d6:	3302      	adds	r3, #2
 80196d8:	e7f3      	b.n	80196c2 <_printf_float+0x192>
 80196da:	2301      	movs	r3, #1
 80196dc:	e7f1      	b.n	80196c2 <_printf_float+0x192>
 80196de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80196e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80196e6:	4293      	cmp	r3, r2
 80196e8:	db05      	blt.n	80196f6 <_printf_float+0x1c6>
 80196ea:	6822      	ldr	r2, [r4, #0]
 80196ec:	6123      	str	r3, [r4, #16]
 80196ee:	07d1      	lsls	r1, r2, #31
 80196f0:	d5e8      	bpl.n	80196c4 <_printf_float+0x194>
 80196f2:	3301      	adds	r3, #1
 80196f4:	e7e5      	b.n	80196c2 <_printf_float+0x192>
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	bfd4      	ite	le
 80196fa:	f1c3 0302 	rsble	r3, r3, #2
 80196fe:	2301      	movgt	r3, #1
 8019700:	4413      	add	r3, r2
 8019702:	e7de      	b.n	80196c2 <_printf_float+0x192>
 8019704:	6823      	ldr	r3, [r4, #0]
 8019706:	055a      	lsls	r2, r3, #21
 8019708:	d407      	bmi.n	801971a <_printf_float+0x1ea>
 801970a:	6923      	ldr	r3, [r4, #16]
 801970c:	4642      	mov	r2, r8
 801970e:	4631      	mov	r1, r6
 8019710:	4628      	mov	r0, r5
 8019712:	47b8      	blx	r7
 8019714:	3001      	adds	r0, #1
 8019716:	d12b      	bne.n	8019770 <_printf_float+0x240>
 8019718:	e767      	b.n	80195ea <_printf_float+0xba>
 801971a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801971e:	f240 80dc 	bls.w	80198da <_printf_float+0x3aa>
 8019722:	2200      	movs	r2, #0
 8019724:	2300      	movs	r3, #0
 8019726:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801972a:	f7e7 f9dd 	bl	8000ae8 <__aeabi_dcmpeq>
 801972e:	2800      	cmp	r0, #0
 8019730:	d033      	beq.n	801979a <_printf_float+0x26a>
 8019732:	2301      	movs	r3, #1
 8019734:	4a41      	ldr	r2, [pc, #260]	; (801983c <_printf_float+0x30c>)
 8019736:	4631      	mov	r1, r6
 8019738:	4628      	mov	r0, r5
 801973a:	47b8      	blx	r7
 801973c:	3001      	adds	r0, #1
 801973e:	f43f af54 	beq.w	80195ea <_printf_float+0xba>
 8019742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019746:	429a      	cmp	r2, r3
 8019748:	db02      	blt.n	8019750 <_printf_float+0x220>
 801974a:	6823      	ldr	r3, [r4, #0]
 801974c:	07d8      	lsls	r0, r3, #31
 801974e:	d50f      	bpl.n	8019770 <_printf_float+0x240>
 8019750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019754:	4631      	mov	r1, r6
 8019756:	4628      	mov	r0, r5
 8019758:	47b8      	blx	r7
 801975a:	3001      	adds	r0, #1
 801975c:	f43f af45 	beq.w	80195ea <_printf_float+0xba>
 8019760:	f04f 0800 	mov.w	r8, #0
 8019764:	f104 091a 	add.w	r9, r4, #26
 8019768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801976a:	3b01      	subs	r3, #1
 801976c:	4543      	cmp	r3, r8
 801976e:	dc09      	bgt.n	8019784 <_printf_float+0x254>
 8019770:	6823      	ldr	r3, [r4, #0]
 8019772:	079b      	lsls	r3, r3, #30
 8019774:	f100 8103 	bmi.w	801997e <_printf_float+0x44e>
 8019778:	68e0      	ldr	r0, [r4, #12]
 801977a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801977c:	4298      	cmp	r0, r3
 801977e:	bfb8      	it	lt
 8019780:	4618      	movlt	r0, r3
 8019782:	e734      	b.n	80195ee <_printf_float+0xbe>
 8019784:	2301      	movs	r3, #1
 8019786:	464a      	mov	r2, r9
 8019788:	4631      	mov	r1, r6
 801978a:	4628      	mov	r0, r5
 801978c:	47b8      	blx	r7
 801978e:	3001      	adds	r0, #1
 8019790:	f43f af2b 	beq.w	80195ea <_printf_float+0xba>
 8019794:	f108 0801 	add.w	r8, r8, #1
 8019798:	e7e6      	b.n	8019768 <_printf_float+0x238>
 801979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801979c:	2b00      	cmp	r3, #0
 801979e:	dc2b      	bgt.n	80197f8 <_printf_float+0x2c8>
 80197a0:	2301      	movs	r3, #1
 80197a2:	4a26      	ldr	r2, [pc, #152]	; (801983c <_printf_float+0x30c>)
 80197a4:	4631      	mov	r1, r6
 80197a6:	4628      	mov	r0, r5
 80197a8:	47b8      	blx	r7
 80197aa:	3001      	adds	r0, #1
 80197ac:	f43f af1d 	beq.w	80195ea <_printf_float+0xba>
 80197b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197b2:	b923      	cbnz	r3, 80197be <_printf_float+0x28e>
 80197b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197b6:	b913      	cbnz	r3, 80197be <_printf_float+0x28e>
 80197b8:	6823      	ldr	r3, [r4, #0]
 80197ba:	07d9      	lsls	r1, r3, #31
 80197bc:	d5d8      	bpl.n	8019770 <_printf_float+0x240>
 80197be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80197c2:	4631      	mov	r1, r6
 80197c4:	4628      	mov	r0, r5
 80197c6:	47b8      	blx	r7
 80197c8:	3001      	adds	r0, #1
 80197ca:	f43f af0e 	beq.w	80195ea <_printf_float+0xba>
 80197ce:	f04f 0900 	mov.w	r9, #0
 80197d2:	f104 0a1a 	add.w	sl, r4, #26
 80197d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197d8:	425b      	negs	r3, r3
 80197da:	454b      	cmp	r3, r9
 80197dc:	dc01      	bgt.n	80197e2 <_printf_float+0x2b2>
 80197de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197e0:	e794      	b.n	801970c <_printf_float+0x1dc>
 80197e2:	2301      	movs	r3, #1
 80197e4:	4652      	mov	r2, sl
 80197e6:	4631      	mov	r1, r6
 80197e8:	4628      	mov	r0, r5
 80197ea:	47b8      	blx	r7
 80197ec:	3001      	adds	r0, #1
 80197ee:	f43f aefc 	beq.w	80195ea <_printf_float+0xba>
 80197f2:	f109 0901 	add.w	r9, r9, #1
 80197f6:	e7ee      	b.n	80197d6 <_printf_float+0x2a6>
 80197f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80197fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80197fc:	429a      	cmp	r2, r3
 80197fe:	bfa8      	it	ge
 8019800:	461a      	movge	r2, r3
 8019802:	2a00      	cmp	r2, #0
 8019804:	4691      	mov	r9, r2
 8019806:	dd07      	ble.n	8019818 <_printf_float+0x2e8>
 8019808:	4613      	mov	r3, r2
 801980a:	4631      	mov	r1, r6
 801980c:	4642      	mov	r2, r8
 801980e:	4628      	mov	r0, r5
 8019810:	47b8      	blx	r7
 8019812:	3001      	adds	r0, #1
 8019814:	f43f aee9 	beq.w	80195ea <_printf_float+0xba>
 8019818:	f104 031a 	add.w	r3, r4, #26
 801981c:	f04f 0b00 	mov.w	fp, #0
 8019820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019824:	9306      	str	r3, [sp, #24]
 8019826:	e015      	b.n	8019854 <_printf_float+0x324>
 8019828:	7fefffff 	.word	0x7fefffff
 801982c:	08027015 	.word	0x08027015
 8019830:	08027011 	.word	0x08027011
 8019834:	0802701d 	.word	0x0802701d
 8019838:	08027019 	.word	0x08027019
 801983c:	08027021 	.word	0x08027021
 8019840:	2301      	movs	r3, #1
 8019842:	9a06      	ldr	r2, [sp, #24]
 8019844:	4631      	mov	r1, r6
 8019846:	4628      	mov	r0, r5
 8019848:	47b8      	blx	r7
 801984a:	3001      	adds	r0, #1
 801984c:	f43f aecd 	beq.w	80195ea <_printf_float+0xba>
 8019850:	f10b 0b01 	add.w	fp, fp, #1
 8019854:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8019858:	ebaa 0309 	sub.w	r3, sl, r9
 801985c:	455b      	cmp	r3, fp
 801985e:	dcef      	bgt.n	8019840 <_printf_float+0x310>
 8019860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019864:	429a      	cmp	r2, r3
 8019866:	44d0      	add	r8, sl
 8019868:	db15      	blt.n	8019896 <_printf_float+0x366>
 801986a:	6823      	ldr	r3, [r4, #0]
 801986c:	07da      	lsls	r2, r3, #31
 801986e:	d412      	bmi.n	8019896 <_printf_float+0x366>
 8019870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019872:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019874:	eba3 020a 	sub.w	r2, r3, sl
 8019878:	eba3 0a01 	sub.w	sl, r3, r1
 801987c:	4592      	cmp	sl, r2
 801987e:	bfa8      	it	ge
 8019880:	4692      	movge	sl, r2
 8019882:	f1ba 0f00 	cmp.w	sl, #0
 8019886:	dc0e      	bgt.n	80198a6 <_printf_float+0x376>
 8019888:	f04f 0800 	mov.w	r8, #0
 801988c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019890:	f104 091a 	add.w	r9, r4, #26
 8019894:	e019      	b.n	80198ca <_printf_float+0x39a>
 8019896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801989a:	4631      	mov	r1, r6
 801989c:	4628      	mov	r0, r5
 801989e:	47b8      	blx	r7
 80198a0:	3001      	adds	r0, #1
 80198a2:	d1e5      	bne.n	8019870 <_printf_float+0x340>
 80198a4:	e6a1      	b.n	80195ea <_printf_float+0xba>
 80198a6:	4653      	mov	r3, sl
 80198a8:	4642      	mov	r2, r8
 80198aa:	4631      	mov	r1, r6
 80198ac:	4628      	mov	r0, r5
 80198ae:	47b8      	blx	r7
 80198b0:	3001      	adds	r0, #1
 80198b2:	d1e9      	bne.n	8019888 <_printf_float+0x358>
 80198b4:	e699      	b.n	80195ea <_printf_float+0xba>
 80198b6:	2301      	movs	r3, #1
 80198b8:	464a      	mov	r2, r9
 80198ba:	4631      	mov	r1, r6
 80198bc:	4628      	mov	r0, r5
 80198be:	47b8      	blx	r7
 80198c0:	3001      	adds	r0, #1
 80198c2:	f43f ae92 	beq.w	80195ea <_printf_float+0xba>
 80198c6:	f108 0801 	add.w	r8, r8, #1
 80198ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80198ce:	1a9b      	subs	r3, r3, r2
 80198d0:	eba3 030a 	sub.w	r3, r3, sl
 80198d4:	4543      	cmp	r3, r8
 80198d6:	dcee      	bgt.n	80198b6 <_printf_float+0x386>
 80198d8:	e74a      	b.n	8019770 <_printf_float+0x240>
 80198da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80198dc:	2a01      	cmp	r2, #1
 80198de:	dc01      	bgt.n	80198e4 <_printf_float+0x3b4>
 80198e0:	07db      	lsls	r3, r3, #31
 80198e2:	d53a      	bpl.n	801995a <_printf_float+0x42a>
 80198e4:	2301      	movs	r3, #1
 80198e6:	4642      	mov	r2, r8
 80198e8:	4631      	mov	r1, r6
 80198ea:	4628      	mov	r0, r5
 80198ec:	47b8      	blx	r7
 80198ee:	3001      	adds	r0, #1
 80198f0:	f43f ae7b 	beq.w	80195ea <_printf_float+0xba>
 80198f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80198f8:	4631      	mov	r1, r6
 80198fa:	4628      	mov	r0, r5
 80198fc:	47b8      	blx	r7
 80198fe:	3001      	adds	r0, #1
 8019900:	f108 0801 	add.w	r8, r8, #1
 8019904:	f43f ae71 	beq.w	80195ea <_printf_float+0xba>
 8019908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801990a:	2200      	movs	r2, #0
 801990c:	f103 3aff 	add.w	sl, r3, #4294967295
 8019910:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019914:	2300      	movs	r3, #0
 8019916:	f7e7 f8e7 	bl	8000ae8 <__aeabi_dcmpeq>
 801991a:	b9c8      	cbnz	r0, 8019950 <_printf_float+0x420>
 801991c:	4653      	mov	r3, sl
 801991e:	4642      	mov	r2, r8
 8019920:	4631      	mov	r1, r6
 8019922:	4628      	mov	r0, r5
 8019924:	47b8      	blx	r7
 8019926:	3001      	adds	r0, #1
 8019928:	d10e      	bne.n	8019948 <_printf_float+0x418>
 801992a:	e65e      	b.n	80195ea <_printf_float+0xba>
 801992c:	2301      	movs	r3, #1
 801992e:	4652      	mov	r2, sl
 8019930:	4631      	mov	r1, r6
 8019932:	4628      	mov	r0, r5
 8019934:	47b8      	blx	r7
 8019936:	3001      	adds	r0, #1
 8019938:	f43f ae57 	beq.w	80195ea <_printf_float+0xba>
 801993c:	f108 0801 	add.w	r8, r8, #1
 8019940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019942:	3b01      	subs	r3, #1
 8019944:	4543      	cmp	r3, r8
 8019946:	dcf1      	bgt.n	801992c <_printf_float+0x3fc>
 8019948:	464b      	mov	r3, r9
 801994a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801994e:	e6de      	b.n	801970e <_printf_float+0x1de>
 8019950:	f04f 0800 	mov.w	r8, #0
 8019954:	f104 0a1a 	add.w	sl, r4, #26
 8019958:	e7f2      	b.n	8019940 <_printf_float+0x410>
 801995a:	2301      	movs	r3, #1
 801995c:	e7df      	b.n	801991e <_printf_float+0x3ee>
 801995e:	2301      	movs	r3, #1
 8019960:	464a      	mov	r2, r9
 8019962:	4631      	mov	r1, r6
 8019964:	4628      	mov	r0, r5
 8019966:	47b8      	blx	r7
 8019968:	3001      	adds	r0, #1
 801996a:	f43f ae3e 	beq.w	80195ea <_printf_float+0xba>
 801996e:	f108 0801 	add.w	r8, r8, #1
 8019972:	68e3      	ldr	r3, [r4, #12]
 8019974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019976:	1a9b      	subs	r3, r3, r2
 8019978:	4543      	cmp	r3, r8
 801997a:	dcf0      	bgt.n	801995e <_printf_float+0x42e>
 801997c:	e6fc      	b.n	8019778 <_printf_float+0x248>
 801997e:	f04f 0800 	mov.w	r8, #0
 8019982:	f104 0919 	add.w	r9, r4, #25
 8019986:	e7f4      	b.n	8019972 <_printf_float+0x442>
 8019988:	2900      	cmp	r1, #0
 801998a:	f43f ae8b 	beq.w	80196a4 <_printf_float+0x174>
 801998e:	2300      	movs	r3, #0
 8019990:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8019994:	ab09      	add	r3, sp, #36	; 0x24
 8019996:	9300      	str	r3, [sp, #0]
 8019998:	ec49 8b10 	vmov	d0, r8, r9
 801999c:	6022      	str	r2, [r4, #0]
 801999e:	f8cd a004 	str.w	sl, [sp, #4]
 80199a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80199a6:	4628      	mov	r0, r5
 80199a8:	f7ff fd2e 	bl	8019408 <__cvt>
 80199ac:	4680      	mov	r8, r0
 80199ae:	e648      	b.n	8019642 <_printf_float+0x112>

080199b0 <_printf_common>:
 80199b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199b4:	4691      	mov	r9, r2
 80199b6:	461f      	mov	r7, r3
 80199b8:	688a      	ldr	r2, [r1, #8]
 80199ba:	690b      	ldr	r3, [r1, #16]
 80199bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80199c0:	4293      	cmp	r3, r2
 80199c2:	bfb8      	it	lt
 80199c4:	4613      	movlt	r3, r2
 80199c6:	f8c9 3000 	str.w	r3, [r9]
 80199ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80199ce:	4606      	mov	r6, r0
 80199d0:	460c      	mov	r4, r1
 80199d2:	b112      	cbz	r2, 80199da <_printf_common+0x2a>
 80199d4:	3301      	adds	r3, #1
 80199d6:	f8c9 3000 	str.w	r3, [r9]
 80199da:	6823      	ldr	r3, [r4, #0]
 80199dc:	0699      	lsls	r1, r3, #26
 80199de:	bf42      	ittt	mi
 80199e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80199e4:	3302      	addmi	r3, #2
 80199e6:	f8c9 3000 	strmi.w	r3, [r9]
 80199ea:	6825      	ldr	r5, [r4, #0]
 80199ec:	f015 0506 	ands.w	r5, r5, #6
 80199f0:	d107      	bne.n	8019a02 <_printf_common+0x52>
 80199f2:	f104 0a19 	add.w	sl, r4, #25
 80199f6:	68e3      	ldr	r3, [r4, #12]
 80199f8:	f8d9 2000 	ldr.w	r2, [r9]
 80199fc:	1a9b      	subs	r3, r3, r2
 80199fe:	42ab      	cmp	r3, r5
 8019a00:	dc28      	bgt.n	8019a54 <_printf_common+0xa4>
 8019a02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019a06:	6822      	ldr	r2, [r4, #0]
 8019a08:	3300      	adds	r3, #0
 8019a0a:	bf18      	it	ne
 8019a0c:	2301      	movne	r3, #1
 8019a0e:	0692      	lsls	r2, r2, #26
 8019a10:	d42d      	bmi.n	8019a6e <_printf_common+0xbe>
 8019a12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019a16:	4639      	mov	r1, r7
 8019a18:	4630      	mov	r0, r6
 8019a1a:	47c0      	blx	r8
 8019a1c:	3001      	adds	r0, #1
 8019a1e:	d020      	beq.n	8019a62 <_printf_common+0xb2>
 8019a20:	6823      	ldr	r3, [r4, #0]
 8019a22:	68e5      	ldr	r5, [r4, #12]
 8019a24:	f8d9 2000 	ldr.w	r2, [r9]
 8019a28:	f003 0306 	and.w	r3, r3, #6
 8019a2c:	2b04      	cmp	r3, #4
 8019a2e:	bf08      	it	eq
 8019a30:	1aad      	subeq	r5, r5, r2
 8019a32:	68a3      	ldr	r3, [r4, #8]
 8019a34:	6922      	ldr	r2, [r4, #16]
 8019a36:	bf0c      	ite	eq
 8019a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019a3c:	2500      	movne	r5, #0
 8019a3e:	4293      	cmp	r3, r2
 8019a40:	bfc4      	itt	gt
 8019a42:	1a9b      	subgt	r3, r3, r2
 8019a44:	18ed      	addgt	r5, r5, r3
 8019a46:	f04f 0900 	mov.w	r9, #0
 8019a4a:	341a      	adds	r4, #26
 8019a4c:	454d      	cmp	r5, r9
 8019a4e:	d11a      	bne.n	8019a86 <_printf_common+0xd6>
 8019a50:	2000      	movs	r0, #0
 8019a52:	e008      	b.n	8019a66 <_printf_common+0xb6>
 8019a54:	2301      	movs	r3, #1
 8019a56:	4652      	mov	r2, sl
 8019a58:	4639      	mov	r1, r7
 8019a5a:	4630      	mov	r0, r6
 8019a5c:	47c0      	blx	r8
 8019a5e:	3001      	adds	r0, #1
 8019a60:	d103      	bne.n	8019a6a <_printf_common+0xba>
 8019a62:	f04f 30ff 	mov.w	r0, #4294967295
 8019a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a6a:	3501      	adds	r5, #1
 8019a6c:	e7c3      	b.n	80199f6 <_printf_common+0x46>
 8019a6e:	18e1      	adds	r1, r4, r3
 8019a70:	1c5a      	adds	r2, r3, #1
 8019a72:	2030      	movs	r0, #48	; 0x30
 8019a74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019a78:	4422      	add	r2, r4
 8019a7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019a7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019a82:	3302      	adds	r3, #2
 8019a84:	e7c5      	b.n	8019a12 <_printf_common+0x62>
 8019a86:	2301      	movs	r3, #1
 8019a88:	4622      	mov	r2, r4
 8019a8a:	4639      	mov	r1, r7
 8019a8c:	4630      	mov	r0, r6
 8019a8e:	47c0      	blx	r8
 8019a90:	3001      	adds	r0, #1
 8019a92:	d0e6      	beq.n	8019a62 <_printf_common+0xb2>
 8019a94:	f109 0901 	add.w	r9, r9, #1
 8019a98:	e7d8      	b.n	8019a4c <_printf_common+0x9c>
	...

08019a9c <_printf_i>:
 8019a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019aa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8019aa4:	460c      	mov	r4, r1
 8019aa6:	7e09      	ldrb	r1, [r1, #24]
 8019aa8:	b085      	sub	sp, #20
 8019aaa:	296e      	cmp	r1, #110	; 0x6e
 8019aac:	4617      	mov	r7, r2
 8019aae:	4606      	mov	r6, r0
 8019ab0:	4698      	mov	r8, r3
 8019ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019ab4:	f000 80b3 	beq.w	8019c1e <_printf_i+0x182>
 8019ab8:	d822      	bhi.n	8019b00 <_printf_i+0x64>
 8019aba:	2963      	cmp	r1, #99	; 0x63
 8019abc:	d036      	beq.n	8019b2c <_printf_i+0x90>
 8019abe:	d80a      	bhi.n	8019ad6 <_printf_i+0x3a>
 8019ac0:	2900      	cmp	r1, #0
 8019ac2:	f000 80b9 	beq.w	8019c38 <_printf_i+0x19c>
 8019ac6:	2958      	cmp	r1, #88	; 0x58
 8019ac8:	f000 8083 	beq.w	8019bd2 <_printf_i+0x136>
 8019acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ad0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019ad4:	e032      	b.n	8019b3c <_printf_i+0xa0>
 8019ad6:	2964      	cmp	r1, #100	; 0x64
 8019ad8:	d001      	beq.n	8019ade <_printf_i+0x42>
 8019ada:	2969      	cmp	r1, #105	; 0x69
 8019adc:	d1f6      	bne.n	8019acc <_printf_i+0x30>
 8019ade:	6820      	ldr	r0, [r4, #0]
 8019ae0:	6813      	ldr	r3, [r2, #0]
 8019ae2:	0605      	lsls	r5, r0, #24
 8019ae4:	f103 0104 	add.w	r1, r3, #4
 8019ae8:	d52a      	bpl.n	8019b40 <_printf_i+0xa4>
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	6011      	str	r1, [r2, #0]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	da03      	bge.n	8019afa <_printf_i+0x5e>
 8019af2:	222d      	movs	r2, #45	; 0x2d
 8019af4:	425b      	negs	r3, r3
 8019af6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019afa:	486f      	ldr	r0, [pc, #444]	; (8019cb8 <_printf_i+0x21c>)
 8019afc:	220a      	movs	r2, #10
 8019afe:	e039      	b.n	8019b74 <_printf_i+0xd8>
 8019b00:	2973      	cmp	r1, #115	; 0x73
 8019b02:	f000 809d 	beq.w	8019c40 <_printf_i+0x1a4>
 8019b06:	d808      	bhi.n	8019b1a <_printf_i+0x7e>
 8019b08:	296f      	cmp	r1, #111	; 0x6f
 8019b0a:	d020      	beq.n	8019b4e <_printf_i+0xb2>
 8019b0c:	2970      	cmp	r1, #112	; 0x70
 8019b0e:	d1dd      	bne.n	8019acc <_printf_i+0x30>
 8019b10:	6823      	ldr	r3, [r4, #0]
 8019b12:	f043 0320 	orr.w	r3, r3, #32
 8019b16:	6023      	str	r3, [r4, #0]
 8019b18:	e003      	b.n	8019b22 <_printf_i+0x86>
 8019b1a:	2975      	cmp	r1, #117	; 0x75
 8019b1c:	d017      	beq.n	8019b4e <_printf_i+0xb2>
 8019b1e:	2978      	cmp	r1, #120	; 0x78
 8019b20:	d1d4      	bne.n	8019acc <_printf_i+0x30>
 8019b22:	2378      	movs	r3, #120	; 0x78
 8019b24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019b28:	4864      	ldr	r0, [pc, #400]	; (8019cbc <_printf_i+0x220>)
 8019b2a:	e055      	b.n	8019bd8 <_printf_i+0x13c>
 8019b2c:	6813      	ldr	r3, [r2, #0]
 8019b2e:	1d19      	adds	r1, r3, #4
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	6011      	str	r1, [r2, #0]
 8019b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019b3c:	2301      	movs	r3, #1
 8019b3e:	e08c      	b.n	8019c5a <_printf_i+0x1be>
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	6011      	str	r1, [r2, #0]
 8019b44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019b48:	bf18      	it	ne
 8019b4a:	b21b      	sxthne	r3, r3
 8019b4c:	e7cf      	b.n	8019aee <_printf_i+0x52>
 8019b4e:	6813      	ldr	r3, [r2, #0]
 8019b50:	6825      	ldr	r5, [r4, #0]
 8019b52:	1d18      	adds	r0, r3, #4
 8019b54:	6010      	str	r0, [r2, #0]
 8019b56:	0628      	lsls	r0, r5, #24
 8019b58:	d501      	bpl.n	8019b5e <_printf_i+0xc2>
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	e002      	b.n	8019b64 <_printf_i+0xc8>
 8019b5e:	0668      	lsls	r0, r5, #25
 8019b60:	d5fb      	bpl.n	8019b5a <_printf_i+0xbe>
 8019b62:	881b      	ldrh	r3, [r3, #0]
 8019b64:	4854      	ldr	r0, [pc, #336]	; (8019cb8 <_printf_i+0x21c>)
 8019b66:	296f      	cmp	r1, #111	; 0x6f
 8019b68:	bf14      	ite	ne
 8019b6a:	220a      	movne	r2, #10
 8019b6c:	2208      	moveq	r2, #8
 8019b6e:	2100      	movs	r1, #0
 8019b70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019b74:	6865      	ldr	r5, [r4, #4]
 8019b76:	60a5      	str	r5, [r4, #8]
 8019b78:	2d00      	cmp	r5, #0
 8019b7a:	f2c0 8095 	blt.w	8019ca8 <_printf_i+0x20c>
 8019b7e:	6821      	ldr	r1, [r4, #0]
 8019b80:	f021 0104 	bic.w	r1, r1, #4
 8019b84:	6021      	str	r1, [r4, #0]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d13d      	bne.n	8019c06 <_printf_i+0x16a>
 8019b8a:	2d00      	cmp	r5, #0
 8019b8c:	f040 808e 	bne.w	8019cac <_printf_i+0x210>
 8019b90:	4665      	mov	r5, ip
 8019b92:	2a08      	cmp	r2, #8
 8019b94:	d10b      	bne.n	8019bae <_printf_i+0x112>
 8019b96:	6823      	ldr	r3, [r4, #0]
 8019b98:	07db      	lsls	r3, r3, #31
 8019b9a:	d508      	bpl.n	8019bae <_printf_i+0x112>
 8019b9c:	6923      	ldr	r3, [r4, #16]
 8019b9e:	6862      	ldr	r2, [r4, #4]
 8019ba0:	429a      	cmp	r2, r3
 8019ba2:	bfde      	ittt	le
 8019ba4:	2330      	movle	r3, #48	; 0x30
 8019ba6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019baa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019bae:	ebac 0305 	sub.w	r3, ip, r5
 8019bb2:	6123      	str	r3, [r4, #16]
 8019bb4:	f8cd 8000 	str.w	r8, [sp]
 8019bb8:	463b      	mov	r3, r7
 8019bba:	aa03      	add	r2, sp, #12
 8019bbc:	4621      	mov	r1, r4
 8019bbe:	4630      	mov	r0, r6
 8019bc0:	f7ff fef6 	bl	80199b0 <_printf_common>
 8019bc4:	3001      	adds	r0, #1
 8019bc6:	d14d      	bne.n	8019c64 <_printf_i+0x1c8>
 8019bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8019bcc:	b005      	add	sp, #20
 8019bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bd2:	4839      	ldr	r0, [pc, #228]	; (8019cb8 <_printf_i+0x21c>)
 8019bd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019bd8:	6813      	ldr	r3, [r2, #0]
 8019bda:	6821      	ldr	r1, [r4, #0]
 8019bdc:	1d1d      	adds	r5, r3, #4
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	6015      	str	r5, [r2, #0]
 8019be2:	060a      	lsls	r2, r1, #24
 8019be4:	d50b      	bpl.n	8019bfe <_printf_i+0x162>
 8019be6:	07ca      	lsls	r2, r1, #31
 8019be8:	bf44      	itt	mi
 8019bea:	f041 0120 	orrmi.w	r1, r1, #32
 8019bee:	6021      	strmi	r1, [r4, #0]
 8019bf0:	b91b      	cbnz	r3, 8019bfa <_printf_i+0x15e>
 8019bf2:	6822      	ldr	r2, [r4, #0]
 8019bf4:	f022 0220 	bic.w	r2, r2, #32
 8019bf8:	6022      	str	r2, [r4, #0]
 8019bfa:	2210      	movs	r2, #16
 8019bfc:	e7b7      	b.n	8019b6e <_printf_i+0xd2>
 8019bfe:	064d      	lsls	r5, r1, #25
 8019c00:	bf48      	it	mi
 8019c02:	b29b      	uxthmi	r3, r3
 8019c04:	e7ef      	b.n	8019be6 <_printf_i+0x14a>
 8019c06:	4665      	mov	r5, ip
 8019c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8019c0c:	fb02 3311 	mls	r3, r2, r1, r3
 8019c10:	5cc3      	ldrb	r3, [r0, r3]
 8019c12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019c16:	460b      	mov	r3, r1
 8019c18:	2900      	cmp	r1, #0
 8019c1a:	d1f5      	bne.n	8019c08 <_printf_i+0x16c>
 8019c1c:	e7b9      	b.n	8019b92 <_printf_i+0xf6>
 8019c1e:	6813      	ldr	r3, [r2, #0]
 8019c20:	6825      	ldr	r5, [r4, #0]
 8019c22:	6961      	ldr	r1, [r4, #20]
 8019c24:	1d18      	adds	r0, r3, #4
 8019c26:	6010      	str	r0, [r2, #0]
 8019c28:	0628      	lsls	r0, r5, #24
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	d501      	bpl.n	8019c32 <_printf_i+0x196>
 8019c2e:	6019      	str	r1, [r3, #0]
 8019c30:	e002      	b.n	8019c38 <_printf_i+0x19c>
 8019c32:	066a      	lsls	r2, r5, #25
 8019c34:	d5fb      	bpl.n	8019c2e <_printf_i+0x192>
 8019c36:	8019      	strh	r1, [r3, #0]
 8019c38:	2300      	movs	r3, #0
 8019c3a:	6123      	str	r3, [r4, #16]
 8019c3c:	4665      	mov	r5, ip
 8019c3e:	e7b9      	b.n	8019bb4 <_printf_i+0x118>
 8019c40:	6813      	ldr	r3, [r2, #0]
 8019c42:	1d19      	adds	r1, r3, #4
 8019c44:	6011      	str	r1, [r2, #0]
 8019c46:	681d      	ldr	r5, [r3, #0]
 8019c48:	6862      	ldr	r2, [r4, #4]
 8019c4a:	2100      	movs	r1, #0
 8019c4c:	4628      	mov	r0, r5
 8019c4e:	f7e6 fad7 	bl	8000200 <memchr>
 8019c52:	b108      	cbz	r0, 8019c58 <_printf_i+0x1bc>
 8019c54:	1b40      	subs	r0, r0, r5
 8019c56:	6060      	str	r0, [r4, #4]
 8019c58:	6863      	ldr	r3, [r4, #4]
 8019c5a:	6123      	str	r3, [r4, #16]
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c62:	e7a7      	b.n	8019bb4 <_printf_i+0x118>
 8019c64:	6923      	ldr	r3, [r4, #16]
 8019c66:	462a      	mov	r2, r5
 8019c68:	4639      	mov	r1, r7
 8019c6a:	4630      	mov	r0, r6
 8019c6c:	47c0      	blx	r8
 8019c6e:	3001      	adds	r0, #1
 8019c70:	d0aa      	beq.n	8019bc8 <_printf_i+0x12c>
 8019c72:	6823      	ldr	r3, [r4, #0]
 8019c74:	079b      	lsls	r3, r3, #30
 8019c76:	d413      	bmi.n	8019ca0 <_printf_i+0x204>
 8019c78:	68e0      	ldr	r0, [r4, #12]
 8019c7a:	9b03      	ldr	r3, [sp, #12]
 8019c7c:	4298      	cmp	r0, r3
 8019c7e:	bfb8      	it	lt
 8019c80:	4618      	movlt	r0, r3
 8019c82:	e7a3      	b.n	8019bcc <_printf_i+0x130>
 8019c84:	2301      	movs	r3, #1
 8019c86:	464a      	mov	r2, r9
 8019c88:	4639      	mov	r1, r7
 8019c8a:	4630      	mov	r0, r6
 8019c8c:	47c0      	blx	r8
 8019c8e:	3001      	adds	r0, #1
 8019c90:	d09a      	beq.n	8019bc8 <_printf_i+0x12c>
 8019c92:	3501      	adds	r5, #1
 8019c94:	68e3      	ldr	r3, [r4, #12]
 8019c96:	9a03      	ldr	r2, [sp, #12]
 8019c98:	1a9b      	subs	r3, r3, r2
 8019c9a:	42ab      	cmp	r3, r5
 8019c9c:	dcf2      	bgt.n	8019c84 <_printf_i+0x1e8>
 8019c9e:	e7eb      	b.n	8019c78 <_printf_i+0x1dc>
 8019ca0:	2500      	movs	r5, #0
 8019ca2:	f104 0919 	add.w	r9, r4, #25
 8019ca6:	e7f5      	b.n	8019c94 <_printf_i+0x1f8>
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d1ac      	bne.n	8019c06 <_printf_i+0x16a>
 8019cac:	7803      	ldrb	r3, [r0, #0]
 8019cae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019cb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019cb6:	e76c      	b.n	8019b92 <_printf_i+0xf6>
 8019cb8:	08027023 	.word	0x08027023
 8019cbc:	08027034 	.word	0x08027034

08019cc0 <_putc_r>:
 8019cc0:	b570      	push	{r4, r5, r6, lr}
 8019cc2:	460d      	mov	r5, r1
 8019cc4:	4614      	mov	r4, r2
 8019cc6:	4606      	mov	r6, r0
 8019cc8:	b118      	cbz	r0, 8019cd2 <_putc_r+0x12>
 8019cca:	6983      	ldr	r3, [r0, #24]
 8019ccc:	b90b      	cbnz	r3, 8019cd2 <_putc_r+0x12>
 8019cce:	f001 f90b 	bl	801aee8 <__sinit>
 8019cd2:	4b13      	ldr	r3, [pc, #76]	; (8019d20 <_putc_r+0x60>)
 8019cd4:	429c      	cmp	r4, r3
 8019cd6:	d112      	bne.n	8019cfe <_putc_r+0x3e>
 8019cd8:	6874      	ldr	r4, [r6, #4]
 8019cda:	68a3      	ldr	r3, [r4, #8]
 8019cdc:	3b01      	subs	r3, #1
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	60a3      	str	r3, [r4, #8]
 8019ce2:	da16      	bge.n	8019d12 <_putc_r+0x52>
 8019ce4:	69a2      	ldr	r2, [r4, #24]
 8019ce6:	4293      	cmp	r3, r2
 8019ce8:	db02      	blt.n	8019cf0 <_putc_r+0x30>
 8019cea:	b2eb      	uxtb	r3, r5
 8019cec:	2b0a      	cmp	r3, #10
 8019cee:	d110      	bne.n	8019d12 <_putc_r+0x52>
 8019cf0:	4622      	mov	r2, r4
 8019cf2:	4629      	mov	r1, r5
 8019cf4:	4630      	mov	r0, r6
 8019cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cfa:	f000 b89d 	b.w	8019e38 <__swbuf_r>
 8019cfe:	4b09      	ldr	r3, [pc, #36]	; (8019d24 <_putc_r+0x64>)
 8019d00:	429c      	cmp	r4, r3
 8019d02:	d101      	bne.n	8019d08 <_putc_r+0x48>
 8019d04:	68b4      	ldr	r4, [r6, #8]
 8019d06:	e7e8      	b.n	8019cda <_putc_r+0x1a>
 8019d08:	4b07      	ldr	r3, [pc, #28]	; (8019d28 <_putc_r+0x68>)
 8019d0a:	429c      	cmp	r4, r3
 8019d0c:	bf08      	it	eq
 8019d0e:	68f4      	ldreq	r4, [r6, #12]
 8019d10:	e7e3      	b.n	8019cda <_putc_r+0x1a>
 8019d12:	6823      	ldr	r3, [r4, #0]
 8019d14:	1c5a      	adds	r2, r3, #1
 8019d16:	6022      	str	r2, [r4, #0]
 8019d18:	701d      	strb	r5, [r3, #0]
 8019d1a:	b2e8      	uxtb	r0, r5
 8019d1c:	bd70      	pop	{r4, r5, r6, pc}
 8019d1e:	bf00      	nop
 8019d20:	08027074 	.word	0x08027074
 8019d24:	08027094 	.word	0x08027094
 8019d28:	08027054 	.word	0x08027054

08019d2c <_sbrk_r>:
 8019d2c:	b538      	push	{r3, r4, r5, lr}
 8019d2e:	4c06      	ldr	r4, [pc, #24]	; (8019d48 <_sbrk_r+0x1c>)
 8019d30:	2300      	movs	r3, #0
 8019d32:	4605      	mov	r5, r0
 8019d34:	4608      	mov	r0, r1
 8019d36:	6023      	str	r3, [r4, #0]
 8019d38:	f7f8 fe64 	bl	8012a04 <_sbrk>
 8019d3c:	1c43      	adds	r3, r0, #1
 8019d3e:	d102      	bne.n	8019d46 <_sbrk_r+0x1a>
 8019d40:	6823      	ldr	r3, [r4, #0]
 8019d42:	b103      	cbz	r3, 8019d46 <_sbrk_r+0x1a>
 8019d44:	602b      	str	r3, [r5, #0]
 8019d46:	bd38      	pop	{r3, r4, r5, pc}
 8019d48:	200085e8 	.word	0x200085e8

08019d4c <_raise_r>:
 8019d4c:	291f      	cmp	r1, #31
 8019d4e:	b538      	push	{r3, r4, r5, lr}
 8019d50:	4604      	mov	r4, r0
 8019d52:	460d      	mov	r5, r1
 8019d54:	d904      	bls.n	8019d60 <_raise_r+0x14>
 8019d56:	2316      	movs	r3, #22
 8019d58:	6003      	str	r3, [r0, #0]
 8019d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8019d5e:	bd38      	pop	{r3, r4, r5, pc}
 8019d60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019d62:	b112      	cbz	r2, 8019d6a <_raise_r+0x1e>
 8019d64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019d68:	b94b      	cbnz	r3, 8019d7e <_raise_r+0x32>
 8019d6a:	4620      	mov	r0, r4
 8019d6c:	f000 f830 	bl	8019dd0 <_getpid_r>
 8019d70:	462a      	mov	r2, r5
 8019d72:	4601      	mov	r1, r0
 8019d74:	4620      	mov	r0, r4
 8019d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d7a:	f000 b817 	b.w	8019dac <_kill_r>
 8019d7e:	2b01      	cmp	r3, #1
 8019d80:	d00a      	beq.n	8019d98 <_raise_r+0x4c>
 8019d82:	1c59      	adds	r1, r3, #1
 8019d84:	d103      	bne.n	8019d8e <_raise_r+0x42>
 8019d86:	2316      	movs	r3, #22
 8019d88:	6003      	str	r3, [r0, #0]
 8019d8a:	2001      	movs	r0, #1
 8019d8c:	e7e7      	b.n	8019d5e <_raise_r+0x12>
 8019d8e:	2400      	movs	r4, #0
 8019d90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019d94:	4628      	mov	r0, r5
 8019d96:	4798      	blx	r3
 8019d98:	2000      	movs	r0, #0
 8019d9a:	e7e0      	b.n	8019d5e <_raise_r+0x12>

08019d9c <raise>:
 8019d9c:	4b02      	ldr	r3, [pc, #8]	; (8019da8 <raise+0xc>)
 8019d9e:	4601      	mov	r1, r0
 8019da0:	6818      	ldr	r0, [r3, #0]
 8019da2:	f7ff bfd3 	b.w	8019d4c <_raise_r>
 8019da6:	bf00      	nop
 8019da8:	20000018 	.word	0x20000018

08019dac <_kill_r>:
 8019dac:	b538      	push	{r3, r4, r5, lr}
 8019dae:	4c07      	ldr	r4, [pc, #28]	; (8019dcc <_kill_r+0x20>)
 8019db0:	2300      	movs	r3, #0
 8019db2:	4605      	mov	r5, r0
 8019db4:	4608      	mov	r0, r1
 8019db6:	4611      	mov	r1, r2
 8019db8:	6023      	str	r3, [r4, #0]
 8019dba:	f7f8 fd9b 	bl	80128f4 <_kill>
 8019dbe:	1c43      	adds	r3, r0, #1
 8019dc0:	d102      	bne.n	8019dc8 <_kill_r+0x1c>
 8019dc2:	6823      	ldr	r3, [r4, #0]
 8019dc4:	b103      	cbz	r3, 8019dc8 <_kill_r+0x1c>
 8019dc6:	602b      	str	r3, [r5, #0]
 8019dc8:	bd38      	pop	{r3, r4, r5, pc}
 8019dca:	bf00      	nop
 8019dcc:	200085e8 	.word	0x200085e8

08019dd0 <_getpid_r>:
 8019dd0:	f7f8 bd88 	b.w	80128e4 <_getpid>

08019dd4 <siprintf>:
 8019dd4:	b40e      	push	{r1, r2, r3}
 8019dd6:	b500      	push	{lr}
 8019dd8:	b09c      	sub	sp, #112	; 0x70
 8019dda:	ab1d      	add	r3, sp, #116	; 0x74
 8019ddc:	9002      	str	r0, [sp, #8]
 8019dde:	9006      	str	r0, [sp, #24]
 8019de0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019de4:	4809      	ldr	r0, [pc, #36]	; (8019e0c <siprintf+0x38>)
 8019de6:	9107      	str	r1, [sp, #28]
 8019de8:	9104      	str	r1, [sp, #16]
 8019dea:	4909      	ldr	r1, [pc, #36]	; (8019e10 <siprintf+0x3c>)
 8019dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8019df0:	9105      	str	r1, [sp, #20]
 8019df2:	6800      	ldr	r0, [r0, #0]
 8019df4:	9301      	str	r3, [sp, #4]
 8019df6:	a902      	add	r1, sp, #8
 8019df8:	f001 fcd0 	bl	801b79c <_svfiprintf_r>
 8019dfc:	9b02      	ldr	r3, [sp, #8]
 8019dfe:	2200      	movs	r2, #0
 8019e00:	701a      	strb	r2, [r3, #0]
 8019e02:	b01c      	add	sp, #112	; 0x70
 8019e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e08:	b003      	add	sp, #12
 8019e0a:	4770      	bx	lr
 8019e0c:	20000018 	.word	0x20000018
 8019e10:	ffff0208 	.word	0xffff0208

08019e14 <strncmp>:
 8019e14:	b510      	push	{r4, lr}
 8019e16:	b16a      	cbz	r2, 8019e34 <strncmp+0x20>
 8019e18:	3901      	subs	r1, #1
 8019e1a:	1884      	adds	r4, r0, r2
 8019e1c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019e20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019e24:	4293      	cmp	r3, r2
 8019e26:	d103      	bne.n	8019e30 <strncmp+0x1c>
 8019e28:	42a0      	cmp	r0, r4
 8019e2a:	d001      	beq.n	8019e30 <strncmp+0x1c>
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d1f5      	bne.n	8019e1c <strncmp+0x8>
 8019e30:	1a98      	subs	r0, r3, r2
 8019e32:	bd10      	pop	{r4, pc}
 8019e34:	4610      	mov	r0, r2
 8019e36:	e7fc      	b.n	8019e32 <strncmp+0x1e>

08019e38 <__swbuf_r>:
 8019e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e3a:	460e      	mov	r6, r1
 8019e3c:	4614      	mov	r4, r2
 8019e3e:	4605      	mov	r5, r0
 8019e40:	b118      	cbz	r0, 8019e4a <__swbuf_r+0x12>
 8019e42:	6983      	ldr	r3, [r0, #24]
 8019e44:	b90b      	cbnz	r3, 8019e4a <__swbuf_r+0x12>
 8019e46:	f001 f84f 	bl	801aee8 <__sinit>
 8019e4a:	4b21      	ldr	r3, [pc, #132]	; (8019ed0 <__swbuf_r+0x98>)
 8019e4c:	429c      	cmp	r4, r3
 8019e4e:	d12a      	bne.n	8019ea6 <__swbuf_r+0x6e>
 8019e50:	686c      	ldr	r4, [r5, #4]
 8019e52:	69a3      	ldr	r3, [r4, #24]
 8019e54:	60a3      	str	r3, [r4, #8]
 8019e56:	89a3      	ldrh	r3, [r4, #12]
 8019e58:	071a      	lsls	r2, r3, #28
 8019e5a:	d52e      	bpl.n	8019eba <__swbuf_r+0x82>
 8019e5c:	6923      	ldr	r3, [r4, #16]
 8019e5e:	b363      	cbz	r3, 8019eba <__swbuf_r+0x82>
 8019e60:	6923      	ldr	r3, [r4, #16]
 8019e62:	6820      	ldr	r0, [r4, #0]
 8019e64:	1ac0      	subs	r0, r0, r3
 8019e66:	6963      	ldr	r3, [r4, #20]
 8019e68:	b2f6      	uxtb	r6, r6
 8019e6a:	4283      	cmp	r3, r0
 8019e6c:	4637      	mov	r7, r6
 8019e6e:	dc04      	bgt.n	8019e7a <__swbuf_r+0x42>
 8019e70:	4621      	mov	r1, r4
 8019e72:	4628      	mov	r0, r5
 8019e74:	f000 ffce 	bl	801ae14 <_fflush_r>
 8019e78:	bb28      	cbnz	r0, 8019ec6 <__swbuf_r+0x8e>
 8019e7a:	68a3      	ldr	r3, [r4, #8]
 8019e7c:	3b01      	subs	r3, #1
 8019e7e:	60a3      	str	r3, [r4, #8]
 8019e80:	6823      	ldr	r3, [r4, #0]
 8019e82:	1c5a      	adds	r2, r3, #1
 8019e84:	6022      	str	r2, [r4, #0]
 8019e86:	701e      	strb	r6, [r3, #0]
 8019e88:	6963      	ldr	r3, [r4, #20]
 8019e8a:	3001      	adds	r0, #1
 8019e8c:	4283      	cmp	r3, r0
 8019e8e:	d004      	beq.n	8019e9a <__swbuf_r+0x62>
 8019e90:	89a3      	ldrh	r3, [r4, #12]
 8019e92:	07db      	lsls	r3, r3, #31
 8019e94:	d519      	bpl.n	8019eca <__swbuf_r+0x92>
 8019e96:	2e0a      	cmp	r6, #10
 8019e98:	d117      	bne.n	8019eca <__swbuf_r+0x92>
 8019e9a:	4621      	mov	r1, r4
 8019e9c:	4628      	mov	r0, r5
 8019e9e:	f000 ffb9 	bl	801ae14 <_fflush_r>
 8019ea2:	b190      	cbz	r0, 8019eca <__swbuf_r+0x92>
 8019ea4:	e00f      	b.n	8019ec6 <__swbuf_r+0x8e>
 8019ea6:	4b0b      	ldr	r3, [pc, #44]	; (8019ed4 <__swbuf_r+0x9c>)
 8019ea8:	429c      	cmp	r4, r3
 8019eaa:	d101      	bne.n	8019eb0 <__swbuf_r+0x78>
 8019eac:	68ac      	ldr	r4, [r5, #8]
 8019eae:	e7d0      	b.n	8019e52 <__swbuf_r+0x1a>
 8019eb0:	4b09      	ldr	r3, [pc, #36]	; (8019ed8 <__swbuf_r+0xa0>)
 8019eb2:	429c      	cmp	r4, r3
 8019eb4:	bf08      	it	eq
 8019eb6:	68ec      	ldreq	r4, [r5, #12]
 8019eb8:	e7cb      	b.n	8019e52 <__swbuf_r+0x1a>
 8019eba:	4621      	mov	r1, r4
 8019ebc:	4628      	mov	r0, r5
 8019ebe:	f000 f80d 	bl	8019edc <__swsetup_r>
 8019ec2:	2800      	cmp	r0, #0
 8019ec4:	d0cc      	beq.n	8019e60 <__swbuf_r+0x28>
 8019ec6:	f04f 37ff 	mov.w	r7, #4294967295
 8019eca:	4638      	mov	r0, r7
 8019ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ece:	bf00      	nop
 8019ed0:	08027074 	.word	0x08027074
 8019ed4:	08027094 	.word	0x08027094
 8019ed8:	08027054 	.word	0x08027054

08019edc <__swsetup_r>:
 8019edc:	4b32      	ldr	r3, [pc, #200]	; (8019fa8 <__swsetup_r+0xcc>)
 8019ede:	b570      	push	{r4, r5, r6, lr}
 8019ee0:	681d      	ldr	r5, [r3, #0]
 8019ee2:	4606      	mov	r6, r0
 8019ee4:	460c      	mov	r4, r1
 8019ee6:	b125      	cbz	r5, 8019ef2 <__swsetup_r+0x16>
 8019ee8:	69ab      	ldr	r3, [r5, #24]
 8019eea:	b913      	cbnz	r3, 8019ef2 <__swsetup_r+0x16>
 8019eec:	4628      	mov	r0, r5
 8019eee:	f000 fffb 	bl	801aee8 <__sinit>
 8019ef2:	4b2e      	ldr	r3, [pc, #184]	; (8019fac <__swsetup_r+0xd0>)
 8019ef4:	429c      	cmp	r4, r3
 8019ef6:	d10f      	bne.n	8019f18 <__swsetup_r+0x3c>
 8019ef8:	686c      	ldr	r4, [r5, #4]
 8019efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019efe:	b29a      	uxth	r2, r3
 8019f00:	0715      	lsls	r5, r2, #28
 8019f02:	d42c      	bmi.n	8019f5e <__swsetup_r+0x82>
 8019f04:	06d0      	lsls	r0, r2, #27
 8019f06:	d411      	bmi.n	8019f2c <__swsetup_r+0x50>
 8019f08:	2209      	movs	r2, #9
 8019f0a:	6032      	str	r2, [r6, #0]
 8019f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f10:	81a3      	strh	r3, [r4, #12]
 8019f12:	f04f 30ff 	mov.w	r0, #4294967295
 8019f16:	e03e      	b.n	8019f96 <__swsetup_r+0xba>
 8019f18:	4b25      	ldr	r3, [pc, #148]	; (8019fb0 <__swsetup_r+0xd4>)
 8019f1a:	429c      	cmp	r4, r3
 8019f1c:	d101      	bne.n	8019f22 <__swsetup_r+0x46>
 8019f1e:	68ac      	ldr	r4, [r5, #8]
 8019f20:	e7eb      	b.n	8019efa <__swsetup_r+0x1e>
 8019f22:	4b24      	ldr	r3, [pc, #144]	; (8019fb4 <__swsetup_r+0xd8>)
 8019f24:	429c      	cmp	r4, r3
 8019f26:	bf08      	it	eq
 8019f28:	68ec      	ldreq	r4, [r5, #12]
 8019f2a:	e7e6      	b.n	8019efa <__swsetup_r+0x1e>
 8019f2c:	0751      	lsls	r1, r2, #29
 8019f2e:	d512      	bpl.n	8019f56 <__swsetup_r+0x7a>
 8019f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f32:	b141      	cbz	r1, 8019f46 <__swsetup_r+0x6a>
 8019f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f38:	4299      	cmp	r1, r3
 8019f3a:	d002      	beq.n	8019f42 <__swsetup_r+0x66>
 8019f3c:	4630      	mov	r0, r6
 8019f3e:	f7ff f87b 	bl	8019038 <_free_r>
 8019f42:	2300      	movs	r3, #0
 8019f44:	6363      	str	r3, [r4, #52]	; 0x34
 8019f46:	89a3      	ldrh	r3, [r4, #12]
 8019f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019f4c:	81a3      	strh	r3, [r4, #12]
 8019f4e:	2300      	movs	r3, #0
 8019f50:	6063      	str	r3, [r4, #4]
 8019f52:	6923      	ldr	r3, [r4, #16]
 8019f54:	6023      	str	r3, [r4, #0]
 8019f56:	89a3      	ldrh	r3, [r4, #12]
 8019f58:	f043 0308 	orr.w	r3, r3, #8
 8019f5c:	81a3      	strh	r3, [r4, #12]
 8019f5e:	6923      	ldr	r3, [r4, #16]
 8019f60:	b94b      	cbnz	r3, 8019f76 <__swsetup_r+0x9a>
 8019f62:	89a3      	ldrh	r3, [r4, #12]
 8019f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019f6c:	d003      	beq.n	8019f76 <__swsetup_r+0x9a>
 8019f6e:	4621      	mov	r1, r4
 8019f70:	4630      	mov	r0, r6
 8019f72:	f001 f875 	bl	801b060 <__smakebuf_r>
 8019f76:	89a2      	ldrh	r2, [r4, #12]
 8019f78:	f012 0301 	ands.w	r3, r2, #1
 8019f7c:	d00c      	beq.n	8019f98 <__swsetup_r+0xbc>
 8019f7e:	2300      	movs	r3, #0
 8019f80:	60a3      	str	r3, [r4, #8]
 8019f82:	6963      	ldr	r3, [r4, #20]
 8019f84:	425b      	negs	r3, r3
 8019f86:	61a3      	str	r3, [r4, #24]
 8019f88:	6923      	ldr	r3, [r4, #16]
 8019f8a:	b953      	cbnz	r3, 8019fa2 <__swsetup_r+0xc6>
 8019f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f90:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019f94:	d1ba      	bne.n	8019f0c <__swsetup_r+0x30>
 8019f96:	bd70      	pop	{r4, r5, r6, pc}
 8019f98:	0792      	lsls	r2, r2, #30
 8019f9a:	bf58      	it	pl
 8019f9c:	6963      	ldrpl	r3, [r4, #20]
 8019f9e:	60a3      	str	r3, [r4, #8]
 8019fa0:	e7f2      	b.n	8019f88 <__swsetup_r+0xac>
 8019fa2:	2000      	movs	r0, #0
 8019fa4:	e7f7      	b.n	8019f96 <__swsetup_r+0xba>
 8019fa6:	bf00      	nop
 8019fa8:	20000018 	.word	0x20000018
 8019fac:	08027074 	.word	0x08027074
 8019fb0:	08027094 	.word	0x08027094
 8019fb4:	08027054 	.word	0x08027054

08019fb8 <__register_exitproc>:
 8019fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fbc:	4d2c      	ldr	r5, [pc, #176]	; (801a070 <__register_exitproc+0xb8>)
 8019fbe:	682c      	ldr	r4, [r5, #0]
 8019fc0:	4607      	mov	r7, r0
 8019fc2:	460e      	mov	r6, r1
 8019fc4:	4691      	mov	r9, r2
 8019fc6:	4698      	mov	r8, r3
 8019fc8:	b934      	cbnz	r4, 8019fd8 <__register_exitproc+0x20>
 8019fca:	4b2a      	ldr	r3, [pc, #168]	; (801a074 <__register_exitproc+0xbc>)
 8019fcc:	4c2a      	ldr	r4, [pc, #168]	; (801a078 <__register_exitproc+0xc0>)
 8019fce:	602c      	str	r4, [r5, #0]
 8019fd0:	b113      	cbz	r3, 8019fd8 <__register_exitproc+0x20>
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8019fd8:	6863      	ldr	r3, [r4, #4]
 8019fda:	2b1f      	cmp	r3, #31
 8019fdc:	dd3d      	ble.n	801a05a <__register_exitproc+0xa2>
 8019fde:	4b27      	ldr	r3, [pc, #156]	; (801a07c <__register_exitproc+0xc4>)
 8019fe0:	b91b      	cbnz	r3, 8019fea <__register_exitproc+0x32>
 8019fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8019fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fea:	208c      	movs	r0, #140	; 0x8c
 8019fec:	f7fe ffda 	bl	8018fa4 <malloc>
 8019ff0:	4604      	mov	r4, r0
 8019ff2:	2800      	cmp	r0, #0
 8019ff4:	d0f5      	beq.n	8019fe2 <__register_exitproc+0x2a>
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	682a      	ldr	r2, [r5, #0]
 8019ffa:	6002      	str	r2, [r0, #0]
 8019ffc:	6043      	str	r3, [r0, #4]
 8019ffe:	6028      	str	r0, [r5, #0]
 801a000:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801a004:	b30f      	cbz	r7, 801a04a <__register_exitproc+0x92>
 801a006:	f44f 7084 	mov.w	r0, #264	; 0x108
 801a00a:	f7fe ffcb 	bl	8018fa4 <malloc>
 801a00e:	2800      	cmp	r0, #0
 801a010:	d0e7      	beq.n	8019fe2 <__register_exitproc+0x2a>
 801a012:	2300      	movs	r3, #0
 801a014:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801a018:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801a01c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801a020:	6862      	ldr	r2, [r4, #4]
 801a022:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801a026:	2301      	movs	r3, #1
 801a028:	4093      	lsls	r3, r2
 801a02a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801a02e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801a032:	431a      	orrs	r2, r3
 801a034:	2f02      	cmp	r7, #2
 801a036:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801a03a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801a03e:	bf02      	ittt	eq
 801a040:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801a044:	4313      	orreq	r3, r2
 801a046:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801a04a:	6863      	ldr	r3, [r4, #4]
 801a04c:	1c5a      	adds	r2, r3, #1
 801a04e:	3302      	adds	r3, #2
 801a050:	6062      	str	r2, [r4, #4]
 801a052:	2000      	movs	r0, #0
 801a054:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801a058:	e7c5      	b.n	8019fe6 <__register_exitproc+0x2e>
 801a05a:	2f00      	cmp	r7, #0
 801a05c:	d0f5      	beq.n	801a04a <__register_exitproc+0x92>
 801a05e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801a062:	2800      	cmp	r0, #0
 801a064:	d1dc      	bne.n	801a020 <__register_exitproc+0x68>
 801a066:	4b05      	ldr	r3, [pc, #20]	; (801a07c <__register_exitproc+0xc4>)
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d0ba      	beq.n	8019fe2 <__register_exitproc+0x2a>
 801a06c:	e7cb      	b.n	801a006 <__register_exitproc+0x4e>
 801a06e:	bf00      	nop
 801a070:	200085e0 	.word	0x200085e0
 801a074:	00000000 	.word	0x00000000
 801a078:	20008554 	.word	0x20008554
 801a07c:	08018fa5 	.word	0x08018fa5

0801a080 <quorem>:
 801a080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a084:	6903      	ldr	r3, [r0, #16]
 801a086:	690c      	ldr	r4, [r1, #16]
 801a088:	42a3      	cmp	r3, r4
 801a08a:	4680      	mov	r8, r0
 801a08c:	f2c0 8082 	blt.w	801a194 <quorem+0x114>
 801a090:	3c01      	subs	r4, #1
 801a092:	f101 0714 	add.w	r7, r1, #20
 801a096:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801a09a:	f100 0614 	add.w	r6, r0, #20
 801a09e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801a0a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801a0a6:	eb06 030c 	add.w	r3, r6, ip
 801a0aa:	3501      	adds	r5, #1
 801a0ac:	eb07 090c 	add.w	r9, r7, ip
 801a0b0:	9301      	str	r3, [sp, #4]
 801a0b2:	fbb0 f5f5 	udiv	r5, r0, r5
 801a0b6:	b395      	cbz	r5, 801a11e <quorem+0x9e>
 801a0b8:	f04f 0a00 	mov.w	sl, #0
 801a0bc:	4638      	mov	r0, r7
 801a0be:	46b6      	mov	lr, r6
 801a0c0:	46d3      	mov	fp, sl
 801a0c2:	f850 2b04 	ldr.w	r2, [r0], #4
 801a0c6:	b293      	uxth	r3, r2
 801a0c8:	fb05 a303 	mla	r3, r5, r3, sl
 801a0cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a0d0:	b29b      	uxth	r3, r3
 801a0d2:	ebab 0303 	sub.w	r3, fp, r3
 801a0d6:	0c12      	lsrs	r2, r2, #16
 801a0d8:	f8de b000 	ldr.w	fp, [lr]
 801a0dc:	fb05 a202 	mla	r2, r5, r2, sl
 801a0e0:	fa13 f38b 	uxtah	r3, r3, fp
 801a0e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801a0e8:	fa1f fb82 	uxth.w	fp, r2
 801a0ec:	f8de 2000 	ldr.w	r2, [lr]
 801a0f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801a0f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a0f8:	b29b      	uxth	r3, r3
 801a0fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a0fe:	4581      	cmp	r9, r0
 801a100:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801a104:	f84e 3b04 	str.w	r3, [lr], #4
 801a108:	d2db      	bcs.n	801a0c2 <quorem+0x42>
 801a10a:	f856 300c 	ldr.w	r3, [r6, ip]
 801a10e:	b933      	cbnz	r3, 801a11e <quorem+0x9e>
 801a110:	9b01      	ldr	r3, [sp, #4]
 801a112:	3b04      	subs	r3, #4
 801a114:	429e      	cmp	r6, r3
 801a116:	461a      	mov	r2, r3
 801a118:	d330      	bcc.n	801a17c <quorem+0xfc>
 801a11a:	f8c8 4010 	str.w	r4, [r8, #16]
 801a11e:	4640      	mov	r0, r8
 801a120:	f001 f9f6 	bl	801b510 <__mcmp>
 801a124:	2800      	cmp	r0, #0
 801a126:	db25      	blt.n	801a174 <quorem+0xf4>
 801a128:	3501      	adds	r5, #1
 801a12a:	4630      	mov	r0, r6
 801a12c:	f04f 0c00 	mov.w	ip, #0
 801a130:	f857 2b04 	ldr.w	r2, [r7], #4
 801a134:	f8d0 e000 	ldr.w	lr, [r0]
 801a138:	b293      	uxth	r3, r2
 801a13a:	ebac 0303 	sub.w	r3, ip, r3
 801a13e:	0c12      	lsrs	r2, r2, #16
 801a140:	fa13 f38e 	uxtah	r3, r3, lr
 801a144:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a152:	45b9      	cmp	r9, r7
 801a154:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a158:	f840 3b04 	str.w	r3, [r0], #4
 801a15c:	d2e8      	bcs.n	801a130 <quorem+0xb0>
 801a15e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801a162:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801a166:	b92a      	cbnz	r2, 801a174 <quorem+0xf4>
 801a168:	3b04      	subs	r3, #4
 801a16a:	429e      	cmp	r6, r3
 801a16c:	461a      	mov	r2, r3
 801a16e:	d30b      	bcc.n	801a188 <quorem+0x108>
 801a170:	f8c8 4010 	str.w	r4, [r8, #16]
 801a174:	4628      	mov	r0, r5
 801a176:	b003      	add	sp, #12
 801a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a17c:	6812      	ldr	r2, [r2, #0]
 801a17e:	3b04      	subs	r3, #4
 801a180:	2a00      	cmp	r2, #0
 801a182:	d1ca      	bne.n	801a11a <quorem+0x9a>
 801a184:	3c01      	subs	r4, #1
 801a186:	e7c5      	b.n	801a114 <quorem+0x94>
 801a188:	6812      	ldr	r2, [r2, #0]
 801a18a:	3b04      	subs	r3, #4
 801a18c:	2a00      	cmp	r2, #0
 801a18e:	d1ef      	bne.n	801a170 <quorem+0xf0>
 801a190:	3c01      	subs	r4, #1
 801a192:	e7ea      	b.n	801a16a <quorem+0xea>
 801a194:	2000      	movs	r0, #0
 801a196:	e7ee      	b.n	801a176 <quorem+0xf6>

0801a198 <_dtoa_r>:
 801a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a19c:	ec57 6b10 	vmov	r6, r7, d0
 801a1a0:	b097      	sub	sp, #92	; 0x5c
 801a1a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a1a4:	9106      	str	r1, [sp, #24]
 801a1a6:	4604      	mov	r4, r0
 801a1a8:	920b      	str	r2, [sp, #44]	; 0x2c
 801a1aa:	9312      	str	r3, [sp, #72]	; 0x48
 801a1ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a1b0:	e9cd 6700 	strd	r6, r7, [sp]
 801a1b4:	b93d      	cbnz	r5, 801a1c6 <_dtoa_r+0x2e>
 801a1b6:	2010      	movs	r0, #16
 801a1b8:	f7fe fef4 	bl	8018fa4 <malloc>
 801a1bc:	6260      	str	r0, [r4, #36]	; 0x24
 801a1be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a1c2:	6005      	str	r5, [r0, #0]
 801a1c4:	60c5      	str	r5, [r0, #12]
 801a1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a1c8:	6819      	ldr	r1, [r3, #0]
 801a1ca:	b151      	cbz	r1, 801a1e2 <_dtoa_r+0x4a>
 801a1cc:	685a      	ldr	r2, [r3, #4]
 801a1ce:	604a      	str	r2, [r1, #4]
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	4093      	lsls	r3, r2
 801a1d4:	608b      	str	r3, [r1, #8]
 801a1d6:	4620      	mov	r0, r4
 801a1d8:	f000 ffb8 	bl	801b14c <_Bfree>
 801a1dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a1de:	2200      	movs	r2, #0
 801a1e0:	601a      	str	r2, [r3, #0]
 801a1e2:	1e3b      	subs	r3, r7, #0
 801a1e4:	bfbb      	ittet	lt
 801a1e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a1ea:	9301      	strlt	r3, [sp, #4]
 801a1ec:	2300      	movge	r3, #0
 801a1ee:	2201      	movlt	r2, #1
 801a1f0:	bfac      	ite	ge
 801a1f2:	f8c8 3000 	strge.w	r3, [r8]
 801a1f6:	f8c8 2000 	strlt.w	r2, [r8]
 801a1fa:	4baf      	ldr	r3, [pc, #700]	; (801a4b8 <_dtoa_r+0x320>)
 801a1fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a200:	ea33 0308 	bics.w	r3, r3, r8
 801a204:	d114      	bne.n	801a230 <_dtoa_r+0x98>
 801a206:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a208:	f242 730f 	movw	r3, #9999	; 0x270f
 801a20c:	6013      	str	r3, [r2, #0]
 801a20e:	9b00      	ldr	r3, [sp, #0]
 801a210:	b923      	cbnz	r3, 801a21c <_dtoa_r+0x84>
 801a212:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801a216:	2800      	cmp	r0, #0
 801a218:	f000 8542 	beq.w	801aca0 <_dtoa_r+0xb08>
 801a21c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a21e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801a4cc <_dtoa_r+0x334>
 801a222:	2b00      	cmp	r3, #0
 801a224:	f000 8544 	beq.w	801acb0 <_dtoa_r+0xb18>
 801a228:	f10b 0303 	add.w	r3, fp, #3
 801a22c:	f000 bd3e 	b.w	801acac <_dtoa_r+0xb14>
 801a230:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a234:	2200      	movs	r2, #0
 801a236:	2300      	movs	r3, #0
 801a238:	4630      	mov	r0, r6
 801a23a:	4639      	mov	r1, r7
 801a23c:	f7e6 fc54 	bl	8000ae8 <__aeabi_dcmpeq>
 801a240:	4681      	mov	r9, r0
 801a242:	b168      	cbz	r0, 801a260 <_dtoa_r+0xc8>
 801a244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a246:	2301      	movs	r3, #1
 801a248:	6013      	str	r3, [r2, #0]
 801a24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	f000 8524 	beq.w	801ac9a <_dtoa_r+0xb02>
 801a252:	4b9a      	ldr	r3, [pc, #616]	; (801a4bc <_dtoa_r+0x324>)
 801a254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a256:	f103 3bff 	add.w	fp, r3, #4294967295
 801a25a:	6013      	str	r3, [r2, #0]
 801a25c:	f000 bd28 	b.w	801acb0 <_dtoa_r+0xb18>
 801a260:	aa14      	add	r2, sp, #80	; 0x50
 801a262:	a915      	add	r1, sp, #84	; 0x54
 801a264:	ec47 6b10 	vmov	d0, r6, r7
 801a268:	4620      	mov	r0, r4
 801a26a:	f001 f9c8 	bl	801b5fe <__d2b>
 801a26e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801a272:	9004      	str	r0, [sp, #16]
 801a274:	2d00      	cmp	r5, #0
 801a276:	d07c      	beq.n	801a372 <_dtoa_r+0x1da>
 801a278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a27c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801a280:	46b2      	mov	sl, r6
 801a282:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801a286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a28a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801a28e:	2200      	movs	r2, #0
 801a290:	4b8b      	ldr	r3, [pc, #556]	; (801a4c0 <_dtoa_r+0x328>)
 801a292:	4650      	mov	r0, sl
 801a294:	4659      	mov	r1, fp
 801a296:	f7e6 f807 	bl	80002a8 <__aeabi_dsub>
 801a29a:	a381      	add	r3, pc, #516	; (adr r3, 801a4a0 <_dtoa_r+0x308>)
 801a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2a0:	f7e6 f9ba 	bl	8000618 <__aeabi_dmul>
 801a2a4:	a380      	add	r3, pc, #512	; (adr r3, 801a4a8 <_dtoa_r+0x310>)
 801a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2aa:	f7e5 ffff 	bl	80002ac <__adddf3>
 801a2ae:	4606      	mov	r6, r0
 801a2b0:	4628      	mov	r0, r5
 801a2b2:	460f      	mov	r7, r1
 801a2b4:	f7e6 f946 	bl	8000544 <__aeabi_i2d>
 801a2b8:	a37d      	add	r3, pc, #500	; (adr r3, 801a4b0 <_dtoa_r+0x318>)
 801a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2be:	f7e6 f9ab 	bl	8000618 <__aeabi_dmul>
 801a2c2:	4602      	mov	r2, r0
 801a2c4:	460b      	mov	r3, r1
 801a2c6:	4630      	mov	r0, r6
 801a2c8:	4639      	mov	r1, r7
 801a2ca:	f7e5 ffef 	bl	80002ac <__adddf3>
 801a2ce:	4606      	mov	r6, r0
 801a2d0:	460f      	mov	r7, r1
 801a2d2:	f7e6 fc51 	bl	8000b78 <__aeabi_d2iz>
 801a2d6:	2200      	movs	r2, #0
 801a2d8:	4682      	mov	sl, r0
 801a2da:	2300      	movs	r3, #0
 801a2dc:	4630      	mov	r0, r6
 801a2de:	4639      	mov	r1, r7
 801a2e0:	f7e6 fc0c 	bl	8000afc <__aeabi_dcmplt>
 801a2e4:	b148      	cbz	r0, 801a2fa <_dtoa_r+0x162>
 801a2e6:	4650      	mov	r0, sl
 801a2e8:	f7e6 f92c 	bl	8000544 <__aeabi_i2d>
 801a2ec:	4632      	mov	r2, r6
 801a2ee:	463b      	mov	r3, r7
 801a2f0:	f7e6 fbfa 	bl	8000ae8 <__aeabi_dcmpeq>
 801a2f4:	b908      	cbnz	r0, 801a2fa <_dtoa_r+0x162>
 801a2f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a2fa:	f1ba 0f16 	cmp.w	sl, #22
 801a2fe:	d859      	bhi.n	801a3b4 <_dtoa_r+0x21c>
 801a300:	4970      	ldr	r1, [pc, #448]	; (801a4c4 <_dtoa_r+0x32c>)
 801a302:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801a306:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a30a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a30e:	f7e6 fc13 	bl	8000b38 <__aeabi_dcmpgt>
 801a312:	2800      	cmp	r0, #0
 801a314:	d050      	beq.n	801a3b8 <_dtoa_r+0x220>
 801a316:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a31a:	2300      	movs	r3, #0
 801a31c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a31e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a320:	1b5d      	subs	r5, r3, r5
 801a322:	f1b5 0801 	subs.w	r8, r5, #1
 801a326:	bf49      	itett	mi
 801a328:	f1c5 0301 	rsbmi	r3, r5, #1
 801a32c:	2300      	movpl	r3, #0
 801a32e:	9305      	strmi	r3, [sp, #20]
 801a330:	f04f 0800 	movmi.w	r8, #0
 801a334:	bf58      	it	pl
 801a336:	9305      	strpl	r3, [sp, #20]
 801a338:	f1ba 0f00 	cmp.w	sl, #0
 801a33c:	db3e      	blt.n	801a3bc <_dtoa_r+0x224>
 801a33e:	2300      	movs	r3, #0
 801a340:	44d0      	add	r8, sl
 801a342:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801a346:	9307      	str	r3, [sp, #28]
 801a348:	9b06      	ldr	r3, [sp, #24]
 801a34a:	2b09      	cmp	r3, #9
 801a34c:	f200 8090 	bhi.w	801a470 <_dtoa_r+0x2d8>
 801a350:	2b05      	cmp	r3, #5
 801a352:	bfc4      	itt	gt
 801a354:	3b04      	subgt	r3, #4
 801a356:	9306      	strgt	r3, [sp, #24]
 801a358:	9b06      	ldr	r3, [sp, #24]
 801a35a:	f1a3 0302 	sub.w	r3, r3, #2
 801a35e:	bfcc      	ite	gt
 801a360:	2500      	movgt	r5, #0
 801a362:	2501      	movle	r5, #1
 801a364:	2b03      	cmp	r3, #3
 801a366:	f200 808f 	bhi.w	801a488 <_dtoa_r+0x2f0>
 801a36a:	e8df f003 	tbb	[pc, r3]
 801a36e:	7f7d      	.short	0x7f7d
 801a370:	7131      	.short	0x7131
 801a372:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801a376:	441d      	add	r5, r3
 801a378:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801a37c:	2820      	cmp	r0, #32
 801a37e:	dd13      	ble.n	801a3a8 <_dtoa_r+0x210>
 801a380:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801a384:	9b00      	ldr	r3, [sp, #0]
 801a386:	fa08 f800 	lsl.w	r8, r8, r0
 801a38a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801a38e:	fa23 f000 	lsr.w	r0, r3, r0
 801a392:	ea48 0000 	orr.w	r0, r8, r0
 801a396:	f7e6 f8c5 	bl	8000524 <__aeabi_ui2d>
 801a39a:	2301      	movs	r3, #1
 801a39c:	4682      	mov	sl, r0
 801a39e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801a3a2:	3d01      	subs	r5, #1
 801a3a4:	9313      	str	r3, [sp, #76]	; 0x4c
 801a3a6:	e772      	b.n	801a28e <_dtoa_r+0xf6>
 801a3a8:	9b00      	ldr	r3, [sp, #0]
 801a3aa:	f1c0 0020 	rsb	r0, r0, #32
 801a3ae:	fa03 f000 	lsl.w	r0, r3, r0
 801a3b2:	e7f0      	b.n	801a396 <_dtoa_r+0x1fe>
 801a3b4:	2301      	movs	r3, #1
 801a3b6:	e7b1      	b.n	801a31c <_dtoa_r+0x184>
 801a3b8:	900f      	str	r0, [sp, #60]	; 0x3c
 801a3ba:	e7b0      	b.n	801a31e <_dtoa_r+0x186>
 801a3bc:	9b05      	ldr	r3, [sp, #20]
 801a3be:	eba3 030a 	sub.w	r3, r3, sl
 801a3c2:	9305      	str	r3, [sp, #20]
 801a3c4:	f1ca 0300 	rsb	r3, sl, #0
 801a3c8:	9307      	str	r3, [sp, #28]
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	930e      	str	r3, [sp, #56]	; 0x38
 801a3ce:	e7bb      	b.n	801a348 <_dtoa_r+0x1b0>
 801a3d0:	2301      	movs	r3, #1
 801a3d2:	930a      	str	r3, [sp, #40]	; 0x28
 801a3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	dd59      	ble.n	801a48e <_dtoa_r+0x2f6>
 801a3da:	9302      	str	r3, [sp, #8]
 801a3dc:	4699      	mov	r9, r3
 801a3de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a3e0:	2200      	movs	r2, #0
 801a3e2:	6072      	str	r2, [r6, #4]
 801a3e4:	2204      	movs	r2, #4
 801a3e6:	f102 0014 	add.w	r0, r2, #20
 801a3ea:	4298      	cmp	r0, r3
 801a3ec:	6871      	ldr	r1, [r6, #4]
 801a3ee:	d953      	bls.n	801a498 <_dtoa_r+0x300>
 801a3f0:	4620      	mov	r0, r4
 801a3f2:	f000 fe77 	bl	801b0e4 <_Balloc>
 801a3f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a3f8:	6030      	str	r0, [r6, #0]
 801a3fa:	f1b9 0f0e 	cmp.w	r9, #14
 801a3fe:	f8d3 b000 	ldr.w	fp, [r3]
 801a402:	f200 80e6 	bhi.w	801a5d2 <_dtoa_r+0x43a>
 801a406:	2d00      	cmp	r5, #0
 801a408:	f000 80e3 	beq.w	801a5d2 <_dtoa_r+0x43a>
 801a40c:	ed9d 7b00 	vldr	d7, [sp]
 801a410:	f1ba 0f00 	cmp.w	sl, #0
 801a414:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801a418:	dd74      	ble.n	801a504 <_dtoa_r+0x36c>
 801a41a:	4a2a      	ldr	r2, [pc, #168]	; (801a4c4 <_dtoa_r+0x32c>)
 801a41c:	f00a 030f 	and.w	r3, sl, #15
 801a420:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a424:	ed93 7b00 	vldr	d7, [r3]
 801a428:	ea4f 162a 	mov.w	r6, sl, asr #4
 801a42c:	06f0      	lsls	r0, r6, #27
 801a42e:	ed8d 7b08 	vstr	d7, [sp, #32]
 801a432:	d565      	bpl.n	801a500 <_dtoa_r+0x368>
 801a434:	4b24      	ldr	r3, [pc, #144]	; (801a4c8 <_dtoa_r+0x330>)
 801a436:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a43a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a43e:	f7e6 fa15 	bl	800086c <__aeabi_ddiv>
 801a442:	e9cd 0100 	strd	r0, r1, [sp]
 801a446:	f006 060f 	and.w	r6, r6, #15
 801a44a:	2503      	movs	r5, #3
 801a44c:	4f1e      	ldr	r7, [pc, #120]	; (801a4c8 <_dtoa_r+0x330>)
 801a44e:	e04c      	b.n	801a4ea <_dtoa_r+0x352>
 801a450:	2301      	movs	r3, #1
 801a452:	930a      	str	r3, [sp, #40]	; 0x28
 801a454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a456:	4453      	add	r3, sl
 801a458:	f103 0901 	add.w	r9, r3, #1
 801a45c:	9302      	str	r3, [sp, #8]
 801a45e:	464b      	mov	r3, r9
 801a460:	2b01      	cmp	r3, #1
 801a462:	bfb8      	it	lt
 801a464:	2301      	movlt	r3, #1
 801a466:	e7ba      	b.n	801a3de <_dtoa_r+0x246>
 801a468:	2300      	movs	r3, #0
 801a46a:	e7b2      	b.n	801a3d2 <_dtoa_r+0x23a>
 801a46c:	2300      	movs	r3, #0
 801a46e:	e7f0      	b.n	801a452 <_dtoa_r+0x2ba>
 801a470:	2501      	movs	r5, #1
 801a472:	2300      	movs	r3, #0
 801a474:	9306      	str	r3, [sp, #24]
 801a476:	950a      	str	r5, [sp, #40]	; 0x28
 801a478:	f04f 33ff 	mov.w	r3, #4294967295
 801a47c:	9302      	str	r3, [sp, #8]
 801a47e:	4699      	mov	r9, r3
 801a480:	2200      	movs	r2, #0
 801a482:	2312      	movs	r3, #18
 801a484:	920b      	str	r2, [sp, #44]	; 0x2c
 801a486:	e7aa      	b.n	801a3de <_dtoa_r+0x246>
 801a488:	2301      	movs	r3, #1
 801a48a:	930a      	str	r3, [sp, #40]	; 0x28
 801a48c:	e7f4      	b.n	801a478 <_dtoa_r+0x2e0>
 801a48e:	2301      	movs	r3, #1
 801a490:	9302      	str	r3, [sp, #8]
 801a492:	4699      	mov	r9, r3
 801a494:	461a      	mov	r2, r3
 801a496:	e7f5      	b.n	801a484 <_dtoa_r+0x2ec>
 801a498:	3101      	adds	r1, #1
 801a49a:	6071      	str	r1, [r6, #4]
 801a49c:	0052      	lsls	r2, r2, #1
 801a49e:	e7a2      	b.n	801a3e6 <_dtoa_r+0x24e>
 801a4a0:	636f4361 	.word	0x636f4361
 801a4a4:	3fd287a7 	.word	0x3fd287a7
 801a4a8:	8b60c8b3 	.word	0x8b60c8b3
 801a4ac:	3fc68a28 	.word	0x3fc68a28
 801a4b0:	509f79fb 	.word	0x509f79fb
 801a4b4:	3fd34413 	.word	0x3fd34413
 801a4b8:	7ff00000 	.word	0x7ff00000
 801a4bc:	08027022 	.word	0x08027022
 801a4c0:	3ff80000 	.word	0x3ff80000
 801a4c4:	080270e0 	.word	0x080270e0
 801a4c8:	080270b8 	.word	0x080270b8
 801a4cc:	0802704e 	.word	0x0802704e
 801a4d0:	07f1      	lsls	r1, r6, #31
 801a4d2:	d508      	bpl.n	801a4e6 <_dtoa_r+0x34e>
 801a4d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a4d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a4dc:	f7e6 f89c 	bl	8000618 <__aeabi_dmul>
 801a4e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a4e4:	3501      	adds	r5, #1
 801a4e6:	1076      	asrs	r6, r6, #1
 801a4e8:	3708      	adds	r7, #8
 801a4ea:	2e00      	cmp	r6, #0
 801a4ec:	d1f0      	bne.n	801a4d0 <_dtoa_r+0x338>
 801a4ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a4f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a4f6:	f7e6 f9b9 	bl	800086c <__aeabi_ddiv>
 801a4fa:	e9cd 0100 	strd	r0, r1, [sp]
 801a4fe:	e01a      	b.n	801a536 <_dtoa_r+0x39e>
 801a500:	2502      	movs	r5, #2
 801a502:	e7a3      	b.n	801a44c <_dtoa_r+0x2b4>
 801a504:	f000 80a0 	beq.w	801a648 <_dtoa_r+0x4b0>
 801a508:	f1ca 0600 	rsb	r6, sl, #0
 801a50c:	4b9f      	ldr	r3, [pc, #636]	; (801a78c <_dtoa_r+0x5f4>)
 801a50e:	4fa0      	ldr	r7, [pc, #640]	; (801a790 <_dtoa_r+0x5f8>)
 801a510:	f006 020f 	and.w	r2, r6, #15
 801a514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a51c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a520:	f7e6 f87a 	bl	8000618 <__aeabi_dmul>
 801a524:	e9cd 0100 	strd	r0, r1, [sp]
 801a528:	1136      	asrs	r6, r6, #4
 801a52a:	2300      	movs	r3, #0
 801a52c:	2502      	movs	r5, #2
 801a52e:	2e00      	cmp	r6, #0
 801a530:	d17f      	bne.n	801a632 <_dtoa_r+0x49a>
 801a532:	2b00      	cmp	r3, #0
 801a534:	d1e1      	bne.n	801a4fa <_dtoa_r+0x362>
 801a536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a538:	2b00      	cmp	r3, #0
 801a53a:	f000 8087 	beq.w	801a64c <_dtoa_r+0x4b4>
 801a53e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a542:	2200      	movs	r2, #0
 801a544:	4b93      	ldr	r3, [pc, #588]	; (801a794 <_dtoa_r+0x5fc>)
 801a546:	4630      	mov	r0, r6
 801a548:	4639      	mov	r1, r7
 801a54a:	f7e6 fad7 	bl	8000afc <__aeabi_dcmplt>
 801a54e:	2800      	cmp	r0, #0
 801a550:	d07c      	beq.n	801a64c <_dtoa_r+0x4b4>
 801a552:	f1b9 0f00 	cmp.w	r9, #0
 801a556:	d079      	beq.n	801a64c <_dtoa_r+0x4b4>
 801a558:	9b02      	ldr	r3, [sp, #8]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	dd35      	ble.n	801a5ca <_dtoa_r+0x432>
 801a55e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a562:	9308      	str	r3, [sp, #32]
 801a564:	4639      	mov	r1, r7
 801a566:	2200      	movs	r2, #0
 801a568:	4b8b      	ldr	r3, [pc, #556]	; (801a798 <_dtoa_r+0x600>)
 801a56a:	4630      	mov	r0, r6
 801a56c:	f7e6 f854 	bl	8000618 <__aeabi_dmul>
 801a570:	e9cd 0100 	strd	r0, r1, [sp]
 801a574:	9f02      	ldr	r7, [sp, #8]
 801a576:	3501      	adds	r5, #1
 801a578:	4628      	mov	r0, r5
 801a57a:	f7e5 ffe3 	bl	8000544 <__aeabi_i2d>
 801a57e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a582:	f7e6 f849 	bl	8000618 <__aeabi_dmul>
 801a586:	2200      	movs	r2, #0
 801a588:	4b84      	ldr	r3, [pc, #528]	; (801a79c <_dtoa_r+0x604>)
 801a58a:	f7e5 fe8f 	bl	80002ac <__adddf3>
 801a58e:	4605      	mov	r5, r0
 801a590:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801a594:	2f00      	cmp	r7, #0
 801a596:	d15d      	bne.n	801a654 <_dtoa_r+0x4bc>
 801a598:	2200      	movs	r2, #0
 801a59a:	4b81      	ldr	r3, [pc, #516]	; (801a7a0 <_dtoa_r+0x608>)
 801a59c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a5a0:	f7e5 fe82 	bl	80002a8 <__aeabi_dsub>
 801a5a4:	462a      	mov	r2, r5
 801a5a6:	4633      	mov	r3, r6
 801a5a8:	e9cd 0100 	strd	r0, r1, [sp]
 801a5ac:	f7e6 fac4 	bl	8000b38 <__aeabi_dcmpgt>
 801a5b0:	2800      	cmp	r0, #0
 801a5b2:	f040 8288 	bne.w	801aac6 <_dtoa_r+0x92e>
 801a5b6:	462a      	mov	r2, r5
 801a5b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a5c0:	f7e6 fa9c 	bl	8000afc <__aeabi_dcmplt>
 801a5c4:	2800      	cmp	r0, #0
 801a5c6:	f040 827c 	bne.w	801aac2 <_dtoa_r+0x92a>
 801a5ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a5ce:	e9cd 2300 	strd	r2, r3, [sp]
 801a5d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	f2c0 8150 	blt.w	801a87a <_dtoa_r+0x6e2>
 801a5da:	f1ba 0f0e 	cmp.w	sl, #14
 801a5de:	f300 814c 	bgt.w	801a87a <_dtoa_r+0x6e2>
 801a5e2:	4b6a      	ldr	r3, [pc, #424]	; (801a78c <_dtoa_r+0x5f4>)
 801a5e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a5e8:	ed93 7b00 	vldr	d7, [r3]
 801a5ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a5f4:	f280 80d8 	bge.w	801a7a8 <_dtoa_r+0x610>
 801a5f8:	f1b9 0f00 	cmp.w	r9, #0
 801a5fc:	f300 80d4 	bgt.w	801a7a8 <_dtoa_r+0x610>
 801a600:	f040 825e 	bne.w	801aac0 <_dtoa_r+0x928>
 801a604:	2200      	movs	r2, #0
 801a606:	4b66      	ldr	r3, [pc, #408]	; (801a7a0 <_dtoa_r+0x608>)
 801a608:	ec51 0b17 	vmov	r0, r1, d7
 801a60c:	f7e6 f804 	bl	8000618 <__aeabi_dmul>
 801a610:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a614:	f7e6 fa86 	bl	8000b24 <__aeabi_dcmpge>
 801a618:	464f      	mov	r7, r9
 801a61a:	464e      	mov	r6, r9
 801a61c:	2800      	cmp	r0, #0
 801a61e:	f040 8234 	bne.w	801aa8a <_dtoa_r+0x8f2>
 801a622:	2331      	movs	r3, #49	; 0x31
 801a624:	f10b 0501 	add.w	r5, fp, #1
 801a628:	f88b 3000 	strb.w	r3, [fp]
 801a62c:	f10a 0a01 	add.w	sl, sl, #1
 801a630:	e22f      	b.n	801aa92 <_dtoa_r+0x8fa>
 801a632:	07f2      	lsls	r2, r6, #31
 801a634:	d505      	bpl.n	801a642 <_dtoa_r+0x4aa>
 801a636:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a63a:	f7e5 ffed 	bl	8000618 <__aeabi_dmul>
 801a63e:	3501      	adds	r5, #1
 801a640:	2301      	movs	r3, #1
 801a642:	1076      	asrs	r6, r6, #1
 801a644:	3708      	adds	r7, #8
 801a646:	e772      	b.n	801a52e <_dtoa_r+0x396>
 801a648:	2502      	movs	r5, #2
 801a64a:	e774      	b.n	801a536 <_dtoa_r+0x39e>
 801a64c:	f8cd a020 	str.w	sl, [sp, #32]
 801a650:	464f      	mov	r7, r9
 801a652:	e791      	b.n	801a578 <_dtoa_r+0x3e0>
 801a654:	4b4d      	ldr	r3, [pc, #308]	; (801a78c <_dtoa_r+0x5f4>)
 801a656:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a65a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801a65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a660:	2b00      	cmp	r3, #0
 801a662:	d047      	beq.n	801a6f4 <_dtoa_r+0x55c>
 801a664:	4602      	mov	r2, r0
 801a666:	460b      	mov	r3, r1
 801a668:	2000      	movs	r0, #0
 801a66a:	494e      	ldr	r1, [pc, #312]	; (801a7a4 <_dtoa_r+0x60c>)
 801a66c:	f7e6 f8fe 	bl	800086c <__aeabi_ddiv>
 801a670:	462a      	mov	r2, r5
 801a672:	4633      	mov	r3, r6
 801a674:	f7e5 fe18 	bl	80002a8 <__aeabi_dsub>
 801a678:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a67c:	465d      	mov	r5, fp
 801a67e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a682:	f7e6 fa79 	bl	8000b78 <__aeabi_d2iz>
 801a686:	4606      	mov	r6, r0
 801a688:	f7e5 ff5c 	bl	8000544 <__aeabi_i2d>
 801a68c:	4602      	mov	r2, r0
 801a68e:	460b      	mov	r3, r1
 801a690:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a694:	f7e5 fe08 	bl	80002a8 <__aeabi_dsub>
 801a698:	3630      	adds	r6, #48	; 0x30
 801a69a:	f805 6b01 	strb.w	r6, [r5], #1
 801a69e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a6a2:	e9cd 0100 	strd	r0, r1, [sp]
 801a6a6:	f7e6 fa29 	bl	8000afc <__aeabi_dcmplt>
 801a6aa:	2800      	cmp	r0, #0
 801a6ac:	d163      	bne.n	801a776 <_dtoa_r+0x5de>
 801a6ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a6b2:	2000      	movs	r0, #0
 801a6b4:	4937      	ldr	r1, [pc, #220]	; (801a794 <_dtoa_r+0x5fc>)
 801a6b6:	f7e5 fdf7 	bl	80002a8 <__aeabi_dsub>
 801a6ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a6be:	f7e6 fa1d 	bl	8000afc <__aeabi_dcmplt>
 801a6c2:	2800      	cmp	r0, #0
 801a6c4:	f040 80b7 	bne.w	801a836 <_dtoa_r+0x69e>
 801a6c8:	eba5 030b 	sub.w	r3, r5, fp
 801a6cc:	429f      	cmp	r7, r3
 801a6ce:	f77f af7c 	ble.w	801a5ca <_dtoa_r+0x432>
 801a6d2:	2200      	movs	r2, #0
 801a6d4:	4b30      	ldr	r3, [pc, #192]	; (801a798 <_dtoa_r+0x600>)
 801a6d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a6da:	f7e5 ff9d 	bl	8000618 <__aeabi_dmul>
 801a6de:	2200      	movs	r2, #0
 801a6e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a6e4:	4b2c      	ldr	r3, [pc, #176]	; (801a798 <_dtoa_r+0x600>)
 801a6e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a6ea:	f7e5 ff95 	bl	8000618 <__aeabi_dmul>
 801a6ee:	e9cd 0100 	strd	r0, r1, [sp]
 801a6f2:	e7c4      	b.n	801a67e <_dtoa_r+0x4e6>
 801a6f4:	462a      	mov	r2, r5
 801a6f6:	4633      	mov	r3, r6
 801a6f8:	f7e5 ff8e 	bl	8000618 <__aeabi_dmul>
 801a6fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a700:	eb0b 0507 	add.w	r5, fp, r7
 801a704:	465e      	mov	r6, fp
 801a706:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a70a:	f7e6 fa35 	bl	8000b78 <__aeabi_d2iz>
 801a70e:	4607      	mov	r7, r0
 801a710:	f7e5 ff18 	bl	8000544 <__aeabi_i2d>
 801a714:	3730      	adds	r7, #48	; 0x30
 801a716:	4602      	mov	r2, r0
 801a718:	460b      	mov	r3, r1
 801a71a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a71e:	f7e5 fdc3 	bl	80002a8 <__aeabi_dsub>
 801a722:	f806 7b01 	strb.w	r7, [r6], #1
 801a726:	42ae      	cmp	r6, r5
 801a728:	e9cd 0100 	strd	r0, r1, [sp]
 801a72c:	f04f 0200 	mov.w	r2, #0
 801a730:	d126      	bne.n	801a780 <_dtoa_r+0x5e8>
 801a732:	4b1c      	ldr	r3, [pc, #112]	; (801a7a4 <_dtoa_r+0x60c>)
 801a734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a738:	f7e5 fdb8 	bl	80002ac <__adddf3>
 801a73c:	4602      	mov	r2, r0
 801a73e:	460b      	mov	r3, r1
 801a740:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a744:	f7e6 f9f8 	bl	8000b38 <__aeabi_dcmpgt>
 801a748:	2800      	cmp	r0, #0
 801a74a:	d174      	bne.n	801a836 <_dtoa_r+0x69e>
 801a74c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a750:	2000      	movs	r0, #0
 801a752:	4914      	ldr	r1, [pc, #80]	; (801a7a4 <_dtoa_r+0x60c>)
 801a754:	f7e5 fda8 	bl	80002a8 <__aeabi_dsub>
 801a758:	4602      	mov	r2, r0
 801a75a:	460b      	mov	r3, r1
 801a75c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a760:	f7e6 f9cc 	bl	8000afc <__aeabi_dcmplt>
 801a764:	2800      	cmp	r0, #0
 801a766:	f43f af30 	beq.w	801a5ca <_dtoa_r+0x432>
 801a76a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a76e:	2b30      	cmp	r3, #48	; 0x30
 801a770:	f105 32ff 	add.w	r2, r5, #4294967295
 801a774:	d002      	beq.n	801a77c <_dtoa_r+0x5e4>
 801a776:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a77a:	e04a      	b.n	801a812 <_dtoa_r+0x67a>
 801a77c:	4615      	mov	r5, r2
 801a77e:	e7f4      	b.n	801a76a <_dtoa_r+0x5d2>
 801a780:	4b05      	ldr	r3, [pc, #20]	; (801a798 <_dtoa_r+0x600>)
 801a782:	f7e5 ff49 	bl	8000618 <__aeabi_dmul>
 801a786:	e9cd 0100 	strd	r0, r1, [sp]
 801a78a:	e7bc      	b.n	801a706 <_dtoa_r+0x56e>
 801a78c:	080270e0 	.word	0x080270e0
 801a790:	080270b8 	.word	0x080270b8
 801a794:	3ff00000 	.word	0x3ff00000
 801a798:	40240000 	.word	0x40240000
 801a79c:	401c0000 	.word	0x401c0000
 801a7a0:	40140000 	.word	0x40140000
 801a7a4:	3fe00000 	.word	0x3fe00000
 801a7a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a7ac:	465d      	mov	r5, fp
 801a7ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a7b2:	4630      	mov	r0, r6
 801a7b4:	4639      	mov	r1, r7
 801a7b6:	f7e6 f859 	bl	800086c <__aeabi_ddiv>
 801a7ba:	f7e6 f9dd 	bl	8000b78 <__aeabi_d2iz>
 801a7be:	4680      	mov	r8, r0
 801a7c0:	f7e5 fec0 	bl	8000544 <__aeabi_i2d>
 801a7c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a7c8:	f7e5 ff26 	bl	8000618 <__aeabi_dmul>
 801a7cc:	4602      	mov	r2, r0
 801a7ce:	460b      	mov	r3, r1
 801a7d0:	4630      	mov	r0, r6
 801a7d2:	4639      	mov	r1, r7
 801a7d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801a7d8:	f7e5 fd66 	bl	80002a8 <__aeabi_dsub>
 801a7dc:	f805 6b01 	strb.w	r6, [r5], #1
 801a7e0:	eba5 060b 	sub.w	r6, r5, fp
 801a7e4:	45b1      	cmp	r9, r6
 801a7e6:	4602      	mov	r2, r0
 801a7e8:	460b      	mov	r3, r1
 801a7ea:	d139      	bne.n	801a860 <_dtoa_r+0x6c8>
 801a7ec:	f7e5 fd5e 	bl	80002ac <__adddf3>
 801a7f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a7f4:	4606      	mov	r6, r0
 801a7f6:	460f      	mov	r7, r1
 801a7f8:	f7e6 f99e 	bl	8000b38 <__aeabi_dcmpgt>
 801a7fc:	b9c8      	cbnz	r0, 801a832 <_dtoa_r+0x69a>
 801a7fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a802:	4630      	mov	r0, r6
 801a804:	4639      	mov	r1, r7
 801a806:	f7e6 f96f 	bl	8000ae8 <__aeabi_dcmpeq>
 801a80a:	b110      	cbz	r0, 801a812 <_dtoa_r+0x67a>
 801a80c:	f018 0f01 	tst.w	r8, #1
 801a810:	d10f      	bne.n	801a832 <_dtoa_r+0x69a>
 801a812:	9904      	ldr	r1, [sp, #16]
 801a814:	4620      	mov	r0, r4
 801a816:	f000 fc99 	bl	801b14c <_Bfree>
 801a81a:	2300      	movs	r3, #0
 801a81c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a81e:	702b      	strb	r3, [r5, #0]
 801a820:	f10a 0301 	add.w	r3, sl, #1
 801a824:	6013      	str	r3, [r2, #0]
 801a826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a828:	2b00      	cmp	r3, #0
 801a82a:	f000 8241 	beq.w	801acb0 <_dtoa_r+0xb18>
 801a82e:	601d      	str	r5, [r3, #0]
 801a830:	e23e      	b.n	801acb0 <_dtoa_r+0xb18>
 801a832:	f8cd a020 	str.w	sl, [sp, #32]
 801a836:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801a83a:	2a39      	cmp	r2, #57	; 0x39
 801a83c:	f105 33ff 	add.w	r3, r5, #4294967295
 801a840:	d108      	bne.n	801a854 <_dtoa_r+0x6bc>
 801a842:	459b      	cmp	fp, r3
 801a844:	d10a      	bne.n	801a85c <_dtoa_r+0x6c4>
 801a846:	9b08      	ldr	r3, [sp, #32]
 801a848:	3301      	adds	r3, #1
 801a84a:	9308      	str	r3, [sp, #32]
 801a84c:	2330      	movs	r3, #48	; 0x30
 801a84e:	f88b 3000 	strb.w	r3, [fp]
 801a852:	465b      	mov	r3, fp
 801a854:	781a      	ldrb	r2, [r3, #0]
 801a856:	3201      	adds	r2, #1
 801a858:	701a      	strb	r2, [r3, #0]
 801a85a:	e78c      	b.n	801a776 <_dtoa_r+0x5de>
 801a85c:	461d      	mov	r5, r3
 801a85e:	e7ea      	b.n	801a836 <_dtoa_r+0x69e>
 801a860:	2200      	movs	r2, #0
 801a862:	4b9b      	ldr	r3, [pc, #620]	; (801aad0 <_dtoa_r+0x938>)
 801a864:	f7e5 fed8 	bl	8000618 <__aeabi_dmul>
 801a868:	2200      	movs	r2, #0
 801a86a:	2300      	movs	r3, #0
 801a86c:	4606      	mov	r6, r0
 801a86e:	460f      	mov	r7, r1
 801a870:	f7e6 f93a 	bl	8000ae8 <__aeabi_dcmpeq>
 801a874:	2800      	cmp	r0, #0
 801a876:	d09a      	beq.n	801a7ae <_dtoa_r+0x616>
 801a878:	e7cb      	b.n	801a812 <_dtoa_r+0x67a>
 801a87a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a87c:	2a00      	cmp	r2, #0
 801a87e:	f000 808b 	beq.w	801a998 <_dtoa_r+0x800>
 801a882:	9a06      	ldr	r2, [sp, #24]
 801a884:	2a01      	cmp	r2, #1
 801a886:	dc6e      	bgt.n	801a966 <_dtoa_r+0x7ce>
 801a888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a88a:	2a00      	cmp	r2, #0
 801a88c:	d067      	beq.n	801a95e <_dtoa_r+0x7c6>
 801a88e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a892:	9f07      	ldr	r7, [sp, #28]
 801a894:	9d05      	ldr	r5, [sp, #20]
 801a896:	9a05      	ldr	r2, [sp, #20]
 801a898:	2101      	movs	r1, #1
 801a89a:	441a      	add	r2, r3
 801a89c:	4620      	mov	r0, r4
 801a89e:	9205      	str	r2, [sp, #20]
 801a8a0:	4498      	add	r8, r3
 801a8a2:	f000 fcf3 	bl	801b28c <__i2b>
 801a8a6:	4606      	mov	r6, r0
 801a8a8:	2d00      	cmp	r5, #0
 801a8aa:	dd0c      	ble.n	801a8c6 <_dtoa_r+0x72e>
 801a8ac:	f1b8 0f00 	cmp.w	r8, #0
 801a8b0:	dd09      	ble.n	801a8c6 <_dtoa_r+0x72e>
 801a8b2:	4545      	cmp	r5, r8
 801a8b4:	9a05      	ldr	r2, [sp, #20]
 801a8b6:	462b      	mov	r3, r5
 801a8b8:	bfa8      	it	ge
 801a8ba:	4643      	movge	r3, r8
 801a8bc:	1ad2      	subs	r2, r2, r3
 801a8be:	9205      	str	r2, [sp, #20]
 801a8c0:	1aed      	subs	r5, r5, r3
 801a8c2:	eba8 0803 	sub.w	r8, r8, r3
 801a8c6:	9b07      	ldr	r3, [sp, #28]
 801a8c8:	b1eb      	cbz	r3, 801a906 <_dtoa_r+0x76e>
 801a8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d067      	beq.n	801a9a0 <_dtoa_r+0x808>
 801a8d0:	b18f      	cbz	r7, 801a8f6 <_dtoa_r+0x75e>
 801a8d2:	4631      	mov	r1, r6
 801a8d4:	463a      	mov	r2, r7
 801a8d6:	4620      	mov	r0, r4
 801a8d8:	f000 fd78 	bl	801b3cc <__pow5mult>
 801a8dc:	9a04      	ldr	r2, [sp, #16]
 801a8de:	4601      	mov	r1, r0
 801a8e0:	4606      	mov	r6, r0
 801a8e2:	4620      	mov	r0, r4
 801a8e4:	f000 fcdb 	bl	801b29e <__multiply>
 801a8e8:	9904      	ldr	r1, [sp, #16]
 801a8ea:	9008      	str	r0, [sp, #32]
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	f000 fc2d 	bl	801b14c <_Bfree>
 801a8f2:	9b08      	ldr	r3, [sp, #32]
 801a8f4:	9304      	str	r3, [sp, #16]
 801a8f6:	9b07      	ldr	r3, [sp, #28]
 801a8f8:	1bda      	subs	r2, r3, r7
 801a8fa:	d004      	beq.n	801a906 <_dtoa_r+0x76e>
 801a8fc:	9904      	ldr	r1, [sp, #16]
 801a8fe:	4620      	mov	r0, r4
 801a900:	f000 fd64 	bl	801b3cc <__pow5mult>
 801a904:	9004      	str	r0, [sp, #16]
 801a906:	2101      	movs	r1, #1
 801a908:	4620      	mov	r0, r4
 801a90a:	f000 fcbf 	bl	801b28c <__i2b>
 801a90e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a910:	4607      	mov	r7, r0
 801a912:	2b00      	cmp	r3, #0
 801a914:	f000 81d0 	beq.w	801acb8 <_dtoa_r+0xb20>
 801a918:	461a      	mov	r2, r3
 801a91a:	4601      	mov	r1, r0
 801a91c:	4620      	mov	r0, r4
 801a91e:	f000 fd55 	bl	801b3cc <__pow5mult>
 801a922:	9b06      	ldr	r3, [sp, #24]
 801a924:	2b01      	cmp	r3, #1
 801a926:	4607      	mov	r7, r0
 801a928:	dc40      	bgt.n	801a9ac <_dtoa_r+0x814>
 801a92a:	9b00      	ldr	r3, [sp, #0]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d139      	bne.n	801a9a4 <_dtoa_r+0x80c>
 801a930:	9b01      	ldr	r3, [sp, #4]
 801a932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a936:	2b00      	cmp	r3, #0
 801a938:	d136      	bne.n	801a9a8 <_dtoa_r+0x810>
 801a93a:	9b01      	ldr	r3, [sp, #4]
 801a93c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a940:	0d1b      	lsrs	r3, r3, #20
 801a942:	051b      	lsls	r3, r3, #20
 801a944:	b12b      	cbz	r3, 801a952 <_dtoa_r+0x7ba>
 801a946:	9b05      	ldr	r3, [sp, #20]
 801a948:	3301      	adds	r3, #1
 801a94a:	9305      	str	r3, [sp, #20]
 801a94c:	f108 0801 	add.w	r8, r8, #1
 801a950:	2301      	movs	r3, #1
 801a952:	9307      	str	r3, [sp, #28]
 801a954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a956:	2b00      	cmp	r3, #0
 801a958:	d12a      	bne.n	801a9b0 <_dtoa_r+0x818>
 801a95a:	2001      	movs	r0, #1
 801a95c:	e030      	b.n	801a9c0 <_dtoa_r+0x828>
 801a95e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a960:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801a964:	e795      	b.n	801a892 <_dtoa_r+0x6fa>
 801a966:	9b07      	ldr	r3, [sp, #28]
 801a968:	f109 37ff 	add.w	r7, r9, #4294967295
 801a96c:	42bb      	cmp	r3, r7
 801a96e:	bfbf      	itttt	lt
 801a970:	9b07      	ldrlt	r3, [sp, #28]
 801a972:	9707      	strlt	r7, [sp, #28]
 801a974:	1afa      	sublt	r2, r7, r3
 801a976:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801a978:	bfbb      	ittet	lt
 801a97a:	189b      	addlt	r3, r3, r2
 801a97c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a97e:	1bdf      	subge	r7, r3, r7
 801a980:	2700      	movlt	r7, #0
 801a982:	f1b9 0f00 	cmp.w	r9, #0
 801a986:	bfb5      	itete	lt
 801a988:	9b05      	ldrlt	r3, [sp, #20]
 801a98a:	9d05      	ldrge	r5, [sp, #20]
 801a98c:	eba3 0509 	sublt.w	r5, r3, r9
 801a990:	464b      	movge	r3, r9
 801a992:	bfb8      	it	lt
 801a994:	2300      	movlt	r3, #0
 801a996:	e77e      	b.n	801a896 <_dtoa_r+0x6fe>
 801a998:	9f07      	ldr	r7, [sp, #28]
 801a99a:	9d05      	ldr	r5, [sp, #20]
 801a99c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801a99e:	e783      	b.n	801a8a8 <_dtoa_r+0x710>
 801a9a0:	9a07      	ldr	r2, [sp, #28]
 801a9a2:	e7ab      	b.n	801a8fc <_dtoa_r+0x764>
 801a9a4:	2300      	movs	r3, #0
 801a9a6:	e7d4      	b.n	801a952 <_dtoa_r+0x7ba>
 801a9a8:	9b00      	ldr	r3, [sp, #0]
 801a9aa:	e7d2      	b.n	801a952 <_dtoa_r+0x7ba>
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	9307      	str	r3, [sp, #28]
 801a9b0:	693b      	ldr	r3, [r7, #16]
 801a9b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801a9b6:	6918      	ldr	r0, [r3, #16]
 801a9b8:	f000 fc1a 	bl	801b1f0 <__hi0bits>
 801a9bc:	f1c0 0020 	rsb	r0, r0, #32
 801a9c0:	4440      	add	r0, r8
 801a9c2:	f010 001f 	ands.w	r0, r0, #31
 801a9c6:	d047      	beq.n	801aa58 <_dtoa_r+0x8c0>
 801a9c8:	f1c0 0320 	rsb	r3, r0, #32
 801a9cc:	2b04      	cmp	r3, #4
 801a9ce:	dd3b      	ble.n	801aa48 <_dtoa_r+0x8b0>
 801a9d0:	9b05      	ldr	r3, [sp, #20]
 801a9d2:	f1c0 001c 	rsb	r0, r0, #28
 801a9d6:	4403      	add	r3, r0
 801a9d8:	9305      	str	r3, [sp, #20]
 801a9da:	4405      	add	r5, r0
 801a9dc:	4480      	add	r8, r0
 801a9de:	9b05      	ldr	r3, [sp, #20]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	dd05      	ble.n	801a9f0 <_dtoa_r+0x858>
 801a9e4:	461a      	mov	r2, r3
 801a9e6:	9904      	ldr	r1, [sp, #16]
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	f000 fd3d 	bl	801b468 <__lshift>
 801a9ee:	9004      	str	r0, [sp, #16]
 801a9f0:	f1b8 0f00 	cmp.w	r8, #0
 801a9f4:	dd05      	ble.n	801aa02 <_dtoa_r+0x86a>
 801a9f6:	4639      	mov	r1, r7
 801a9f8:	4642      	mov	r2, r8
 801a9fa:	4620      	mov	r0, r4
 801a9fc:	f000 fd34 	bl	801b468 <__lshift>
 801aa00:	4607      	mov	r7, r0
 801aa02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa04:	b353      	cbz	r3, 801aa5c <_dtoa_r+0x8c4>
 801aa06:	4639      	mov	r1, r7
 801aa08:	9804      	ldr	r0, [sp, #16]
 801aa0a:	f000 fd81 	bl	801b510 <__mcmp>
 801aa0e:	2800      	cmp	r0, #0
 801aa10:	da24      	bge.n	801aa5c <_dtoa_r+0x8c4>
 801aa12:	2300      	movs	r3, #0
 801aa14:	220a      	movs	r2, #10
 801aa16:	9904      	ldr	r1, [sp, #16]
 801aa18:	4620      	mov	r0, r4
 801aa1a:	f000 fbae 	bl	801b17a <__multadd>
 801aa1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa20:	9004      	str	r0, [sp, #16]
 801aa22:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	f000 814d 	beq.w	801acc6 <_dtoa_r+0xb2e>
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	4631      	mov	r1, r6
 801aa30:	220a      	movs	r2, #10
 801aa32:	4620      	mov	r0, r4
 801aa34:	f000 fba1 	bl	801b17a <__multadd>
 801aa38:	9b02      	ldr	r3, [sp, #8]
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	4606      	mov	r6, r0
 801aa3e:	dc4f      	bgt.n	801aae0 <_dtoa_r+0x948>
 801aa40:	9b06      	ldr	r3, [sp, #24]
 801aa42:	2b02      	cmp	r3, #2
 801aa44:	dd4c      	ble.n	801aae0 <_dtoa_r+0x948>
 801aa46:	e011      	b.n	801aa6c <_dtoa_r+0x8d4>
 801aa48:	d0c9      	beq.n	801a9de <_dtoa_r+0x846>
 801aa4a:	9a05      	ldr	r2, [sp, #20]
 801aa4c:	331c      	adds	r3, #28
 801aa4e:	441a      	add	r2, r3
 801aa50:	9205      	str	r2, [sp, #20]
 801aa52:	441d      	add	r5, r3
 801aa54:	4498      	add	r8, r3
 801aa56:	e7c2      	b.n	801a9de <_dtoa_r+0x846>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	e7f6      	b.n	801aa4a <_dtoa_r+0x8b2>
 801aa5c:	f1b9 0f00 	cmp.w	r9, #0
 801aa60:	dc38      	bgt.n	801aad4 <_dtoa_r+0x93c>
 801aa62:	9b06      	ldr	r3, [sp, #24]
 801aa64:	2b02      	cmp	r3, #2
 801aa66:	dd35      	ble.n	801aad4 <_dtoa_r+0x93c>
 801aa68:	f8cd 9008 	str.w	r9, [sp, #8]
 801aa6c:	9b02      	ldr	r3, [sp, #8]
 801aa6e:	b963      	cbnz	r3, 801aa8a <_dtoa_r+0x8f2>
 801aa70:	4639      	mov	r1, r7
 801aa72:	2205      	movs	r2, #5
 801aa74:	4620      	mov	r0, r4
 801aa76:	f000 fb80 	bl	801b17a <__multadd>
 801aa7a:	4601      	mov	r1, r0
 801aa7c:	4607      	mov	r7, r0
 801aa7e:	9804      	ldr	r0, [sp, #16]
 801aa80:	f000 fd46 	bl	801b510 <__mcmp>
 801aa84:	2800      	cmp	r0, #0
 801aa86:	f73f adcc 	bgt.w	801a622 <_dtoa_r+0x48a>
 801aa8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa8c:	465d      	mov	r5, fp
 801aa8e:	ea6f 0a03 	mvn.w	sl, r3
 801aa92:	f04f 0900 	mov.w	r9, #0
 801aa96:	4639      	mov	r1, r7
 801aa98:	4620      	mov	r0, r4
 801aa9a:	f000 fb57 	bl	801b14c <_Bfree>
 801aa9e:	2e00      	cmp	r6, #0
 801aaa0:	f43f aeb7 	beq.w	801a812 <_dtoa_r+0x67a>
 801aaa4:	f1b9 0f00 	cmp.w	r9, #0
 801aaa8:	d005      	beq.n	801aab6 <_dtoa_r+0x91e>
 801aaaa:	45b1      	cmp	r9, r6
 801aaac:	d003      	beq.n	801aab6 <_dtoa_r+0x91e>
 801aaae:	4649      	mov	r1, r9
 801aab0:	4620      	mov	r0, r4
 801aab2:	f000 fb4b 	bl	801b14c <_Bfree>
 801aab6:	4631      	mov	r1, r6
 801aab8:	4620      	mov	r0, r4
 801aaba:	f000 fb47 	bl	801b14c <_Bfree>
 801aabe:	e6a8      	b.n	801a812 <_dtoa_r+0x67a>
 801aac0:	2700      	movs	r7, #0
 801aac2:	463e      	mov	r6, r7
 801aac4:	e7e1      	b.n	801aa8a <_dtoa_r+0x8f2>
 801aac6:	f8dd a020 	ldr.w	sl, [sp, #32]
 801aaca:	463e      	mov	r6, r7
 801aacc:	e5a9      	b.n	801a622 <_dtoa_r+0x48a>
 801aace:	bf00      	nop
 801aad0:	40240000 	.word	0x40240000
 801aad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aad6:	f8cd 9008 	str.w	r9, [sp, #8]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	f000 80fa 	beq.w	801acd4 <_dtoa_r+0xb3c>
 801aae0:	2d00      	cmp	r5, #0
 801aae2:	dd05      	ble.n	801aaf0 <_dtoa_r+0x958>
 801aae4:	4631      	mov	r1, r6
 801aae6:	462a      	mov	r2, r5
 801aae8:	4620      	mov	r0, r4
 801aaea:	f000 fcbd 	bl	801b468 <__lshift>
 801aaee:	4606      	mov	r6, r0
 801aaf0:	9b07      	ldr	r3, [sp, #28]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d04c      	beq.n	801ab90 <_dtoa_r+0x9f8>
 801aaf6:	6871      	ldr	r1, [r6, #4]
 801aaf8:	4620      	mov	r0, r4
 801aafa:	f000 faf3 	bl	801b0e4 <_Balloc>
 801aafe:	6932      	ldr	r2, [r6, #16]
 801ab00:	3202      	adds	r2, #2
 801ab02:	4605      	mov	r5, r0
 801ab04:	0092      	lsls	r2, r2, #2
 801ab06:	f106 010c 	add.w	r1, r6, #12
 801ab0a:	300c      	adds	r0, #12
 801ab0c:	f7fe fa5a 	bl	8018fc4 <memcpy>
 801ab10:	2201      	movs	r2, #1
 801ab12:	4629      	mov	r1, r5
 801ab14:	4620      	mov	r0, r4
 801ab16:	f000 fca7 	bl	801b468 <__lshift>
 801ab1a:	9b00      	ldr	r3, [sp, #0]
 801ab1c:	f8cd b014 	str.w	fp, [sp, #20]
 801ab20:	f003 0301 	and.w	r3, r3, #1
 801ab24:	46b1      	mov	r9, r6
 801ab26:	9307      	str	r3, [sp, #28]
 801ab28:	4606      	mov	r6, r0
 801ab2a:	4639      	mov	r1, r7
 801ab2c:	9804      	ldr	r0, [sp, #16]
 801ab2e:	f7ff faa7 	bl	801a080 <quorem>
 801ab32:	4649      	mov	r1, r9
 801ab34:	4605      	mov	r5, r0
 801ab36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801ab3a:	9804      	ldr	r0, [sp, #16]
 801ab3c:	f000 fce8 	bl	801b510 <__mcmp>
 801ab40:	4632      	mov	r2, r6
 801ab42:	9000      	str	r0, [sp, #0]
 801ab44:	4639      	mov	r1, r7
 801ab46:	4620      	mov	r0, r4
 801ab48:	f000 fcfc 	bl	801b544 <__mdiff>
 801ab4c:	68c3      	ldr	r3, [r0, #12]
 801ab4e:	4602      	mov	r2, r0
 801ab50:	bb03      	cbnz	r3, 801ab94 <_dtoa_r+0x9fc>
 801ab52:	4601      	mov	r1, r0
 801ab54:	9008      	str	r0, [sp, #32]
 801ab56:	9804      	ldr	r0, [sp, #16]
 801ab58:	f000 fcda 	bl	801b510 <__mcmp>
 801ab5c:	9a08      	ldr	r2, [sp, #32]
 801ab5e:	4603      	mov	r3, r0
 801ab60:	4611      	mov	r1, r2
 801ab62:	4620      	mov	r0, r4
 801ab64:	9308      	str	r3, [sp, #32]
 801ab66:	f000 faf1 	bl	801b14c <_Bfree>
 801ab6a:	9b08      	ldr	r3, [sp, #32]
 801ab6c:	b9a3      	cbnz	r3, 801ab98 <_dtoa_r+0xa00>
 801ab6e:	9a06      	ldr	r2, [sp, #24]
 801ab70:	b992      	cbnz	r2, 801ab98 <_dtoa_r+0xa00>
 801ab72:	9a07      	ldr	r2, [sp, #28]
 801ab74:	b982      	cbnz	r2, 801ab98 <_dtoa_r+0xa00>
 801ab76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ab7a:	d029      	beq.n	801abd0 <_dtoa_r+0xa38>
 801ab7c:	9b00      	ldr	r3, [sp, #0]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	dd01      	ble.n	801ab86 <_dtoa_r+0x9ee>
 801ab82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801ab86:	9b05      	ldr	r3, [sp, #20]
 801ab88:	1c5d      	adds	r5, r3, #1
 801ab8a:	f883 8000 	strb.w	r8, [r3]
 801ab8e:	e782      	b.n	801aa96 <_dtoa_r+0x8fe>
 801ab90:	4630      	mov	r0, r6
 801ab92:	e7c2      	b.n	801ab1a <_dtoa_r+0x982>
 801ab94:	2301      	movs	r3, #1
 801ab96:	e7e3      	b.n	801ab60 <_dtoa_r+0x9c8>
 801ab98:	9a00      	ldr	r2, [sp, #0]
 801ab9a:	2a00      	cmp	r2, #0
 801ab9c:	db04      	blt.n	801aba8 <_dtoa_r+0xa10>
 801ab9e:	d125      	bne.n	801abec <_dtoa_r+0xa54>
 801aba0:	9a06      	ldr	r2, [sp, #24]
 801aba2:	bb1a      	cbnz	r2, 801abec <_dtoa_r+0xa54>
 801aba4:	9a07      	ldr	r2, [sp, #28]
 801aba6:	bb0a      	cbnz	r2, 801abec <_dtoa_r+0xa54>
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	ddec      	ble.n	801ab86 <_dtoa_r+0x9ee>
 801abac:	2201      	movs	r2, #1
 801abae:	9904      	ldr	r1, [sp, #16]
 801abb0:	4620      	mov	r0, r4
 801abb2:	f000 fc59 	bl	801b468 <__lshift>
 801abb6:	4639      	mov	r1, r7
 801abb8:	9004      	str	r0, [sp, #16]
 801abba:	f000 fca9 	bl	801b510 <__mcmp>
 801abbe:	2800      	cmp	r0, #0
 801abc0:	dc03      	bgt.n	801abca <_dtoa_r+0xa32>
 801abc2:	d1e0      	bne.n	801ab86 <_dtoa_r+0x9ee>
 801abc4:	f018 0f01 	tst.w	r8, #1
 801abc8:	d0dd      	beq.n	801ab86 <_dtoa_r+0x9ee>
 801abca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801abce:	d1d8      	bne.n	801ab82 <_dtoa_r+0x9ea>
 801abd0:	9b05      	ldr	r3, [sp, #20]
 801abd2:	9a05      	ldr	r2, [sp, #20]
 801abd4:	1c5d      	adds	r5, r3, #1
 801abd6:	2339      	movs	r3, #57	; 0x39
 801abd8:	7013      	strb	r3, [r2, #0]
 801abda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801abde:	2b39      	cmp	r3, #57	; 0x39
 801abe0:	f105 32ff 	add.w	r2, r5, #4294967295
 801abe4:	d04f      	beq.n	801ac86 <_dtoa_r+0xaee>
 801abe6:	3301      	adds	r3, #1
 801abe8:	7013      	strb	r3, [r2, #0]
 801abea:	e754      	b.n	801aa96 <_dtoa_r+0x8fe>
 801abec:	9a05      	ldr	r2, [sp, #20]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	f102 0501 	add.w	r5, r2, #1
 801abf4:	dd06      	ble.n	801ac04 <_dtoa_r+0xa6c>
 801abf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801abfa:	d0e9      	beq.n	801abd0 <_dtoa_r+0xa38>
 801abfc:	f108 0801 	add.w	r8, r8, #1
 801ac00:	9b05      	ldr	r3, [sp, #20]
 801ac02:	e7c2      	b.n	801ab8a <_dtoa_r+0x9f2>
 801ac04:	9a02      	ldr	r2, [sp, #8]
 801ac06:	f805 8c01 	strb.w	r8, [r5, #-1]
 801ac0a:	eba5 030b 	sub.w	r3, r5, fp
 801ac0e:	4293      	cmp	r3, r2
 801ac10:	d021      	beq.n	801ac56 <_dtoa_r+0xabe>
 801ac12:	2300      	movs	r3, #0
 801ac14:	220a      	movs	r2, #10
 801ac16:	9904      	ldr	r1, [sp, #16]
 801ac18:	4620      	mov	r0, r4
 801ac1a:	f000 faae 	bl	801b17a <__multadd>
 801ac1e:	45b1      	cmp	r9, r6
 801ac20:	9004      	str	r0, [sp, #16]
 801ac22:	f04f 0300 	mov.w	r3, #0
 801ac26:	f04f 020a 	mov.w	r2, #10
 801ac2a:	4649      	mov	r1, r9
 801ac2c:	4620      	mov	r0, r4
 801ac2e:	d105      	bne.n	801ac3c <_dtoa_r+0xaa4>
 801ac30:	f000 faa3 	bl	801b17a <__multadd>
 801ac34:	4681      	mov	r9, r0
 801ac36:	4606      	mov	r6, r0
 801ac38:	9505      	str	r5, [sp, #20]
 801ac3a:	e776      	b.n	801ab2a <_dtoa_r+0x992>
 801ac3c:	f000 fa9d 	bl	801b17a <__multadd>
 801ac40:	4631      	mov	r1, r6
 801ac42:	4681      	mov	r9, r0
 801ac44:	2300      	movs	r3, #0
 801ac46:	220a      	movs	r2, #10
 801ac48:	4620      	mov	r0, r4
 801ac4a:	f000 fa96 	bl	801b17a <__multadd>
 801ac4e:	4606      	mov	r6, r0
 801ac50:	e7f2      	b.n	801ac38 <_dtoa_r+0xaa0>
 801ac52:	f04f 0900 	mov.w	r9, #0
 801ac56:	2201      	movs	r2, #1
 801ac58:	9904      	ldr	r1, [sp, #16]
 801ac5a:	4620      	mov	r0, r4
 801ac5c:	f000 fc04 	bl	801b468 <__lshift>
 801ac60:	4639      	mov	r1, r7
 801ac62:	9004      	str	r0, [sp, #16]
 801ac64:	f000 fc54 	bl	801b510 <__mcmp>
 801ac68:	2800      	cmp	r0, #0
 801ac6a:	dcb6      	bgt.n	801abda <_dtoa_r+0xa42>
 801ac6c:	d102      	bne.n	801ac74 <_dtoa_r+0xadc>
 801ac6e:	f018 0f01 	tst.w	r8, #1
 801ac72:	d1b2      	bne.n	801abda <_dtoa_r+0xa42>
 801ac74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ac78:	2b30      	cmp	r3, #48	; 0x30
 801ac7a:	f105 32ff 	add.w	r2, r5, #4294967295
 801ac7e:	f47f af0a 	bne.w	801aa96 <_dtoa_r+0x8fe>
 801ac82:	4615      	mov	r5, r2
 801ac84:	e7f6      	b.n	801ac74 <_dtoa_r+0xadc>
 801ac86:	4593      	cmp	fp, r2
 801ac88:	d105      	bne.n	801ac96 <_dtoa_r+0xafe>
 801ac8a:	2331      	movs	r3, #49	; 0x31
 801ac8c:	f10a 0a01 	add.w	sl, sl, #1
 801ac90:	f88b 3000 	strb.w	r3, [fp]
 801ac94:	e6ff      	b.n	801aa96 <_dtoa_r+0x8fe>
 801ac96:	4615      	mov	r5, r2
 801ac98:	e79f      	b.n	801abda <_dtoa_r+0xa42>
 801ac9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801ad00 <_dtoa_r+0xb68>
 801ac9e:	e007      	b.n	801acb0 <_dtoa_r+0xb18>
 801aca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aca2:	f8df b060 	ldr.w	fp, [pc, #96]	; 801ad04 <_dtoa_r+0xb6c>
 801aca6:	b11b      	cbz	r3, 801acb0 <_dtoa_r+0xb18>
 801aca8:	f10b 0308 	add.w	r3, fp, #8
 801acac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801acae:	6013      	str	r3, [r2, #0]
 801acb0:	4658      	mov	r0, fp
 801acb2:	b017      	add	sp, #92	; 0x5c
 801acb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acb8:	9b06      	ldr	r3, [sp, #24]
 801acba:	2b01      	cmp	r3, #1
 801acbc:	f77f ae35 	ble.w	801a92a <_dtoa_r+0x792>
 801acc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801acc2:	9307      	str	r3, [sp, #28]
 801acc4:	e649      	b.n	801a95a <_dtoa_r+0x7c2>
 801acc6:	9b02      	ldr	r3, [sp, #8]
 801acc8:	2b00      	cmp	r3, #0
 801acca:	dc03      	bgt.n	801acd4 <_dtoa_r+0xb3c>
 801accc:	9b06      	ldr	r3, [sp, #24]
 801acce:	2b02      	cmp	r3, #2
 801acd0:	f73f aecc 	bgt.w	801aa6c <_dtoa_r+0x8d4>
 801acd4:	465d      	mov	r5, fp
 801acd6:	4639      	mov	r1, r7
 801acd8:	9804      	ldr	r0, [sp, #16]
 801acda:	f7ff f9d1 	bl	801a080 <quorem>
 801acde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801ace2:	f805 8b01 	strb.w	r8, [r5], #1
 801ace6:	9a02      	ldr	r2, [sp, #8]
 801ace8:	eba5 030b 	sub.w	r3, r5, fp
 801acec:	429a      	cmp	r2, r3
 801acee:	ddb0      	ble.n	801ac52 <_dtoa_r+0xaba>
 801acf0:	2300      	movs	r3, #0
 801acf2:	220a      	movs	r2, #10
 801acf4:	9904      	ldr	r1, [sp, #16]
 801acf6:	4620      	mov	r0, r4
 801acf8:	f000 fa3f 	bl	801b17a <__multadd>
 801acfc:	9004      	str	r0, [sp, #16]
 801acfe:	e7ea      	b.n	801acd6 <_dtoa_r+0xb3e>
 801ad00:	08027021 	.word	0x08027021
 801ad04:	08027045 	.word	0x08027045

0801ad08 <__sflush_r>:
 801ad08:	898a      	ldrh	r2, [r1, #12]
 801ad0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad0e:	4605      	mov	r5, r0
 801ad10:	0710      	lsls	r0, r2, #28
 801ad12:	460c      	mov	r4, r1
 801ad14:	d458      	bmi.n	801adc8 <__sflush_r+0xc0>
 801ad16:	684b      	ldr	r3, [r1, #4]
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	dc05      	bgt.n	801ad28 <__sflush_r+0x20>
 801ad1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	dc02      	bgt.n	801ad28 <__sflush_r+0x20>
 801ad22:	2000      	movs	r0, #0
 801ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ad2a:	2e00      	cmp	r6, #0
 801ad2c:	d0f9      	beq.n	801ad22 <__sflush_r+0x1a>
 801ad2e:	2300      	movs	r3, #0
 801ad30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ad34:	682f      	ldr	r7, [r5, #0]
 801ad36:	6a21      	ldr	r1, [r4, #32]
 801ad38:	602b      	str	r3, [r5, #0]
 801ad3a:	d032      	beq.n	801ada2 <__sflush_r+0x9a>
 801ad3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ad3e:	89a3      	ldrh	r3, [r4, #12]
 801ad40:	075a      	lsls	r2, r3, #29
 801ad42:	d505      	bpl.n	801ad50 <__sflush_r+0x48>
 801ad44:	6863      	ldr	r3, [r4, #4]
 801ad46:	1ac0      	subs	r0, r0, r3
 801ad48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ad4a:	b10b      	cbz	r3, 801ad50 <__sflush_r+0x48>
 801ad4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ad4e:	1ac0      	subs	r0, r0, r3
 801ad50:	2300      	movs	r3, #0
 801ad52:	4602      	mov	r2, r0
 801ad54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ad56:	6a21      	ldr	r1, [r4, #32]
 801ad58:	4628      	mov	r0, r5
 801ad5a:	47b0      	blx	r6
 801ad5c:	1c43      	adds	r3, r0, #1
 801ad5e:	89a3      	ldrh	r3, [r4, #12]
 801ad60:	d106      	bne.n	801ad70 <__sflush_r+0x68>
 801ad62:	6829      	ldr	r1, [r5, #0]
 801ad64:	291d      	cmp	r1, #29
 801ad66:	d848      	bhi.n	801adfa <__sflush_r+0xf2>
 801ad68:	4a29      	ldr	r2, [pc, #164]	; (801ae10 <__sflush_r+0x108>)
 801ad6a:	40ca      	lsrs	r2, r1
 801ad6c:	07d6      	lsls	r6, r2, #31
 801ad6e:	d544      	bpl.n	801adfa <__sflush_r+0xf2>
 801ad70:	2200      	movs	r2, #0
 801ad72:	6062      	str	r2, [r4, #4]
 801ad74:	04d9      	lsls	r1, r3, #19
 801ad76:	6922      	ldr	r2, [r4, #16]
 801ad78:	6022      	str	r2, [r4, #0]
 801ad7a:	d504      	bpl.n	801ad86 <__sflush_r+0x7e>
 801ad7c:	1c42      	adds	r2, r0, #1
 801ad7e:	d101      	bne.n	801ad84 <__sflush_r+0x7c>
 801ad80:	682b      	ldr	r3, [r5, #0]
 801ad82:	b903      	cbnz	r3, 801ad86 <__sflush_r+0x7e>
 801ad84:	6560      	str	r0, [r4, #84]	; 0x54
 801ad86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ad88:	602f      	str	r7, [r5, #0]
 801ad8a:	2900      	cmp	r1, #0
 801ad8c:	d0c9      	beq.n	801ad22 <__sflush_r+0x1a>
 801ad8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ad92:	4299      	cmp	r1, r3
 801ad94:	d002      	beq.n	801ad9c <__sflush_r+0x94>
 801ad96:	4628      	mov	r0, r5
 801ad98:	f7fe f94e 	bl	8019038 <_free_r>
 801ad9c:	2000      	movs	r0, #0
 801ad9e:	6360      	str	r0, [r4, #52]	; 0x34
 801ada0:	e7c0      	b.n	801ad24 <__sflush_r+0x1c>
 801ada2:	2301      	movs	r3, #1
 801ada4:	4628      	mov	r0, r5
 801ada6:	47b0      	blx	r6
 801ada8:	1c41      	adds	r1, r0, #1
 801adaa:	d1c8      	bne.n	801ad3e <__sflush_r+0x36>
 801adac:	682b      	ldr	r3, [r5, #0]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d0c5      	beq.n	801ad3e <__sflush_r+0x36>
 801adb2:	2b1d      	cmp	r3, #29
 801adb4:	d001      	beq.n	801adba <__sflush_r+0xb2>
 801adb6:	2b16      	cmp	r3, #22
 801adb8:	d101      	bne.n	801adbe <__sflush_r+0xb6>
 801adba:	602f      	str	r7, [r5, #0]
 801adbc:	e7b1      	b.n	801ad22 <__sflush_r+0x1a>
 801adbe:	89a3      	ldrh	r3, [r4, #12]
 801adc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801adc4:	81a3      	strh	r3, [r4, #12]
 801adc6:	e7ad      	b.n	801ad24 <__sflush_r+0x1c>
 801adc8:	690f      	ldr	r7, [r1, #16]
 801adca:	2f00      	cmp	r7, #0
 801adcc:	d0a9      	beq.n	801ad22 <__sflush_r+0x1a>
 801adce:	0793      	lsls	r3, r2, #30
 801add0:	680e      	ldr	r6, [r1, #0]
 801add2:	bf08      	it	eq
 801add4:	694b      	ldreq	r3, [r1, #20]
 801add6:	600f      	str	r7, [r1, #0]
 801add8:	bf18      	it	ne
 801adda:	2300      	movne	r3, #0
 801addc:	eba6 0807 	sub.w	r8, r6, r7
 801ade0:	608b      	str	r3, [r1, #8]
 801ade2:	f1b8 0f00 	cmp.w	r8, #0
 801ade6:	dd9c      	ble.n	801ad22 <__sflush_r+0x1a>
 801ade8:	4643      	mov	r3, r8
 801adea:	463a      	mov	r2, r7
 801adec:	6a21      	ldr	r1, [r4, #32]
 801adee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801adf0:	4628      	mov	r0, r5
 801adf2:	47b0      	blx	r6
 801adf4:	2800      	cmp	r0, #0
 801adf6:	dc06      	bgt.n	801ae06 <__sflush_r+0xfe>
 801adf8:	89a3      	ldrh	r3, [r4, #12]
 801adfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801adfe:	81a3      	strh	r3, [r4, #12]
 801ae00:	f04f 30ff 	mov.w	r0, #4294967295
 801ae04:	e78e      	b.n	801ad24 <__sflush_r+0x1c>
 801ae06:	4407      	add	r7, r0
 801ae08:	eba8 0800 	sub.w	r8, r8, r0
 801ae0c:	e7e9      	b.n	801ade2 <__sflush_r+0xda>
 801ae0e:	bf00      	nop
 801ae10:	20400001 	.word	0x20400001

0801ae14 <_fflush_r>:
 801ae14:	b538      	push	{r3, r4, r5, lr}
 801ae16:	690b      	ldr	r3, [r1, #16]
 801ae18:	4605      	mov	r5, r0
 801ae1a:	460c      	mov	r4, r1
 801ae1c:	b1db      	cbz	r3, 801ae56 <_fflush_r+0x42>
 801ae1e:	b118      	cbz	r0, 801ae28 <_fflush_r+0x14>
 801ae20:	6983      	ldr	r3, [r0, #24]
 801ae22:	b90b      	cbnz	r3, 801ae28 <_fflush_r+0x14>
 801ae24:	f000 f860 	bl	801aee8 <__sinit>
 801ae28:	4b0c      	ldr	r3, [pc, #48]	; (801ae5c <_fflush_r+0x48>)
 801ae2a:	429c      	cmp	r4, r3
 801ae2c:	d109      	bne.n	801ae42 <_fflush_r+0x2e>
 801ae2e:	686c      	ldr	r4, [r5, #4]
 801ae30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae34:	b17b      	cbz	r3, 801ae56 <_fflush_r+0x42>
 801ae36:	4621      	mov	r1, r4
 801ae38:	4628      	mov	r0, r5
 801ae3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae3e:	f7ff bf63 	b.w	801ad08 <__sflush_r>
 801ae42:	4b07      	ldr	r3, [pc, #28]	; (801ae60 <_fflush_r+0x4c>)
 801ae44:	429c      	cmp	r4, r3
 801ae46:	d101      	bne.n	801ae4c <_fflush_r+0x38>
 801ae48:	68ac      	ldr	r4, [r5, #8]
 801ae4a:	e7f1      	b.n	801ae30 <_fflush_r+0x1c>
 801ae4c:	4b05      	ldr	r3, [pc, #20]	; (801ae64 <_fflush_r+0x50>)
 801ae4e:	429c      	cmp	r4, r3
 801ae50:	bf08      	it	eq
 801ae52:	68ec      	ldreq	r4, [r5, #12]
 801ae54:	e7ec      	b.n	801ae30 <_fflush_r+0x1c>
 801ae56:	2000      	movs	r0, #0
 801ae58:	bd38      	pop	{r3, r4, r5, pc}
 801ae5a:	bf00      	nop
 801ae5c:	08027074 	.word	0x08027074
 801ae60:	08027094 	.word	0x08027094
 801ae64:	08027054 	.word	0x08027054

0801ae68 <std>:
 801ae68:	2300      	movs	r3, #0
 801ae6a:	b510      	push	{r4, lr}
 801ae6c:	4604      	mov	r4, r0
 801ae6e:	e9c0 3300 	strd	r3, r3, [r0]
 801ae72:	6083      	str	r3, [r0, #8]
 801ae74:	8181      	strh	r1, [r0, #12]
 801ae76:	6643      	str	r3, [r0, #100]	; 0x64
 801ae78:	81c2      	strh	r2, [r0, #14]
 801ae7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae7e:	6183      	str	r3, [r0, #24]
 801ae80:	4619      	mov	r1, r3
 801ae82:	2208      	movs	r2, #8
 801ae84:	305c      	adds	r0, #92	; 0x5c
 801ae86:	f7fe f8c1 	bl	801900c <memset>
 801ae8a:	4b05      	ldr	r3, [pc, #20]	; (801aea0 <std+0x38>)
 801ae8c:	6263      	str	r3, [r4, #36]	; 0x24
 801ae8e:	4b05      	ldr	r3, [pc, #20]	; (801aea4 <std+0x3c>)
 801ae90:	62a3      	str	r3, [r4, #40]	; 0x28
 801ae92:	4b05      	ldr	r3, [pc, #20]	; (801aea8 <std+0x40>)
 801ae94:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ae96:	4b05      	ldr	r3, [pc, #20]	; (801aeac <std+0x44>)
 801ae98:	6224      	str	r4, [r4, #32]
 801ae9a:	6323      	str	r3, [r4, #48]	; 0x30
 801ae9c:	bd10      	pop	{r4, pc}
 801ae9e:	bf00      	nop
 801aea0:	0801b98d 	.word	0x0801b98d
 801aea4:	0801b9af 	.word	0x0801b9af
 801aea8:	0801b9e7 	.word	0x0801b9e7
 801aeac:	0801ba0b 	.word	0x0801ba0b

0801aeb0 <_cleanup_r>:
 801aeb0:	4901      	ldr	r1, [pc, #4]	; (801aeb8 <_cleanup_r+0x8>)
 801aeb2:	f000 b885 	b.w	801afc0 <_fwalk_reent>
 801aeb6:	bf00      	nop
 801aeb8:	0801ae15 	.word	0x0801ae15

0801aebc <__sfmoreglue>:
 801aebc:	b570      	push	{r4, r5, r6, lr}
 801aebe:	1e4a      	subs	r2, r1, #1
 801aec0:	2568      	movs	r5, #104	; 0x68
 801aec2:	4355      	muls	r5, r2
 801aec4:	460e      	mov	r6, r1
 801aec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aeca:	f7fe f903 	bl	80190d4 <_malloc_r>
 801aece:	4604      	mov	r4, r0
 801aed0:	b140      	cbz	r0, 801aee4 <__sfmoreglue+0x28>
 801aed2:	2100      	movs	r1, #0
 801aed4:	e9c0 1600 	strd	r1, r6, [r0]
 801aed8:	300c      	adds	r0, #12
 801aeda:	60a0      	str	r0, [r4, #8]
 801aedc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aee0:	f7fe f894 	bl	801900c <memset>
 801aee4:	4620      	mov	r0, r4
 801aee6:	bd70      	pop	{r4, r5, r6, pc}

0801aee8 <__sinit>:
 801aee8:	6983      	ldr	r3, [r0, #24]
 801aeea:	b510      	push	{r4, lr}
 801aeec:	4604      	mov	r4, r0
 801aeee:	bb33      	cbnz	r3, 801af3e <__sinit+0x56>
 801aef0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801aef4:	6503      	str	r3, [r0, #80]	; 0x50
 801aef6:	4b12      	ldr	r3, [pc, #72]	; (801af40 <__sinit+0x58>)
 801aef8:	4a12      	ldr	r2, [pc, #72]	; (801af44 <__sinit+0x5c>)
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	6282      	str	r2, [r0, #40]	; 0x28
 801aefe:	4298      	cmp	r0, r3
 801af00:	bf04      	itt	eq
 801af02:	2301      	moveq	r3, #1
 801af04:	6183      	streq	r3, [r0, #24]
 801af06:	f000 f81f 	bl	801af48 <__sfp>
 801af0a:	6060      	str	r0, [r4, #4]
 801af0c:	4620      	mov	r0, r4
 801af0e:	f000 f81b 	bl	801af48 <__sfp>
 801af12:	60a0      	str	r0, [r4, #8]
 801af14:	4620      	mov	r0, r4
 801af16:	f000 f817 	bl	801af48 <__sfp>
 801af1a:	2200      	movs	r2, #0
 801af1c:	60e0      	str	r0, [r4, #12]
 801af1e:	2104      	movs	r1, #4
 801af20:	6860      	ldr	r0, [r4, #4]
 801af22:	f7ff ffa1 	bl	801ae68 <std>
 801af26:	2201      	movs	r2, #1
 801af28:	2109      	movs	r1, #9
 801af2a:	68a0      	ldr	r0, [r4, #8]
 801af2c:	f7ff ff9c 	bl	801ae68 <std>
 801af30:	2202      	movs	r2, #2
 801af32:	2112      	movs	r1, #18
 801af34:	68e0      	ldr	r0, [r4, #12]
 801af36:	f7ff ff97 	bl	801ae68 <std>
 801af3a:	2301      	movs	r3, #1
 801af3c:	61a3      	str	r3, [r4, #24]
 801af3e:	bd10      	pop	{r4, pc}
 801af40:	08026ffc 	.word	0x08026ffc
 801af44:	0801aeb1 	.word	0x0801aeb1

0801af48 <__sfp>:
 801af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af4a:	4b1b      	ldr	r3, [pc, #108]	; (801afb8 <__sfp+0x70>)
 801af4c:	681e      	ldr	r6, [r3, #0]
 801af4e:	69b3      	ldr	r3, [r6, #24]
 801af50:	4607      	mov	r7, r0
 801af52:	b913      	cbnz	r3, 801af5a <__sfp+0x12>
 801af54:	4630      	mov	r0, r6
 801af56:	f7ff ffc7 	bl	801aee8 <__sinit>
 801af5a:	3648      	adds	r6, #72	; 0x48
 801af5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801af60:	3b01      	subs	r3, #1
 801af62:	d503      	bpl.n	801af6c <__sfp+0x24>
 801af64:	6833      	ldr	r3, [r6, #0]
 801af66:	b133      	cbz	r3, 801af76 <__sfp+0x2e>
 801af68:	6836      	ldr	r6, [r6, #0]
 801af6a:	e7f7      	b.n	801af5c <__sfp+0x14>
 801af6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801af70:	b16d      	cbz	r5, 801af8e <__sfp+0x46>
 801af72:	3468      	adds	r4, #104	; 0x68
 801af74:	e7f4      	b.n	801af60 <__sfp+0x18>
 801af76:	2104      	movs	r1, #4
 801af78:	4638      	mov	r0, r7
 801af7a:	f7ff ff9f 	bl	801aebc <__sfmoreglue>
 801af7e:	6030      	str	r0, [r6, #0]
 801af80:	2800      	cmp	r0, #0
 801af82:	d1f1      	bne.n	801af68 <__sfp+0x20>
 801af84:	230c      	movs	r3, #12
 801af86:	603b      	str	r3, [r7, #0]
 801af88:	4604      	mov	r4, r0
 801af8a:	4620      	mov	r0, r4
 801af8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af8e:	4b0b      	ldr	r3, [pc, #44]	; (801afbc <__sfp+0x74>)
 801af90:	6665      	str	r5, [r4, #100]	; 0x64
 801af92:	e9c4 5500 	strd	r5, r5, [r4]
 801af96:	60a5      	str	r5, [r4, #8]
 801af98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801af9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801afa0:	2208      	movs	r2, #8
 801afa2:	4629      	mov	r1, r5
 801afa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801afa8:	f7fe f830 	bl	801900c <memset>
 801afac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801afb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801afb4:	e7e9      	b.n	801af8a <__sfp+0x42>
 801afb6:	bf00      	nop
 801afb8:	08026ffc 	.word	0x08026ffc
 801afbc:	ffff0001 	.word	0xffff0001

0801afc0 <_fwalk_reent>:
 801afc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afc4:	4680      	mov	r8, r0
 801afc6:	4689      	mov	r9, r1
 801afc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801afcc:	2600      	movs	r6, #0
 801afce:	b914      	cbnz	r4, 801afd6 <_fwalk_reent+0x16>
 801afd0:	4630      	mov	r0, r6
 801afd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801afd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801afda:	3f01      	subs	r7, #1
 801afdc:	d501      	bpl.n	801afe2 <_fwalk_reent+0x22>
 801afde:	6824      	ldr	r4, [r4, #0]
 801afe0:	e7f5      	b.n	801afce <_fwalk_reent+0xe>
 801afe2:	89ab      	ldrh	r3, [r5, #12]
 801afe4:	2b01      	cmp	r3, #1
 801afe6:	d907      	bls.n	801aff8 <_fwalk_reent+0x38>
 801afe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801afec:	3301      	adds	r3, #1
 801afee:	d003      	beq.n	801aff8 <_fwalk_reent+0x38>
 801aff0:	4629      	mov	r1, r5
 801aff2:	4640      	mov	r0, r8
 801aff4:	47c8      	blx	r9
 801aff6:	4306      	orrs	r6, r0
 801aff8:	3568      	adds	r5, #104	; 0x68
 801affa:	e7ee      	b.n	801afda <_fwalk_reent+0x1a>

0801affc <_localeconv_r>:
 801affc:	4b04      	ldr	r3, [pc, #16]	; (801b010 <_localeconv_r+0x14>)
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	6a18      	ldr	r0, [r3, #32]
 801b002:	4b04      	ldr	r3, [pc, #16]	; (801b014 <_localeconv_r+0x18>)
 801b004:	2800      	cmp	r0, #0
 801b006:	bf08      	it	eq
 801b008:	4618      	moveq	r0, r3
 801b00a:	30f0      	adds	r0, #240	; 0xf0
 801b00c:	4770      	bx	lr
 801b00e:	bf00      	nop
 801b010:	20000018 	.word	0x20000018
 801b014:	2000007c 	.word	0x2000007c

0801b018 <__swhatbuf_r>:
 801b018:	b570      	push	{r4, r5, r6, lr}
 801b01a:	460e      	mov	r6, r1
 801b01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b020:	2900      	cmp	r1, #0
 801b022:	b096      	sub	sp, #88	; 0x58
 801b024:	4614      	mov	r4, r2
 801b026:	461d      	mov	r5, r3
 801b028:	da07      	bge.n	801b03a <__swhatbuf_r+0x22>
 801b02a:	2300      	movs	r3, #0
 801b02c:	602b      	str	r3, [r5, #0]
 801b02e:	89b3      	ldrh	r3, [r6, #12]
 801b030:	061a      	lsls	r2, r3, #24
 801b032:	d410      	bmi.n	801b056 <__swhatbuf_r+0x3e>
 801b034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b038:	e00e      	b.n	801b058 <__swhatbuf_r+0x40>
 801b03a:	466a      	mov	r2, sp
 801b03c:	f000 fd0c 	bl	801ba58 <_fstat_r>
 801b040:	2800      	cmp	r0, #0
 801b042:	dbf2      	blt.n	801b02a <__swhatbuf_r+0x12>
 801b044:	9a01      	ldr	r2, [sp, #4]
 801b046:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b04a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b04e:	425a      	negs	r2, r3
 801b050:	415a      	adcs	r2, r3
 801b052:	602a      	str	r2, [r5, #0]
 801b054:	e7ee      	b.n	801b034 <__swhatbuf_r+0x1c>
 801b056:	2340      	movs	r3, #64	; 0x40
 801b058:	2000      	movs	r0, #0
 801b05a:	6023      	str	r3, [r4, #0]
 801b05c:	b016      	add	sp, #88	; 0x58
 801b05e:	bd70      	pop	{r4, r5, r6, pc}

0801b060 <__smakebuf_r>:
 801b060:	898b      	ldrh	r3, [r1, #12]
 801b062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b064:	079d      	lsls	r5, r3, #30
 801b066:	4606      	mov	r6, r0
 801b068:	460c      	mov	r4, r1
 801b06a:	d507      	bpl.n	801b07c <__smakebuf_r+0x1c>
 801b06c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b070:	6023      	str	r3, [r4, #0]
 801b072:	6123      	str	r3, [r4, #16]
 801b074:	2301      	movs	r3, #1
 801b076:	6163      	str	r3, [r4, #20]
 801b078:	b002      	add	sp, #8
 801b07a:	bd70      	pop	{r4, r5, r6, pc}
 801b07c:	ab01      	add	r3, sp, #4
 801b07e:	466a      	mov	r2, sp
 801b080:	f7ff ffca 	bl	801b018 <__swhatbuf_r>
 801b084:	9900      	ldr	r1, [sp, #0]
 801b086:	4605      	mov	r5, r0
 801b088:	4630      	mov	r0, r6
 801b08a:	f7fe f823 	bl	80190d4 <_malloc_r>
 801b08e:	b948      	cbnz	r0, 801b0a4 <__smakebuf_r+0x44>
 801b090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b094:	059a      	lsls	r2, r3, #22
 801b096:	d4ef      	bmi.n	801b078 <__smakebuf_r+0x18>
 801b098:	f023 0303 	bic.w	r3, r3, #3
 801b09c:	f043 0302 	orr.w	r3, r3, #2
 801b0a0:	81a3      	strh	r3, [r4, #12]
 801b0a2:	e7e3      	b.n	801b06c <__smakebuf_r+0xc>
 801b0a4:	4b0d      	ldr	r3, [pc, #52]	; (801b0dc <__smakebuf_r+0x7c>)
 801b0a6:	62b3      	str	r3, [r6, #40]	; 0x28
 801b0a8:	89a3      	ldrh	r3, [r4, #12]
 801b0aa:	6020      	str	r0, [r4, #0]
 801b0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b0b0:	81a3      	strh	r3, [r4, #12]
 801b0b2:	9b00      	ldr	r3, [sp, #0]
 801b0b4:	6163      	str	r3, [r4, #20]
 801b0b6:	9b01      	ldr	r3, [sp, #4]
 801b0b8:	6120      	str	r0, [r4, #16]
 801b0ba:	b15b      	cbz	r3, 801b0d4 <__smakebuf_r+0x74>
 801b0bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b0c0:	4630      	mov	r0, r6
 801b0c2:	f000 fcdb 	bl	801ba7c <_isatty_r>
 801b0c6:	b128      	cbz	r0, 801b0d4 <__smakebuf_r+0x74>
 801b0c8:	89a3      	ldrh	r3, [r4, #12]
 801b0ca:	f023 0303 	bic.w	r3, r3, #3
 801b0ce:	f043 0301 	orr.w	r3, r3, #1
 801b0d2:	81a3      	strh	r3, [r4, #12]
 801b0d4:	89a3      	ldrh	r3, [r4, #12]
 801b0d6:	431d      	orrs	r5, r3
 801b0d8:	81a5      	strh	r5, [r4, #12]
 801b0da:	e7cd      	b.n	801b078 <__smakebuf_r+0x18>
 801b0dc:	0801aeb1 	.word	0x0801aeb1

0801b0e0 <__malloc_lock>:
 801b0e0:	4770      	bx	lr

0801b0e2 <__malloc_unlock>:
 801b0e2:	4770      	bx	lr

0801b0e4 <_Balloc>:
 801b0e4:	b570      	push	{r4, r5, r6, lr}
 801b0e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b0e8:	4604      	mov	r4, r0
 801b0ea:	460e      	mov	r6, r1
 801b0ec:	b93d      	cbnz	r5, 801b0fe <_Balloc+0x1a>
 801b0ee:	2010      	movs	r0, #16
 801b0f0:	f7fd ff58 	bl	8018fa4 <malloc>
 801b0f4:	6260      	str	r0, [r4, #36]	; 0x24
 801b0f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b0fa:	6005      	str	r5, [r0, #0]
 801b0fc:	60c5      	str	r5, [r0, #12]
 801b0fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801b100:	68eb      	ldr	r3, [r5, #12]
 801b102:	b183      	cbz	r3, 801b126 <_Balloc+0x42>
 801b104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b106:	68db      	ldr	r3, [r3, #12]
 801b108:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801b10c:	b9b8      	cbnz	r0, 801b13e <_Balloc+0x5a>
 801b10e:	2101      	movs	r1, #1
 801b110:	fa01 f506 	lsl.w	r5, r1, r6
 801b114:	1d6a      	adds	r2, r5, #5
 801b116:	0092      	lsls	r2, r2, #2
 801b118:	4620      	mov	r0, r4
 801b11a:	f7fd ff7f 	bl	801901c <_calloc_r>
 801b11e:	b160      	cbz	r0, 801b13a <_Balloc+0x56>
 801b120:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801b124:	e00e      	b.n	801b144 <_Balloc+0x60>
 801b126:	2221      	movs	r2, #33	; 0x21
 801b128:	2104      	movs	r1, #4
 801b12a:	4620      	mov	r0, r4
 801b12c:	f7fd ff76 	bl	801901c <_calloc_r>
 801b130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b132:	60e8      	str	r0, [r5, #12]
 801b134:	68db      	ldr	r3, [r3, #12]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d1e4      	bne.n	801b104 <_Balloc+0x20>
 801b13a:	2000      	movs	r0, #0
 801b13c:	bd70      	pop	{r4, r5, r6, pc}
 801b13e:	6802      	ldr	r2, [r0, #0]
 801b140:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801b144:	2300      	movs	r3, #0
 801b146:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b14a:	e7f7      	b.n	801b13c <_Balloc+0x58>

0801b14c <_Bfree>:
 801b14c:	b570      	push	{r4, r5, r6, lr}
 801b14e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801b150:	4606      	mov	r6, r0
 801b152:	460d      	mov	r5, r1
 801b154:	b93c      	cbnz	r4, 801b166 <_Bfree+0x1a>
 801b156:	2010      	movs	r0, #16
 801b158:	f7fd ff24 	bl	8018fa4 <malloc>
 801b15c:	6270      	str	r0, [r6, #36]	; 0x24
 801b15e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b162:	6004      	str	r4, [r0, #0]
 801b164:	60c4      	str	r4, [r0, #12]
 801b166:	b13d      	cbz	r5, 801b178 <_Bfree+0x2c>
 801b168:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b16a:	686a      	ldr	r2, [r5, #4]
 801b16c:	68db      	ldr	r3, [r3, #12]
 801b16e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b172:	6029      	str	r1, [r5, #0]
 801b174:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801b178:	bd70      	pop	{r4, r5, r6, pc}

0801b17a <__multadd>:
 801b17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b17e:	690d      	ldr	r5, [r1, #16]
 801b180:	461f      	mov	r7, r3
 801b182:	4606      	mov	r6, r0
 801b184:	460c      	mov	r4, r1
 801b186:	f101 0c14 	add.w	ip, r1, #20
 801b18a:	2300      	movs	r3, #0
 801b18c:	f8dc 0000 	ldr.w	r0, [ip]
 801b190:	b281      	uxth	r1, r0
 801b192:	fb02 7101 	mla	r1, r2, r1, r7
 801b196:	0c0f      	lsrs	r7, r1, #16
 801b198:	0c00      	lsrs	r0, r0, #16
 801b19a:	fb02 7000 	mla	r0, r2, r0, r7
 801b19e:	b289      	uxth	r1, r1
 801b1a0:	3301      	adds	r3, #1
 801b1a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801b1a6:	429d      	cmp	r5, r3
 801b1a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801b1ac:	f84c 1b04 	str.w	r1, [ip], #4
 801b1b0:	dcec      	bgt.n	801b18c <__multadd+0x12>
 801b1b2:	b1d7      	cbz	r7, 801b1ea <__multadd+0x70>
 801b1b4:	68a3      	ldr	r3, [r4, #8]
 801b1b6:	42ab      	cmp	r3, r5
 801b1b8:	dc12      	bgt.n	801b1e0 <__multadd+0x66>
 801b1ba:	6861      	ldr	r1, [r4, #4]
 801b1bc:	4630      	mov	r0, r6
 801b1be:	3101      	adds	r1, #1
 801b1c0:	f7ff ff90 	bl	801b0e4 <_Balloc>
 801b1c4:	6922      	ldr	r2, [r4, #16]
 801b1c6:	3202      	adds	r2, #2
 801b1c8:	f104 010c 	add.w	r1, r4, #12
 801b1cc:	4680      	mov	r8, r0
 801b1ce:	0092      	lsls	r2, r2, #2
 801b1d0:	300c      	adds	r0, #12
 801b1d2:	f7fd fef7 	bl	8018fc4 <memcpy>
 801b1d6:	4621      	mov	r1, r4
 801b1d8:	4630      	mov	r0, r6
 801b1da:	f7ff ffb7 	bl	801b14c <_Bfree>
 801b1de:	4644      	mov	r4, r8
 801b1e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b1e4:	3501      	adds	r5, #1
 801b1e6:	615f      	str	r7, [r3, #20]
 801b1e8:	6125      	str	r5, [r4, #16]
 801b1ea:	4620      	mov	r0, r4
 801b1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b1f0 <__hi0bits>:
 801b1f0:	0c02      	lsrs	r2, r0, #16
 801b1f2:	0412      	lsls	r2, r2, #16
 801b1f4:	4603      	mov	r3, r0
 801b1f6:	b9b2      	cbnz	r2, 801b226 <__hi0bits+0x36>
 801b1f8:	0403      	lsls	r3, r0, #16
 801b1fa:	2010      	movs	r0, #16
 801b1fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b200:	bf04      	itt	eq
 801b202:	021b      	lsleq	r3, r3, #8
 801b204:	3008      	addeq	r0, #8
 801b206:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b20a:	bf04      	itt	eq
 801b20c:	011b      	lsleq	r3, r3, #4
 801b20e:	3004      	addeq	r0, #4
 801b210:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b214:	bf04      	itt	eq
 801b216:	009b      	lsleq	r3, r3, #2
 801b218:	3002      	addeq	r0, #2
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	db06      	blt.n	801b22c <__hi0bits+0x3c>
 801b21e:	005b      	lsls	r3, r3, #1
 801b220:	d503      	bpl.n	801b22a <__hi0bits+0x3a>
 801b222:	3001      	adds	r0, #1
 801b224:	4770      	bx	lr
 801b226:	2000      	movs	r0, #0
 801b228:	e7e8      	b.n	801b1fc <__hi0bits+0xc>
 801b22a:	2020      	movs	r0, #32
 801b22c:	4770      	bx	lr

0801b22e <__lo0bits>:
 801b22e:	6803      	ldr	r3, [r0, #0]
 801b230:	f013 0207 	ands.w	r2, r3, #7
 801b234:	4601      	mov	r1, r0
 801b236:	d00b      	beq.n	801b250 <__lo0bits+0x22>
 801b238:	07da      	lsls	r2, r3, #31
 801b23a:	d423      	bmi.n	801b284 <__lo0bits+0x56>
 801b23c:	0798      	lsls	r0, r3, #30
 801b23e:	bf49      	itett	mi
 801b240:	085b      	lsrmi	r3, r3, #1
 801b242:	089b      	lsrpl	r3, r3, #2
 801b244:	2001      	movmi	r0, #1
 801b246:	600b      	strmi	r3, [r1, #0]
 801b248:	bf5c      	itt	pl
 801b24a:	600b      	strpl	r3, [r1, #0]
 801b24c:	2002      	movpl	r0, #2
 801b24e:	4770      	bx	lr
 801b250:	b298      	uxth	r0, r3
 801b252:	b9a8      	cbnz	r0, 801b280 <__lo0bits+0x52>
 801b254:	0c1b      	lsrs	r3, r3, #16
 801b256:	2010      	movs	r0, #16
 801b258:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b25c:	bf04      	itt	eq
 801b25e:	0a1b      	lsreq	r3, r3, #8
 801b260:	3008      	addeq	r0, #8
 801b262:	071a      	lsls	r2, r3, #28
 801b264:	bf04      	itt	eq
 801b266:	091b      	lsreq	r3, r3, #4
 801b268:	3004      	addeq	r0, #4
 801b26a:	079a      	lsls	r2, r3, #30
 801b26c:	bf04      	itt	eq
 801b26e:	089b      	lsreq	r3, r3, #2
 801b270:	3002      	addeq	r0, #2
 801b272:	07da      	lsls	r2, r3, #31
 801b274:	d402      	bmi.n	801b27c <__lo0bits+0x4e>
 801b276:	085b      	lsrs	r3, r3, #1
 801b278:	d006      	beq.n	801b288 <__lo0bits+0x5a>
 801b27a:	3001      	adds	r0, #1
 801b27c:	600b      	str	r3, [r1, #0]
 801b27e:	4770      	bx	lr
 801b280:	4610      	mov	r0, r2
 801b282:	e7e9      	b.n	801b258 <__lo0bits+0x2a>
 801b284:	2000      	movs	r0, #0
 801b286:	4770      	bx	lr
 801b288:	2020      	movs	r0, #32
 801b28a:	4770      	bx	lr

0801b28c <__i2b>:
 801b28c:	b510      	push	{r4, lr}
 801b28e:	460c      	mov	r4, r1
 801b290:	2101      	movs	r1, #1
 801b292:	f7ff ff27 	bl	801b0e4 <_Balloc>
 801b296:	2201      	movs	r2, #1
 801b298:	6144      	str	r4, [r0, #20]
 801b29a:	6102      	str	r2, [r0, #16]
 801b29c:	bd10      	pop	{r4, pc}

0801b29e <__multiply>:
 801b29e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2a2:	4614      	mov	r4, r2
 801b2a4:	690a      	ldr	r2, [r1, #16]
 801b2a6:	6923      	ldr	r3, [r4, #16]
 801b2a8:	429a      	cmp	r2, r3
 801b2aa:	bfb8      	it	lt
 801b2ac:	460b      	movlt	r3, r1
 801b2ae:	4688      	mov	r8, r1
 801b2b0:	bfbc      	itt	lt
 801b2b2:	46a0      	movlt	r8, r4
 801b2b4:	461c      	movlt	r4, r3
 801b2b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b2ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801b2be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b2c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b2c6:	eb07 0609 	add.w	r6, r7, r9
 801b2ca:	42b3      	cmp	r3, r6
 801b2cc:	bfb8      	it	lt
 801b2ce:	3101      	addlt	r1, #1
 801b2d0:	f7ff ff08 	bl	801b0e4 <_Balloc>
 801b2d4:	f100 0514 	add.w	r5, r0, #20
 801b2d8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801b2dc:	462b      	mov	r3, r5
 801b2de:	2200      	movs	r2, #0
 801b2e0:	4573      	cmp	r3, lr
 801b2e2:	d316      	bcc.n	801b312 <__multiply+0x74>
 801b2e4:	f104 0214 	add.w	r2, r4, #20
 801b2e8:	f108 0114 	add.w	r1, r8, #20
 801b2ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801b2f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801b2f4:	9300      	str	r3, [sp, #0]
 801b2f6:	9b00      	ldr	r3, [sp, #0]
 801b2f8:	9201      	str	r2, [sp, #4]
 801b2fa:	4293      	cmp	r3, r2
 801b2fc:	d80c      	bhi.n	801b318 <__multiply+0x7a>
 801b2fe:	2e00      	cmp	r6, #0
 801b300:	dd03      	ble.n	801b30a <__multiply+0x6c>
 801b302:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801b306:	2b00      	cmp	r3, #0
 801b308:	d05d      	beq.n	801b3c6 <__multiply+0x128>
 801b30a:	6106      	str	r6, [r0, #16]
 801b30c:	b003      	add	sp, #12
 801b30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b312:	f843 2b04 	str.w	r2, [r3], #4
 801b316:	e7e3      	b.n	801b2e0 <__multiply+0x42>
 801b318:	f8b2 b000 	ldrh.w	fp, [r2]
 801b31c:	f1bb 0f00 	cmp.w	fp, #0
 801b320:	d023      	beq.n	801b36a <__multiply+0xcc>
 801b322:	4689      	mov	r9, r1
 801b324:	46ac      	mov	ip, r5
 801b326:	f04f 0800 	mov.w	r8, #0
 801b32a:	f859 4b04 	ldr.w	r4, [r9], #4
 801b32e:	f8dc a000 	ldr.w	sl, [ip]
 801b332:	b2a3      	uxth	r3, r4
 801b334:	fa1f fa8a 	uxth.w	sl, sl
 801b338:	fb0b a303 	mla	r3, fp, r3, sl
 801b33c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801b340:	f8dc 4000 	ldr.w	r4, [ip]
 801b344:	4443      	add	r3, r8
 801b346:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801b34a:	fb0b 840a 	mla	r4, fp, sl, r8
 801b34e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801b352:	46e2      	mov	sl, ip
 801b354:	b29b      	uxth	r3, r3
 801b356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801b35a:	454f      	cmp	r7, r9
 801b35c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801b360:	f84a 3b04 	str.w	r3, [sl], #4
 801b364:	d82b      	bhi.n	801b3be <__multiply+0x120>
 801b366:	f8cc 8004 	str.w	r8, [ip, #4]
 801b36a:	9b01      	ldr	r3, [sp, #4]
 801b36c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801b370:	3204      	adds	r2, #4
 801b372:	f1ba 0f00 	cmp.w	sl, #0
 801b376:	d020      	beq.n	801b3ba <__multiply+0x11c>
 801b378:	682b      	ldr	r3, [r5, #0]
 801b37a:	4689      	mov	r9, r1
 801b37c:	46a8      	mov	r8, r5
 801b37e:	f04f 0b00 	mov.w	fp, #0
 801b382:	f8b9 c000 	ldrh.w	ip, [r9]
 801b386:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801b38a:	fb0a 440c 	mla	r4, sl, ip, r4
 801b38e:	445c      	add	r4, fp
 801b390:	46c4      	mov	ip, r8
 801b392:	b29b      	uxth	r3, r3
 801b394:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801b398:	f84c 3b04 	str.w	r3, [ip], #4
 801b39c:	f859 3b04 	ldr.w	r3, [r9], #4
 801b3a0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801b3a4:	0c1b      	lsrs	r3, r3, #16
 801b3a6:	fb0a b303 	mla	r3, sl, r3, fp
 801b3aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801b3ae:	454f      	cmp	r7, r9
 801b3b0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801b3b4:	d805      	bhi.n	801b3c2 <__multiply+0x124>
 801b3b6:	f8c8 3004 	str.w	r3, [r8, #4]
 801b3ba:	3504      	adds	r5, #4
 801b3bc:	e79b      	b.n	801b2f6 <__multiply+0x58>
 801b3be:	46d4      	mov	ip, sl
 801b3c0:	e7b3      	b.n	801b32a <__multiply+0x8c>
 801b3c2:	46e0      	mov	r8, ip
 801b3c4:	e7dd      	b.n	801b382 <__multiply+0xe4>
 801b3c6:	3e01      	subs	r6, #1
 801b3c8:	e799      	b.n	801b2fe <__multiply+0x60>
	...

0801b3cc <__pow5mult>:
 801b3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3d0:	4615      	mov	r5, r2
 801b3d2:	f012 0203 	ands.w	r2, r2, #3
 801b3d6:	4606      	mov	r6, r0
 801b3d8:	460f      	mov	r7, r1
 801b3da:	d007      	beq.n	801b3ec <__pow5mult+0x20>
 801b3dc:	3a01      	subs	r2, #1
 801b3de:	4c21      	ldr	r4, [pc, #132]	; (801b464 <__pow5mult+0x98>)
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b3e6:	f7ff fec8 	bl	801b17a <__multadd>
 801b3ea:	4607      	mov	r7, r0
 801b3ec:	10ad      	asrs	r5, r5, #2
 801b3ee:	d035      	beq.n	801b45c <__pow5mult+0x90>
 801b3f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b3f2:	b93c      	cbnz	r4, 801b404 <__pow5mult+0x38>
 801b3f4:	2010      	movs	r0, #16
 801b3f6:	f7fd fdd5 	bl	8018fa4 <malloc>
 801b3fa:	6270      	str	r0, [r6, #36]	; 0x24
 801b3fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b400:	6004      	str	r4, [r0, #0]
 801b402:	60c4      	str	r4, [r0, #12]
 801b404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b40c:	b94c      	cbnz	r4, 801b422 <__pow5mult+0x56>
 801b40e:	f240 2171 	movw	r1, #625	; 0x271
 801b412:	4630      	mov	r0, r6
 801b414:	f7ff ff3a 	bl	801b28c <__i2b>
 801b418:	2300      	movs	r3, #0
 801b41a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b41e:	4604      	mov	r4, r0
 801b420:	6003      	str	r3, [r0, #0]
 801b422:	f04f 0800 	mov.w	r8, #0
 801b426:	07eb      	lsls	r3, r5, #31
 801b428:	d50a      	bpl.n	801b440 <__pow5mult+0x74>
 801b42a:	4639      	mov	r1, r7
 801b42c:	4622      	mov	r2, r4
 801b42e:	4630      	mov	r0, r6
 801b430:	f7ff ff35 	bl	801b29e <__multiply>
 801b434:	4639      	mov	r1, r7
 801b436:	4681      	mov	r9, r0
 801b438:	4630      	mov	r0, r6
 801b43a:	f7ff fe87 	bl	801b14c <_Bfree>
 801b43e:	464f      	mov	r7, r9
 801b440:	106d      	asrs	r5, r5, #1
 801b442:	d00b      	beq.n	801b45c <__pow5mult+0x90>
 801b444:	6820      	ldr	r0, [r4, #0]
 801b446:	b938      	cbnz	r0, 801b458 <__pow5mult+0x8c>
 801b448:	4622      	mov	r2, r4
 801b44a:	4621      	mov	r1, r4
 801b44c:	4630      	mov	r0, r6
 801b44e:	f7ff ff26 	bl	801b29e <__multiply>
 801b452:	6020      	str	r0, [r4, #0]
 801b454:	f8c0 8000 	str.w	r8, [r0]
 801b458:	4604      	mov	r4, r0
 801b45a:	e7e4      	b.n	801b426 <__pow5mult+0x5a>
 801b45c:	4638      	mov	r0, r7
 801b45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b462:	bf00      	nop
 801b464:	080271a8 	.word	0x080271a8

0801b468 <__lshift>:
 801b468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b46c:	460c      	mov	r4, r1
 801b46e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b472:	6923      	ldr	r3, [r4, #16]
 801b474:	6849      	ldr	r1, [r1, #4]
 801b476:	eb0a 0903 	add.w	r9, sl, r3
 801b47a:	68a3      	ldr	r3, [r4, #8]
 801b47c:	4607      	mov	r7, r0
 801b47e:	4616      	mov	r6, r2
 801b480:	f109 0501 	add.w	r5, r9, #1
 801b484:	42ab      	cmp	r3, r5
 801b486:	db32      	blt.n	801b4ee <__lshift+0x86>
 801b488:	4638      	mov	r0, r7
 801b48a:	f7ff fe2b 	bl	801b0e4 <_Balloc>
 801b48e:	2300      	movs	r3, #0
 801b490:	4680      	mov	r8, r0
 801b492:	f100 0114 	add.w	r1, r0, #20
 801b496:	461a      	mov	r2, r3
 801b498:	4553      	cmp	r3, sl
 801b49a:	db2b      	blt.n	801b4f4 <__lshift+0x8c>
 801b49c:	6920      	ldr	r0, [r4, #16]
 801b49e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b4a2:	f104 0314 	add.w	r3, r4, #20
 801b4a6:	f016 021f 	ands.w	r2, r6, #31
 801b4aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b4ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b4b2:	d025      	beq.n	801b500 <__lshift+0x98>
 801b4b4:	f1c2 0e20 	rsb	lr, r2, #32
 801b4b8:	2000      	movs	r0, #0
 801b4ba:	681e      	ldr	r6, [r3, #0]
 801b4bc:	468a      	mov	sl, r1
 801b4be:	4096      	lsls	r6, r2
 801b4c0:	4330      	orrs	r0, r6
 801b4c2:	f84a 0b04 	str.w	r0, [sl], #4
 801b4c6:	f853 0b04 	ldr.w	r0, [r3], #4
 801b4ca:	459c      	cmp	ip, r3
 801b4cc:	fa20 f00e 	lsr.w	r0, r0, lr
 801b4d0:	d814      	bhi.n	801b4fc <__lshift+0x94>
 801b4d2:	6048      	str	r0, [r1, #4]
 801b4d4:	b108      	cbz	r0, 801b4da <__lshift+0x72>
 801b4d6:	f109 0502 	add.w	r5, r9, #2
 801b4da:	3d01      	subs	r5, #1
 801b4dc:	4638      	mov	r0, r7
 801b4de:	f8c8 5010 	str.w	r5, [r8, #16]
 801b4e2:	4621      	mov	r1, r4
 801b4e4:	f7ff fe32 	bl	801b14c <_Bfree>
 801b4e8:	4640      	mov	r0, r8
 801b4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4ee:	3101      	adds	r1, #1
 801b4f0:	005b      	lsls	r3, r3, #1
 801b4f2:	e7c7      	b.n	801b484 <__lshift+0x1c>
 801b4f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801b4f8:	3301      	adds	r3, #1
 801b4fa:	e7cd      	b.n	801b498 <__lshift+0x30>
 801b4fc:	4651      	mov	r1, sl
 801b4fe:	e7dc      	b.n	801b4ba <__lshift+0x52>
 801b500:	3904      	subs	r1, #4
 801b502:	f853 2b04 	ldr.w	r2, [r3], #4
 801b506:	f841 2f04 	str.w	r2, [r1, #4]!
 801b50a:	459c      	cmp	ip, r3
 801b50c:	d8f9      	bhi.n	801b502 <__lshift+0x9a>
 801b50e:	e7e4      	b.n	801b4da <__lshift+0x72>

0801b510 <__mcmp>:
 801b510:	6903      	ldr	r3, [r0, #16]
 801b512:	690a      	ldr	r2, [r1, #16]
 801b514:	1a9b      	subs	r3, r3, r2
 801b516:	b530      	push	{r4, r5, lr}
 801b518:	d10c      	bne.n	801b534 <__mcmp+0x24>
 801b51a:	0092      	lsls	r2, r2, #2
 801b51c:	3014      	adds	r0, #20
 801b51e:	3114      	adds	r1, #20
 801b520:	1884      	adds	r4, r0, r2
 801b522:	4411      	add	r1, r2
 801b524:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b528:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b52c:	4295      	cmp	r5, r2
 801b52e:	d003      	beq.n	801b538 <__mcmp+0x28>
 801b530:	d305      	bcc.n	801b53e <__mcmp+0x2e>
 801b532:	2301      	movs	r3, #1
 801b534:	4618      	mov	r0, r3
 801b536:	bd30      	pop	{r4, r5, pc}
 801b538:	42a0      	cmp	r0, r4
 801b53a:	d3f3      	bcc.n	801b524 <__mcmp+0x14>
 801b53c:	e7fa      	b.n	801b534 <__mcmp+0x24>
 801b53e:	f04f 33ff 	mov.w	r3, #4294967295
 801b542:	e7f7      	b.n	801b534 <__mcmp+0x24>

0801b544 <__mdiff>:
 801b544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b548:	460d      	mov	r5, r1
 801b54a:	4607      	mov	r7, r0
 801b54c:	4611      	mov	r1, r2
 801b54e:	4628      	mov	r0, r5
 801b550:	4614      	mov	r4, r2
 801b552:	f7ff ffdd 	bl	801b510 <__mcmp>
 801b556:	1e06      	subs	r6, r0, #0
 801b558:	d108      	bne.n	801b56c <__mdiff+0x28>
 801b55a:	4631      	mov	r1, r6
 801b55c:	4638      	mov	r0, r7
 801b55e:	f7ff fdc1 	bl	801b0e4 <_Balloc>
 801b562:	2301      	movs	r3, #1
 801b564:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801b568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b56c:	bfa4      	itt	ge
 801b56e:	4623      	movge	r3, r4
 801b570:	462c      	movge	r4, r5
 801b572:	4638      	mov	r0, r7
 801b574:	6861      	ldr	r1, [r4, #4]
 801b576:	bfa6      	itte	ge
 801b578:	461d      	movge	r5, r3
 801b57a:	2600      	movge	r6, #0
 801b57c:	2601      	movlt	r6, #1
 801b57e:	f7ff fdb1 	bl	801b0e4 <_Balloc>
 801b582:	692b      	ldr	r3, [r5, #16]
 801b584:	60c6      	str	r6, [r0, #12]
 801b586:	6926      	ldr	r6, [r4, #16]
 801b588:	f105 0914 	add.w	r9, r5, #20
 801b58c:	f104 0214 	add.w	r2, r4, #20
 801b590:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801b594:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801b598:	f100 0514 	add.w	r5, r0, #20
 801b59c:	f04f 0e00 	mov.w	lr, #0
 801b5a0:	f852 ab04 	ldr.w	sl, [r2], #4
 801b5a4:	f859 4b04 	ldr.w	r4, [r9], #4
 801b5a8:	fa1e f18a 	uxtah	r1, lr, sl
 801b5ac:	b2a3      	uxth	r3, r4
 801b5ae:	1ac9      	subs	r1, r1, r3
 801b5b0:	0c23      	lsrs	r3, r4, #16
 801b5b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801b5b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801b5ba:	b289      	uxth	r1, r1
 801b5bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801b5c0:	45c8      	cmp	r8, r9
 801b5c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801b5c6:	4694      	mov	ip, r2
 801b5c8:	f845 3b04 	str.w	r3, [r5], #4
 801b5cc:	d8e8      	bhi.n	801b5a0 <__mdiff+0x5c>
 801b5ce:	45bc      	cmp	ip, r7
 801b5d0:	d304      	bcc.n	801b5dc <__mdiff+0x98>
 801b5d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801b5d6:	b183      	cbz	r3, 801b5fa <__mdiff+0xb6>
 801b5d8:	6106      	str	r6, [r0, #16]
 801b5da:	e7c5      	b.n	801b568 <__mdiff+0x24>
 801b5dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b5e0:	fa1e f381 	uxtah	r3, lr, r1
 801b5e4:	141a      	asrs	r2, r3, #16
 801b5e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b5ea:	b29b      	uxth	r3, r3
 801b5ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b5f4:	f845 3b04 	str.w	r3, [r5], #4
 801b5f8:	e7e9      	b.n	801b5ce <__mdiff+0x8a>
 801b5fa:	3e01      	subs	r6, #1
 801b5fc:	e7e9      	b.n	801b5d2 <__mdiff+0x8e>

0801b5fe <__d2b>:
 801b5fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b602:	460e      	mov	r6, r1
 801b604:	2101      	movs	r1, #1
 801b606:	ec59 8b10 	vmov	r8, r9, d0
 801b60a:	4615      	mov	r5, r2
 801b60c:	f7ff fd6a 	bl	801b0e4 <_Balloc>
 801b610:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801b614:	4607      	mov	r7, r0
 801b616:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b61a:	bb34      	cbnz	r4, 801b66a <__d2b+0x6c>
 801b61c:	9301      	str	r3, [sp, #4]
 801b61e:	f1b8 0300 	subs.w	r3, r8, #0
 801b622:	d027      	beq.n	801b674 <__d2b+0x76>
 801b624:	a802      	add	r0, sp, #8
 801b626:	f840 3d08 	str.w	r3, [r0, #-8]!
 801b62a:	f7ff fe00 	bl	801b22e <__lo0bits>
 801b62e:	9900      	ldr	r1, [sp, #0]
 801b630:	b1f0      	cbz	r0, 801b670 <__d2b+0x72>
 801b632:	9a01      	ldr	r2, [sp, #4]
 801b634:	f1c0 0320 	rsb	r3, r0, #32
 801b638:	fa02 f303 	lsl.w	r3, r2, r3
 801b63c:	430b      	orrs	r3, r1
 801b63e:	40c2      	lsrs	r2, r0
 801b640:	617b      	str	r3, [r7, #20]
 801b642:	9201      	str	r2, [sp, #4]
 801b644:	9b01      	ldr	r3, [sp, #4]
 801b646:	61bb      	str	r3, [r7, #24]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	bf14      	ite	ne
 801b64c:	2102      	movne	r1, #2
 801b64e:	2101      	moveq	r1, #1
 801b650:	6139      	str	r1, [r7, #16]
 801b652:	b1c4      	cbz	r4, 801b686 <__d2b+0x88>
 801b654:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801b658:	4404      	add	r4, r0
 801b65a:	6034      	str	r4, [r6, #0]
 801b65c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b660:	6028      	str	r0, [r5, #0]
 801b662:	4638      	mov	r0, r7
 801b664:	b003      	add	sp, #12
 801b666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b66a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b66e:	e7d5      	b.n	801b61c <__d2b+0x1e>
 801b670:	6179      	str	r1, [r7, #20]
 801b672:	e7e7      	b.n	801b644 <__d2b+0x46>
 801b674:	a801      	add	r0, sp, #4
 801b676:	f7ff fdda 	bl	801b22e <__lo0bits>
 801b67a:	9b01      	ldr	r3, [sp, #4]
 801b67c:	617b      	str	r3, [r7, #20]
 801b67e:	2101      	movs	r1, #1
 801b680:	6139      	str	r1, [r7, #16]
 801b682:	3020      	adds	r0, #32
 801b684:	e7e5      	b.n	801b652 <__d2b+0x54>
 801b686:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801b68a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b68e:	6030      	str	r0, [r6, #0]
 801b690:	6918      	ldr	r0, [r3, #16]
 801b692:	f7ff fdad 	bl	801b1f0 <__hi0bits>
 801b696:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801b69a:	e7e1      	b.n	801b660 <__d2b+0x62>

0801b69c <_realloc_r>:
 801b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b69e:	4607      	mov	r7, r0
 801b6a0:	4614      	mov	r4, r2
 801b6a2:	460e      	mov	r6, r1
 801b6a4:	b921      	cbnz	r1, 801b6b0 <_realloc_r+0x14>
 801b6a6:	4611      	mov	r1, r2
 801b6a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b6ac:	f7fd bd12 	b.w	80190d4 <_malloc_r>
 801b6b0:	b922      	cbnz	r2, 801b6bc <_realloc_r+0x20>
 801b6b2:	f7fd fcc1 	bl	8019038 <_free_r>
 801b6b6:	4625      	mov	r5, r4
 801b6b8:	4628      	mov	r0, r5
 801b6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6bc:	f000 fa12 	bl	801bae4 <_malloc_usable_size_r>
 801b6c0:	42a0      	cmp	r0, r4
 801b6c2:	d20f      	bcs.n	801b6e4 <_realloc_r+0x48>
 801b6c4:	4621      	mov	r1, r4
 801b6c6:	4638      	mov	r0, r7
 801b6c8:	f7fd fd04 	bl	80190d4 <_malloc_r>
 801b6cc:	4605      	mov	r5, r0
 801b6ce:	2800      	cmp	r0, #0
 801b6d0:	d0f2      	beq.n	801b6b8 <_realloc_r+0x1c>
 801b6d2:	4631      	mov	r1, r6
 801b6d4:	4622      	mov	r2, r4
 801b6d6:	f7fd fc75 	bl	8018fc4 <memcpy>
 801b6da:	4631      	mov	r1, r6
 801b6dc:	4638      	mov	r0, r7
 801b6de:	f7fd fcab 	bl	8019038 <_free_r>
 801b6e2:	e7e9      	b.n	801b6b8 <_realloc_r+0x1c>
 801b6e4:	4635      	mov	r5, r6
 801b6e6:	e7e7      	b.n	801b6b8 <_realloc_r+0x1c>

0801b6e8 <__ssputs_r>:
 801b6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6ec:	688e      	ldr	r6, [r1, #8]
 801b6ee:	429e      	cmp	r6, r3
 801b6f0:	4682      	mov	sl, r0
 801b6f2:	460c      	mov	r4, r1
 801b6f4:	4690      	mov	r8, r2
 801b6f6:	4699      	mov	r9, r3
 801b6f8:	d837      	bhi.n	801b76a <__ssputs_r+0x82>
 801b6fa:	898a      	ldrh	r2, [r1, #12]
 801b6fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b700:	d031      	beq.n	801b766 <__ssputs_r+0x7e>
 801b702:	6825      	ldr	r5, [r4, #0]
 801b704:	6909      	ldr	r1, [r1, #16]
 801b706:	1a6f      	subs	r7, r5, r1
 801b708:	6965      	ldr	r5, [r4, #20]
 801b70a:	2302      	movs	r3, #2
 801b70c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b710:	fb95 f5f3 	sdiv	r5, r5, r3
 801b714:	f109 0301 	add.w	r3, r9, #1
 801b718:	443b      	add	r3, r7
 801b71a:	429d      	cmp	r5, r3
 801b71c:	bf38      	it	cc
 801b71e:	461d      	movcc	r5, r3
 801b720:	0553      	lsls	r3, r2, #21
 801b722:	d530      	bpl.n	801b786 <__ssputs_r+0x9e>
 801b724:	4629      	mov	r1, r5
 801b726:	f7fd fcd5 	bl	80190d4 <_malloc_r>
 801b72a:	4606      	mov	r6, r0
 801b72c:	b950      	cbnz	r0, 801b744 <__ssputs_r+0x5c>
 801b72e:	230c      	movs	r3, #12
 801b730:	f8ca 3000 	str.w	r3, [sl]
 801b734:	89a3      	ldrh	r3, [r4, #12]
 801b736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b73a:	81a3      	strh	r3, [r4, #12]
 801b73c:	f04f 30ff 	mov.w	r0, #4294967295
 801b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b744:	463a      	mov	r2, r7
 801b746:	6921      	ldr	r1, [r4, #16]
 801b748:	f7fd fc3c 	bl	8018fc4 <memcpy>
 801b74c:	89a3      	ldrh	r3, [r4, #12]
 801b74e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b756:	81a3      	strh	r3, [r4, #12]
 801b758:	6126      	str	r6, [r4, #16]
 801b75a:	6165      	str	r5, [r4, #20]
 801b75c:	443e      	add	r6, r7
 801b75e:	1bed      	subs	r5, r5, r7
 801b760:	6026      	str	r6, [r4, #0]
 801b762:	60a5      	str	r5, [r4, #8]
 801b764:	464e      	mov	r6, r9
 801b766:	454e      	cmp	r6, r9
 801b768:	d900      	bls.n	801b76c <__ssputs_r+0x84>
 801b76a:	464e      	mov	r6, r9
 801b76c:	4632      	mov	r2, r6
 801b76e:	4641      	mov	r1, r8
 801b770:	6820      	ldr	r0, [r4, #0]
 801b772:	f7fd fc32 	bl	8018fda <memmove>
 801b776:	68a3      	ldr	r3, [r4, #8]
 801b778:	1b9b      	subs	r3, r3, r6
 801b77a:	60a3      	str	r3, [r4, #8]
 801b77c:	6823      	ldr	r3, [r4, #0]
 801b77e:	441e      	add	r6, r3
 801b780:	6026      	str	r6, [r4, #0]
 801b782:	2000      	movs	r0, #0
 801b784:	e7dc      	b.n	801b740 <__ssputs_r+0x58>
 801b786:	462a      	mov	r2, r5
 801b788:	f7ff ff88 	bl	801b69c <_realloc_r>
 801b78c:	4606      	mov	r6, r0
 801b78e:	2800      	cmp	r0, #0
 801b790:	d1e2      	bne.n	801b758 <__ssputs_r+0x70>
 801b792:	6921      	ldr	r1, [r4, #16]
 801b794:	4650      	mov	r0, sl
 801b796:	f7fd fc4f 	bl	8019038 <_free_r>
 801b79a:	e7c8      	b.n	801b72e <__ssputs_r+0x46>

0801b79c <_svfiprintf_r>:
 801b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7a0:	461d      	mov	r5, r3
 801b7a2:	898b      	ldrh	r3, [r1, #12]
 801b7a4:	061f      	lsls	r7, r3, #24
 801b7a6:	b09d      	sub	sp, #116	; 0x74
 801b7a8:	4680      	mov	r8, r0
 801b7aa:	460c      	mov	r4, r1
 801b7ac:	4616      	mov	r6, r2
 801b7ae:	d50f      	bpl.n	801b7d0 <_svfiprintf_r+0x34>
 801b7b0:	690b      	ldr	r3, [r1, #16]
 801b7b2:	b96b      	cbnz	r3, 801b7d0 <_svfiprintf_r+0x34>
 801b7b4:	2140      	movs	r1, #64	; 0x40
 801b7b6:	f7fd fc8d 	bl	80190d4 <_malloc_r>
 801b7ba:	6020      	str	r0, [r4, #0]
 801b7bc:	6120      	str	r0, [r4, #16]
 801b7be:	b928      	cbnz	r0, 801b7cc <_svfiprintf_r+0x30>
 801b7c0:	230c      	movs	r3, #12
 801b7c2:	f8c8 3000 	str.w	r3, [r8]
 801b7c6:	f04f 30ff 	mov.w	r0, #4294967295
 801b7ca:	e0c8      	b.n	801b95e <_svfiprintf_r+0x1c2>
 801b7cc:	2340      	movs	r3, #64	; 0x40
 801b7ce:	6163      	str	r3, [r4, #20]
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	9309      	str	r3, [sp, #36]	; 0x24
 801b7d4:	2320      	movs	r3, #32
 801b7d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b7da:	2330      	movs	r3, #48	; 0x30
 801b7dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b7e0:	9503      	str	r5, [sp, #12]
 801b7e2:	f04f 0b01 	mov.w	fp, #1
 801b7e6:	4637      	mov	r7, r6
 801b7e8:	463d      	mov	r5, r7
 801b7ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b7ee:	b10b      	cbz	r3, 801b7f4 <_svfiprintf_r+0x58>
 801b7f0:	2b25      	cmp	r3, #37	; 0x25
 801b7f2:	d13e      	bne.n	801b872 <_svfiprintf_r+0xd6>
 801b7f4:	ebb7 0a06 	subs.w	sl, r7, r6
 801b7f8:	d00b      	beq.n	801b812 <_svfiprintf_r+0x76>
 801b7fa:	4653      	mov	r3, sl
 801b7fc:	4632      	mov	r2, r6
 801b7fe:	4621      	mov	r1, r4
 801b800:	4640      	mov	r0, r8
 801b802:	f7ff ff71 	bl	801b6e8 <__ssputs_r>
 801b806:	3001      	adds	r0, #1
 801b808:	f000 80a4 	beq.w	801b954 <_svfiprintf_r+0x1b8>
 801b80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b80e:	4453      	add	r3, sl
 801b810:	9309      	str	r3, [sp, #36]	; 0x24
 801b812:	783b      	ldrb	r3, [r7, #0]
 801b814:	2b00      	cmp	r3, #0
 801b816:	f000 809d 	beq.w	801b954 <_svfiprintf_r+0x1b8>
 801b81a:	2300      	movs	r3, #0
 801b81c:	f04f 32ff 	mov.w	r2, #4294967295
 801b820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b824:	9304      	str	r3, [sp, #16]
 801b826:	9307      	str	r3, [sp, #28]
 801b828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b82c:	931a      	str	r3, [sp, #104]	; 0x68
 801b82e:	462f      	mov	r7, r5
 801b830:	2205      	movs	r2, #5
 801b832:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b836:	4850      	ldr	r0, [pc, #320]	; (801b978 <_svfiprintf_r+0x1dc>)
 801b838:	f7e4 fce2 	bl	8000200 <memchr>
 801b83c:	9b04      	ldr	r3, [sp, #16]
 801b83e:	b9d0      	cbnz	r0, 801b876 <_svfiprintf_r+0xda>
 801b840:	06d9      	lsls	r1, r3, #27
 801b842:	bf44      	itt	mi
 801b844:	2220      	movmi	r2, #32
 801b846:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b84a:	071a      	lsls	r2, r3, #28
 801b84c:	bf44      	itt	mi
 801b84e:	222b      	movmi	r2, #43	; 0x2b
 801b850:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b854:	782a      	ldrb	r2, [r5, #0]
 801b856:	2a2a      	cmp	r2, #42	; 0x2a
 801b858:	d015      	beq.n	801b886 <_svfiprintf_r+0xea>
 801b85a:	9a07      	ldr	r2, [sp, #28]
 801b85c:	462f      	mov	r7, r5
 801b85e:	2000      	movs	r0, #0
 801b860:	250a      	movs	r5, #10
 801b862:	4639      	mov	r1, r7
 801b864:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b868:	3b30      	subs	r3, #48	; 0x30
 801b86a:	2b09      	cmp	r3, #9
 801b86c:	d94d      	bls.n	801b90a <_svfiprintf_r+0x16e>
 801b86e:	b1b8      	cbz	r0, 801b8a0 <_svfiprintf_r+0x104>
 801b870:	e00f      	b.n	801b892 <_svfiprintf_r+0xf6>
 801b872:	462f      	mov	r7, r5
 801b874:	e7b8      	b.n	801b7e8 <_svfiprintf_r+0x4c>
 801b876:	4a40      	ldr	r2, [pc, #256]	; (801b978 <_svfiprintf_r+0x1dc>)
 801b878:	1a80      	subs	r0, r0, r2
 801b87a:	fa0b f000 	lsl.w	r0, fp, r0
 801b87e:	4318      	orrs	r0, r3
 801b880:	9004      	str	r0, [sp, #16]
 801b882:	463d      	mov	r5, r7
 801b884:	e7d3      	b.n	801b82e <_svfiprintf_r+0x92>
 801b886:	9a03      	ldr	r2, [sp, #12]
 801b888:	1d11      	adds	r1, r2, #4
 801b88a:	6812      	ldr	r2, [r2, #0]
 801b88c:	9103      	str	r1, [sp, #12]
 801b88e:	2a00      	cmp	r2, #0
 801b890:	db01      	blt.n	801b896 <_svfiprintf_r+0xfa>
 801b892:	9207      	str	r2, [sp, #28]
 801b894:	e004      	b.n	801b8a0 <_svfiprintf_r+0x104>
 801b896:	4252      	negs	r2, r2
 801b898:	f043 0302 	orr.w	r3, r3, #2
 801b89c:	9207      	str	r2, [sp, #28]
 801b89e:	9304      	str	r3, [sp, #16]
 801b8a0:	783b      	ldrb	r3, [r7, #0]
 801b8a2:	2b2e      	cmp	r3, #46	; 0x2e
 801b8a4:	d10c      	bne.n	801b8c0 <_svfiprintf_r+0x124>
 801b8a6:	787b      	ldrb	r3, [r7, #1]
 801b8a8:	2b2a      	cmp	r3, #42	; 0x2a
 801b8aa:	d133      	bne.n	801b914 <_svfiprintf_r+0x178>
 801b8ac:	9b03      	ldr	r3, [sp, #12]
 801b8ae:	1d1a      	adds	r2, r3, #4
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	9203      	str	r2, [sp, #12]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	bfb8      	it	lt
 801b8b8:	f04f 33ff 	movlt.w	r3, #4294967295
 801b8bc:	3702      	adds	r7, #2
 801b8be:	9305      	str	r3, [sp, #20]
 801b8c0:	4d2e      	ldr	r5, [pc, #184]	; (801b97c <_svfiprintf_r+0x1e0>)
 801b8c2:	7839      	ldrb	r1, [r7, #0]
 801b8c4:	2203      	movs	r2, #3
 801b8c6:	4628      	mov	r0, r5
 801b8c8:	f7e4 fc9a 	bl	8000200 <memchr>
 801b8cc:	b138      	cbz	r0, 801b8de <_svfiprintf_r+0x142>
 801b8ce:	2340      	movs	r3, #64	; 0x40
 801b8d0:	1b40      	subs	r0, r0, r5
 801b8d2:	fa03 f000 	lsl.w	r0, r3, r0
 801b8d6:	9b04      	ldr	r3, [sp, #16]
 801b8d8:	4303      	orrs	r3, r0
 801b8da:	3701      	adds	r7, #1
 801b8dc:	9304      	str	r3, [sp, #16]
 801b8de:	7839      	ldrb	r1, [r7, #0]
 801b8e0:	4827      	ldr	r0, [pc, #156]	; (801b980 <_svfiprintf_r+0x1e4>)
 801b8e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b8e6:	2206      	movs	r2, #6
 801b8e8:	1c7e      	adds	r6, r7, #1
 801b8ea:	f7e4 fc89 	bl	8000200 <memchr>
 801b8ee:	2800      	cmp	r0, #0
 801b8f0:	d038      	beq.n	801b964 <_svfiprintf_r+0x1c8>
 801b8f2:	4b24      	ldr	r3, [pc, #144]	; (801b984 <_svfiprintf_r+0x1e8>)
 801b8f4:	bb13      	cbnz	r3, 801b93c <_svfiprintf_r+0x1a0>
 801b8f6:	9b03      	ldr	r3, [sp, #12]
 801b8f8:	3307      	adds	r3, #7
 801b8fa:	f023 0307 	bic.w	r3, r3, #7
 801b8fe:	3308      	adds	r3, #8
 801b900:	9303      	str	r3, [sp, #12]
 801b902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b904:	444b      	add	r3, r9
 801b906:	9309      	str	r3, [sp, #36]	; 0x24
 801b908:	e76d      	b.n	801b7e6 <_svfiprintf_r+0x4a>
 801b90a:	fb05 3202 	mla	r2, r5, r2, r3
 801b90e:	2001      	movs	r0, #1
 801b910:	460f      	mov	r7, r1
 801b912:	e7a6      	b.n	801b862 <_svfiprintf_r+0xc6>
 801b914:	2300      	movs	r3, #0
 801b916:	3701      	adds	r7, #1
 801b918:	9305      	str	r3, [sp, #20]
 801b91a:	4619      	mov	r1, r3
 801b91c:	250a      	movs	r5, #10
 801b91e:	4638      	mov	r0, r7
 801b920:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b924:	3a30      	subs	r2, #48	; 0x30
 801b926:	2a09      	cmp	r2, #9
 801b928:	d903      	bls.n	801b932 <_svfiprintf_r+0x196>
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d0c8      	beq.n	801b8c0 <_svfiprintf_r+0x124>
 801b92e:	9105      	str	r1, [sp, #20]
 801b930:	e7c6      	b.n	801b8c0 <_svfiprintf_r+0x124>
 801b932:	fb05 2101 	mla	r1, r5, r1, r2
 801b936:	2301      	movs	r3, #1
 801b938:	4607      	mov	r7, r0
 801b93a:	e7f0      	b.n	801b91e <_svfiprintf_r+0x182>
 801b93c:	ab03      	add	r3, sp, #12
 801b93e:	9300      	str	r3, [sp, #0]
 801b940:	4622      	mov	r2, r4
 801b942:	4b11      	ldr	r3, [pc, #68]	; (801b988 <_svfiprintf_r+0x1ec>)
 801b944:	a904      	add	r1, sp, #16
 801b946:	4640      	mov	r0, r8
 801b948:	f7fd fdf2 	bl	8019530 <_printf_float>
 801b94c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b950:	4681      	mov	r9, r0
 801b952:	d1d6      	bne.n	801b902 <_svfiprintf_r+0x166>
 801b954:	89a3      	ldrh	r3, [r4, #12]
 801b956:	065b      	lsls	r3, r3, #25
 801b958:	f53f af35 	bmi.w	801b7c6 <_svfiprintf_r+0x2a>
 801b95c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b95e:	b01d      	add	sp, #116	; 0x74
 801b960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b964:	ab03      	add	r3, sp, #12
 801b966:	9300      	str	r3, [sp, #0]
 801b968:	4622      	mov	r2, r4
 801b96a:	4b07      	ldr	r3, [pc, #28]	; (801b988 <_svfiprintf_r+0x1ec>)
 801b96c:	a904      	add	r1, sp, #16
 801b96e:	4640      	mov	r0, r8
 801b970:	f7fe f894 	bl	8019a9c <_printf_i>
 801b974:	e7ea      	b.n	801b94c <_svfiprintf_r+0x1b0>
 801b976:	bf00      	nop
 801b978:	08027000 	.word	0x08027000
 801b97c:	08027006 	.word	0x08027006
 801b980:	0802700a 	.word	0x0802700a
 801b984:	08019531 	.word	0x08019531
 801b988:	0801b6e9 	.word	0x0801b6e9

0801b98c <__sread>:
 801b98c:	b510      	push	{r4, lr}
 801b98e:	460c      	mov	r4, r1
 801b990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b994:	f000 f8ae 	bl	801baf4 <_read_r>
 801b998:	2800      	cmp	r0, #0
 801b99a:	bfab      	itete	ge
 801b99c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b99e:	89a3      	ldrhlt	r3, [r4, #12]
 801b9a0:	181b      	addge	r3, r3, r0
 801b9a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b9a6:	bfac      	ite	ge
 801b9a8:	6563      	strge	r3, [r4, #84]	; 0x54
 801b9aa:	81a3      	strhlt	r3, [r4, #12]
 801b9ac:	bd10      	pop	{r4, pc}

0801b9ae <__swrite>:
 801b9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9b2:	461f      	mov	r7, r3
 801b9b4:	898b      	ldrh	r3, [r1, #12]
 801b9b6:	05db      	lsls	r3, r3, #23
 801b9b8:	4605      	mov	r5, r0
 801b9ba:	460c      	mov	r4, r1
 801b9bc:	4616      	mov	r6, r2
 801b9be:	d505      	bpl.n	801b9cc <__swrite+0x1e>
 801b9c0:	2302      	movs	r3, #2
 801b9c2:	2200      	movs	r2, #0
 801b9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9c8:	f000 f868 	bl	801ba9c <_lseek_r>
 801b9cc:	89a3      	ldrh	r3, [r4, #12]
 801b9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b9d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b9d6:	81a3      	strh	r3, [r4, #12]
 801b9d8:	4632      	mov	r2, r6
 801b9da:	463b      	mov	r3, r7
 801b9dc:	4628      	mov	r0, r5
 801b9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b9e2:	f000 b817 	b.w	801ba14 <_write_r>

0801b9e6 <__sseek>:
 801b9e6:	b510      	push	{r4, lr}
 801b9e8:	460c      	mov	r4, r1
 801b9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9ee:	f000 f855 	bl	801ba9c <_lseek_r>
 801b9f2:	1c43      	adds	r3, r0, #1
 801b9f4:	89a3      	ldrh	r3, [r4, #12]
 801b9f6:	bf15      	itete	ne
 801b9f8:	6560      	strne	r0, [r4, #84]	; 0x54
 801b9fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b9fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ba02:	81a3      	strheq	r3, [r4, #12]
 801ba04:	bf18      	it	ne
 801ba06:	81a3      	strhne	r3, [r4, #12]
 801ba08:	bd10      	pop	{r4, pc}

0801ba0a <__sclose>:
 801ba0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba0e:	f000 b813 	b.w	801ba38 <_close_r>
	...

0801ba14 <_write_r>:
 801ba14:	b538      	push	{r3, r4, r5, lr}
 801ba16:	4c07      	ldr	r4, [pc, #28]	; (801ba34 <_write_r+0x20>)
 801ba18:	4605      	mov	r5, r0
 801ba1a:	4608      	mov	r0, r1
 801ba1c:	4611      	mov	r1, r2
 801ba1e:	2200      	movs	r2, #0
 801ba20:	6022      	str	r2, [r4, #0]
 801ba22:	461a      	mov	r2, r3
 801ba24:	f7f6 ff9d 	bl	8012962 <_write>
 801ba28:	1c43      	adds	r3, r0, #1
 801ba2a:	d102      	bne.n	801ba32 <_write_r+0x1e>
 801ba2c:	6823      	ldr	r3, [r4, #0]
 801ba2e:	b103      	cbz	r3, 801ba32 <_write_r+0x1e>
 801ba30:	602b      	str	r3, [r5, #0]
 801ba32:	bd38      	pop	{r3, r4, r5, pc}
 801ba34:	200085e8 	.word	0x200085e8

0801ba38 <_close_r>:
 801ba38:	b538      	push	{r3, r4, r5, lr}
 801ba3a:	4c06      	ldr	r4, [pc, #24]	; (801ba54 <_close_r+0x1c>)
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	4605      	mov	r5, r0
 801ba40:	4608      	mov	r0, r1
 801ba42:	6023      	str	r3, [r4, #0]
 801ba44:	f7f6 ffa9 	bl	801299a <_close>
 801ba48:	1c43      	adds	r3, r0, #1
 801ba4a:	d102      	bne.n	801ba52 <_close_r+0x1a>
 801ba4c:	6823      	ldr	r3, [r4, #0]
 801ba4e:	b103      	cbz	r3, 801ba52 <_close_r+0x1a>
 801ba50:	602b      	str	r3, [r5, #0]
 801ba52:	bd38      	pop	{r3, r4, r5, pc}
 801ba54:	200085e8 	.word	0x200085e8

0801ba58 <_fstat_r>:
 801ba58:	b538      	push	{r3, r4, r5, lr}
 801ba5a:	4c07      	ldr	r4, [pc, #28]	; (801ba78 <_fstat_r+0x20>)
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	4605      	mov	r5, r0
 801ba60:	4608      	mov	r0, r1
 801ba62:	4611      	mov	r1, r2
 801ba64:	6023      	str	r3, [r4, #0]
 801ba66:	f7f6 ffa4 	bl	80129b2 <_fstat>
 801ba6a:	1c43      	adds	r3, r0, #1
 801ba6c:	d102      	bne.n	801ba74 <_fstat_r+0x1c>
 801ba6e:	6823      	ldr	r3, [r4, #0]
 801ba70:	b103      	cbz	r3, 801ba74 <_fstat_r+0x1c>
 801ba72:	602b      	str	r3, [r5, #0]
 801ba74:	bd38      	pop	{r3, r4, r5, pc}
 801ba76:	bf00      	nop
 801ba78:	200085e8 	.word	0x200085e8

0801ba7c <_isatty_r>:
 801ba7c:	b538      	push	{r3, r4, r5, lr}
 801ba7e:	4c06      	ldr	r4, [pc, #24]	; (801ba98 <_isatty_r+0x1c>)
 801ba80:	2300      	movs	r3, #0
 801ba82:	4605      	mov	r5, r0
 801ba84:	4608      	mov	r0, r1
 801ba86:	6023      	str	r3, [r4, #0]
 801ba88:	f7f6 ffa3 	bl	80129d2 <_isatty>
 801ba8c:	1c43      	adds	r3, r0, #1
 801ba8e:	d102      	bne.n	801ba96 <_isatty_r+0x1a>
 801ba90:	6823      	ldr	r3, [r4, #0]
 801ba92:	b103      	cbz	r3, 801ba96 <_isatty_r+0x1a>
 801ba94:	602b      	str	r3, [r5, #0]
 801ba96:	bd38      	pop	{r3, r4, r5, pc}
 801ba98:	200085e8 	.word	0x200085e8

0801ba9c <_lseek_r>:
 801ba9c:	b538      	push	{r3, r4, r5, lr}
 801ba9e:	4c07      	ldr	r4, [pc, #28]	; (801babc <_lseek_r+0x20>)
 801baa0:	4605      	mov	r5, r0
 801baa2:	4608      	mov	r0, r1
 801baa4:	4611      	mov	r1, r2
 801baa6:	2200      	movs	r2, #0
 801baa8:	6022      	str	r2, [r4, #0]
 801baaa:	461a      	mov	r2, r3
 801baac:	f7f6 ff9c 	bl	80129e8 <_lseek>
 801bab0:	1c43      	adds	r3, r0, #1
 801bab2:	d102      	bne.n	801baba <_lseek_r+0x1e>
 801bab4:	6823      	ldr	r3, [r4, #0]
 801bab6:	b103      	cbz	r3, 801baba <_lseek_r+0x1e>
 801bab8:	602b      	str	r3, [r5, #0]
 801baba:	bd38      	pop	{r3, r4, r5, pc}
 801babc:	200085e8 	.word	0x200085e8

0801bac0 <__ascii_mbtowc>:
 801bac0:	b082      	sub	sp, #8
 801bac2:	b901      	cbnz	r1, 801bac6 <__ascii_mbtowc+0x6>
 801bac4:	a901      	add	r1, sp, #4
 801bac6:	b142      	cbz	r2, 801bada <__ascii_mbtowc+0x1a>
 801bac8:	b14b      	cbz	r3, 801bade <__ascii_mbtowc+0x1e>
 801baca:	7813      	ldrb	r3, [r2, #0]
 801bacc:	600b      	str	r3, [r1, #0]
 801bace:	7812      	ldrb	r2, [r2, #0]
 801bad0:	1c10      	adds	r0, r2, #0
 801bad2:	bf18      	it	ne
 801bad4:	2001      	movne	r0, #1
 801bad6:	b002      	add	sp, #8
 801bad8:	4770      	bx	lr
 801bada:	4610      	mov	r0, r2
 801badc:	e7fb      	b.n	801bad6 <__ascii_mbtowc+0x16>
 801bade:	f06f 0001 	mvn.w	r0, #1
 801bae2:	e7f8      	b.n	801bad6 <__ascii_mbtowc+0x16>

0801bae4 <_malloc_usable_size_r>:
 801bae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bae8:	1f18      	subs	r0, r3, #4
 801baea:	2b00      	cmp	r3, #0
 801baec:	bfbc      	itt	lt
 801baee:	580b      	ldrlt	r3, [r1, r0]
 801baf0:	18c0      	addlt	r0, r0, r3
 801baf2:	4770      	bx	lr

0801baf4 <_read_r>:
 801baf4:	b538      	push	{r3, r4, r5, lr}
 801baf6:	4c07      	ldr	r4, [pc, #28]	; (801bb14 <_read_r+0x20>)
 801baf8:	4605      	mov	r5, r0
 801bafa:	4608      	mov	r0, r1
 801bafc:	4611      	mov	r1, r2
 801bafe:	2200      	movs	r2, #0
 801bb00:	6022      	str	r2, [r4, #0]
 801bb02:	461a      	mov	r2, r3
 801bb04:	f7f6 ff10 	bl	8012928 <_read>
 801bb08:	1c43      	adds	r3, r0, #1
 801bb0a:	d102      	bne.n	801bb12 <_read_r+0x1e>
 801bb0c:	6823      	ldr	r3, [r4, #0]
 801bb0e:	b103      	cbz	r3, 801bb12 <_read_r+0x1e>
 801bb10:	602b      	str	r3, [r5, #0]
 801bb12:	bd38      	pop	{r3, r4, r5, pc}
 801bb14:	200085e8 	.word	0x200085e8

0801bb18 <__ascii_wctomb>:
 801bb18:	b149      	cbz	r1, 801bb2e <__ascii_wctomb+0x16>
 801bb1a:	2aff      	cmp	r2, #255	; 0xff
 801bb1c:	bf85      	ittet	hi
 801bb1e:	238a      	movhi	r3, #138	; 0x8a
 801bb20:	6003      	strhi	r3, [r0, #0]
 801bb22:	700a      	strbls	r2, [r1, #0]
 801bb24:	f04f 30ff 	movhi.w	r0, #4294967295
 801bb28:	bf98      	it	ls
 801bb2a:	2001      	movls	r0, #1
 801bb2c:	4770      	bx	lr
 801bb2e:	4608      	mov	r0, r1
 801bb30:	4770      	bx	lr
	...

0801bb34 <_init>:
 801bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb36:	bf00      	nop
 801bb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb3a:	bc08      	pop	{r3}
 801bb3c:	469e      	mov	lr, r3
 801bb3e:	4770      	bx	lr

0801bb40 <_fini>:
 801bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb42:	bf00      	nop
 801bb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb46:	bc08      	pop	{r3}
 801bb48:	469e      	mov	lr, r3
 801bb4a:	4770      	bx	lr
